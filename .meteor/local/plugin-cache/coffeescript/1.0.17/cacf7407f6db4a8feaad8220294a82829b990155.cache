{"source":"__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar FlowRouterHelpers, currentRouteName, currentRouteOption, func, helpers, isSubReady, name, param, pathFor, queryParam, subsReady, urlFor,\n  slice = [].slice,\n  hasProp = {}.hasOwnProperty;\n\nsubsReady = function() {\n  var subs;\n  subs = 1 <= arguments.length ? slice.call(arguments, 0) : [];\n  if (subs.length === 1) {\n    return FlowRouter.subsReady();\n  }\n  subs = subs.slice(0, subs.length - 1);\n  return _.reduce(subs, function(memo, sub) {\n    return memo && FlowRouter.subsReady(sub);\n  }, true);\n};\n\npathFor = function(path, view) {\n  var hashBang, query, ref;\n  if (view == null) {\n    view = {\n      hash: {}\n    };\n  }\n  if (!path) {\n    throw new Error('no path defined');\n  }\n  if (!view.hash) {\n    view = {\n      hash: view\n    };\n  }\n  if (((ref = path.hash) != null ? ref.route : void 0) != null) {\n    view = path;\n    path = view.hash.route;\n    delete view.hash.route;\n  }\n  query = view.hash.query ? FlowRouter._qs.parse(view.hash.query) : {};\n  hashBang = view.hash.hash ? view.hash.hash : '';\n  return FlowRouter.path(path, view.hash, query) + (hashBang ? \"#\" + hashBang : '');\n};\n\nurlFor = function(path, view) {\n  var relativePath;\n  relativePath = pathFor(path, view);\n  return Meteor.absoluteUrl(relativePath.substr(1));\n};\n\nparam = function(name) {\n  return FlowRouter.getParam(name);\n};\n\nqueryParam = function(key) {\n  return FlowRouter.getQueryParam(key);\n};\n\ncurrentRouteName = function() {\n  return FlowRouter.getRouteName();\n};\n\ncurrentRouteOption = function(optionName) {\n  return FlowRouter.current().route.options[optionName];\n};\n\nisSubReady = function(sub) {\n  if (sub) {\n    return FlowRouter.subsReady(sub);\n  }\n  return FlowRouter.subsReady();\n};\n\nhelpers = {\n  subsReady: subsReady,\n  pathFor: pathFor,\n  urlFor: urlFor,\n  param: param,\n  queryParam: queryParam,\n  currentRouteName: currentRouteName,\n  isSubReady: isSubReady,\n  currentRouteOption: currentRouteOption\n};\n\nif (Meteor.isClient) {\n  for (name in helpers) {\n    if (!hasProp.call(helpers, name)) continue;\n    func = helpers[name];\n    Template.registerHelper(name, func);\n  }\n}\n\nif (Meteor.isServer) {\n  FlowRouterHelpers = {\n    pathFor: pathFor,\n    urlFor: urlFor\n  };\n}\n","sourceMap":{"version":3,"file":"/client/helpers.coffee.js","sourceRoot":"","sources":["/packages/arillo_flow-router-helpers/client/helpers.coffee"],"names":[],"mappings":"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","sourcesContent":["# check for subscriptions to be ready\nsubsReady = (subs...) ->\n  return FlowRouter.subsReady() if subs.length is 1\n  subs = subs.slice(0, subs.length - 1)\n  _.reduce subs, (memo, sub) ->\n    memo and FlowRouter.subsReady(sub)\n  , true\n\n# return path\npathFor = (path, view = {hash:{}}) ->\n  throw new Error('no path defined') unless path\n  # set if run on server\n  view = hash: view unless view.hash\n  if path.hash?.route?\n    view = path\n    path = view.hash.route\n    delete view.hash.route\n  query = if view.hash.query then FlowRouter._qs.parse(view.hash.query) else {}\n  hashBang = if view.hash.hash then view.hash.hash else ''\n  FlowRouter.path(path, view.hash, query) + (if hashBang then \"##{hashBang}\" else '')\n\n# return absolute url\nurlFor = (path, view) ->\n  relativePath = pathFor(path, view)\n  Meteor.absoluteUrl(relativePath.substr(1))\n\n# get parameter\nparam = (name) ->\n  FlowRouter.getParam(name);\n\n# get query parameter\nqueryParam = (key) ->\n  FlowRouter.getQueryParam(key);\n\n# get current route name\ncurrentRouteName = () ->\n  FlowRouter.getRouteName()\n\n# get current route options\ncurrentRouteOption = (optionName) ->\n  FlowRouter.current().route.options[optionName]\n\n# deprecated\nisSubReady = (sub) ->\n  return FlowRouter.subsReady(sub) if sub\n  return FlowRouter.subsReady()\n\nhelpers =\n  subsReady: subsReady\n  pathFor: pathFor\n  urlFor: urlFor\n  param: param\n  queryParam: queryParam\n  currentRouteName: currentRouteName\n  isSubReady: isSubReady\n  currentRouteOption: currentRouteOption\n\nif Meteor.isClient\n  Template.registerHelper name, func for own name, func of helpers\n  \nif Meteor.isServer\n  FlowRouterHelpers = \n    pathFor: pathFor\n    urlFor: urlFor\n"]}}