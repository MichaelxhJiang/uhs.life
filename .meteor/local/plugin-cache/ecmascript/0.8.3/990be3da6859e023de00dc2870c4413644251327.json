{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/http/httpcall_common.js","filenameRelative":"packages/http/httpcall_common.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/http/httpcall_common.js.map","sourceFileName":"packages/http/httpcall_common.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"httpcall_common"},"ignored":false,"code":"var MAX_LENGTH = 500; // if you change this, also change the appropriate test\n\nmakeErrorByStatus = function (statusCode, content) {\n  var message = \"failed [\" + statusCode + \"]\";\n\n  if (content) {\n    var stringContent = typeof content == \"string\" ? content : content.toString();\n    message += ' ' + truncate(stringContent.replace(/\\n/g, ' '), MAX_LENGTH);\n  }\n\n  return new Error(message);\n};\n\nfunction truncate(str, length) {\n  return str.length > length ? str.slice(0, length) + '...' : str;\n} // Fill in `response.data` if the content-type is JSON.\n\n\npopulateData = function (response) {\n  // Read Content-Type header, up to a ';' if there is one.\n  // A typical header might be \"application/json; charset=utf-8\"\n  // or just \"application/json\".\n  var contentType = (response.headers['content-type'] || ';').split(';')[0]; // Only try to parse data as JSON if server sets correct content type.\n\n  if (_.include(['application/json', 'text/javascript', 'application/javascript', 'application/x-javascript'], contentType)) {\n    try {\n      response.data = JSON.parse(response.content);\n    } catch (err) {\n      response.data = null;\n    }\n  } else {\n    response.data = null;\n  }\n};\n\nHTTP = {}; /**\n            * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n            * @param {String} url The URL to which the request should be sent.\n            * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n            * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n            * @locus Anywhere\n            */\n\nHTTP.get = function () /* varargs */{\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));\n}; /**\n    * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n    * @param {String} url The URL to which the request should be sent.\n    * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n    * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n    * @locus Anywhere\n    */\n\nHTTP.post = function () /* varargs */{\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));\n}; /**\n    * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n    * @param {String} url The URL to which the request should be sent.\n    * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n    * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n    * @locus Anywhere\n    */\n\nHTTP.put = function () /* varargs */{\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));\n}; /**\n    * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)\n    * @param {String} url The URL to which the request should be sent.\n    * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n    * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n    * @locus Anywhere\n    */\n\nHTTP.del = function () /* varargs */{\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));\n}; /**\n    * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PATCH\" as the first argument.\n    * @param {String} url The URL to which the request should be sent.\n    * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n    * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n    * @locus Anywhere\n    */\n\nHTTP.patch = function () /* varargs */{\n  return HTTP.call.apply(this, [\"PATCH\"].concat(_.toArray(arguments)));\n};","map":{"version":3,"sources":["packages/http/httpcall_common.js"],"names":["MAX_LENGTH","makeErrorByStatus","statusCode","content","message","stringContent","toString","truncate","replace","Error","str","length","slice","populateData","response","contentType","headers","split","_","include","data","JSON","parse","err","HTTP","get","call","apply","concat","toArray","arguments","post","put","del","patch"],"mappings":"AAAA,IAAMA,aAAa,GAAnB,C,CAAwB;;AAExBC,oBAAoB,UAASC,UAAT,EAAqBC,OAArB,EAA8B;AAChD,MAAIC,uBAAqBF,UAArB,MAAJ;;AAEA,MAAIC,OAAJ,EAAa;AACX,QAAME,gBAAgB,OAAOF,OAAP,IAAkB,QAAlB,GACpBA,OADoB,GACVA,QAAQG,QAAR,EADZ;AAGAF,eAAW,MAAMG,SAASF,cAAcG,OAAd,CAAsB,KAAtB,EAA6B,GAA7B,CAAT,EAA4CR,UAA5C,CAAjB;AACD;;AAED,SAAO,IAAIS,KAAJ,CAAUL,OAAV,CAAP;AACD,CAXD;;AAaA,SAASG,QAAT,CAAkBG,GAAlB,EAAuBC,MAAvB,EAA+B;AAC7B,SAAOD,IAAIC,MAAJ,GAAaA,MAAb,GAAsBD,IAAIE,KAAJ,CAAU,CAAV,EAAaD,MAAb,IAAuB,KAA7C,GAAqDD,GAA5D;AACD,C,CAED;;;AACAG,eAAe,UAASC,QAAT,EAAmB;AAChC;AACA;AACA;AACA,MAAIC,cAAc,CAACD,SAASE,OAAT,CAAiB,cAAjB,KAAoC,GAArC,EAA0CC,KAA1C,CAAgD,GAAhD,EAAqD,CAArD,CAAlB,CAJgC,CAMhC;;AACA,MAAIC,EAAEC,OAAF,CAAU,CAAC,kBAAD,EAAqB,iBAArB,EACV,wBADU,EACgB,0BADhB,CAAV,EACuDJ,WADvD,CAAJ,EACyE;AACvE,QAAI;AACFD,eAASM,IAAT,GAAgBC,KAAKC,KAAL,CAAWR,SAASX,OAApB,CAAhB;AACD,KAFD,CAEE,OAAOoB,GAAP,EAAY;AACZT,eAASM,IAAT,GAAgB,IAAhB;AACD;AACF,GAPD,MAOO;AACLN,aAASM,IAAT,GAAgB,IAAhB;AACD;AACF,CAjBD;;AAmBAI,OAAO,EAAP,C,CAEA;;;;;;;;AAOAA,KAAKC,GAAL,GAAW,YAAU,aAAe;AAClC,SAAOD,KAAKE,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsB,CAAC,KAAD,EAAQC,MAAR,CAAeV,EAAEW,OAAF,CAAUC,SAAV,CAAf,CAAtB,CAAP;AACD,CAFD,C,CAIA;;;;;;;;AAOAN,KAAKO,IAAL,GAAY,YAAU,aAAe;AACnC,SAAOP,KAAKE,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsB,CAAC,MAAD,EAASC,MAAT,CAAgBV,EAAEW,OAAF,CAAUC,SAAV,CAAhB,CAAtB,CAAP;AACD,CAFD,C,CAIA;;;;;;;;AAOAN,KAAKQ,GAAL,GAAW,YAAU,aAAe;AAClC,SAAOR,KAAKE,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsB,CAAC,KAAD,EAAQC,MAAR,CAAeV,EAAEW,OAAF,CAAUC,SAAV,CAAf,CAAtB,CAAP;AACD,CAFD,C,CAIA;;;;;;;;AAOAN,KAAKS,GAAL,GAAW,YAAU,aAAe;AAClC,SAAOT,KAAKE,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsB,CAAC,QAAD,EAAWC,MAAX,CAAkBV,EAAEW,OAAF,CAAUC,SAAV,CAAlB,CAAtB,CAAP;AACD,CAFD,C,CAIA;;;;;;;;AAOAN,KAAKU,KAAL,GAAa,YAAU,aAAe;AACpC,SAAOV,KAAKE,IAAL,CAAUC,KAAV,CAAgB,IAAhB,EAAsB,CAAC,OAAD,EAAUC,MAAV,CAAiBV,EAAEW,OAAF,CAAUC,SAAV,CAAjB,CAAtB,CAAP;AACD,CAFD","file":"packages/http/httpcall_common.js.map","sourcesContent":["const MAX_LENGTH = 500; // if you change this, also change the appropriate test\n\nmakeErrorByStatus = function(statusCode, content) {\n  let message = `failed [${statusCode}]`;\n\n  if (content) {\n    const stringContent = typeof content == \"string\" ?\n      content : content.toString();\n\n    message += ' ' + truncate(stringContent.replace(/\\n/g, ' '), MAX_LENGTH);\n  }\n\n  return new Error(message);\n};\n\nfunction truncate(str, length) {\n  return str.length > length ? str.slice(0, length) + '...' : str;\n}\n\n// Fill in `response.data` if the content-type is JSON.\npopulateData = function(response) {\n  // Read Content-Type header, up to a ';' if there is one.\n  // A typical header might be \"application/json; charset=utf-8\"\n  // or just \"application/json\".\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];\n\n  // Only try to parse data as JSON if server sets correct content type.\n  if (_.include(['application/json', 'text/javascript',\n      'application/javascript', 'application/x-javascript'], contentType)) {\n    try {\n      response.data = JSON.parse(response.content);\n    } catch (err) {\n      response.data = null;\n    }\n  } else {\n    response.data = null;\n  }\n};\n\nHTTP = {};\n\n/**\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.get = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.post = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.put = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.del = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PATCH\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.patch = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"PATCH\"].concat(_.toArray(arguments)));\n};\n"]},"hash":"990be3da6859e023de00dc2870c4413644251327"}
