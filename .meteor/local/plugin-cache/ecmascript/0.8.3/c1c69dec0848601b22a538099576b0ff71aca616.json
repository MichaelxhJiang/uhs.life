{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"./namespace.js","imported":["DDP","LivedataTest"],"specifiers":[{"kind":"named","imported":"DDP","local":"DDP"},{"kind":"named","imported":"LivedataTest","local":"LivedataTest"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/ddp-client/livedata_tests.js","filenameRelative":"packages/ddp-client/livedata_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/ddp-client/livedata_tests.js.map","sourceFileName":"packages/ddp-client/livedata_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"livedata_tests"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar DDP = void 0,\n    LivedataTest = void 0;\nmodule.watch(require(\"./namespace.js\"), {\n  DDP: function (v) {\n    DDP = v;\n  },\n  LivedataTest: function (v) {\n    LivedataTest = v;\n  }\n}, 0);\n\n// XXX should check error codes\nvar failure = function (test, code, reason) {\n  return function (error, result) {\n    test.equal(result, undefined);\n    test.isTrue(error && (typeof error === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(error)) === \"object\");\n\n    if (error && (typeof error === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(error)) === \"object\") {\n      if (typeof code === \"number\") {\n        test.instanceOf(error, Meteor.Error);\n        code && test.equal(error.error, code);\n        reason && test.equal(error.reason, reason); // XXX should check that other keys aren't present.. should\n        // probably use something like the Matcher we used to have\n      } else {\n        // for normal Javascript errors\n        test.instanceOf(error, Error);\n        test.equal(error.message, code);\n      }\n    }\n  };\n};\n\nvar failureOnStopped = function (test, code, reason) {\n  var f = failure(test, code, reason);\n  return function (error) {\n    if (error) {\n      f(error);\n    }\n  };\n};\n\nTinytest.add(\"livedata - Meteor.Error\", function (test) {\n  var error = new Meteor.Error(123, \"kittens\", \"puppies\");\n  test.instanceOf(error, Meteor.Error);\n  test.instanceOf(error, Error);\n  test.equal(error.error, 123);\n  test.equal(error.reason, \"kittens\");\n  test.equal(error.details, \"puppies\");\n});\n\nif (Meteor.isServer) {\n  Tinytest.add(\"livedata - version negotiation\", function (test) {\n    var versionCheck = function (clientVersions, serverVersions, expected) {\n      test.equal(DDPServer._calculateVersion(clientVersions, serverVersions), expected);\n    };\n\n    versionCheck([\"A\", \"B\", \"C\"], [\"A\", \"B\", \"C\"], \"A\");\n    versionCheck([\"B\", \"C\"], [\"A\", \"B\", \"C\"], \"B\");\n    versionCheck([\"A\", \"B\", \"C\"], [\"B\", \"C\"], \"B\");\n    versionCheck([\"foo\", \"bar\", \"baz\"], [\"A\", \"B\", \"C\"], \"A\");\n  });\n}\n\nTinytest.add(\"livedata - methods with colliding names\", function (test) {\n  var x = Random.id();\n  var m = {};\n\n  m[x] = function () {};\n\n  Meteor.methods(m);\n  test.throws(function () {\n    Meteor.methods(m);\n  });\n});\nTinytest.add(\"livedata - non-function method\", function (test) {\n  var x = Random.id();\n  var m = {};\n  m[x] = 'kitten';\n  test.throws(function () {\n    Meteor.methods(m);\n  });\n});\n\nvar echoTest = function (item) {\n  return function (test, expect) {\n    if (Meteor.isServer) {\n      test.equal(Meteor.call(\"echo\", item), [item]);\n      test.equal(Meteor.call(\"echoOne\", item), item);\n    }\n\n    if (Meteor.isClient) test.equal(Meteor.call(\"echo\", item), undefined);\n    test.equal(Meteor.call(\"echo\", item, expect(undefined, [item])), undefined);\n    test.equal(Meteor.call(\"echoOne\", item, expect(undefined, item)), undefined);\n  };\n};\n\ntestAsyncMulti(\"livedata - basic method invocation\", [// Unknown methods\nfunction (test, expect) {\n  if (Meteor.isServer) {\n    // On server, with no callback, throws exception\n    try {\n      var ret = Meteor.call(\"unknown method\");\n    } catch (e) {\n      test.equal(e.error, 404);\n      var threw = true;\n    }\n\n    test.isTrue(threw);\n    test.equal(ret, undefined);\n  }\n\n  if (Meteor.isClient) {\n    // On client, with no callback, just returns undefined\n    var ret = Meteor.call(\"unknown method\");\n    test.equal(ret, undefined);\n  } // On either, with a callback, calls the callback and does not throw\n\n\n  var ret = Meteor.call(\"unknown method\", expect(failure(test, 404, \"Method 'unknown method' not found\")));\n  test.equal(ret, undefined);\n}, function (test, expect) {\n  // make sure 'undefined' is preserved as such, instead of turning\n  // into null (JSON does not have 'undefined' so there is special\n  // code for this)\n  if (Meteor.isServer) test.equal(Meteor.call(\"nothing\"), undefined);\n  if (Meteor.isClient) test.equal(Meteor.call(\"nothing\"), undefined);\n  test.equal(Meteor.call(\"nothing\", expect(undefined, undefined)), undefined);\n}, function (test, expect) {\n  if (Meteor.isServer) test.equal(Meteor.call(\"echo\"), []);\n  if (Meteor.isClient) test.equal(Meteor.call(\"echo\"), undefined);\n  test.equal(Meteor.call(\"echo\", expect(undefined, [])), undefined);\n}, echoTest(new Date()), echoTest({\n  d: new Date(),\n  s: \"foobarbaz\"\n}), echoTest([new Date(), \"foobarbaz\"]), echoTest(new Mongo.ObjectID()), echoTest({\n  o: new Mongo.ObjectID()\n}), echoTest({\n  $date: 30\n}), // literal\nechoTest({\n  $literal: {\n    $date: 30\n  }\n}), echoTest(12), echoTest(Infinity), echoTest(-Infinity), function (test, expect) {\n  if (Meteor.isServer) test.equal(Meteor.call(\"echo\", 12, {\n    x: 13\n  }), [12, {\n    x: 13\n  }]);\n  if (Meteor.isClient) test.equal(Meteor.call(\"echo\", 12, {\n    x: 13\n  }), undefined);\n  test.equal(Meteor.call(\"echo\", 12, {\n    x: 13\n  }, expect(undefined, [12, {\n    x: 13\n  }])), undefined);\n}, // test that `wait: false` is respected\nfunction (test, expect) {\n  if (Meteor.isClient) {\n    // For test isolation\n    var token = Random.id();\n    Meteor.apply(\"delayedTrue\", [token], {\n      wait: false\n    }, expect(function (err, res) {\n      test.equal(res, false);\n    }));\n    Meteor.apply(\"makeDelayedTrueImmediatelyReturnFalse\", [token]);\n  }\n}, // test that `wait: true` is respected\nfunction (test, expect) {\n  if (Meteor.isClient) {\n    var token = Random.id();\n    Meteor.apply(\"delayedTrue\", [token], {\n      wait: true\n    }, expect(function (err, res) {\n      test.equal(res, true);\n    }));\n    Meteor.apply(\"makeDelayedTrueImmediatelyReturnFalse\", [token]);\n  }\n}, function (test, expect) {\n  // No callback\n  if (Meteor.isServer) {\n    test.throws(function () {\n      Meteor.call(\"exception\", \"both\");\n    });\n    test.throws(function () {\n      Meteor.call(\"exception\", \"server\");\n    }); // No exception, because no code will run on the client\n\n    test.equal(Meteor.call(\"exception\", \"client\"), undefined);\n  }\n\n  if (Meteor.isClient) {\n    // The client exception is thrown away because it's in the\n    // stub. The server exception is throw away because we didn't\n    // give a callback.\n    test.equal(Meteor.call(\"exception\", \"both\"), undefined);\n    test.equal(Meteor.call(\"exception\", \"server\"), undefined);\n    test.equal(Meteor.call(\"exception\", \"client\"), undefined); // If we pass throwStubExceptions then we *should* see thrown exceptions\n    // on the client\n\n    test.throws(function () {\n      Meteor.apply(\"exception\", [\"both\"], {\n        throwStubExceptions: true\n      });\n    });\n    test.equal(Meteor.apply(\"exception\", [\"server\"], {\n      throwStubExceptions: true\n    }), undefined);\n    test.throws(function () {\n      Meteor.apply(\"exception\", [\"client\"], {\n        throwStubExceptions: true\n      });\n    });\n  } // With callback\n\n\n  if (Meteor.isClient) {\n    test.equal(Meteor.call(\"exception\", \"both\", expect(failure(test, 500, \"Internal server error\"))), undefined);\n    test.equal(Meteor.call(\"exception\", \"server\", expect(failure(test, 500, \"Internal server error\"))), undefined);\n    test.equal(Meteor.call(\"exception\", \"client\"), undefined);\n  }\n\n  if (Meteor.isServer) {\n    test.equal(Meteor.call(\"exception\", \"both\", expect(failure(test, \"Test method throwing an exception\"))), undefined);\n    test.equal(Meteor.call(\"exception\", \"server\", expect(failure(test, \"Test method throwing an exception\"))), undefined);\n    test.equal(Meteor.call(\"exception\", \"client\"), undefined);\n  }\n}, function (test, expect) {\n  if (Meteor.isServer) {\n    var threw = false;\n\n    try {\n      Meteor.call(\"exception\", \"both\", {\n        intended: true\n      });\n    } catch (e) {\n      threw = true;\n      test.equal(e.error, 999);\n      test.equal(e.reason, \"Client-visible test exception\");\n    }\n\n    test.isTrue(threw);\n    threw = false;\n\n    try {\n      Meteor.call(\"exception\", \"both\", {\n        intended: true,\n        throwThroughFuture: true\n      });\n    } catch (e) {\n      threw = true;\n      test.equal(e.error, 999);\n      test.equal(e.reason, \"Client-visible test exception\");\n    }\n\n    test.isTrue(threw);\n  }\n\n  if (Meteor.isClient) {\n    test.equal(Meteor.call(\"exception\", \"both\", {\n      intended: true\n    }, expect(failure(test, 999, \"Client-visible test exception\"))), undefined);\n    test.equal(Meteor.call(\"exception\", \"server\", {\n      intended: true\n    }, expect(failure(test, 999, \"Client-visible test exception\"))), undefined);\n    test.equal(Meteor.call(\"exception\", \"server\", {\n      intended: true,\n      throwThroughFuture: true\n    }, expect(failure(test, 999, \"Client-visible test exception\"))), undefined);\n  }\n}]);\n\nvar checkBalances = function (test, a, b) {\n  var alice = Ledger.findOne({\n    name: \"alice\",\n    world: test.runId()\n  });\n  var bob = Ledger.findOne({\n    name: \"bob\",\n    world: test.runId()\n  });\n  test.equal(alice.balance, a);\n  test.equal(bob.balance, b);\n}; // would be nice to have a database-aware test harness of some kind --\n// this is a big hack (and XXX pollutes the global test namespace)\n\n\ntestAsyncMulti(\"livedata - compound methods\", [function (test, expect) {\n  if (Meteor.isClient) Meteor.subscribe(\"ledger\", test.runId(), expect());\n  Ledger.insert({\n    name: \"alice\",\n    balance: 100,\n    world: test.runId()\n  }, expect(function () {}));\n  Ledger.insert({\n    name: \"bob\",\n    balance: 50,\n    world: test.runId()\n  }, expect(function () {}));\n}, function (test, expect) {\n  Meteor.call('ledger/transfer', test.runId(), \"alice\", \"bob\", 10, expect(function (err, result) {\n    test.equal(err, undefined);\n    test.equal(result, undefined);\n    checkBalances(test, 90, 60);\n  }));\n  checkBalances(test, 90, 60);\n}, function (test, expect) {\n  Meteor.call('ledger/transfer', test.runId(), \"alice\", \"bob\", 100, true, expect(function (err, result) {\n    failure(test, 409)(err, result); // Balances are reverted back to pre-stub values.\n\n    checkBalances(test, 90, 60);\n  }));\n  if (Meteor.isClient) // client can fool itself by cheating, but only until the sync\n    // finishes\n    checkBalances(test, -10, 160);else checkBalances(test, 90, 60);\n}]); // Replaces the Connection's `_livedata_data` method to push incoming\n// messages on a given collection to an array. This can be used to\n// verify that the right data is sent on the wire\n//\n// @param messages {Array} The array to which to append the messages\n// @return {Function} A function to call to undo the eavesdropping\n\nvar eavesdropOnCollection = function (livedata_connection, collection_name, messages) {\n  var old_livedata_data = _.bind(livedata_connection._livedata_data, livedata_connection); // Kind of gross since all tests past this one will run with this\n  // hook set up. That's probably fine since we only check a specific\n  // collection but still...\n  //\n  // Should we consider having a separate connection per Tinytest or\n  // some similar scheme?\n\n\n  livedata_connection._livedata_data = function (msg) {\n    if (msg.collection && msg.collection === collection_name) {\n      messages.push(msg);\n    }\n\n    old_livedata_data(msg);\n  };\n\n  return function () {\n    livedata_connection._livedata_data = old_livedata_data;\n  };\n};\n\nif (Meteor.isClient) {\n  testAsyncMulti(\"livedata - changing userid reruns subscriptions without flapping data on the wire\", [function (test, expect) {\n    var messages = [];\n    var undoEavesdrop = eavesdropOnCollection(Meteor.connection, \"objectsWithUsers\", messages); // A helper for testing incoming set and unset messages\n    // XXX should this be extracted as a general helper together with\n    // eavesdropOnCollection?\n\n    var expectMessages = function (expectedAddedMessageCount, expectedRemovedMessageCount, expectedNamesInCollection) {\n      var actualAddedMessageCount = 0;\n      var actualRemovedMessageCount = 0;\n\n      _.each(messages, function (msg) {\n        if (msg.msg === 'added') ++actualAddedMessageCount;else if (msg.msg === 'removed') ++actualRemovedMessageCount;else test.fail({\n          unexpected: JSON.stringify(msg)\n        });\n      });\n\n      test.equal(actualAddedMessageCount, expectedAddedMessageCount);\n      test.equal(actualRemovedMessageCount, expectedRemovedMessageCount);\n      expectedNamesInCollection.sort();\n      test.equal(_.pluck(objectsWithUsers.find({}, {\n        sort: ['name']\n      }).fetch(), 'name'), expectedNamesInCollection);\n      messages.length = 0; // clear messages without creating a new object\n    }; // make sure we're not already logged in. can happen if accounts\n    // tests fail oddly.\n\n\n    Meteor.apply(\"setUserId\", [null], {\n      wait: true\n    }, expect(function () {}));\n    Meteor.subscribe(\"objectsWithUsers\", expect(function () {\n      expectMessages(1, 0, [\"owned by none\"]);\n      Meteor.apply(\"setUserId\", [\"1\"], {\n        wait: true\n      }, afterFirstSetUserId);\n    }));\n    var afterFirstSetUserId = expect(function () {\n      expectMessages(3, 1, [\"owned by one - a\", \"owned by one/two - a\", \"owned by one/two - b\"]);\n      Meteor.apply(\"setUserId\", [\"2\"], {\n        wait: true\n      }, afterSecondSetUserId);\n    });\n    var afterSecondSetUserId = expect(function () {\n      expectMessages(2, 1, [\"owned by one/two - a\", \"owned by one/two - b\", \"owned by two - a\", \"owned by two - b\"]);\n      Meteor.apply(\"setUserId\", [\"2\"], {\n        wait: true\n      }, afterThirdSetUserId);\n    });\n    var afterThirdSetUserId = expect(function () {\n      // Nothing should have been sent since the results of the\n      // query are the same (\"don't flap data on the wire\")\n      expectMessages(0, 0, [\"owned by one/two - a\", \"owned by one/two - b\", \"owned by two - a\", \"owned by two - b\"]);\n      undoEavesdrop();\n    });\n  }, function (test, expect) {\n    var key = Random.id();\n    Meteor.subscribe(\"recordUserIdOnStop\", key);\n    Meteor.apply(\"setUserId\", [\"100\"], {\n      wait: true\n    }, expect(function () {}));\n    Meteor.apply(\"setUserId\", [\"101\"], {\n      wait: true\n    }, expect(function () {}));\n    Meteor.call(\"userIdWhenStopped\", key, expect(function (err, result) {\n      test.isFalse(err);\n      test.equal(result, \"100\");\n    })); // clean up\n\n    Meteor.apply(\"setUserId\", [null], {\n      wait: true\n    }, expect(function () {}));\n  }]);\n}\n\nTinytest.add(\"livedata - setUserId error when called from server\", function (test) {\n  if (Meteor.isServer) {\n    test.equal(errorThrownWhenCallingSetUserIdDirectlyOnServer.message, \"Can't call setUserId on a server initiated method call\");\n  }\n});\n\nif (Meteor.isServer) {\n  var pubHandles = {};\n}\n\n;\nMeteor.methods({\n  \"livedata/setup\": function (id) {\n    check(id, String);\n\n    if (Meteor.isServer) {\n      pubHandles[id] = {};\n      Meteor.publish(\"pub1\" + id, function () {\n        pubHandles[id].pub1 = this;\n        this.ready();\n      });\n      Meteor.publish(\"pub2\" + id, function () {\n        pubHandles[id].pub2 = this;\n        this.ready();\n      });\n    }\n  },\n  \"livedata/pub1go\": function (id) {\n    check(id, String);\n\n    if (Meteor.isServer) {\n      pubHandles[id].pub1.added(\"MultiPubCollection\" + id, \"foo\", {\n        a: \"aa\"\n      });\n      return 1;\n    }\n\n    return 0;\n  },\n  \"livedata/pub2go\": function (id) {\n    check(id, String);\n\n    if (Meteor.isServer) {\n      pubHandles[id].pub2.added(\"MultiPubCollection\" + id, \"foo\", {\n        b: \"bb\"\n      });\n      return 2;\n    }\n\n    return 0;\n  }\n});\n\nif (Meteor.isClient) {\n  (function () {\n    var MultiPub;\n    var id = Random.id();\n    testAsyncMulti(\"livedata - added from two different subs\", [function (test, expect) {\n      Meteor.call('livedata/setup', id, expect(function () {}));\n    }, function (test, expect) {\n      MultiPub = new Mongo.Collection(\"MultiPubCollection\" + id);\n      var sub1 = Meteor.subscribe(\"pub1\" + id, expect(function () {}));\n      var sub2 = Meteor.subscribe(\"pub2\" + id, expect(function () {}));\n    }, function (test, expect) {\n      Meteor.call(\"livedata/pub1go\", id, expect(function (err, res) {\n        test.equal(res, 1);\n      }));\n    }, function (test, expect) {\n      test.equal(MultiPub.findOne(\"foo\"), {\n        _id: \"foo\",\n        a: \"aa\"\n      });\n    }, function (test, expect) {\n      Meteor.call(\"livedata/pub2go\", id, expect(function (err, res) {\n        test.equal(res, 2);\n      }));\n    }, function (test, expect) {\n      test.equal(MultiPub.findOne(\"foo\"), {\n        _id: \"foo\",\n        a: \"aa\",\n        b: \"bb\"\n      });\n    }]);\n  })();\n}\n\n;\n\nif (Meteor.isClient) {\n  testAsyncMulti(\"livedata - overlapping universal subs\", [function (test, expect) {\n    var coll = new Mongo.Collection(\"overlappingUniversalSubs\");\n    var token = Random.id();\n    test.isFalse(coll.findOne(token));\n    Meteor.call(\"testOverlappingSubs\", token, expect(function (err) {\n      test.isFalse(err);\n      test.isTrue(coll.findOne(token));\n    }));\n  }]);\n  testAsyncMulti(\"livedata - runtime universal sub creation\", [function (test, expect) {\n    var coll = new Mongo.Collection(\"runtimeSubCreation\");\n    var token = Random.id();\n    test.isFalse(coll.findOne(token));\n    Meteor.call(\"runtimeUniversalSubCreation\", token, expect(function (err) {\n      test.isFalse(err);\n      test.isTrue(coll.findOne(token));\n    }));\n  }]);\n  testAsyncMulti(\"livedata - no setUserId after unblock\", [function (test, expect) {\n    Meteor.call(\"setUserIdAfterUnblock\", expect(function (err, result) {\n      test.isFalse(err);\n      test.isTrue(result);\n    }));\n  }]);\n  testAsyncMulti(\"livedata - publisher errors with onError callback\", function () {\n    var conn, collName, coll;\n    var errorFromRerun;\n    var gotErrorFromStopper = false;\n    return [function (test, expect) {\n      // Use a separate connection so that we can safely check to see if\n      // conn._subscriptions is empty.\n      conn = new LivedataTest.Connection('/', {\n        reloadWithOutstanding: true\n      });\n      collName = Random.id();\n      coll = new Mongo.Collection(collName, {\n        connection: conn\n      });\n\n      var testSubError = function (options) {\n        conn.subscribe(\"publisherErrors\", collName, options, {\n          onReady: expect(),\n          onError: expect(failure(test, options.internalError ? 500 : 412, options.internalError ? \"Internal server error\" : \"Explicit error\"))\n        });\n      };\n\n      testSubError({\n        throwInHandler: true\n      });\n      testSubError({\n        throwInHandler: true,\n        internalError: true\n      });\n      testSubError({\n        errorInHandler: true\n      });\n      testSubError({\n        errorInHandler: true,\n        internalError: true\n      });\n      testSubError({\n        errorLater: true\n      });\n      testSubError({\n        errorLater: true,\n        internalError: true\n      });\n    }, function (test, expect) {\n      test.equal(coll.find().count(), 0);\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn.subscribe(\"publisherErrors\", collName, {\n        throwWhenUserIdSet: true\n      }, {\n        onReady: expect(),\n        onError: function (error) {\n          errorFromRerun = error;\n        }\n      });\n    }, function (test, expect) {\n      // Because the last subscription is ready, we should have a document.\n      test.equal(coll.find().count(), 1);\n      test.isFalse(errorFromRerun);\n      test.equal(_.size(conn._subscriptions), 1); // white-box test\n\n      conn.call('setUserId', 'bla', expect(function () {}));\n    }, function (test, expect) {\n      // Now that we've re-run, we should have stopped the subscription,\n      // gotten a error, and lost the document.\n      test.equal(coll.find().count(), 0);\n      test.isTrue(errorFromRerun);\n      test.instanceOf(errorFromRerun, Meteor.Error);\n      test.equal(errorFromRerun.error, 412);\n      test.equal(errorFromRerun.reason, \"Explicit error\");\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn.subscribe(\"publisherErrors\", collName, {\n        stopInHandler: true\n      }, {\n        onError: function () {\n          gotErrorFromStopper = true;\n        }\n      }); // Call a method. This method won't be processed until the publisher's\n      // function returns, so blocking on it being done ensures that we've\n      // gotten the removed/nosub/etc.\n\n      conn.call('nothing', expect(function () {}));\n    }, function (test, expect) {\n      test.equal(coll.find().count(), 0); // sub.stop does NOT call onError.\n\n      test.isFalse(gotErrorFromStopper);\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn._stream.disconnect({\n        _permanent: true\n      });\n    }];\n  }());\n  testAsyncMulti(\"livedata - publisher errors with onStop callback\", function () {\n    var conn, collName, coll;\n    var errorFromRerun;\n    var gotErrorFromStopper = false;\n    return [function (test, expect) {\n      // Use a separate connection so that we can safely check to see if\n      // conn._subscriptions is empty.\n      conn = new LivedataTest.Connection('/', {\n        reloadWithOutstanding: true\n      });\n      collName = Random.id();\n      coll = new Mongo.Collection(collName, {\n        connection: conn\n      });\n\n      var testSubError = function (options) {\n        conn.subscribe(\"publisherErrors\", collName, options, {\n          onReady: expect(),\n          onStop: expect(failureOnStopped(test, options.internalError ? 500 : 412, options.internalError ? \"Internal server error\" : \"Explicit error\"))\n        });\n      };\n\n      testSubError({\n        throwInHandler: true\n      });\n      testSubError({\n        throwInHandler: true,\n        internalError: true\n      });\n      testSubError({\n        errorInHandler: true\n      });\n      testSubError({\n        errorInHandler: true,\n        internalError: true\n      });\n      testSubError({\n        errorLater: true\n      });\n      testSubError({\n        errorLater: true,\n        internalError: true\n      });\n    }, function (test, expect) {\n      test.equal(coll.find().count(), 0);\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn.subscribe(\"publisherErrors\", collName, {\n        throwWhenUserIdSet: true\n      }, {\n        onReady: expect(),\n        onStop: function (error) {\n          errorFromRerun = error;\n        }\n      });\n    }, function (test, expect) {\n      // Because the last subscription is ready, we should have a document.\n      test.equal(coll.find().count(), 1);\n      test.isFalse(errorFromRerun);\n      test.equal(_.size(conn._subscriptions), 1); // white-box test\n\n      conn.call('setUserId', 'bla', expect(function () {}));\n    }, function (test, expect) {\n      // Now that we've re-run, we should have stopped the subscription,\n      // gotten a error, and lost the document.\n      test.equal(coll.find().count(), 0);\n      test.isTrue(errorFromRerun);\n      test.instanceOf(errorFromRerun, Meteor.Error);\n      test.equal(errorFromRerun.error, 412);\n      test.equal(errorFromRerun.reason, \"Explicit error\");\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn.subscribe(\"publisherErrors\", collName, {\n        stopInHandler: true\n      }, {\n        onStop: function (error) {\n          if (error) {\n            gotErrorFromStopper = true;\n          }\n        }\n      }); // Call a method. This method won't be processed until the publisher's\n      // function returns, so blocking on it being done ensures that we've\n      // gotten the removed/nosub/etc.\n\n      conn.call('nothing', expect(function () {}));\n    }, function (test, expect) {\n      test.equal(coll.find().count(), 0); // sub.stop does NOT call onError.\n\n      test.isFalse(gotErrorFromStopper);\n      test.equal(_.size(conn._subscriptions), 0); // white-box test\n\n      conn._stream.disconnect({\n        _permanent: true\n      });\n    }];\n  }());\n  testAsyncMulti(\"livedata - publish multiple cursors\", [function (test, expect) {\n    var sub = Meteor.subscribe(\"multiPublish\", {\n      normal: 1\n    }, {\n      onReady: expect(function () {\n        test.isTrue(sub.ready());\n        test.equal(One.find().count(), 2);\n        test.equal(Two.find().count(), 3);\n      }),\n      onError: failure()\n    });\n  }, function (test, expect) {\n    Meteor.subscribe(\"multiPublish\", {\n      dup: 1\n    }, {\n      onReady: failure(),\n      onError: expect(failure(test, 500, \"Internal server error\"))\n    });\n  }, function (test, expect) {\n    Meteor.subscribe(\"multiPublish\", {\n      notCursor: 1\n    }, {\n      onReady: failure(),\n      onError: expect(failure(test, 500, \"Internal server error\"))\n    });\n  }]);\n}\n\nvar selfUrl = Meteor.isServer ? Meteor.absoluteUrl() : Meteor._relativeToSiteRootUrl('/');\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    \"s2s\": function (arg) {\n      check(arg, String);\n      return \"s2s \" + arg;\n    }\n  });\n}\n\n(function () {\n  testAsyncMulti(\"livedata - connect works from both client and server\", [function (test, expect) {\n    var self = this;\n    self.conn = DDP.connect(selfUrl);\n    pollUntil(expect, function () {\n      return self.conn.status().connected;\n    }, 10000);\n  }, function (test, expect) {\n    var self = this;\n\n    if (self.conn.status().connected) {\n      self.conn.call('s2s', 'foo', expect(function (err, res) {\n        if (err) throw err;\n        test.equal(res, \"s2s foo\");\n      }));\n    }\n  }]);\n})();\n\nif (Meteor.isServer) {\n  (function () {\n    testAsyncMulti(\"livedata - method call on server blocks in a fiber way\", [function (test, expect) {\n      var self = this;\n      self.conn = DDP.connect(selfUrl);\n      pollUntil(expect, function () {\n        return self.conn.status().connected;\n      }, 10000);\n    }, function (test, expect) {\n      var self = this;\n\n      if (self.conn.status().connected) {\n        test.equal(self.conn.call('s2s', 'foo'), \"s2s foo\");\n      }\n    }]);\n  })();\n}\n\n(function () {\n  testAsyncMulti(\"livedata - connect fails to unknown place\", [function (test, expect) {\n    var self = this;\n    self.conn = DDP.connect(\"example.com\", {\n      _dontPrintErrors: true\n    });\n    Meteor.setTimeout(expect(function () {\n      test.isFalse(self.conn.status().connected, \"Not connected\");\n      self.conn.close();\n    }), 500);\n  }]);\n})();\n\nif (Meteor.isServer) {\n  Meteor.publish(\"publisherCloning\", function () {\n    var self = this;\n    var fields = {\n      x: {\n        y: 42\n      }\n    };\n    self.added(\"publisherCloning\", \"a\", fields);\n    fields.x.y = 43;\n    self.changed(\"publisherCloning\", \"a\", fields);\n    self.ready();\n  });\n} else {\n  var PublisherCloningCollection = new Mongo.Collection(\"publisherCloning\");\n  testAsyncMulti(\"livedata - publish callbacks clone\", [function (test, expect) {\n    Meteor.subscribe(\"publisherCloning\", {\n      normal: 1\n    }, {\n      onReady: expect(function () {\n        test.equal(PublisherCloningCollection.findOne(), {\n          _id: \"a\",\n          x: {\n            y: 43\n          }\n        });\n      }),\n      onError: failure()\n    });\n  }]);\n}\n\ntestAsyncMulti(\"livedata - result by value\", [function (test, expect) {\n  var self = this;\n  self.testId = Random.id();\n  Meteor.call('getArray', self.testId, expect(function (error, firstResult) {\n    test.isFalse(error);\n    test.isTrue(firstResult);\n    self.firstResult = firstResult;\n  }));\n}, function (test, expect) {\n  var self = this;\n  Meteor.call('pushToArray', self.testId, 'xxx', expect(function (error) {\n    test.isFalse(error);\n  }));\n}, function (test, expect) {\n  var self = this;\n  Meteor.call('getArray', self.testId, expect(function (error, secondResult) {\n    test.isFalse(error);\n    test.equal(self.firstResult.length + 1, secondResult.length);\n  }));\n}]); // XXX some things to test in greater detail:\n// staying in simulation mode\n// time warp\n// serialization / beginAsync(true) / beginAsync(false)\n// malformed messages (need raw wire access)\n// method completion/satisfaction\n// subscriptions (multiple APIs, including autorun?)\n// subscription completion\n// subscription attribute shadowing\n// server method calling methods on other server (eg, should simulate)\n// subscriptions and methods being idempotent\n// reconnection\n// reconnection not resulting in method re-execution\n// reconnection tolerating all kinds of lost messages (including data)\n// [probably lots more]","map":{"version":3,"sources":["packages/ddp-client/livedata_tests.js"],"names":["DDP","LivedataTest","module","watch","require","v","failure","test","code","reason","error","result","equal","undefined","isTrue","instanceOf","Meteor","Error","message","failureOnStopped","f","Tinytest","add","details","isServer","versionCheck","clientVersions","serverVersions","expected","DDPServer","_calculateVersion","x","Random","id","m","methods","throws","echoTest","item","expect","call","isClient","testAsyncMulti","ret","e","threw","Date","d","s","Mongo","ObjectID","o","$date","$literal","Infinity","token","apply","wait","err","res","throwStubExceptions","intended","throwThroughFuture","checkBalances","a","b","alice","Ledger","findOne","name","world","runId","bob","balance","subscribe","insert","eavesdropOnCollection","livedata_connection","collection_name","messages","old_livedata_data","_","bind","_livedata_data","msg","collection","push","undoEavesdrop","connection","expectMessages","expectedAddedMessageCount","expectedRemovedMessageCount","expectedNamesInCollection","actualAddedMessageCount","actualRemovedMessageCount","each","fail","unexpected","JSON","stringify","sort","pluck","objectsWithUsers","find","fetch","length","afterFirstSetUserId","afterSecondSetUserId","afterThirdSetUserId","key","isFalse","errorThrownWhenCallingSetUserIdDirectlyOnServer","pubHandles","check","String","publish","pub1","ready","pub2","added","MultiPub","Collection","sub1","sub2","_id","coll","conn","collName","errorFromRerun","gotErrorFromStopper","Connection","reloadWithOutstanding","testSubError","options","onReady","onError","internalError","throwInHandler","errorInHandler","errorLater","count","size","_subscriptions","throwWhenUserIdSet","stopInHandler","_stream","disconnect","_permanent","onStop","sub","normal","One","Two","dup","notCursor","selfUrl","absoluteUrl","_relativeToSiteRootUrl","arg","self","connect","pollUntil","status","connected","_dontPrintErrors","setTimeout","close","fields","y","changed","PublisherCloningCollection","testId","firstResult","secondResult"],"mappings":"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","file":"packages/ddp-client/livedata_tests.js.map","sourcesContent":["import { DDP, LivedataTest } from \"./namespace.js\";\n\n// XXX should check error codes\nvar failure = function (test, code, reason) {\n  return function (error, result) {\n    test.equal(result, undefined);\n    test.isTrue(error && typeof error === \"object\");\n    if (error && typeof error === \"object\") {\n      if (typeof code === \"number\") {\n        test.instanceOf(error, Meteor.Error);\n        code && test.equal(error.error, code);\n        reason && test.equal(error.reason, reason);\n        // XXX should check that other keys aren't present.. should\n        // probably use something like the Matcher we used to have\n      } else {\n        // for normal Javascript errors\n        test.instanceOf(error, Error);\n        test.equal(error.message, code);\n      }\n    }\n  };\n};\n\nvar failureOnStopped = function (test, code, reason) {\n  var f = failure(test, code, reason);\n\n  return function (error) {\n    if (error) {\n      f(error);\n    }\n  }\n};\n\nTinytest.add(\"livedata - Meteor.Error\", function (test) {\n  var error = new Meteor.Error(123, \"kittens\", \"puppies\");\n  test.instanceOf(error, Meteor.Error);\n  test.instanceOf(error, Error);\n  test.equal(error.error, 123);\n  test.equal(error.reason, \"kittens\");\n  test.equal(error.details, \"puppies\");\n});\n\nif (Meteor.isServer) {\n  Tinytest.add(\"livedata - version negotiation\", function (test) {\n    var versionCheck = function (clientVersions, serverVersions, expected) {\n      test.equal(\n        DDPServer._calculateVersion(clientVersions, serverVersions),\n        expected);\n    };\n\n    versionCheck([\"A\", \"B\", \"C\"], [\"A\", \"B\", \"C\"], \"A\");\n    versionCheck([\"B\", \"C\"], [\"A\", \"B\", \"C\"], \"B\");\n    versionCheck([\"A\", \"B\", \"C\"], [\"B\", \"C\"], \"B\");\n    versionCheck([\"foo\", \"bar\", \"baz\"], [\"A\", \"B\", \"C\"], \"A\");\n  });\n}\n\nTinytest.add(\"livedata - methods with colliding names\", function (test) {\n  var x = Random.id();\n  var m = {};\n  m[x] = function () {};\n  Meteor.methods(m);\n\n  test.throws(function () {\n    Meteor.methods(m);\n  });\n});\n\nTinytest.add(\"livedata - non-function method\", function (test) {\n  var x = Random.id();\n  var m = {};\n  m[x] = 'kitten';\n\n  test.throws(function () {\n    Meteor.methods(m);\n  });\n});\n\nvar echoTest = function (item) {\n  return function (test, expect) {\n    if (Meteor.isServer) {\n      test.equal(Meteor.call(\"echo\", item), [item]);\n      test.equal(Meteor.call(\"echoOne\", item), item);\n    }\n    if (Meteor.isClient)\n      test.equal(Meteor.call(\"echo\", item), undefined);\n\n    test.equal(Meteor.call(\"echo\", item, expect(undefined, [item])), undefined);\n    test.equal(Meteor.call(\"echoOne\", item, expect(undefined, item)), undefined);\n  };\n};\n\ntestAsyncMulti(\"livedata - basic method invocation\", [\n  // Unknown methods\n  function (test, expect) {\n    if (Meteor.isServer) {\n      // On server, with no callback, throws exception\n      try {\n        var ret = Meteor.call(\"unknown method\");\n      } catch (e) {\n        test.equal(e.error, 404);\n        var threw = true;\n      }\n      test.isTrue(threw);\n      test.equal(ret, undefined);\n    }\n\n    if (Meteor.isClient) {\n      // On client, with no callback, just returns undefined\n      var ret = Meteor.call(\"unknown method\");\n      test.equal(ret, undefined);\n    }\n\n    // On either, with a callback, calls the callback and does not throw\n    var ret = Meteor.call(\"unknown method\",\n                          expect(failure(test, 404, \"Method 'unknown method' not found\")));\n    test.equal(ret, undefined);\n  },\n\n  function (test, expect) {\n    // make sure 'undefined' is preserved as such, instead of turning\n    // into null (JSON does not have 'undefined' so there is special\n    // code for this)\n    if (Meteor.isServer)\n      test.equal(Meteor.call(\"nothing\"), undefined);\n    if (Meteor.isClient)\n      test.equal(Meteor.call(\"nothing\"), undefined);\n\n    test.equal(Meteor.call(\"nothing\", expect(undefined, undefined)), undefined);\n  },\n\n  function (test, expect) {\n    if (Meteor.isServer)\n      test.equal(Meteor.call(\"echo\"), []);\n    if (Meteor.isClient)\n      test.equal(Meteor.call(\"echo\"), undefined);\n\n    test.equal(Meteor.call(\"echo\", expect(undefined, [])), undefined);\n  },\n\n  echoTest(new Date()),\n  echoTest({d: new Date(), s: \"foobarbaz\"}),\n  echoTest([new Date(), \"foobarbaz\"]),\n  echoTest(new Mongo.ObjectID()),\n  echoTest({o: new Mongo.ObjectID()}),\n  echoTest({$date: 30}), // literal\n  echoTest({$literal: {$date: 30}}),\n  echoTest(12),\n  echoTest(Infinity),\n  echoTest(-Infinity),\n\n  function (test, expect) {\n    if (Meteor.isServer)\n      test.equal(Meteor.call(\"echo\", 12, {x: 13}), [12, {x: 13}]);\n    if (Meteor.isClient)\n      test.equal(Meteor.call(\"echo\", 12, {x: 13}), undefined);\n\n    test.equal(Meteor.call(\"echo\", 12, {x: 13},\n                           expect(undefined, [12, {x: 13}])), undefined);\n  },\n\n  // test that `wait: false` is respected\n  function (test, expect) {\n    if (Meteor.isClient) {\n      // For test isolation\n      var token = Random.id();\n      Meteor.apply(\n        \"delayedTrue\", [token], {wait: false}, expect(function(err, res) {\n          test.equal(res, false);\n        }));\n      Meteor.apply(\"makeDelayedTrueImmediatelyReturnFalse\", [token]);\n    }\n  },\n\n  // test that `wait: true` is respected\n  function(test, expect) {\n    if (Meteor.isClient) {\n      var token = Random.id();\n      Meteor.apply(\n        \"delayedTrue\", [token], {wait: true}, expect(function(err, res) {\n          test.equal(res, true);\n        }));\n      Meteor.apply(\"makeDelayedTrueImmediatelyReturnFalse\", [token]);\n    }\n  },\n\n  function (test, expect) {\n    // No callback\n\n    if (Meteor.isServer) {\n      test.throws(function () {\n        Meteor.call(\"exception\", \"both\");\n      });\n      test.throws(function () {\n        Meteor.call(\"exception\", \"server\");\n      });\n      // No exception, because no code will run on the client\n      test.equal(Meteor.call(\"exception\", \"client\"), undefined);\n    }\n\n    if (Meteor.isClient) {\n      // The client exception is thrown away because it's in the\n      // stub. The server exception is throw away because we didn't\n      // give a callback.\n      test.equal(Meteor.call(\"exception\", \"both\"), undefined);\n      test.equal(Meteor.call(\"exception\", \"server\"), undefined);\n      test.equal(Meteor.call(\"exception\", \"client\"), undefined);\n\n      // If we pass throwStubExceptions then we *should* see thrown exceptions\n      // on the client\n      test.throws(function () {\n        Meteor.apply(\"exception\", [\"both\"], {throwStubExceptions: true});\n      });\n      test.equal(\n        Meteor.apply(\"exception\", [\"server\"], {throwStubExceptions: true}),\n        undefined);\n      test.throws(function () {\n        Meteor.apply(\"exception\", [\"client\"], {throwStubExceptions: true});\n      });\n    }\n\n    // With callback\n\n    if (Meteor.isClient) {\n      test.equal(\n        Meteor.call(\"exception\", \"both\",\n                    expect(failure(test, 500, \"Internal server error\"))),\n        undefined);\n      test.equal(\n        Meteor.call(\"exception\", \"server\",\n                    expect(failure(test, 500, \"Internal server error\"))),\n        undefined);\n      test.equal(Meteor.call(\"exception\", \"client\"), undefined);\n    }\n\n    if (Meteor.isServer) {\n      test.equal(\n        Meteor.call(\"exception\", \"both\",\n                    expect(failure(test, \"Test method throwing an exception\"))),\n        undefined);\n      test.equal(\n        Meteor.call(\"exception\", \"server\",\n                    expect(failure(test, \"Test method throwing an exception\"))),\n        undefined);\n      test.equal(Meteor.call(\"exception\", \"client\"), undefined);\n    }\n  },\n\n  function (test, expect) {\n    if (Meteor.isServer) {\n      var threw = false;\n      try {\n        Meteor.call(\"exception\", \"both\", {intended: true});\n      } catch (e) {\n        threw = true;\n        test.equal(e.error, 999);\n        test.equal(e.reason, \"Client-visible test exception\");\n      }\n      test.isTrue(threw);\n      threw = false;\n      try {\n        Meteor.call(\"exception\", \"both\", {intended: true,\n                                          throwThroughFuture: true});\n      } catch (e) {\n        threw = true;\n        test.equal(e.error, 999);\n        test.equal(e.reason, \"Client-visible test exception\");\n      }\n      test.isTrue(threw);\n    }\n\n    if (Meteor.isClient) {\n      test.equal(\n        Meteor.call(\"exception\", \"both\", {intended: true},\n                    expect(failure(test, 999,\n                                   \"Client-visible test exception\"))),\n        undefined);\n      test.equal(\n        Meteor.call(\"exception\", \"server\", {intended: true},\n                    expect(failure(test, 999,\n                                   \"Client-visible test exception\"))),\n        undefined);\n      test.equal(\n        Meteor.call(\"exception\", \"server\", {intended: true,\n                                            throwThroughFuture: true},\n                    expect(failure(test, 999,\n                                   \"Client-visible test exception\"))),\n        undefined);\n    }\n  }\n]);\n\n\n\n\nvar checkBalances = function (test, a, b) {\n  var alice = Ledger.findOne({name: \"alice\", world: test.runId()});\n  var bob = Ledger.findOne({name: \"bob\", world: test.runId()});\n  test.equal(alice.balance, a);\n  test.equal(bob.balance, b);\n};\n\n// would be nice to have a database-aware test harness of some kind --\n// this is a big hack (and XXX pollutes the global test namespace)\ntestAsyncMulti(\"livedata - compound methods\", [\n  function (test, expect) {\n    if (Meteor.isClient)\n      Meteor.subscribe(\"ledger\", test.runId(), expect());\n\n    Ledger.insert({name: \"alice\", balance: 100, world: test.runId()},\n                  expect(function () {}));\n    Ledger.insert({name: \"bob\", balance: 50, world: test.runId()},\n                  expect(function () {}));\n  },\n  function (test, expect) {\n    Meteor.call('ledger/transfer', test.runId(), \"alice\", \"bob\", 10,\n                expect(function(err, result) {\n                  test.equal(err, undefined);\n                  test.equal(result, undefined);\n                  checkBalances(test, 90, 60);\n                }));\n    checkBalances(test, 90, 60);\n  },\n  function (test, expect) {\n    Meteor.call('ledger/transfer', test.runId(), \"alice\", \"bob\", 100, true,\n                expect(function (err, result) {\n                  failure(test, 409)(err, result);\n                  // Balances are reverted back to pre-stub values.\n                  checkBalances(test, 90, 60);\n                }));\n\n    if (Meteor.isClient)\n      // client can fool itself by cheating, but only until the sync\n      // finishes\n      checkBalances(test, -10, 160);\n    else\n      checkBalances(test, 90, 60);\n  }\n]);\n\n// Replaces the Connection's `_livedata_data` method to push incoming\n// messages on a given collection to an array. This can be used to\n// verify that the right data is sent on the wire\n//\n// @param messages {Array} The array to which to append the messages\n// @return {Function} A function to call to undo the eavesdropping\nvar eavesdropOnCollection = function(livedata_connection,\n                                     collection_name, messages) {\n  var old_livedata_data = _.bind(\n    livedata_connection._livedata_data, livedata_connection);\n\n  // Kind of gross since all tests past this one will run with this\n  // hook set up. That's probably fine since we only check a specific\n  // collection but still...\n  //\n  // Should we consider having a separate connection per Tinytest or\n  // some similar scheme?\n  livedata_connection._livedata_data = function(msg) {\n    if (msg.collection && msg.collection === collection_name) {\n      messages.push(msg);\n    }\n    old_livedata_data(msg);\n  };\n\n  return function() {\n    livedata_connection._livedata_data = old_livedata_data;\n  };\n};\n\nif (Meteor.isClient) {\n  testAsyncMulti(\"livedata - changing userid reruns subscriptions without flapping data on the wire\", [\n    function(test, expect) {\n      var messages = [];\n      var undoEavesdrop = eavesdropOnCollection(\n        Meteor.connection, \"objectsWithUsers\", messages);\n\n      // A helper for testing incoming set and unset messages\n      // XXX should this be extracted as a general helper together with\n      // eavesdropOnCollection?\n      var expectMessages = function(expectedAddedMessageCount,\n                                    expectedRemovedMessageCount,\n                                    expectedNamesInCollection) {\n        var actualAddedMessageCount = 0;\n        var actualRemovedMessageCount = 0;\n        _.each(messages, function (msg) {\n          if (msg.msg === 'added')\n            ++actualAddedMessageCount;\n          else if (msg.msg === 'removed')\n            ++actualRemovedMessageCount;\n          else\n            test.fail({unexpected: JSON.stringify(msg)});\n        });\n        test.equal(actualAddedMessageCount, expectedAddedMessageCount);\n        test.equal(actualRemovedMessageCount, expectedRemovedMessageCount);\n        expectedNamesInCollection.sort();\n        test.equal(_.pluck(objectsWithUsers.find({}, {sort: ['name']}).fetch(),\n                           'name'),\n                   expectedNamesInCollection);\n        messages.length = 0; // clear messages without creating a new object\n      };\n\n      // make sure we're not already logged in. can happen if accounts\n      // tests fail oddly.\n      Meteor.apply(\"setUserId\", [null], {wait: true}, expect(function () {}));\n\n      Meteor.subscribe(\"objectsWithUsers\", expect(function() {\n        expectMessages(1, 0, [\"owned by none\"]);\n        Meteor.apply(\"setUserId\", [\"1\"], {wait: true}, afterFirstSetUserId);\n      }));\n\n      var afterFirstSetUserId = expect(function() {\n        expectMessages(3, 1, [\n          \"owned by one - a\",\n          \"owned by one/two - a\",\n          \"owned by one/two - b\"]);\n        Meteor.apply(\"setUserId\", [\"2\"], {wait: true}, afterSecondSetUserId);\n      });\n\n      var afterSecondSetUserId = expect(function() {\n        expectMessages(2, 1, [\n          \"owned by one/two - a\",\n          \"owned by one/two - b\",\n          \"owned by two - a\",\n          \"owned by two - b\"]);\n        Meteor.apply(\"setUserId\", [\"2\"], {wait: true}, afterThirdSetUserId);\n      });\n\n      var afterThirdSetUserId = expect(function() {\n        // Nothing should have been sent since the results of the\n        // query are the same (\"don't flap data on the wire\")\n        expectMessages(0, 0, [\n          \"owned by one/two - a\",\n          \"owned by one/two - b\",\n          \"owned by two - a\",\n          \"owned by two - b\"]);\n        undoEavesdrop();\n      });\n    }, function(test, expect) {\n      var key = Random.id();\n      Meteor.subscribe(\"recordUserIdOnStop\", key);\n      Meteor.apply(\"setUserId\", [\"100\"], {wait: true}, expect(function () {}));\n      Meteor.apply(\"setUserId\", [\"101\"], {wait: true}, expect(function () {}));\n      Meteor.call(\"userIdWhenStopped\", key, expect(function (err, result) {\n        test.isFalse(err);\n        test.equal(result, \"100\");\n      }));\n      // clean up\n      Meteor.apply(\"setUserId\", [null], {wait: true}, expect(function () {}));\n    }\n  ]);\n}\n\nTinytest.add(\"livedata - setUserId error when called from server\", function(test) {\n  if (Meteor.isServer) {\n    test.equal(errorThrownWhenCallingSetUserIdDirectlyOnServer.message,\n               \"Can't call setUserId on a server initiated method call\");\n  }\n});\n\n\nif (Meteor.isServer) {\n  var pubHandles = {};\n};\nMeteor.methods({\n  \"livedata/setup\" : function (id) {\n    check(id, String);\n    if (Meteor.isServer) {\n      pubHandles[id] = {};\n      Meteor.publish(\"pub1\"+id, function () {\n        pubHandles[id].pub1 = this;\n        this.ready();\n      });\n      Meteor.publish(\"pub2\"+id, function () {\n        pubHandles[id].pub2 = this;\n        this.ready();\n      });\n\n    }\n  },\n  \"livedata/pub1go\" : function (id) {\n    check(id, String);\n    if (Meteor.isServer) {\n\n      pubHandles[id].pub1.added(\"MultiPubCollection\" + id, \"foo\", {a: \"aa\"});\n      return 1;\n    }\n    return 0;\n  },\n  \"livedata/pub2go\" : function (id) {\n    check(id, String);\n    if (Meteor.isServer) {\n      pubHandles[id].pub2.added(\"MultiPubCollection\" + id , \"foo\", {b: \"bb\"});\n      return 2;\n    }\n    return 0;\n  }\n});\n\nif (Meteor.isClient) {\n  (function () {\n    var MultiPub;\n    var id = Random.id();\n    testAsyncMulti(\"livedata - added from two different subs\", [\n      function (test, expect) {\n        Meteor.call('livedata/setup', id, expect(function () {}));\n      },\n      function (test, expect) {\n        MultiPub = new Mongo.Collection(\"MultiPubCollection\" + id);\n        var sub1 = Meteor.subscribe(\"pub1\"+id, expect(function () {}));\n        var sub2 = Meteor.subscribe(\"pub2\"+id, expect(function () {}));\n      },\n      function (test, expect) {\n        Meteor.call(\"livedata/pub1go\", id, expect(function (err, res) {test.equal(res, 1);}));\n      },\n      function (test, expect) {\n        test.equal(MultiPub.findOne(\"foo\"), {_id: \"foo\", a: \"aa\"});\n      },\n      function (test, expect) {\n        Meteor.call(\"livedata/pub2go\", id, expect(function (err, res) {test.equal(res, 2);}));\n      },\n      function (test, expect) {\n        test.equal(MultiPub.findOne(\"foo\"), {_id: \"foo\", a: \"aa\", b: \"bb\"});\n      }\n    ]);\n  })();\n};\n\nif (Meteor.isClient) {\n  testAsyncMulti(\"livedata - overlapping universal subs\", [\n    function (test, expect) {\n      var coll = new Mongo.Collection(\"overlappingUniversalSubs\");\n      var token = Random.id();\n      test.isFalse(coll.findOne(token));\n      Meteor.call(\"testOverlappingSubs\", token, expect(function (err) {\n        test.isFalse(err);\n        test.isTrue(coll.findOne(token));\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"livedata - runtime universal sub creation\", [\n    function (test, expect) {\n      var coll = new Mongo.Collection(\"runtimeSubCreation\");\n      var token = Random.id();\n      test.isFalse(coll.findOne(token));\n      Meteor.call(\"runtimeUniversalSubCreation\", token, expect(function (err) {\n        test.isFalse(err);\n        test.isTrue(coll.findOne(token));\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"livedata - no setUserId after unblock\", [\n    function (test, expect) {\n      Meteor.call(\"setUserIdAfterUnblock\", expect(function (err, result) {\n        test.isFalse(err);\n        test.isTrue(result);\n      }));\n    }\n  ]);\n\n  testAsyncMulti(\"livedata - publisher errors with onError callback\", (function () {\n    var conn, collName, coll;\n    var errorFromRerun;\n    var gotErrorFromStopper = false;\n    return [\n      function (test, expect) {\n        // Use a separate connection so that we can safely check to see if\n        // conn._subscriptions is empty.\n        conn = new LivedataTest.Connection('/',\n                                           {reloadWithOutstanding: true});\n        collName = Random.id();\n        coll = new Mongo.Collection(collName, {connection: conn});\n\n        var testSubError = function (options) {\n          conn.subscribe(\"publisherErrors\", collName, options, {\n            onReady: expect(),\n            onError: expect(\n              failure(test,\n                      options.internalError ? 500 : 412,\n                      options.internalError ? \"Internal server error\"\n                                            : \"Explicit error\"))\n          });\n        };\n        testSubError({throwInHandler: true});\n        testSubError({throwInHandler: true, internalError: true});\n        testSubError({errorInHandler: true});\n        testSubError({errorInHandler: true, internalError: true});\n        testSubError({errorLater: true});\n        testSubError({errorLater: true, internalError: true});\n      },\n      function (test, expect) {\n        test.equal(coll.find().count(), 0);\n        test.equal(_.size(conn._subscriptions), 0);  // white-box test\n\n        conn.subscribe(\"publisherErrors\",\n                       collName, {throwWhenUserIdSet: true}, {\n          onReady: expect(),\n          onError: function (error) {\n            errorFromRerun = error;\n          }\n        });\n      },\n      function (test, expect) {\n        // Because the last subscription is ready, we should have a document.\n        test.equal(coll.find().count(), 1);\n        test.isFalse(errorFromRerun);\n        test.equal(_.size(conn._subscriptions), 1);  // white-box test\n        conn.call('setUserId', 'bla', expect(function(){}));\n      },\n      function (test, expect) {\n        // Now that we've re-run, we should have stopped the subscription,\n        // gotten a error, and lost the document.\n        test.equal(coll.find().count(), 0);\n        test.isTrue(errorFromRerun);\n        test.instanceOf(errorFromRerun, Meteor.Error);\n        test.equal(errorFromRerun.error, 412);\n        test.equal(errorFromRerun.reason, \"Explicit error\");\n        test.equal(_.size(conn._subscriptions), 0);  // white-box test\n\n        conn.subscribe(\"publisherErrors\", collName, {stopInHandler: true}, {\n          onError: function() { gotErrorFromStopper = true; }\n        });\n        // Call a method. This method won't be processed until the publisher's\n        // function returns, so blocking on it being done ensures that we've\n        // gotten the removed/nosub/etc.\n        conn.call('nothing', expect(function(){}));\n      },\n      function (test, expect) {\n        test.equal(coll.find().count(), 0);\n        // sub.stop does NOT call onError.\n        test.isFalse(gotErrorFromStopper);\n        test.equal(_.size(conn._subscriptions), 0);  // white-box test\n        conn._stream.disconnect({_permanent: true});\n      }\n    ];})());\n\n  testAsyncMulti(\"livedata - publisher errors with onStop callback\", (function () {\n    var conn, collName, coll;\n    var errorFromRerun;\n    var gotErrorFromStopper = false;\n    return [\n      function (test, expect) {\n        // Use a separate connection so that we can safely check to see if\n        // conn._subscriptions is empty.\n        conn = new LivedataTest.Connection('/',\n                                           {reloadWithOutstanding: true});\n        collName = Random.id();\n        coll = new Mongo.Collection(collName, {connection: conn});\n\n        var testSubError = function (options) {\n          conn.subscribe(\"publisherErrors\", collName, options, {\n            onReady: expect(),\n            onStop: expect(\n              failureOnStopped(test,\n                      options.internalError ? 500 : 412,\n                      options.internalError ? \"Internal server error\"\n                                            : \"Explicit error\"))\n          });\n        };\n        testSubError({throwInHandler: true});\n        testSubError({throwInHandler: true, internalError: true});\n        testSubError({errorInHandler: true});\n        testSubError({errorInHandler: true, internalError: true});\n        testSubError({errorLater: true});\n        testSubError({errorLater: true, internalError: true});\n      },\n      function (test, expect) {\n        test.equal(coll.find().count(), 0);\n        test.equal(_.size(conn._subscriptions), 0);  // white-box test\n\n        conn.subscribe(\"publisherErrors\",\n                       collName, {throwWhenUserIdSet: true}, {\n          onReady: expect(),\n          onStop: function (error) {\n            errorFromRerun = error;\n          }\n        });\n      },\n      function (test, expect) {\n        // Because the last subscription is ready, we should have a document.\n        test.equal(coll.find().count(), 1);\n        test.isFalse(errorFromRerun);\n        test.equal(_.size(conn._subscriptions), 1);  // white-box test\n        conn.call('setUserId', 'bla', expect(function(){}));\n      },\n      function (test, expect) {\n        // Now that we've re-run, we should have stopped the subscription,\n        // gotten a error, and lost the document.\n        test.equal(coll.find().count(), 0);\n        test.isTrue(errorFromRerun);\n        test.instanceOf(errorFromRerun, Meteor.Error);\n        test.equal(errorFromRerun.error, 412);\n        test.equal(errorFromRerun.reason, \"Explicit error\");\n        test.equal(_.size(conn._subscriptions), 0);  // white-box test\n\n        conn.subscribe(\"publisherErrors\", collName, {stopInHandler: true}, {\n          onStop: function(error) {\n            if (error) {\n              gotErrorFromStopper = true;\n            }\n          }\n        });\n        // Call a method. This method won't be processed until the publisher's\n        // function returns, so blocking on it being done ensures that we've\n        // gotten the removed/nosub/etc.\n        conn.call('nothing', expect(function(){}));\n      },\n      function (test, expect) {\n        test.equal(coll.find().count(), 0);\n        // sub.stop does NOT call onError.\n        test.isFalse(gotErrorFromStopper);\n        test.equal(_.size(conn._subscriptions), 0);  // white-box test\n        conn._stream.disconnect({_permanent: true});\n      }\n    ];})());\n\n  testAsyncMulti(\"livedata - publish multiple cursors\", [\n    function (test, expect) {\n      var sub = Meteor.subscribe(\"multiPublish\", {normal: 1}, {\n        onReady: expect(function () {\n          test.isTrue(sub.ready());\n          test.equal(One.find().count(), 2);\n          test.equal(Two.find().count(), 3);\n        }),\n        onError: failure()\n      });\n    },\n    function (test, expect) {\n      Meteor.subscribe(\"multiPublish\", {dup: 1}, {\n        onReady: failure(),\n        onError: expect(failure(test, 500, \"Internal server error\"))\n      });\n    },\n    function (test, expect) {\n      Meteor.subscribe(\"multiPublish\", {notCursor: 1}, {\n        onReady: failure(),\n        onError: expect(failure(test, 500, \"Internal server error\"))\n      });\n    }\n  ]);\n}\n\nvar selfUrl = Meteor.isServer\n      ? Meteor.absoluteUrl() : Meteor._relativeToSiteRootUrl('/');\n\nif (Meteor.isServer) {\n  Meteor.methods({\n    \"s2s\": function (arg) {\n      check(arg, String);\n      return \"s2s \" + arg;\n    }\n  });\n}\n(function () {\n  testAsyncMulti(\"livedata - connect works from both client and server\", [\n    function (test, expect) {\n      var self = this;\n      self.conn = DDP.connect(selfUrl);\n      pollUntil(expect, function () {\n        return self.conn.status().connected;\n      }, 10000);\n    },\n\n    function (test, expect) {\n      var self = this;\n      if (self.conn.status().connected) {\n        self.conn.call('s2s', 'foo', expect(function (err, res) {\n          if (err)\n            throw err;\n          test.equal(res, \"s2s foo\");\n        }));\n      }\n    }\n  ]);\n})();\n\nif (Meteor.isServer) {\n  (function () {\n    testAsyncMulti(\"livedata - method call on server blocks in a fiber way\", [\n      function (test, expect) {\n        var self = this;\n        self.conn = DDP.connect(selfUrl);\n        pollUntil(expect, function () {\n          return self.conn.status().connected;\n        }, 10000);\n      },\n\n      function (test, expect) {\n        var self = this;\n        if (self.conn.status().connected) {\n          test.equal(self.conn.call('s2s', 'foo'), \"s2s foo\");\n        }\n      }\n    ]);\n  })();\n}\n\n(function () {\n  testAsyncMulti(\"livedata - connect fails to unknown place\", [\n    function (test, expect) {\n      var self = this;\n      self.conn = DDP.connect(\"example.com\", {_dontPrintErrors: true});\n      Meteor.setTimeout(expect(function () {\n        test.isFalse(self.conn.status().connected, \"Not connected\");\n        self.conn.close();\n      }), 500);\n    }\n  ]);\n})();\n\nif (Meteor.isServer) {\n  Meteor.publish(\"publisherCloning\", function () {\n    var self = this;\n    var fields = {x: {y: 42}};\n    self.added(\"publisherCloning\", \"a\", fields);\n    fields.x.y = 43;\n    self.changed(\"publisherCloning\", \"a\", fields);\n    self.ready();\n  });\n} else {\n  var PublisherCloningCollection = new Mongo.Collection(\"publisherCloning\");\n  testAsyncMulti(\"livedata - publish callbacks clone\", [\n    function (test, expect) {\n      Meteor.subscribe(\"publisherCloning\", {normal: 1}, {\n        onReady: expect(function () {\n          test.equal(PublisherCloningCollection.findOne(), {\n            _id: \"a\",\n            x: {y: 43}});\n        }),\n        onError: failure()\n      });\n    }\n  ]);\n}\n\ntestAsyncMulti(\"livedata - result by value\", [\n  function (test, expect) {\n    var self = this;\n    self.testId = Random.id();\n    Meteor.call('getArray', self.testId, expect(function (error, firstResult) {\n      test.isFalse(error);\n      test.isTrue(firstResult);\n      self.firstResult = firstResult;\n    }));\n  }, function (test, expect) {\n    var self = this;\n    Meteor.call('pushToArray', self.testId, 'xxx', expect(function (error) {\n      test.isFalse(error);\n    }));\n  }, function (test, expect) {\n    var self = this;\n    Meteor.call('getArray', self.testId, expect(function (error, secondResult) {\n      test.isFalse(error);\n      test.equal(self.firstResult.length + 1, secondResult.length);\n    }));\n  }\n]);\n\n// XXX some things to test in greater detail:\n// staying in simulation mode\n// time warp\n// serialization / beginAsync(true) / beginAsync(false)\n// malformed messages (need raw wire access)\n// method completion/satisfaction\n// subscriptions (multiple APIs, including autorun?)\n// subscription completion\n// subscription attribute shadowing\n// server method calling methods on other server (eg, should simulate)\n// subscriptions and methods being idempotent\n// reconnection\n// reconnection not resulting in method re-execution\n// reconnection tolerating all kinds of lost messages (including data)\n// [probably lots more]\n"]},"hash":"c1c69dec0848601b22a538099576b0ff71aca616"}
