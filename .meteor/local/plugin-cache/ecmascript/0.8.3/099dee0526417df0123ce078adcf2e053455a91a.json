{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/mongo/doc_fetcher.js","filenameRelative":"packages/mongo/doc_fetcher.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/mongo/doc_fetcher.js.map","sourceFileName":"packages/mongo/doc_fetcher.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"doc_fetcher"},"ignored":false,"code":"var Fiber = Npm.require('fibers');\n\nvar Future = Npm.require('fibers/future');\n\nDocFetcher = function (mongoConnection) {\n  var self = this;\n  self._mongoConnection = mongoConnection; // Map from cache key -> [callback]\n\n  self._callbacksForCacheKey = {};\n};\n\n_.extend(DocFetcher.prototype, {\n  // Fetches document \"id\" from collectionName, returning it or null if not\n  // found.\n  //\n  // If you make multiple calls to fetch() with the same cacheKey (a string),\n  // DocFetcher may assume that they all return the same document. (It does\n  // not check to see if collectionName/id match.)\n  //\n  // You may assume that callback is never called synchronously (and in fact\n  // OplogObserveDriver does so).\n  fetch: function (collectionName, id, cacheKey, callback) {\n    var self = this;\n    check(collectionName, String); // id is some sort of scalar\n\n    check(cacheKey, String); // If there's already an in-progress fetch for this cache key, yield until\n    // it's done and return whatever it returns.\n\n    if (_.has(self._callbacksForCacheKey, cacheKey)) {\n      self._callbacksForCacheKey[cacheKey].push(callback);\n\n      return;\n    }\n\n    var callbacks = self._callbacksForCacheKey[cacheKey] = [callback];\n    Fiber(function () {\n      try {\n        var doc = self._mongoConnection.findOne(collectionName, {\n          _id: id\n        }) || null; // Return doc to all relevant callbacks. Note that this array can\n        // continue to grow during callback excecution.\n\n        while (!_.isEmpty(callbacks)) {\n          // Clone the document so that the various calls to fetch don't return\n          // objects that are intertwingled with each other. Clone before\n          // popping the future, so that if clone throws, the error gets passed\n          // to the next callback.\n          var clonedDoc = EJSON.clone(doc);\n          callbacks.pop()(null, clonedDoc);\n        }\n      } catch (e) {\n        while (!_.isEmpty(callbacks)) {\n          callbacks.pop()(e);\n        }\n      } finally {\n        // XXX consider keeping the doc around for a period of time before\n        // removing from the cache\n        delete self._callbacksForCacheKey[cacheKey];\n      }\n    }).run();\n  }\n});\n\nMongoTest.DocFetcher = DocFetcher;","map":{"version":3,"sources":["packages/mongo/doc_fetcher.js"],"names":["Fiber","Npm","require","Future","DocFetcher","mongoConnection","self","_mongoConnection","_callbacksForCacheKey","_","extend","prototype","fetch","collectionName","id","cacheKey","callback","check","String","has","push","callbacks","doc","findOne","_id","isEmpty","clonedDoc","EJSON","clone","pop","e","run","MongoTest"],"mappings":"AAAA,IAAIA,QAAQC,IAAIC,OAAJ,CAAY,QAAZ,CAAZ;;AACA,IAAIC,SAASF,IAAIC,OAAJ,CAAY,eAAZ,CAAb;;AAEAE,aAAa,UAAUC,eAAV,EAA2B;AACtC,MAAIC,OAAO,IAAX;AACAA,OAAKC,gBAAL,GAAwBF,eAAxB,CAFsC,CAGtC;;AACAC,OAAKE,qBAAL,GAA6B,EAA7B;AACD,CALD;;AAOAC,EAAEC,MAAF,CAASN,WAAWO,SAApB,EAA+B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,SAAO,UAAUC,cAAV,EAA0BC,EAA1B,EAA8BC,QAA9B,EAAwCC,QAAxC,EAAkD;AACvD,QAAIV,OAAO,IAAX;AAEAW,UAAMJ,cAAN,EAAsBK,MAAtB,EAHuD,CAIvD;;AACAD,UAAMF,QAAN,EAAgBG,MAAhB,EALuD,CAOvD;AACA;;AACA,QAAIT,EAAEU,GAAF,CAAMb,KAAKE,qBAAX,EAAkCO,QAAlC,CAAJ,EAAiD;AAC/CT,WAAKE,qBAAL,CAA2BO,QAA3B,EAAqCK,IAArC,CAA0CJ,QAA1C;;AACA;AACD;;AAED,QAAIK,YAAYf,KAAKE,qBAAL,CAA2BO,QAA3B,IAAuC,CAACC,QAAD,CAAvD;AAEAhB,UAAM,YAAY;AAChB,UAAI;AACF,YAAIsB,MAAMhB,KAAKC,gBAAL,CAAsBgB,OAAtB,CACRV,cADQ,EACQ;AAACW,eAAKV;AAAN,SADR,KACsB,IADhC,CADE,CAGF;AACA;;AACA,eAAO,CAACL,EAAEgB,OAAF,CAAUJ,SAAV,CAAR,EAA8B;AAC5B;AACA;AACA;AACA;AACA,cAAIK,YAAYC,MAAMC,KAAN,CAAYN,GAAZ,CAAhB;AACAD,oBAAUQ,GAAV,GAAgB,IAAhB,EAAsBH,SAAtB;AACD;AACF,OAbD,CAaE,OAAOI,CAAP,EAAU;AACV,eAAO,CAACrB,EAAEgB,OAAF,CAAUJ,SAAV,CAAR,EAA8B;AAC5BA,oBAAUQ,GAAV,GAAgBC,CAAhB;AACD;AACF,OAjBD,SAiBU;AACR;AACA;AACA,eAAOxB,KAAKE,qBAAL,CAA2BO,QAA3B,CAAP;AACD;AACF,KAvBD,EAuBGgB,GAvBH;AAwBD;AAlD4B,CAA/B;;AAqDAC,UAAU5B,UAAV,GAAuBA,UAAvB","file":"packages/mongo/doc_fetcher.js.map","sourcesContent":["var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\nDocFetcher = function (mongoConnection) {\n  var self = this;\n  self._mongoConnection = mongoConnection;\n  // Map from cache key -> [callback]\n  self._callbacksForCacheKey = {};\n};\n\n_.extend(DocFetcher.prototype, {\n  // Fetches document \"id\" from collectionName, returning it or null if not\n  // found.\n  //\n  // If you make multiple calls to fetch() with the same cacheKey (a string),\n  // DocFetcher may assume that they all return the same document. (It does\n  // not check to see if collectionName/id match.)\n  //\n  // You may assume that callback is never called synchronously (and in fact\n  // OplogObserveDriver does so).\n  fetch: function (collectionName, id, cacheKey, callback) {\n    var self = this;\n\n    check(collectionName, String);\n    // id is some sort of scalar\n    check(cacheKey, String);\n\n    // If there's already an in-progress fetch for this cache key, yield until\n    // it's done and return whatever it returns.\n    if (_.has(self._callbacksForCacheKey, cacheKey)) {\n      self._callbacksForCacheKey[cacheKey].push(callback);\n      return;\n    }\n\n    var callbacks = self._callbacksForCacheKey[cacheKey] = [callback];\n\n    Fiber(function () {\n      try {\n        var doc = self._mongoConnection.findOne(\n          collectionName, {_id: id}) || null;\n        // Return doc to all relevant callbacks. Note that this array can\n        // continue to grow during callback excecution.\n        while (!_.isEmpty(callbacks)) {\n          // Clone the document so that the various calls to fetch don't return\n          // objects that are intertwingled with each other. Clone before\n          // popping the future, so that if clone throws, the error gets passed\n          // to the next callback.\n          var clonedDoc = EJSON.clone(doc);\n          callbacks.pop()(null, clonedDoc);\n        }\n      } catch (e) {\n        while (!_.isEmpty(callbacks)) {\n          callbacks.pop()(e);\n        }\n      } finally {\n        // XXX consider keeping the doc around for a period of time before\n        // removing from the cache\n        delete self._callbacksForCacheKey[cacheKey];\n      }\n    }).run();\n  }\n});\n\nMongoTest.DocFetcher = DocFetcher;\n"]},"hash":"099dee0526417df0123ce078adcf2e053455a91a"}
