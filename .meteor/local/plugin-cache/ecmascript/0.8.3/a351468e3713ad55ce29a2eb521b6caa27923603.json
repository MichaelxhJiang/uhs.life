{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":["AccountsCommon"],"specifiers":[{"kind":"local","local":"AccountsCommon","exported":"AccountsCommon"}]}}},"options":{"filename":"packages/accounts-base/accounts_common.js","filenameRelative":"packages/accounts-base/accounts_common.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/accounts-base/accounts_common.js.map","sourceFileName":"packages/accounts-base/accounts_common.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"accounts_common"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nmodule.export({\n  AccountsCommon: function () {\n    return AccountsCommon;\n  }\n});\n\nvar AccountsCommon = function () {\n  function AccountsCommon(options) {\n    (0, _classCallCheck3.default)(this, AccountsCommon);\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {}; // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n\n    this.connection = undefined;\n\n    this._initConnection(options || {}); // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n\n\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    }); // Callback exceptions are printed with Meteor._debug and ignored.\n\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    });\n  } /**\n     * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n     * @locus Anywhere\n     */\n\n  AccountsCommon.prototype.userId = function () {\n    function userId() {\n      throw new Error(\"userId method not implemented\");\n    }\n\n    return userId;\n  }(); /**\n        * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n        * @locus Anywhere\n        */\n\n  AccountsCommon.prototype.user = function () {\n    function user() {\n      var userId = this.userId();\n      return userId ? this.users.findOne(userId) : null;\n    }\n\n    return user;\n  }(); // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   */\n\n  AccountsCommon.prototype.config = function () {\n    function config(options) {\n      var self = this; // We don't want users to accidentally only call Accounts.config on the\n      // client, where some of the options will have partial effects (eg removing\n      // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n      // is set, or redirecting Google login to a specific-domain page) without\n      // having their full effects.\n\n      if (Meteor.isServer) {\n        __meteor_runtime_config__.accountsConfigCalled = true;\n      } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n        // XXX would be nice to \"crash\" the client and replace the UI with an error\n        // message, but there's no trivial way to do this.\n        Meteor._debug(\"Accounts.config was called on the client but not on the \" + \"server; some configuration options may not take effect.\");\n      } // We need to validate the oauthSecretKey option at the time\n      // Accounts.config is called. We also deliberately don't store the\n      // oauthSecretKey in Accounts._options.\n\n\n      if (_.has(options, \"oauthSecretKey\")) {\n        if (Meteor.isClient) throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n        if (!Package[\"oauth-encryption\"]) throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n        Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n        options = _.omit(options, \"oauthSecretKey\");\n      } // validate option keys\n\n\n      var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpirationInDays\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\", \"ambiguousErrorMessages\", \"bcryptRounds\"];\n\n      _.each(_.keys(options), function (key) {\n        if (!_.contains(VALID_KEYS, key)) {\n          throw new Error(\"Accounts.config: Invalid key: \" + key);\n        }\n      }); // set values in Accounts._options\n\n\n      _.each(VALID_KEYS, function (key) {\n        if (key in options) {\n          if (key in self._options) {\n            throw new Error(\"Can't set `\" + key + \"` more than once\");\n          }\n\n          self._options[key] = options[key];\n        }\n      });\n    }\n\n    return config;\n  }(); /**\n        * @summary Register a callback to be called after a login attempt succeeds.\n        * @locus Anywhere\n        * @param {Function} func The callback to be called when login is successful.\n        */\n\n  AccountsCommon.prototype.onLogin = function () {\n    function onLogin(func) {\n      return this._onLoginHook.register(func);\n    }\n\n    return onLogin;\n  }(); /**\n        * @summary Register a callback to be called after a login attempt fails.\n        * @locus Anywhere\n        * @param {Function} func The callback to be called after the login has failed.\n        */\n\n  AccountsCommon.prototype.onLoginFailure = function () {\n    function onLoginFailure(func) {\n      return this._onLoginFailureHook.register(func);\n    }\n\n    return onLoginFailure;\n  }(); /**\n        * @summary Register a callback to be called after a logout attempt succeeds.\n        * @locus Anywhere\n        * @param {Function} func The callback to be called when logout is successful.\n        */\n\n  AccountsCommon.prototype.onLogout = function () {\n    function onLogout(func) {\n      return this._onLogoutHook.register(func);\n    }\n\n    return onLogout;\n  }();\n\n  AccountsCommon.prototype._initConnection = function () {\n    function _initConnection(options) {\n      if (!Meteor.isClient) {\n        return;\n      } // The connection used by the Accounts system. This is the connection\n      // that will get logged in by Meteor.login(), and this is the\n      // connection whose login state will be reflected by Meteor.userId().\n      //\n      // It would be much preferable for this to be in accounts_client.js,\n      // but it has to be here because it's needed to create the\n      // Meteor.users collection.\n\n\n      if (options.connection) {\n        this.connection = options.connection;\n      } else if (options.ddpUrl) {\n        this.connection = DDP.connect(options.ddpUrl);\n      } else if (typeof __meteor_runtime_config__ !== \"undefined\" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n        // Temporary, internal hook to allow the server to point the client\n        // to a different authentication server. This is for a very\n        // particular use case that comes up when implementing a oauth\n        // server. Unsupported and may go away at any point in time.\n        //\n        // We will eventually provide a general way to use account-base\n        // against any DDP connection, not just one special one.\n        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n      } else {\n        this.connection = Meteor.connection;\n      }\n    }\n\n    return _initConnection;\n  }();\n\n  AccountsCommon.prototype._getTokenLifetimeMs = function () {\n    function _getTokenLifetimeMs() {\n      // When loginExpirationInDays is set to null, we'll use a really high\n      // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n      // unexpiring token.\n      var loginExpirationInDays = this._options.loginExpirationInDays === null ? LOGIN_UNEXPIRING_TOKEN_DAYS : this._options.loginExpirationInDays;\n      return (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n    }\n\n    return _getTokenLifetimeMs;\n  }();\n\n  AccountsCommon.prototype._getPasswordResetTokenLifetimeMs = function () {\n    function _getPasswordResetTokenLifetimeMs() {\n      return (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n    }\n\n    return _getPasswordResetTokenLifetimeMs;\n  }();\n\n  AccountsCommon.prototype._getPasswordEnrollTokenLifetimeMs = function () {\n    function _getPasswordEnrollTokenLifetimeMs() {\n      return (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n    }\n\n    return _getPasswordEnrollTokenLifetimeMs;\n  }();\n\n  AccountsCommon.prototype._tokenExpiration = function () {\n    function _tokenExpiration(when) {\n      // We pass when through the Date constructor for backwards compatibility;\n      // `when` used to be a number.\n      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());\n    }\n\n    return _tokenExpiration;\n  }();\n\n  AccountsCommon.prototype._tokenExpiresSoon = function () {\n    function _tokenExpiresSoon(when) {\n      var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n\n      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n      if (minLifetimeMs > minLifetimeCapMs) minLifetimeMs = minLifetimeCapMs;\n      return new Date() > new Date(when) - minLifetimeMs;\n    }\n\n    return _tokenExpiresSoon;\n  }();\n\n  return AccountsCommon;\n}();\n\nvar Ap = AccountsCommon.prototype; // Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\n\nMeteor.userId = function () {\n  return Accounts.userId();\n}; /**\n    * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n    * @locus Anywhere but publish functions\n    * @importFromPackage meteor\n    */\n\nMeteor.user = function () {\n  return Accounts.user();\n}; // how long (in days) until a login token expires\n\n\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90; // Expose for testing.\n\nAp.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS; // how long (in days) until reset password token expires\n\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3; // how long (in days) until enrol password token expires\n\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30; // Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\n\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\n\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\n\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000; // A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\n\nvar LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100; // Expose for testing.\n\nAp.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS; // loginServiceConfiguration and ConfigError are maintained for backwards compatibility\n\nMeteor.startup(function () {\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n}); // Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\n\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {\n  this.message = description;\n});\nAp.LoginCancelledError.prototype.name = lceName; // This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\n\nAp.LoginCancelledError.numericError = 0x8acdc2f;","map":{"version":3,"sources":["packages/accounts-base/accounts_common.js"],"names":["module","export","AccountsCommon","options","_options","connection","undefined","_initConnection","users","Mongo","Collection","_preventAutopublish","_onLoginHook","Hook","bindEnvironment","debugPrintExceptions","_onLoginFailureHook","_onLogoutHook","userId","Error","user","findOne","config","self","Meteor","isServer","__meteor_runtime_config__","accountsConfigCalled","_debug","_","has","isClient","Package","OAuthEncryption","loadKey","oauthSecretKey","omit","VALID_KEYS","each","keys","key","contains","onLogin","func","register","onLoginFailure","onLogout","ddpUrl","DDP","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","LOGIN_UNEXPIRING_TOKEN_DAYS","DEFAULT_LOGIN_EXPIRATION_DAYS","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","_tokenExpiration","when","Date","getTime","_tokenExpiresSoon","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS","Ap","prototype","Accounts","EXPIRE_TOKENS_INTERVAL_MS","CONNECTION_CLOSE_DELAY_MS","startup","ServiceConfiguration","loginServiceConfiguration","configurations","ConfigError","lceName","LoginCancelledError","makeErrorType","description","message","name","numericError"],"mappings":"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","file":"packages/accounts-base/accounts_common.js.map","sourcesContent":["/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpirationInDays\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\",\n                      \"ambiguousErrorMessages\", \"bcryptRounds\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays =\n      (this._options.loginExpirationInDays === null)\n        ? LOGIN_UNEXPIRING_TOKEN_DAYS\n        : this._options.loginExpirationInDays;\n    return (loginExpirationInDays\n        || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return (this._options.passwordResetTokenExpirationInDays ||\n            DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Expose for testing.\nAp.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n\n// how long (in days) until reset password token expires\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n// Expose for testing.\nAp.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n"]},"hash":"a351468e3713ad55ce29a2eb521b6caa27923603"}
