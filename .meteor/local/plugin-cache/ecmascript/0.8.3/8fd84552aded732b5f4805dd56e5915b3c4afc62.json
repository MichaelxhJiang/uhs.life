{"metadata":{"usedHelpers":["classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"./ejson","imported":["EJSON"],"specifiers":[{"kind":"named","imported":"EJSON","local":"EJSON"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/ejson/custom_models_for_tests.js","filenameRelative":"packages/ejson/custom_models_for_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/ejson/custom_models_for_tests.js.map","sourceFileName":"packages/ejson/custom_models_for_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"custom_models_for_tests"},"ignored":false,"code":"var _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar EJSON = void 0;\nmodule.watch(require(\"./ejson\"), {\n  EJSON: function (v) {\n    EJSON = v;\n  }\n}, 0);\n\nvar Address = function () {\n  function Address(city, state) {\n    (0, _classCallCheck3.default)(this, Address);\n    this.city = city;\n    this.state = state;\n  }\n\n  Address.prototype.typeName = function () {\n    function typeName() {\n      return 'Address';\n    }\n\n    return typeName;\n  }();\n\n  Address.prototype.toJSONValue = function () {\n    function toJSONValue() {\n      return {\n        city: this.city,\n        state: this.state\n      };\n    }\n\n    return toJSONValue;\n  }();\n\n  return Address;\n}();\n\nEJSON.addType('Address', function (value) {\n  return new Address(value.city, value.state);\n});\n\nvar Person = function () {\n  function Person(name, dob, address) {\n    (0, _classCallCheck3.default)(this, Person);\n    this.name = name;\n    this.dob = dob;\n    this.address = address;\n  }\n\n  Person.prototype.typeName = function () {\n    function typeName() {\n      return 'Person';\n    }\n\n    return typeName;\n  }();\n\n  Person.prototype.toJSONValue = function () {\n    function toJSONValue() {\n      return {\n        name: this.name,\n        dob: EJSON.toJSONValue(this.dob),\n        address: EJSON.toJSONValue(this.address)\n      };\n    }\n\n    return toJSONValue;\n  }();\n\n  return Person;\n}();\n\nEJSON.addType('Person', function (value) {\n  return new Person(value.name, EJSON.fromJSONValue(value.dob), EJSON.fromJSONValue(value.address));\n});\n\nvar Holder = function () {\n  function Holder(content) {\n    (0, _classCallCheck3.default)(this, Holder);\n    this.content = content;\n  }\n\n  Holder.prototype.typeName = function () {\n    function typeName() {\n      return 'Holder';\n    }\n\n    return typeName;\n  }();\n\n  Holder.prototype.toJSONValue = function () {\n    function toJSONValue() {\n      return this.content;\n    }\n\n    return toJSONValue;\n  }();\n\n  return Holder;\n}();\n\nEJSON.addType('Holder', function (value) {\n  return new Holder(value);\n});\nvar EJSONTest = {\n  Address: Address,\n  Person: Person,\n  Holder: Holder\n};\nmodule.exportDefault(EJSONTest);","map":{"version":3,"sources":["packages/ejson/custom_models_for_tests.js"],"names":["EJSON","module","watch","require","v","Address","city","state","typeName","toJSONValue","addType","value","Person","name","dob","address","fromJSONValue","Holder","content","EJSONTest","exportDefault"],"mappings":";;;;;;AAAA,IAAIA,cAAJ;AAAUC,OAAOC,KAAP,CAAaC,QAAQ,SAAR,CAAb,EAAgC;AAACH,OAAD,YAAOI,CAAP,EAAS;AAACJ,YAAMI,CAAN;AAAQ;AAAlB,CAAhC,EAAoD,CAApD;;IAEJC,O;AACJ,mBAAYC,IAAZ,EAAkBC,KAAlB,EAAyB;AAAA;AACvB,SAAKD,IAAL,GAAYA,IAAZ;AACA,SAAKC,KAAL,GAAaA,KAAb;AACD;;oBAEDC,Q;wBAAW;AACT,aAAO,SAAP;AACD;;;;;oBAEDC,W;2BAAc;AACZ,aAAO;AACLH,cAAM,KAAKA,IADN;AAELC,eAAO,KAAKA;AAFP,OAAP;AAID;;;;;;;;AAGHP,MAAMU,OAAN,CAAc,SAAd,EAAyB;AAAA,SAAS,IAAIL,OAAJ,CAAYM,MAAML,IAAlB,EAAwBK,MAAMJ,KAA9B,CAAT;AAAA,CAAzB;;IAEMK,M;AACJ,kBAAYC,IAAZ,EAAkBC,GAAlB,EAAuBC,OAAvB,EAAgC;AAAA;AAC9B,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAWA,GAAX;AACA,SAAKC,OAAL,GAAeA,OAAf;AACD;;mBAEDP,Q;wBAAW;AACT,aAAO,QAAP;AACD;;;;;mBAEDC,W;2BAAc;AACZ,aAAO;AACLI,cAAM,KAAKA,IADN;AAELC,aAAKd,MAAMS,WAAN,CAAkB,KAAKK,GAAvB,CAFA;AAGLC,iBAASf,MAAMS,WAAN,CAAkB,KAAKM,OAAvB;AAHJ,OAAP;AAKD;;;;;;;;AAGHf,MAAMU,OAAN,CACE,QADF,EAEE;AAAA,SAAS,IAAIE,MAAJ,CACPD,MAAME,IADC,EAEPb,MAAMgB,aAAN,CAAoBL,MAAMG,GAA1B,CAFO,EAGPd,MAAMgB,aAAN,CAAoBL,MAAMI,OAA1B,CAHO,CAAT;AAAA,CAFF;;IASME,M;AACJ,kBAAYC,OAAZ,EAAqB;AAAA;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD;;mBAEDV,Q;wBAAW;AACT,aAAO,QAAP;AACD;;;;;mBAEDC,W;2BAAc;AACZ,aAAO,KAAKS,OAAZ;AACD;;;;;;;;AAGHlB,MAAMU,OAAN,CAAc,QAAd,EAAwB;AAAA,SAAS,IAAIO,MAAJ,CAAWN,KAAX,CAAT;AAAA,CAAxB;AAEA,IAAMQ,YAAY;AAChBd,kBADgB;AAEhBO,gBAFgB;AAGhBK;AAHgB,CAAlB;AAnEAhB,OAAOmB,aAAP,CAyEeD,SAzEf","file":"packages/ejson/custom_models_for_tests.js.map","sourcesContent":["import { EJSON } from './ejson';\n\nclass Address {\n  constructor(city, state) {\n    this.city = city;\n    this.state = state;\n  }\n\n  typeName() {\n    return 'Address';\n  }\n\n  toJSONValue() {\n    return {\n      city: this.city,\n      state: this.state,\n    };\n  }\n}\n\nEJSON.addType('Address', value => new Address(value.city, value.state));\n\nclass Person {\n  constructor(name, dob, address) {\n    this.name = name;\n    this.dob = dob;\n    this.address = address;\n  }\n\n  typeName() {\n    return 'Person';\n  }\n\n  toJSONValue() {\n    return {\n      name: this.name,\n      dob: EJSON.toJSONValue(this.dob),\n      address: EJSON.toJSONValue(this.address),\n    };\n  }\n}\n\nEJSON.addType(\n  'Person',\n  value => new Person(\n    value.name,\n    EJSON.fromJSONValue(value.dob),\n    EJSON.fromJSONValue(value.address)\n  )\n);\n\nclass Holder {\n  constructor(content) {\n    this.content = content;\n  }\n\n  typeName() {\n    return 'Holder';\n  }\n\n  toJSONValue() {\n    return this.content;\n  }\n}\n\nEJSON.addType('Holder', value => new Holder(value));\n\nconst EJSONTest = {\n  Address,\n  Person,\n  Holder,\n};\n\nexport default EJSONTest;\n"]},"hash":"8fd84552aded732b5f4805dd56e5915b3c4afc62"}
