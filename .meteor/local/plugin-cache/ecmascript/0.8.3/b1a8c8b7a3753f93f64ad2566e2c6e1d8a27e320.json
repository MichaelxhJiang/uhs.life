{"metadata":{"usedHelpers":["toConsumableArray","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"./common","imported":["hasOwn"],"specifiers":[{"kind":"named","imported":"hasOwn","local":"hasOwn"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/minimongo/minimongo_tests_client.js","filenameRelative":"packages/minimongo/minimongo_tests_client.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/minimongo/minimongo_tests_client.js.map","sourceFileName":"packages/minimongo/minimongo_tests_client.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"minimongo_tests_client"},"ignored":false,"code":"var _toConsumableArray2 = require(\"babel-runtime/helpers/toConsumableArray\");\n\nvar _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar hasOwn = void 0;\nmodule.watch(require(\"./common\"), {\n  hasOwn: function (v) {\n    hasOwn = v;\n  }\n}, 0);\n// Hack to make LocalCollection generate ObjectIDs by default.\nLocalCollection._useOID = true; // assert that f is a strcmp-style comparison function that puts\n// 'values' in the provided order\n\nvar assert_ordering = function (test, f, values) {\n  for (var i = 0; i < values.length; i++) {\n    var x = f(values[i], values[i]);\n\n    if (x !== 0) {\n      // XXX super janky\n      test.fail({\n        type: 'minimongo-ordering',\n        message: \"value doesn't order as equal to itself\",\n        value: JSON.stringify(values[i]),\n        should_be_zero_but_got: JSON.stringify(x)\n      });\n    }\n\n    if (i + 1 < values.length) {\n      var less = values[i];\n      var more = values[i + 1];\n      x = f(less, more);\n\n      if (!(x < 0)) {\n        // XXX super janky\n        test.fail({\n          type: 'minimongo-ordering',\n          message: 'ordering test failed',\n          first: JSON.stringify(less),\n          second: JSON.stringify(more),\n          should_be_negative_but_got: JSON.stringify(x)\n        });\n      }\n\n      x = f(more, less);\n\n      if (!(x > 0)) {\n        // XXX super janky\n        test.fail({\n          type: 'minimongo-ordering',\n          message: 'ordering test failed',\n          first: JSON.stringify(less),\n          second: JSON.stringify(more),\n          should_be_positive_but_got: JSON.stringify(x)\n        });\n      }\n    }\n  }\n};\n\nvar log_callbacks = function (operations) {\n  return {\n    addedAt: function (obj, idx, before) {\n      delete obj._id;\n      operations.push(EJSON.clone(['added', obj, idx, before]));\n    },\n    changedAt: function (obj, old_obj, at) {\n      delete obj._id;\n      delete old_obj._id;\n      operations.push(EJSON.clone(['changed', obj, at, old_obj]));\n    },\n    movedTo: function (obj, old_at, new_at, before) {\n      delete obj._id;\n      operations.push(EJSON.clone(['moved', obj, old_at, new_at, before]));\n    },\n    removedAt: function (old_obj, at) {\n      var id = old_obj._id;\n      delete old_obj._id;\n      operations.push(EJSON.clone(['removed', id, at, old_obj]));\n    }\n  };\n}; // XXX test shared structure in all MM entrypoints\n\n\nTinytest.add('minimongo - basics', function (test) {\n  var c = new LocalCollection();\n  var fluffyKitten_id = void 0;\n  var count = void 0;\n  fluffyKitten_id = c.insert({\n    type: 'kitten',\n    name: 'fluffy'\n  });\n  c.insert({\n    type: 'kitten',\n    name: 'snookums'\n  });\n  c.insert({\n    type: 'cryptographer',\n    name: 'alice'\n  });\n  c.insert({\n    type: 'cryptographer',\n    name: 'bob'\n  });\n  c.insert({\n    type: 'cryptographer',\n    name: 'cara'\n  });\n  test.equal(c.find().count(), 5);\n  test.equal(c.find({\n    type: 'kitten'\n  }).count(), 2);\n  test.equal(c.find({\n    type: 'cryptographer'\n  }).count(), 3);\n  test.length(c.find({\n    type: 'kitten'\n  }).fetch(), 2);\n  test.length(c.find({\n    type: 'cryptographer'\n  }).fetch(), 3);\n  test.equal(fluffyKitten_id, c.findOne({\n    type: 'kitten',\n    name: 'fluffy'\n  })._id);\n  c.remove({\n    name: 'cara'\n  });\n  test.equal(c.find().count(), 4);\n  test.equal(c.find({\n    type: 'kitten'\n  }).count(), 2);\n  test.equal(c.find({\n    type: 'cryptographer'\n  }).count(), 2);\n  test.length(c.find({\n    type: 'kitten'\n  }).fetch(), 2);\n  test.length(c.find({\n    type: 'cryptographer'\n  }).fetch(), 2);\n  count = c.update({\n    name: 'snookums'\n  }, {\n    $set: {\n      type: 'cryptographer'\n    }\n  });\n  test.equal(count, 1);\n  test.equal(c.find().count(), 4);\n  test.equal(c.find({\n    type: 'kitten'\n  }).count(), 1);\n  test.equal(c.find({\n    type: 'cryptographer'\n  }).count(), 3);\n  test.length(c.find({\n    type: 'kitten'\n  }).fetch(), 1);\n  test.length(c.find({\n    type: 'cryptographer'\n  }).fetch(), 3);\n  c.remove(null);\n  c.remove(false);\n  c.remove(undefined);\n  test.equal(c.find().count(), 4);\n  c.remove({\n    _id: null\n  });\n  c.remove({\n    _id: false\n  });\n  c.remove({\n    _id: undefined\n  });\n  count = c.remove();\n  test.equal(count, 0);\n  test.equal(c.find().count(), 4);\n  count = c.remove({});\n  test.equal(count, 4);\n  test.equal(c.find().count(), 0);\n  c.insert({\n    _id: 1,\n    name: 'strawberry',\n    tags: ['fruit', 'red', 'squishy']\n  });\n  c.insert({\n    _id: 2,\n    name: 'apple',\n    tags: ['fruit', 'red', 'hard']\n  });\n  c.insert({\n    _id: 3,\n    name: 'rose',\n    tags: ['flower', 'red', 'squishy']\n  });\n  test.equal(c.find({\n    tags: 'flower'\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }).count(), 2);\n  test.equal(c.find({\n    tags: 'red'\n  }).count(), 3);\n  test.length(c.find({\n    tags: 'flower'\n  }).fetch(), 1);\n  test.length(c.find({\n    tags: 'fruit'\n  }).fetch(), 2);\n  test.length(c.find({\n    tags: 'red'\n  }).fetch(), 3);\n  test.equal(c.findOne(1).name, 'strawberry');\n  test.equal(c.findOne(2).name, 'apple');\n  test.equal(c.findOne(3).name, 'rose');\n  test.equal(c.findOne(4), undefined);\n  test.equal(c.findOne('abc'), undefined);\n  test.equal(c.findOne(undefined), undefined);\n  test.equal(c.find(1).count(), 1);\n  test.equal(c.find(4).count(), 0);\n  test.equal(c.find('abc').count(), 0);\n  test.equal(c.find(undefined).count(), 0);\n  test.equal(c.find().count(), 3);\n  test.equal(c.find(1, {\n    skip: 1\n  }).count(), 0);\n  test.equal(c.find({\n    _id: 1\n  }, {\n    skip: 1\n  }).count(), 0);\n  test.equal(c.find({\n    _id: undefined\n  }).count(), 0);\n  test.equal(c.find({\n    _id: false\n  }).count(), 0);\n  test.equal(c.find({\n    _id: null\n  }).count(), 0);\n  test.equal(c.find({\n    _id: ''\n  }).count(), 0);\n  test.equal(c.find({\n    _id: 0\n  }).count(), 0);\n  test.equal(c.find({}, {\n    skip: 1\n  }).count(), 2);\n  test.equal(c.find({}, {\n    skip: 2\n  }).count(), 1);\n  test.equal(c.find({}, {\n    limit: 2\n  }).count(), 2);\n  test.equal(c.find({}, {\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({}, {\n    skip: 1,\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    skip: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    skip: 1,\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find(1, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(), 0);\n  test.equal(c.find({\n    _id: 1\n  }, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(), 0);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(), 2);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    skip: 2\n  }).count(), 1);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    limit: 2\n  }).count(), 2);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({}, {\n    sort: ['_id', 'desc'],\n    skip: 1,\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    sort: ['_id', 'desc'],\n    skip: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    sort: ['_id', 'desc'],\n    limit: 1\n  }).count(), 1);\n  test.equal(c.find({\n    tags: 'fruit'\n  }, {\n    sort: ['_id', 'desc'],\n    skip: 1,\n    limit: 1\n  }).count(), 1); // Regression test for #455.\n\n  c.insert({\n    foo: {\n      bar: 'baz'\n    }\n  });\n  test.equal(c.find({\n    foo: {\n      bam: 'baz'\n    }\n  }).count(), 0);\n  test.equal(c.find({\n    foo: {\n      bar: 'baz'\n    }\n  }).count(), 1); // Regression test for #5301\n\n  c.remove({});\n  c.insert({\n    a: 'a',\n    b: 'b'\n  });\n\n  var noop = function () {\n    return null;\n  };\n\n  test.equal(c.find({\n    a: noop\n  }).count(), 1);\n  test.equal(c.find({\n    a: 'a',\n    b: noop\n  }).count(), 1);\n  test.equal(c.find({\n    c: noop\n  }).count(), 1);\n  test.equal(c.find({\n    a: noop,\n    c: 'c'\n  }).count(), 0);\n});\nTinytest.add('minimongo - error - no options', function (test) {\n  try {\n    throw MinimongoError('Not fun to have errors');\n  } catch (e) {\n    test.equal(e.message, 'Not fun to have errors');\n  }\n});\nTinytest.add('minimongo - error - with field', function (test) {\n  try {\n    throw MinimongoError('Cats are no fun', {\n      field: 'mice'\n    });\n  } catch (e) {\n    test.equal(e.message, \"Cats are no fun for field 'mice'\");\n  }\n});\nTinytest.add('minimongo - cursors', function (test) {\n  var c = new LocalCollection();\n  var res = void 0;\n\n  for (var i = 0; i < 20; i++) {\n    c.insert({\n      i: i\n    });\n  }\n\n  var q = c.find();\n  test.equal(q.count(), 20); // fetch\n\n  res = q.fetch();\n  test.length(res, 20);\n\n  for (var _i = 0; _i < 20; _i++) {\n    test.equal(res[_i].i, _i);\n  } // call it again, it still works\n\n\n  test.length(q.fetch(), 20); // forEach\n\n  var count = 0;\n  var context = {};\n  q.forEach(function (obj, i, cursor) {\n    test.equal(obj.i, count++);\n    test.equal(obj.i, i);\n    test.isTrue(context === this);\n    test.isTrue(cursor === q);\n  }, context);\n  test.equal(count, 20); // call it again, it still works\n\n  test.length(q.fetch(), 20); // iterator\n\n  count = 0;\n\n  for (var _iterator = q, _isArray = Array.isArray(_iterator), _i2 = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i2 >= _iterator.length) break;\n      _ref = _iterator[_i2++];\n    } else {\n      _i2 = _iterator.next();\n      if (_i2.done) break;\n      _ref = _i2.value;\n    }\n\n    var obj = _ref;\n    test.equal(obj.i, count++);\n  }\n\n  ;\n  test.equal(count, 20); // call it again, it still works\n\n  test.length(q.fetch(), 20); // test spread operator\n\n  test.equal([].concat((0, _toConsumableArray3.default)(q)), q.fetch()); // map\n\n  res = q.map(function (obj, i, cursor) {\n    test.equal(obj.i, i);\n    test.isTrue(context === this);\n    test.isTrue(cursor === q);\n    return obj.i * 2;\n  }, context);\n  test.length(res, 20);\n\n  for (var _i3 = 0; _i3 < 20; _i3++) {\n    test.equal(res[_i3], _i3 * 2);\n  } // call it again, it still works\n\n\n  test.length(q.fetch(), 20); // findOne (and no rewind first)\n\n  test.equal(c.findOne({\n    i: 0\n  }).i, 0);\n  test.equal(c.findOne({\n    i: 1\n  }).i, 1);\n\n  var id = c.findOne({\n    i: 2\n  })._id;\n\n  test.equal(c.findOne(id).i, 2);\n});\nTinytest.add('minimongo - transform', function (test) {\n  var c = new LocalCollection();\n  c.insert({}); // transform functions must return objects\n\n  var invalidTransform = function (doc) {\n    return doc._id;\n  };\n\n  test.throws(function () {\n    c.findOne({}, {\n      transform: invalidTransform\n    });\n  }); // transformed documents get _id field transplanted if not present\n\n  var transformWithoutId = function (doc) {\n    var docWithoutId = Object.assign({}, doc);\n    delete docWithoutId._id;\n    return docWithoutId;\n  };\n\n  test.equal(c.findOne({}, {\n    transform: transformWithoutId\n  })._id, c.findOne()._id);\n});\nTinytest.add('minimongo - misc', function (test) {\n  // deepcopy\n  var a = {\n    a: [1, 2, 3],\n    b: 'x',\n    c: true,\n    d: {\n      x: 12,\n      y: [12]\n    },\n    f: null,\n    g: new Date()\n  };\n  var b = EJSON.clone(a);\n  test.equal(a, b);\n  test.isTrue(LocalCollection._f._equal(a, b));\n  a.a.push(4);\n  test.length(b.a, 3);\n  a.c = false;\n  test.isTrue(b.c);\n  b.d.z = 15;\n  a.d.z = 14;\n  test.equal(b.d.z, 15);\n  a.d.y.push(88);\n  test.length(b.d.y, 1);\n  test.equal(a.g, b.g);\n  b.g.setDate(b.g.getDate() + 1);\n  test.notEqual(a.g, b.g);\n  a = {\n    x: function () {}\n  };\n  b = EJSON.clone(a);\n  a.x.a = 14;\n  test.equal(b.x.a, 14); // just to document current behavior\n});\nTinytest.add('minimongo - lookup', function (test) {\n  var lookupA = MinimongoTest.makeLookupFunction('a');\n  test.equal(lookupA({}), [{\n    value: undefined\n  }]);\n  test.equal(lookupA({\n    a: 1\n  }), [{\n    value: 1\n  }]);\n  test.equal(lookupA({\n    a: [1]\n  }), [{\n    value: [1]\n  }]);\n  var lookupAX = MinimongoTest.makeLookupFunction('a.x');\n  test.equal(lookupAX({\n    a: {\n      x: 1\n    }\n  }), [{\n    value: 1\n  }]);\n  test.equal(lookupAX({\n    a: {\n      x: [1]\n    }\n  }), [{\n    value: [1]\n  }]);\n  test.equal(lookupAX({\n    a: 5\n  }), [{\n    value: undefined\n  }]);\n  test.equal(lookupAX({\n    a: [{\n      x: 1\n    }, {\n      x: [2]\n    }, {\n      y: 3\n    }]\n  }), [{\n    value: 1,\n    arrayIndices: [0]\n  }, {\n    value: [2],\n    arrayIndices: [1]\n  }, {\n    value: undefined,\n    arrayIndices: [2]\n  }]);\n  var lookupA0X = MinimongoTest.makeLookupFunction('a.0.x');\n  test.equal(lookupA0X({\n    a: [{\n      x: 1\n    }]\n  }), [// From interpreting '0' as \"0th array element\".\n  {\n    value: 1,\n    arrayIndices: [0, 'x']\n  }, // From interpreting '0' as \"after branching in the array, look in the\n  // object {x:1} for a field named 0\".\n  {\n    value: undefined,\n    arrayIndices: [0]\n  }]);\n  test.equal(lookupA0X({\n    a: [{\n      x: [1]\n    }]\n  }), [{\n    value: [1],\n    arrayIndices: [0, 'x']\n  }, {\n    value: undefined,\n    arrayIndices: [0]\n  }]);\n  test.equal(lookupA0X({\n    a: 5\n  }), [{\n    value: undefined\n  }]);\n  test.equal(lookupA0X({\n    a: [{\n      x: 1\n    }, {\n      x: [2]\n    }, {\n      y: 3\n    }]\n  }), [// From interpreting '0' as \"0th array element\".\n  {\n    value: 1,\n    arrayIndices: [0, 'x']\n  }, // From interpreting '0' as \"after branching in the array, look in the\n  // object {x:1} for a field named 0\".\n  {\n    value: undefined,\n    arrayIndices: [0]\n  }, {\n    value: undefined,\n    arrayIndices: [1]\n  }, {\n    value: undefined,\n    arrayIndices: [2]\n  }]);\n  test.equal(MinimongoTest.makeLookupFunction('w.x.0.z')({\n    w: [{\n      x: [{\n        z: 5\n      }]\n    }]\n  }), [// From interpreting '0' as \"0th array element\".\n  {\n    value: 5,\n    arrayIndices: [0, 0, 'x']\n  }, // From interpreting '0' as \"after branching in the array, look in the\n  // object {z:5} for a field named \"0\".\n  {\n    value: undefined,\n    arrayIndices: [0, 0]\n  }]);\n});\nTinytest.add('minimongo - selector_compiler', function (test) {\n  var matches = function (shouldMatch, selector, doc) {\n    var doesMatch = new Minimongo.Matcher(selector).documentMatches(doc).result;\n\n    if (doesMatch != shouldMatch) {\n      // XXX super janky\n      test.fail({\n        message: \"minimongo match failure: document \" + (shouldMatch ? \"should match, but doesn't\" : \"shouldn't match, but does\"),\n        selector: JSON.stringify(selector),\n        document: JSON.stringify(doc)\n      });\n    }\n  };\n\n  var match = matches.bind(null, true);\n  var nomatch = matches.bind(null, false); // XXX blog post about what I learned while writing these tests (weird\n  // mongo edge cases)\n  // empty selectors\n\n  match({}, {});\n  match({}, {\n    a: 12\n  }); // scalars\n\n  match(1, {\n    _id: 1,\n    a: 'foo'\n  });\n  nomatch(1, {\n    _id: 2,\n    a: 'foo'\n  });\n  match('a', {\n    _id: 'a',\n    a: 'foo'\n  });\n  nomatch('a', {\n    _id: 'b',\n    a: 'foo'\n  }); // safety\n\n  nomatch(undefined, {});\n  nomatch(undefined, {\n    _id: 'foo'\n  });\n  nomatch(false, {\n    _id: 'foo'\n  });\n  nomatch(null, {\n    _id: 'foo'\n  });\n  nomatch({\n    _id: undefined\n  }, {\n    _id: 'foo'\n  });\n  nomatch({\n    _id: false\n  }, {\n    _id: 'foo'\n  });\n  nomatch({\n    _id: null\n  }, {\n    _id: 'foo'\n  });\n  nomatch({\n    _id: ''\n  }, {\n    _id: ''\n  });\n  nomatch({\n    _id: 0\n  }, {\n    _id: 0\n  }); // matching one or more keys\n\n  nomatch({\n    a: 12\n  }, {});\n  match({\n    a: 12\n  }, {\n    a: 12\n  });\n  match({\n    a: 12\n  }, {\n    a: 12,\n    b: 13\n  });\n  match({\n    a: 12,\n    b: 13\n  }, {\n    a: 12,\n    b: 13\n  });\n  match({\n    a: 12,\n    b: 13\n  }, {\n    a: 12,\n    b: 13,\n    c: 14\n  });\n  nomatch({\n    a: 12,\n    b: 13,\n    c: 14\n  }, {\n    a: 12,\n    b: 13\n  });\n  nomatch({\n    a: 12,\n    b: 13\n  }, {\n    b: 13,\n    c: 14\n  });\n  match({\n    a: 12\n  }, {\n    a: [12]\n  });\n  match({\n    a: 12\n  }, {\n    a: [11, 12, 13]\n  });\n  nomatch({\n    a: 12\n  }, {\n    a: [11, 13]\n  });\n  match({\n    a: 12,\n    b: 13\n  }, {\n    a: [11, 12, 13],\n    b: [13, 14, 15]\n  });\n  nomatch({\n    a: 12,\n    b: 13\n  }, {\n    a: [11, 12, 13],\n    b: [14, 15]\n  }); // dates\n\n  var date1 = new Date();\n  var date2 = new Date(date1.getTime() + 1000);\n  match({\n    a: date1\n  }, {\n    a: date1\n  });\n  nomatch({\n    a: date1\n  }, {\n    a: date2\n  }); // arrays\n\n  match({\n    a: [1, 2]\n  }, {\n    a: [1, 2]\n  });\n  match({\n    a: [1, 2]\n  }, {\n    a: [[1, 2]]\n  });\n  match({\n    a: [1, 2]\n  }, {\n    a: [[3, 4], [1, 2]]\n  });\n  nomatch({\n    a: [1, 2]\n  }, {\n    a: [3, 4]\n  });\n  nomatch({\n    a: [1, 2]\n  }, {\n    a: [[[1, 2]]]\n  }); // literal documents\n\n  match({\n    a: {\n      b: 12\n    }\n  }, {\n    a: {\n      b: 12\n    }\n  });\n  nomatch({\n    a: {\n      b: 12,\n      c: 13\n    }\n  }, {\n    a: {\n      b: 12\n    }\n  });\n  nomatch({\n    a: {\n      b: 12\n    }\n  }, {\n    a: {\n      b: 12,\n      c: 13\n    }\n  });\n  match({\n    a: {\n      b: 12,\n      c: 13\n    }\n  }, {\n    a: {\n      b: 12,\n      c: 13\n    }\n  });\n  nomatch({\n    a: {\n      b: 12,\n      c: 13\n    }\n  }, {\n    a: {\n      c: 13,\n      b: 12\n    }\n  }); // tested on mongodb\n\n  nomatch({\n    a: {}\n  }, {\n    a: {\n      b: 12\n    }\n  });\n  nomatch({\n    a: {\n      b: 12\n    }\n  }, {\n    a: {}\n  });\n  match({\n    a: {\n      b: 12,\n      c: [13, true, false, 2.2, 'a', null, {\n        d: 14\n      }]\n    }\n  }, {\n    a: {\n      b: 12,\n      c: [13, true, false, 2.2, 'a', null, {\n        d: 14\n      }]\n    }\n  });\n  match({\n    a: {\n      b: 12\n    }\n  }, {\n    a: {\n      b: 12\n    },\n    k: 99\n  });\n  match({\n    a: {\n      b: 12\n    }\n  }, {\n    a: [{\n      b: 12\n    }]\n  });\n  nomatch({\n    a: {\n      b: 12\n    }\n  }, {\n    a: [[{\n      b: 12\n    }]]\n  });\n  match({\n    a: {\n      b: 12\n    }\n  }, {\n    a: [{\n      b: 11\n    }, {\n      b: 12\n    }, {\n      b: 13\n    }]\n  });\n  nomatch({\n    a: {\n      b: 12\n    }\n  }, {\n    a: [{\n      b: 11\n    }, {\n      b: 12,\n      c: 20\n    }, {\n      b: 13\n    }]\n  });\n  nomatch({\n    a: {\n      b: 12,\n      c: 20\n    }\n  }, {\n    a: [{\n      b: 11\n    }, {\n      b: 12\n    }, {\n      c: 20\n    }]\n  });\n  match({\n    a: {\n      b: 12,\n      c: 20\n    }\n  }, {\n    a: [{\n      b: 11\n    }, {\n      b: 12,\n      c: 20\n    }, {\n      b: 13\n    }]\n  }); // null\n\n  match({\n    a: null\n  }, {\n    a: null\n  });\n  match({\n    a: null\n  }, {\n    b: 12\n  });\n  nomatch({\n    a: null\n  }, {\n    a: 12\n  });\n  match({\n    a: null\n  }, {\n    a: [1, 2, null, 3]\n  }); // tested on mongodb\n\n  nomatch({\n    a: null\n  }, {\n    a: [1, 2, {}, 3]\n  }); // tested on mongodb\n  // order comparisons: $lt, $gt, $lte, $gte\n\n  match({\n    a: {\n      $lt: 10\n    }\n  }, {\n    a: 9\n  });\n  nomatch({\n    a: {\n      $lt: 10\n    }\n  }, {\n    a: 10\n  });\n  nomatch({\n    a: {\n      $lt: 10\n    }\n  }, {\n    a: 11\n  });\n  match({\n    a: {\n      $gt: 10\n    }\n  }, {\n    a: 11\n  });\n  nomatch({\n    a: {\n      $gt: 10\n    }\n  }, {\n    a: 10\n  });\n  nomatch({\n    a: {\n      $gt: 10\n    }\n  }, {\n    a: 9\n  });\n  match({\n    a: {\n      $lte: 10\n    }\n  }, {\n    a: 9\n  });\n  match({\n    a: {\n      $lte: 10\n    }\n  }, {\n    a: 10\n  });\n  nomatch({\n    a: {\n      $lte: 10\n    }\n  }, {\n    a: 11\n  });\n  match({\n    a: {\n      $gte: 10\n    }\n  }, {\n    a: 11\n  });\n  match({\n    a: {\n      $gte: 10\n    }\n  }, {\n    a: 10\n  });\n  nomatch({\n    a: {\n      $gte: 10\n    }\n  }, {\n    a: 9\n  });\n  match({\n    a: {\n      $lt: 10\n    }\n  }, {\n    a: [11, 9, 12]\n  });\n  nomatch({\n    a: {\n      $lt: 10\n    }\n  }, {\n    a: [11, 12]\n  }); // (there's a full suite of ordering test elsewhere)\n\n  nomatch({\n    a: {\n      $lt: 'null'\n    }\n  }, {\n    a: null\n  });\n  match({\n    a: {\n      $lt: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [1, 3, 4]\n    }\n  });\n  match({\n    a: {\n      $gt: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [3, 3, 4]\n    }\n  });\n  nomatch({\n    a: {\n      $gt: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [1, 3, 4]\n    }\n  });\n  nomatch({\n    a: {\n      $gt: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [2, 3, 4]\n    }\n  });\n  nomatch({\n    a: {\n      $lt: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [2, 3, 4]\n    }\n  });\n  match({\n    a: {\n      $gte: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [2, 3, 4]\n    }\n  });\n  match({\n    a: {\n      $lte: {\n        x: [2, 3, 4]\n      }\n    }\n  }, {\n    a: {\n      x: [2, 3, 4]\n    }\n  });\n  nomatch({\n    a: {\n      $gt: [2, 3]\n    }\n  }, {\n    a: [1, 2]\n  }); // tested against mongodb\n  // composition of two qualifiers\n\n  nomatch({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: 8\n  });\n  nomatch({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: 9\n  });\n  match({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: 10\n  });\n  nomatch({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: 11\n  });\n  nomatch({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: 12\n  });\n  match({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: [8, 9, 10, 11, 12]\n  });\n  match({\n    a: {\n      $lt: 11,\n      $gt: 9\n    }\n  }, {\n    a: [8, 9, 11, 12]\n  }); // tested against mongodb\n  // $all\n\n  match({\n    a: {\n      $all: [1, 2]\n    }\n  }, {\n    a: [1, 2]\n  });\n  nomatch({\n    a: {\n      $all: [1, 2, 3]\n    }\n  }, {\n    a: [1, 2]\n  });\n  match({\n    a: {\n      $all: [1, 2]\n    }\n  }, {\n    a: [3, 2, 1]\n  });\n  match({\n    a: {\n      $all: [1, 'x']\n    }\n  }, {\n    a: [3, 'x', 1]\n  });\n  nomatch({\n    a: {\n      $all: ['2']\n    }\n  }, {\n    a: 2\n  });\n  nomatch({\n    a: {\n      $all: [2]\n    }\n  }, {\n    a: '2'\n  });\n  match({\n    a: {\n      $all: [[1, 2], [1, 3]]\n    }\n  }, {\n    a: [[1, 3], [1, 2], [1, 4]]\n  });\n  nomatch({\n    a: {\n      $all: [[1, 2], [1, 3]]\n    }\n  }, {\n    a: [[1, 4], [1, 2], [1, 4]]\n  });\n  match({\n    a: {\n      $all: [2, 2]\n    }\n  }, {\n    a: [2]\n  }); // tested against mongodb\n\n  nomatch({\n    a: {\n      $all: [2, 3]\n    }\n  }, {\n    a: [2, 2]\n  });\n  nomatch({\n    a: {\n      $all: [1, 2]\n    }\n  }, {\n    a: [[1, 2]]\n  }); // tested against mongodb\n\n  nomatch({\n    a: {\n      $all: [1, 2]\n    }\n  }, {}); // tested against mongodb, field doesn't exist\n\n  nomatch({\n    a: {\n      $all: [1, 2]\n    }\n  }, {\n    a: {\n      foo: 'bar'\n    }\n  }); // tested against mongodb, field is not an object\n\n  nomatch({\n    a: {\n      $all: []\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $all: []\n    }\n  }, {\n    a: [5]\n  });\n  match({\n    a: {\n      $all: [/i/, /e/i]\n    }\n  }, {\n    a: ['foo', 'bEr', 'biz']\n  });\n  nomatch({\n    a: {\n      $all: [/i/, /e/i]\n    }\n  }, {\n    a: ['foo', 'bar', 'biz']\n  });\n  match({\n    a: {\n      $all: [{\n        b: 3\n      }]\n    }\n  }, {\n    a: [{\n      b: 3\n    }]\n  }); // Members of $all other than regexps are *equality matches*, not document\n  // matches.\n\n  nomatch({\n    a: {\n      $all: [{\n        b: 3\n      }]\n    }\n  }, {\n    a: [{\n      b: 3,\n      k: 4\n    }]\n  });\n  test.throws(function () {\n    match({\n      a: {\n        $all: [{\n          $gt: 4\n        }]\n      }\n    }, {});\n  }); // $exists\n\n  match({\n    a: {\n      $exists: true\n    }\n  }, {\n    a: 12\n  });\n  nomatch({\n    a: {\n      $exists: true\n    }\n  }, {\n    b: 12\n  });\n  nomatch({\n    a: {\n      $exists: false\n    }\n  }, {\n    a: 12\n  });\n  match({\n    a: {\n      $exists: false\n    }\n  }, {\n    b: 12\n  });\n  match({\n    a: {\n      $exists: true\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $exists: true\n    }\n  }, {\n    b: []\n  });\n  nomatch({\n    a: {\n      $exists: false\n    }\n  }, {\n    a: []\n  });\n  match({\n    a: {\n      $exists: false\n    }\n  }, {\n    b: []\n  });\n  match({\n    a: {\n      $exists: true\n    }\n  }, {\n    a: [1]\n  });\n  nomatch({\n    a: {\n      $exists: true\n    }\n  }, {\n    b: [1]\n  });\n  nomatch({\n    a: {\n      $exists: false\n    }\n  }, {\n    a: [1]\n  });\n  match({\n    a: {\n      $exists: false\n    }\n  }, {\n    b: [1]\n  });\n  match({\n    a: {\n      $exists: 1\n    }\n  }, {\n    a: 5\n  });\n  match({\n    a: {\n      $exists: 0\n    }\n  }, {\n    b: 5\n  });\n  nomatch({\n    'a.x': {\n      $exists: false\n    }\n  }, {\n    a: [{}, {\n      x: 5\n    }]\n  });\n  match({\n    'a.x': {\n      $exists: true\n    }\n  }, {\n    a: [{}, {\n      x: 5\n    }]\n  });\n  match({\n    'a.x': {\n      $exists: true\n    }\n  }, {\n    a: [{}, {\n      x: 5\n    }]\n  });\n  match({\n    'a.x': {\n      $exists: true\n    }\n  }, {\n    a: {\n      x: []\n    }\n  });\n  match({\n    'a.x': {\n      $exists: true\n    }\n  }, {\n    a: {\n      x: null\n    }\n  }); // $mod\n\n  match({\n    a: {\n      $mod: [10, 1]\n    }\n  }, {\n    a: 11\n  });\n  nomatch({\n    a: {\n      $mod: [10, 1]\n    }\n  }, {\n    a: 12\n  });\n  match({\n    a: {\n      $mod: [10, 1]\n    }\n  }, {\n    a: [10, 11, 12]\n  });\n  nomatch({\n    a: {\n      $mod: [10, 1]\n    }\n  }, {\n    a: [10, 12]\n  });\n  [5, [10], [10, 1, 2], 'foo', {\n    bar: 1\n  }, []].forEach(function (badMod) {\n    test.throws(function () {\n      match({\n        a: {\n          $mod: badMod\n        }\n      }, {\n        a: 11\n      });\n    });\n  }); // $eq\n\n  nomatch({\n    a: {\n      $eq: 1\n    }\n  }, {\n    a: 2\n  });\n  match({\n    a: {\n      $eq: 2\n    }\n  }, {\n    a: 2\n  });\n  nomatch({\n    a: {\n      $eq: [1]\n    }\n  }, {\n    a: [2]\n  });\n  match({\n    a: {\n      $eq: [1, 2]\n    }\n  }, {\n    a: [1, 2]\n  });\n  match({\n    a: {\n      $eq: 1\n    }\n  }, {\n    a: [1, 2]\n  });\n  match({\n    a: {\n      $eq: 2\n    }\n  }, {\n    a: [1, 2]\n  });\n  nomatch({\n    a: {\n      $eq: 3\n    }\n  }, {\n    a: [1, 2]\n  });\n  match({\n    'a.b': {\n      $eq: 1\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  match({\n    'a.b': {\n      $eq: 2\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $eq: 3\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  match({\n    a: {\n      $eq: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 1\n    }\n  });\n  nomatch({\n    a: {\n      $eq: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 2\n    }\n  });\n  nomatch({\n    a: {\n      $eq: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 1,\n      y: 2\n    }\n  }); // $ne\n\n  match({\n    a: {\n      $ne: 1\n    }\n  }, {\n    a: 2\n  });\n  nomatch({\n    a: {\n      $ne: 2\n    }\n  }, {\n    a: 2\n  });\n  match({\n    a: {\n      $ne: [1]\n    }\n  }, {\n    a: [2]\n  });\n  nomatch({\n    a: {\n      $ne: [1, 2]\n    }\n  }, {\n    a: [1, 2]\n  }); // all tested against mongodb\n\n  nomatch({\n    a: {\n      $ne: 1\n    }\n  }, {\n    a: [1, 2]\n  });\n  nomatch({\n    a: {\n      $ne: 2\n    }\n  }, {\n    a: [1, 2]\n  });\n  match({\n    a: {\n      $ne: 3\n    }\n  }, {\n    a: [1, 2]\n  });\n  nomatch({\n    'a.b': {\n      $ne: 1\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $ne: 2\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  match({\n    'a.b': {\n      $ne: 3\n    }\n  }, {\n    a: [{\n      b: 1\n    }, {\n      b: 2\n    }]\n  });\n  nomatch({\n    a: {\n      $ne: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 1\n    }\n  });\n  match({\n    a: {\n      $ne: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 2\n    }\n  });\n  match({\n    a: {\n      $ne: {\n        x: 1\n      }\n    }\n  }, {\n    a: {\n      x: 1,\n      y: 2\n    }\n  }); // This query means: All 'a.b' must be non-5, and some 'a.b' must be >6.\n\n  match({\n    'a.b': {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [{\n      b: 2\n    }, {\n      b: 10\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [{\n      b: 2\n    }, {\n      b: 4\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [{\n      b: 2\n    }, {\n      b: 5\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [{\n      b: 10\n    }, {\n      b: 5\n    }]\n  }); // Should work the same if the branch is at the bottom.\n\n  match({\n    a: {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [2, 10]\n  });\n  nomatch({\n    a: {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [2, 4]\n  });\n  nomatch({\n    a: {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [2, 5]\n  });\n  nomatch({\n    a: {\n      $ne: 5,\n      $gt: 6\n    }\n  }, {\n    a: [10, 5]\n  }); // $in\n\n  match({\n    a: {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: 2\n  });\n  nomatch({\n    a: {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: 4\n  });\n  match({\n    a: {\n      $in: [[1], [2], [3]]\n    }\n  }, {\n    a: [2]\n  });\n  nomatch({\n    a: {\n      $in: [[1], [2], [3]]\n    }\n  }, {\n    a: [4]\n  });\n  match({\n    a: {\n      $in: [{\n        b: 1\n      }, {\n        b: 2\n      }, {\n        b: 3\n      }]\n    }\n  }, {\n    a: {\n      b: 2\n    }\n  });\n  nomatch({\n    a: {\n      $in: [{\n        b: 1\n      }, {\n        b: 2\n      }, {\n        b: 3\n      }]\n    }\n  }, {\n    a: {\n      b: 4\n    }\n  });\n  match({\n    a: {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: [2]\n  }); // tested against mongodb\n\n  match({\n    a: {\n      $in: [{\n        x: 1\n      }, {\n        x: 2\n      }, {\n        x: 3\n      }]\n    }\n  }, {\n    a: [{\n      x: 2\n    }]\n  });\n  match({\n    a: {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: [4, 2]\n  });\n  nomatch({\n    a: {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: [4]\n  });\n  match({\n    a: {\n      $in: ['x', /foo/i]\n    }\n  }, {\n    a: 'x'\n  });\n  match({\n    a: {\n      $in: ['x', /foo/i]\n    }\n  }, {\n    a: 'fOo'\n  });\n  match({\n    a: {\n      $in: ['x', /foo/i]\n    }\n  }, {\n    a: ['f', 'fOo']\n  });\n  nomatch({\n    a: {\n      $in: ['x', /foo/i]\n    }\n  }, {\n    a: ['f', 'fOx']\n  });\n  match({\n    a: {\n      $in: [1, null]\n    }\n  }, {});\n  match({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {});\n  match({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: {}\n  });\n  match({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: {\n      b: null\n    }\n  });\n  nomatch({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: {\n      b: 5\n    }\n  });\n  nomatch({\n    'a.b': {\n      $in: [1]\n    }\n  }, {\n    a: {\n      b: null\n    }\n  });\n  nomatch({\n    'a.b': {\n      $in: [1]\n    }\n  }, {\n    a: {}\n  });\n  nomatch({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }]\n  });\n  match({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, {}]\n  });\n  nomatch({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, []]\n  });\n  nomatch({\n    'a.b': {\n      $in: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, 5]\n  }); // $nin\n\n  nomatch({\n    a: {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: 2\n  });\n  match({\n    a: {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: 4\n  });\n  nomatch({\n    a: {\n      $nin: [[1], [2], [3]]\n    }\n  }, {\n    a: [2]\n  });\n  match({\n    a: {\n      $nin: [[1], [2], [3]]\n    }\n  }, {\n    a: [4]\n  });\n  nomatch({\n    a: {\n      $nin: [{\n        b: 1\n      }, {\n        b: 2\n      }, {\n        b: 3\n      }]\n    }\n  }, {\n    a: {\n      b: 2\n    }\n  });\n  match({\n    a: {\n      $nin: [{\n        b: 1\n      }, {\n        b: 2\n      }, {\n        b: 3\n      }]\n    }\n  }, {\n    a: {\n      b: 4\n    }\n  });\n  nomatch({\n    a: {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: [2]\n  }); // tested against mongodb\n\n  nomatch({\n    a: {\n      $nin: [{\n        x: 1\n      }, {\n        x: 2\n      }, {\n        x: 3\n      }]\n    }\n  }, {\n    a: [{\n      x: 2\n    }]\n  });\n  nomatch({\n    a: {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: [4, 2]\n  });\n  nomatch({\n    'a.b': {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: [{\n      b: 4\n    }, {\n      b: 2\n    }]\n  });\n  match({\n    a: {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: [4]\n  });\n  match({\n    'a.b': {\n      $nin: [1, 2, 3]\n    }\n  }, {\n    a: [{\n      b: 4\n    }]\n  });\n  nomatch({\n    a: {\n      $nin: ['x', /foo/i]\n    }\n  }, {\n    a: 'x'\n  });\n  nomatch({\n    a: {\n      $nin: ['x', /foo/i]\n    }\n  }, {\n    a: 'fOo'\n  });\n  nomatch({\n    a: {\n      $nin: ['x', /foo/i]\n    }\n  }, {\n    a: ['f', 'fOo']\n  });\n  match({\n    a: {\n      $nin: ['x', /foo/i]\n    }\n  }, {\n    a: ['f', 'fOx']\n  });\n  nomatch({\n    a: {\n      $nin: [1, null]\n    }\n  }, {});\n  nomatch({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {});\n  nomatch({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: {}\n  });\n  nomatch({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: {\n      b: null\n    }\n  });\n  match({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: {\n      b: 5\n    }\n  });\n  match({\n    'a.b': {\n      $nin: [1]\n    }\n  }, {\n    a: {\n      b: null\n    }\n  });\n  match({\n    'a.b': {\n      $nin: [1]\n    }\n  }, {\n    a: {}\n  });\n  match({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }]\n  });\n  nomatch({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, {}]\n  });\n  match({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, []]\n  });\n  match({\n    'a.b': {\n      $nin: [1, null]\n    }\n  }, {\n    a: [{\n      b: 5\n    }, 5]\n  }); // $size\n\n  match({\n    a: {\n      $size: 0\n    }\n  }, {\n    a: []\n  });\n  match({\n    a: {\n      $size: 1\n    }\n  }, {\n    a: [2]\n  });\n  match({\n    a: {\n      $size: 2\n    }\n  }, {\n    a: [2, 2]\n  });\n  nomatch({\n    a: {\n      $size: 0\n    }\n  }, {\n    a: [2]\n  });\n  nomatch({\n    a: {\n      $size: 1\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $size: 1\n    }\n  }, {\n    a: [2, 2]\n  });\n  nomatch({\n    a: {\n      $size: 0\n    }\n  }, {\n    a: '2'\n  });\n  nomatch({\n    a: {\n      $size: 1\n    }\n  }, {\n    a: '2'\n  });\n  nomatch({\n    a: {\n      $size: 2\n    }\n  }, {\n    a: '2'\n  });\n  nomatch({\n    a: {\n      $size: 2\n    }\n  }, {\n    a: [[2, 2]]\n  }); // tested against mongodb\n  // $bitsAllClear - number\n\n  match({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0\n  });\n  match({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 16\n  });\n  nomatch({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 1\n  });\n  nomatch({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 2\n  });\n  nomatch({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 4\n  });\n  nomatch({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 8\n  }); // $bitsAllClear - buffer\n\n  match({\n    a: {\n      $bitsAllClear: new Uint8Array([3])\n    }\n  }, {\n    a: new Uint8Array([4])\n  });\n  match({\n    a: {\n      $bitsAllClear: new Uint8Array([0, 1])\n    }\n  }, {\n    a: new Uint8Array([255])\n  }); // 256 should not be set for 255.\n\n  match({\n    a: {\n      $bitsAllClear: new Uint8Array([3])\n    }\n  }, {\n    a: 4\n  });\n  match({\n    a: {\n      $bitsAllClear: new Uint8Array([3])\n    }\n  }, {\n    a: 0\n  }); // $bitsAllSet - number\n\n  match({\n    a: {\n      $bitsAllSet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 15\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 7\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 256\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 50000\n  });\n  match({\n    a: {\n      $bitsAllSet: [0, 1, 2]\n    }\n  }, {\n    a: 15\n  });\n  match({\n    a: {\n      $bitsAllSet: [0, 12]\n    }\n  }, {\n    a: 4097\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: [0, 12]\n    }\n  }, {\n    a: 4096\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: [0, 12]\n    }\n  }, {\n    a: 1\n  }); // $bitsAllSet - buffer\n\n  match({\n    a: {\n      $bitsAllSet: new Uint8Array([3])\n    }\n  }, {\n    a: new Uint8Array([3])\n  });\n  match({\n    a: {\n      $bitsAllSet: new Uint8Array([7])\n    }\n  }, {\n    a: new Uint8Array([15])\n  });\n  match({\n    a: {\n      $bitsAllSet: new Uint8Array([3])\n    }\n  }, {\n    a: 3\n  }); // $bitsAnySet - number\n\n  match({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 1\n  });\n  match({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 2\n  });\n  match({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 4\n  });\n  match({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 8\n  });\n  match({\n    a: {\n      $bitsAnySet: [4]\n    }\n  }, {\n    a: 16\n  });\n  nomatch({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 16\n  });\n  nomatch({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0\n  }); // $bitsAnySet - buffer\n\n  match({\n    a: {\n      $bitsAnySet: new Uint8Array([3])\n    }\n  }, {\n    a: new Uint8Array([7])\n  });\n  match({\n    a: {\n      $bitsAnySet: new Uint8Array([15])\n    }\n  }, {\n    a: new Uint8Array([7])\n  });\n  match({\n    a: {\n      $bitsAnySet: new Uint8Array([3])\n    }\n  }, {\n    a: 1\n  }); // $bitsAnyClear - number\n\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 0\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 1\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 2\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 4\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 8\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 16\n  });\n  nomatch({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 15\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 7\n  });\n  nomatch({\n    a: {\n      $bitsAnyClear: [0, 1, 2]\n    }\n  }, {\n    a: 7\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 3\n  });\n  nomatch({\n    a: {\n      $bitsAnyClear: [0, 1]\n    }\n  }, {\n    a: 3\n  });\n  match({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3]\n    }\n  }, {\n    a: 1\n  });\n  nomatch({\n    a: {\n      $bitsAnyClear: [0]\n    }\n  }, {\n    a: 1\n  });\n  nomatch({\n    a: {\n      $bitsAnyClear: [4]\n    }\n  }, {\n    a: 16\n  }); // $bitsAnyClear - buffer\n\n  match({\n    a: {\n      $bitsAnyClear: new Uint8Array([8])\n    }\n  }, {\n    a: new Uint8Array([7])\n  });\n  match({\n    a: {\n      $bitsAnyClear: new Uint8Array([1])\n    }\n  }, {\n    a: new Uint8Array([0])\n  });\n  match({\n    a: {\n      $bitsAnyClear: new Uint8Array([1])\n    }\n  }, {\n    a: 4\n  }); // taken from: https://github.com/mongodb/mongo/blob/master/jstests/core/bittest.js\n\n  var c = new LocalCollection();\n\n  function matchCount(query, count) {\n    var matches = c.find(query).count();\n\n    if (matches !== count) {\n      test.fail({\n        message: \"minimongo match count failure: matched \" + matches + \" times, but should match \" + count + \" times\",\n        query: JSON.stringify(query),\n        count: JSON.stringify(count)\n      });\n    }\n  } // Tests on numbers.\n\n\n  c.insert({\n    a: 0\n  });\n  c.insert({\n    a: 1\n  });\n  c.insert({\n    a: 54\n  });\n  c.insert({\n    a: 88\n  });\n  c.insert({\n    a: 255\n  }); // Tests with bitmask.\n\n  matchCount({\n    a: {\n      $bitsAllSet: 0\n    }\n  }, 5);\n  matchCount({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: 16\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllSet: 54\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: 55\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllSet: 88\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: 255\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllClear: 0\n    }\n  }, 5);\n  matchCount({\n    a: {\n      $bitsAllClear: 1\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: 16\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: 129\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: 255\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: 0\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnySet: 9\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnySet: 255\n    }\n  }, 4);\n  matchCount({\n    a: {\n      $bitsAnyClear: 0\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnyClear: 18\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnyClear: 24\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnyClear: 255\n    }\n  }, 4); // Tests with array of bit positions.\n\n  matchCount({\n    a: {\n      $bitsAllSet: []\n    }\n  }, 5);\n  matchCount({\n    a: {\n      $bitsAllSet: [0]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: [4]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllSet: [1, 2, 4, 5]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: [0, 1, 2, 4, 5]\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllSet: [3, 4, 6]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: [0, 1, 2, 3, 4, 5, 6, 7]\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllClear: []\n    }\n  }, 5);\n  matchCount({\n    a: {\n      $bitsAllClear: [0]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: [4]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: [1, 7]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: [0, 1, 2, 3, 4, 5, 6, 7]\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: []\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnySet: [1, 3]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnySet: [0, 1, 2, 3, 4, 5, 6, 7]\n    }\n  }, 4);\n  matchCount({\n    a: {\n      $bitsAnyClear: []\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnyClear: [1, 4]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnyClear: [3, 4]\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnyClear: [0, 1, 2, 3, 4, 5, 6, 7]\n    }\n  }, 4); // Tests with multiple predicates.\n\n  matchCount({\n    a: {\n      $bitsAllSet: 54,\n      $bitsAllClear: 201\n    }\n  }, 1); // Tests on negative numbers\n\n  c.remove({});\n  c.insert({\n    a: -0\n  });\n  c.insert({\n    a: -1\n  });\n  c.insert({\n    a: -54\n  }); // Tests with bitmask.\n\n  matchCount({\n    a: {\n      $bitsAllSet: 0\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllSet: 2\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: 127\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllSet: 74\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: 0\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: 53\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: 127\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: 0\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnySet: 2\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnySet: 127\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnyClear: 0\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnyClear: 53\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnyClear: 127\n    }\n  }, 2); // Tests with array of bit positions.\n\n  var allPositions = [];\n\n  for (var i = 0; i < 64; i++) {\n    allPositions.push(i);\n  }\n\n  matchCount({\n    a: {\n      $bitsAllSet: []\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllSet: [1]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: allPositions\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllSet: [1, 7, 6, 3, 100]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: []\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: [5, 4, 2, 0]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: allPositions\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: []\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnySet: [1]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnySet: allPositions\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnyClear: []\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnyClear: [0, 2, 4, 5, 100]\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnyClear: allPositions\n    }\n  }, 2); // Tests with multiple predicates.\n\n  matchCount({\n    a: {\n      $bitsAllSet: 74,\n      $bitsAllClear: 53\n    }\n  }, 1); // Tests on BinData.\n\n  c.remove({});\n  c.insert({\n    a: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n  });\n  c.insert({\n    a: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n  });\n  c.insert({\n    a: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')\n  });\n  c.insert({\n    a: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')\n  }); // Tests with binary string bitmask.\n\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 4);\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 4);\n  matchCount({\n    a: {\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"AAyfAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"JAyfqwetkqwklEWRbWERKKJREtbq\"}')\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnySet: EJSON.parse('{\"$binary\": \"AAyfAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnySet: EJSON.parse('{\"$binary\": \"JAyfqwetkqwklEWRbWERKKJREtbq\"}')\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnySet: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')\n    }\n  }, 3);\n  matchCount({\n    a: {\n      $bitsAnyClear: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 0);\n  matchCount({\n    a: {\n      $bitsAnyClear: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')\n    }\n  }, 1);\n  matchCount({\n    a: {\n      $bitsAnyClear: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')\n    }\n  }, 2);\n  matchCount({\n    a: {\n      $bitsAnyClear: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')\n    }\n  }, 3); // Tests with multiple predicates.\n\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}'),\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"//yf////////////////////////\"}')\n    }\n  }, 1);\n  c.remove({});\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: false\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: NaN\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: Infinity\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: null\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: 'asdf'\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: ['a', 'b']\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: {\n      foo: 'bar'\n    }\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: 1.2\n  });\n  nomatch({\n    a: {\n      $bitsAllSet: 1\n    }\n  }, {\n    a: '1'\n  });\n  [false, NaN, Infinity, null, 'asdf', ['a', 'b'], {\n    foo: 'bar'\n  }, 1.2, '1', [0, -1]].forEach(function (badValue) {\n    test.throws(function () {\n      match({\n        a: {\n          $bitsAllSet: badValue\n        }\n      }, {\n        a: 42\n      });\n    });\n  }); // $type\n\n  match({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: 1.1\n  });\n  match({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: 1\n  });\n  nomatch({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: '1'\n  });\n  match({\n    a: {\n      $type: 2\n    }\n  }, {\n    a: '1'\n  });\n  nomatch({\n    a: {\n      $type: 2\n    }\n  }, {\n    a: 1\n  });\n  match({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: {}\n  });\n  match({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: {\n      b: 2\n    }\n  });\n  nomatch({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: [1]\n  });\n  nomatch({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: null\n  });\n  match({\n    a: {\n      $type: 5\n    }\n  }, {\n    a: EJSON.newBinary(0)\n  });\n  match({\n    a: {\n      $type: 5\n    }\n  }, {\n    a: EJSON.newBinary(4)\n  });\n  nomatch({\n    a: {\n      $type: 5\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $type: 5\n    }\n  }, {\n    a: [42]\n  });\n  match({\n    a: {\n      $type: 7\n    }\n  }, {\n    a: new MongoID.ObjectID()\n  });\n  nomatch({\n    a: {\n      $type: 7\n    }\n  }, {\n    a: '1234567890abcd1234567890'\n  });\n  match({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: true\n  });\n  match({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: false\n  });\n  nomatch({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: 'true'\n  });\n  nomatch({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: 0\n  });\n  nomatch({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: null\n  });\n  nomatch({\n    a: {\n      $type: 8\n    }\n  }, {\n    a: ''\n  });\n  nomatch({\n    a: {\n      $type: 8\n    }\n  }, {});\n  match({\n    a: {\n      $type: 9\n    }\n  }, {\n    a: new Date()\n  });\n  nomatch({\n    a: {\n      $type: 9\n    }\n  }, {\n    a: +new Date()\n  });\n  match({\n    a: {\n      $type: 10\n    }\n  }, {\n    a: null\n  });\n  nomatch({\n    a: {\n      $type: 10\n    }\n  }, {\n    a: false\n  });\n  nomatch({\n    a: {\n      $type: 10\n    }\n  }, {\n    a: ''\n  });\n  nomatch({\n    a: {\n      $type: 10\n    }\n  }, {\n    a: 0\n  });\n  nomatch({\n    a: {\n      $type: 10\n    }\n  }, {});\n  match({\n    a: {\n      $type: 11\n    }\n  }, {\n    a: /x/\n  });\n  nomatch({\n    a: {\n      $type: 11\n    }\n  }, {\n    a: 'x'\n  });\n  nomatch({\n    a: {\n      $type: 11\n    }\n  }, {}); // The normal rule for {$type:4} (4 means array) is that it NOT good enough to\n  // just have an array that's the leaf that matches the path.  (An array inside\n  // that array is good, though.)\n\n  nomatch({\n    a: {\n      $type: 4\n    }\n  }, {\n    a: []\n  });\n  nomatch({\n    a: {\n      $type: 4\n    }\n  }, {\n    a: [1]\n  }); // tested against mongodb\n\n  match({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: [1]\n  });\n  nomatch({\n    a: {\n      $type: 2\n    }\n  }, {\n    a: [1]\n  });\n  match({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: ['1', 1]\n  });\n  match({\n    a: {\n      $type: 2\n    }\n  }, {\n    a: ['1', 1]\n  });\n  nomatch({\n    a: {\n      $type: 3\n    }\n  }, {\n    a: ['1', 1]\n  });\n  nomatch({\n    a: {\n      $type: 4\n    }\n  }, {\n    a: ['1', 1]\n  });\n  nomatch({\n    a: {\n      $type: 1\n    }\n  }, {\n    a: ['1', []]\n  });\n  match({\n    a: {\n      $type: 2\n    }\n  }, {\n    a: ['1', []]\n  });\n  match({\n    a: {\n      $type: 4\n    }\n  }, {\n    a: ['1', []]\n  }); // tested against mongodb\n  // An exception to the normal rule is that an array found via numeric index is\n  // examined itself, and its elements are not.\n\n  match({\n    'a.0': {\n      $type: 4\n    }\n  }, {\n    a: [[0]]\n  });\n  nomatch({\n    'a.0': {\n      $type: 1\n    }\n  }, {\n    a: [[0]]\n  }); // regular expressions\n\n  match({\n    a: /a/\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    a: /a/\n  }, {\n    a: 'cut'\n  });\n  nomatch({\n    a: /a/\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: /a/i\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: /a/\n  }, {\n    a: ['foo', 'bar']\n  }); // search within array...\n\n  nomatch({\n    a: /,/\n  }, {\n    a: ['foo', 'bar']\n  }); // but not by stringifying\n\n  match({\n    a: {\n      $regex: 'a'\n    }\n  }, {\n    a: ['foo', 'bar']\n  });\n  nomatch({\n    a: {\n      $regex: ','\n    }\n  }, {\n    a: ['foo', 'bar']\n  });\n  match({\n    a: {\n      $regex: /a/\n    }\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    a: {\n      $regex: /a/\n    }\n  }, {\n    a: 'cut'\n  });\n  nomatch({\n    a: {\n      $regex: /a/\n    }\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: {\n      $regex: /a/i\n    }\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: {\n      $regex: /a/,\n      $options: 'i'\n    }\n  }, {\n    a: 'CAT'\n  }); // tested\n\n  match({\n    a: {\n      $regex: /a/i,\n      $options: 'i'\n    }\n  }, {\n    a: 'CAT'\n  }); // tested\n\n  nomatch({\n    a: {\n      $regex: /a/i,\n      $options: ''\n    }\n  }, {\n    a: 'CAT'\n  }); // tested\n\n  match({\n    a: {\n      $regex: 'a'\n    }\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    a: {\n      $regex: 'a'\n    }\n  }, {\n    a: 'cut'\n  });\n  nomatch({\n    a: {\n      $regex: 'a'\n    }\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: {\n      $regex: 'a',\n      $options: 'i'\n    }\n  }, {\n    a: 'CAT'\n  });\n  match({\n    a: {\n      $regex: '',\n      $options: 'i'\n    }\n  }, {\n    a: 'foo'\n  });\n  nomatch({\n    a: {\n      $regex: '',\n      $options: 'i'\n    }\n  }, {});\n  nomatch({\n    a: {\n      $regex: '',\n      $options: 'i'\n    }\n  }, {\n    a: 5\n  });\n  nomatch({\n    a: /undefined/\n  }, {});\n  nomatch({\n    a: {\n      $regex: 'undefined'\n    }\n  }, {});\n  nomatch({\n    a: /xxx/\n  }, {});\n  nomatch({\n    a: {\n      $regex: 'xxx'\n    }\n  }, {}); // GitHub issue #2817:\n  // Regexps with a global flag ('g') keep a state when tested against the same\n  // string. Selector shouldn't return different result for similar documents\n  // because of this state.\n\n  var reusedRegexp = /sh/ig;\n  match({\n    a: reusedRegexp\n  }, {\n    a: 'Shorts'\n  });\n  match({\n    a: reusedRegexp\n  }, {\n    a: 'Shorts'\n  });\n  match({\n    a: reusedRegexp\n  }, {\n    a: 'Shorts'\n  });\n  match({\n    a: {\n      $regex: reusedRegexp\n    }\n  }, {\n    a: 'Shorts'\n  });\n  match({\n    a: {\n      $regex: reusedRegexp\n    }\n  }, {\n    a: 'Shorts'\n  });\n  match({\n    a: {\n      $regex: reusedRegexp\n    }\n  }, {\n    a: 'Shorts'\n  });\n  test.throws(function () {\n    match({\n      a: {\n        $options: 'i'\n      }\n    }, {\n      a: 12\n    });\n  });\n  match({\n    a: /a/\n  }, {\n    a: ['dog', 'cat']\n  });\n  nomatch({\n    a: /a/\n  }, {\n    a: ['dog', 'puppy']\n  }); // we don't support regexps in minimongo very well (eg, there's no EJSON\n  // encoding so it won't go over the wire), but run these tests anyway\n\n  match({\n    a: /a/\n  }, {\n    a: /a/\n  });\n  match({\n    a: /a/\n  }, {\n    a: ['x', /a/]\n  });\n  nomatch({\n    a: /a/\n  }, {\n    a: /a/i\n  });\n  nomatch({\n    a: /a/m\n  }, {\n    a: /a/\n  });\n  nomatch({\n    a: /a/\n  }, {\n    a: /b/\n  });\n  nomatch({\n    a: /5/\n  }, {\n    a: 5\n  });\n  nomatch({\n    a: /t/\n  }, {\n    a: true\n  });\n  match({\n    a: /m/i\n  }, {\n    a: ['x', 'xM']\n  });\n  test.throws(function () {\n    match({\n      a: {\n        $regex: /a/,\n        $options: 'x'\n      }\n    }, {\n      a: 'cat'\n    });\n  });\n  test.throws(function () {\n    match({\n      a: {\n        $regex: /a/,\n        $options: 's'\n      }\n    }, {\n      a: 'cat'\n    });\n  }); // $not\n\n  match({\n    x: {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: 6\n  });\n  nomatch({\n    x: {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: 8\n  });\n  match({\n    x: {\n      $not: {\n        $lt: 10,\n        $gt: 7\n      }\n    }\n  }, {\n    x: 11\n  });\n  nomatch({\n    x: {\n      $not: {\n        $lt: 10,\n        $gt: 7\n      }\n    }\n  }, {\n    x: 9\n  });\n  match({\n    x: {\n      $not: {\n        $lt: 10,\n        $gt: 7\n      }\n    }\n  }, {\n    x: 6\n  });\n  match({\n    x: {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: [2, 3, 4]\n  });\n  match({\n    'x.y': {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: [{\n      y: 2\n    }, {\n      y: 3\n    }, {\n      y: 4\n    }]\n  });\n  nomatch({\n    x: {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: [2, 3, 4, 10]\n  });\n  nomatch({\n    'x.y': {\n      $not: {\n        $gt: 7\n      }\n    }\n  }, {\n    x: [{\n      y: 2\n    }, {\n      y: 3\n    }, {\n      y: 4\n    }, {\n      y: 10\n    }]\n  });\n  match({\n    x: {\n      $not: /a/\n    }\n  }, {\n    x: 'dog'\n  });\n  nomatch({\n    x: {\n      $not: /a/\n    }\n  }, {\n    x: 'cat'\n  });\n  match({\n    x: {\n      $not: /a/\n    }\n  }, {\n    x: ['dog', 'puppy']\n  });\n  nomatch({\n    x: {\n      $not: /a/\n    }\n  }, {\n    x: ['kitten', 'cat']\n  }); // dotted keypaths: bare values\n\n  match({\n    'a.b': 1\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    'a.b': 1\n  }, {\n    a: {\n      b: 2\n    }\n  });\n  match({\n    'a.b': [1, 2, 3]\n  }, {\n    a: {\n      b: [1, 2, 3]\n    }\n  });\n  nomatch({\n    'a.b': [1, 2, 3]\n  }, {\n    a: {\n      b: [4]\n    }\n  });\n  match({\n    'a.b': /a/\n  }, {\n    a: {\n      b: 'cat'\n    }\n  });\n  nomatch({\n    'a.b': /a/\n  }, {\n    a: {\n      b: 'dog'\n    }\n  });\n  match({\n    'a.b.c': null\n  }, {});\n  match({\n    'a.b.c': null\n  }, {\n    a: 1\n  });\n  match({\n    'a.b': null\n  }, {\n    a: 1\n  });\n  match({\n    'a.b.c': null\n  }, {\n    a: {\n      b: 4\n    }\n  }); // dotted keypaths, nulls, numeric indices, arrays\n\n  nomatch({\n    'a.b': null\n  }, {\n    a: [1]\n  });\n  match({\n    'a.b': []\n  }, {\n    a: {\n      b: []\n    }\n  });\n  var big = {\n    a: [{\n      b: 1\n    }, 2, {}, {\n      b: [3, 4]\n    }]\n  };\n  match({\n    'a.b': 1\n  }, big);\n  match({\n    'a.b': [3, 4]\n  }, big);\n  match({\n    'a.b': 3\n  }, big);\n  match({\n    'a.b': 4\n  }, big);\n  match({\n    'a.b': null\n  }, big); // matches on slot 2\n\n  match({\n    'a.1': 8\n  }, {\n    a: [7, 8, 9]\n  });\n  nomatch({\n    'a.1': 7\n  }, {\n    a: [7, 8, 9]\n  });\n  nomatch({\n    'a.1': null\n  }, {\n    a: [7, 8, 9]\n  });\n  match({\n    'a.1': [8, 9]\n  }, {\n    a: [7, [8, 9]]\n  });\n  nomatch({\n    'a.1': 6\n  }, {\n    a: [[6, 7], [8, 9]]\n  });\n  nomatch({\n    'a.1': 7\n  }, {\n    a: [[6, 7], [8, 9]]\n  });\n  nomatch({\n    'a.1': 8\n  }, {\n    a: [[6, 7], [8, 9]]\n  });\n  nomatch({\n    'a.1': 9\n  }, {\n    a: [[6, 7], [8, 9]]\n  });\n  match({\n    'a.1': 2\n  }, {\n    a: [0, {\n      1: 2\n    }, 3]\n  });\n  match({\n    'a.1': {\n      1: 2\n    }\n  }, {\n    a: [0, {\n      1: 2\n    }, 3]\n  });\n  match({\n    'x.1.y': 8\n  }, {\n    x: [7, {\n      y: 8\n    }, 9]\n  }); // comes from trying '1' as key in the plain object\n\n  match({\n    'x.1.y': null\n  }, {\n    x: [7, {\n      y: 8\n    }, 9]\n  });\n  match({\n    'a.1.b': 9\n  }, {\n    a: [7, {\n      b: 9\n    }, {\n      1: {\n        b: 'foo'\n      }\n    }]\n  });\n  match({\n    'a.1.b': 'foo'\n  }, {\n    a: [7, {\n      b: 9\n    }, {\n      1: {\n        b: 'foo'\n      }\n    }]\n  });\n  match({\n    'a.1.b': null\n  }, {\n    a: [7, {\n      b: 9\n    }, {\n      1: {\n        b: 'foo'\n      }\n    }]\n  });\n  match({\n    'a.1.b': 2\n  }, {\n    a: [1, [{\n      b: 2\n    }], 3]\n  });\n  nomatch({\n    'a.1.b': null\n  }, {\n    a: [1, [{\n      b: 2\n    }], 3]\n  }); // this is new behavior in mongo 2.5\n\n  nomatch({\n    'a.0.b': null\n  }, {\n    a: [5]\n  });\n  match({\n    'a.1': 4\n  }, {\n    a: [{\n      1: 4\n    }, 5]\n  });\n  match({\n    'a.1': 5\n  }, {\n    a: [{\n      1: 4\n    }, 5]\n  });\n  nomatch({\n    'a.1': null\n  }, {\n    a: [{\n      1: 4\n    }, 5]\n  });\n  match({\n    'a.1.foo': 4\n  }, {\n    a: [{\n      1: {\n        foo: 4\n      }\n    }, {\n      foo: 5\n    }]\n  });\n  match({\n    'a.1.foo': 5\n  }, {\n    a: [{\n      1: {\n        foo: 4\n      }\n    }, {\n      foo: 5\n    }]\n  });\n  match({\n    'a.1.foo': null\n  }, {\n    a: [{\n      1: {\n        foo: 4\n      }\n    }, {\n      foo: 5\n    }]\n  }); // trying to access a dotted field that is undefined at some point\n  // down the chain\n\n  nomatch({\n    'a.b': 1\n  }, {\n    x: 2\n  });\n  nomatch({\n    'a.b.c': 1\n  }, {\n    a: {\n      x: 2\n    }\n  });\n  nomatch({\n    'a.b.c': 1\n  }, {\n    a: {\n      b: {\n        x: 2\n      }\n    }\n  });\n  nomatch({\n    'a.b.c': 1\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    'a.b.c': 1\n  }, {\n    a: {\n      b: 0\n    }\n  }); // dotted keypaths: literal objects\n\n  match({\n    'a.b': {\n      c: 1\n    }\n  }, {\n    a: {\n      b: {\n        c: 1\n      }\n    }\n  });\n  nomatch({\n    'a.b': {\n      c: 1\n    }\n  }, {\n    a: {\n      b: {\n        c: 2\n      }\n    }\n  });\n  nomatch({\n    'a.b': {\n      c: 1\n    }\n  }, {\n    a: {\n      b: 2\n    }\n  });\n  match({\n    'a.b': {\n      c: 1,\n      d: 2\n    }\n  }, {\n    a: {\n      b: {\n        c: 1,\n        d: 2\n      }\n    }\n  });\n  nomatch({\n    'a.b': {\n      c: 1,\n      d: 2\n    }\n  }, {\n    a: {\n      b: {\n        c: 1,\n        d: 1\n      }\n    }\n  });\n  nomatch({\n    'a.b': {\n      c: 1,\n      d: 2\n    }\n  }, {\n    a: {\n      b: {\n        d: 2\n      }\n    }\n  }); // dotted keypaths: $ operators\n\n  match({\n    'a.b': {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: {\n      b: [2]\n    }\n  }); // tested against mongodb\n\n  match({\n    'a.b': {\n      $in: [{\n        x: 1\n      }, {\n        x: 2\n      }, {\n        x: 3\n      }]\n    }\n  }, {\n    a: {\n      b: [{\n        x: 2\n      }]\n    }\n  });\n  match({\n    'a.b': {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: {\n      b: [4, 2]\n    }\n  });\n  nomatch({\n    'a.b': {\n      $in: [1, 2, 3]\n    }\n  }, {\n    a: {\n      b: [4]\n    }\n  }); // $or\n\n  test.throws(function () {\n    match({\n      $or: []\n    }, {});\n  });\n  test.throws(function () {\n    match({\n      $or: [5]\n    }, {});\n  });\n  test.throws(function () {\n    match({\n      $or: []\n    }, {\n      a: 1\n    });\n  });\n  match({\n    $or: [{\n      a: 1\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      c: 3\n    }, {\n      d: 4\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: [1, 2, 3]\n  });\n  nomatch({\n    $or: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    c: [1, 2, 3]\n  });\n  nomatch({\n    $or: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: [2, 3, 4]\n  });\n  match({\n    $or: [{\n      a: 1\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: 1\n    }, {\n      a: 2\n    }],\n    b: 2\n  }, {\n    a: 1,\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      a: 2\n    }, {\n      a: 3\n    }],\n    b: 2\n  }, {\n    a: 1,\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      a: 1\n    }, {\n      a: 2\n    }],\n    b: 3\n  }, {\n    a: 1,\n    b: 2\n  }); // Combining $or with equality\n\n  match({\n    x: 1,\n    $or: [{\n      a: 1\n    }, {\n      b: 1\n    }]\n  }, {\n    x: 1,\n    b: 1\n  });\n  match({\n    $or: [{\n      a: 1\n    }, {\n      b: 1\n    }],\n    x: 1\n  }, {\n    x: 1,\n    b: 1\n  });\n  nomatch({\n    x: 1,\n    $or: [{\n      a: 1\n    }, {\n      b: 1\n    }]\n  }, {\n    b: 1\n  });\n  nomatch({\n    x: 1,\n    $or: [{\n      a: 1\n    }, {\n      b: 1\n    }]\n  }, {\n    x: 1\n  }); // $or and $lt, $lte, $gt, $gte\n\n  match({\n    $or: [{\n      a: {\n        $lte: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $lt: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $gte: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $gt: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      b: {\n        $gt: 1\n      }\n    }, {\n      b: {\n        $lt: 3\n      }\n    }]\n  }, {\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      b: {\n        $lt: 1\n      }\n    }, {\n      b: {\n        $gt: 3\n      }\n    }]\n  }, {\n    b: 2\n  }); // $or and $in\n\n  match({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    c: 3\n  });\n  match({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    b: 2\n  }); // $or and $nin\n\n  nomatch({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    b: 2\n  });\n  match({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    c: 3\n  });\n  match({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    b: 2\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 2\n  });\n  match({\n    $or: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    b: 2\n  }); // $or and dot-notation\n\n  match({\n    $or: [{\n      'a.b': 1\n    }, {\n      'a.b': 2\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  match({\n    $or: [{\n      'a.b': 1\n    }, {\n      'a.c': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $or: [{\n      'a.b': 2\n    }, {\n      'a.c': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  }); // $or and nested objects\n\n  match({\n    $or: [{\n      a: {\n        b: 1,\n        c: 2\n      }\n    }, {\n      a: {\n        b: 2,\n        c: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1,\n      c: 2\n    }\n  });\n  nomatch({\n    $or: [{\n      a: {\n        b: 1,\n        c: 3\n      }\n    }, {\n      a: {\n        b: 2,\n        c: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1,\n      c: 2\n    }\n  }); // $or and regexes\n\n  match({\n    $or: [{\n      a: /a/\n    }]\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    $or: [{\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $or: [{\n      a: /a/\n    }, {\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    $or: [{\n      a: /i/\n    }, {\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $or: [{\n      a: /i/\n    }, {\n      b: /o/\n    }]\n  }, {\n    a: 'cat',\n    b: 'dog'\n  }); // $or and $ne\n\n  match({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {});\n  nomatch({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 2\n  });\n  match({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    b: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      a: {\n        $ne: 2\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      b: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      b: {\n        $ne: 2\n      }\n    }]\n  }, {\n    a: 1,\n    b: 2\n  }); // $or and $not\n\n  match({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {});\n  nomatch({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {\n    a: 2\n  });\n  match({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $not: {\n          $mod: [10, 2]\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 2\n  });\n  match({\n    $or: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 3\n  }); // this is possibly an open-ended task, so we stop here ...\n  // $nor\n\n  test.throws(function () {\n    match({\n      $nor: []\n    }, {});\n  });\n  test.throws(function () {\n    match({\n      $nor: [5]\n    }, {});\n  });\n  test.throws(function () {\n    match({\n      $nor: []\n    }, {\n      a: 1\n    });\n  });\n  nomatch({\n    $nor: [{\n      a: 1\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      c: 3\n    }, {\n      d: 4\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: [1, 2, 3]\n  });\n  match({\n    $nor: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    c: [1, 2, 3]\n  });\n  match({\n    $nor: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: [2, 3, 4]\n  });\n  nomatch({\n    $nor: [{\n      a: 1\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  }); // $nor and $lt, $lte, $gt, $gte\n\n  nomatch({\n    $nor: [{\n      a: {\n        $lte: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $lt: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $gte: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $gt: 1\n      }\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      b: {\n        $gt: 1\n      }\n    }, {\n      b: {\n        $lt: 3\n      }\n    }]\n  }, {\n    b: 2\n  });\n  match({\n    $nor: [{\n      b: {\n        $lt: 1\n      }\n    }, {\n      b: {\n        $gt: 3\n      }\n    }]\n  }, {\n    b: 2\n  }); // $nor and $in\n\n  nomatch({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    b: 2\n  });\n  match({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    c: 3\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    b: 2\n  });\n  match({\n    $nor: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    b: 2\n  }); // $nor and $nin\n\n  match({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    b: 2\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: 2\n    }]\n  }, {\n    c: 3\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    b: 2\n  });\n  match({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 2\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    b: 2\n  }); // $nor and dot-notation\n\n  nomatch({\n    $nor: [{\n      'a.b': 1\n    }, {\n      'a.b': 2\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $nor: [{\n      'a.b': 1\n    }, {\n      'a.c': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  match({\n    $nor: [{\n      'a.b': 2\n    }, {\n      'a.c': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  }); // $nor and nested objects\n\n  nomatch({\n    $nor: [{\n      a: {\n        b: 1,\n        c: 2\n      }\n    }, {\n      a: {\n        b: 2,\n        c: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1,\n      c: 2\n    }\n  });\n  match({\n    $nor: [{\n      a: {\n        b: 1,\n        c: 3\n      }\n    }, {\n      a: {\n        b: 2,\n        c: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1,\n      c: 2\n    }\n  }); // $nor and regexes\n\n  nomatch({\n    $nor: [{\n      a: /a/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $nor: [{\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    $nor: [{\n      a: /a/\n    }, {\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $nor: [{\n      a: /i/\n    }, {\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    $nor: [{\n      a: /i/\n    }, {\n      b: /o/\n    }]\n  }, {\n    a: 'cat',\n    b: 'dog'\n  }); // $nor and $ne\n\n  nomatch({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {});\n  match({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 2\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    b: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      a: {\n        $ne: 2\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      b: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      b: {\n        $ne: 2\n      }\n    }]\n  }, {\n    a: 1,\n    b: 2\n  }); // $nor and $not\n\n  nomatch({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {});\n  match({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }]\n  }, {\n    a: 2\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $not: {\n          $mod: [10, 2]\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 2\n  });\n  nomatch({\n    $nor: [{\n      a: {\n        $not: {\n          $mod: [10, 1]\n        }\n      }\n    }, {\n      a: {\n        $mod: [10, 2]\n      }\n    }]\n  }, {\n    a: 3\n  }); // $and\n\n  test.throws(function () {\n    match({\n      $and: []\n    }, {});\n  });\n  test.throws(function () {\n    match({\n      $and: [5]\n    }, {});\n  });\n  test.throws(function () {\n    match({\n      $and: []\n    }, {\n      a: 1\n    });\n  });\n  match({\n    $and: [{\n      a: 1\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: 1\n    }, {\n      a: 2\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: 1\n    }, {\n      b: 1\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: 1\n    }, {\n      b: 2\n    }]\n  }, {\n    a: 1,\n    b: 2\n  });\n  nomatch({\n    $and: [{\n      a: 1\n    }, {\n      b: 1\n    }]\n  }, {\n    a: 1,\n    b: 2\n  });\n  match({\n    $and: [{\n      a: 1\n    }, {\n      b: 2\n    }],\n    c: 3\n  }, {\n    a: 1,\n    b: 2,\n    c: 3\n  });\n  nomatch({\n    $and: [{\n      a: 1\n    }, {\n      b: 2\n    }],\n    c: 4\n  }, {\n    a: 1,\n    b: 2,\n    c: 3\n  }); // $and and regexes\n\n  match({\n    $and: [{\n      a: /a/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $and: [{\n      a: /a/i\n    }]\n  }, {\n    a: 'CAT'\n  });\n  nomatch({\n    $and: [{\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  nomatch({\n    $and: [{\n      a: /a/\n    }, {\n      a: /o/\n    }]\n  }, {\n    a: 'cat'\n  });\n  match({\n    $and: [{\n      a: /a/\n    }, {\n      b: /o/\n    }]\n  }, {\n    a: 'cat',\n    b: 'dog'\n  });\n  nomatch({\n    $and: [{\n      a: /a/\n    }, {\n      b: /a/\n    }]\n  }, {\n    a: 'cat',\n    b: 'dog'\n  }); // $and, dot-notation, and nested objects\n\n  match({\n    $and: [{\n      'a.b': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  match({\n    $and: [{\n      a: {\n        b: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 2\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.c': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 1\n    }, {\n      'a.b': 2\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 1\n    }, {\n      a: {\n        b: 2\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  match({\n    $and: [{\n      'a.b': 1\n    }, {\n      'c.d': 2\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 1\n    }, {\n      'c.d': 1\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  match({\n    $and: [{\n      'a.b': 1\n    }, {\n      c: {\n        d: 2\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 1\n    }, {\n      c: {\n        d: 1\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  nomatch({\n    $and: [{\n      'a.b': 2\n    }, {\n      c: {\n        d: 2\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  match({\n    $and: [{\n      a: {\n        b: 1\n      }\n    }, {\n      c: {\n        d: 2\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  });\n  nomatch({\n    $and: [{\n      a: {\n        b: 2\n      }\n    }, {\n      c: {\n        d: 2\n      }\n    }]\n  }, {\n    a: {\n      b: 1\n    },\n    c: {\n      d: 2\n    }\n  }); // $and and $in\n\n  nomatch({\n    $and: [{\n      a: {\n        $in: []\n      }\n    }]\n  }, {});\n  match({\n    $and: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      a: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 4\n  });\n  match({\n    $and: [{\n      a: {\n        $in: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $in: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 4\n  }); // $and and $nin\n\n  match({\n    $and: [{\n      a: {\n        $nin: []\n      }\n    }]\n  }, {});\n  nomatch({\n    $and: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      a: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [1, 2, 3]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 4\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $nin: [1, 2, 3]\n      }\n    }, {\n      b: {\n        $nin: [4, 5, 6]\n      }\n    }]\n  }, {\n    a: 1,\n    b: 4\n  }); // $and and $lt, $lte, $gt, $gte\n\n  match({\n    $and: [{\n      a: {\n        $lt: 2\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $lt: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $lte: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $gt: 0\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $gt: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $gte: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $gt: 0\n      }\n    }, {\n      a: {\n        $lt: 2\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $gt: 1\n      }\n    }, {\n      a: {\n        $lt: 2\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $gt: 0\n      }\n    }, {\n      a: {\n        $lt: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $gte: 1\n      }\n    }, {\n      a: {\n        $lte: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $gte: 2\n      }\n    }, {\n      a: {\n        $lte: 0\n      }\n    }]\n  }, {\n    a: 1\n  }); // $and and $ne\n\n  match({\n    $and: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {});\n  nomatch({\n    $and: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $ne: 1\n      }\n    }]\n  }, {\n    a: 2\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      a: {\n        $ne: 2\n      }\n    }]\n  }, {\n    a: 2\n  });\n  match({\n    $and: [{\n      a: {\n        $ne: 1\n      }\n    }, {\n      a: {\n        $ne: 3\n      }\n    }]\n  }, {\n    a: 2\n  }); // $and and $not\n\n  match({\n    $and: [{\n      a: {\n        $not: {\n          $gt: 2\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $not: {\n          $lt: 2\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  match({\n    $and: [{\n      a: {\n        $not: {\n          $lt: 0\n        }\n      }\n    }, {\n      a: {\n        $not: {\n          $gt: 2\n        }\n      }\n    }]\n  }, {\n    a: 1\n  });\n  nomatch({\n    $and: [{\n      a: {\n        $not: {\n          $lt: 2\n        }\n      }\n    }, {\n      a: {\n        $not: {\n          $gt: 0\n        }\n      }\n    }]\n  }, {\n    a: 1\n  }); // $where\n\n  match({\n    $where: 'this.a === 1'\n  }, {\n    a: 1\n  });\n  match({\n    $where: 'obj.a === 1'\n  }, {\n    a: 1\n  });\n  nomatch({\n    $where: 'this.a !== 1'\n  }, {\n    a: 1\n  });\n  nomatch({\n    $where: 'obj.a !== 1'\n  }, {\n    a: 1\n  });\n  nomatch({\n    $where: 'this.a === 1',\n    a: 2\n  }, {\n    a: 1\n  });\n  match({\n    $where: 'this.a === 1',\n    b: 2\n  }, {\n    a: 1,\n    b: 2\n  });\n  match({\n    $where: 'this.a === 1 && this.b === 2'\n  }, {\n    a: 1,\n    b: 2\n  });\n  match({\n    $where: 'this.a instanceof Array'\n  }, {\n    a: []\n  });\n  nomatch({\n    $where: 'this.a instanceof Array'\n  }, {\n    a: 1\n  }); // reaching into array\n\n  match({\n    'dogs.0.name': 'Fido'\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  match({\n    'dogs.1.name': 'Rex'\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  nomatch({\n    'dogs.1.name': 'Fido'\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  match({\n    'room.1b': 'bla'\n  }, {\n    room: {\n      '1b': 'bla'\n    }\n  });\n  match({\n    'dogs.name': 'Fido'\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  match({\n    'dogs.name': 'Rex'\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  match({\n    'animals.dogs.name': 'Fido'\n  }, {\n    animals: [{\n      dogs: [{\n        name: 'Rover'\n      }]\n    }, {}, {\n      dogs: [{\n        name: 'Fido'\n      }, {\n        name: 'Rex'\n      }]\n    }]\n  });\n  match({\n    'animals.dogs.name': 'Fido'\n  }, {\n    animals: [{\n      dogs: {\n        name: 'Rex'\n      }\n    }, {\n      dogs: {\n        name: 'Fido'\n      }\n    }]\n  });\n  match({\n    'animals.dogs.name': 'Fido'\n  }, {\n    animals: [{\n      dogs: [{\n        name: 'Rover'\n      }]\n    }, {}, {\n      dogs: [{\n        name: ['Fido']\n      }, {\n        name: 'Rex'\n      }]\n    }]\n  });\n  nomatch({\n    'dogs.name': 'Fido'\n  }, {\n    dogs: []\n  }); // $elemMatch\n\n  match({\n    dogs: {\n      $elemMatch: {\n        name: /e/\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  nomatch({\n    dogs: {\n      $elemMatch: {\n        name: /a/\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido'\n    }, {\n      name: 'Rex'\n    }]\n  });\n  match({\n    dogs: {\n      $elemMatch: {\n        age: {\n          $gt: 4\n        }\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido',\n      age: 5\n    }, {\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  match({\n    dogs: {\n      $elemMatch: {\n        name: 'Fido',\n        age: {\n          $gt: 4\n        }\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido',\n      age: 5\n    }, {\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  nomatch({\n    dogs: {\n      $elemMatch: {\n        name: 'Fido',\n        age: {\n          $gt: 5\n        }\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido',\n      age: 5\n    }, {\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  match({\n    dogs: {\n      $elemMatch: {\n        name: /i/,\n        age: {\n          $gt: 4\n        }\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido',\n      age: 5\n    }, {\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  nomatch({\n    dogs: {\n      $elemMatch: {\n        name: /e/,\n        age: 5\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Fido',\n      age: 5\n    }, {\n      name: 'Rex',\n      age: 3\n    }]\n  }); // Tests for https://github.com/meteor/meteor/issues/9111.\n\n  match({\n    dogs: {\n      $elemMatch: {\n        name: 'Rex'\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  nomatch({\n    dogs: {\n      $not: {\n        $elemMatch: {\n          name: 'Rex'\n        }\n      }\n    }\n  }, {\n    dogs: [{\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  match({\n    $or: [{\n      dogs: {\n        $elemMatch: {\n          name: 'Rex'\n        }\n      }\n    }, {\n      dogs: {\n        $elemMatch: {\n          name: 'Rex',\n          age: 5\n        }\n      }\n    }]\n  }, {\n    dogs: [{\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  nomatch({\n    $or: [{\n      dogs: {\n        $not: {\n          $elemMatch: {\n            name: 'Rex'\n          }\n        }\n      }\n    }, {\n      dogs: {\n        $elemMatch: {\n          name: 'Rex',\n          age: 5\n        }\n      }\n    }]\n  }, {\n    dogs: [{\n      name: 'Rex',\n      age: 3\n    }]\n  });\n  match({\n    x: {\n      $elemMatch: {\n        y: 9\n      }\n    }\n  }, {\n    x: [{\n      y: 9\n    }]\n  });\n  nomatch({\n    x: {\n      $elemMatch: {\n        y: 9\n      }\n    }\n  }, {\n    x: [[{\n      y: 9\n    }]]\n  });\n  match({\n    x: {\n      $elemMatch: {\n        $gt: 5,\n        $lt: 9\n      }\n    }\n  }, {\n    x: [8]\n  });\n  nomatch({\n    x: {\n      $elemMatch: {\n        $gt: 5,\n        $lt: 9\n      }\n    }\n  }, {\n    x: [[8]]\n  });\n  match({\n    'a.x': {\n      $elemMatch: {\n        y: 9\n      }\n    }\n  }, {\n    a: [{\n      x: []\n    }, {\n      x: [{\n        y: 9\n      }]\n    }]\n  });\n  nomatch({\n    a: {\n      $elemMatch: {\n        x: 5\n      }\n    }\n  }, {\n    a: {\n      x: 5\n    }\n  });\n  match({\n    a: {\n      $elemMatch: {\n        0: {\n          $gt: 5,\n          $lt: 9\n        }\n      }\n    }\n  }, {\n    a: [[6]]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        '0.b': {\n          $gt: 5,\n          $lt: 9\n        }\n      }\n    }\n  }, {\n    a: [[{\n      b: 6\n    }]]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        x: 1,\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      b: 1\n    }]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }],\n        x: 1\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      b: 1\n    }]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      b: 1\n    }]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      b: 1\n    }]\n  });\n  match({\n    a: {\n      $elemMatch: {\n        $and: [{\n          b: 1\n        }, {\n          x: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      b: 1\n    }]\n  });\n  nomatch({\n    a: {\n      $elemMatch: {\n        x: 1,\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      b: 1\n    }]\n  });\n  nomatch({\n    a: {\n      $elemMatch: {\n        x: 1,\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }]\n  });\n  nomatch({\n    a: {\n      $elemMatch: {\n        x: 1,\n        $or: [{\n          a: 1\n        }, {\n          b: 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      b: 1\n    }]\n  });\n  test.throws(function () {\n    match({\n      a: {\n        $elemMatch: {\n          $gte: 1,\n          $or: [{\n            a: 1\n          }, {\n            b: 1\n          }]\n        }\n      }\n    }, {\n      a: [{\n        x: 1,\n        b: 1\n      }]\n    });\n  });\n  test.throws(function () {\n    match({\n      x: {\n        $elemMatch: {\n          $and: [{\n            $gt: 5,\n            $lt: 9\n          }]\n        }\n      }\n    }, {\n      x: [8]\n    });\n  }); // $comment\n\n  match({\n    a: 5,\n    $comment: 'asdf'\n  }, {\n    a: 5\n  });\n  nomatch({\n    a: 6,\n    $comment: 'asdf'\n  }, {\n    a: 5\n  }); // XXX still needs tests:\n  // - non-scalar arguments to $gt, $lt, etc\n});\nTinytest.add('minimongo - projection_compiler', function (test) {\n  var testProjection = function (projection, tests) {\n    var projection_f = LocalCollection._compileProjection(projection);\n\n    var equalNonStrict = function (a, b, desc) {\n      test.isTrue(EJSON.equals(a, b), desc);\n    };\n\n    tests.forEach(function (testCase) {\n      equalNonStrict(projection_f(testCase[0]), testCase[1], testCase[2]);\n    });\n  };\n\n  var testCompileProjectionThrows = function (projection, expectedError) {\n    test.throws(function () {\n      LocalCollection._compileProjection(projection);\n    }, expectedError);\n  };\n\n  testProjection({\n    foo: 1,\n    bar: 1\n  }, [[{\n    foo: 42,\n    bar: 'something',\n    baz: 'else'\n  }, {\n    foo: 42,\n    bar: 'something'\n  }, 'simplest - whitelist'], [{\n    foo: {\n      nested: 17\n    },\n    baz: {}\n  }, {\n    foo: {\n      nested: 17\n    }\n  }, 'nested whitelisted field'], [{\n    _id: 'uid',\n    bazbaz: 42\n  }, {\n    _id: 'uid'\n  }, 'simplest whitelist - preserve _id']]);\n  testProjection({\n    foo: 0,\n    bar: 0\n  }, [[{\n    foo: 42,\n    bar: 'something',\n    baz: 'else'\n  }, {\n    baz: 'else'\n  }, 'simplest - blacklist'], [{\n    foo: {\n      nested: 17\n    },\n    baz: {\n      foo: 'something'\n    }\n  }, {\n    baz: {\n      foo: 'something'\n    }\n  }, 'nested blacklisted field'], [{\n    _id: 'uid',\n    bazbaz: 42\n  }, {\n    _id: 'uid',\n    bazbaz: 42\n  }, 'simplest blacklist - preserve _id']]);\n  testProjection({\n    _id: 0,\n    foo: 1\n  }, [[{\n    foo: 42,\n    bar: 33,\n    _id: 'uid'\n  }, {\n    foo: 42\n  }, 'whitelist - _id blacklisted']]);\n  testProjection({\n    _id: 0,\n    foo: 0\n  }, [[{\n    foo: 42,\n    bar: 33,\n    _id: 'uid'\n  }, {\n    bar: 33\n  }, 'blacklist - _id blacklisted']]);\n  testProjection({\n    'foo.bar.baz': 1\n  }, [[{\n    foo: {\n      meh: 'fur',\n      bar: {\n        baz: 42\n      },\n      tr: 1\n    },\n    bar: 33,\n    baz: 'trolololo'\n  }, {\n    foo: {\n      bar: {\n        baz: 42\n      }\n    }\n  }, 'whitelist nested'], // Behavior of this test is looked up in actual mongo\n  [{\n    foo: {\n      meh: 'fur',\n      bar: 'nope',\n      tr: 1\n    },\n    bar: 33,\n    baz: 'trolololo'\n  }, {\n    foo: {}\n  }, 'whitelist nested - path not found in doc, different type'], // Behavior of this test is looked up in actual mongo\n  [{\n    foo: {\n      meh: 'fur',\n      bar: [],\n      tr: 1\n    },\n    bar: 33,\n    baz: 'trolololo'\n  }, {\n    foo: {\n      bar: []\n    }\n  }, 'whitelist nested - path not found in doc']]);\n  testProjection({\n    'hope.humanity': 0,\n    'hope.people': 0\n  }, [[{\n    hope: {\n      humanity: 'lost',\n      people: 'broken',\n      candies: 'long live!'\n    }\n  }, {\n    hope: {\n      candies: 'long live!'\n    }\n  }, 'blacklist nested'], [{\n    hope: 'new'\n  }, {\n    hope: 'new'\n  }, 'blacklist nested - path not found in doc']]);\n  testProjection({\n    _id: 1\n  }, [[{\n    _id: 42,\n    x: 1,\n    y: {\n      z: '2'\n    }\n  }, {\n    _id: 42\n  }, '_id whitelisted'], [{\n    _id: 33\n  }, {\n    _id: 33\n  }, '_id whitelisted, _id only'], [{\n    x: 1\n  }, {}, '_id whitelisted, no _id']]);\n  testProjection({\n    _id: 0\n  }, [[{\n    _id: 42,\n    x: 1,\n    y: {\n      z: '2'\n    }\n  }, {\n    x: 1,\n    y: {\n      z: '2'\n    }\n  }, '_id blacklisted'], [{\n    _id: 33\n  }, {}, '_id blacklisted, _id only'], [{\n    x: 1\n  }, {\n    x: 1\n  }, '_id blacklisted, no _id']]);\n  testProjection({}, [[{\n    a: 1,\n    b: 2,\n    c: '3'\n  }, {\n    a: 1,\n    b: 2,\n    c: '3'\n  }, 'empty projection']]);\n  testCompileProjectionThrows({\n    inc: 1,\n    excl: 0\n  }, 'You cannot currently mix including and excluding fields');\n  testCompileProjectionThrows({\n    _id: 1,\n    a: 0\n  }, 'You cannot currently mix including and excluding fields');\n  testCompileProjectionThrows({\n    a: 1,\n    'a.b': 1\n  }, 'using both of them may trigger unexpected behavior');\n  testCompileProjectionThrows({\n    'a.b.c': 1,\n    'a.b': 1,\n    a: 1\n  }, 'using both of them may trigger unexpected behavior');\n  testCompileProjectionThrows('some string', 'fields option must be an object');\n});\nTinytest.add('minimongo - fetch with fields', function (test) {\n  var c = new LocalCollection();\n  Array.from({\n    length: 30\n  }, function (x, i) {\n    c.insert({\n      something: Random.id(),\n      anything: {\n        foo: 'bar',\n        cool: 'hot'\n      },\n      nothing: i,\n      i: i\n    });\n  }); // Test just a regular fetch with some projection\n\n  var fetchResults = c.find({}, {\n    fields: {\n      something: 1,\n      'anything.foo': 1\n    }\n  }).fetch();\n  test.isTrue(fetchResults.every(function (x) {\n    return x && x.something && x.anything && x.anything.foo && x.anything.foo === 'bar' && !hasOwn.call(x, 'nothing') && !hasOwn.call(x.anything, 'cool');\n  })); // Test with a selector, even field used in the selector is excluded in the\n  // projection\n\n  fetchResults = c.find({\n    nothing: {\n      $gte: 5\n    }\n  }, {\n    fields: {\n      nothing: 0\n    }\n  }).fetch();\n  test.isTrue(fetchResults.every(function (x) {\n    return x && x.something && x.anything && x.anything.foo === 'bar' && x.anything.cool === 'hot' && !hasOwn.call(x, 'nothing') && x.i && x.i >= 5;\n  }));\n  test.isTrue(fetchResults.length === 25); // Test that we can sort, based on field excluded from the projection, use\n  // skip and limit as well!\n  // following find will get indexes [10..20) sorted by nothing\n\n  fetchResults = c.find({}, {\n    sort: {\n      nothing: 1\n    },\n    limit: 10,\n    skip: 10,\n    fields: {\n      i: 1,\n      something: 1\n    }\n  }).fetch();\n  test.isTrue(fetchResults.every(function (x) {\n    return x && x.something && x.i >= 10 && x.i < 20;\n  }));\n  fetchResults.forEach(function (x, i, arr) {\n    if (!i) return;\n    test.isTrue(x.i === arr[i - 1].i + 1);\n  }); // Temporary unsupported operators\n  // queries are taken from MongoDB docs examples\n\n  test.throws(function () {\n    c.find({}, {\n      fields: {\n        'grades.$': 1\n      }\n    });\n  });\n  test.throws(function () {\n    c.find({}, {\n      fields: {\n        grades: {\n          $elemMatch: {\n            mean: 70\n          }\n        }\n      }\n    });\n  });\n  test.throws(function () {\n    c.find({}, {\n      fields: {\n        grades: {\n          $slice: [20, 10]\n        }\n      }\n    });\n  });\n});\nTinytest.add('minimongo - fetch with projection, subarrays', function (test) {\n  // Apparently projection of type 'foo.bar.x' for\n  // { foo: [ { bar: { x: 42 } }, { bar: { x: 3 } } ] }\n  // should return exactly this object. More precisely, arrays are considered as\n  // sets and are queried separately and then merged back to result set\n  var c = new LocalCollection(); // Insert a test object with two set fields\n\n  c.insert({\n    setA: [{\n      fieldA: 42,\n      fieldB: 33\n    }, {\n      fieldA: 'the good',\n      fieldB: 'the bad',\n      fieldC: 'the ugly'\n    }],\n    setB: [{\n      anotherA: {},\n      anotherB: 'meh'\n    }, {\n      anotherA: 1234,\n      anotherB: 431\n    }]\n  });\n\n  var equalNonStrict = function (a, b, desc) {\n    test.isTrue(EJSON.equals(a, b), desc);\n  };\n\n  var testForProjection = function (projection, expected) {\n    var fetched = c.find({}, {\n      fields: projection\n    }).fetch()[0];\n    equalNonStrict(fetched, expected, \"failed sub-set projection: \" + JSON.stringify(projection));\n  };\n\n  testForProjection({\n    'setA.fieldA': 1,\n    'setB.anotherB': 1,\n    _id: 0\n  }, {\n    setA: [{\n      fieldA: 42\n    }, {\n      fieldA: 'the good'\n    }],\n    setB: [{\n      anotherB: 'meh'\n    }, {\n      anotherB: 431\n    }]\n  });\n  testForProjection({\n    'setA.fieldA': 0,\n    'setB.anotherA': 0,\n    _id: 0\n  }, {\n    setA: [{\n      fieldB: 33\n    }, {\n      fieldB: 'the bad',\n      fieldC: 'the ugly'\n    }],\n    setB: [{\n      anotherB: 'meh'\n    }, {\n      anotherB: 431\n    }]\n  });\n  c.remove({});\n  c.insert({\n    a: [[{\n      b: 1,\n      c: 2\n    }, {\n      b: 2,\n      c: 4\n    }], {\n      b: 3,\n      c: 5\n    }, [{\n      b: 4,\n      c: 9\n    }]]\n  });\n  testForProjection({\n    'a.b': 1,\n    _id: 0\n  }, {\n    a: [[{\n      b: 1\n    }, {\n      b: 2\n    }], {\n      b: 3\n    }, [{\n      b: 4\n    }]]\n  });\n  testForProjection({\n    'a.b': 0,\n    _id: 0\n  }, {\n    a: [[{\n      c: 2\n    }, {\n      c: 4\n    }], {\n      c: 5\n    }, [{\n      c: 9\n    }]]\n  });\n});\nTinytest.add('minimongo - fetch with projection, deep copy', function (test) {\n  // Compiled fields projection defines the contract: returned document doesn't\n  // retain anything from the passed argument.\n  var doc = {\n    a: {\n      x: 42\n    },\n    b: {\n      y: {\n        z: 33\n      }\n    },\n    c: 'asdf'\n  };\n  var fields = {\n    a: 1,\n    'b.y': 1\n  };\n\n  var projectionFn = LocalCollection._compileProjection(fields);\n\n  var filteredDoc = projectionFn(doc);\n  doc.a.x++;\n  doc.b.y.z--;\n  test.equal(filteredDoc.a.x, 42, 'projection returning deep copy - including');\n  test.equal(filteredDoc.b.y.z, 33, 'projection returning deep copy - including');\n  fields = {\n    c: 0\n  };\n  projectionFn = LocalCollection._compileProjection(fields);\n  filteredDoc = projectionFn(doc);\n  doc.a.x = 5;\n  test.equal(filteredDoc.a.x, 43, 'projection returning deep copy - excluding');\n});\nTinytest.add('minimongo - observe ordered with projection', function (test) {\n  // These tests are copy-paste from \"minimongo -observe ordered\",\n  // slightly modified to test projection\n  var operations = [];\n  var cbs = log_callbacks(operations);\n  var handle = void 0;\n  var c = new LocalCollection();\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    },\n    fields: {\n      a: 1\n    }\n  }).observe(cbs);\n  test.isTrue(handle.collection === c);\n  c.insert({\n    _id: 'foo',\n    a: 1,\n    b: 2\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 0, null]);\n  c.update({\n    a: 1\n  }, {\n    $set: {\n      a: 2,\n      b: 1\n    }\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 2\n  }, 0, {\n    a: 1\n  }]);\n  c.insert({\n    _id: 'bar',\n    a: 10,\n    c: 33\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 10\n  }, 1, null]);\n  c.update({}, {\n    $inc: {\n      a: 1\n    }\n  }, {\n    multi: true\n  });\n  c.update({}, {\n    $inc: {\n      c: 1\n    }\n  }, {\n    multi: true\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3\n  }, 0, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['changed', {\n    a: 11\n  }, 1, {\n    a: 10\n  }]);\n  c.update({\n    a: 11\n  }, {\n    a: 1,\n    b: 44\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 1\n  }, 1, {\n    a: 11\n  }]);\n  test.equal(operations.shift(), ['moved', {\n    a: 1\n  }, 1, 0, 'foo']);\n  c.remove({\n    a: 2\n  });\n  test.equal(operations.shift(), undefined);\n  c.remove({\n    a: 3\n  });\n  test.equal(operations.shift(), ['removed', 'foo', 1, {\n    a: 3\n  }]); // test stop\n\n  handle.stop();\n  var idA2 = Random.id();\n  c.insert({\n    _id: idA2,\n    a: 2\n  });\n  test.equal(operations.shift(), undefined);\n  var cursor = c.find({}, {\n    fields: {\n      a: 1,\n      _id: 0\n    }\n  });\n  test.throws(function () {\n    cursor.observeChanges({\n      added: function () {}\n    });\n  });\n  test.throws(function () {\n    cursor.observe({\n      added: function () {}\n    });\n  }); // test initial inserts (and backwards sort)\n\n  handle = c.find({}, {\n    sort: {\n      a: -1\n    },\n    fields: {\n      a: 1\n    }\n  }).observe(cbs);\n  test.equal(operations.shift(), ['added', {\n    a: 2\n  }, 0, null]);\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 1, null]);\n  handle.stop(); // test _suppress_initial\n\n  handle = c.find({}, {\n    sort: {\n      a: -1\n    },\n    fields: {\n      a: 1\n    }\n  }).observe(Object.assign(cbs, {\n    _suppress_initial: true\n  }));\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    a: 100,\n    b: {\n      foo: 'bar'\n    }\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 100\n  }, 0, idA2]);\n  handle.stop(); // test skip and limit.\n\n  c.remove({});\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    },\n    skip: 1,\n    limit: 2,\n    fields: {\n      blacklisted: 0\n    }\n  }).observe(cbs);\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    a: 1,\n    blacklisted: 1324\n  });\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    _id: 'foo',\n    a: 2,\n    blacklisted: ['something']\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 2\n  }, 0, null]);\n  c.insert({\n    a: 3,\n    blacklisted: {\n      2: 3\n    }\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 3\n  }, 1, null]);\n  c.insert({\n    a: 4,\n    blacklisted: 6\n  });\n  test.equal(operations.shift(), undefined);\n  c.update({\n    a: 1\n  }, {\n    a: 0,\n    blacklisted: 4444\n  });\n  test.equal(operations.shift(), undefined);\n  c.update({\n    a: 0\n  }, {\n    a: 5,\n    blacklisted: 11111\n  });\n  test.equal(operations.shift(), ['removed', 'foo', 0, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['added', {\n    a: 4\n  }, 1, null]);\n  c.update({\n    a: 3\n  }, {\n    a: 3.5,\n    blacklisted: 333.4444\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3.5\n  }, 0, {\n    a: 3\n  }]);\n  handle.stop(); // test _no_indices\n\n  c.remove({});\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    },\n    fields: {\n      a: 1\n    }\n  }).observe(Object.assign(cbs, {\n    _no_indices: true\n  }));\n  c.insert({\n    _id: 'foo',\n    a: 1,\n    zoo: 'crazy'\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, -1, null]);\n  c.update({\n    a: 1\n  }, {\n    $set: {\n      a: 2,\n      foobar: 'player'\n    }\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 2\n  }, -1, {\n    a: 1\n  }]);\n  c.insert({\n    a: 10,\n    b: 123.45\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 10\n  }, -1, null]);\n  c.update({}, {\n    $inc: {\n      a: 1,\n      b: 2\n    }\n  }, {\n    multi: true\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3\n  }, -1, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['changed', {\n    a: 11\n  }, -1, {\n    a: 10\n  }]);\n  c.update({\n    a: 11,\n    b: 125.45\n  }, {\n    a: 1,\n    b: 444\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 1\n  }, -1, {\n    a: 11\n  }]);\n  test.equal(operations.shift(), ['moved', {\n    a: 1\n  }, -1, -1, 'foo']);\n  c.remove({\n    a: 2\n  });\n  test.equal(operations.shift(), undefined);\n  c.remove({\n    a: 3\n  });\n  test.equal(operations.shift(), ['removed', 'foo', -1, {\n    a: 3\n  }]);\n  handle.stop();\n});\nTinytest.add('minimongo - ordering', function (test) {\n  var shortBinary = EJSON.newBinary(1);\n  shortBinary[0] = 128;\n  var longBinary1 = EJSON.newBinary(2);\n  longBinary1[1] = 42;\n  var longBinary2 = EJSON.newBinary(2);\n  longBinary2[1] = 50;\n  var date1 = new Date();\n  var date2 = new Date(date1.getTime() + 1000); // value ordering\n\n  assert_ordering(test, LocalCollection._f._cmp, [null, 1, 2.2, 3, '03', '1', '11', '2', 'a', 'aaa', {}, {\n    a: 2\n  }, {\n    a: 3\n  }, {\n    a: 3,\n    b: 4\n  }, {\n    b: 4\n  }, {\n    b: 4,\n    a: 3\n  }, {\n    b: {}\n  }, {\n    b: [1, 2, 3]\n  }, {\n    b: [1, 2, 4]\n  }, [], [1, 2], [1, 2, 3], [1, 2, 4], [1, 2, '4'], [1, 2, [4]], shortBinary, longBinary1, longBinary2, new MongoID.ObjectID('1234567890abcd1234567890'), new MongoID.ObjectID('abcd1234567890abcd123456'), false, true, date1, date2]); // document ordering under a sort specification\n\n  var verify = function (sorts, docs) {\n    (Array.isArray(sorts) ? sorts : [sorts]).forEach(function (sort) {\n      var sorter = new Minimongo.Sorter(sort);\n      assert_ordering(test, sorter.getComparator(), docs);\n    });\n  }; // note: [] doesn't sort with \"arrays\", it sorts as \"undefined\". the position\n  // of arrays in _typeorder only matters for things like $lt. (This behavior\n  // verified with MongoDB 2.2.1.) We don't define the relative order of {a: []}\n  // and {c: 1} is undefined (MongoDB does seem to care but it's not clear how\n  // or why).\n\n\n  verify([{\n    a: 1\n  }, ['a'], [['a', 'asc']]], [{\n    a: []\n  }, {\n    a: 1\n  }, {\n    a: {}\n  }, {\n    a: true\n  }]);\n  verify([{\n    a: 1\n  }, ['a'], [['a', 'asc']]], [{\n    c: 1\n  }, {\n    a: 1\n  }, {\n    a: {}\n  }, {\n    a: true\n  }]);\n  verify([{\n    a: -1\n  }, [['a', 'desc']]], [{\n    a: true\n  }, {\n    a: {}\n  }, {\n    a: 1\n  }, {\n    c: 1\n  }]);\n  verify([{\n    a: -1\n  }, [['a', 'desc']]], [{\n    a: true\n  }, {\n    a: {}\n  }, {\n    a: 1\n  }, {\n    a: []\n  }]);\n  verify([{\n    a: 1,\n    b: -1\n  }, ['a', ['b', 'desc']], [['a', 'asc'], ['b', 'desc']]], [{\n    c: 1\n  }, {\n    a: 1,\n    b: 3\n  }, {\n    a: 1,\n    b: 2\n  }, {\n    a: 2,\n    b: 0\n  }]);\n  verify([{\n    a: 1,\n    b: 1\n  }, ['a', 'b'], [['a', 'asc'], ['b', 'asc']]], [{\n    c: 1\n  }, {\n    a: 1,\n    b: 2\n  }, {\n    a: 1,\n    b: 3\n  }, {\n    a: 2,\n    b: 0\n  }]);\n  test.throws(function () {\n    new Minimongo.Sorter('a');\n  });\n  test.throws(function () {\n    new Minimongo.Sorter(123);\n  }); // We don't support $natural:1 (since we don't actually have Mongo's on-disk\n  // ordering available!)\n\n  test.throws(function () {\n    new Minimongo.Sorter({\n      $natural: 1\n    });\n  }); // No sort spec implies everything equal.\n\n  test.equal(new Minimongo.Sorter({}).getComparator()({\n    a: 1\n  }, {\n    a: 2\n  }), 0); // All sorts of array edge cases!\n  // Increasing sort sorts by the smallest element it finds; 1 < 2.\n\n  verify({\n    a: 1\n  }, [{\n    a: [1, 10, 20]\n  }, {\n    a: [5, 2, 99]\n  }]); // Decreasing sorts by largest it finds; 99 > 20.\n\n  verify({\n    a: -1\n  }, [{\n    a: [5, 2, 99]\n  }, {\n    a: [1, 10, 20]\n  }]); // Can also sort by specific array indices.\n\n  verify({\n    'a.1': 1\n  }, [{\n    a: [5, 2, 99]\n  }, {\n    a: [1, 10, 20]\n  }]); // We do NOT expand sub-arrays, so the minimum in the second doc is 5, not\n  // -20. (Numbers always sort before arrays.)\n\n  verify({\n    a: 1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [-5, -20], 18]\n  }]); // The maximum in each of these is the array, since arrays are \"greater\" than\n  // numbers. And [10, 15] is greater than [-5, -20].\n\n  verify({\n    a: -1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [-5, -20], 18]\n  }]); // 'a.0' here ONLY means \"first element of a\", not \"first element of something\n  // found in a\", so it CANNOT find the 10 or -5.\n\n  verify({\n    'a.0': 1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [-5, -20], 18]\n  }]);\n  verify({\n    'a.0': -1\n  }, [{\n    a: [5, [-5, -20], 18]\n  }, {\n    a: [1, [10, 15], 20]\n  }]); // Similarly, this is just comparing [-5,-20] to [10, 15].\n\n  verify({\n    'a.1': 1\n  }, [{\n    a: [5, [-5, -20], 18]\n  }, {\n    a: [1, [10, 15], 20]\n  }]);\n  verify({\n    'a.1': -1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [-5, -20], 18]\n  }]); // Here we are just comparing [10,15] directly to [19,3] (and NOT also\n  // iterating over the numbers; this is implemented by setting dontIterate in\n  // makeLookupFunction).  So [10,15]<[19,3] even though 3 is the smallest\n  // number you can find there.\n\n  verify({\n    'a.1': 1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [19, 3], 18]\n  }]);\n  verify({\n    'a.1': -1\n  }, [{\n    a: [5, [19, 3], 18]\n  }, {\n    a: [1, [10, 15], 20]\n  }]); // Minimal elements are 1 and 5.\n\n  verify({\n    a: 1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [19, 3], 18]\n  }]); // Maximal elements are [19,3] and [10,15] (because arrays sort higher than\n  // numbers), even though there's a 20 floating around.\n\n  verify({\n    a: -1\n  }, [{\n    a: [5, [19, 3], 18]\n  }, {\n    a: [1, [10, 15], 20]\n  }]); // Maximal elements are [10,15] and [3,19].  [10,15] is bigger even though 19\n  // is the biggest number in them, because array comparison is lexicographic.\n\n  verify({\n    a: -1\n  }, [{\n    a: [1, [10, 15], 20]\n  }, {\n    a: [5, [3, 19], 18]\n  }]); // (0,4) < (0,5), so they go in this order.  It's not correct to consider\n  // (0,3) as a sort key for the second document because they come from\n  // different a-branches.\n\n  verify({\n    'a.x': 1,\n    'a.y': 1\n  }, [{\n    a: [{\n      x: 0,\n      y: 4\n    }]\n  }, {\n    a: [{\n      x: 0,\n      y: 5\n    }, {\n      x: 1,\n      y: 3\n    }]\n  }]);\n  verify({\n    'a.0.s': 1\n  }, [{\n    a: [{\n      s: 1\n    }]\n  }, {\n    a: [{\n      s: 2\n    }]\n  }]);\n});\nTinytest.add('minimongo - sort', function (test) {\n  var c = new LocalCollection();\n\n  for (var i = 0; i < 50; i++) {\n    for (var j = 0; j < 2; j++) {\n      c.insert({\n        a: i,\n        b: j,\n        _id: i + \"_\" + j\n      });\n    }\n  }\n\n  test.equal(c.find({\n    a: {\n      $gt: 10\n    }\n  }, {\n    sort: {\n      b: -1,\n      a: 1\n    },\n    limit: 5\n  }).fetch(), [{\n    a: 11,\n    b: 1,\n    _id: '11_1'\n  }, {\n    a: 12,\n    b: 1,\n    _id: '12_1'\n  }, {\n    a: 13,\n    b: 1,\n    _id: '13_1'\n  }, {\n    a: 14,\n    b: 1,\n    _id: '14_1'\n  }, {\n    a: 15,\n    b: 1,\n    _id: '15_1'\n  }]);\n  test.equal(c.find({\n    a: {\n      $gt: 10\n    }\n  }, {\n    sort: {\n      b: -1,\n      a: 1\n    },\n    skip: 3,\n    limit: 5\n  }).fetch(), [{\n    a: 14,\n    b: 1,\n    _id: '14_1'\n  }, {\n    a: 15,\n    b: 1,\n    _id: '15_1'\n  }, {\n    a: 16,\n    b: 1,\n    _id: '16_1'\n  }, {\n    a: 17,\n    b: 1,\n    _id: '17_1'\n  }, {\n    a: 18,\n    b: 1,\n    _id: '18_1'\n  }]);\n  test.equal(c.find({\n    a: {\n      $gte: 20\n    }\n  }, {\n    sort: {\n      a: 1,\n      b: -1\n    },\n    skip: 50,\n    limit: 5\n  }).fetch(), [{\n    a: 45,\n    b: 1,\n    _id: '45_1'\n  }, {\n    a: 45,\n    b: 0,\n    _id: '45_0'\n  }, {\n    a: 46,\n    b: 1,\n    _id: '46_1'\n  }, {\n    a: 46,\n    b: 0,\n    _id: '46_0'\n  }, {\n    a: 47,\n    b: 1,\n    _id: '47_1'\n  }]);\n});\nTinytest.add('minimongo - subkey sort', function (test) {\n  var c = new LocalCollection(); // normal case\n\n  c.insert({\n    a: {\n      b: 2\n    }\n  });\n  c.insert({\n    a: {\n      b: 1\n    }\n  });\n  c.insert({\n    a: {\n      b: 3\n    }\n  });\n  test.equal(c.find({}, {\n    sort: {\n      'a.b': -1\n    }\n  }).fetch().map(function (doc) {\n    return doc.a;\n  }), [{\n    b: 3\n  }, {\n    b: 2\n  }, {\n    b: 1\n  }]); // isn't an object\n\n  c.insert({\n    a: 1\n  });\n  test.equal(c.find({}, {\n    sort: {\n      'a.b': 1\n    }\n  }).fetch().map(function (doc) {\n    return doc.a;\n  }), [1, {\n    b: 1\n  }, {\n    b: 2\n  }, {\n    b: 3\n  }]); // complex object\n\n  c.insert({\n    a: {\n      b: {\n        c: 1\n      }\n    }\n  });\n  test.equal(c.find({}, {\n    sort: {\n      'a.b': -1\n    }\n  }).fetch().map(function (doc) {\n    return doc.a;\n  }), [{\n    b: {\n      c: 1\n    }\n  }, {\n    b: 3\n  }, {\n    b: 2\n  }, {\n    b: 1\n  }, 1]); // no such top level prop\n\n  c.insert({\n    c: 1\n  });\n  test.equal(c.find({}, {\n    sort: {\n      'a.b': -1\n    }\n  }).fetch().map(function (doc) {\n    return doc.a;\n  }), [{\n    b: {\n      c: 1\n    }\n  }, {\n    b: 3\n  }, {\n    b: 2\n  }, {\n    b: 1\n  }, 1, undefined]); // no such mid level prop. just test that it doesn't throw.\n\n  test.equal(c.find({}, {\n    sort: {\n      'a.nope.c': -1\n    }\n  }).count(), 6);\n});\nTinytest.add('minimongo - array sort', function (test) {\n  var c = new LocalCollection(); // \"up\" and \"down\" are the indices that the docs should have when sorted\n  // ascending and descending by \"a.x\" respectively. They are not reverses of\n  // each other: when sorting ascending, you use the minimum value you can find\n  // in the document, and when sorting descending, you use the maximum value you\n  // can find. So [1, 4] shows up in the 1 slot when sorting ascending and the 4\n  // slot when sorting descending.\n  //\n  // Similarly, \"selected\" is the index that the doc should have in the query\n  // that sorts ascending on \"a.x\" and selects {'a.x': {$gt: 1}}. In this case,\n  // the 1 in [1, 4] may not be used as a sort key.\n\n  c.insert({\n    up: 1,\n    down: 1,\n    selected: 2,\n    a: {\n      x: [1, 4]\n    }\n  });\n  c.insert({\n    up: 2,\n    down: 2,\n    selected: 0,\n    a: [{\n      x: [2]\n    }, {\n      x: 3\n    }]\n  });\n  c.insert({\n    up: 0,\n    down: 4,\n    a: {\n      x: 0\n    }\n  });\n  c.insert({\n    up: 3,\n    down: 3,\n    selected: 1,\n    a: {\n      x: 2.5\n    }\n  });\n  c.insert({\n    up: 4,\n    down: 0,\n    selected: 3,\n    a: {\n      x: 5\n    }\n  }); // Test that the the documents in \"cursor\" contain values with the name\n  // \"field\" running from 0 to the max value of that name in the collection.\n\n  var testCursorMatchesField = function (cursor, field) {\n    var fieldValues = [];\n    c.find().forEach(function (doc) {\n      if (hasOwn.call(doc, field)) {\n        fieldValues.push(doc[field]);\n      }\n    });\n    test.equal(cursor.fetch().map(function (doc) {\n      return doc[field];\n    }), Array.from({\n      length: Math.max.apply(Math, fieldValues) + 1\n    }, function (x, i) {\n      return i;\n    }));\n  };\n\n  testCursorMatchesField(c.find({}, {\n    sort: {\n      'a.x': 1\n    }\n  }), 'up');\n  testCursorMatchesField(c.find({}, {\n    sort: {\n      'a.x': -1\n    }\n  }), 'down');\n  testCursorMatchesField(c.find({\n    'a.x': {\n      $gt: 1\n    }\n  }, {\n    sort: {\n      'a.x': 1\n    }\n  }), 'selected');\n});\nTinytest.add('minimongo - sort keys', function (test) {\n  var keyListToObject = function (keyList) {\n    var obj = {};\n    keyList.forEach(function (key) {\n      obj[EJSON.stringify(key)] = true;\n    });\n    return obj;\n  };\n\n  var testKeys = function (sortSpec, doc, expectedKeyList) {\n    var expectedKeys = keyListToObject(expectedKeyList);\n    var sorter = new Minimongo.Sorter(sortSpec);\n    var actualKeyList = [];\n\n    sorter._generateKeysFromDoc(doc, function (key) {\n      actualKeyList.push(key);\n    });\n\n    var actualKeys = keyListToObject(actualKeyList);\n    test.equal(actualKeys, expectedKeys);\n  };\n\n  var testParallelError = function (sortSpec, doc) {\n    var sorter = new Minimongo.Sorter(sortSpec);\n    test.throws(function () {\n      sorter._generateKeysFromDoc(doc, function () {});\n    }, /parallel arrays/);\n  }; // Just non-array fields.\n\n\n  testKeys({\n    'a.x': 1,\n    'a.y': 1\n  }, {\n    a: {\n      x: 0,\n      y: 5\n    }\n  }, [[0, 5]]); // Ensure that we don't get [0,3] and [1,5].\n\n  testKeys({\n    'a.x': 1,\n    'a.y': 1\n  }, {\n    a: [{\n      x: 0,\n      y: 5\n    }, {\n      x: 1,\n      y: 3\n    }]\n  }, [[0, 5], [1, 3]]); // Ensure we can combine \"array fields\" with \"non-array fields\".\n\n  testKeys({\n    'a.x': 1,\n    'a.y': 1,\n    b: -1\n  }, {\n    a: [{\n      x: 0,\n      y: 5\n    }, {\n      x: 1,\n      y: 3\n    }],\n    b: 42\n  }, [[0, 5, 42], [1, 3, 42]]);\n  testKeys({\n    b: -1,\n    'a.x': 1,\n    'a.y': 1\n  }, {\n    a: [{\n      x: 0,\n      y: 5\n    }, {\n      x: 1,\n      y: 3\n    }],\n    b: 42\n  }, [[42, 0, 5], [42, 1, 3]]);\n  testKeys({\n    'a.x': 1,\n    b: -1,\n    'a.y': 1\n  }, {\n    a: [{\n      x: 0,\n      y: 5\n    }, {\n      x: 1,\n      y: 3\n    }],\n    b: 42\n  }, [[0, 42, 5], [1, 42, 3]]);\n  testKeys({\n    a: 1,\n    b: 1\n  }, {\n    a: [1, 2, 3],\n    b: 42\n  }, [[1, 42], [2, 42], [3, 42]]); // Don't support multiple arrays at the same level.\n\n  testParallelError({\n    a: 1,\n    b: 1\n  }, {\n    a: [1, 2, 3],\n    b: [42]\n  }); // We are MORE STRICT than Mongo here; Mongo supports this!\n  // XXX support this too  #NestedArraySort\n\n  testParallelError({\n    'a.x': 1,\n    'a.y': 1\n  }, {\n    a: [{\n      x: 1,\n      y: [2, 3]\n    }, {\n      x: 2,\n      y: [4, 5]\n    }]\n  });\n});\nTinytest.add('minimongo - sort key filter', function (test) {\n  var testOrder = function (sortSpec, selector, doc1, doc2) {\n    var matcher = new Minimongo.Matcher(selector);\n    var sorter = new Minimongo.Sorter(sortSpec, {\n      matcher: matcher\n    });\n    var comparator = sorter.getComparator();\n    var comparison = comparator(doc1, doc2);\n    test.isTrue(comparison < 0);\n  };\n\n  testOrder({\n    'a.x': 1\n  }, {\n    'a.x': {\n      $gt: 1\n    }\n  }, {\n    a: {\n      x: 3\n    }\n  }, {\n    a: {\n      x: [1, 4]\n    }\n  });\n  testOrder({\n    'a.x': 1\n  }, {\n    'a.x': {\n      $gt: 0\n    }\n  }, {\n    a: {\n      x: [1, 4]\n    }\n  }, {\n    a: {\n      x: 3\n    }\n  });\n\n  var keyCompatible = function (sortSpec, selector, key, compatible) {\n    var matcher = new Minimongo.Matcher(selector);\n    var sorter = new Minimongo.Sorter(sortSpec, {\n      matcher: matcher\n    });\n\n    var actual = sorter._keyCompatibleWithSelector(key);\n\n    test.equal(actual, compatible);\n  };\n\n  keyCompatible({\n    a: 1\n  }, {\n    a: 5\n  }, [5], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: 5\n  }, [8], false);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      x: 5\n    }\n  }, [{\n    x: 5\n  }], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      x: 5\n    }\n  }, [{\n    x: 5,\n    y: 9\n  }], false);\n  keyCompatible({\n    'a.x': 1\n  }, {\n    a: {\n      x: 5\n    }\n  }, [5], true); // To confirm this:\n  //   > db.x.insert({_id: \"q\", a: [{x:1}, {x:5}], b: 2})\n  //   > db.x.insert({_id: \"w\", a: [{x:5}, {x:10}], b: 1})\n  //   > db.x.find({}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   > db.x.find({a: {x:5}}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   > db.x.find({'a.x': 5}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  // ie, only the last one manages to trigger the key compatibility code,\n  // not the previous one.  (The \"b\" sort is necessary because when the key\n  // compatibility code *does* kick in, both documents only end up with \"5\"\n  // for the first field as their only sort key, and we need to differentiate\n  // somehow...)\n\n  keyCompatible({\n    'a.x': 1\n  }, {\n    a: {\n      x: 5\n    }\n  }, [1], true);\n  keyCompatible({\n    'a.x': 1\n  }, {\n    'a.x': 5\n  }, [5], true);\n  keyCompatible({\n    'a.x': 1\n  }, {\n    'a.x': 5\n  }, [1], false); // Regex key check.\n\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/\n  }, ['foo'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/\n  }, ['foooo'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/\n  }, ['foooobar'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/\n  }, ['afoooo'], false);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/\n  }, [''], false);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+'\n    }\n  }, ['foo'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+'\n    }\n  }, ['foooo'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+'\n    }\n  }, ['foooobar'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+'\n    }\n  }, ['afoooo'], false);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+'\n    }\n  }, [''], false);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/i\n  }, ['foo'], true); // Key compatibility check appears to be turned off for regexps with flags.\n\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/i\n  }, ['bar'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: /^foo+/m\n  }, ['bar'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+',\n      $options: 'i'\n    }\n  }, ['bar'], true);\n  keyCompatible({\n    a: 1\n  }, {\n    a: {\n      $regex: '^foo+',\n      $options: 'm'\n    }\n  }, ['bar'], true); // Multiple keys!\n\n  keyCompatible({\n    a: 1,\n    b: 1,\n    c: 1\n  }, {\n    a: {\n      $gt: 5\n    },\n    c: {\n      $lt: 3\n    }\n  }, [6, 'bla', 2], true);\n  keyCompatible({\n    a: 1,\n    b: 1,\n    c: 1\n  }, {\n    a: {\n      $gt: 5\n    },\n    c: {\n      $lt: 3\n    }\n  }, [6, 'bla', 4], false);\n  keyCompatible({\n    a: 1,\n    b: 1,\n    c: 1\n  }, {\n    a: {\n      $gt: 5\n    },\n    c: {\n      $lt: 3\n    }\n  }, [3, 'bla', 1], false); // No filtering is done (ie, all keys are compatible) if the first key isn't\n  // constrained.\n\n  keyCompatible({\n    a: 1,\n    b: 1,\n    c: 1\n  }, {\n    c: {\n      $lt: 3\n    }\n  }, [3, 'bla', 4], true);\n});\nTinytest.add('minimongo - sort function', function (test) {\n  var c = new LocalCollection();\n  c.insert({\n    a: 1\n  });\n  c.insert({\n    a: 10\n  });\n  c.insert({\n    a: 5\n  });\n  c.insert({\n    a: 7\n  });\n  c.insert({\n    a: 2\n  });\n  c.insert({\n    a: 4\n  });\n  c.insert({\n    a: 3\n  });\n\n  var sortFunction = function (doc1, doc2) {\n    return doc2.a - doc1.a;\n  };\n\n  test.equal(c.find({}, {\n    sort: sortFunction\n  }).fetch(), c.find({}).fetch().sort(sortFunction));\n  test.notEqual(c.find({}).fetch(), c.find({}).fetch().sort(sortFunction));\n  test.equal(c.find({}, {\n    sort: {\n      a: -1\n    }\n  }).fetch(), c.find({}).fetch().sort(sortFunction));\n});\nTinytest.add('minimongo - binary search', function (test) {\n  var forwardCmp = function (a, b) {\n    return a - b;\n  };\n\n  var backwardCmp = function (a, b) {\n    return -1 * forwardCmp(a, b);\n  };\n\n  var checkSearch = function (cmp, array, value, expected, message) {\n    var actual = LocalCollection._binarySearch(cmp, array, value);\n\n    if (expected != actual) {\n      test.fail({\n        type: 'minimongo-binary-search',\n        message: message + \" : Expected index \" + expected + \" but had \" + actual\n      });\n    }\n  };\n\n  var checkSearchForward = function (array, value, expected, message) {\n    checkSearch(forwardCmp, array, value, expected, message);\n  };\n\n  var checkSearchBackward = function (array, value, expected, message) {\n    checkSearch(backwardCmp, array, value, expected, message);\n  };\n\n  checkSearchForward([1, 2, 5, 7], 4, 2, 'Inner insert');\n  checkSearchForward([1, 2, 3, 4], 3, 3, 'Inner insert, equal value');\n  checkSearchForward([1, 2, 5], 4, 2, 'Inner insert, odd length');\n  checkSearchForward([1, 3, 5, 6], 9, 4, 'End insert');\n  checkSearchForward([1, 3, 5, 6], 0, 0, 'Beginning insert');\n  checkSearchForward([1], 0, 0, 'Single array, less than.');\n  checkSearchForward([1], 1, 1, 'Single array, equal.');\n  checkSearchForward([1], 2, 1, 'Single array, greater than.');\n  checkSearchForward([], 1, 0, 'Empty array');\n  checkSearchForward([1, 1, 1, 2, 2, 2, 2], 1, 3, 'Highly degenerate array, lower');\n  checkSearchForward([1, 1, 1, 2, 2, 2, 2], 2, 7, 'Highly degenerate array, upper');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 1, 0, 'Highly degenerate array, lower');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 2, 7, 'Highly degenerate array, equal');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 3, 7, 'Highly degenerate array, upper');\n  checkSearchBackward([7, 5, 2, 1], 4, 2, 'Backward: Inner insert');\n  checkSearchBackward([4, 3, 2, 1], 3, 2, 'Backward: Inner insert, equal value');\n  checkSearchBackward([5, 2, 1], 4, 1, 'Backward: Inner insert, odd length');\n  checkSearchBackward([6, 5, 3, 1], 9, 0, 'Backward: Beginning insert');\n  checkSearchBackward([6, 5, 3, 1], 0, 4, 'Backward: End insert');\n  checkSearchBackward([1], 0, 1, 'Backward: Single array, less than.');\n  checkSearchBackward([1], 1, 1, 'Backward: Single array, equal.');\n  checkSearchBackward([1], 2, 0, 'Backward: Single array, greater than.');\n  checkSearchBackward([], 1, 0, 'Backward: Empty array');\n  checkSearchBackward([2, 2, 2, 2, 1, 1, 1], 1, 7, 'Backward: Degenerate array, lower');\n  checkSearchBackward([2, 2, 2, 2, 1, 1, 1], 2, 4, 'Backward: Degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 1, 7, 'Backward: Highly degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 2, 7, 'Backward: Highly degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 3, 0, 'Backward: Highly degenerate array, upper');\n});\nTinytest.add('minimongo - modify', function (test) {\n  var modifyWithQuery = function (doc, query, mod, expected) {\n    var coll = new LocalCollection();\n    coll.insert(doc); // The query is relevant for 'a.$.b'.\n\n    coll.update(query, mod);\n    var actual = coll.findOne();\n\n    if (!expected._id) {\n      delete actual._id; // added by insert\n    }\n\n    if (typeof expected === 'function') {\n      expected(actual, EJSON.stringify({\n        input: doc,\n        mod: mod\n      }));\n    } else {\n      test.equal(actual, expected, EJSON.stringify({\n        input: doc,\n        mod: mod\n      }));\n    }\n  };\n\n  var modify = function (doc, mod, expected) {\n    modifyWithQuery(doc, {}, mod, expected);\n  };\n\n  var exceptionWithQuery = function (doc, query, mod) {\n    var coll = new LocalCollection();\n    coll.insert(doc);\n    test.throws(function () {\n      coll.update(query, mod);\n    });\n  };\n\n  var exception = function (doc, mod) {\n    exceptionWithQuery(doc, {}, mod);\n  };\n\n  var upsert = function (query, mod, expected) {\n    var coll = new LocalCollection();\n    var result = coll.upsert(query, mod);\n    var actual = coll.findOne();\n\n    if (expected._id) {\n      test.equal(result.insertedId, expected._id);\n    } else {\n      delete actual._id;\n    }\n\n    test.equal(actual, expected);\n  };\n\n  var upsertUpdate = function (initialDoc, query, mod, expected) {\n    var collection = new LocalCollection();\n    collection.insert(initialDoc);\n    var result = collection.upsert(query, mod);\n    var actual = collection.findOne();\n\n    if (!expected._id) {\n      delete actual._id;\n    }\n\n    test.equal(actual, expected);\n  };\n\n  var upsertException = function (query, mod) {\n    var coll = new LocalCollection();\n    test.throws(function () {\n      coll.upsert(query, mod);\n    });\n  }; // document replacement\n\n\n  modify({}, {}, {});\n  modify({\n    a: 12\n  }, {}, {}); // tested against mongodb\n\n  modify({\n    a: 12\n  }, {\n    a: 13\n  }, {\n    a: 13\n  });\n  modify({\n    a: 12,\n    b: 99\n  }, {\n    a: 13\n  }, {\n    a: 13\n  });\n  exception({\n    a: 12\n  }, {\n    a: 13,\n    $set: {\n      b: 13\n    }\n  });\n  exception({\n    a: 12\n  }, {\n    $set: {\n      b: 13\n    },\n    a: 13\n  });\n  exception({\n    a: 12\n  }, {\n    $a: 13\n  }); // invalid operator\n\n  exception({\n    a: 12\n  }, {\n    b: {\n      $a: 13\n    }\n  });\n  exception({\n    a: 12\n  }, {\n    b: {\n      'a.b': 13\n    }\n  });\n  exception({\n    a: 12\n  }, {\n    b: {\n      '\\0a': 13\n    }\n  }); // keys\n\n  modify({}, {\n    $set: {\n      a: 12\n    }\n  }, {\n    a: 12\n  });\n  modify({}, {\n    $set: {\n      'a.b': 12\n    }\n  }, {\n    a: {\n      b: 12\n    }\n  });\n  modify({}, {\n    $set: {\n      'a.b.c': 12\n    }\n  }, {\n    a: {\n      b: {\n        c: 12\n      }\n    }\n  });\n  modify({\n    a: {\n      d: 99\n    }\n  }, {\n    $set: {\n      'a.b.c': 12\n    }\n  }, {\n    a: {\n      d: 99,\n      b: {\n        c: 12\n      }\n    }\n  });\n  modify({}, {\n    $set: {\n      'a.b.3.c': 12\n    }\n  }, {\n    a: {\n      b: {\n        3: {\n          c: 12\n        }\n      }\n    }\n  });\n  modify({\n    a: {\n      b: []\n    }\n  }, {\n    $set: {\n      'a.b.3.c': 12\n    }\n  }, {\n    a: {\n      b: [null, null, null, {\n        c: 12\n      }]\n    }\n  });\n  exception({\n    a: [null, null, null]\n  }, {\n    $set: {\n      'a.1.b': 12\n    }\n  });\n  exception({\n    a: [null, 1, null]\n  }, {\n    $set: {\n      'a.1.b': 12\n    }\n  });\n  exception({\n    a: [null, 'x', null]\n  }, {\n    $set: {\n      'a.1.b': 12\n    }\n  });\n  exception({\n    a: [null, [], null]\n  }, {\n    $set: {\n      'a.1.b': 12\n    }\n  });\n  modify({\n    a: [null, null, null]\n  }, {\n    $set: {\n      'a.3.b': 12\n    }\n  }, {\n    a: [null, null, null, {\n      b: 12\n    }]\n  });\n  exception({\n    a: []\n  }, {\n    $set: {\n      'a.b': 12\n    }\n  });\n  exception({\n    a: 12\n  }, {\n    $set: {\n      'a.b': 99\n    }\n  }); // tested on mongo\n\n  exception({\n    a: 'x'\n  }, {\n    $set: {\n      'a.b': 99\n    }\n  });\n  exception({\n    a: true\n  }, {\n    $set: {\n      'a.b': 99\n    }\n  });\n  exception({\n    a: null\n  }, {\n    $set: {\n      'a.b': 99\n    }\n  });\n  modify({\n    a: {}\n  }, {\n    $set: {\n      'a.3': 12\n    }\n  }, {\n    a: {\n      3: 12\n    }\n  });\n  modify({\n    a: []\n  }, {\n    $set: {\n      'a.3': 12\n    }\n  }, {\n    a: [null, null, null, 12]\n  });\n  exception({}, {\n    $set: {\n      '': 12\n    }\n  }); // tested on mongo\n\n  exception({}, {\n    $set: {\n      '.': 12\n    }\n  }); // tested on mongo\n\n  exception({}, {\n    $set: {\n      'a.': 12\n    }\n  }); // tested on mongo\n\n  exception({}, {\n    $set: {\n      '. ': 12\n    }\n  }); // tested on mongo\n\n  exception({}, {\n    $inc: {\n      '... ': 12\n    }\n  }); // tested on mongo\n\n  exception({}, {\n    $set: {\n      'a..b': 12\n    }\n  }); // tested on mongo\n\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $set: {\n      'a.01': 99\n    }\n  }, {\n    a: [1, 99, 3]\n  });\n  modify({\n    a: [1, {\n      a: 98\n    }, 3]\n  }, {\n    $set: {\n      'a.01.b': 99\n    }\n  }, {\n    a: [1, {\n      a: 98,\n      b: 99\n    }, 3]\n  });\n  modify({}, {\n    $set: {\n      '2.a.b': 12\n    }\n  }, {\n    2: {\n      a: {\n        b: 12\n      }\n    }\n  }); // tested\n\n  exception({\n    x: []\n  }, {\n    $set: {\n      'x.2..a': 99\n    }\n  });\n  modify({\n    x: [null, null]\n  }, {\n    $set: {\n      'x.2.a': 1\n    }\n  }, {\n    x: [null, null, {\n      a: 1\n    }]\n  });\n  exception({\n    x: [null, null]\n  }, {\n    $set: {\n      'x.1.a': 1\n    }\n  }); // a.$.b\n\n  modifyWithQuery({\n    a: [{\n      x: 2\n    }, {\n      x: 4\n    }]\n  }, {\n    'a.x': 4\n  }, {\n    $set: {\n      'a.$.z': 9\n    }\n  }, {\n    a: [{\n      x: 2\n    }, {\n      x: 4,\n      z: 9\n    }]\n  });\n  exception({\n    a: [{\n      x: 2\n    }, {\n      x: 4\n    }]\n  }, {\n    $set: {\n      'a.$.z': 9\n    }\n  });\n  exceptionWithQuery({\n    a: [{\n      x: 2\n    }, {\n      x: 4\n    }],\n    b: 5\n  }, {\n    b: 5\n  }, {\n    $set: {\n      'a.$.z': 9\n    }\n  }); // can't have two $\n\n  exceptionWithQuery({\n    a: [{\n      x: [2]\n    }]\n  }, {\n    'a.x': 2\n  }, {\n    $set: {\n      'a.$.x.$': 9\n    }\n  });\n  modifyWithQuery({\n    a: [5, 6, 7]\n  }, {\n    a: 6\n  }, {\n    $set: {\n      'a.$': 9\n    }\n  }, {\n    a: [5, 9, 7]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [{\n        c: 9\n      }, {\n        c: 10\n      }]\n    }, {\n      b: {\n        c: 11\n      }\n    }]\n  }, {\n    'a.b.c': 10\n  }, {\n    $unset: {\n      'a.$.b': 1\n    }\n  }, {\n    a: [{}, {\n      b: {\n        c: 11\n      }\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [{\n        c: 9\n      }, {\n        c: 10\n      }]\n    }, {\n      b: {\n        c: 11\n      }\n    }]\n  }, {\n    'a.b.c': 11\n  }, {\n    $unset: {\n      'a.$.b': 1\n    }\n  }, {\n    a: [{\n      b: [{\n        c: 9\n      }, {\n        c: 10\n      }]\n    }, {}]\n  });\n  modifyWithQuery({\n    a: [1]\n  }, {\n    'a.0': 1\n  }, {\n    $set: {\n      'a.$': 5\n    }\n  }, {\n    a: [5]\n  });\n  modifyWithQuery({\n    a: [9]\n  }, {\n    a: {\n      $mod: [2, 1]\n    }\n  }, {\n    $set: {\n      'a.$': 5\n    }\n  }, {\n    a: [5]\n  }); // Negatives don't set '$'.\n\n  exceptionWithQuery({\n    a: [1]\n  }, {\n    $not: {\n      a: 2\n    }\n  }, {\n    $set: {\n      'a.$': 5\n    }\n  });\n  exceptionWithQuery({\n    a: [1]\n  }, {\n    'a.0': {\n      $ne: 2\n    }\n  }, {\n    $set: {\n      'a.$': 5\n    }\n  }); // One $or clause works.\n\n  modifyWithQuery({\n    a: [{\n      x: 2\n    }, {\n      x: 4\n    }]\n  }, {\n    $or: [{\n      'a.x': 4\n    }]\n  }, {\n    $set: {\n      'a.$.z': 9\n    }\n  }, {\n    a: [{\n      x: 2\n    }, {\n      x: 4,\n      z: 9\n    }]\n  }); // More $or clauses throw.\n\n  exceptionWithQuery({\n    a: [{\n      x: 2\n    }, {\n      x: 4\n    }]\n  }, {\n    $or: [{\n      'a.x': 4\n    }, {\n      'a.x': 4\n    }]\n  }, {\n    $set: {\n      'a.$.z': 9\n    }\n  }); // $and uses the last one.\n\n  modifyWithQuery({\n    a: [{\n      x: 1\n    }, {\n      x: 3\n    }]\n  }, {\n    $and: [{\n      'a.x': 1\n    }, {\n      'a.x': 3\n    }]\n  }, {\n    $set: {\n      'a.$.x': 5\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      x: 5\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      x: 1\n    }, {\n      x: 3\n    }]\n  }, {\n    $and: [{\n      'a.x': 3\n    }, {\n      'a.x': 1\n    }]\n  }, {\n    $set: {\n      'a.$.x': 5\n    }\n  }, {\n    a: [{\n      x: 5\n    }, {\n      x: 3\n    }]\n  }); // Same goes for the implicit AND of a document selector.\n\n  modifyWithQuery({\n    a: [{\n      x: 1\n    }, {\n      y: 3\n    }]\n  }, {\n    'a.x': 1,\n    'a.y': 3\n  }, {\n    $set: {\n      'a.$.z': 5\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      y: 3,\n      z: 5\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      x: 1\n    }, {\n      y: 1\n    }, {\n      x: 1,\n      y: 1\n    }]\n  }, {\n    a: {\n      $elemMatch: {\n        x: 1,\n        y: 1\n      }\n    }\n  }, {\n    $set: {\n      'a.$.x': 2\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      y: 1\n    }, {\n      x: 2,\n      y: 1\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [{\n        x: 1\n      }, {\n        y: 1\n      }, {\n        x: 1,\n        y: 1\n      }]\n    }]\n  }, {\n    'a.b': {\n      $elemMatch: {\n        x: 1,\n        y: 1\n      }\n    }\n  }, {\n    $set: {\n      'a.$.b': 3\n    }\n  }, {\n    a: [{\n      b: 3\n    }]\n  }); // with $near, make sure it does not find the closest one (#3599)\n\n  modifyWithQuery({\n    a: []\n  }, {\n    'a.b': {\n      $near: [5, 5]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: []\n  });\n  modifyWithQuery({\n    a: [{\n      b: [[3, 3], [4, 4]]\n    }]\n  }, {\n    'a.b': {\n      $near: [5, 5]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      b: 'k'\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [1, 1]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  }, {\n    'a.b': {\n      $near: [5, 5]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [1, 1]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  }, {\n    'a.b': {\n      $near: [9, 9],\n      $maxDistance: 1\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [1, 1]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  }, {\n    'a.b': {\n      $near: [9, 9]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [9, 9]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  }, {\n    'a.b': {\n      $near: [9, 9]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [9, 9]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      b: [4, 3]\n    }, {\n      c: [1, 1]\n    }]\n  }, {\n    'a.c': {\n      $near: [1, 1]\n    }\n  }, {\n    $set: {\n      'a.$.c': 'k'\n    }\n  }, {\n    a: [{\n      c: 'k',\n      b: [4, 3]\n    }, {\n      c: [1, 1]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      c: [9, 9]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [1, 1]\n    }]\n  }, {\n    'a.b': {\n      $near: [1, 1]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      c: [9, 9],\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [1, 1]\n    }]\n  });\n  modifyWithQuery({\n    a: [{\n      c: [9, 9],\n      b: [4, 3]\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [1, 1]\n    }]\n  }, {\n    'a.b': {\n      $near: [1, 1]\n    }\n  }, {\n    $set: {\n      'a.$.b': 'k'\n    }\n  }, {\n    a: [{\n      c: [9, 9],\n      b: 'k'\n    }, {\n      b: [[3, 3], [4, 4]]\n    }, {\n      b: [1, 1]\n    }]\n  }); // $inc\n\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $inc: {\n      a: 10\n    }\n  }, {\n    a: 11,\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $inc: {\n      c: 10\n    }\n  }, {\n    a: 1,\n    b: 2,\n    c: 10\n  });\n  exception({\n    a: 1\n  }, {\n    $inc: {\n      a: '10'\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $inc: {\n      a: true\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $inc: {\n      a: [10]\n    }\n  });\n  exception({\n    a: '1'\n  }, {\n    $inc: {\n      a: 10\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $inc: {\n      a: 10\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $inc: {\n      a: 10\n    }\n  });\n  exception({\n    a: false\n  }, {\n    $inc: {\n      a: 10\n    }\n  });\n  exception({\n    a: null\n  }, {\n    $inc: {\n      a: 10\n    }\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $inc: {\n      'a.1': 10\n    }\n  }, {\n    a: [1, 12]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $inc: {\n      'a.2': 10\n    }\n  }, {\n    a: [1, 2, 10]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $inc: {\n      'a.3': 10\n    }\n  }, {\n    a: [1, 2, null, 10]\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $inc: {\n      'a.b': 10\n    }\n  }, {\n    a: {\n      b: 12\n    }\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $inc: {\n      'a.c': 10\n    }\n  }, {\n    a: {\n      b: 2,\n      c: 10\n    }\n  });\n  exception({}, {\n    $inc: {\n      _id: 1\n    }\n  }); // $currentDate\n\n  modify({}, {\n    $currentDate: {\n      a: true\n    }\n  }, function (result, msg) {\n    test.instanceOf(result.a, Date, msg);\n  });\n  modify({}, {\n    $currentDate: {\n      a: {\n        $type: 'date'\n      }\n    }\n  }, function (result, msg) {\n    test.instanceOf(result.a, Date, msg);\n  });\n  exception({}, {\n    $currentDate: {\n      a: false\n    }\n  });\n  exception({}, {\n    $currentDate: {\n      a: {}\n    }\n  });\n  exception({}, {\n    $currentDate: {\n      a: {\n        $type: 'timestamp'\n      }\n    }\n  }); // $min\n\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $min: {\n      b: 1\n    }\n  }, {\n    a: 1,\n    b: 1\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $min: {\n      b: 3\n    }\n  }, {\n    a: 1,\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $min: {\n      c: 10\n    }\n  }, {\n    a: 1,\n    b: 2,\n    c: 10\n  });\n  exception({\n    a: 1\n  }, {\n    $min: {\n      a: '10'\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $min: {\n      a: true\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $min: {\n      a: [10]\n    }\n  });\n  exception({\n    a: '1'\n  }, {\n    $min: {\n      a: 10\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $min: {\n      a: 10\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $min: {\n      a: 10\n    }\n  });\n  exception({\n    a: false\n  }, {\n    $min: {\n      a: 10\n    }\n  });\n  exception({\n    a: null\n  }, {\n    $min: {\n      a: 10\n    }\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $min: {\n      'a.1': 1\n    }\n  }, {\n    a: [1, 1]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $min: {\n      'a.1': 3\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $min: {\n      'a.2': 10\n    }\n  }, {\n    a: [1, 2, 10]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $min: {\n      'a.3': 10\n    }\n  }, {\n    a: [1, 2, null, 10]\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $min: {\n      'a.b': 1\n    }\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $min: {\n      'a.c': 10\n    }\n  }, {\n    a: {\n      b: 2,\n      c: 10\n    }\n  });\n  exception({}, {\n    $min: {\n      _id: 1\n    }\n  }); // $max\n\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $max: {\n      b: 1\n    }\n  }, {\n    a: 1,\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $max: {\n      b: 3\n    }\n  }, {\n    a: 1,\n    b: 3\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $max: {\n      c: 10\n    }\n  }, {\n    a: 1,\n    b: 2,\n    c: 10\n  });\n  exception({\n    a: 1\n  }, {\n    $max: {\n      a: '10'\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $max: {\n      a: true\n    }\n  });\n  exception({\n    a: 1\n  }, {\n    $max: {\n      a: [10]\n    }\n  });\n  exception({\n    a: '1'\n  }, {\n    $max: {\n      a: 10\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $max: {\n      a: 10\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $max: {\n      a: 10\n    }\n  });\n  exception({\n    a: false\n  }, {\n    $max: {\n      a: 10\n    }\n  });\n  exception({\n    a: null\n  }, {\n    $max: {\n      a: 10\n    }\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $max: {\n      'a.1': 3\n    }\n  }, {\n    a: [1, 3]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $max: {\n      'a.1': 1\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $max: {\n      'a.2': 10\n    }\n  }, {\n    a: [1, 2, 10]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $max: {\n      'a.3': 10\n    }\n  }, {\n    a: [1, 2, null, 10]\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $max: {\n      'a.b': 3\n    }\n  }, {\n    a: {\n      b: 3\n    }\n  });\n  modify({\n    a: {\n      b: 2\n    }\n  }, {\n    $max: {\n      'a.c': 10\n    }\n  }, {\n    a: {\n      b: 2,\n      c: 10\n    }\n  });\n  exception({}, {\n    $max: {\n      _id: 1\n    }\n  }); // $set\n\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $set: {\n      a: 10\n    }\n  }, {\n    a: 10,\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $set: {\n      c: 10\n    }\n  }, {\n    a: 1,\n    b: 2,\n    c: 10\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $set: {\n      a: {\n        c: 10\n      }\n    }\n  }, {\n    a: {\n      c: 10\n    },\n    b: 2\n  });\n  modify({\n    a: [1, 2],\n    b: 2\n  }, {\n    $set: {\n      a: [3, 4]\n    }\n  }, {\n    a: [3, 4],\n    b: 2\n  });\n  modify({\n    a: [1, 2, 3],\n    b: 2\n  }, {\n    $set: {\n      'a.1': [3, 4]\n    }\n  }, {\n    a: [1, [3, 4], 3],\n    b: 2\n  });\n  modify({\n    a: [1],\n    b: 2\n  }, {\n    $set: {\n      'a.1': 9\n    }\n  }, {\n    a: [1, 9],\n    b: 2\n  });\n  modify({\n    a: [1],\n    b: 2\n  }, {\n    $set: {\n      'a.2': 9\n    }\n  }, {\n    a: [1, null, 9],\n    b: 2\n  });\n  modify({\n    a: {\n      b: 1\n    }\n  }, {\n    $set: {\n      'a.c': 9\n    }\n  }, {\n    a: {\n      b: 1,\n      c: 9\n    }\n  });\n  modify({}, {\n    $set: {\n      'x._id': 4\n    }\n  }, {\n    x: {\n      _id: 4\n    }\n  }); // Changing _id is disallowed\n\n  exception({}, {\n    $set: {\n      _id: 4\n    }\n  });\n  exception({\n    _id: 1\n  }, {\n    $set: {\n      _id: 4\n    }\n  });\n  modify({\n    _id: 4\n  }, {\n    $set: {\n      _id: 4\n    }\n  }, {\n    _id: 4\n  }); // not-changing _id is not bad\n  // restricted field names\n\n  exception({\n    a: {}\n  }, {\n    $set: {\n      a: {\n        $a: 1\n      }\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $set: {\n      a: {\n        c: [{\n          b: {\n            $a: 1\n          }\n        }]\n      }\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $set: {\n      a: {\n        '\\0a': 1\n      }\n    }\n  });\n  exception({\n    a: {}\n  }, {\n    $set: {\n      a: {\n        'a.b': 1\n      }\n    }\n  }); // $unset\n\n  modify({}, {\n    $unset: {\n      a: 1\n    }\n  }, {});\n  modify({\n    a: 1\n  }, {\n    $unset: {\n      a: 1\n    }\n  }, {});\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: 1\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: 0\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: false\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: null\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: [1]\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: 1,\n    b: 2\n  }, {\n    $unset: {\n      a: {}\n    }\n  }, {\n    b: 2\n  });\n  modify({\n    a: {\n      b: 2,\n      c: 3\n    }\n  }, {\n    $unset: {\n      'a.b': 1\n    }\n  }, {\n    a: {\n      c: 3\n    }\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $unset: {\n      'a.1': 1\n    }\n  }, {\n    a: [1, null, 3]\n  }); // tested\n\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $unset: {\n      'a.2': 1\n    }\n  }, {\n    a: [1, 2, null]\n  }); // tested\n\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $unset: {\n      'a.x': 1\n    }\n  }, {\n    a: [1, 2, 3]\n  }); // tested\n\n  modify({\n    a: {\n      b: 1\n    }\n  }, {\n    $unset: {\n      'a.b.c.d': 1\n    }\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  modify({\n    a: {\n      b: 1\n    }\n  }, {\n    $unset: {\n      'a.x.c.d': 1\n    }\n  }, {\n    a: {\n      b: 1\n    }\n  });\n  modify({\n    a: {\n      b: {\n        c: 1\n      }\n    }\n  }, {\n    $unset: {\n      'a.b.c': 1\n    }\n  }, {\n    a: {\n      b: {}\n    }\n  });\n  exception({}, {\n    $unset: {\n      _id: 1\n    }\n  }); // $push\n\n  modify({}, {\n    $push: {\n      a: 1\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: []\n  }, {\n    $push: {\n      a: 1\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [1]\n  }, {\n    $push: {\n      a: 2\n    }\n  }, {\n    a: [1, 2]\n  });\n  exception({\n    a: true\n  }, {\n    $push: {\n      a: 1\n    }\n  });\n  modify({\n    a: [1]\n  }, {\n    $push: {\n      a: [2]\n    }\n  }, {\n    a: [1, [2]]\n  });\n  modify({\n    a: []\n  }, {\n    $push: {\n      'a.1': 99\n    }\n  }, {\n    a: [null, [99]]\n  }); // tested\n\n  modify({\n    a: {}\n  }, {\n    $push: {\n      'a.x': 99\n    }\n  }, {\n    a: {\n      x: [99]\n    }\n  });\n  modify({}, {\n    $push: {\n      a: {\n        $each: [1, 2, 3]\n      }\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: []\n  }, {\n    $push: {\n      a: {\n        $each: [1, 2, 3]\n      }\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: [true]\n  }, {\n    $push: {\n      a: {\n        $each: [1, 2, 3]\n      }\n    }\n  }, {\n    a: [true, 1, 2, 3]\n  });\n  modify({\n    a: [true]\n  }, {\n    $push: {\n      a: {\n        $each: [1, 2, 3],\n        $slice: -2\n      }\n    }\n  }, {\n    a: [2, 3]\n  });\n  modify({\n    a: [false, true]\n  }, {\n    $push: {\n      a: {\n        $each: [1],\n        $slice: -2\n      }\n    }\n  }, {\n    a: [true, 1]\n  });\n  modify({\n    a: [{\n      x: 3\n    }, {\n      x: 1\n    }]\n  }, {\n    $push: {\n      a: {\n        $each: [{\n          x: 4\n        }, {\n          x: 2\n        }],\n        $slice: -2,\n        $sort: {\n          x: 1\n        }\n      }\n    }\n  }, {\n    a: [{\n      x: 3\n    }, {\n      x: 4\n    }]\n  });\n  modify({}, {\n    $push: {\n      a: {\n        $each: [1, 2, 3],\n        $slice: 0\n      }\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [1, 2, 3],\n        $slice: 0\n      }\n    }\n  }, {\n    a: []\n  }); // $push with $position modifier\n  // No negative number for $position\n\n  exception({\n    a: []\n  }, {\n    $push: {\n      a: {\n        $each: [0],\n        $position: -1\n      }\n    }\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [0],\n        $position: 0\n      }\n    }\n  }, {\n    a: [0, 1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [-1, 0],\n        $position: 0\n      }\n    }\n  }, {\n    a: [-1, 0, 1, 2]\n  });\n  modify({\n    a: [1, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [2],\n        $position: 1\n      }\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: [1, 4]\n  }, {\n    $push: {\n      a: {\n        $each: [2, 3],\n        $position: 1\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [3],\n        $position: 3\n      }\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [3],\n        $position: 99\n      }\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $push: {\n      a: {\n        $each: [3],\n        $position: 99,\n        $slice: -2\n      }\n    }\n  }, {\n    a: [2, 3]\n  });\n  modify({\n    a: [{\n      x: 1\n    }, {\n      x: 2\n    }]\n  }, {\n    $push: {\n      a: {\n        $each: [{\n          x: 3\n        }],\n        $position: 0,\n        $sort: {\n          x: 1\n        },\n        $slice: -3\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      x: 2\n    }, {\n      x: 3\n    }]\n  });\n  modify({\n    a: [{\n      x: 1\n    }, {\n      x: 2\n    }]\n  }, {\n    $push: {\n      a: {\n        $each: [{\n          x: 3\n        }],\n        $position: 0,\n        $sort: {\n          x: 1\n        },\n        $slice: 0\n      }\n    }\n  }, {\n    a: []\n  }); // restricted field names\n\n  exception({}, {\n    $push: {\n      $a: 1\n    }\n  });\n  exception({}, {\n    $push: {\n      '\\0a': 1\n    }\n  });\n  exception({}, {\n    $push: {\n      a: {\n        $a: 1\n      }\n    }\n  });\n  exception({}, {\n    $push: {\n      a: {\n        $each: [{\n          $a: 1\n        }]\n      }\n    }\n  });\n  exception({}, {\n    $push: {\n      a: {\n        $each: [{\n          'a.b': 1\n        }]\n      }\n    }\n  });\n  exception({}, {\n    $push: {\n      a: {\n        $each: [{\n          '\\0a': 1\n        }]\n      }\n    }\n  });\n  modify({}, {\n    $push: {\n      a: {\n        $each: [{\n          '': 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      '': 1\n    }]\n  });\n  modify({}, {\n    $push: {\n      a: {\n        $each: [{\n          ' ': 1\n        }]\n      }\n    }\n  }, {\n    a: [{\n      ' ': 1\n    }]\n  });\n  exception({}, {\n    $push: {\n      a: {\n        $each: [{\n          '.': 1\n        }]\n      }\n    }\n  }); // #issue 5167\n  // $push $slice with positive numbers\n\n  modify({}, {\n    $push: {\n      a: {\n        $each: [],\n        $slice: 5\n      }\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [],\n        $slice: 1\n      }\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [4, 5],\n        $slice: 1\n      }\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [4, 5],\n        $slice: 2\n      }\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [4, 5],\n        $slice: 4\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [4, 5],\n        $slice: 5\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4, 5]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $push: {\n      a: {\n        $each: [4, 5],\n        $slice: 10\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4, 5]\n  }); // $pushAll\n\n  modify({}, {\n    $pushAll: {\n      a: [1]\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: []\n  }, {\n    $pushAll: {\n      a: [1]\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: [2]\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({}, {\n    $pushAll: {\n      a: [1, 2]\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: []\n  }, {\n    $pushAll: {\n      a: [1, 2]\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: [2, 3]\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({}, {\n    $pushAll: {\n      a: []\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: []\n  }, {\n    $pushAll: {\n      a: []\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: []\n    }\n  }, {\n    a: [1]\n  });\n  exception({\n    a: true\n  }, {\n    $pushAll: {\n      a: [1]\n    }\n  });\n  exception({\n    a: []\n  }, {\n    $pushAll: {\n      a: 1\n    }\n  });\n  modify({\n    a: []\n  }, {\n    $pushAll: {\n      'a.1': [99]\n    }\n  }, {\n    a: [null, [99]]\n  });\n  modify({\n    a: []\n  }, {\n    $pushAll: {\n      'a.1': []\n    }\n  }, {\n    a: [null, []]\n  });\n  modify({\n    a: {}\n  }, {\n    $pushAll: {\n      'a.x': [99]\n    }\n  }, {\n    a: {\n      x: [99]\n    }\n  });\n  modify({\n    a: {}\n  }, {\n    $pushAll: {\n      'a.x': []\n    }\n  }, {\n    a: {\n      x: []\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: [{\n        $a: 1\n      }]\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: [{\n        '\\0a': 1\n      }]\n    }\n  });\n  exception({\n    a: [1]\n  }, {\n    $pushAll: {\n      a: [{\n        'a.b': 1\n      }]\n    }\n  }); // $addToSet\n\n  modify({}, {\n    $addToSet: {\n      a: 1\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: []\n  }, {\n    $addToSet: {\n      a: 1\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [1]\n  }, {\n    $addToSet: {\n      a: 2\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: 1\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: 2\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: 3\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  exception({\n    a: true\n  }, {\n    $addToSet: {\n      a: 1\n    }\n  });\n  modify({\n    a: [1]\n  }, {\n    $addToSet: {\n      a: [2]\n    }\n  }, {\n    a: [1, [2]]\n  });\n  modify({}, {\n    $addToSet: {\n      a: {\n        x: 1\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }]\n  });\n  modify({\n    a: [{\n      x: 1\n    }]\n  }, {\n    $addToSet: {\n      a: {\n        x: 1\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }]\n  });\n  modify({\n    a: [{\n      x: 1\n    }]\n  }, {\n    $addToSet: {\n      a: {\n        x: 2\n      }\n    }\n  }, {\n    a: [{\n      x: 1\n    }, {\n      x: 2\n    }]\n  });\n  modify({\n    a: [{\n      x: 1,\n      y: 2\n    }]\n  }, {\n    $addToSet: {\n      a: {\n        x: 1,\n        y: 2\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      y: 2\n    }]\n  });\n  modify({\n    a: [{\n      x: 1,\n      y: 2\n    }]\n  }, {\n    $addToSet: {\n      a: {\n        y: 2,\n        x: 1\n      }\n    }\n  }, {\n    a: [{\n      x: 1,\n      y: 2\n    }, {\n      y: 2,\n      x: 1\n    }]\n  });\n  modify({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, 4]\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4]\n  });\n  modify({}, {\n    $addToSet: {\n      a: {\n        $each: []\n      }\n    }\n  }, {\n    a: []\n  });\n  modify({}, {\n    $addToSet: {\n      a: {\n        $each: [1]\n      }\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: []\n  }, {\n    $addToSet: {\n      'a.1': 99\n    }\n  }, {\n    a: [null, [99]]\n  });\n  modify({\n    a: {}\n  }, {\n    $addToSet: {\n      'a.x': 99\n    }\n  }, {\n    a: {\n      x: [99]\n    }\n  }); // invalid field names\n\n  exception({}, {\n    $addToSet: {\n      a: {\n        $b: 1\n      }\n    }\n  });\n  exception({}, {\n    $addToSet: {\n      a: {\n        'a.b': 1\n      }\n    }\n  });\n  exception({}, {\n    $addToSet: {\n      a: {\n        'a.': 1\n      }\n    }\n  });\n  exception({}, {\n    $addToSet: {\n      a: {\n        \"\\0a\": 1\n      }\n    }\n  });\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, {\n          $a: 1\n        }]\n      }\n    }\n  });\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, {\n          '\\0a': 1\n        }]\n      }\n    }\n  });\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, [{\n          $a: 1\n        }]]\n      }\n    }\n  });\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, [{\n          b: {\n            c: [{\n              a: 1\n            }, {\n              'd.s': 2\n            }]\n          }\n        }]]\n      }\n    }\n  });\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        b: [3, 1, [{\n          b: {\n            c: [{\n              a: 1\n            }, {\n              'd.s': 2\n            }]\n          }\n        }]]\n      }\n    }\n  }); // $each is first element and thus an operator\n\n  modify({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        $each: [3, 1, 4],\n        b: 12\n      }\n    }\n  }, {\n    a: [1, 2, 3, 4]\n  }); // this should fail because $each is now a field name (not first in object) and thus invalid field name with $\n\n  exception({\n    a: [1, 2]\n  }, {\n    $addToSet: {\n      a: {\n        b: 12,\n        $each: [3, 1, 4]\n      }\n    }\n  }); // $pop\n\n  modify({}, {\n    $pop: {\n      a: 1\n    }\n  }, {}); // tested\n\n  modify({}, {\n    $pop: {\n      a: -1\n    }\n  }, {}); // tested\n\n  modify({\n    a: []\n  }, {\n    $pop: {\n      a: 1\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: []\n  }, {\n    $pop: {\n      a: -1\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: 1\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: 10\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: 0.001\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: 0\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: 'stuff'\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: -1\n    }\n  }, {\n    a: [2, 3]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: -10\n    }\n  }, {\n    a: [2, 3]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pop: {\n      a: -0.001\n    }\n  }, {\n    a: [2, 3]\n  });\n  exception({\n    a: true\n  }, {\n    $pop: {\n      a: 1\n    }\n  });\n  exception({\n    a: true\n  }, {\n    $pop: {\n      a: -1\n    }\n  });\n  modify({\n    a: []\n  }, {\n    $pop: {\n      'a.1': 1\n    }\n  }, {\n    a: []\n  }); // tested\n\n  modify({\n    a: [1, [2, 3], 4]\n  }, {\n    $pop: {\n      'a.1': 1\n    }\n  }, {\n    a: [1, [2], 4]\n  });\n  modify({\n    a: {}\n  }, {\n    $pop: {\n      'a.x': 1\n    }\n  }, {\n    a: {}\n  }); // tested\n\n  modify({\n    a: {\n      x: [2, 3]\n    }\n  }, {\n    $pop: {\n      'a.x': 1\n    }\n  }, {\n    a: {\n      x: [2]\n    }\n  }); // $pull\n\n  modify({}, {\n    $pull: {\n      a: 1\n    }\n  }, {});\n  modify({}, {\n    $pull: {\n      'a.x': 1\n    }\n  }, {});\n  modify({\n    a: {}\n  }, {\n    $pull: {\n      'a.x': 1\n    }\n  }, {\n    a: {}\n  });\n  exception({\n    a: true\n  }, {\n    $pull: {\n      a: 1\n    }\n  });\n  modify({\n    a: [2, 1, 2]\n  }, {\n    $pull: {\n      a: 1\n    }\n  }, {\n    a: [2, 2]\n  });\n  modify({\n    a: [2, 1, 2]\n  }, {\n    $pull: {\n      a: 2\n    }\n  }, {\n    a: [1]\n  });\n  modify({\n    a: [2, 1, 2]\n  }, {\n    $pull: {\n      a: 3\n    }\n  }, {\n    a: [2, 1, 2]\n  });\n  modify({\n    a: [1, null, 2, null]\n  }, {\n    $pull: {\n      a: null\n    }\n  }, {\n    a: [1, 2]\n  });\n  modify({\n    a: []\n  }, {\n    $pull: {\n      a: 3\n    }\n  }, {\n    a: []\n  });\n  modify({\n    a: [[2], [2, 1], [3]]\n  }, {\n    $pull: {\n      a: [2, 1]\n    }\n  }, {\n    a: [[2], [3]]\n  }); // tested\n\n  modify({\n    a: [{\n      b: 1,\n      c: 2\n    }, {\n      b: 2,\n      c: 2\n    }]\n  }, {\n    $pull: {\n      a: {\n        b: 1\n      }\n    }\n  }, {\n    a: [{\n      b: 2,\n      c: 2\n    }]\n  });\n  modify({\n    a: [{\n      b: 1,\n      c: 2\n    }, {\n      b: 2,\n      c: 2\n    }]\n  }, {\n    $pull: {\n      a: {\n        c: 2\n      }\n    }\n  }, {\n    a: []\n  }); // XXX implement this functionality!\n  // probably same refactoring as $elemMatch?\n  // modify({a: [1, 2, 3, 4]}, {$pull: {$gt: 2}}, {a: [1,2]}); fails!\n  // $pullAll\n\n  modify({}, {\n    $pullAll: {\n      a: [1]\n    }\n  }, {});\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pullAll: {\n      a: []\n    }\n  }, {\n    a: [1, 2, 3]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pullAll: {\n      a: [2]\n    }\n  }, {\n    a: [1, 3]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pullAll: {\n      a: [2, 1]\n    }\n  }, {\n    a: [3]\n  });\n  modify({\n    a: [1, 2, 3]\n  }, {\n    $pullAll: {\n      a: [1, 2]\n    }\n  }, {\n    a: [3]\n  });\n  modify({}, {\n    $pullAll: {\n      'a.b.c': [2]\n    }\n  }, {});\n  exception({\n    a: true\n  }, {\n    $pullAll: {\n      a: [1]\n    }\n  });\n  exception({\n    a: [1, 2, 3]\n  }, {\n    $pullAll: {\n      a: 1\n    }\n  });\n  modify({\n    x: [{\n      a: 1\n    }, {\n      a: 1,\n      b: 2\n    }]\n  }, {\n    $pullAll: {\n      x: [{\n        a: 1\n      }]\n    }\n  }, {\n    x: [{\n      a: 1,\n      b: 2\n    }]\n  }); // $rename\n\n  modify({}, {\n    $rename: {\n      a: 'b'\n    }\n  }, {});\n  modify({\n    a: [12]\n  }, {\n    $rename: {\n      a: 'b'\n    }\n  }, {\n    b: [12]\n  });\n  modify({\n    a: {\n      b: 12\n    }\n  }, {\n    $rename: {\n      a: 'c'\n    }\n  }, {\n    c: {\n      b: 12\n    }\n  });\n  modify({\n    a: {\n      b: 12\n    }\n  }, {\n    $rename: {\n      'a.b': 'a.c'\n    }\n  }, {\n    a: {\n      c: 12\n    }\n  });\n  modify({\n    a: {\n      b: 12\n    }\n  }, {\n    $rename: {\n      'a.b': 'x'\n    }\n  }, {\n    a: {},\n    x: 12\n  }); // tested\n\n  modify({\n    a: {\n      b: 12\n    }\n  }, {\n    $rename: {\n      'a.b': 'q.r'\n    }\n  }, {\n    a: {},\n    q: {\n      r: 12\n    }\n  });\n  modify({\n    a: {\n      b: 12\n    }\n  }, {\n    $rename: {\n      'a.b': 'q.2.r'\n    }\n  }, {\n    a: {},\n    q: {\n      2: {\n        r: 12\n      }\n    }\n  });\n  modify({\n    a: {\n      b: 12\n    },\n    q: {}\n  }, {\n    $rename: {\n      'a.b': 'q.2.r'\n    }\n  }, {\n    a: {},\n    q: {\n      2: {\n        r: 12\n      }\n    }\n  });\n  exception({\n    a: {\n      b: 12\n    },\n    q: []\n  }, {\n    $rename: {\n      'a.b': 'q.2'\n    }\n  }); // tested\n\n  exception({\n    a: {\n      b: 12\n    },\n    q: []\n  }, {\n    $rename: {\n      'a.b': 'q.2.r'\n    }\n  }); // tested\n  // These strange MongoDB behaviors throw.\n  // modify({a: {b: 12}, q: []}, {$rename: {'q.1': 'x'}},\n  //        {a: {b: 12}, x: []}); // tested\n  // modify({a: {b: 12}, q: []}, {$rename: {'q.1.j': 'x'}},\n  //        {a: {b: 12}, x: []}); // tested\n\n  exception({}, {\n    $rename: {\n      a: 'a'\n    }\n  });\n  exception({}, {\n    $rename: {\n      'a.b': 'a.b'\n    }\n  });\n  modify({\n    a: 12,\n    b: 13\n  }, {\n    $rename: {\n      a: 'b'\n    }\n  }, {\n    b: 12\n  });\n  exception({\n    a: [12]\n  }, {\n    $rename: {\n      a: '$b'\n    }\n  });\n  exception({\n    a: [12]\n  }, {\n    $rename: {\n      a: '\\0a'\n    }\n  }); // $setOnInsert\n\n  modify({\n    a: 0\n  }, {\n    $setOnInsert: {\n      a: 12\n    }\n  }, {\n    a: 0\n  });\n  upsert({\n    a: 12\n  }, {\n    $setOnInsert: {\n      b: 12\n    }\n  }, {\n    a: 12,\n    b: 12\n  });\n  upsert({\n    a: 12\n  }, {\n    $setOnInsert: {\n      _id: 'test'\n    }\n  }, {\n    _id: 'test',\n    a: 12\n  });\n  upsert({\n    'a.b': 10\n  }, {\n    $setOnInsert: {\n      a: {\n        b: 10,\n        c: 12\n      }\n    }\n  }, {\n    a: {\n      b: 10,\n      c: 12\n    }\n  });\n  upsert({\n    'a.b': 10\n  }, {\n    $setOnInsert: {\n      c: 12\n    }\n  }, {\n    a: {\n      b: 10\n    },\n    c: 12\n  });\n  upsert({\n    _id: 'test'\n  }, {\n    $setOnInsert: {\n      c: 12\n    }\n  }, {\n    _id: 'test',\n    c: 12\n  });\n  upsert('test', {\n    $setOnInsert: {\n      c: 12\n    }\n  }, {\n    _id: 'test',\n    c: 12\n  });\n  upsertException({\n    a: 0\n  }, {\n    $setOnInsert: {\n      $a: 12\n    }\n  });\n  upsertException({\n    a: 0\n  }, {\n    $setOnInsert: {\n      '\\0a': 12\n    }\n  });\n  upsert({\n    a: 0\n  }, {\n    $setOnInsert: {\n      b: {\n        a: 1\n      }\n    }\n  }, {\n    a: 0,\n    b: {\n      a: 1\n    }\n  });\n  upsertException({\n    a: 0\n  }, {\n    $setOnInsert: {\n      b: {\n        $a: 1\n      }\n    }\n  });\n  upsertException({\n    a: 0\n  }, {\n    $setOnInsert: {\n      b: {\n        'a.b': 1\n      }\n    }\n  });\n  upsertException({\n    a: 0\n  }, {\n    $setOnInsert: {\n      b: {\n        '\\0a': 1\n      }\n    }\n  }); // Test for https://github.com/meteor/meteor/issues/8775.\n\n  upsert({\n    a: {\n      $exists: true\n    }\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    a: 123\n  }); // Tests for https://github.com/meteor/meteor/issues/8794.\n\n  var testObjectId = new MongoID.ObjectID();\n  upsert({\n    _id: testObjectId\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    _id: testObjectId,\n    a: 123\n  });\n  upsert({\n    someOtherId: testObjectId\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    someOtherId: testObjectId,\n    a: 123\n  });\n  upsert({\n    a: {\n      $eq: testObjectId\n    }\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    a: 123\n  });\n  var testDate = new Date('2017-01-01');\n  upsert({\n    someDate: testDate\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    someDate: testDate,\n    a: 123\n  });\n  upsert({\n    a: Object.create(null, {\n      $exists: {\n        writable: true,\n        configurable: true,\n        value: true\n      }\n    })\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    a: 123\n  });\n  upsert({\n    foo: {\n      $exists: true,\n      $type: 2\n    }\n  }, {\n    $setOnInsert: {\n      bar: 'baz'\n    }\n  }, {\n    bar: 'baz'\n  });\n  upsert({\n    foo: {}\n  }, {\n    $setOnInsert: {\n      bar: 'baz'\n    }\n  }, {\n    foo: {},\n    bar: 'baz'\n  }); // Tests for https://github.com/meteor/meteor/issues/8806\n\n  upsert({\n    \"a\": {\n      \"b\": undefined,\n      \"c\": null\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": {\n      \"b\": undefined,\n      \"c\": null\n    },\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"a\": {\n      \"$eq\": \"bar\"\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  }); // $all with 1 statement is similar to $eq\n\n  upsert({\n    \"a\": {\n      \"$all\": [\"bar\"]\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"a\": {\n      \"$eq\": \"bar\"\n    },\n    \"b\": \"baz\"\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"b\": \"baz\",\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"a\": {\n      \"$exists\": true\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"a\": {\n      \"$exists\": true,\n      \"$eq\": \"foo\"\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"foo\",\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"a\": {\n      \"$gt\": 3,\n      \"$eq\": 2\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": 2,\n    \"c\": \"foo\"\n  }); // $and\n\n  upsert({\n    \"$and\": [{\n      \"a\": {\n        \"$eq\": \"bar\"\n      }\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"$and\": [{\n      \"a\": {\n        \"$all\": [\"bar\"]\n      }\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  });\n  upsert({\n    \"$and\": [{\n      \"a\": {\n        \"$all\": [\"bar\"]\n      }\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  }); // $or with one statement is handled similar to $and\n\n  upsert({\n    \"$or\": [{\n      \"a\": \"bar\"\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": \"bar\",\n    \"c\": \"foo\"\n  }); // $or with multiple statements is ignored\n\n  upsert({\n    \"$or\": [{\n      \"a\": \"bar\"\n    }, {\n      \"b\": \"baz\"\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"c\": \"foo\"\n  }); // Negative logical operators are ignored\n\n  upsert({\n    \"$nor\": [{\n      \"a\": \"bar\"\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"c\": \"foo\"\n  }); // Filter out empty objects after filtering out operators\n\n  upsert({\n    \"a\": {\n      \"$exists\": true\n    }\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"c\": \"foo\"\n  }); // But leave actual empty objects\n\n  upsert({\n    \"a\": {}\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": {},\n    \"c\": \"foo\"\n  }); // Also filter out shorthand regexp notation\n\n  upsert({\n    \"a\": /a/\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"c\": \"foo\"\n  }); // Test nested fields\n\n  upsert({\n    \"$and\": [{\n      \"a.a\": \"foo\"\n    }, {\n      \"$or\": [{\n        \"a.b\": \"baz\"\n      }]\n    }]\n  }, {\n    \"$set\": {\n      \"c\": \"foo\"\n    }\n  }, {\n    \"a\": {\n      \"a\": \"foo\",\n      \"b\": \"baz\"\n    },\n    \"c\": \"foo\"\n  }); // Test for https://github.com/meteor/meteor/issues/5294\n\n  upsert({\n    \"a\": {\n      \"$ne\": 444\n    }\n  }, {\n    \"$push\": {\n      \"a\": 123\n    }\n  }, {\n    \"a\": [123]\n  }); // Mod takes precedence over query\n\n  upsert({\n    \"a\": \"foo\"\n  }, {\n    \"a\": \"bar\"\n  }, {\n    \"a\": \"bar\"\n  });\n  upsert({\n    \"a\": \"foo\"\n  }, {\n    \"$set\": {\n      \"a\": \"bar\"\n    }\n  }, {\n    \"a\": \"bar\"\n  }); // Replacement can take _id from query\n\n  upsert({\n    \"_id\": \"foo\",\n    \"foo\": \"bar\"\n  }, {\n    \"bar\": \"foo\"\n  }, {\n    \"_id\": \"foo\",\n    \"bar\": \"foo\"\n  }); // Replacement update keeps _id\n\n  upsertUpdate({\n    \"_id\": \"foo\",\n    \"bar\": \"baz\"\n  }, {\n    \"_id\": \"foo\"\n  }, {\n    \"bar\": \"crow\"\n  }, {\n    \"_id\": \"foo\",\n    \"bar\": \"crow\"\n  }); // Test for https://github.com/meteor/meteor/issues/9167\n\n  upsert({\n    key: 123,\n    keyName: '321'\n  }, {\n    $set: {\n      name: 'Todo'\n    }\n  }, {\n    key: 123,\n    keyName: '321',\n    name: 'Todo'\n  });\n  upsertException({\n    key: 123,\n    \"key.name\": '321'\n  }, {\n    $set: {}\n  }); // Nested fields don't work with literal objects\n\n  upsertException({\n    \"a\": {},\n    \"a.b\": \"foo\"\n  }, {}); // You can't have an ambiguious ID\n\n  upsertException({\n    \"_id\": \"foo\"\n  }, {\n    \"_id\": \"bar\"\n  });\n  upsertException({\n    \"_id\": \"foo\"\n  }, {\n    \"$set\": {\n      \"_id\": \"bar\"\n    }\n  }); // You can't set the same field twice\n\n  upsertException({\n    \"$and\": [{\n      \"a\": \"foo\"\n    }, {\n      \"a\": \"foo\"\n    }]\n  }, {}); //not even with same value\n\n  upsertException({\n    \"a\": {\n      \"$all\": [\"foo\", \"bar\"]\n    }\n  }, {});\n  upsertException({\n    \"$and\": [{\n      \"a\": {\n        \"$eq\": \"foo\"\n      }\n    }, {\n      \"$or\": [{\n        \"a\": {\n          \"$all\": [\"bar\"]\n        }\n      }]\n    }]\n  }, {}); // You can't have nested dotted fields\n\n  upsertException({\n    \"a\": {\n      \"foo.bar\": \"baz\"\n    }\n  }, {}); // You can't have dollar-prefixed fields above the first level (logical operators not counted)\n\n  upsertException({\n    \"a\": {\n      \"a\": {\n        \"$eq\": \"foo\"\n      }\n    }\n  }, {});\n  upsertException({\n    \"a\": {\n      \"a\": {\n        \"$exists\": true\n      }\n    }\n  }, {}); // You can't mix operators with other fields\n\n  upsertException({\n    \"a\": {\n      \"$eq\": \"bar\",\n      \"b\": \"foo\"\n    }\n  }, {});\n  upsertException({\n    \"a\": {\n      \"b\": \"foo\",\n      \"$eq\": \"bar\"\n    }\n  }, {});\n  var mongoIdForUpsert = new MongoID.ObjectID('44915733af80844fa1cef07a');\n  upsert({\n    _id: mongoIdForUpsert\n  }, {\n    $setOnInsert: {\n      a: 123\n    }\n  }, {\n    a: 123\n  }); // Test for https://github.com/meteor/meteor/issues/7758\n\n  upsert({\n    n_id: mongoIdForUpsert,\n    c_n: \"bar\"\n  }, {\n    $set: {\n      t_t_o: \"foo\"\n    }\n  }, {\n    n_id: mongoIdForUpsert,\n    t_t_o: \"foo\",\n    c_n: \"bar\"\n  });\n  exception({}, {\n    $set: {\n      _id: 'bad'\n    }\n  }); // $bit\n  // unimplemented\n  // XXX test case sensitivity of modops\n  // XXX for each (most) modop, test that it performs a deep copy\n}); // XXX test update() (selecting docs, multi, upsert..)\n\nTinytest.add('minimongo - observe ordered', function (test) {\n  var operations = [];\n  var cbs = log_callbacks(operations);\n  var handle = void 0;\n  var c = new LocalCollection();\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    }\n  }).observe(cbs);\n  test.isTrue(handle.collection === c);\n  c.insert({\n    _id: 'foo',\n    a: 1\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 0, null]);\n  c.update({\n    a: 1\n  }, {\n    $set: {\n      a: 2\n    }\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 2\n  }, 0, {\n    a: 1\n  }]);\n  c.insert({\n    a: 10\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 10\n  }, 1, null]);\n  c.update({}, {\n    $inc: {\n      a: 1\n    }\n  }, {\n    multi: true\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3\n  }, 0, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['changed', {\n    a: 11\n  }, 1, {\n    a: 10\n  }]);\n  c.update({\n    a: 11\n  }, {\n    a: 1\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 1\n  }, 1, {\n    a: 11\n  }]);\n  test.equal(operations.shift(), ['moved', {\n    a: 1\n  }, 1, 0, 'foo']);\n  c.remove({\n    a: 2\n  });\n  test.equal(operations.shift(), undefined);\n  c.remove({\n    a: 3\n  });\n  test.equal(operations.shift(), ['removed', 'foo', 1, {\n    a: 3\n  }]); // test stop\n\n  handle.stop();\n  var idA2 = Random.id();\n  c.insert({\n    _id: idA2,\n    a: 2\n  });\n  test.equal(operations.shift(), undefined); // test initial inserts (and backwards sort)\n\n  handle = c.find({}, {\n    sort: {\n      a: -1\n    }\n  }).observe(cbs);\n  test.equal(operations.shift(), ['added', {\n    a: 2\n  }, 0, null]);\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 1, null]);\n  handle.stop(); // test _suppress_initial\n\n  handle = c.find({}, {\n    sort: {\n      a: -1\n    }\n  }).observe(Object.assign({\n    _suppress_initial: true\n  }, cbs));\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    a: 100\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 100\n  }, 0, idA2]);\n  handle.stop(); // test skip and limit.\n\n  c.remove({});\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    },\n    skip: 1,\n    limit: 2\n  }).observe(cbs);\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    a: 1\n  });\n  test.equal(operations.shift(), undefined);\n  c.insert({\n    _id: 'foo',\n    a: 2\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 2\n  }, 0, null]);\n  c.insert({\n    a: 3\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 3\n  }, 1, null]);\n  c.insert({\n    a: 4\n  });\n  test.equal(operations.shift(), undefined);\n  c.update({\n    a: 1\n  }, {\n    a: 0\n  });\n  test.equal(operations.shift(), undefined);\n  c.update({\n    a: 0\n  }, {\n    a: 5\n  });\n  test.equal(operations.shift(), ['removed', 'foo', 0, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['added', {\n    a: 4\n  }, 1, null]);\n  c.update({\n    a: 3\n  }, {\n    a: 3.5\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3.5\n  }, 0, {\n    a: 3\n  }]);\n  handle.stop(); // test observe limit with pre-existing docs\n\n  c.remove({});\n  c.insert({\n    a: 1\n  });\n  c.insert({\n    _id: 'two',\n    a: 2\n  });\n  c.insert({\n    a: 3\n  });\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    },\n    limit: 2\n  }).observe(cbs);\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 0, null]);\n  test.equal(operations.shift(), ['added', {\n    a: 2\n  }, 1, null]);\n  test.equal(operations.shift(), undefined);\n  c.remove({\n    a: 2\n  });\n  test.equal(operations.shift(), ['removed', 'two', 1, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['added', {\n    a: 3\n  }, 1, null]);\n  test.equal(operations.shift(), undefined);\n  handle.stop(); // test _no_indices\n\n  c.remove({});\n  handle = c.find({}, {\n    sort: {\n      a: 1\n    }\n  }).observe(Object.assign(cbs, {\n    _no_indices: true\n  }));\n  c.insert({\n    _id: 'foo',\n    a: 1\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, -1, null]);\n  c.update({\n    a: 1\n  }, {\n    $set: {\n      a: 2\n    }\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 2\n  }, -1, {\n    a: 1\n  }]);\n  c.insert({\n    a: 10\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 10\n  }, -1, null]);\n  c.update({}, {\n    $inc: {\n      a: 1\n    }\n  }, {\n    multi: true\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 3\n  }, -1, {\n    a: 2\n  }]);\n  test.equal(operations.shift(), ['changed', {\n    a: 11\n  }, -1, {\n    a: 10\n  }]);\n  c.update({\n    a: 11\n  }, {\n    a: 1\n  });\n  test.equal(operations.shift(), ['changed', {\n    a: 1\n  }, -1, {\n    a: 11\n  }]);\n  test.equal(operations.shift(), ['moved', {\n    a: 1\n  }, -1, -1, 'foo']);\n  c.remove({\n    a: 2\n  });\n  test.equal(operations.shift(), undefined);\n  c.remove({\n    a: 3\n  });\n  test.equal(operations.shift(), ['removed', 'foo', -1, {\n    a: 3\n  }]);\n  handle.stop();\n});\n[true, false].forEach(function (ordered) {\n  Tinytest.add(\"minimongo - observe ordered: \" + ordered, function (test) {\n    var c = new LocalCollection();\n    var ev = '';\n\n    var makecb = function (tag) {\n      var ret = {};\n      ['added', 'changed', 'removed'].forEach(function (fn) {\n        var fnName = ordered ? fn + \"At\" : fn;\n\n        ret[fnName] = function (doc) {\n          ev = ev + fn.substr(0, 1) + tag + doc._id + \"_\";\n        };\n      });\n      return ret;\n    };\n\n    var expect = function (x) {\n      test.equal(ev, x);\n      ev = '';\n    };\n\n    c.insert({\n      _id: 1,\n      name: 'strawberry',\n      tags: ['fruit', 'red', 'squishy']\n    });\n    c.insert({\n      _id: 2,\n      name: 'apple',\n      tags: ['fruit', 'red', 'hard']\n    });\n    c.insert({\n      _id: 3,\n      name: 'rose',\n      tags: ['flower', 'red', 'squishy']\n    }); // This should work equally well for ordered and unordered observations\n    // (because the callbacks don't look at indices and there's no 'moved'\n    // callback).\n\n    var handle = c.find({\n      tags: 'flower'\n    }).observe(makecb('a'));\n    expect('aa3_');\n    c.update({\n      name: 'rose'\n    }, {\n      $set: {\n        tags: ['bloom', 'red', 'squishy']\n      }\n    });\n    expect('ra3_');\n    c.update({\n      name: 'rose'\n    }, {\n      $set: {\n        tags: ['flower', 'red', 'squishy']\n      }\n    });\n    expect('aa3_');\n    c.update({\n      name: 'rose'\n    }, {\n      $set: {\n        food: false\n      }\n    });\n    expect('ca3_');\n    c.remove({});\n    expect('ra3_');\n    c.insert({\n      _id: 4,\n      name: 'daisy',\n      tags: ['flower']\n    });\n    expect('aa4_');\n    handle.stop(); // After calling stop, no more callbacks are called.\n\n    c.insert({\n      _id: 5,\n      name: 'iris',\n      tags: ['flower']\n    });\n    expect(''); // Test that observing a lookup by ID works.\n\n    handle = c.find(4).observe(makecb('b'));\n    expect('ab4_');\n    c.update(4, {\n      $set: {\n        eek: 5\n      }\n    });\n    expect('cb4_');\n    handle.stop(); // Test observe with reactive: false.\n\n    handle = c.find({\n      tags: 'flower'\n    }, {\n      reactive: false\n    }).observe(makecb('c'));\n    expect('ac4_ac5_'); // This insert shouldn't trigger a callback because it's not reactive.\n\n    c.insert({\n      _id: 6,\n      name: 'river',\n      tags: ['flower']\n    });\n    expect('');\n    handle.stop();\n  });\n});\nTinytest.add('minimongo - saveOriginals', function (test) {\n  // set up some data\n  var c = new LocalCollection();\n  var count = void 0;\n  c.insert({\n    _id: 'foo',\n    x: 'untouched'\n  });\n  c.insert({\n    _id: 'bar',\n    x: 'updateme'\n  });\n  c.insert({\n    _id: 'baz',\n    x: 'updateme'\n  });\n  c.insert({\n    _id: 'quux',\n    y: 'removeme'\n  });\n  c.insert({\n    _id: 'whoa',\n    y: 'removeme'\n  }); // Save originals and make some changes.\n\n  c.saveOriginals();\n  c.insert({\n    _id: 'hooray',\n    z: 'insertme'\n  });\n  c.remove({\n    y: 'removeme'\n  });\n  count = c.update({\n    x: 'updateme'\n  }, {\n    $set: {\n      z: 5\n    }\n  }, {\n    multi: true\n  });\n  c.update('bar', {\n    $set: {\n      k: 7\n    }\n  }); // update same doc twice\n  // Verify returned count is correct\n\n  test.equal(count, 2); // Verify the originals.\n\n  var originals = c.retrieveOriginals();\n  var affected = ['bar', 'baz', 'quux', 'whoa', 'hooray'];\n  test.equal(originals.size(), affected.length);\n  affected.forEach(function (id) {\n    test.isTrue(originals.has(id));\n  });\n  test.equal(originals.get('bar'), {\n    _id: 'bar',\n    x: 'updateme'\n  });\n  test.equal(originals.get('baz'), {\n    _id: 'baz',\n    x: 'updateme'\n  });\n  test.equal(originals.get('quux'), {\n    _id: 'quux',\n    y: 'removeme'\n  });\n  test.equal(originals.get('whoa'), {\n    _id: 'whoa',\n    y: 'removeme'\n  });\n  test.equal(originals.get('hooray'), undefined); // Verify that changes actually occured.\n\n  test.equal(c.find().count(), 4);\n  test.equal(c.findOne('foo'), {\n    _id: 'foo',\n    x: 'untouched'\n  });\n  test.equal(c.findOne('bar'), {\n    _id: 'bar',\n    x: 'updateme',\n    z: 5,\n    k: 7\n  });\n  test.equal(c.findOne('baz'), {\n    _id: 'baz',\n    x: 'updateme',\n    z: 5\n  });\n  test.equal(c.findOne('hooray'), {\n    _id: 'hooray',\n    z: 'insertme'\n  }); // The next call doesn't get the same originals again.\n\n  c.saveOriginals();\n  originals = c.retrieveOriginals();\n  test.isTrue(originals);\n  test.isTrue(originals.empty()); // Insert and remove a document during the period.\n\n  c.saveOriginals();\n  c.insert({\n    _id: 'temp',\n    q: 8\n  });\n  c.remove('temp');\n  originals = c.retrieveOriginals();\n  test.equal(originals.size(), 1);\n  test.isTrue(originals.has('temp'));\n  test.equal(originals.get('temp'), undefined);\n});\nTinytest.add('minimongo - saveOriginals errors', function (test) {\n  var c = new LocalCollection(); // Can't call retrieve before save.\n\n  test.throws(function () {\n    c.retrieveOriginals();\n  });\n  c.saveOriginals(); // Can't call save twice.\n\n  test.throws(function () {\n    c.saveOriginals();\n  });\n});\nTinytest.add('minimongo - objectid transformation', function (test) {\n  var testId = function (item) {\n    test.equal(item, MongoID.idParse(MongoID.idStringify(item)));\n  };\n\n  var randomOid = new MongoID.ObjectID();\n  testId(randomOid);\n  testId('FOO');\n  testId('ffffffffffff');\n  testId('0987654321abcdef09876543');\n  testId(new MongoID.ObjectID());\n  testId('--a string');\n  test.equal('ffffffffffff', MongoID.idParse(MongoID.idStringify('ffffffffffff')));\n});\nTinytest.add('minimongo - objectid', function (test) {\n  var randomOid = new MongoID.ObjectID();\n  var anotherRandomOid = new MongoID.ObjectID();\n  test.notEqual(randomOid, anotherRandomOid);\n  test.throws(function () {\n    new MongoID.ObjectID('qqqqqqqqqqqqqqqqqqqqqqqq');\n  });\n  test.throws(function () {\n    new MongoID.ObjectID('ABCDEF');\n  });\n  test.equal(randomOid, new MongoID.ObjectID(randomOid.valueOf()));\n});\nTinytest.add('minimongo - pause', function (test) {\n  var operations = [];\n  var cbs = log_callbacks(operations);\n  var c = new LocalCollection();\n  var h = c.find({}).observe(cbs); // remove and add cancel out.\n\n  c.insert({\n    _id: 1,\n    a: 1\n  });\n  test.equal(operations.shift(), ['added', {\n    a: 1\n  }, 0, null]);\n  c.pauseObservers();\n  c.remove({\n    _id: 1\n  });\n  test.length(operations, 0);\n  c.insert({\n    _id: 1,\n    a: 1\n  });\n  test.length(operations, 0);\n  c.resumeObservers();\n  test.length(operations, 0); // two modifications become one\n\n  c.pauseObservers();\n  c.update({\n    _id: 1\n  }, {\n    a: 2\n  });\n  c.update({\n    _id: 1\n  }, {\n    a: 3\n  });\n  c.resumeObservers();\n  test.equal(operations.shift(), ['changed', {\n    a: 3\n  }, 0, {\n    a: 1\n  }]);\n  test.length(operations, 0); // test special case for remove({})\n\n  c.pauseObservers();\n  test.equal(c.remove({}), 1);\n  test.length(operations, 0);\n  c.resumeObservers();\n  test.equal(operations.shift(), ['removed', 1, 0, {\n    a: 3\n  }]);\n  test.length(operations, 0);\n  h.stop();\n});\nTinytest.add('minimongo - ids matched by selector', function (test) {\n  var check = function (selector, ids) {\n    var idsFromSelector = LocalCollection._idsMatchedBySelector(selector); // XXX normalize order, in a way that also works for ObjectIDs?\n\n\n    test.equal(idsFromSelector, ids);\n  };\n\n  check('foo', ['foo']);\n  check({\n    _id: 'foo'\n  }, ['foo']);\n  var oid1 = new MongoID.ObjectID();\n  check(oid1, [oid1]);\n  check({\n    _id: oid1\n  }, [oid1]);\n  check({\n    _id: 'foo',\n    x: 42\n  }, ['foo']);\n  check({}, null);\n  check({\n    _id: {\n      $in: ['foo', oid1]\n    }\n  }, ['foo', oid1]);\n  check({\n    _id: {\n      $ne: 'foo'\n    }\n  }, null); // not actually valid, but works for now...\n\n  check({\n    $and: ['foo']\n  }, ['foo']);\n  check({\n    $and: [{\n      x: 42\n    }, {\n      _id: oid1\n    }]\n  }, [oid1]);\n  check({\n    $and: [{\n      x: 42\n    }, {\n      _id: {\n        $in: [oid1]\n      }\n    }]\n  }, [oid1]);\n});\nTinytest.add('minimongo - reactive stop', function (test) {\n  var coll = new LocalCollection();\n  coll.insert({\n    _id: 'A'\n  });\n  coll.insert({\n    _id: 'B'\n  });\n  coll.insert({\n    _id: 'C'\n  });\n\n  var addBefore = function (str, newChar, before) {\n    var idx = str.indexOf(before);\n\n    if (idx === -1) {\n      return str + newChar;\n    }\n\n    return str.slice(0, idx) + newChar + str.slice(idx);\n  };\n\n  var x = void 0,\n      y = void 0;\n  var sortOrder = ReactiveVar(1);\n  var c = Tracker.autorun(function () {\n    var q = coll.find({}, {\n      sort: {\n        _id: sortOrder.get()\n      }\n    });\n    x = '';\n    q.observe({\n      addedAt: function (doc, atIndex, before) {\n        x = addBefore(x, doc._id, before);\n      }\n    });\n    y = '';\n    q.observeChanges({\n      addedBefore: function (id, fields, before) {\n        y = addBefore(y, id, before);\n      }\n    });\n  });\n  test.equal(x, 'ABC');\n  test.equal(y, 'ABC');\n  sortOrder.set(-1);\n  test.equal(x, 'ABC');\n  test.equal(y, 'ABC');\n  Tracker.flush();\n  test.equal(x, 'CBA');\n  test.equal(y, 'CBA');\n  coll.insert({\n    _id: 'D'\n  });\n  coll.insert({\n    _id: 'E'\n  });\n  test.equal(x, 'EDCBA');\n  test.equal(y, 'EDCBA');\n  c.stop(); // stopping kills the observes immediately\n\n  coll.insert({\n    _id: 'F'\n  });\n  test.equal(x, 'EDCBA');\n  test.equal(y, 'EDCBA');\n});\nTinytest.add('minimongo - immediate invalidate', function (test) {\n  var coll = new LocalCollection();\n  coll.insert({\n    _id: 'A'\n  }); // This has two separate findOnes.  findOne() uses skip/limit, which means\n  // that its response to an update() call involves a recompute. We used to have\n  // a bug where we would first calculate all the calls that need to be\n  // recomputed, then recompute them one by one, without checking to see if the\n  // callbacks from recomputing one query stopped the second query, which\n  // crashed.\n\n  var c = Tracker.autorun(function () {\n    coll.findOne('A');\n    coll.findOne('A');\n  });\n  coll.update('A', {\n    $set: {\n      x: 42\n    }\n  });\n  c.stop();\n});\nTinytest.add('minimongo - count on cursor with limit', function (test) {\n  var coll = new LocalCollection();\n  var count = void 0;\n  coll.insert({\n    _id: 'A'\n  });\n  coll.insert({\n    _id: 'B'\n  });\n  coll.insert({\n    _id: 'C'\n  });\n  coll.insert({\n    _id: 'D'\n  });\n  var c = Tracker.autorun(function (c) {\n    var cursor = coll.find({\n      _id: {\n        $exists: true\n      }\n    }, {\n      sort: {\n        _id: 1\n      },\n      limit: 3\n    });\n    count = cursor.count();\n  });\n  test.equal(count, 3);\n  coll.remove('A'); // still 3 in the collection\n\n  Tracker.flush();\n  test.equal(count, 3);\n  coll.remove('B'); // expect count now 2\n\n  Tracker.flush();\n  test.equal(count, 2);\n  coll.insert({\n    _id: 'A'\n  }); // now 3 again\n\n  Tracker.flush();\n  test.equal(count, 3);\n  coll.insert({\n    _id: 'B'\n  }); // now 4 entries, but count should be 3 still\n\n  Tracker.flush();\n  test.equal(count, 3);\n  c.stop();\n});\nTinytest.add('minimongo - reactive count with cached cursor', function (test) {\n  var coll = new LocalCollection();\n  var cursor = coll.find({});\n  var firstAutorunCount = void 0,\n      secondAutorunCount = void 0;\n  Tracker.autorun(function () {\n    firstAutorunCount = cursor.count();\n  });\n  Tracker.autorun(function () {\n    secondAutorunCount = coll.find({}).count();\n  });\n  test.equal(firstAutorunCount, 0);\n  test.equal(secondAutorunCount, 0);\n  coll.insert({\n    i: 1\n  });\n  coll.insert({\n    i: 2\n  });\n  coll.insert({\n    i: 3\n  });\n  Tracker.flush();\n  test.equal(firstAutorunCount, 3);\n  test.equal(secondAutorunCount, 3);\n});\nTinytest.add('minimongo - $near operator tests', function (test) {\n  var coll = new LocalCollection();\n  coll.insert({\n    rest: {\n      loc: [2, 3]\n    }\n  });\n  coll.insert({\n    rest: {\n      loc: [-3, 3]\n    }\n  });\n  coll.insert({\n    rest: {\n      loc: [5, 5]\n    }\n  });\n  test.equal(coll.find({\n    'rest.loc': {\n      $near: [0, 0],\n      $maxDistance: 30\n    }\n  }).count(), 3);\n  test.equal(coll.find({\n    'rest.loc': {\n      $near: [0, 0],\n      $maxDistance: 4\n    }\n  }).count(), 1);\n  var points = coll.find({\n    'rest.loc': {\n      $near: [0, 0],\n      $maxDistance: 6\n    }\n  }).fetch();\n  points.forEach(function (point, i, points) {\n    test.isTrue(!i || distance([0, 0], point.rest.loc) >= distance([0, 0], points[i - 1].rest.loc));\n  });\n\n  function distance(a, b) {\n    var x = a[0] - b[0];\n    var y = a[1] - b[1];\n    return Math.sqrt(x * x + y * y);\n  } // GeoJSON tests\n\n\n  coll = new LocalCollection();\n  var data = [{\n    category: 'BURGLARY',\n    descript: 'BURGLARY OF STORE, FORCIBLE ENTRY',\n    address: '100 Block of 10TH ST',\n    location: {\n      type: 'Point',\n      coordinates: [-122.415449723856, 37.7749518087273]\n    }\n  }, {\n    category: 'WEAPON LAWS',\n    descript: 'POSS OF PROHIBITED WEAPON',\n    address: '900 Block of MINNA ST',\n    location: {\n      type: 'Point',\n      coordinates: [-122.415386041221, 37.7747879744156]\n    }\n  }, {\n    category: 'LARCENY/THEFT',\n    descript: 'GRAND THEFT OF PROPERTY',\n    address: '900 Block of MINNA ST',\n    location: {\n      type: 'Point',\n      coordinates: [-122.41538270191, 37.774683628213]\n    }\n  }, {\n    category: 'LARCENY/THEFT',\n    descript: 'PETTY THEFT FROM LOCKED AUTO',\n    address: '900 Block of MINNA ST',\n    location: {\n      type: 'Point',\n      coordinates: [-122.415396041221, 37.7747879744156]\n    }\n  }, {\n    category: 'OTHER OFFENSES',\n    descript: 'POSSESSION OF BURGLARY TOOLS',\n    address: '900 Block of MINNA ST',\n    location: {\n      type: 'Point',\n      coordinates: [-122.415386041221, 37.7747879734156]\n    }\n  }];\n  data.forEach(function (x, i) {\n    coll.insert(Object.assign(x, {\n      x: i\n    }));\n  });\n  var close15 = coll.find({\n    location: {\n      $near: {\n        $geometry: {\n          type: 'Point',\n          coordinates: [-122.4154282, 37.7746115]\n        },\n        $maxDistance: 15\n      }\n    }\n  }).fetch();\n  test.length(close15, 1);\n  test.equal(close15[0].descript, 'GRAND THEFT OF PROPERTY');\n  var close20 = coll.find({\n    location: {\n      $near: {\n        $geometry: {\n          type: 'Point',\n          coordinates: [-122.4154282, 37.7746115]\n        },\n        $maxDistance: 20\n      }\n    }\n  }).fetch();\n  test.length(close20, 4);\n  test.equal(close20[0].descript, 'GRAND THEFT OF PROPERTY');\n  test.equal(close20[1].descript, 'PETTY THEFT FROM LOCKED AUTO');\n  test.equal(close20[2].descript, 'POSSESSION OF BURGLARY TOOLS');\n  test.equal(close20[3].descript, 'POSS OF PROHIBITED WEAPON'); // Any combinations of $near with $or/$and/$nor/$not should throw an error\n\n  test.throws(function () {\n    coll.find({\n      location: {\n        $not: {\n          $near: {\n            $geometry: {\n              type: 'Point',\n              coordinates: [-122.4154282, 37.7746115]\n            },\n            $maxDistance: 20\n          }\n        }\n      }\n    });\n  });\n  test.throws(function () {\n    coll.find({\n      $and: [{\n        location: {\n          $near: {\n            $geometry: {\n              type: 'Point',\n              coordinates: [-122.4154282, 37.7746115]\n            },\n            $maxDistance: 20\n          }\n        }\n      }, {\n        x: 0\n      }]\n    });\n  });\n  test.throws(function () {\n    coll.find({\n      $or: [{\n        location: {\n          $near: {\n            $geometry: {\n              type: 'Point',\n              coordinates: [-122.4154282, 37.7746115]\n            },\n            $maxDistance: 20\n          }\n        }\n      }, {\n        x: 0\n      }]\n    });\n  });\n  test.throws(function () {\n    coll.find({\n      $nor: [{\n        location: {\n          $near: {\n            $geometry: {\n              type: 'Point',\n              coordinates: [-122.4154282, 37.7746115]\n            },\n            $maxDistance: 1\n          }\n        }\n      }, {\n        x: 0\n      }]\n    });\n  });\n  test.throws(function () {\n    coll.find({\n      $and: [{\n        $and: [{\n          location: {\n            $near: {\n              $geometry: {\n                type: 'Point',\n                coordinates: [-122.4154282, 37.7746115]\n              },\n              $maxDistance: 1\n            }\n          }\n        }]\n      }]\n    });\n  }); // array tests\n\n  coll = new LocalCollection();\n  coll.insert({\n    _id: 'x',\n    k: 9,\n    a: [{\n      b: [[100, 100], [1, 1]]\n    }, {\n      b: [150, 150]\n    }]\n  });\n  coll.insert({\n    _id: 'y',\n    k: 9,\n    a: {\n      b: [5, 5]\n    }\n  });\n\n  var testNear = function (near, md, expected) {\n    test.equal(coll.find({\n      'a.b': {\n        $near: near,\n        $maxDistance: md\n      }\n    }).fetch().map(function (doc) {\n      return doc._id;\n    }), expected);\n  };\n\n  testNear([149, 149], 4, ['x']);\n  testNear([149, 149], 1000, ['x', 'y']); // It's important that we figure out that 'x' is closer than 'y' to [2,2] even\n  // though the first within-1000 point in 'x' (ie, [100,100]) is farther than\n  // 'y'.\n\n  testNear([2, 2], 1000, ['x', 'y']); // issue #3599\n  // Ensure that distance is not used as a tie-breaker for sort.\n\n  test.equal(coll.find({\n    'a.b': {\n      $near: [1, 1]\n    }\n  }, {\n    sort: {\n      k: 1\n    }\n  }).fetch().map(function (doc) {\n    return doc._id;\n  }), ['x', 'y']);\n  test.equal(coll.find({\n    'a.b': {\n      $near: [5, 5]\n    }\n  }, {\n    sort: {\n      k: 1\n    }\n  }).fetch().map(function (doc) {\n    return doc._id;\n  }), ['x', 'y']);\n  var operations = [];\n  var cbs = log_callbacks(operations);\n  var handle = coll.find({\n    'a.b': {\n      $near: [7, 7]\n    }\n  }).observe(cbs);\n  test.length(operations, 2);\n  test.equal(operations.shift(), ['added', {\n    k: 9,\n    a: {\n      b: [5, 5]\n    }\n  }, 0, null]);\n  test.equal(operations.shift(), ['added', {\n    k: 9,\n    a: [{\n      b: [[100, 100], [1, 1]]\n    }, {\n      b: [150, 150]\n    }]\n  }, 1, null]); // This needs to be inserted in the MIDDLE of the two existing ones.\n\n  coll.insert({\n    a: {\n      b: [3, 3]\n    }\n  });\n  test.length(operations, 1);\n  test.equal(operations.shift(), ['added', {\n    a: {\n      b: [3, 3]\n    }\n  }, 1, 'x']);\n  handle.stop();\n}); // issue #2077\n\nTinytest.add('minimongo - $near and $geometry for legacy coordinates', function (test) {\n  var coll = new LocalCollection();\n  coll.insert({\n    loc: {\n      x: 1,\n      y: 1\n    }\n  });\n  coll.insert({\n    loc: [-1, -1]\n  });\n  coll.insert({\n    loc: [40, -10]\n  });\n  coll.insert({\n    loc: {\n      x: -10,\n      y: 40\n    }\n  });\n  test.equal(coll.find({\n    loc: {\n      $near: [0, 0],\n      $maxDistance: 4\n    }\n  }).count(), 2);\n  test.equal(coll.find({\n    loc: {\n      $near: {\n        $geometry: {\n          type: 'Point',\n          coordinates: [0, 0]\n        }\n      }\n    }\n  }).count(), 4);\n  test.equal(coll.find({\n    loc: {\n      $near: {\n        $geometry: {\n          type: 'Point',\n          coordinates: [0, 0]\n        },\n        $maxDistance: 200000\n      }\n    }\n  }).count(), 2);\n}); // Regression test for #4377. Previously, \"replace\" updates didn't clone the\n// argument.\n\nTinytest.add('minimongo - update should clone', function (test) {\n  var x = [];\n  var coll = new LocalCollection();\n  var id = coll.insert({});\n  coll.update(id, {\n    x: x\n  });\n  x.push(1);\n  test.equal(coll.findOne(id), {\n    _id: id,\n    x: []\n  });\n}); // See #2275.\n\nTinytest.add('minimongo - fetch in observe', function (test) {\n  var coll = new LocalCollection();\n  var callbackInvoked = false;\n  var observe = coll.find().observeChanges({\n    added: function (id, fields) {\n      callbackInvoked = true;\n      test.equal(fields, {\n        foo: 1\n      });\n      var doc = coll.findOne({\n        foo: 1\n      });\n      test.isTrue(doc);\n      test.equal(doc.foo, 1);\n    }\n  });\n  test.isFalse(callbackInvoked);\n  var computation = Tracker.autorun(function (computation) {\n    if (computation.firstRun) {\n      coll.insert({\n        foo: 1\n      });\n    }\n  });\n  test.isTrue(callbackInvoked);\n  observe.stop();\n  computation.stop();\n}); // See #2254\n\nTinytest.add('minimongo - fine-grained reactivity of observe with fields projection', function (test) {\n  var X = new LocalCollection();\n  var id = 'asdf';\n  X.insert({\n    _id: id,\n    foo: {\n      bar: 123\n    }\n  });\n  var callbackInvoked = false;\n  var obs = X.find(id, {\n    fields: {\n      'foo.bar': 1\n    }\n  }).observeChanges({\n    changed: function (id, fields) {\n      callbackInvoked = true;\n    }\n  });\n  test.isFalse(callbackInvoked);\n  X.update(id, {\n    $set: {\n      'foo.baz': 456\n    }\n  });\n  test.isFalse(callbackInvoked);\n  obs.stop();\n});\nTinytest.add('minimongo - fine-grained reactivity of query with fields projection', function (test) {\n  var X = new LocalCollection();\n  var id = 'asdf';\n  X.insert({\n    _id: id,\n    foo: {\n      bar: 123\n    }\n  });\n  var callbackInvoked = false;\n  var computation = Tracker.autorun(function () {\n    callbackInvoked = true;\n    return X.findOne(id, {\n      fields: {\n        'foo.bar': 1\n      }\n    });\n  });\n  test.isTrue(callbackInvoked);\n  callbackInvoked = false;\n  X.update(id, {\n    $set: {\n      'foo.baz': 456\n    }\n  });\n  test.isFalse(callbackInvoked);\n  X.update(id, {\n    $set: {\n      'foo.bar': 124\n    }\n  });\n  Tracker.flush();\n  test.isTrue(callbackInvoked);\n  computation.stop();\n}); // Tests that the logic in `LocalCollection.prototype.update`\n// correctly deals with count() on a cursor with skip or limit (since\n// then the result set is an IdMap, not an array)\n\nTinytest.add('minimongo - reactive skip/limit count while updating', function (test) {\n  var X = new LocalCollection();\n  var count = -1;\n  var c = Tracker.autorun(function () {\n    count = X.find({}, {\n      skip: 1,\n      limit: 1\n    }).count();\n  });\n  test.equal(count, 0);\n  X.insert({});\n  Tracker.flush({\n    _throwFirstError: true\n  });\n  test.equal(count, 0);\n  X.insert({});\n  Tracker.flush({\n    _throwFirstError: true\n  });\n  test.equal(count, 1);\n  X.update({}, {\n    $set: {\n      foo: 1\n    }\n  });\n  Tracker.flush({\n    _throwFirstError: true\n  });\n  test.equal(count, 1); // Make sure a second update also works\n\n  X.update({}, {\n    $set: {\n      foo: 2\n    }\n  });\n  Tracker.flush({\n    _throwFirstError: true\n  });\n  test.equal(count, 1);\n  c.stop();\n}); // Makes sure inserts cannot be performed using field names that have\n// Mongo restricted characters in them ('.', '$', '\\0'):\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n\nTinytest.add('minimongo - cannot insert using invalid field names', function (test) {\n  var collection = new LocalCollection(); // Quick test to make sure non-dot field inserts are working\n\n  collection.insert({\n    a: 'b'\n  }); // Quick test to make sure field values with dots are allowed\n\n  collection.insert({\n    a: 'b.c'\n  }); // Verify top level dot-field inserts are prohibited\n\n  ['a.b', '.b', 'a.', 'a.b.c'].forEach(function (field) {\n    test.throws(function () {\n      var _collection$insert;\n\n      collection.insert((_collection$insert = {}, _collection$insert[field] = 'c', _collection$insert));\n    }, \"Key \" + field + \" must not contain '.'\");\n  }); // Verify nested dot-field inserts are prohibited\n\n  test.throws(function () {\n    collection.insert({\n      a: {\n        b: {\n          'c.d': 'e'\n        }\n      }\n    });\n  }, \"Key c.d must not contain '.'\"); // Verify field names starting with $ are prohibited\n\n  test.throws(function () {\n    collection.insert({\n      $a: 'b'\n    });\n  }, \"Key $a must not start with '$'\"); // Verify nested field names starting with $ are prohibited\n\n  test.throws(function () {\n    collection.insert({\n      a: {\n        b: {\n          $c: 'd'\n        }\n      }\n    });\n  }, \"Key $c must not start with '$'\"); // Verify top level fields with null characters are prohibited\n\n  ['\\0a', 'a\\0', 'a\\0b', \"\\0a\", \"a\\0\", \"a\\0b\"].forEach(function (field) {\n    test.throws(function () {\n      var _collection$insert2;\n\n      collection.insert((_collection$insert2 = {}, _collection$insert2[field] = 'c', _collection$insert2));\n    }, \"Key \" + field + \" must not contain null bytes\");\n  }); // Verify nested field names with null characters are prohibited\n\n  test.throws(function () {\n    collection.insert({\n      a: {\n        b: {\n          '\\0c': 'd'\n        }\n      }\n    });\n  }, 'Key \\0c must not contain null bytes');\n}); // Makes sure $set's cannot be performed using null bytes\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n\nTinytest.add('minimongo - cannot $set with null bytes', function (test) {\n  var collection = new LocalCollection(); // Quick test to make sure non-null byte $set's are working\n\n  var id = collection.insert({\n    a: 'b',\n    c: 'd'\n  });\n  collection.update({\n    _id: id\n  }, {\n    $set: {\n      e: 'f'\n    }\n  }); // Verify $set's with null bytes throw an exception\n\n  test.throws(function () {\n    collection.update({\n      _id: id\n    }, {\n      $set: {\n        '\\0a': 'b'\n      }\n    });\n  }, 'Key \\0a must not contain null bytes');\n}); // Makes sure $rename's cannot be performed using null bytes\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n\nTinytest.add('minimongo - cannot $rename with null bytes', function (test) {\n  var collection = new LocalCollection(); // Quick test to make sure non-null byte $rename's are working\n\n  var id = collection.insert({\n    a: 'b',\n    c: 'd'\n  });\n  collection.update({\n    _id: id\n  }, {\n    $rename: {\n      a: 'a1',\n      c: 'c1'\n    }\n  }); // Verify $rename's with null bytes throw an exception\n\n  collection.remove({});\n  id = collection.insert({\n    a: 'b',\n    c: 'd'\n  });\n  test.throws(function () {\n    collection.update({\n      _id: id\n    }, {\n      $rename: {\n        a: '\\0a',\n        c: 'c\\0'\n      }\n    });\n  }, \"The 'to' field for $rename cannot contain an embedded null byte\");\n});","map":{"version":3,"sources":["packages/minimongo/minimongo_tests_client.js"],"names":["hasOwn","module","watch","require","v","LocalCollection","_useOID","assert_ordering","test","f","values","i","length","x","fail","type","message","value","JSON","stringify","should_be_zero_but_got","less","more","first","second","should_be_negative_but_got","should_be_positive_but_got","log_callbacks","addedAt","obj","idx","before","_id","operations","push","EJSON","clone","changedAt","old_obj","at","movedTo","old_at","new_at","removedAt","id","Tinytest","add","c","fluffyKitten_id","count","insert","name","equal","find","fetch","findOne","remove","update","$set","undefined","tags","skip","limit","sort","foo","bar","bam","a","b","noop","MinimongoError","e","field","res","q","context","forEach","cursor","isTrue","map","invalidTransform","doc","throws","transform","transformWithoutId","docWithoutId","Object","assign","d","y","g","Date","_f","_equal","z","setDate","getDate","notEqual","lookupA","MinimongoTest","makeLookupFunction","lookupAX","arrayIndices","lookupA0X","w","matches","shouldMatch","selector","doesMatch","Minimongo","Matcher","documentMatches","result","document","match","bind","nomatch","date1","date2","getTime","k","$lt","$gt","$lte","$gte","$all","$exists","$mod","badMod","$eq","$ne","$in","$nin","$size","$bitsAllClear","Uint8Array","$bitsAllSet","$bitsAnySet","$bitsAnyClear","matchCount","query","allPositions","parse","NaN","Infinity","badValue","$type","newBinary","MongoID","ObjectID","$regex","$options","reusedRegexp","$not","big","$or","$nor","$and","$where","dogs","room","animals","$elemMatch","age","$comment","testProjection","projection","tests","projection_f","_compileProjection","equalNonStrict","desc","equals","testCase","testCompileProjectionThrows","expectedError","baz","nested","bazbaz","meh","tr","hope","humanity","people","candies","inc","excl","Array","from","something","Random","anything","cool","nothing","fetchResults","fields","every","call","arr","grades","mean","$slice","setA","fieldA","fieldB","fieldC","setB","anotherA","anotherB","testForProjection","expected","fetched","projectionFn","filteredDoc","cbs","handle","observe","collection","shift","$inc","multi","stop","idA2","observeChanges","added","_suppress_initial","blacklisted","_no_indices","zoo","foobar","shortBinary","longBinary1","longBinary2","_cmp","verify","sorts","docs","isArray","sorter","Sorter","getComparator","$natural","s","j","up","down","selected","testCursorMatchesField","fieldValues","Math","max","keyListToObject","keyList","key","testKeys","sortSpec","expectedKeyList","expectedKeys","actualKeyList","_generateKeysFromDoc","actualKeys","testParallelError","testOrder","doc1","doc2","matcher","comparator","comparison","keyCompatible","compatible","actual","_keyCompatibleWithSelector","sortFunction","forwardCmp","backwardCmp","checkSearch","cmp","array","_binarySearch","checkSearchForward","checkSearchBackward","modifyWithQuery","mod","coll","input","modify","exceptionWithQuery","exception","upsert","insertedId","upsertUpdate","initialDoc","upsertException","$a","$unset","$near","$maxDistance","$currentDate","msg","instanceOf","$min","$max","$push","$each","$sort","$position","$pushAll","$addToSet","$b","$pop","$pull","$pullAll","$rename","r","$setOnInsert","testObjectId","someOtherId","testDate","someDate","create","writable","configurable","keyName","mongoIdForUpsert","n_id","c_n","t_t_o","ordered","ev","makecb","ret","fnName","fn","substr","tag","expect","food","eek","reactive","saveOriginals","originals","retrieveOriginals","affected","size","has","get","empty","testId","item","idParse","idStringify","randomOid","anotherRandomOid","valueOf","h","pauseObservers","resumeObservers","check","ids","idsFromSelector","_idsMatchedBySelector","oid1","addBefore","str","newChar","indexOf","slice","sortOrder","ReactiveVar","Tracker","autorun","atIndex","addedBefore","set","flush","firstAutorunCount","secondAutorunCount","rest","loc","points","point","distance","sqrt","data","category","descript","address","location","coordinates","close15","$geometry","close20","testNear","near","md","callbackInvoked","isFalse","computation","firstRun","X","obs","changed","_throwFirstError","$c"],"mappings":"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","file":"packages/minimongo/minimongo_tests_client.js.map","sourcesContent":["import {hasOwn} from './common';\n\n// Hack to make LocalCollection generate ObjectIDs by default.\nLocalCollection._useOID = true;\n\n// assert that f is a strcmp-style comparison function that puts\n// 'values' in the provided order\n\nconst assert_ordering = (test, f, values) => {\n  for (let i = 0; i < values.length; i++) {\n    let x = f(values[i], values[i]);\n    if (x !== 0) {\n      // XXX super janky\n      test.fail({type: 'minimongo-ordering',\n        message: \"value doesn't order as equal to itself\",\n        value: JSON.stringify(values[i]),\n        should_be_zero_but_got: JSON.stringify(x)});\n    }\n    if (i + 1 < values.length) {\n      const less = values[i];\n      const more = values[i + 1];\n      x = f(less, more);\n      if (!(x < 0)) {\n        // XXX super janky\n        test.fail({type: 'minimongo-ordering',\n          message: 'ordering test failed',\n          first: JSON.stringify(less),\n          second: JSON.stringify(more),\n          should_be_negative_but_got: JSON.stringify(x)});\n      }\n      x = f(more, less);\n      if (!(x > 0)) {\n        // XXX super janky\n        test.fail({type: 'minimongo-ordering',\n          message: 'ordering test failed',\n          first: JSON.stringify(less),\n          second: JSON.stringify(more),\n          should_be_positive_but_got: JSON.stringify(x)});\n      }\n    }\n  }\n};\n\nconst log_callbacks = operations => ({\n  addedAt(obj, idx, before) {\n    delete obj._id;\n    operations.push(EJSON.clone(['added', obj, idx, before]));\n  },\n\n  changedAt(obj, old_obj, at) {\n    delete obj._id;\n    delete old_obj._id;\n    operations.push(EJSON.clone(['changed', obj, at, old_obj]));\n  },\n\n  movedTo(obj, old_at, new_at, before) {\n    delete obj._id;\n    operations.push(EJSON.clone(['moved', obj, old_at, new_at, before]));\n  },\n\n  removedAt(old_obj, at) {\n    const id = old_obj._id;\n    delete old_obj._id;\n    operations.push(EJSON.clone(['removed', id, at, old_obj]));\n  },\n});\n\n// XXX test shared structure in all MM entrypoints\nTinytest.add('minimongo - basics', test => {\n  const c = new LocalCollection();\n  let fluffyKitten_id;\n  let count;\n\n  fluffyKitten_id = c.insert({type: 'kitten', name: 'fluffy'});\n  c.insert({type: 'kitten', name: 'snookums'});\n  c.insert({type: 'cryptographer', name: 'alice'});\n  c.insert({type: 'cryptographer', name: 'bob'});\n  c.insert({type: 'cryptographer', name: 'cara'});\n  test.equal(c.find().count(), 5);\n  test.equal(c.find({type: 'kitten'}).count(), 2);\n  test.equal(c.find({type: 'cryptographer'}).count(), 3);\n  test.length(c.find({type: 'kitten'}).fetch(), 2);\n  test.length(c.find({type: 'cryptographer'}).fetch(), 3);\n  test.equal(fluffyKitten_id, c.findOne({type: 'kitten', name: 'fluffy'})._id);\n\n  c.remove({name: 'cara'});\n  test.equal(c.find().count(), 4);\n  test.equal(c.find({type: 'kitten'}).count(), 2);\n  test.equal(c.find({type: 'cryptographer'}).count(), 2);\n  test.length(c.find({type: 'kitten'}).fetch(), 2);\n  test.length(c.find({type: 'cryptographer'}).fetch(), 2);\n\n  count = c.update({name: 'snookums'}, {$set: {type: 'cryptographer'}});\n  test.equal(count, 1);\n  test.equal(c.find().count(), 4);\n  test.equal(c.find({type: 'kitten'}).count(), 1);\n  test.equal(c.find({type: 'cryptographer'}).count(), 3);\n  test.length(c.find({type: 'kitten'}).fetch(), 1);\n  test.length(c.find({type: 'cryptographer'}).fetch(), 3);\n\n  c.remove(null);\n  c.remove(false);\n  c.remove(undefined);\n  test.equal(c.find().count(), 4);\n\n  c.remove({_id: null});\n  c.remove({_id: false});\n  c.remove({_id: undefined});\n  count = c.remove();\n  test.equal(count, 0);\n  test.equal(c.find().count(), 4);\n\n  count = c.remove({});\n  test.equal(count, 4);\n  test.equal(c.find().count(), 0);\n\n  c.insert({_id: 1, name: 'strawberry', tags: ['fruit', 'red', 'squishy']});\n  c.insert({_id: 2, name: 'apple', tags: ['fruit', 'red', 'hard']});\n  c.insert({_id: 3, name: 'rose', tags: ['flower', 'red', 'squishy']});\n\n  test.equal(c.find({tags: 'flower'}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}).count(), 2);\n  test.equal(c.find({tags: 'red'}).count(), 3);\n  test.length(c.find({tags: 'flower'}).fetch(), 1);\n  test.length(c.find({tags: 'fruit'}).fetch(), 2);\n  test.length(c.find({tags: 'red'}).fetch(), 3);\n\n  test.equal(c.findOne(1).name, 'strawberry');\n  test.equal(c.findOne(2).name, 'apple');\n  test.equal(c.findOne(3).name, 'rose');\n  test.equal(c.findOne(4), undefined);\n  test.equal(c.findOne('abc'), undefined);\n  test.equal(c.findOne(undefined), undefined);\n\n  test.equal(c.find(1).count(), 1);\n  test.equal(c.find(4).count(), 0);\n  test.equal(c.find('abc').count(), 0);\n  test.equal(c.find(undefined).count(), 0);\n  test.equal(c.find().count(), 3);\n  test.equal(c.find(1, {skip: 1}).count(), 0);\n  test.equal(c.find({_id: 1}, {skip: 1}).count(), 0);\n  test.equal(c.find({_id: undefined}).count(), 0);\n  test.equal(c.find({_id: false}).count(), 0);\n  test.equal(c.find({_id: null}).count(), 0);\n  test.equal(c.find({_id: ''}).count(), 0);\n  test.equal(c.find({_id: 0}).count(), 0);\n  test.equal(c.find({}, {skip: 1}).count(), 2);\n  test.equal(c.find({}, {skip: 2}).count(), 1);\n  test.equal(c.find({}, {limit: 2}).count(), 2);\n  test.equal(c.find({}, {limit: 1}).count(), 1);\n  test.equal(c.find({}, {skip: 1, limit: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {skip: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {limit: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {skip: 1, limit: 1}).count(), 1);\n  test.equal(c.find(1, {sort: ['_id', 'desc'], skip: 1}).count(), 0);\n  test.equal(c.find({_id: 1}, {sort: ['_id', 'desc'], skip: 1}).count(), 0);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], skip: 1}).count(), 2);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], skip: 2}).count(), 1);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], limit: 2}).count(), 2);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], limit: 1}).count(), 1);\n  test.equal(c.find({}, {sort: ['_id', 'desc'], skip: 1, limit: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {sort: ['_id', 'desc'], skip: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {sort: ['_id', 'desc'], limit: 1}).count(), 1);\n  test.equal(c.find({tags: 'fruit'}, {sort: ['_id', 'desc'], skip: 1, limit: 1}).count(), 1);\n\n  // Regression test for #455.\n  c.insert({foo: {bar: 'baz'}});\n  test.equal(c.find({foo: {bam: 'baz'}}).count(), 0);\n  test.equal(c.find({foo: {bar: 'baz'}}).count(), 1);\n\n  // Regression test for #5301\n  c.remove({});\n  c.insert({a: 'a', b: 'b'});\n  const noop = () => null;\n  test.equal(c.find({a: noop}).count(), 1);\n  test.equal(c.find({a: 'a', b: noop}).count(), 1);\n  test.equal(c.find({c: noop}).count(), 1);\n  test.equal(c.find({a: noop, c: 'c'}).count(), 0);\n});\n\nTinytest.add('minimongo - error - no options', test => {\n  try {\n    throw MinimongoError('Not fun to have errors');\n  } catch (e) {\n    test.equal(e.message, 'Not fun to have errors');\n  }\n});\n\nTinytest.add('minimongo - error - with field', test => {\n  try {\n    throw MinimongoError('Cats are no fun', { field: 'mice' });\n  } catch (e) {\n    test.equal(e.message, \"Cats are no fun for field 'mice'\");\n  }\n});\n\nTinytest.add('minimongo - cursors', test => {\n  const c = new LocalCollection();\n  let res;\n\n  for (let i = 0; i < 20; i++) {c.insert({i});}\n\n  const q = c.find();\n  test.equal(q.count(), 20);\n\n  // fetch\n  res = q.fetch();\n  test.length(res, 20);\n  for (let i = 0; i < 20; i++) {\n    test.equal(res[i].i, i);\n  }\n  // call it again, it still works\n  test.length(q.fetch(), 20);\n\n  // forEach\n  let count = 0;\n  const context = {};\n  q.forEach(function(obj, i, cursor) {\n    test.equal(obj.i, count++);\n    test.equal(obj.i, i);\n    test.isTrue(context === this);\n    test.isTrue(cursor === q);\n  }, context);\n  test.equal(count, 20);\n  // call it again, it still works\n  test.length(q.fetch(), 20);\n\n  // iterator\n  count = 0;\n  for (let obj of q) {\n    test.equal(obj.i, count++);\n  };\n  test.equal(count, 20);\n  // call it again, it still works\n  test.length(q.fetch(), 20);\n  // test spread operator\n  test.equal([...q], q.fetch());\n\n  // map\n  res = q.map(function(obj, i, cursor) {\n    test.equal(obj.i, i);\n    test.isTrue(context === this);\n    test.isTrue(cursor === q);\n    return obj.i * 2;\n  }, context);\n  test.length(res, 20);\n  for (let i = 0; i < 20; i++) {test.equal(res[i], i * 2);}\n  // call it again, it still works\n  test.length(q.fetch(), 20);\n\n  // findOne (and no rewind first)\n  test.equal(c.findOne({i: 0}).i, 0);\n  test.equal(c.findOne({i: 1}).i, 1);\n  const id = c.findOne({i: 2})._id;\n  test.equal(c.findOne(id).i, 2);\n});\n\nTinytest.add('minimongo - transform', test => {\n  const c = new LocalCollection;\n  c.insert({});\n  // transform functions must return objects\n  const invalidTransform = doc => doc._id;\n  test.throws(() => {\n    c.findOne({}, {transform: invalidTransform});\n  });\n\n  // transformed documents get _id field transplanted if not present\n  const transformWithoutId = doc => {\n    const docWithoutId = Object.assign({}, doc);\n    delete docWithoutId._id;\n    return docWithoutId;\n  };\n  test.equal(c.findOne({}, {transform: transformWithoutId})._id,\n    c.findOne()._id);\n});\n\nTinytest.add('minimongo - misc', test => {\n  // deepcopy\n  let a = {a: [1, 2, 3], b: 'x', c: true, d: {x: 12, y: [12]},\n    f: null, g: new Date()};\n  let b = EJSON.clone(a);\n  test.equal(a, b);\n  test.isTrue(LocalCollection._f._equal(a, b));\n  a.a.push(4);\n  test.length(b.a, 3);\n  a.c = false;\n  test.isTrue(b.c);\n  b.d.z = 15;\n  a.d.z = 14;\n  test.equal(b.d.z, 15);\n  a.d.y.push(88);\n  test.length(b.d.y, 1);\n  test.equal(a.g, b.g);\n  b.g.setDate(b.g.getDate() + 1);\n  test.notEqual(a.g, b.g);\n\n  a = {x() {}};\n  b = EJSON.clone(a);\n  a.x.a = 14;\n  test.equal(b.x.a, 14); // just to document current behavior\n});\n\nTinytest.add('minimongo - lookup', test => {\n  const lookupA = MinimongoTest.makeLookupFunction('a');\n  test.equal(lookupA({}), [{value: undefined}]);\n  test.equal(lookupA({a: 1}), [{value: 1}]);\n  test.equal(lookupA({a: [1]}), [{value: [1]}]);\n\n  const lookupAX = MinimongoTest.makeLookupFunction('a.x');\n  test.equal(lookupAX({a: {x: 1}}), [{value: 1}]);\n  test.equal(lookupAX({a: {x: [1]}}), [{value: [1]}]);\n  test.equal(lookupAX({a: 5}), [{value: undefined}]);\n  test.equal(lookupAX({a: [{x: 1}, {x: [2]}, {y: 3}]}),\n    [{value: 1, arrayIndices: [0]},\n      {value: [2], arrayIndices: [1]},\n      {value: undefined, arrayIndices: [2]}]);\n\n  const lookupA0X = MinimongoTest.makeLookupFunction('a.0.x');\n  test.equal(lookupA0X({a: [{x: 1}]}), [\n    // From interpreting '0' as \"0th array element\".\n    {value: 1, arrayIndices: [0, 'x']},\n    // From interpreting '0' as \"after branching in the array, look in the\n    // object {x:1} for a field named 0\".\n    {value: undefined, arrayIndices: [0]}]);\n  test.equal(lookupA0X({a: [{x: [1]}]}), [\n    {value: [1], arrayIndices: [0, 'x']},\n    {value: undefined, arrayIndices: [0]}]);\n  test.equal(lookupA0X({a: 5}), [{value: undefined}]);\n  test.equal(lookupA0X({a: [{x: 1}, {x: [2]}, {y: 3}]}), [\n    // From interpreting '0' as \"0th array element\".\n    {value: 1, arrayIndices: [0, 'x']},\n    // From interpreting '0' as \"after branching in the array, look in the\n    // object {x:1} for a field named 0\".\n    {value: undefined, arrayIndices: [0]},\n    {value: undefined, arrayIndices: [1]},\n    {value: undefined, arrayIndices: [2]},\n  ]);\n\n  test.equal(\n    MinimongoTest.makeLookupFunction('w.x.0.z')({\n      w: [{x: [{z: 5}]}]}), [\n      // From interpreting '0' as \"0th array element\".\n      {value: 5, arrayIndices: [0, 0, 'x']},\n      // From interpreting '0' as \"after branching in the array, look in the\n      // object {z:5} for a field named \"0\".\n      {value: undefined, arrayIndices: [0, 0]},\n    ]);\n});\n\nTinytest.add('minimongo - selector_compiler', test => {\n  const matches = (shouldMatch, selector, doc) => {\n    const doesMatch = new Minimongo.Matcher(selector).documentMatches(doc).result;\n    if (doesMatch != shouldMatch) {\n      // XXX super janky\n      test.fail({message: `minimongo match failure: document ${shouldMatch ? \"should match, but doesn't\" :\n        \"shouldn't match, but does\"}`,\n      selector: JSON.stringify(selector),\n      document: JSON.stringify(doc),\n      });\n    }\n  };\n\n  const match = matches.bind(null, true);\n  const nomatch = matches.bind(null, false);\n\n  // XXX blog post about what I learned while writing these tests (weird\n  // mongo edge cases)\n\n  // empty selectors\n  match({}, {});\n  match({}, {a: 12});\n\n  // scalars\n  match(1, {_id: 1, a: 'foo'});\n  nomatch(1, {_id: 2, a: 'foo'});\n  match('a', {_id: 'a', a: 'foo'});\n  nomatch('a', {_id: 'b', a: 'foo'});\n\n  // safety\n  nomatch(undefined, {});\n  nomatch(undefined, {_id: 'foo'});\n  nomatch(false, {_id: 'foo'});\n  nomatch(null, {_id: 'foo'});\n  nomatch({_id: undefined}, {_id: 'foo'});\n  nomatch({_id: false}, {_id: 'foo'});\n  nomatch({_id: null}, {_id: 'foo'});\n  nomatch({_id: ''}, {_id: ''});\n  nomatch({_id: 0}, {_id: 0});\n\n  // matching one or more keys\n  nomatch({a: 12}, {});\n  match({a: 12}, {a: 12});\n  match({a: 12}, {a: 12, b: 13});\n  match({a: 12, b: 13}, {a: 12, b: 13});\n  match({a: 12, b: 13}, {a: 12, b: 13, c: 14});\n  nomatch({a: 12, b: 13, c: 14}, {a: 12, b: 13});\n  nomatch({a: 12, b: 13}, {b: 13, c: 14});\n\n  match({a: 12}, {a: [12]});\n  match({a: 12}, {a: [11, 12, 13]});\n  nomatch({a: 12}, {a: [11, 13]});\n  match({a: 12, b: 13}, {a: [11, 12, 13], b: [13, 14, 15]});\n  nomatch({a: 12, b: 13}, {a: [11, 12, 13], b: [14, 15]});\n\n  // dates\n  const date1 = new Date;\n  const date2 = new Date(date1.getTime() + 1000);\n  match({a: date1}, {a: date1});\n  nomatch({a: date1}, {a: date2});\n\n\n  // arrays\n  match({a: [1, 2]}, {a: [1, 2]});\n  match({a: [1, 2]}, {a: [[1, 2]]});\n  match({a: [1, 2]}, {a: [[3, 4], [1, 2]]});\n  nomatch({a: [1, 2]}, {a: [3, 4]});\n  nomatch({a: [1, 2]}, {a: [[[1, 2]]]});\n\n  // literal documents\n  match({a: {b: 12}}, {a: {b: 12}});\n  nomatch({a: {b: 12, c: 13}}, {a: {b: 12}});\n  nomatch({a: {b: 12}}, {a: {b: 12, c: 13}});\n  match({a: {b: 12, c: 13}}, {a: {b: 12, c: 13}});\n  nomatch({a: {b: 12, c: 13}}, {a: {c: 13, b: 12}}); // tested on mongodb\n  nomatch({a: {}}, {a: {b: 12}});\n  nomatch({a: {b: 12}}, {a: {}});\n  match(\n    {a: {b: 12, c: [13, true, false, 2.2, 'a', null, {d: 14}]}},\n    {a: {b: 12, c: [13, true, false, 2.2, 'a', null, {d: 14}]}});\n  match({a: {b: 12}}, {a: {b: 12}, k: 99});\n\n  match({a: {b: 12}}, {a: [{b: 12}]});\n  nomatch({a: {b: 12}}, {a: [[{b: 12}]]});\n  match({a: {b: 12}}, {a: [{b: 11}, {b: 12}, {b: 13}]});\n  nomatch({a: {b: 12}}, {a: [{b: 11}, {b: 12, c: 20}, {b: 13}]});\n  nomatch({a: {b: 12, c: 20}}, {a: [{b: 11}, {b: 12}, {c: 20}]});\n  match({a: {b: 12, c: 20}}, {a: [{b: 11}, {b: 12, c: 20}, {b: 13}]});\n\n  // null\n  match({a: null}, {a: null});\n  match({a: null}, {b: 12});\n  nomatch({a: null}, {a: 12});\n  match({a: null}, {a: [1, 2, null, 3]}); // tested on mongodb\n  nomatch({a: null}, {a: [1, 2, {}, 3]}); // tested on mongodb\n\n  // order comparisons: $lt, $gt, $lte, $gte\n  match({a: {$lt: 10}}, {a: 9});\n  nomatch({a: {$lt: 10}}, {a: 10});\n  nomatch({a: {$lt: 10}}, {a: 11});\n\n  match({a: {$gt: 10}}, {a: 11});\n  nomatch({a: {$gt: 10}}, {a: 10});\n  nomatch({a: {$gt: 10}}, {a: 9});\n\n  match({a: {$lte: 10}}, {a: 9});\n  match({a: {$lte: 10}}, {a: 10});\n  nomatch({a: {$lte: 10}}, {a: 11});\n\n  match({a: {$gte: 10}}, {a: 11});\n  match({a: {$gte: 10}}, {a: 10});\n  nomatch({a: {$gte: 10}}, {a: 9});\n\n  match({a: {$lt: 10}}, {a: [11, 9, 12]});\n  nomatch({a: {$lt: 10}}, {a: [11, 12]});\n\n  // (there's a full suite of ordering test elsewhere)\n  nomatch({a: {$lt: 'null'}}, {a: null});\n  match({a: {$lt: {x: [2, 3, 4]}}}, {a: {x: [1, 3, 4]}});\n  match({a: {$gt: {x: [2, 3, 4]}}}, {a: {x: [3, 3, 4]}});\n  nomatch({a: {$gt: {x: [2, 3, 4]}}}, {a: {x: [1, 3, 4]}});\n  nomatch({a: {$gt: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n  nomatch({a: {$lt: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n  match({a: {$gte: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n  match({a: {$lte: {x: [2, 3, 4]}}}, {a: {x: [2, 3, 4]}});\n\n  nomatch({a: {$gt: [2, 3]}}, {a: [1, 2]}); // tested against mongodb\n\n  // composition of two qualifiers\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 8});\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 9});\n  match({a: {$lt: 11, $gt: 9}}, {a: 10});\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 11});\n  nomatch({a: {$lt: 11, $gt: 9}}, {a: 12});\n\n  match({a: {$lt: 11, $gt: 9}}, {a: [8, 9, 10, 11, 12]});\n  match({a: {$lt: 11, $gt: 9}}, {a: [8, 9, 11, 12]}); // tested against mongodb\n\n  // $all\n  match({a: {$all: [1, 2]}}, {a: [1, 2]});\n  nomatch({a: {$all: [1, 2, 3]}}, {a: [1, 2]});\n  match({a: {$all: [1, 2]}}, {a: [3, 2, 1]});\n  match({a: {$all: [1, 'x']}}, {a: [3, 'x', 1]});\n  nomatch({a: {$all: ['2']}}, {a: 2});\n  nomatch({a: {$all: [2]}}, {a: '2'});\n  match({a: {$all: [[1, 2], [1, 3]]}}, {a: [[1, 3], [1, 2], [1, 4]]});\n  nomatch({a: {$all: [[1, 2], [1, 3]]}}, {a: [[1, 4], [1, 2], [1, 4]]});\n  match({a: {$all: [2, 2]}}, {a: [2]}); // tested against mongodb\n  nomatch({a: {$all: [2, 3]}}, {a: [2, 2]});\n\n  nomatch({a: {$all: [1, 2]}}, {a: [[1, 2]]}); // tested against mongodb\n  nomatch({a: {$all: [1, 2]}}, {}); // tested against mongodb, field doesn't exist\n  nomatch({a: {$all: [1, 2]}}, {a: {foo: 'bar'}}); // tested against mongodb, field is not an object\n  nomatch({a: {$all: []}}, {a: []});\n  nomatch({a: {$all: []}}, {a: [5]});\n  match({a: {$all: [/i/, /e/i]}}, {a: ['foo', 'bEr', 'biz']});\n  nomatch({a: {$all: [/i/, /e/i]}}, {a: ['foo', 'bar', 'biz']});\n  match({a: {$all: [{b: 3}]}}, {a: [{b: 3}]});\n  // Members of $all other than regexps are *equality matches*, not document\n  // matches.\n  nomatch({a: {$all: [{b: 3}]}}, {a: [{b: 3, k: 4}]});\n  test.throws(() => {\n    match({a: {$all: [{$gt: 4}]}}, {});\n  });\n\n  // $exists\n  match({a: {$exists: true}}, {a: 12});\n  nomatch({a: {$exists: true}}, {b: 12});\n  nomatch({a: {$exists: false}}, {a: 12});\n  match({a: {$exists: false}}, {b: 12});\n\n  match({a: {$exists: true}}, {a: []});\n  nomatch({a: {$exists: true}}, {b: []});\n  nomatch({a: {$exists: false}}, {a: []});\n  match({a: {$exists: false}}, {b: []});\n\n  match({a: {$exists: true}}, {a: [1]});\n  nomatch({a: {$exists: true}}, {b: [1]});\n  nomatch({a: {$exists: false}}, {a: [1]});\n  match({a: {$exists: false}}, {b: [1]});\n\n  match({a: {$exists: 1}}, {a: 5});\n  match({a: {$exists: 0}}, {b: 5});\n\n  nomatch({'a.x': {$exists: false}}, {a: [{}, {x: 5}]});\n  match({'a.x': {$exists: true}}, {a: [{}, {x: 5}]});\n  match({'a.x': {$exists: true}}, {a: [{}, {x: 5}]});\n  match({'a.x': {$exists: true}}, {a: {x: []}});\n  match({'a.x': {$exists: true}}, {a: {x: null}});\n\n  // $mod\n  match({a: {$mod: [10, 1]}}, {a: 11});\n  nomatch({a: {$mod: [10, 1]}}, {a: 12});\n  match({a: {$mod: [10, 1]}}, {a: [10, 11, 12]});\n  nomatch({a: {$mod: [10, 1]}}, {a: [10, 12]});\n  [\n    5,\n    [10],\n    [10, 1, 2],\n    'foo',\n    {bar: 1},\n    [],\n  ].forEach(badMod => {\n    test.throws(() => {\n      match({a: {$mod: badMod}}, {a: 11});\n    });\n  });\n\n  // $eq\n  nomatch({a: {$eq: 1}}, {a: 2});\n  match({a: {$eq: 2}}, {a: 2});\n  nomatch({a: {$eq: [1]}}, {a: [2]});\n\n  match({a: {$eq: [1, 2]}}, {a: [1, 2]});\n  match({a: {$eq: 1}}, {a: [1, 2]});\n  match({a: {$eq: 2}}, {a: [1, 2]});\n  nomatch({a: {$eq: 3}}, {a: [1, 2]});\n  match({'a.b': {$eq: 1}}, {a: [{b: 1}, {b: 2}]});\n  match({'a.b': {$eq: 2}}, {a: [{b: 1}, {b: 2}]});\n  nomatch({'a.b': {$eq: 3}}, {a: [{b: 1}, {b: 2}]});\n\n  match({a: {$eq: {x: 1}}}, {a: {x: 1}});\n  nomatch({a: {$eq: {x: 1}}}, {a: {x: 2}});\n  nomatch({a: {$eq: {x: 1}}}, {a: {x: 1, y: 2}});\n\n  // $ne\n  match({a: {$ne: 1}}, {a: 2});\n  nomatch({a: {$ne: 2}}, {a: 2});\n  match({a: {$ne: [1]}}, {a: [2]});\n\n  nomatch({a: {$ne: [1, 2]}}, {a: [1, 2]}); // all tested against mongodb\n  nomatch({a: {$ne: 1}}, {a: [1, 2]});\n  nomatch({a: {$ne: 2}}, {a: [1, 2]});\n  match({a: {$ne: 3}}, {a: [1, 2]});\n  nomatch({'a.b': {$ne: 1}}, {a: [{b: 1}, {b: 2}]});\n  nomatch({'a.b': {$ne: 2}}, {a: [{b: 1}, {b: 2}]});\n  match({'a.b': {$ne: 3}}, {a: [{b: 1}, {b: 2}]});\n\n  nomatch({a: {$ne: {x: 1}}}, {a: {x: 1}});\n  match({a: {$ne: {x: 1}}}, {a: {x: 2}});\n  match({a: {$ne: {x: 1}}}, {a: {x: 1, y: 2}});\n\n  // This query means: All 'a.b' must be non-5, and some 'a.b' must be >6.\n  match({'a.b': {$ne: 5, $gt: 6}}, {a: [{b: 2}, {b: 10}]});\n  nomatch({'a.b': {$ne: 5, $gt: 6}}, {a: [{b: 2}, {b: 4}]});\n  nomatch({'a.b': {$ne: 5, $gt: 6}}, {a: [{b: 2}, {b: 5}]});\n  nomatch({'a.b': {$ne: 5, $gt: 6}}, {a: [{b: 10}, {b: 5}]});\n  // Should work the same if the branch is at the bottom.\n  match({a: {$ne: 5, $gt: 6}}, {a: [2, 10]});\n  nomatch({a: {$ne: 5, $gt: 6}}, {a: [2, 4]});\n  nomatch({a: {$ne: 5, $gt: 6}}, {a: [2, 5]});\n  nomatch({a: {$ne: 5, $gt: 6}}, {a: [10, 5]});\n\n  // $in\n  match({a: {$in: [1, 2, 3]}}, {a: 2});\n  nomatch({a: {$in: [1, 2, 3]}}, {a: 4});\n  match({a: {$in: [[1], [2], [3]]}}, {a: [2]});\n  nomatch({a: {$in: [[1], [2], [3]]}}, {a: [4]});\n  match({a: {$in: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 2}});\n  nomatch({a: {$in: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 4}});\n\n  match({a: {$in: [1, 2, 3]}}, {a: [2]}); // tested against mongodb\n  match({a: {$in: [{x: 1}, {x: 2}, {x: 3}]}}, {a: [{x: 2}]});\n  match({a: {$in: [1, 2, 3]}}, {a: [4, 2]});\n  nomatch({a: {$in: [1, 2, 3]}}, {a: [4]});\n\n  match({a: {$in: ['x', /foo/i]}}, {a: 'x'});\n  match({a: {$in: ['x', /foo/i]}}, {a: 'fOo'});\n  match({a: {$in: ['x', /foo/i]}}, {a: ['f', 'fOo']});\n  nomatch({a: {$in: ['x', /foo/i]}}, {a: ['f', 'fOx']});\n\n  match({a: {$in: [1, null]}}, {});\n  match({'a.b': {$in: [1, null]}}, {});\n  match({'a.b': {$in: [1, null]}}, {a: {}});\n  match({'a.b': {$in: [1, null]}}, {a: {b: null}});\n  nomatch({'a.b': {$in: [1, null]}}, {a: {b: 5}});\n  nomatch({'a.b': {$in: [1]}}, {a: {b: null}});\n  nomatch({'a.b': {$in: [1]}}, {a: {}});\n  nomatch({'a.b': {$in: [1, null]}}, {a: [{b: 5}]});\n  match({'a.b': {$in: [1, null]}}, {a: [{b: 5}, {}]});\n  nomatch({'a.b': {$in: [1, null]}}, {a: [{b: 5}, []]});\n  nomatch({'a.b': {$in: [1, null]}}, {a: [{b: 5}, 5]});\n\n  // $nin\n  nomatch({a: {$nin: [1, 2, 3]}}, {a: 2});\n  match({a: {$nin: [1, 2, 3]}}, {a: 4});\n  nomatch({a: {$nin: [[1], [2], [3]]}}, {a: [2]});\n  match({a: {$nin: [[1], [2], [3]]}}, {a: [4]});\n  nomatch({a: {$nin: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 2}});\n  match({a: {$nin: [{b: 1}, {b: 2}, {b: 3}]}}, {a: {b: 4}});\n\n  nomatch({a: {$nin: [1, 2, 3]}}, {a: [2]}); // tested against mongodb\n  nomatch({a: {$nin: [{x: 1}, {x: 2}, {x: 3}]}}, {a: [{x: 2}]});\n  nomatch({a: {$nin: [1, 2, 3]}}, {a: [4, 2]});\n  nomatch({'a.b': {$nin: [1, 2, 3]}}, {a: [{b: 4}, {b: 2}]});\n  match({a: {$nin: [1, 2, 3]}}, {a: [4]});\n  match({'a.b': {$nin: [1, 2, 3]}}, {a: [{b: 4}]});\n\n  nomatch({a: {$nin: ['x', /foo/i]}}, {a: 'x'});\n  nomatch({a: {$nin: ['x', /foo/i]}}, {a: 'fOo'});\n  nomatch({a: {$nin: ['x', /foo/i]}}, {a: ['f', 'fOo']});\n  match({a: {$nin: ['x', /foo/i]}}, {a: ['f', 'fOx']});\n\n  nomatch({a: {$nin: [1, null]}}, {});\n  nomatch({'a.b': {$nin: [1, null]}}, {});\n  nomatch({'a.b': {$nin: [1, null]}}, {a: {}});\n  nomatch({'a.b': {$nin: [1, null]}}, {a: {b: null}});\n  match({'a.b': {$nin: [1, null]}}, {a: {b: 5}});\n  match({'a.b': {$nin: [1]}}, {a: {b: null}});\n  match({'a.b': {$nin: [1]}}, {a: {}});\n  match({'a.b': {$nin: [1, null]}}, {a: [{b: 5}]});\n  nomatch({'a.b': {$nin: [1, null]}}, {a: [{b: 5}, {}]});\n  match({'a.b': {$nin: [1, null]}}, {a: [{b: 5}, []]});\n  match({'a.b': {$nin: [1, null]}}, {a: [{b: 5}, 5]});\n\n  // $size\n  match({a: {$size: 0}}, {a: []});\n  match({a: {$size: 1}}, {a: [2]});\n  match({a: {$size: 2}}, {a: [2, 2]});\n  nomatch({a: {$size: 0}}, {a: [2]});\n  nomatch({a: {$size: 1}}, {a: []});\n  nomatch({a: {$size: 1}}, {a: [2, 2]});\n  nomatch({a: {$size: 0}}, {a: '2'});\n  nomatch({a: {$size: 1}}, {a: '2'});\n  nomatch({a: {$size: 2}}, {a: '2'});\n\n  nomatch({a: {$size: 2}}, {a: [[2, 2]]}); // tested against mongodb\n\n\n  // $bitsAllClear - number\n  match({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0});\n  match({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0b10000});\n  nomatch({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0b1});\n  nomatch({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0b10});\n  nomatch({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0b100});\n  nomatch({a: {$bitsAllClear: [0, 1, 2, 3]}}, {a: 0b1000});\n\n  // $bitsAllClear - buffer\n  match({a: {$bitsAllClear: new Uint8Array([3])}}, {a: new Uint8Array([4])});\n  match({a: {$bitsAllClear: new Uint8Array([0, 1])}}, {a: new Uint8Array([255])});  // 256 should not be set for 255.\n  match({a: {$bitsAllClear: new Uint8Array([3])}}, {a: 4 });\n\n  match({a: {$bitsAllClear: new Uint8Array([3])}}, {a: 0 });\n\n  // $bitsAllSet - number\n  match({a: {$bitsAllSet: [0, 1, 2, 3]}}, {a: 0b1111});\n  nomatch({a: {$bitsAllSet: [0, 1, 2, 3]}}, {a: 0b111});\n  nomatch({a: {$bitsAllSet: [0, 1, 2, 3]}}, {a: 256});\n  nomatch({a: {$bitsAllSet: [0, 1, 2, 3]}}, {a: 50000});\n  match({a: {$bitsAllSet: [0, 1, 2]}}, {a: 15});\n  match({a: {$bitsAllSet: [0, 12]}}, {a: 0b1000000000001});\n  nomatch({a: {$bitsAllSet: [0, 12]}}, {a: 0b1000000000000});\n  nomatch({a: {$bitsAllSet: [0, 12]}}, {a: 0b1});\n\n  // $bitsAllSet - buffer\n  match({a: {$bitsAllSet: new Uint8Array([3])}}, {a: new Uint8Array([3])});\n  match({a: {$bitsAllSet: new Uint8Array([7])}}, {a: new Uint8Array([15])});\n  match({a: {$bitsAllSet: new Uint8Array([3])}}, {a: 3 });\n\n  // $bitsAnySet - number\n  match({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0b1});\n  match({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0b10});\n  match({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0b100});\n  match({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0b1000});\n  match({a: {$bitsAnySet: [4]}}, {a: 0b10000});\n  nomatch({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0b10000});\n  nomatch({a: {$bitsAnySet: [0, 1, 2, 3]}}, {a: 0});\n\n  // $bitsAnySet - buffer\n  match({a: {$bitsAnySet: new Uint8Array([3])}}, {a: new Uint8Array([7])});\n  match({a: {$bitsAnySet: new Uint8Array([15])}}, {a: new Uint8Array([7])});\n  match({a: {$bitsAnySet: new Uint8Array([3])}}, {a: 1 });\n\n  // $bitsAnyClear - number\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b1});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b10});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b100});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b1000});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b10000});\n  nomatch({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b1111});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b111});\n  nomatch({a: {$bitsAnyClear: [0, 1, 2]}}, {a: 0b111});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b11});\n  nomatch({a: {$bitsAnyClear: [0, 1]}}, {a: 0b11});\n  match({a: {$bitsAnyClear: [0, 1, 2, 3]}}, {a: 0b1});\n  nomatch({a: {$bitsAnyClear: [0]}}, {a: 0b1});\n  nomatch({a: {$bitsAnyClear: [4]}}, {a: 0b10000});\n\n  // $bitsAnyClear - buffer\n  match({a: {$bitsAnyClear: new Uint8Array([8])}}, {a: new Uint8Array([7])});\n  match({a: {$bitsAnyClear: new Uint8Array([1])}}, {a: new Uint8Array([0])});\n  match({a: {$bitsAnyClear: new Uint8Array([1])}}, {a: 4 });\n\n  // taken from: https://github.com/mongodb/mongo/blob/master/jstests/core/bittest.js\n  const c = new LocalCollection;\n  function matchCount(query, count) {\n    const matches = c.find(query).count();\n    if (matches !== count) {\n      test.fail({message: `minimongo match count failure: matched ${matches} times, but should match ${count} times`,\n        query: JSON.stringify(query),\n        count: JSON.stringify(count),\n      });\n    }\n  }\n\n  // Tests on numbers.\n\n  c.insert({a: 0});\n  c.insert({a: 1});\n  c.insert({a: 54});\n  c.insert({a: 88});\n  c.insert({a: 255});\n\n  // Tests with bitmask.\n  matchCount({a: {$bitsAllSet: 0}}, 5);\n  matchCount({a: {$bitsAllSet: 1}}, 2);\n  matchCount({a: {$bitsAllSet: 16}}, 3);\n  matchCount({a: {$bitsAllSet: 54}}, 2);\n  matchCount({a: {$bitsAllSet: 55}}, 1);\n  matchCount({a: {$bitsAllSet: 88}}, 2);\n  matchCount({a: {$bitsAllSet: 255}}, 1);\n  matchCount({a: {$bitsAllClear: 0}}, 5);\n  matchCount({a: {$bitsAllClear: 1}}, 3);\n  matchCount({a: {$bitsAllClear: 16}}, 2);\n  matchCount({a: {$bitsAllClear: 129}}, 3);\n  matchCount({a: {$bitsAllClear: 255}}, 1);\n  matchCount({a: {$bitsAnySet: 0}}, 0);\n  matchCount({a: {$bitsAnySet: 9}}, 3);\n  matchCount({a: {$bitsAnySet: 255}}, 4);\n  matchCount({a: {$bitsAnyClear: 0}}, 0);\n  matchCount({a: {$bitsAnyClear: 18}}, 3);\n  matchCount({a: {$bitsAnyClear: 24}}, 3);\n  matchCount({a: {$bitsAnyClear: 255}}, 4);\n\n  // Tests with array of bit positions.\n  matchCount({a: {$bitsAllSet: []}}, 5);\n  matchCount({a: {$bitsAllSet: [0]}}, 2);\n  matchCount({a: {$bitsAllSet: [4]}}, 3);\n  matchCount({a: {$bitsAllSet: [1, 2, 4, 5]}}, 2);\n  matchCount({a: {$bitsAllSet: [0, 1, 2, 4, 5]}}, 1);\n  matchCount({a: {$bitsAllSet: [3, 4, 6]}}, 2);\n  matchCount({a: {$bitsAllSet: [0, 1, 2, 3, 4, 5, 6, 7]}}, 1);\n  matchCount({a: {$bitsAllClear: []}}, 5);\n  matchCount({a: {$bitsAllClear: [0]}}, 3);\n  matchCount({a: {$bitsAllClear: [4]}}, 2);\n  matchCount({a: {$bitsAllClear: [1, 7]}}, 3);\n  matchCount({a: {$bitsAllClear: [0, 1, 2, 3, 4, 5, 6, 7]}}, 1);\n  matchCount({a: {$bitsAnySet: []}}, 0);\n  matchCount({a: {$bitsAnySet: [1, 3]}}, 3);\n  matchCount({a: {$bitsAnySet: [0, 1, 2, 3, 4, 5, 6, 7]}}, 4);\n  matchCount({a: {$bitsAnyClear: []}}, 0);\n  matchCount({a: {$bitsAnyClear: [1, 4]}}, 3);\n  matchCount({a: {$bitsAnyClear: [3, 4]}}, 3);\n  matchCount({a: {$bitsAnyClear: [0, 1, 2, 3, 4, 5, 6, 7]}}, 4);\n\n  // Tests with multiple predicates.\n  matchCount({a: {$bitsAllSet: 54, $bitsAllClear: 201}}, 1);\n\n  // Tests on negative numbers\n\n  c.remove({});\n  c.insert({a: -0});\n  c.insert({a: -1});\n  c.insert({a: -54});\n\n  // Tests with bitmask.\n  matchCount({a: {$bitsAllSet: 0}}, 3);\n  matchCount({a: {$bitsAllSet: 2}}, 2);\n  matchCount({a: {$bitsAllSet: 127}}, 1);\n  matchCount({a: {$bitsAllSet: 74}}, 2);\n  matchCount({a: {$bitsAllClear: 0}}, 3);\n  matchCount({a: {$bitsAllClear: 53}}, 2);\n  matchCount({a: {$bitsAllClear: 127}}, 1);\n  matchCount({a: {$bitsAnySet: 0}}, 0);\n  matchCount({a: {$bitsAnySet: 2}}, 2);\n  matchCount({a: {$bitsAnySet: 127}}, 2);\n  matchCount({a: {$bitsAnyClear: 0}}, 0);\n  matchCount({a: {$bitsAnyClear: 53}}, 2);\n  matchCount({a: {$bitsAnyClear: 127}}, 2);\n\n  // Tests with array of bit positions.\n  const allPositions = [];\n  for (let i = 0; i < 64; i++) {\n    allPositions.push(i);\n  }\n\n  matchCount({a: {$bitsAllSet: []}}, 3);\n  matchCount({a: {$bitsAllSet: [1]}}, 2);\n  matchCount({a: {$bitsAllSet: allPositions}}, 1);\n  matchCount({a: {$bitsAllSet: [1, 7, 6, 3, 100]}}, 2);\n  matchCount({a: {$bitsAllClear: []}}, 3);\n  matchCount({a: {$bitsAllClear: [5, 4, 2, 0]}}, 2);\n  matchCount({a: {$bitsAllClear: allPositions}}, 1);\n  matchCount({a: {$bitsAnySet: []}}, 0);\n  matchCount({a: {$bitsAnySet: [1]}}, 2);\n  matchCount({a: {$bitsAnySet: allPositions}}, 2);\n  matchCount({a: {$bitsAnyClear: []}}, 0);\n  matchCount({a: {$bitsAnyClear: [0, 2, 4, 5, 100]}}, 2);\n  matchCount({a: {$bitsAnyClear: allPositions}}, 2);\n\n  // Tests with multiple predicates.\n  matchCount({a: {$bitsAllSet: 74, $bitsAllClear: 53}}, 1);\n\n  // Tests on BinData.\n\n  c.remove({});\n  c.insert({a: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')});\n  c.insert({a: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')});\n  c.insert({a: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')});\n  c.insert({a: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')});\n\n  // Tests with binary string bitmask.\n  matchCount({a: {$bitsAllSet: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 4);\n  matchCount({a: {$bitsAllSet: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 3);\n  matchCount({a: {$bitsAllSet: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')}}, 2);\n  matchCount({a: {$bitsAllSet: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')}}, 1);\n  matchCount({a: {$bitsAllClear: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 4);\n  matchCount({a: {$bitsAllClear: EJSON.parse('{\"$binary\": \"AAyfAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 3);\n  matchCount({a: {$bitsAllClear: EJSON.parse('{\"$binary\": \"JAyfqwetkqwklEWRbWERKKJREtbq\"}')}}, 2);\n  matchCount({a: {$bitsAllClear: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')}}, 1);\n  matchCount({a: {$bitsAnySet: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 0);\n  matchCount({a: {$bitsAnySet: EJSON.parse('{\"$binary\": \"AAyfAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 1);\n  matchCount({a: {$bitsAnySet: EJSON.parse('{\"$binary\": \"JAyfqwetkqwklEWRbWERKKJREtbq\"}')}}, 2);\n  matchCount({a: {$bitsAnySet: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')}}, 3);\n  matchCount({a: {$bitsAnyClear: EJSON.parse('{\"$binary\": \"AAAAAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 0);\n  matchCount({a: {$bitsAnyClear: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}')}}, 1);\n  matchCount({a: {$bitsAnyClear: EJSON.parse('{\"$binary\": \"JANgqwetkqwklEWRbWERKKJREtbq\"}')}}, 2);\n  matchCount({a: {$bitsAnyClear: EJSON.parse('{\"$binary\": \"////////////////////////////\"}')}}, 3);\n\n  // Tests with multiple predicates.\n  matchCount({\n    a: {\n      $bitsAllSet: EJSON.parse('{\"$binary\": \"AANgAAAAAAAAAAAAAAAAAAAAAAAA\"}'),\n      $bitsAllClear: EJSON.parse('{\"$binary\": \"//yf////////////////////////\"}'),\n    },\n  }, 1);\n\n  c.remove({});\n\n  nomatch({a: {$bitsAllSet: 1}}, {a: false});\n  nomatch({a: {$bitsAllSet: 1}}, {a: NaN});\n  nomatch({a: {$bitsAllSet: 1}}, {a: Infinity});\n  nomatch({a: {$bitsAllSet: 1}}, {a: null});\n  nomatch({a: {$bitsAllSet: 1}}, {a: 'asdf'});\n  nomatch({a: {$bitsAllSet: 1}}, {a: ['a', 'b']});\n  nomatch({a: {$bitsAllSet: 1}}, {a: {foo: 'bar'}});\n  nomatch({a: {$bitsAllSet: 1}}, {a: 1.2});\n  nomatch({a: {$bitsAllSet: 1}}, {a: '1'});\n\n  [\n    false,\n    NaN,\n    Infinity,\n    null,\n    'asdf',\n    ['a', 'b'],\n    {foo: 'bar'},\n    1.2,\n    '1',\n    [0, -1],\n  ].forEach(badValue => {\n    test.throws(() => {\n      match({a: {$bitsAllSet: badValue}}, {a: 42});\n    });\n  });\n\n  // $type\n  match({a: {$type: 1}}, {a: 1.1});\n  match({a: {$type: 1}}, {a: 1});\n  nomatch({a: {$type: 1}}, {a: '1'});\n  match({a: {$type: 2}}, {a: '1'});\n  nomatch({a: {$type: 2}}, {a: 1});\n  match({a: {$type: 3}}, {a: {}});\n  match({a: {$type: 3}}, {a: {b: 2}});\n  nomatch({a: {$type: 3}}, {a: []});\n  nomatch({a: {$type: 3}}, {a: [1]});\n  nomatch({a: {$type: 3}}, {a: null});\n  match({a: {$type: 5}}, {a: EJSON.newBinary(0)});\n  match({a: {$type: 5}}, {a: EJSON.newBinary(4)});\n  nomatch({a: {$type: 5}}, {a: []});\n  nomatch({a: {$type: 5}}, {a: [42]});\n  match({a: {$type: 7}}, {a: new MongoID.ObjectID()});\n  nomatch({a: {$type: 7}}, {a: '1234567890abcd1234567890'});\n  match({a: {$type: 8}}, {a: true});\n  match({a: {$type: 8}}, {a: false});\n  nomatch({a: {$type: 8}}, {a: 'true'});\n  nomatch({a: {$type: 8}}, {a: 0});\n  nomatch({a: {$type: 8}}, {a: null});\n  nomatch({a: {$type: 8}}, {a: ''});\n  nomatch({a: {$type: 8}}, {});\n  match({a: {$type: 9}}, {a: new Date});\n  nomatch({a: {$type: 9}}, {a: +new Date});\n  match({a: {$type: 10}}, {a: null});\n  nomatch({a: {$type: 10}}, {a: false});\n  nomatch({a: {$type: 10}}, {a: ''});\n  nomatch({a: {$type: 10}}, {a: 0});\n  nomatch({a: {$type: 10}}, {});\n  match({a: {$type: 11}}, {a: /x/});\n  nomatch({a: {$type: 11}}, {a: 'x'});\n  nomatch({a: {$type: 11}}, {});\n\n  // The normal rule for {$type:4} (4 means array) is that it NOT good enough to\n  // just have an array that's the leaf that matches the path.  (An array inside\n  // that array is good, though.)\n  nomatch({a: {$type: 4}}, {a: []});\n  nomatch({a: {$type: 4}}, {a: [1]}); // tested against mongodb\n  match({a: {$type: 1}}, {a: [1]});\n  nomatch({a: {$type: 2}}, {a: [1]});\n  match({a: {$type: 1}}, {a: ['1', 1]});\n  match({a: {$type: 2}}, {a: ['1', 1]});\n  nomatch({a: {$type: 3}}, {a: ['1', 1]});\n  nomatch({a: {$type: 4}}, {a: ['1', 1]});\n  nomatch({a: {$type: 1}}, {a: ['1', []]});\n  match({a: {$type: 2}}, {a: ['1', []]});\n  match({a: {$type: 4}}, {a: ['1', []]}); // tested against mongodb\n  // An exception to the normal rule is that an array found via numeric index is\n  // examined itself, and its elements are not.\n  match({'a.0': {$type: 4}}, {a: [[0]]});\n  nomatch({'a.0': {$type: 1}}, {a: [[0]]});\n\n  // regular expressions\n  match({a: /a/}, {a: 'cat'});\n  nomatch({a: /a/}, {a: 'cut'});\n  nomatch({a: /a/}, {a: 'CAT'});\n  match({a: /a/i}, {a: 'CAT'});\n  match({a: /a/}, {a: ['foo', 'bar']});  // search within array...\n  nomatch({a: /,/}, {a: ['foo', 'bar']});  // but not by stringifying\n  match({a: {$regex: 'a'}}, {a: ['foo', 'bar']});\n  nomatch({a: {$regex: ','}}, {a: ['foo', 'bar']});\n  match({a: {$regex: /a/}}, {a: 'cat'});\n  nomatch({a: {$regex: /a/}}, {a: 'cut'});\n  nomatch({a: {$regex: /a/}}, {a: 'CAT'});\n  match({a: {$regex: /a/i}}, {a: 'CAT'});\n  match({a: {$regex: /a/, $options: 'i'}}, {a: 'CAT'}); // tested\n  match({a: {$regex: /a/i, $options: 'i'}}, {a: 'CAT'}); // tested\n  nomatch({a: {$regex: /a/i, $options: ''}}, {a: 'CAT'}); // tested\n  match({a: {$regex: 'a'}}, {a: 'cat'});\n  nomatch({a: {$regex: 'a'}}, {a: 'cut'});\n  nomatch({a: {$regex: 'a'}}, {a: 'CAT'});\n  match({a: {$regex: 'a', $options: 'i'}}, {a: 'CAT'});\n  match({a: {$regex: '', $options: 'i'}}, {a: 'foo'});\n  nomatch({a: {$regex: '', $options: 'i'}}, {});\n  nomatch({a: {$regex: '', $options: 'i'}}, {a: 5});\n  nomatch({a: /undefined/}, {});\n  nomatch({a: {$regex: 'undefined'}}, {});\n  nomatch({a: /xxx/}, {});\n  nomatch({a: {$regex: 'xxx'}}, {});\n\n  // GitHub issue #2817:\n  // Regexps with a global flag ('g') keep a state when tested against the same\n  // string. Selector shouldn't return different result for similar documents\n  // because of this state.\n  const reusedRegexp = /sh/ig;\n  match({a: reusedRegexp}, {a: 'Shorts'});\n  match({a: reusedRegexp}, {a: 'Shorts'});\n  match({a: reusedRegexp}, {a: 'Shorts'});\n\n  match({a: {$regex: reusedRegexp}}, {a: 'Shorts'});\n  match({a: {$regex: reusedRegexp}}, {a: 'Shorts'});\n  match({a: {$regex: reusedRegexp}}, {a: 'Shorts'});\n\n  test.throws(() => {\n    match({a: {$options: 'i'}}, {a: 12});\n  });\n\n  match({a: /a/}, {a: ['dog', 'cat']});\n  nomatch({a: /a/}, {a: ['dog', 'puppy']});\n\n  // we don't support regexps in minimongo very well (eg, there's no EJSON\n  // encoding so it won't go over the wire), but run these tests anyway\n  match({a: /a/}, {a: /a/});\n  match({a: /a/}, {a: ['x', /a/]});\n  nomatch({a: /a/}, {a: /a/i});\n  nomatch({a: /a/m}, {a: /a/});\n  nomatch({a: /a/}, {a: /b/});\n  nomatch({a: /5/}, {a: 5});\n  nomatch({a: /t/}, {a: true});\n  match({a: /m/i}, {a: ['x', 'xM']});\n\n  test.throws(() => {\n    match({a: {$regex: /a/, $options: 'x'}}, {a: 'cat'});\n  });\n  test.throws(() => {\n    match({a: {$regex: /a/, $options: 's'}}, {a: 'cat'});\n  });\n\n  // $not\n  match({x: {$not: {$gt: 7}}}, {x: 6});\n  nomatch({x: {$not: {$gt: 7}}}, {x: 8});\n  match({x: {$not: {$lt: 10, $gt: 7}}}, {x: 11});\n  nomatch({x: {$not: {$lt: 10, $gt: 7}}}, {x: 9});\n  match({x: {$not: {$lt: 10, $gt: 7}}}, {x: 6});\n\n  match({x: {$not: {$gt: 7}}}, {x: [2, 3, 4]});\n  match({'x.y': {$not: {$gt: 7}}}, {x: [{y: 2}, {y: 3}, {y: 4}]});\n  nomatch({x: {$not: {$gt: 7}}}, {x: [2, 3, 4, 10]});\n  nomatch({'x.y': {$not: {$gt: 7}}}, {x: [{y: 2}, {y: 3}, {y: 4}, {y: 10}]});\n\n  match({x: {$not: /a/}}, {x: 'dog'});\n  nomatch({x: {$not: /a/}}, {x: 'cat'});\n  match({x: {$not: /a/}}, {x: ['dog', 'puppy']});\n  nomatch({x: {$not: /a/}}, {x: ['kitten', 'cat']});\n\n  // dotted keypaths: bare values\n  match({'a.b': 1}, {a: {b: 1}});\n  nomatch({'a.b': 1}, {a: {b: 2}});\n  match({'a.b': [1, 2, 3]}, {a: {b: [1, 2, 3]}});\n  nomatch({'a.b': [1, 2, 3]}, {a: {b: [4]}});\n  match({'a.b': /a/}, {a: {b: 'cat'}});\n  nomatch({'a.b': /a/}, {a: {b: 'dog'}});\n  match({'a.b.c': null}, {});\n  match({'a.b.c': null}, {a: 1});\n  match({'a.b': null}, {a: 1});\n  match({'a.b.c': null}, {a: {b: 4}});\n\n  // dotted keypaths, nulls, numeric indices, arrays\n  nomatch({'a.b': null}, {a: [1]});\n  match({'a.b': []}, {a: {b: []}});\n  const big = {a: [{b: 1}, 2, {}, {b: [3, 4]}]};\n  match({'a.b': 1}, big);\n  match({'a.b': [3, 4]}, big);\n  match({'a.b': 3}, big);\n  match({'a.b': 4}, big);\n  match({'a.b': null}, big);  // matches on slot 2\n  match({'a.1': 8}, {a: [7, 8, 9]});\n  nomatch({'a.1': 7}, {a: [7, 8, 9]});\n  nomatch({'a.1': null}, {a: [7, 8, 9]});\n  match({'a.1': [8, 9]}, {a: [7, [8, 9]]});\n  nomatch({'a.1': 6}, {a: [[6, 7], [8, 9]]});\n  nomatch({'a.1': 7}, {a: [[6, 7], [8, 9]]});\n  nomatch({'a.1': 8}, {a: [[6, 7], [8, 9]]});\n  nomatch({'a.1': 9}, {a: [[6, 7], [8, 9]]});\n  match({'a.1': 2}, {a: [0, {1: 2}, 3]});\n  match({'a.1': {1: 2}}, {a: [0, {1: 2}, 3]});\n  match({'x.1.y': 8}, {x: [7, {y: 8}, 9]});\n  // comes from trying '1' as key in the plain object\n  match({'x.1.y': null}, {x: [7, {y: 8}, 9]});\n  match({'a.1.b': 9}, {a: [7, {b: 9}, {1: {b: 'foo'}}]});\n  match({'a.1.b': 'foo'}, {a: [7, {b: 9}, {1: {b: 'foo'}}]});\n  match({'a.1.b': null}, {a: [7, {b: 9}, {1: {b: 'foo'}}]});\n  match({'a.1.b': 2}, {a: [1, [{b: 2}], 3]});\n  nomatch({'a.1.b': null}, {a: [1, [{b: 2}], 3]});\n  // this is new behavior in mongo 2.5\n  nomatch({'a.0.b': null}, {a: [5]});\n  match({'a.1': 4}, {a: [{1: 4}, 5]});\n  match({'a.1': 5}, {a: [{1: 4}, 5]});\n  nomatch({'a.1': null}, {a: [{1: 4}, 5]});\n  match({'a.1.foo': 4}, {a: [{1: {foo: 4}}, {foo: 5}]});\n  match({'a.1.foo': 5}, {a: [{1: {foo: 4}}, {foo: 5}]});\n  match({'a.1.foo': null}, {a: [{1: {foo: 4}}, {foo: 5}]});\n\n  // trying to access a dotted field that is undefined at some point\n  // down the chain\n  nomatch({'a.b': 1}, {x: 2});\n  nomatch({'a.b.c': 1}, {a: {x: 2}});\n  nomatch({'a.b.c': 1}, {a: {b: {x: 2}}});\n  nomatch({'a.b.c': 1}, {a: {b: 1}});\n  nomatch({'a.b.c': 1}, {a: {b: 0}});\n\n  // dotted keypaths: literal objects\n  match({'a.b': {c: 1}}, {a: {b: {c: 1}}});\n  nomatch({'a.b': {c: 1}}, {a: {b: {c: 2}}});\n  nomatch({'a.b': {c: 1}}, {a: {b: 2}});\n  match({'a.b': {c: 1, d: 2}}, {a: {b: {c: 1, d: 2}}});\n  nomatch({'a.b': {c: 1, d: 2}}, {a: {b: {c: 1, d: 1}}});\n  nomatch({'a.b': {c: 1, d: 2}}, {a: {b: {d: 2}}});\n\n  // dotted keypaths: $ operators\n  match({'a.b': {$in: [1, 2, 3]}}, {a: {b: [2]}}); // tested against mongodb\n  match({'a.b': {$in: [{x: 1}, {x: 2}, {x: 3}]}}, {a: {b: [{x: 2}]}});\n  match({'a.b': {$in: [1, 2, 3]}}, {a: {b: [4, 2]}});\n  nomatch({'a.b': {$in: [1, 2, 3]}}, {a: {b: [4]}});\n\n  // $or\n  test.throws(() => {\n    match({$or: []}, {});\n  });\n  test.throws(() => {\n    match({$or: [5]}, {});\n  });\n  test.throws(() => {\n    match({$or: []}, {a: 1});\n  });\n  match({$or: [{a: 1}]}, {a: 1});\n  nomatch({$or: [{b: 2}]}, {a: 1});\n  match({$or: [{a: 1}, {b: 2}]}, {a: 1});\n  nomatch({$or: [{c: 3}, {d: 4}]}, {a: 1});\n  match({$or: [{a: 1}, {b: 2}]}, {a: [1, 2, 3]});\n  nomatch({$or: [{a: 1}, {b: 2}]}, {c: [1, 2, 3]});\n  nomatch({$or: [{a: 1}, {b: 2}]}, {a: [2, 3, 4]});\n  match({$or: [{a: 1}, {a: 2}]}, {a: 1});\n  match({$or: [{a: 1}, {a: 2}], b: 2}, {a: 1, b: 2});\n  nomatch({$or: [{a: 2}, {a: 3}], b: 2}, {a: 1, b: 2});\n  nomatch({$or: [{a: 1}, {a: 2}], b: 3}, {a: 1, b: 2});\n\n  // Combining $or with equality\n  match({x: 1, $or: [{a: 1}, {b: 1}]}, {x: 1, b: 1});\n  match({$or: [{a: 1}, {b: 1}], x: 1}, {x: 1, b: 1});\n  nomatch({x: 1, $or: [{a: 1}, {b: 1}]}, {b: 1});\n  nomatch({x: 1, $or: [{a: 1}, {b: 1}]}, {x: 1});\n\n  // $or and $lt, $lte, $gt, $gte\n  match({$or: [{a: {$lte: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$or: [{a: {$lt: 1}}, {a: 2}]}, {a: 1});\n  match({$or: [{a: {$gte: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$or: [{a: {$gt: 1}}, {a: 2}]}, {a: 1});\n  match({$or: [{b: {$gt: 1}}, {b: {$lt: 3}}]}, {b: 2});\n  nomatch({$or: [{b: {$lt: 1}}, {b: {$gt: 3}}]}, {b: 2});\n\n  // $or and $in\n  match({$or: [{a: {$in: [1, 2, 3]}}]}, {a: 1});\n  nomatch({$or: [{a: {$in: [4, 5, 6]}}]}, {a: 1});\n  match({$or: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  match({$or: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  nomatch({$or: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  match({$or: [{a: {$in: [1, 2, 3]}}, {b: {$in: [1, 2, 3]}}]}, {b: 2});\n  nomatch({$or: [{a: {$in: [1, 2, 3]}}, {b: {$in: [4, 5, 6]}}]}, {b: 2});\n\n  // $or and $nin\n  nomatch({$or: [{a: {$nin: [1, 2, 3]}}]}, {a: 1});\n  match({$or: [{a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$or: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {b: 2});\n  nomatch({$or: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {a: 1, b: 2});\n  match({$or: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [4, 5, 6]}}]}, {b: 2});\n\n  // $or and dot-notation\n  match({$or: [{'a.b': 1}, {'a.b': 2}]}, {a: {b: 1}});\n  match({$or: [{'a.b': 1}, {'a.c': 1}]}, {a: {b: 1}});\n  nomatch({$or: [{'a.b': 2}, {'a.c': 1}]}, {a: {b: 1}});\n\n  // $or and nested objects\n  match({$or: [{a: {b: 1, c: 2}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n  nomatch({$or: [{a: {b: 1, c: 3}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n\n  // $or and regexes\n  match({$or: [{a: /a/}]}, {a: 'cat'});\n  nomatch({$or: [{a: /o/}]}, {a: 'cat'});\n  match({$or: [{a: /a/}, {a: /o/}]}, {a: 'cat'});\n  nomatch({$or: [{a: /i/}, {a: /o/}]}, {a: 'cat'});\n  match({$or: [{a: /i/}, {b: /o/}]}, {a: 'cat', b: 'dog'});\n\n  // $or and $ne\n  match({$or: [{a: {$ne: 1}}]}, {});\n  nomatch({$or: [{a: {$ne: 1}}]}, {a: 1});\n  match({$or: [{a: {$ne: 1}}]}, {a: 2});\n  match({$or: [{a: {$ne: 1}}]}, {b: 1});\n  match({$or: [{a: {$ne: 1}}, {a: {$ne: 2}}]}, {a: 1});\n  match({$or: [{a: {$ne: 1}}, {b: {$ne: 1}}]}, {a: 1});\n  nomatch({$or: [{a: {$ne: 1}}, {b: {$ne: 2}}]}, {a: 1, b: 2});\n\n  // $or and $not\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}]}, {});\n  nomatch({$or: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 1});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 2});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$not: {$mod: [10, 2]}}}]}, {a: 1});\n  nomatch({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 1});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 2});\n  match({$or: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 3});\n  // this is possibly an open-ended task, so we stop here ...\n\n  // $nor\n  test.throws(() => {\n    match({$nor: []}, {});\n  });\n  test.throws(() => {\n    match({$nor: [5]}, {});\n  });\n  test.throws(() => {\n    match({$nor: []}, {a: 1});\n  });\n  nomatch({$nor: [{a: 1}]}, {a: 1});\n  match({$nor: [{b: 2}]}, {a: 1});\n  nomatch({$nor: [{a: 1}, {b: 2}]}, {a: 1});\n  match({$nor: [{c: 3}, {d: 4}]}, {a: 1});\n  nomatch({$nor: [{a: 1}, {b: 2}]}, {a: [1, 2, 3]});\n  match({$nor: [{a: 1}, {b: 2}]}, {c: [1, 2, 3]});\n  match({$nor: [{a: 1}, {b: 2}]}, {a: [2, 3, 4]});\n  nomatch({$nor: [{a: 1}, {a: 2}]}, {a: 1});\n\n  // $nor and $lt, $lte, $gt, $gte\n  nomatch({$nor: [{a: {$lte: 1}}, {a: 2}]}, {a: 1});\n  match({$nor: [{a: {$lt: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$nor: [{a: {$gte: 1}}, {a: 2}]}, {a: 1});\n  match({$nor: [{a: {$gt: 1}}, {a: 2}]}, {a: 1});\n  nomatch({$nor: [{b: {$gt: 1}}, {b: {$lt: 3}}]}, {b: 2});\n  match({$nor: [{b: {$lt: 1}}, {b: {$gt: 3}}]}, {b: 2});\n\n  // $nor and $in\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}]}, {a: 1});\n  match({$nor: [{a: {$in: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  match({$nor: [{a: {$in: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  nomatch({$nor: [{a: {$in: [1, 2, 3]}}, {b: {$in: [1, 2, 3]}}]}, {b: 2});\n  match({$nor: [{a: {$in: [1, 2, 3]}}, {b: {$in: [4, 5, 6]}}]}, {b: 2});\n\n  // $nor and $nin\n  match({$nor: [{a: {$nin: [1, 2, 3]}}]}, {a: 1});\n  nomatch({$nor: [{a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  match({$nor: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {a: 1});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {b: 2});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: 2}]}, {c: 3});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {b: 2});\n  match({$nor: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {a: 1, b: 2});\n  nomatch({$nor: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [4, 5, 6]}}]}, {b: 2});\n\n  // $nor and dot-notation\n  nomatch({$nor: [{'a.b': 1}, {'a.b': 2}]}, {a: {b: 1}});\n  nomatch({$nor: [{'a.b': 1}, {'a.c': 1}]}, {a: {b: 1}});\n  match({$nor: [{'a.b': 2}, {'a.c': 1}]}, {a: {b: 1}});\n\n  // $nor and nested objects\n  nomatch({$nor: [{a: {b: 1, c: 2}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n  match({$nor: [{a: {b: 1, c: 3}}, {a: {b: 2, c: 1}}]}, {a: {b: 1, c: 2}});\n\n  // $nor and regexes\n  nomatch({$nor: [{a: /a/}]}, {a: 'cat'});\n  match({$nor: [{a: /o/}]}, {a: 'cat'});\n  nomatch({$nor: [{a: /a/}, {a: /o/}]}, {a: 'cat'});\n  match({$nor: [{a: /i/}, {a: /o/}]}, {a: 'cat'});\n  nomatch({$nor: [{a: /i/}, {b: /o/}]}, {a: 'cat', b: 'dog'});\n\n  // $nor and $ne\n  nomatch({$nor: [{a: {$ne: 1}}]}, {});\n  match({$nor: [{a: {$ne: 1}}]}, {a: 1});\n  nomatch({$nor: [{a: {$ne: 1}}]}, {a: 2});\n  nomatch({$nor: [{a: {$ne: 1}}]}, {b: 1});\n  nomatch({$nor: [{a: {$ne: 1}}, {a: {$ne: 2}}]}, {a: 1});\n  nomatch({$nor: [{a: {$ne: 1}}, {b: {$ne: 1}}]}, {a: 1});\n  match({$nor: [{a: {$ne: 1}}, {b: {$ne: 2}}]}, {a: 1, b: 2});\n\n  // $nor and $not\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}]}, {});\n  match({$nor: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 1});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}]}, {a: 2});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$not: {$mod: [10, 2]}}}]}, {a: 1});\n  match({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 1});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 2});\n  nomatch({$nor: [{a: {$not: {$mod: [10, 1]}}}, {a: {$mod: [10, 2]}}]}, {a: 3});\n\n  // $and\n\n  test.throws(() => {\n    match({$and: []}, {});\n  });\n  test.throws(() => {\n    match({$and: [5]}, {});\n  });\n  test.throws(() => {\n    match({$and: []}, {a: 1});\n  });\n  match({$and: [{a: 1}]}, {a: 1});\n  nomatch({$and: [{a: 1}, {a: 2}]}, {a: 1});\n  nomatch({$and: [{a: 1}, {b: 1}]}, {a: 1});\n  match({$and: [{a: 1}, {b: 2}]}, {a: 1, b: 2});\n  nomatch({$and: [{a: 1}, {b: 1}]}, {a: 1, b: 2});\n  match({$and: [{a: 1}, {b: 2}], c: 3}, {a: 1, b: 2, c: 3});\n  nomatch({$and: [{a: 1}, {b: 2}], c: 4}, {a: 1, b: 2, c: 3});\n\n  // $and and regexes\n  match({$and: [{a: /a/}]}, {a: 'cat'});\n  match({$and: [{a: /a/i}]}, {a: 'CAT'});\n  nomatch({$and: [{a: /o/}]}, {a: 'cat'});\n  nomatch({$and: [{a: /a/}, {a: /o/}]}, {a: 'cat'});\n  match({$and: [{a: /a/}, {b: /o/}]}, {a: 'cat', b: 'dog'});\n  nomatch({$and: [{a: /a/}, {b: /a/}]}, {a: 'cat', b: 'dog'});\n\n  // $and, dot-notation, and nested objects\n  match({$and: [{'a.b': 1}]}, {a: {b: 1}});\n  match({$and: [{a: {b: 1}}]}, {a: {b: 1}});\n  nomatch({$and: [{'a.b': 2}]}, {a: {b: 1}});\n  nomatch({$and: [{'a.c': 1}]}, {a: {b: 1}});\n  nomatch({$and: [{'a.b': 1}, {'a.b': 2}]}, {a: {b: 1}});\n  nomatch({$and: [{'a.b': 1}, {a: {b: 2}}]}, {a: {b: 1}});\n  match({$and: [{'a.b': 1}, {'c.d': 2}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{'a.b': 1}, {'c.d': 1}]}, {a: {b: 1}, c: {d: 2}});\n  match({$and: [{'a.b': 1}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{'a.b': 1}, {c: {d: 1}}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{'a.b': 2}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n  match({$and: [{a: {b: 1}}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n  nomatch({$and: [{a: {b: 2}}, {c: {d: 2}}]}, {a: {b: 1}, c: {d: 2}});\n\n  // $and and $in\n  nomatch({$and: [{a: {$in: []}}]}, {});\n  match({$and: [{a: {$in: [1, 2, 3]}}]}, {a: 1});\n  nomatch({$and: [{a: {$in: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$in: [1, 2, 3]}}, {a: {$in: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$in: [1, 2, 3]}}, {b: {$in: [1, 2, 3]}}]}, {a: 1, b: 4});\n  match({$and: [{a: {$in: [1, 2, 3]}}, {b: {$in: [4, 5, 6]}}]}, {a: 1, b: 4});\n\n\n  // $and and $nin\n  match({$and: [{a: {$nin: []}}]}, {});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}]}, {a: 1});\n  match({$and: [{a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}, {a: {$nin: [4, 5, 6]}}]}, {a: 1});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [1, 2, 3]}}]}, {a: 1, b: 4});\n  nomatch({$and: [{a: {$nin: [1, 2, 3]}}, {b: {$nin: [4, 5, 6]}}]}, {a: 1, b: 4});\n\n  // $and and $lt, $lte, $gt, $gte\n  match({$and: [{a: {$lt: 2}}]}, {a: 1});\n  nomatch({$and: [{a: {$lt: 1}}]}, {a: 1});\n  match({$and: [{a: {$lte: 1}}]}, {a: 1});\n  match({$and: [{a: {$gt: 0}}]}, {a: 1});\n  nomatch({$and: [{a: {$gt: 1}}]}, {a: 1});\n  match({$and: [{a: {$gte: 1}}]}, {a: 1});\n  match({$and: [{a: {$gt: 0}}, {a: {$lt: 2}}]}, {a: 1});\n  nomatch({$and: [{a: {$gt: 1}}, {a: {$lt: 2}}]}, {a: 1});\n  nomatch({$and: [{a: {$gt: 0}}, {a: {$lt: 1}}]}, {a: 1});\n  match({$and: [{a: {$gte: 1}}, {a: {$lte: 1}}]}, {a: 1});\n  nomatch({$and: [{a: {$gte: 2}}, {a: {$lte: 0}}]}, {a: 1});\n\n  // $and and $ne\n  match({$and: [{a: {$ne: 1}}]}, {});\n  nomatch({$and: [{a: {$ne: 1}}]}, {a: 1});\n  match({$and: [{a: {$ne: 1}}]}, {a: 2});\n  nomatch({$and: [{a: {$ne: 1}}, {a: {$ne: 2}}]}, {a: 2});\n  match({$and: [{a: {$ne: 1}}, {a: {$ne: 3}}]}, {a: 2});\n\n  // $and and $not\n  match({$and: [{a: {$not: {$gt: 2}}}]}, {a: 1});\n  nomatch({$and: [{a: {$not: {$lt: 2}}}]}, {a: 1});\n  match({$and: [{a: {$not: {$lt: 0}}}, {a: {$not: {$gt: 2}}}]}, {a: 1});\n  nomatch({$and: [{a: {$not: {$lt: 2}}}, {a: {$not: {$gt: 0}}}]}, {a: 1});\n\n  // $where\n  match({$where: 'this.a === 1'}, {a: 1});\n  match({$where: 'obj.a === 1'}, {a: 1});\n  nomatch({$where: 'this.a !== 1'}, {a: 1});\n  nomatch({$where: 'obj.a !== 1'}, {a: 1});\n  nomatch({$where: 'this.a === 1', a: 2}, {a: 1});\n  match({$where: 'this.a === 1', b: 2}, {a: 1, b: 2});\n  match({$where: 'this.a === 1 && this.b === 2'}, {a: 1, b: 2});\n  match({$where: 'this.a instanceof Array'}, {a: []});\n  nomatch({$where: 'this.a instanceof Array'}, {a: 1});\n\n  // reaching into array\n  match({'dogs.0.name': 'Fido'}, {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  match({'dogs.1.name': 'Rex'}, {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  nomatch({'dogs.1.name': 'Fido'}, {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  match({'room.1b': 'bla'}, {room: {'1b': 'bla'}});\n\n  match({'dogs.name': 'Fido'}, {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  match({'dogs.name': 'Rex'}, {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  match({'animals.dogs.name': 'Fido'},\n    {animals: [{dogs: [{name: 'Rover'}]},\n      {},\n      {dogs: [{name: 'Fido'}, {name: 'Rex'}]}]});\n  match({'animals.dogs.name': 'Fido'},\n    {animals: [{dogs: {name: 'Rex'}},\n      {dogs: {name: 'Fido'}}]});\n  match({'animals.dogs.name': 'Fido'},\n    {animals: [{dogs: [{name: 'Rover'}]},\n      {},\n      {dogs: [{name: ['Fido']}, {name: 'Rex'}]}]});\n  nomatch({'dogs.name': 'Fido'}, {dogs: []});\n\n  // $elemMatch\n  match({dogs: {$elemMatch: {name: /e/}}},\n    {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  nomatch({dogs: {$elemMatch: {name: /a/}}},\n    {dogs: [{name: 'Fido'}, {name: 'Rex'}]});\n  match({dogs: {$elemMatch: {age: {$gt: 4}}}},\n    {dogs: [{name: 'Fido', age: 5}, {name: 'Rex', age: 3}]});\n  match({dogs: {$elemMatch: {name: 'Fido', age: {$gt: 4}}}},\n    {dogs: [{name: 'Fido', age: 5}, {name: 'Rex', age: 3}]});\n  nomatch({dogs: {$elemMatch: {name: 'Fido', age: {$gt: 5}}}},\n    {dogs: [{name: 'Fido', age: 5}, {name: 'Rex', age: 3}]});\n  match({dogs: {$elemMatch: {name: /i/, age: {$gt: 4}}}},\n    {dogs: [{name: 'Fido', age: 5}, {name: 'Rex', age: 3}]});\n  nomatch({dogs: {$elemMatch: {name: /e/, age: 5}}},\n    {dogs: [{name: 'Fido', age: 5}, {name: 'Rex', age: 3}]});\n\n  // Tests for https://github.com/meteor/meteor/issues/9111.\n  match(\n    { dogs: { $elemMatch: { name: 'Rex' } } },\n    { dogs: [{ name: 'Rex', age: 3 }] });\n  nomatch(\n    { dogs: { $not: { $elemMatch: { name: 'Rex' } } } },\n    { dogs: [{ name: 'Rex', age: 3 }] });\n  match({\n    $or: [\n      { dogs: { $elemMatch: { name: 'Rex' } } },\n      { dogs: { $elemMatch: { name: 'Rex', age: 5 } } }\n    ]\n  }, {\n    dogs: [{ name: 'Rex', age: 3 }]\n  });\n  nomatch({\n    $or: [\n      { dogs: { $not: { $elemMatch: { name: 'Rex' } } } },\n      { dogs: { $elemMatch: { name: 'Rex', age: 5 } } }\n    ]\n  }, {\n    dogs: [{ name: 'Rex', age: 3 }]\n  });\n\n  match({x: {$elemMatch: {y: 9}}}, {x: [{y: 9}]});\n  nomatch({x: {$elemMatch: {y: 9}}}, {x: [[{y: 9}]]});\n  match({x: {$elemMatch: {$gt: 5, $lt: 9}}}, {x: [8]});\n  nomatch({x: {$elemMatch: {$gt: 5, $lt: 9}}}, {x: [[8]]});\n  match({'a.x': {$elemMatch: {y: 9}}},\n    {a: [{x: []}, {x: [{y: 9}]}]});\n  nomatch({a: {$elemMatch: {x: 5}}}, {a: {x: 5}});\n  match({a: {$elemMatch: {0: {$gt: 5, $lt: 9}}}}, {a: [[6]]});\n  match({a: {$elemMatch: {'0.b': {$gt: 5, $lt: 9}}}}, {a: [[{b: 6}]]});\n  match({a: {$elemMatch: {x: 1, $or: [{a: 1}, {b: 1}]}}},\n    {a: [{x: 1, b: 1}]});\n  match({a: {$elemMatch: {$or: [{a: 1}, {b: 1}], x: 1}}},\n    {a: [{x: 1, b: 1}]});\n  match({a: {$elemMatch: {$or: [{a: 1}, {b: 1}]}}},\n    {a: [{x: 1, b: 1}]});\n  match({a: {$elemMatch: {$or: [{a: 1}, {b: 1}]}}},\n    {a: [{x: 1, b: 1}]});\n  match({a: {$elemMatch: {$and: [{b: 1}, {x: 1}]}}},\n    {a: [{x: 1, b: 1}]});\n  nomatch({a: {$elemMatch: {x: 1, $or: [{a: 1}, {b: 1}]}}},\n    {a: [{b: 1}]});\n  nomatch({a: {$elemMatch: {x: 1, $or: [{a: 1}, {b: 1}]}}},\n    {a: [{x: 1}]});\n  nomatch({a: {$elemMatch: {x: 1, $or: [{a: 1}, {b: 1}]}}},\n    {a: [{x: 1}, {b: 1}]});\n\n  test.throws(() => {\n    match({a: {$elemMatch: {$gte: 1, $or: [{a: 1}, {b: 1}]}}},\n      {a: [{x: 1, b: 1}]});\n  });\n\n  test.throws(() => {\n    match({x: {$elemMatch: {$and: [{$gt: 5, $lt: 9}]}}}, {x: [8]});\n  });\n\n  // $comment\n  match({a: 5, $comment: 'asdf'}, {a: 5});\n  nomatch({a: 6, $comment: 'asdf'}, {a: 5});\n\n  // XXX still needs tests:\n  // - non-scalar arguments to $gt, $lt, etc\n});\n\nTinytest.add('minimongo - projection_compiler', test => {\n  const testProjection = (projection, tests) => {\n    const projection_f = LocalCollection._compileProjection(projection);\n    const equalNonStrict = (a, b, desc) => {\n      test.isTrue(EJSON.equals(a, b), desc);\n    };\n\n    tests.forEach(testCase => {\n      equalNonStrict(projection_f(testCase[0]), testCase[1], testCase[2]);\n    });\n  };\n\n  const testCompileProjectionThrows = (projection, expectedError) => {\n    test.throws(() => {\n      LocalCollection._compileProjection(projection);\n    }, expectedError);\n  };\n\n  testProjection({ foo: 1, bar: 1 }, [\n    [{ foo: 42, bar: 'something', baz: 'else' },\n      { foo: 42, bar: 'something' },\n      'simplest - whitelist'],\n\n    [{ foo: { nested: 17 }, baz: {} },\n      { foo: { nested: 17 } },\n      'nested whitelisted field'],\n\n    [{ _id: 'uid', bazbaz: 42 },\n      { _id: 'uid' },\n      'simplest whitelist - preserve _id'],\n  ]);\n\n  testProjection({ foo: 0, bar: 0 }, [\n    [{ foo: 42, bar: 'something', baz: 'else' },\n      { baz: 'else' },\n      'simplest - blacklist'],\n\n    [{ foo: { nested: 17 }, baz: { foo: 'something' } },\n      { baz: { foo: 'something' } },\n      'nested blacklisted field'],\n\n    [{ _id: 'uid', bazbaz: 42 },\n      { _id: 'uid', bazbaz: 42 },\n      'simplest blacklist - preserve _id'],\n  ]);\n\n  testProjection({ _id: 0, foo: 1 }, [\n    [{ foo: 42, bar: 33, _id: 'uid' },\n      { foo: 42 },\n      'whitelist - _id blacklisted'],\n  ]);\n\n  testProjection({ _id: 0, foo: 0 }, [\n    [{ foo: 42, bar: 33, _id: 'uid' },\n      { bar: 33 },\n      'blacklist - _id blacklisted'],\n  ]);\n\n  testProjection({ 'foo.bar.baz': 1 }, [\n    [{ foo: { meh: 'fur', bar: { baz: 42 }, tr: 1 }, bar: 33, baz: 'trolololo' },\n      { foo: { bar: { baz: 42 } } },\n      'whitelist nested'],\n\n    // Behavior of this test is looked up in actual mongo\n    [{ foo: { meh: 'fur', bar: 'nope', tr: 1 }, bar: 33, baz: 'trolololo' },\n      { foo: {} },\n      'whitelist nested - path not found in doc, different type'],\n\n    // Behavior of this test is looked up in actual mongo\n    [{ foo: { meh: 'fur', bar: [], tr: 1 }, bar: 33, baz: 'trolololo' },\n      { foo: { bar: [] } },\n      'whitelist nested - path not found in doc'],\n  ]);\n\n  testProjection({ 'hope.humanity': 0, 'hope.people': 0 }, [\n    [{ hope: { humanity: 'lost', people: 'broken', candies: 'long live!' } },\n      { hope: { candies: 'long live!' } },\n      'blacklist nested'],\n\n    [{ hope: 'new' },\n      { hope: 'new' },\n      'blacklist nested - path not found in doc'],\n  ]);\n\n  testProjection({ _id: 1 }, [\n    [{ _id: 42, x: 1, y: { z: '2' } },\n      { _id: 42 },\n      '_id whitelisted'],\n    [{ _id: 33 },\n      { _id: 33 },\n      '_id whitelisted, _id only'],\n    [{ x: 1 },\n      {},\n      '_id whitelisted, no _id'],\n  ]);\n\n  testProjection({ _id: 0 }, [\n    [{ _id: 42, x: 1, y: { z: '2' } },\n      { x: 1, y: { z: '2' } },\n      '_id blacklisted'],\n    [{ _id: 33 },\n      {},\n      '_id blacklisted, _id only'],\n    [{ x: 1 },\n      { x: 1 },\n      '_id blacklisted, no _id'],\n  ]);\n\n  testProjection({}, [\n    [{ a: 1, b: 2, c: '3' },\n      { a: 1, b: 2, c: '3' },\n      'empty projection'],\n  ]);\n\n  testCompileProjectionThrows(\n    { inc: 1, excl: 0 },\n    'You cannot currently mix including and excluding fields');\n  testCompileProjectionThrows(\n    { _id: 1, a: 0 },\n    'You cannot currently mix including and excluding fields');\n\n  testCompileProjectionThrows(\n    { a: 1, 'a.b': 1 },\n    'using both of them may trigger unexpected behavior');\n  testCompileProjectionThrows(\n    { 'a.b.c': 1, 'a.b': 1, a: 1 },\n    'using both of them may trigger unexpected behavior');\n\n  testCompileProjectionThrows('some string', 'fields option must be an object');\n});\n\nTinytest.add('minimongo - fetch with fields', test => {\n  const c = new LocalCollection();\n  Array.from({length: 30}, (x, i) => {\n    c.insert({\n      something: Random.id(),\n      anything: {\n        foo: 'bar',\n        cool: 'hot',\n      },\n      nothing: i,\n      i,\n    });\n  });\n\n  // Test just a regular fetch with some projection\n  let fetchResults = c.find({}, { fields: {\n    something: 1,\n    'anything.foo': 1,\n  } }).fetch();\n\n  test.isTrue(fetchResults.every(x => x &&\n         x.something &&\n         x.anything &&\n         x.anything.foo &&\n         x.anything.foo === 'bar' &&\n         !hasOwn.call(x, 'nothing') &&\n         !hasOwn.call(x.anything, 'cool')));\n\n  // Test with a selector, even field used in the selector is excluded in the\n  // projection\n  fetchResults = c.find({\n    nothing: { $gte: 5 },\n  }, {\n    fields: { nothing: 0 },\n  }).fetch();\n\n  test.isTrue(fetchResults.every(x => x &&\n         x.something &&\n         x.anything &&\n         x.anything.foo === 'bar' &&\n         x.anything.cool === 'hot' &&\n         !hasOwn.call(x, 'nothing') &&\n         x.i &&\n         x.i >= 5));\n\n  test.isTrue(fetchResults.length === 25);\n\n  // Test that we can sort, based on field excluded from the projection, use\n  // skip and limit as well!\n  // following find will get indexes [10..20) sorted by nothing\n  fetchResults = c.find({}, {\n    sort: {\n      nothing: 1,\n    },\n    limit: 10,\n    skip: 10,\n    fields: {\n      i: 1,\n      something: 1,\n    },\n  }).fetch();\n\n  test.isTrue(fetchResults.every(x => x &&\n         x.something &&\n         x.i >= 10 && x.i < 20));\n\n  fetchResults.forEach((x, i, arr) => {\n    if (!i) return;\n    test.isTrue(x.i === arr[i - 1].i + 1);\n  });\n\n  // Temporary unsupported operators\n  // queries are taken from MongoDB docs examples\n  test.throws(() => {\n    c.find({}, { fields: { 'grades.$': 1 } });\n  });\n  test.throws(() => {\n    c.find({}, { fields: { grades: { $elemMatch: { mean: 70 } } } });\n  });\n  test.throws(() => {\n    c.find({}, { fields: { grades: { $slice: [20, 10] } } });\n  });\n});\n\nTinytest.add('minimongo - fetch with projection, subarrays', test => {\n  // Apparently projection of type 'foo.bar.x' for\n  // { foo: [ { bar: { x: 42 } }, { bar: { x: 3 } } ] }\n  // should return exactly this object. More precisely, arrays are considered as\n  // sets and are queried separately and then merged back to result set\n  const c = new LocalCollection();\n\n  // Insert a test object with two set fields\n  c.insert({\n    setA: [{\n      fieldA: 42,\n      fieldB: 33,\n    }, {\n      fieldA: 'the good',\n      fieldB: 'the bad',\n      fieldC: 'the ugly',\n    }],\n    setB: [{\n      anotherA: { },\n      anotherB: 'meh',\n    }, {\n      anotherA: 1234,\n      anotherB: 431,\n    }],\n  });\n\n  const equalNonStrict = (a, b, desc) => {\n    test.isTrue(EJSON.equals(a, b), desc);\n  };\n\n  const testForProjection = (projection, expected) => {\n    const fetched = c.find({}, { fields: projection }).fetch()[0];\n    equalNonStrict(fetched, expected, `failed sub-set projection: ${JSON.stringify(projection)}`);\n  };\n\n  testForProjection({ 'setA.fieldA': 1, 'setB.anotherB': 1, _id: 0 },\n    {\n      setA: [{ fieldA: 42 }, { fieldA: 'the good' }],\n      setB: [{ anotherB: 'meh' }, { anotherB: 431 }],\n    });\n\n  testForProjection({ 'setA.fieldA': 0, 'setB.anotherA': 0, _id: 0 },\n    {\n      setA: [{fieldB: 33}, {fieldB: 'the bad', fieldC: 'the ugly'}],\n      setB: [{ anotherB: 'meh' }, { anotherB: 431 }],\n    });\n\n  c.remove({});\n  c.insert({a: [[{b: 1, c: 2}, {b: 2, c: 4}], {b: 3, c: 5}, [{b: 4, c: 9}]]});\n\n  testForProjection({ 'a.b': 1, _id: 0 },\n    {a: [ [ { b: 1 }, { b: 2 } ], { b: 3 }, [ { b: 4 } ] ] });\n  testForProjection({ 'a.b': 0, _id: 0 },\n    {a: [ [ { c: 2 }, { c: 4 } ], { c: 5 }, [ { c: 9 } ] ] });\n});\n\nTinytest.add('minimongo - fetch with projection, deep copy', test => {\n  // Compiled fields projection defines the contract: returned document doesn't\n  // retain anything from the passed argument.\n  const doc = {\n    a: { x: 42 },\n    b: {\n      y: { z: 33 },\n    },\n    c: 'asdf',\n  };\n\n  let fields = {\n    a: 1,\n    'b.y': 1,\n  };\n\n  let projectionFn = LocalCollection._compileProjection(fields);\n  let filteredDoc = projectionFn(doc);\n  doc.a.x++;\n  doc.b.y.z--;\n  test.equal(filteredDoc.a.x, 42, 'projection returning deep copy - including');\n  test.equal(filteredDoc.b.y.z, 33, 'projection returning deep copy - including');\n\n  fields = { c: 0 };\n  projectionFn = LocalCollection._compileProjection(fields);\n  filteredDoc = projectionFn(doc);\n\n  doc.a.x = 5;\n  test.equal(filteredDoc.a.x, 43, 'projection returning deep copy - excluding');\n});\n\nTinytest.add('minimongo - observe ordered with projection', test => {\n  // These tests are copy-paste from \"minimongo -observe ordered\",\n  // slightly modified to test projection\n  const operations = [];\n  const cbs = log_callbacks(operations);\n  let handle;\n\n  const c = new LocalCollection();\n  handle = c.find({}, {sort: {a: 1}, fields: { a: 1 }}).observe(cbs);\n  test.isTrue(handle.collection === c);\n\n  c.insert({_id: 'foo', a: 1, b: 2});\n  test.equal(operations.shift(), ['added', {a: 1}, 0, null]);\n  c.update({a: 1}, {$set: {a: 2, b: 1}});\n  test.equal(operations.shift(), ['changed', {a: 2}, 0, {a: 1}]);\n  c.insert({_id: 'bar', a: 10, c: 33});\n  test.equal(operations.shift(), ['added', {a: 10}, 1, null]);\n  c.update({}, {$inc: {a: 1}}, {multi: true});\n  c.update({}, {$inc: {c: 1}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a: 3}, 0, {a: 2}]);\n  test.equal(operations.shift(), ['changed', {a: 11}, 1, {a: 10}]);\n  c.update({a: 11}, {a: 1, b: 44});\n  test.equal(operations.shift(), ['changed', {a: 1}, 1, {a: 11}]);\n  test.equal(operations.shift(), ['moved', {a: 1}, 1, 0, 'foo']);\n  c.remove({a: 2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a: 3});\n  test.equal(operations.shift(), ['removed', 'foo', 1, {a: 3}]);\n\n  // test stop\n  handle.stop();\n  const idA2 = Random.id();\n  c.insert({_id: idA2, a: 2});\n  test.equal(operations.shift(), undefined);\n\n  const cursor = c.find({}, {fields: {a: 1, _id: 0}});\n  test.throws(() => {\n    cursor.observeChanges({added() {}});\n  });\n  test.throws(() => {\n    cursor.observe({added() {}});\n  });\n\n  // test initial inserts (and backwards sort)\n  handle = c.find({}, {sort: {a: -1}, fields: { a: 1 } }).observe(cbs);\n  test.equal(operations.shift(), ['added', {a: 2}, 0, null]);\n  test.equal(operations.shift(), ['added', {a: 1}, 1, null]);\n  handle.stop();\n\n  // test _suppress_initial\n  handle = c.find({}, {sort: {a: -1}, fields: { a: 1 }}).observe(Object.assign(cbs, {_suppress_initial: true}));\n  test.equal(operations.shift(), undefined);\n  c.insert({a: 100, b: { foo: 'bar' }});\n  test.equal(operations.shift(), ['added', {a: 100}, 0, idA2]);\n  handle.stop();\n\n  // test skip and limit.\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}, skip: 1, limit: 2, fields: { blacklisted: 0 }}).observe(cbs);\n  test.equal(operations.shift(), undefined);\n  c.insert({a: 1, blacklisted: 1324});\n  test.equal(operations.shift(), undefined);\n  c.insert({_id: 'foo', a: 2, blacklisted: ['something']});\n  test.equal(operations.shift(), ['added', {a: 2}, 0, null]);\n  c.insert({a: 3, blacklisted: { 2: 3 }});\n  test.equal(operations.shift(), ['added', {a: 3}, 1, null]);\n  c.insert({a: 4, blacklisted: 6});\n  test.equal(operations.shift(), undefined);\n  c.update({a: 1}, {a: 0, blacklisted: 4444});\n  test.equal(operations.shift(), undefined);\n  c.update({a: 0}, {a: 5, blacklisted: 11111});\n  test.equal(operations.shift(), ['removed', 'foo', 0, {a: 2}]);\n  test.equal(operations.shift(), ['added', {a: 4}, 1, null]);\n  c.update({a: 3}, {a: 3.5, blacklisted: 333.4444});\n  test.equal(operations.shift(), ['changed', {a: 3.5}, 0, {a: 3}]);\n  handle.stop();\n\n  // test _no_indices\n\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}, fields: { a: 1 }}).observe(Object.assign(cbs, {_no_indices: true}));\n  c.insert({_id: 'foo', a: 1, zoo: 'crazy'});\n  test.equal(operations.shift(), ['added', {a: 1}, -1, null]);\n  c.update({a: 1}, {$set: {a: 2, foobar: 'player'}});\n  test.equal(operations.shift(), ['changed', {a: 2}, -1, {a: 1}]);\n  c.insert({a: 10, b: 123.45});\n  test.equal(operations.shift(), ['added', {a: 10}, -1, null]);\n  c.update({}, {$inc: {a: 1, b: 2}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a: 3}, -1, {a: 2}]);\n  test.equal(operations.shift(), ['changed', {a: 11}, -1, {a: 10}]);\n  c.update({a: 11, b: 125.45}, {a: 1, b: 444});\n  test.equal(operations.shift(), ['changed', {a: 1}, -1, {a: 11}]);\n  test.equal(operations.shift(), ['moved', {a: 1}, -1, -1, 'foo']);\n  c.remove({a: 2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a: 3});\n  test.equal(operations.shift(), ['removed', 'foo', -1, {a: 3}]);\n  handle.stop();\n});\n\n\nTinytest.add('minimongo - ordering', test => {\n  const shortBinary = EJSON.newBinary(1);\n  shortBinary[0] = 128;\n  const longBinary1 = EJSON.newBinary(2);\n  longBinary1[1] = 42;\n  const longBinary2 = EJSON.newBinary(2);\n  longBinary2[1] = 50;\n\n  const date1 = new Date;\n  const date2 = new Date(date1.getTime() + 1000);\n\n  // value ordering\n  assert_ordering(test, LocalCollection._f._cmp, [\n    null,\n    1, 2.2, 3,\n    '03', '1', '11', '2', 'a', 'aaa',\n    {}, {a: 2}, {a: 3}, {a: 3, b: 4}, {b: 4}, {b: 4, a: 3},\n    {b: {}}, {b: [1, 2, 3]}, {b: [1, 2, 4]},\n    [], [1, 2], [1, 2, 3], [1, 2, 4], [1, 2, '4'], [1, 2, [4]],\n    shortBinary, longBinary1, longBinary2,\n    new MongoID.ObjectID('1234567890abcd1234567890'),\n    new MongoID.ObjectID('abcd1234567890abcd123456'),\n    false, true,\n    date1, date2,\n  ]);\n\n  // document ordering under a sort specification\n  const verify = (sorts, docs) => {\n    (Array.isArray(sorts) ? sorts : [sorts]).forEach(sort => {\n      const sorter = new Minimongo.Sorter(sort);\n      assert_ordering(test, sorter.getComparator(), docs);\n    });\n  };\n\n  // note: [] doesn't sort with \"arrays\", it sorts as \"undefined\". the position\n  // of arrays in _typeorder only matters for things like $lt. (This behavior\n  // verified with MongoDB 2.2.1.) We don't define the relative order of {a: []}\n  // and {c: 1} is undefined (MongoDB does seem to care but it's not clear how\n  // or why).\n  verify([{a: 1}, ['a'], [['a', 'asc']]],\n    [{a: []}, {a: 1}, {a: {}}, {a: true}]);\n  verify([{a: 1}, ['a'], [['a', 'asc']]],\n    [{c: 1}, {a: 1}, {a: {}}, {a: true}]);\n  verify([{a: -1}, [['a', 'desc']]],\n    [{a: true}, {a: {}}, {a: 1}, {c: 1}]);\n  verify([{a: -1}, [['a', 'desc']]],\n    [{a: true}, {a: {}}, {a: 1}, {a: []}]);\n\n  verify([{a: 1, b: -1}, ['a', ['b', 'desc']],\n    [['a', 'asc'], ['b', 'desc']]],\n  [{c: 1}, {a: 1, b: 3}, {a: 1, b: 2}, {a: 2, b: 0}]);\n\n  verify([{a: 1, b: 1}, ['a', 'b'],\n    [['a', 'asc'], ['b', 'asc']]],\n  [{c: 1}, {a: 1, b: 2}, {a: 1, b: 3}, {a: 2, b: 0}]);\n\n  test.throws(() => {\n    new Minimongo.Sorter('a');\n  });\n\n  test.throws(() => {\n    new Minimongo.Sorter(123);\n  });\n\n  // We don't support $natural:1 (since we don't actually have Mongo's on-disk\n  // ordering available!)\n  test.throws(() => {\n    new Minimongo.Sorter({$natural: 1});\n  });\n\n  // No sort spec implies everything equal.\n  test.equal(new Minimongo.Sorter({}).getComparator()({a: 1}, {a: 2}), 0);\n\n  // All sorts of array edge cases!\n  // Increasing sort sorts by the smallest element it finds; 1 < 2.\n  verify({a: 1}, [\n    {a: [1, 10, 20]},\n    {a: [5, 2, 99]},\n  ]);\n  // Decreasing sorts by largest it finds; 99 > 20.\n  verify({a: -1}, [\n    {a: [5, 2, 99]},\n    {a: [1, 10, 20]},\n  ]);\n  // Can also sort by specific array indices.\n  verify({'a.1': 1}, [\n    {a: [5, 2, 99]},\n    {a: [1, 10, 20]},\n  ]);\n  // We do NOT expand sub-arrays, so the minimum in the second doc is 5, not\n  // -20. (Numbers always sort before arrays.)\n  verify({a: 1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [-5, -20], 18]},\n  ]);\n  // The maximum in each of these is the array, since arrays are \"greater\" than\n  // numbers. And [10, 15] is greater than [-5, -20].\n  verify({a: -1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [-5, -20], 18]},\n  ]);\n  // 'a.0' here ONLY means \"first element of a\", not \"first element of something\n  // found in a\", so it CANNOT find the 10 or -5.\n  verify({'a.0': 1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [-5, -20], 18]},\n  ]);\n  verify({'a.0': -1}, [\n    {a: [5, [-5, -20], 18]},\n    {a: [1, [10, 15], 20]},\n  ]);\n  // Similarly, this is just comparing [-5,-20] to [10, 15].\n  verify({'a.1': 1}, [\n    {a: [5, [-5, -20], 18]},\n    {a: [1, [10, 15], 20]},\n  ]);\n  verify({'a.1': -1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [-5, -20], 18]},\n  ]);\n  // Here we are just comparing [10,15] directly to [19,3] (and NOT also\n  // iterating over the numbers; this is implemented by setting dontIterate in\n  // makeLookupFunction).  So [10,15]<[19,3] even though 3 is the smallest\n  // number you can find there.\n  verify({'a.1': 1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [19, 3], 18]},\n  ]);\n  verify({'a.1': -1}, [\n    {a: [5, [19, 3], 18]},\n    {a: [1, [10, 15], 20]},\n  ]);\n  // Minimal elements are 1 and 5.\n  verify({a: 1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [19, 3], 18]},\n  ]);\n  // Maximal elements are [19,3] and [10,15] (because arrays sort higher than\n  // numbers), even though there's a 20 floating around.\n  verify({a: -1}, [\n    {a: [5, [19, 3], 18]},\n    {a: [1, [10, 15], 20]},\n  ]);\n  // Maximal elements are [10,15] and [3,19].  [10,15] is bigger even though 19\n  // is the biggest number in them, because array comparison is lexicographic.\n  verify({a: -1}, [\n    {a: [1, [10, 15], 20]},\n    {a: [5, [3, 19], 18]},\n  ]);\n\n  // (0,4) < (0,5), so they go in this order.  It's not correct to consider\n  // (0,3) as a sort key for the second document because they come from\n  // different a-branches.\n  verify({'a.x': 1, 'a.y': 1}, [\n    {a: [{x: 0, y: 4}]},\n    {a: [{x: 0, y: 5}, {x: 1, y: 3}]},\n  ]);\n\n  verify({'a.0.s': 1}, [\n    {a: [ {s: 1} ]},\n    {a: [ {s: 2} ]},\n  ]);\n});\n\nTinytest.add('minimongo - sort', test => {\n  const c = new LocalCollection();\n  for (let i = 0; i < 50; i++) {\n    for (let j = 0; j < 2; j++) {c.insert({a: i, b: j, _id: `${i}_${j}`});}\n  }\n\n  test.equal(\n    c.find({a: {$gt: 10}}, {sort: {b: -1, a: 1}, limit: 5}).fetch(), [\n      {a: 11, b: 1, _id: '11_1'},\n      {a: 12, b: 1, _id: '12_1'},\n      {a: 13, b: 1, _id: '13_1'},\n      {a: 14, b: 1, _id: '14_1'},\n      {a: 15, b: 1, _id: '15_1'}]);\n\n  test.equal(\n    c.find({a: {$gt: 10}}, {sort: {b: -1, a: 1}, skip: 3, limit: 5}).fetch(), [\n      {a: 14, b: 1, _id: '14_1'},\n      {a: 15, b: 1, _id: '15_1'},\n      {a: 16, b: 1, _id: '16_1'},\n      {a: 17, b: 1, _id: '17_1'},\n      {a: 18, b: 1, _id: '18_1'}]);\n\n  test.equal(\n    c.find({a: {$gte: 20}}, {sort: {a: 1, b: -1}, skip: 50, limit: 5}).fetch(), [\n      {a: 45, b: 1, _id: '45_1'},\n      {a: 45, b: 0, _id: '45_0'},\n      {a: 46, b: 1, _id: '46_1'},\n      {a: 46, b: 0, _id: '46_0'},\n      {a: 47, b: 1, _id: '47_1'}]);\n});\n\nTinytest.add('minimongo - subkey sort', test => {\n  const c = new LocalCollection();\n\n  // normal case\n  c.insert({a: {b: 2}});\n  c.insert({a: {b: 1}});\n  c.insert({a: {b: 3}});\n  test.equal(\n    c.find({}, {sort: {'a.b': -1}}).fetch().map(doc => doc.a),\n    [{b: 3}, {b: 2}, {b: 1}]);\n\n  // isn't an object\n  c.insert({a: 1});\n  test.equal(\n    c.find({}, {sort: {'a.b': 1}}).fetch().map(doc => doc.a),\n    [1, {b: 1}, {b: 2}, {b: 3}]);\n\n  // complex object\n  c.insert({a: {b: {c: 1}}});\n  test.equal(\n    c.find({}, {sort: {'a.b': -1}}).fetch().map(doc => doc.a),\n    [{b: {c: 1}}, {b: 3}, {b: 2}, {b: 1}, 1]);\n\n  // no such top level prop\n  c.insert({c: 1});\n  test.equal(\n    c.find({}, {sort: {'a.b': -1}}).fetch().map(doc => doc.a),\n    [{b: {c: 1}}, {b: 3}, {b: 2}, {b: 1}, 1, undefined]);\n\n  // no such mid level prop. just test that it doesn't throw.\n  test.equal(c.find({}, {sort: {'a.nope.c': -1}}).count(), 6);\n});\n\nTinytest.add('minimongo - array sort', test => {\n  const c = new LocalCollection();\n\n  // \"up\" and \"down\" are the indices that the docs should have when sorted\n  // ascending and descending by \"a.x\" respectively. They are not reverses of\n  // each other: when sorting ascending, you use the minimum value you can find\n  // in the document, and when sorting descending, you use the maximum value you\n  // can find. So [1, 4] shows up in the 1 slot when sorting ascending and the 4\n  // slot when sorting descending.\n  //\n  // Similarly, \"selected\" is the index that the doc should have in the query\n  // that sorts ascending on \"a.x\" and selects {'a.x': {$gt: 1}}. In this case,\n  // the 1 in [1, 4] may not be used as a sort key.\n  c.insert({up: 1, down: 1, selected: 2, a: {x: [1, 4]}});\n  c.insert({up: 2, down: 2, selected: 0, a: [{x: [2]}, {x: 3}]});\n  c.insert({up: 0, down: 4,              a: {x: 0}});\n  c.insert({up: 3, down: 3, selected: 1, a: {x: 2.5}});\n  c.insert({up: 4, down: 0, selected: 3, a: {x: 5}});\n\n  // Test that the the documents in \"cursor\" contain values with the name\n  // \"field\" running from 0 to the max value of that name in the collection.\n  const testCursorMatchesField = (cursor, field) => {\n    const fieldValues = [];\n    c.find().forEach(doc => {\n      if (hasOwn.call(doc, field)) {fieldValues.push(doc[field]);}\n    });\n    test.equal(cursor.fetch().map(doc => doc[field]),\n      Array.from({length: Math.max(...fieldValues) + 1}, (x, i) => i));\n  };\n\n  testCursorMatchesField(c.find({}, {sort: {'a.x': 1}}), 'up');\n  testCursorMatchesField(c.find({}, {sort: {'a.x': -1}}), 'down');\n  testCursorMatchesField(c.find({'a.x': {$gt: 1}}, {sort: {'a.x': 1}}),\n    'selected');\n});\n\nTinytest.add('minimongo - sort keys', test => {\n  const keyListToObject = keyList => {\n    const obj = {};\n    keyList.forEach(key => {\n      obj[EJSON.stringify(key)] = true;\n    });\n    return obj;\n  };\n\n  const testKeys = (sortSpec, doc, expectedKeyList) => {\n    const expectedKeys = keyListToObject(expectedKeyList);\n    const sorter = new Minimongo.Sorter(sortSpec);\n\n    const actualKeyList = [];\n    sorter._generateKeysFromDoc(doc, key => {\n      actualKeyList.push(key);\n    });\n    const actualKeys = keyListToObject(actualKeyList);\n    test.equal(actualKeys, expectedKeys);\n  };\n\n  const testParallelError = (sortSpec, doc) => {\n    const sorter = new Minimongo.Sorter(sortSpec);\n    test.throws(() => {\n      sorter._generateKeysFromDoc(doc, () => {});\n    }, /parallel arrays/);\n  };\n\n  // Just non-array fields.\n  testKeys({'a.x': 1, 'a.y': 1},\n    {a: {x: 0, y: 5}},\n    [[0, 5]]);\n\n  // Ensure that we don't get [0,3] and [1,5].\n  testKeys({'a.x': 1, 'a.y': 1},\n    {a: [{x: 0, y: 5}, {x: 1, y: 3}]},\n    [[0, 5], [1, 3]]);\n\n  // Ensure we can combine \"array fields\" with \"non-array fields\".\n  testKeys({'a.x': 1, 'a.y': 1, b: -1},\n    {a: [{x: 0, y: 5}, {x: 1, y: 3}], b: 42},\n    [[0, 5, 42], [1, 3, 42]]);\n  testKeys({b: -1, 'a.x': 1, 'a.y': 1},\n    {a: [{x: 0, y: 5}, {x: 1, y: 3}], b: 42},\n    [[42, 0, 5], [42, 1, 3]]);\n  testKeys({'a.x': 1, b: -1, 'a.y': 1},\n    {a: [{x: 0, y: 5}, {x: 1, y: 3}], b: 42},\n    [[0, 42, 5], [1, 42, 3]]);\n  testKeys({a: 1, b: 1},\n    {a: [1, 2, 3], b: 42},\n    [[1, 42], [2, 42], [3, 42]]);\n\n  // Don't support multiple arrays at the same level.\n  testParallelError({a: 1, b: 1},\n    {a: [1, 2, 3], b: [42]});\n\n  // We are MORE STRICT than Mongo here; Mongo supports this!\n  // XXX support this too  #NestedArraySort\n  testParallelError({'a.x': 1, 'a.y': 1},\n    {a: [{x: 1, y: [2, 3]},\n      {x: 2, y: [4, 5]}]});\n});\n\nTinytest.add('minimongo - sort key filter', test => {\n  const testOrder = (sortSpec, selector, doc1, doc2) => {\n    const matcher = new Minimongo.Matcher(selector);\n    const sorter = new Minimongo.Sorter(sortSpec, {matcher});\n    const comparator = sorter.getComparator();\n    const comparison = comparator(doc1, doc2);\n    test.isTrue(comparison < 0);\n  };\n\n  testOrder({'a.x': 1}, {'a.x': {$gt: 1}},\n    {a: {x: 3}},\n    {a: {x: [1, 4]}});\n  testOrder({'a.x': 1}, {'a.x': {$gt: 0}},\n    {a: {x: [1, 4]}},\n    {a: {x: 3}});\n\n  const keyCompatible = (sortSpec, selector, key, compatible) => {\n    const matcher = new Minimongo.Matcher(selector);\n    const sorter = new Minimongo.Sorter(sortSpec, {matcher});\n    const actual = sorter._keyCompatibleWithSelector(key);\n    test.equal(actual, compatible);\n  };\n\n  keyCompatible({a: 1}, {a: 5}, [5], true);\n  keyCompatible({a: 1}, {a: 5}, [8], false);\n  keyCompatible({a: 1}, {a: {x: 5}}, [{x: 5}], true);\n  keyCompatible({a: 1}, {a: {x: 5}}, [{x: 5, y: 9}], false);\n  keyCompatible({'a.x': 1}, {a: {x: 5}}, [5], true);\n  // To confirm this:\n  //   > db.x.insert({_id: \"q\", a: [{x:1}, {x:5}], b: 2})\n  //   > db.x.insert({_id: \"w\", a: [{x:5}, {x:10}], b: 1})\n  //   > db.x.find({}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   > db.x.find({a: {x:5}}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   > db.x.find({'a.x': 5}).sort({'a.x': 1, b: 1})\n  //   { \"_id\" : \"w\", \"a\" : [  {  \"x\" : 5 },  {  \"x\" : 10 } ], \"b\" : 1 }\n  //   { \"_id\" : \"q\", \"a\" : [  {  \"x\" : 1 },  {  \"x\" : 5 } ], \"b\" : 2 }\n  // ie, only the last one manages to trigger the key compatibility code,\n  // not the previous one.  (The \"b\" sort is necessary because when the key\n  // compatibility code *does* kick in, both documents only end up with \"5\"\n  // for the first field as their only sort key, and we need to differentiate\n  // somehow...)\n  keyCompatible({'a.x': 1}, {a: {x: 5}}, [1], true);\n  keyCompatible({'a.x': 1}, {'a.x': 5}, [5], true);\n  keyCompatible({'a.x': 1}, {'a.x': 5}, [1], false);\n\n  // Regex key check.\n  keyCompatible({a: 1}, {a: /^foo+/}, ['foo'], true);\n  keyCompatible({a: 1}, {a: /^foo+/}, ['foooo'], true);\n  keyCompatible({a: 1}, {a: /^foo+/}, ['foooobar'], true);\n  keyCompatible({a: 1}, {a: /^foo+/}, ['afoooo'], false);\n  keyCompatible({a: 1}, {a: /^foo+/}, [''], false);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+'}}, ['foo'], true);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+'}}, ['foooo'], true);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+'}}, ['foooobar'], true);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+'}}, ['afoooo'], false);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+'}}, [''], false);\n\n  keyCompatible({a: 1}, {a: /^foo+/i}, ['foo'], true);\n  // Key compatibility check appears to be turned off for regexps with flags.\n  keyCompatible({a: 1}, {a: /^foo+/i}, ['bar'], true);\n  keyCompatible({a: 1}, {a: /^foo+/m}, ['bar'], true);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+', $options: 'i'}}, ['bar'], true);\n  keyCompatible({a: 1}, {a: {$regex: '^foo+', $options: 'm'}}, ['bar'], true);\n\n  // Multiple keys!\n  keyCompatible({a: 1, b: 1, c: 1},\n    {a: {$gt: 5}, c: {$lt: 3}}, [6, 'bla', 2], true);\n  keyCompatible({a: 1, b: 1, c: 1},\n    {a: {$gt: 5}, c: {$lt: 3}}, [6, 'bla', 4], false);\n  keyCompatible({a: 1, b: 1, c: 1},\n    {a: {$gt: 5}, c: {$lt: 3}}, [3, 'bla', 1], false);\n  // No filtering is done (ie, all keys are compatible) if the first key isn't\n  // constrained.\n  keyCompatible({a: 1, b: 1, c: 1},\n    {c: {$lt: 3}}, [3, 'bla', 4], true);\n});\n\nTinytest.add('minimongo - sort function', test => {\n  const c = new LocalCollection();\n\n  c.insert({a: 1});\n  c.insert({a: 10});\n  c.insert({a: 5});\n  c.insert({a: 7});\n  c.insert({a: 2});\n  c.insert({a: 4});\n  c.insert({a: 3});\n\n  const sortFunction = (doc1, doc2) => doc2.a - doc1.a;\n\n  test.equal(c.find({}, {sort: sortFunction}).fetch(), c.find({}).fetch().sort(sortFunction));\n  test.notEqual(c.find({}).fetch(), c.find({}).fetch().sort(sortFunction));\n  test.equal(c.find({}, {sort: {a: -1}}).fetch(), c.find({}).fetch().sort(sortFunction));\n});\n\nTinytest.add('minimongo - binary search', test => {\n  const forwardCmp = (a, b) => a - b;\n\n  const backwardCmp = (a, b) => -1 * forwardCmp(a, b);\n\n  const checkSearch = (cmp, array, value, expected, message) => {\n    const actual = LocalCollection._binarySearch(cmp, array, value);\n    if (expected != actual) {\n      test.fail({type: 'minimongo-binary-search',\n        message: `${message} : Expected index ${expected} but had ${actual}`,\n      });\n    }\n  };\n\n  const checkSearchForward = (array, value, expected, message) => {\n    checkSearch(forwardCmp, array, value, expected, message);\n  };\n  const checkSearchBackward = (array, value, expected, message) => {\n    checkSearch(backwardCmp, array, value, expected, message);\n  };\n\n  checkSearchForward([1, 2, 5, 7], 4, 2, 'Inner insert');\n  checkSearchForward([1, 2, 3, 4], 3, 3, 'Inner insert, equal value');\n  checkSearchForward([1, 2, 5], 4, 2, 'Inner insert, odd length');\n  checkSearchForward([1, 3, 5, 6], 9, 4, 'End insert');\n  checkSearchForward([1, 3, 5, 6], 0, 0, 'Beginning insert');\n  checkSearchForward([1], 0, 0, 'Single array, less than.');\n  checkSearchForward([1], 1, 1, 'Single array, equal.');\n  checkSearchForward([1], 2, 1, 'Single array, greater than.');\n  checkSearchForward([], 1, 0, 'Empty array');\n  checkSearchForward([1, 1, 1, 2, 2, 2, 2], 1, 3, 'Highly degenerate array, lower');\n  checkSearchForward([1, 1, 1, 2, 2, 2, 2], 2, 7, 'Highly degenerate array, upper');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 1, 0, 'Highly degenerate array, lower');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 2, 7, 'Highly degenerate array, equal');\n  checkSearchForward([2, 2, 2, 2, 2, 2, 2], 3, 7, 'Highly degenerate array, upper');\n\n  checkSearchBackward([7, 5, 2, 1], 4, 2, 'Backward: Inner insert');\n  checkSearchBackward([4, 3, 2, 1], 3, 2, 'Backward: Inner insert, equal value');\n  checkSearchBackward([5, 2, 1], 4, 1, 'Backward: Inner insert, odd length');\n  checkSearchBackward([6, 5, 3, 1], 9, 0, 'Backward: Beginning insert');\n  checkSearchBackward([6, 5, 3, 1], 0, 4, 'Backward: End insert');\n  checkSearchBackward([1], 0, 1, 'Backward: Single array, less than.');\n  checkSearchBackward([1], 1, 1, 'Backward: Single array, equal.');\n  checkSearchBackward([1], 2, 0, 'Backward: Single array, greater than.');\n  checkSearchBackward([], 1, 0, 'Backward: Empty array');\n  checkSearchBackward([2, 2, 2, 2, 1, 1, 1], 1, 7, 'Backward: Degenerate array, lower');\n  checkSearchBackward([2, 2, 2, 2, 1, 1, 1], 2, 4, 'Backward: Degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 1, 7, 'Backward: Highly degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 2, 7, 'Backward: Highly degenerate array, upper');\n  checkSearchBackward([2, 2, 2, 2, 2, 2, 2], 3, 0, 'Backward: Highly degenerate array, upper');\n});\n\nTinytest.add('minimongo - modify', test => {\n  const modifyWithQuery = (doc, query, mod, expected) => {\n    const coll = new LocalCollection;\n    coll.insert(doc);\n    // The query is relevant for 'a.$.b'.\n    coll.update(query, mod);\n    const actual = coll.findOne();\n\n    if (!expected._id) {\n      delete actual._id;  // added by insert\n    }\n\n    if (typeof expected === 'function') {\n      expected(actual, EJSON.stringify({input: doc, mod}));\n    } else {\n      test.equal(actual, expected, EJSON.stringify({input: doc, mod}));\n    }\n  };\n  const modify = (doc, mod, expected) => {\n    modifyWithQuery(doc, {}, mod, expected);\n  };\n  const exceptionWithQuery = (doc, query, mod) => {\n    const coll = new LocalCollection;\n    coll.insert(doc);\n    test.throws(() => {\n      coll.update(query, mod);\n    });\n  };\n  const exception = (doc, mod) => {\n    exceptionWithQuery(doc, {}, mod);\n  };\n\n  const upsert = (query, mod, expected) => {\n    const coll = new LocalCollection;\n\n    const result = coll.upsert(query, mod);\n\n    const actual = coll.findOne();\n\n    if (expected._id) {\n      test.equal(result.insertedId, expected._id);\n    } else {\n      delete actual._id;\n    }\n\n    test.equal(actual, expected);\n  };\n\n  const upsertUpdate = (initialDoc, query, mod, expected) => {\n    const collection = new LocalCollection;\n\n    collection.insert(initialDoc);\n\n    const result = collection.upsert(query, mod);\n    const actual = collection.findOne();\n\n    if (!expected._id) {\n      delete actual._id;\n    }\n\n    test.equal(actual, expected);\n  };\n\n  const upsertException = (query, mod) => {\n    const coll = new LocalCollection;\n    test.throws(() => {\n      coll.upsert(query, mod);\n    });\n  };\n\n  // document replacement\n  modify({}, {}, {});\n  modify({a: 12}, {}, {}); // tested against mongodb\n  modify({a: 12}, {a: 13}, {a: 13});\n  modify({a: 12, b: 99}, {a: 13}, {a: 13});\n  exception({a: 12}, {a: 13, $set: {b: 13}});\n  exception({a: 12}, {$set: {b: 13}, a: 13});\n\n  exception({a: 12}, {$a: 13}); // invalid operator\n  exception({a: 12}, {b: {$a: 13}});\n  exception({a: 12}, {b: {'a.b': 13}});\n  exception({a: 12}, {b: {'\\0a': 13}});\n\n  // keys\n  modify({}, {$set: {a: 12}}, {a: 12});\n  modify({}, {$set: {'a.b': 12}}, {a: {b: 12}});\n  modify({}, {$set: {'a.b.c': 12}}, {a: {b: {c: 12}}});\n  modify({a: {d: 99}}, {$set: {'a.b.c': 12}}, {a: {d: 99, b: {c: 12}}});\n  modify({}, {$set: {'a.b.3.c': 12}}, {a: {b: {3: {c: 12}}}});\n  modify({a: {b: []}}, {$set: {'a.b.3.c': 12}}, {\n    a: {b: [null, null, null, {c: 12}]}});\n  exception({a: [null, null, null]}, {$set: {'a.1.b': 12}});\n  exception({a: [null, 1, null]}, {$set: {'a.1.b': 12}});\n  exception({a: [null, 'x', null]}, {$set: {'a.1.b': 12}});\n  exception({a: [null, [], null]}, {$set: {'a.1.b': 12}});\n  modify({a: [null, null, null]}, {$set: {'a.3.b': 12}}, {\n    a: [null, null, null, {b: 12}]});\n  exception({a: []}, {$set: {'a.b': 12}});\n  exception({a: 12}, {$set: {'a.b': 99}}); // tested on mongo\n  exception({a: 'x'}, {$set: {'a.b': 99}});\n  exception({a: true}, {$set: {'a.b': 99}});\n  exception({a: null}, {$set: {'a.b': 99}});\n  modify({a: {}}, {$set: {'a.3': 12}}, {a: {3: 12}});\n  modify({a: []}, {$set: {'a.3': 12}}, {a: [null, null, null, 12]});\n  exception({}, {$set: {'': 12}}); // tested on mongo\n  exception({}, {$set: {'.': 12}}); // tested on mongo\n  exception({}, {$set: {'a.': 12}}); // tested on mongo\n  exception({}, {$set: {'. ': 12}}); // tested on mongo\n  exception({}, {$inc: {'... ': 12}}); // tested on mongo\n  exception({}, {$set: {'a..b': 12}}); // tested on mongo\n  modify({a: [1, 2, 3]}, {$set: {'a.01': 99}}, {a: [1, 99, 3]});\n  modify({a: [1, {a: 98}, 3]}, {$set: {'a.01.b': 99}}, {a: [1, {a: 98, b: 99}, 3]});\n  modify({}, {$set: {'2.a.b': 12}}, {2: {a: {b: 12}}}); // tested\n  exception({x: []}, {$set: {'x.2..a': 99}});\n  modify({x: [null, null]}, {$set: {'x.2.a': 1}}, {x: [null, null, {a: 1}]});\n  exception({x: [null, null]}, {$set: {'x.1.a': 1}});\n\n  // a.$.b\n  modifyWithQuery({a: [{x: 2}, {x: 4}]}, {'a.x': 4}, {$set: {'a.$.z': 9}},\n    {a: [{x: 2}, {x: 4, z: 9}]});\n  exception({a: [{x: 2}, {x: 4}]}, {$set: {'a.$.z': 9}});\n  exceptionWithQuery({a: [{x: 2}, {x: 4}], b: 5}, {b: 5}, {$set: {'a.$.z': 9}});\n  // can't have two $\n  exceptionWithQuery({a: [{x: [2]}]}, {'a.x': 2}, {$set: {'a.$.x.$': 9}});\n  modifyWithQuery({a: [5, 6, 7]}, {a: 6}, {$set: {'a.$': 9}}, {a: [5, 9, 7]});\n  modifyWithQuery({a: [{b: [{c: 9}, {c: 10}]}, {b: {c: 11}}]}, {'a.b.c': 10},\n    {$unset: {'a.$.b': 1}}, {a: [{}, {b: {c: 11}}]});\n  modifyWithQuery({a: [{b: [{c: 9}, {c: 10}]}, {b: {c: 11}}]}, {'a.b.c': 11},\n    {$unset: {'a.$.b': 1}},\n    {a: [{b: [{c: 9}, {c: 10}]}, {}]});\n  modifyWithQuery({a: [1]}, {'a.0': 1}, {$set: {'a.$': 5}}, {a: [5]});\n  modifyWithQuery({a: [9]}, {a: {$mod: [2, 1]}}, {$set: {'a.$': 5}}, {a: [5]});\n  // Negatives don't set '$'.\n  exceptionWithQuery({a: [1]}, {$not: {a: 2}}, {$set: {'a.$': 5}});\n  exceptionWithQuery({a: [1]}, {'a.0': {$ne: 2}}, {$set: {'a.$': 5}});\n  // One $or clause works.\n  modifyWithQuery({a: [{x: 2}, {x: 4}]},\n    {$or: [{'a.x': 4}]}, {$set: {'a.$.z': 9}},\n    {a: [{x: 2}, {x: 4, z: 9}]});\n  // More $or clauses throw.\n  exceptionWithQuery({a: [{x: 2}, {x: 4}]},\n    {$or: [{'a.x': 4}, {'a.x': 4}]},\n    {$set: {'a.$.z': 9}});\n  // $and uses the last one.\n  modifyWithQuery({a: [{x: 1}, {x: 3}]},\n    {$and: [{'a.x': 1}, {'a.x': 3}]},\n    {$set: {'a.$.x': 5}},\n    {a: [{x: 1}, {x: 5}]});\n  modifyWithQuery({a: [{x: 1}, {x: 3}]},\n    {$and: [{'a.x': 3}, {'a.x': 1}]},\n    {$set: {'a.$.x': 5}},\n    {a: [{x: 5}, {x: 3}]});\n  // Same goes for the implicit AND of a document selector.\n  modifyWithQuery({a: [{x: 1}, {y: 3}]},\n    {'a.x': 1, 'a.y': 3},\n    {$set: {'a.$.z': 5}},\n    {a: [{x: 1}, {y: 3, z: 5}]});\n  modifyWithQuery({a: [{x: 1}, {y: 1}, {x: 1, y: 1}]},\n    {a: {$elemMatch: {x: 1, y: 1}}},\n    {$set: {'a.$.x': 2}},\n    {a: [{x: 1}, {y: 1}, {x: 2, y: 1}]});\n  modifyWithQuery({a: [{b: [{x: 1}, {y: 1}, {x: 1, y: 1}]}]},\n    {'a.b': {$elemMatch: {x: 1, y: 1}}},\n    {$set: {'a.$.b': 3}},\n    {a: [{b: 3}]});\n  // with $near, make sure it does not find the closest one (#3599)\n  modifyWithQuery({a: []},\n    {'a.b': {$near: [5, 5]}},\n    {$set: {'a.$.b': 'k'}},\n    {a: []});\n  modifyWithQuery({a: [{b: [ [3, 3], [4, 4] ]}]},\n    {'a.b': {$near: [5, 5]}},\n    {$set: {'a.$.b': 'k'}},\n    {a: [{b: 'k'}]});\n  modifyWithQuery({a: [{b: [1, 1]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [9, 9]}]},\n  {'a.b': {$near: [5, 5]}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{b: 'k'}, {b: [[3, 3], [4, 4]]}, {b: [9, 9]}]});\n  modifyWithQuery({a: [{b: [1, 1]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [9, 9]}]},\n  {'a.b': {$near: [9, 9], $maxDistance: 1}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{b: 'k'}, {b: [[3, 3], [4, 4]]}, {b: [9, 9]}]});\n  modifyWithQuery({a: [{b: [1, 1]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [9, 9]}]},\n  {'a.b': {$near: [9, 9]}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{b: 'k'}, {b: [[3, 3], [4, 4]]}, {b: [9, 9]}]});\n  modifyWithQuery({a: [{b: [9, 9]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [9, 9]}]},\n  {'a.b': {$near: [9, 9]}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{b: 'k'}, {b: [[3, 3], [4, 4]]}, {b: [9, 9]}]});\n  modifyWithQuery({a: [{b: [4, 3]},\n    {c: [1, 1]}]},\n  {'a.c': {$near: [1, 1]}},\n  {$set: {'a.$.c': 'k'}},\n  {a: [{c: 'k', b: [4, 3]}, {c: [1, 1]}]});\n  modifyWithQuery({a: [{c: [9, 9]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [1, 1]}]},\n  {'a.b': {$near: [1, 1]}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{c: [9, 9], b: 'k'}, {b: [ [3, 3], [4, 4]]}, {b: [1, 1]}]});\n  modifyWithQuery({a: [{c: [9, 9], b: [4, 3]},\n    {b: [ [3, 3], [4, 4] ]},\n    {b: [1, 1]}]},\n  {'a.b': {$near: [1, 1]}},\n  {$set: {'a.$.b': 'k'}},\n  {a: [{c: [9, 9], b: 'k'}, {b: [ [3, 3], [4, 4]]}, {b: [1, 1]}]});\n\n  // $inc\n  modify({a: 1, b: 2}, {$inc: {a: 10}}, {a: 11, b: 2});\n  modify({a: 1, b: 2}, {$inc: {c: 10}}, {a: 1, b: 2, c: 10});\n  exception({a: 1}, {$inc: {a: '10'}});\n  exception({a: 1}, {$inc: {a: true}});\n  exception({a: 1}, {$inc: {a: [10]}});\n  exception({a: '1'}, {$inc: {a: 10}});\n  exception({a: [1]}, {$inc: {a: 10}});\n  exception({a: {}}, {$inc: {a: 10}});\n  exception({a: false}, {$inc: {a: 10}});\n  exception({a: null}, {$inc: {a: 10}});\n  modify({a: [1, 2]}, {$inc: {'a.1': 10}}, {a: [1, 12]});\n  modify({a: [1, 2]}, {$inc: {'a.2': 10}}, {a: [1, 2, 10]});\n  modify({a: [1, 2]}, {$inc: {'a.3': 10}}, {a: [1, 2, null, 10]});\n  modify({a: {b: 2}}, {$inc: {'a.b': 10}}, {a: {b: 12}});\n  modify({a: {b: 2}}, {$inc: {'a.c': 10}}, {a: {b: 2, c: 10}});\n  exception({}, {$inc: {_id: 1}});\n\n  // $currentDate\n  modify({}, {$currentDate: {a: true}}, (result, msg) => { test.instanceOf(result.a, Date, msg); });\n  modify({}, {$currentDate: {a: {$type: 'date'}}}, (result, msg) => { test.instanceOf(result.a, Date, msg); });\n  exception({}, {$currentDate: {a: false}});\n  exception({}, {$currentDate: {a: {}}});\n  exception({}, {$currentDate: {a: {$type: 'timestamp'}}});\n\n  // $min\n  modify({a: 1, b: 2}, {$min: {b: 1}}, {a: 1, b: 1});\n  modify({a: 1, b: 2}, {$min: {b: 3}}, {a: 1, b: 2});\n  modify({a: 1, b: 2}, {$min: {c: 10}}, {a: 1, b: 2, c: 10});\n  exception({a: 1}, {$min: {a: '10'}});\n  exception({a: 1}, {$min: {a: true}});\n  exception({a: 1}, {$min: {a: [10]}});\n  exception({a: '1'}, {$min: {a: 10}});\n  exception({a: [1]}, {$min: {a: 10}});\n  exception({a: {}}, {$min: {a: 10}});\n  exception({a: false}, {$min: {a: 10}});\n  exception({a: null}, {$min: {a: 10}});\n  modify({a: [1, 2]}, {$min: {'a.1': 1}}, {a: [1, 1]});\n  modify({a: [1, 2]}, {$min: {'a.1': 3}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$min: {'a.2': 10}}, {a: [1, 2, 10]});\n  modify({a: [1, 2]}, {$min: {'a.3': 10}}, {a: [1, 2, null, 10]});\n  modify({a: {b: 2}}, {$min: {'a.b': 1}}, {a: {b: 1}});\n  modify({a: {b: 2}}, {$min: {'a.c': 10}}, {a: {b: 2, c: 10}});\n  exception({}, {$min: {_id: 1}});\n\n  // $max\n  modify({a: 1, b: 2}, {$max: {b: 1}}, {a: 1, b: 2});\n  modify({a: 1, b: 2}, {$max: {b: 3}}, {a: 1, b: 3});\n  modify({a: 1, b: 2}, {$max: {c: 10}}, {a: 1, b: 2, c: 10});\n  exception({a: 1}, {$max: {a: '10'}});\n  exception({a: 1}, {$max: {a: true}});\n  exception({a: 1}, {$max: {a: [10]}});\n  exception({a: '1'}, {$max: {a: 10}});\n  exception({a: [1]}, {$max: {a: 10}});\n  exception({a: {}}, {$max: {a: 10}});\n  exception({a: false}, {$max: {a: 10}});\n  exception({a: null}, {$max: {a: 10}});\n  modify({a: [1, 2]}, {$max: {'a.1': 3}}, {a: [1, 3]});\n  modify({a: [1, 2]}, {$max: {'a.1': 1}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$max: {'a.2': 10}}, {a: [1, 2, 10]});\n  modify({a: [1, 2]}, {$max: {'a.3': 10}}, {a: [1, 2, null, 10]});\n  modify({a: {b: 2}}, {$max: {'a.b': 3}}, {a: {b: 3}});\n  modify({a: {b: 2}}, {$max: {'a.c': 10}}, {a: {b: 2, c: 10}});\n  exception({}, {$max: {_id: 1}});\n\n  // $set\n  modify({a: 1, b: 2}, {$set: {a: 10}}, {a: 10, b: 2});\n  modify({a: 1, b: 2}, {$set: {c: 10}}, {a: 1, b: 2, c: 10});\n  modify({a: 1, b: 2}, {$set: {a: {c: 10}}}, {a: {c: 10}, b: 2});\n  modify({a: [1, 2], b: 2}, {$set: {a: [3, 4]}}, {a: [3, 4], b: 2});\n  modify({a: [1, 2, 3], b: 2}, {$set: {'a.1': [3, 4]}},\n    {a: [1, [3, 4], 3], b: 2});\n  modify({a: [1], b: 2}, {$set: {'a.1': 9}}, {a: [1, 9], b: 2});\n  modify({a: [1], b: 2}, {$set: {'a.2': 9}}, {a: [1, null, 9], b: 2});\n  modify({a: {b: 1}}, {$set: {'a.c': 9}}, {a: {b: 1, c: 9}});\n  modify({}, {$set: {'x._id': 4}}, {x: {_id: 4}});\n\n  // Changing _id is disallowed\n  exception({}, {$set: {_id: 4}});\n  exception({_id: 1}, {$set: {_id: 4}});\n  modify({_id: 4}, {$set: {_id: 4}}, {_id: 4});  // not-changing _id is not bad\n  // restricted field names\n  exception({a: {}}, {$set: {a: {$a: 1}}});\n  exception({ a: {} }, { $set: { a: { c:\n              [{ b: { $a: 1 } }] } } });\n  exception({a: {}}, {$set: {a: {'\\0a': 1}}});\n  exception({a: {}}, {$set: {a: {'a.b': 1}}});\n\n  // $unset\n  modify({}, {$unset: {a: 1}}, {});\n  modify({a: 1}, {$unset: {a: 1}}, {});\n  modify({a: 1, b: 2}, {$unset: {a: 1}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: 0}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: false}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: null}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: [1]}}, {b: 2});\n  modify({a: 1, b: 2}, {$unset: {a: {}}}, {b: 2});\n  modify({a: {b: 2, c: 3}}, {$unset: {'a.b': 1}}, {a: {c: 3}});\n  modify({a: [1, 2, 3]}, {$unset: {'a.1': 1}}, {a: [1, null, 3]}); // tested\n  modify({a: [1, 2, 3]}, {$unset: {'a.2': 1}}, {a: [1, 2, null]}); // tested\n  modify({a: [1, 2, 3]}, {$unset: {'a.x': 1}}, {a: [1, 2, 3]}); // tested\n  modify({a: {b: 1}}, {$unset: {'a.b.c.d': 1}}, {a: {b: 1}});\n  modify({a: {b: 1}}, {$unset: {'a.x.c.d': 1}}, {a: {b: 1}});\n  modify({a: {b: {c: 1}}}, {$unset: {'a.b.c': 1}}, {a: {b: {}}});\n  exception({}, {$unset: {_id: 1}});\n\n  // $push\n  modify({}, {$push: {a: 1}}, {a: [1]});\n  modify({a: []}, {$push: {a: 1}}, {a: [1]});\n  modify({a: [1]}, {$push: {a: 2}}, {a: [1, 2]});\n  exception({a: true}, {$push: {a: 1}});\n  modify({a: [1]}, {$push: {a: [2]}}, {a: [1, [2]]});\n  modify({a: []}, {$push: {'a.1': 99}}, {a: [null, [99]]}); // tested\n  modify({a: {}}, {$push: {'a.x': 99}}, {a: {x: [99]}});\n  modify({}, {$push: {a: {$each: [1, 2, 3]}}},\n    {a: [1, 2, 3]});\n  modify({a: []}, {$push: {a: {$each: [1, 2, 3]}}},\n    {a: [1, 2, 3]});\n  modify({a: [true]}, {$push: {a: {$each: [1, 2, 3]}}},\n    {a: [true, 1, 2, 3]});\n  modify({a: [true]}, {$push: {a: {$each: [1, 2, 3], $slice: -2}}},\n    {a: [2, 3]});\n  modify({a: [false, true]}, {$push: {a: {$each: [1], $slice: -2}}},\n    {a: [true, 1]});\n  modify(\n    {a: [{x: 3}, {x: 1}]},\n    {$push: {a: {\n      $each: [{x: 4}, {x: 2}],\n      $slice: -2,\n      $sort: {x: 1},\n    }}},\n    {a: [{x: 3}, {x: 4}]});\n  modify({}, {$push: {a: {$each: [1, 2, 3], $slice: 0}}}, {a: []});\n  modify({a: [1, 2]}, {$push: {a: {$each: [1, 2, 3], $slice: 0}}}, {a: []});\n  // $push with $position modifier\n  // No negative number for $position\n  exception({a: []}, {$push: {a: {$each: [0], $position: -1}}});\n  modify({a: [1, 2]}, {$push: {a: {$each: [0], $position: 0}}},\n    {a: [0, 1, 2]});\n  modify({a: [1, 2]}, {$push: {a: {$each: [-1, 0], $position: 0}}},\n    {a: [-1, 0, 1, 2]});\n  modify({a: [1, 3]}, {$push: {a: {$each: [2], $position: 1}}}, {a: [1, 2, 3]});\n  modify({a: [1, 4]}, {$push: {a: {$each: [2, 3], $position: 1}}},\n    {a: [1, 2, 3, 4]});\n  modify({a: [1, 2]}, {$push: {a: {$each: [3], $position: 3}}}, {a: [1, 2, 3]});\n  modify({a: [1, 2]}, {$push: {a: {$each: [3], $position: 99}}},\n    {a: [1, 2, 3]});\n  modify({a: [1, 2]}, {$push: {a: {$each: [3], $position: 99, $slice: -2}}},\n    {a: [2, 3]});\n  modify(\n    {a: [{x: 1}, {x: 2}]},\n    {$push: {a: {$each: [{x: 3}], $position: 0, $sort: {x: 1}, $slice: -3}}},\n    {a: [{x: 1}, {x: 2}, {x: 3}]}\n  );\n  modify(\n    {a: [{x: 1}, {x: 2}]},\n    {$push: {a: {$each: [{x: 3}], $position: 0, $sort: {x: 1}, $slice: 0}}},\n    {a: []}\n  );\n  // restricted field names\n  exception({}, {$push: {$a: 1}});\n  exception({}, {$push: {'\\0a': 1}});\n  exception({}, {$push: {a: {$a: 1}}});\n  exception({}, {$push: {a: {$each: [{$a: 1}]}}});\n  exception({}, {$push: {a: {$each: [{'a.b': 1}]}}});\n  exception({}, {$push: {a: {$each: [{'\\0a': 1}]}}});\n  modify({}, {$push: {a: {$each: [{'': 1}]}}}, {a: [ { '': 1 } ]});\n  modify({}, {$push: {a: {$each: [{' ': 1}]}}}, {a: [ { ' ': 1 } ]});\n  exception({}, {$push: {a: {$each: [{'.': 1}]}}});\n\n  // #issue 5167\n  // $push $slice with positive numbers\n  modify({}, {$push: {a: {$each: [], $slice: 5}}}, {a: []});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [], $slice: 1}}}, {a: [1]});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [4, 5], $slice: 1}}}, {a: [1]});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [4, 5], $slice: 2}}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [4, 5], $slice: 4}}}, {a: [1, 2, 3, 4]});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [4, 5], $slice: 5}}}, {a: [1, 2, 3, 4, 5]});\n  modify({a: [1, 2, 3]}, {$push: {a: {$each: [4, 5], $slice: 10}}}, {a: [1, 2, 3, 4, 5]});\n\n\n  // $pushAll\n  modify({}, {$pushAll: {a: [1]}}, {a: [1]});\n  modify({a: []}, {$pushAll: {a: [1]}}, {a: [1]});\n  modify({a: [1]}, {$pushAll: {a: [2]}}, {a: [1, 2]});\n  modify({}, {$pushAll: {a: [1, 2]}}, {a: [1, 2]});\n  modify({a: []}, {$pushAll: {a: [1, 2]}}, {a: [1, 2]});\n  modify({a: [1]}, {$pushAll: {a: [2, 3]}}, {a: [1, 2, 3]});\n  modify({}, {$pushAll: {a: []}}, {a: []});\n  modify({a: []}, {$pushAll: {a: []}}, {a: []});\n  modify({a: [1]}, {$pushAll: {a: []}}, {a: [1]});\n  exception({a: true}, {$pushAll: {a: [1]}});\n  exception({a: []}, {$pushAll: {a: 1}});\n  modify({a: []}, {$pushAll: {'a.1': [99]}}, {a: [null, [99]]});\n  modify({a: []}, {$pushAll: {'a.1': []}}, {a: [null, []]});\n  modify({a: {}}, {$pushAll: {'a.x': [99]}}, {a: {x: [99]}});\n  modify({a: {}}, {$pushAll: {'a.x': []}}, {a: {x: []}});\n  exception({a: [1]}, {$pushAll: {a: [{$a: 1}]}});\n  exception({a: [1]}, {$pushAll: {a: [{'\\0a': 1}]}});\n  exception({a: [1]}, {$pushAll: {a: [{'a.b': 1}]}});\n\n  // $addToSet\n  modify({}, {$addToSet: {a: 1}}, {a: [1]});\n  modify({a: []}, {$addToSet: {a: 1}}, {a: [1]});\n  modify({a: [1]}, {$addToSet: {a: 2}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$addToSet: {a: 1}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$addToSet: {a: 2}}, {a: [1, 2]});\n  modify({a: [1, 2]}, {$addToSet: {a: 3}}, {a: [1, 2, 3]});\n  exception({a: true}, {$addToSet: {a: 1}});\n  modify({a: [1]}, {$addToSet: {a: [2]}}, {a: [1, [2]]});\n  modify({}, {$addToSet: {a: {x: 1}}}, {a: [{x: 1}]});\n  modify({a: [{x: 1}]}, {$addToSet: {a: {x: 1}}}, {a: [{x: 1}]});\n  modify({a: [{x: 1}]}, {$addToSet: {a: {x: 2}}}, {a: [{x: 1}, {x: 2}]});\n  modify({a: [{x: 1, y: 2}]}, {$addToSet: {a: {x: 1, y: 2}}},\n    {a: [{x: 1, y: 2}]});\n  modify({a: [{x: 1, y: 2}]}, {$addToSet: {a: {y: 2, x: 1}}},\n    {a: [{x: 1, y: 2}, {y: 2, x: 1}]});\n  modify({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, 4]}}}, {a: [1, 2, 3, 4]});\n  modify({}, {$addToSet: {a: {$each: []}}}, {a: []});\n  modify({}, {$addToSet: {a: {$each: [1]}}}, {a: [1]});\n  modify({a: []}, {$addToSet: {'a.1': 99}}, {a: [null, [99]]});\n  modify({a: {}}, {$addToSet: {'a.x': 99}}, {a: {x: [99]}});\n\n  // invalid field names\n  exception({}, {$addToSet: {a: {$b: 1}}});\n  exception({}, {$addToSet: {a: {'a.b': 1}}});\n  exception({}, {$addToSet: {a: {'a.': 1}}});\n  exception({}, {$addToSet: {a: {'\\u0000a': 1}}});\n  exception({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, {$a: 1}]}}});\n  exception({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, {'\\0a': 1}]}}});\n  exception({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, [{$a: 1}]]}}});\n  exception({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, [{b: {c: [{a: 1}, {'d.s': 2}]}}]]}}});\n  exception({a: [1, 2]}, {$addToSet: {a: {b: [3, 1, [{b: {c: [{a: 1}, {'d.s': 2}]}}]]}}});\n  // $each is first element and thus an operator\n  modify({a: [1, 2]}, {$addToSet: {a: {$each: [3, 1, 4], b: 12}}}, {a: [ 1, 2, 3, 4 ]});\n  // this should fail because $each is now a field name (not first in object) and thus invalid field name with $\n  exception({a: [1, 2]}, {$addToSet: {a: {b: 12, $each: [3, 1, 4]}}});\n\n  // $pop\n  modify({}, {$pop: {a: 1}}, {}); // tested\n  modify({}, {$pop: {a: -1}}, {}); // tested\n  modify({a: []}, {$pop: {a: 1}}, {a: []});\n  modify({a: []}, {$pop: {a: -1}}, {a: []});\n  modify({a: [1, 2, 3]}, {$pop: {a: 1}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: 10}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: 0.001}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: 0}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: 'stuff'}}, {a: [1, 2]});\n  modify({a: [1, 2, 3]}, {$pop: {a: -1}}, {a: [2, 3]});\n  modify({a: [1, 2, 3]}, {$pop: {a: -10}}, {a: [2, 3]});\n  modify({a: [1, 2, 3]}, {$pop: {a: -0.001}}, {a: [2, 3]});\n  exception({a: true}, {$pop: {a: 1}});\n  exception({a: true}, {$pop: {a: -1}});\n  modify({a: []}, {$pop: {'a.1': 1}}, {a: []}); // tested\n  modify({a: [1, [2, 3], 4]}, {$pop: {'a.1': 1}}, {a: [1, [2], 4]});\n  modify({a: {}}, {$pop: {'a.x': 1}}, {a: {}}); // tested\n  modify({a: {x: [2, 3]}}, {$pop: {'a.x': 1}}, {a: {x: [2]}});\n\n  // $pull\n  modify({}, {$pull: {a: 1}}, {});\n  modify({}, {$pull: {'a.x': 1}}, {});\n  modify({a: {}}, {$pull: {'a.x': 1}}, {a: {}});\n  exception({a: true}, {$pull: {a: 1}});\n  modify({a: [2, 1, 2]}, {$pull: {a: 1}}, {a: [2, 2]});\n  modify({a: [2, 1, 2]}, {$pull: {a: 2}}, {a: [1]});\n  modify({a: [2, 1, 2]}, {$pull: {a: 3}}, {a: [2, 1, 2]});\n  modify({a: [1, null, 2, null]}, {$pull: {a: null}}, {a: [1, 2]});\n  modify({a: []}, {$pull: {a: 3}}, {a: []});\n  modify({a: [[2], [2, 1], [3]]}, {$pull: {a: [2, 1]}},\n    {a: [[2], [3]]}); // tested\n  modify({a: [{b: 1, c: 2}, {b: 2, c: 2}]}, {$pull: {a: {b: 1}}},\n    {a: [{b: 2, c: 2}]});\n  modify({a: [{b: 1, c: 2}, {b: 2, c: 2}]}, {$pull: {a: {c: 2}}},\n    {a: []});\n  // XXX implement this functionality!\n  // probably same refactoring as $elemMatch?\n  // modify({a: [1, 2, 3, 4]}, {$pull: {$gt: 2}}, {a: [1,2]}); fails!\n\n  // $pullAll\n  modify({}, {$pullAll: {a: [1]}}, {});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: []}}, {a: [1, 2, 3]});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: [2]}}, {a: [1, 3]});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: [2, 1]}}, {a: [3]});\n  modify({a: [1, 2, 3]}, {$pullAll: {a: [1, 2]}}, {a: [3]});\n  modify({}, {$pullAll: {'a.b.c': [2]}}, {});\n  exception({a: true}, {$pullAll: {a: [1]}});\n  exception({a: [1, 2, 3]}, {$pullAll: {a: 1}});\n  modify({x: [{a: 1}, {a: 1, b: 2}]}, {$pullAll: {x: [{a: 1}]}},\n    {x: [{a: 1, b: 2}]});\n\n  // $rename\n  modify({}, {$rename: {a: 'b'}}, {});\n  modify({a: [12]}, {$rename: {a: 'b'}}, {b: [12]});\n  modify({a: {b: 12}}, {$rename: {a: 'c'}}, {c: {b: 12}});\n  modify({a: {b: 12}}, {$rename: {'a.b': 'a.c'}}, {a: {c: 12}});\n  modify({a: {b: 12}}, {$rename: {'a.b': 'x'}}, {a: {}, x: 12}); // tested\n  modify({a: {b: 12}}, {$rename: {'a.b': 'q.r'}}, {a: {}, q: {r: 12}});\n  modify({a: {b: 12}}, {$rename: {'a.b': 'q.2.r'}}, {a: {}, q: {2: {r: 12}}});\n  modify({a: {b: 12}, q: {}}, {$rename: {'a.b': 'q.2.r'}},\n    {a: {}, q: {2: {r: 12}}});\n  exception({a: {b: 12}, q: []}, {$rename: {'a.b': 'q.2'}}); // tested\n  exception({a: {b: 12}, q: []}, {$rename: {'a.b': 'q.2.r'}}); // tested\n  // These strange MongoDB behaviors throw.\n  // modify({a: {b: 12}, q: []}, {$rename: {'q.1': 'x'}},\n  //        {a: {b: 12}, x: []}); // tested\n  // modify({a: {b: 12}, q: []}, {$rename: {'q.1.j': 'x'}},\n  //        {a: {b: 12}, x: []}); // tested\n  exception({}, {$rename: {a: 'a'}});\n  exception({}, {$rename: {'a.b': 'a.b'}});\n  modify({a: 12, b: 13}, {$rename: {a: 'b'}}, {b: 12});\n  exception({a: [12]}, {$rename: {a: '$b'}});\n  exception({a: [12]}, {$rename: {a: '\\0a'}});\n\n  // $setOnInsert\n  modify({a: 0}, {$setOnInsert: {a: 12}}, {a: 0});\n  upsert({a: 12}, {$setOnInsert: {b: 12}}, {a: 12, b: 12});\n  upsert({a: 12}, {$setOnInsert: {_id: 'test'}}, {_id: 'test', a: 12});\n  upsert({'a.b': 10}, {$setOnInsert: {a: {b: 10, c: 12}}}, {a: {b: 10, c: 12}});\n  upsert({'a.b': 10}, {$setOnInsert: {c: 12}}, {a: {b: 10}, c: 12});\n  upsert({_id: 'test'}, {$setOnInsert: {c: 12}}, {_id: 'test', c: 12});\n  upsert('test', {$setOnInsert: {c: 12}}, {_id: 'test', c: 12});\n  upsertException({a: 0}, {$setOnInsert: {$a: 12}});\n  upsertException({a: 0}, {$setOnInsert: {'\\0a': 12}});\n  upsert({a: 0}, {$setOnInsert: {b: {a: 1}}}, {a: 0, b: {a: 1}});\n  upsertException({a: 0}, {$setOnInsert: {b: {$a: 1}}});\n  upsertException({a: 0}, {$setOnInsert: {b: {'a.b': 1}}});\n  upsertException({a: 0}, {$setOnInsert: {b: {'\\0a': 1}}});\n\n  // Test for https://github.com/meteor/meteor/issues/8775.\n  upsert(\n    { a: { $exists: true }},\n    { $setOnInsert: { a: 123 }},\n    { a: 123 }\n  );\n\n  // Tests for https://github.com/meteor/meteor/issues/8794.\n  const testObjectId = new MongoID.ObjectID();\n  upsert(\n    { _id: testObjectId },\n    { $setOnInsert: { a: 123 } },\n    { _id: testObjectId, a: 123 },\n  );\n  upsert(\n    { someOtherId: testObjectId },\n    { $setOnInsert: { a: 123 } },\n    { someOtherId: testObjectId, a: 123 },\n  );\n  upsert(\n    { a: { $eq: testObjectId } },\n    { $setOnInsert: { a: 123 } },\n    { a: 123 },\n  );\n  const testDate = new Date('2017-01-01');\n  upsert(\n    { someDate: testDate },\n    { $setOnInsert: { a: 123 } },\n    { someDate: testDate, a: 123 },\n  );\n  upsert(\n    {\n      a: Object.create(null, {\n        $exists: {\n          writable: true,\n          configurable: true,\n          value: true,\n        },\n      }),\n    },\n    { $setOnInsert: { a: 123 } },\n    { a: 123 },\n  );\n  upsert(\n    { foo: { $exists: true, $type: 2 }},\n    { $setOnInsert: { bar: 'baz' } },\n    { bar: 'baz' }\n  );\n  upsert(\n    { foo: {} },\n    { $setOnInsert: { bar: 'baz' } },\n    { foo: {}, bar: 'baz' }\n  );\n\n  // Tests for https://github.com/meteor/meteor/issues/8806\n  upsert({\"a\": {\"b\": undefined, \"c\": null}}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": {\"b\": undefined, \"c\": null}, \"c\": \"foo\"})\n  upsert({\"a\": {\"$eq\": \"bar\" }}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n  // $all with 1 statement is similar to $eq\n  upsert({\"a\": {\"$all\": [\"bar\"] }}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n  upsert({\"a\": {\"$eq\": \"bar\" }, \"b\": \"baz\"}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"b\": \"baz\", \"c\": \"foo\"})\n   upsert({\"a\": {\"$exists\": true}}, {\"$set\": {\"c\": \"foo\"}}, {\"c\": \"foo\"})\n  upsert({\"a\": {\"$exists\": true, \"$eq\": \"foo\"}}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"foo\", \"c\": \"foo\"})\n  upsert({\"a\": {\"$gt\": 3, \"$eq\": 2}}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": 2, \"c\": \"foo\"})\n   // $and\n  upsert({\"$and\": [{\"a\": {\"$eq\": \"bar\"}}]}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n  upsert({\"$and\": [{\"a\": {\"$all\": [\"bar\"]}}]}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n  upsert({\"$and\": [{\"a\": {\"$all\": [\"bar\"]}}]}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n   // $or with one statement is handled similar to $and\n  upsert({\"$or\": [{\"a\": \"bar\"}]}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": \"bar\", \"c\": \"foo\"})\n   // $or with multiple statements is ignored\n  upsert({\"$or\": [{\"a\": \"bar\"}, {\"b\": \"baz\"}]}, {\"$set\": {\"c\": \"foo\"}}, {\"c\": \"foo\"})\n   // Negative logical operators are ignored\n  upsert({\"$nor\": [{\"a\": \"bar\"}]}, {\"$set\": {\"c\": \"foo\"}}, {\"c\": \"foo\"})\n   // Filter out empty objects after filtering out operators\n  upsert({\"a\": {\"$exists\": true}}, {\"$set\": {\"c\": \"foo\"}}, {\"c\": \"foo\"})\n   // But leave actual empty objects\n  upsert({\"a\": {}}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": {}, \"c\": \"foo\"})\n    // Also filter out shorthand regexp notation\n  upsert({\"a\": /a/}, {\"$set\": {\"c\": \"foo\"}}, {\"c\": \"foo\"})\n   // Test nested fields\n  upsert({\"$and\": [{\"a.a\": \"foo\"}, {\"$or\": [{\"a.b\": \"baz\"}]}]}, {\"$set\": {\"c\": \"foo\"}}, {\"a\": {\"a\": \"foo\", \"b\": \"baz\"}, \"c\": \"foo\"})\n   // Test for https://github.com/meteor/meteor/issues/5294\n  upsert({\"a\": {\"$ne\": 444}}, {\"$push\": {\"a\": 123}}, {\"a\": [123]})\n   // Mod takes precedence over query\n  upsert({\"a\": \"foo\"}, {\"a\": \"bar\"}, {\"a\": \"bar\"})\n  upsert({\"a\": \"foo\"}, {\"$set\":{\"a\": \"bar\"}}, {\"a\": \"bar\"})\n   // Replacement can take _id from query\n  upsert({\"_id\": \"foo\", \"foo\": \"bar\"}, {\"bar\": \"foo\"}, {\"_id\": \"foo\", \"bar\": \"foo\"})\n   // Replacement update keeps _id\n  upsertUpdate({\"_id\": \"foo\", \"bar\": \"baz\"}, {\"_id\":\"foo\"}, {\"bar\": \"crow\"}, {\"_id\": \"foo\", \"bar\": \"crow\"});\n  // Test for https://github.com/meteor/meteor/issues/9167\n  upsert({key: 123, keyName: '321'}, {$set: {name: 'Todo'}}, {key: 123, keyName: '321', name: 'Todo'});\n  upsertException({key: 123, \"key.name\": '321'}, {$set:{}});\n  \n  // Nested fields don't work with literal objects\n  upsertException({\"a\": {}, \"a.b\": \"foo\"}, {});\n   // You can't have an ambiguious ID\n  upsertException({\"_id\":\"foo\"}, {\"_id\":\"bar\"});\n  upsertException({\"_id\":\"foo\"}, {\"$set\":{\"_id\":\"bar\"}});\n   // You can't set the same field twice\n  upsertException({\"$and\": [{\"a\": \"foo\"}, {\"a\": \"foo\"}]}, {}); //not even with same value\n  upsertException({\"a\": {\"$all\": [\"foo\", \"bar\"]}}, {});\n  upsertException({\"$and\": [{\"a\": {\"$eq\": \"foo\"}}, {\"$or\": [{\"a\": {\"$all\": [\"bar\"]}}]}]}, {});\n   // You can't have nested dotted fields\n  upsertException({\"a\": {\"foo.bar\": \"baz\"}}, {});\n   // You can't have dollar-prefixed fields above the first level (logical operators not counted)\n  upsertException({\"a\": {\"a\": {\"$eq\": \"foo\"}}}, {});\n  upsertException({\"a\": {\"a\": {\"$exists\": true}}}, {});\n   // You can't mix operators with other fields\n  upsertException({\"a\": {\"$eq\": \"bar\", \"b\": \"foo\"}}, {})\n  upsertException({\"a\": {\"b\": \"foo\", \"$eq\": \"bar\"}}, {})\n\n  const mongoIdForUpsert = new MongoID.ObjectID('44915733af80844fa1cef07a');\n  upsert({_id: mongoIdForUpsert}, {$setOnInsert: {a: 123}}, {a: 123})\n\n  // Test for https://github.com/meteor/meteor/issues/7758\n  upsert({n_id: mongoIdForUpsert, c_n: \"bar\"},\n    {$set: { t_t_o: \"foo\"}},\n    {n_id: mongoIdForUpsert, t_t_o: \"foo\", c_n: \"bar\"});\n\n  exception({}, {$set: {_id: 'bad'}});\n\n  // $bit\n  // unimplemented\n\n  // XXX test case sensitivity of modops\n  // XXX for each (most) modop, test that it performs a deep copy\n});\n\n// XXX test update() (selecting docs, multi, upsert..)\n\nTinytest.add('minimongo - observe ordered', test => {\n  const operations = [];\n  const cbs = log_callbacks(operations);\n  let handle;\n\n  const c = new LocalCollection();\n  handle = c.find({}, {sort: {a: 1}}).observe(cbs);\n  test.isTrue(handle.collection === c);\n\n  c.insert({_id: 'foo', a: 1});\n  test.equal(operations.shift(), ['added', {a: 1}, 0, null]);\n  c.update({a: 1}, {$set: {a: 2}});\n  test.equal(operations.shift(), ['changed', {a: 2}, 0, {a: 1}]);\n  c.insert({a: 10});\n  test.equal(operations.shift(), ['added', {a: 10}, 1, null]);\n  c.update({}, {$inc: {a: 1}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a: 3}, 0, {a: 2}]);\n  test.equal(operations.shift(), ['changed', {a: 11}, 1, {a: 10}]);\n  c.update({a: 11}, {a: 1});\n  test.equal(operations.shift(), ['changed', {a: 1}, 1, {a: 11}]);\n  test.equal(operations.shift(), ['moved', {a: 1}, 1, 0, 'foo']);\n  c.remove({a: 2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a: 3});\n  test.equal(operations.shift(), ['removed', 'foo', 1, {a: 3}]);\n\n  // test stop\n  handle.stop();\n  const idA2 = Random.id();\n  c.insert({_id: idA2, a: 2});\n  test.equal(operations.shift(), undefined);\n\n  // test initial inserts (and backwards sort)\n  handle = c.find({}, {sort: {a: -1}}).observe(cbs);\n  test.equal(operations.shift(), ['added', {a: 2}, 0, null]);\n  test.equal(operations.shift(), ['added', {a: 1}, 1, null]);\n  handle.stop();\n\n  // test _suppress_initial\n  handle = c.find({}, {sort: {a: -1}}).observe(Object.assign({\n    _suppress_initial: true}, cbs));\n  test.equal(operations.shift(), undefined);\n  c.insert({a: 100});\n  test.equal(operations.shift(), ['added', {a: 100}, 0, idA2]);\n  handle.stop();\n\n  // test skip and limit.\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}, skip: 1, limit: 2}).observe(cbs);\n  test.equal(operations.shift(), undefined);\n  c.insert({a: 1});\n  test.equal(operations.shift(), undefined);\n  c.insert({_id: 'foo', a: 2});\n  test.equal(operations.shift(), ['added', {a: 2}, 0, null]);\n  c.insert({a: 3});\n  test.equal(operations.shift(), ['added', {a: 3}, 1, null]);\n  c.insert({a: 4});\n  test.equal(operations.shift(), undefined);\n  c.update({a: 1}, {a: 0});\n  test.equal(operations.shift(), undefined);\n  c.update({a: 0}, {a: 5});\n  test.equal(operations.shift(), ['removed', 'foo', 0, {a: 2}]);\n  test.equal(operations.shift(), ['added', {a: 4}, 1, null]);\n  c.update({a: 3}, {a: 3.5});\n  test.equal(operations.shift(), ['changed', {a: 3.5}, 0, {a: 3}]);\n  handle.stop();\n\n  // test observe limit with pre-existing docs\n  c.remove({});\n  c.insert({a: 1});\n  c.insert({_id: 'two', a: 2});\n  c.insert({a: 3});\n  handle = c.find({}, {sort: {a: 1}, limit: 2}).observe(cbs);\n  test.equal(operations.shift(), ['added', {a: 1}, 0, null]);\n  test.equal(operations.shift(), ['added', {a: 2}, 1, null]);\n  test.equal(operations.shift(), undefined);\n  c.remove({a: 2});\n  test.equal(operations.shift(), ['removed', 'two', 1, {a: 2}]);\n  test.equal(operations.shift(), ['added', {a: 3}, 1, null]);\n  test.equal(operations.shift(), undefined);\n  handle.stop();\n\n  // test _no_indices\n\n  c.remove({});\n  handle = c.find({}, {sort: {a: 1}}).observe(Object.assign(cbs, {_no_indices: true}));\n  c.insert({_id: 'foo', a: 1});\n  test.equal(operations.shift(), ['added', {a: 1}, -1, null]);\n  c.update({a: 1}, {$set: {a: 2}});\n  test.equal(operations.shift(), ['changed', {a: 2}, -1, {a: 1}]);\n  c.insert({a: 10});\n  test.equal(operations.shift(), ['added', {a: 10}, -1, null]);\n  c.update({}, {$inc: {a: 1}}, {multi: true});\n  test.equal(operations.shift(), ['changed', {a: 3}, -1, {a: 2}]);\n  test.equal(operations.shift(), ['changed', {a: 11}, -1, {a: 10}]);\n  c.update({a: 11}, {a: 1});\n  test.equal(operations.shift(), ['changed', {a: 1}, -1, {a: 11}]);\n  test.equal(operations.shift(), ['moved', {a: 1}, -1, -1, 'foo']);\n  c.remove({a: 2});\n  test.equal(operations.shift(), undefined);\n  c.remove({a: 3});\n  test.equal(operations.shift(), ['removed', 'foo', -1, {a: 3}]);\n  handle.stop();\n});\n\n[true, false].forEach(ordered => {\n  Tinytest.add(`minimongo - observe ordered: ${ordered}`, test => {\n    const c = new LocalCollection();\n\n    let ev = '';\n    const makecb = tag => {\n      const ret = {};\n      ['added', 'changed', 'removed'].forEach(fn => {\n        const fnName = ordered ? `${fn}At` : fn;\n        ret[fnName] = doc => {\n          ev = `${ev + fn.substr(0, 1) + tag + doc._id}_`;\n        };\n      });\n      return ret;\n    };\n    const expect = x => {\n      test.equal(ev, x);\n      ev = '';\n    };\n\n    c.insert({_id: 1, name: 'strawberry', tags: ['fruit', 'red', 'squishy']});\n    c.insert({_id: 2, name: 'apple', tags: ['fruit', 'red', 'hard']});\n    c.insert({_id: 3, name: 'rose', tags: ['flower', 'red', 'squishy']});\n\n    // This should work equally well for ordered and unordered observations\n    // (because the callbacks don't look at indices and there's no 'moved'\n    // callback).\n    let handle = c.find({tags: 'flower'}).observe(makecb('a'));\n    expect('aa3_');\n    c.update({name: 'rose'}, {$set: {tags: ['bloom', 'red', 'squishy']}});\n    expect('ra3_');\n    c.update({name: 'rose'}, {$set: {tags: ['flower', 'red', 'squishy']}});\n    expect('aa3_');\n    c.update({name: 'rose'}, {$set: {food: false}});\n    expect('ca3_');\n    c.remove({});\n    expect('ra3_');\n    c.insert({_id: 4, name: 'daisy', tags: ['flower']});\n    expect('aa4_');\n    handle.stop();\n    // After calling stop, no more callbacks are called.\n    c.insert({_id: 5, name: 'iris', tags: ['flower']});\n    expect('');\n\n    // Test that observing a lookup by ID works.\n    handle = c.find(4).observe(makecb('b'));\n    expect('ab4_');\n    c.update(4, {$set: {eek: 5}});\n    expect('cb4_');\n    handle.stop();\n\n    // Test observe with reactive: false.\n    handle = c.find({tags: 'flower'}, {reactive: false}).observe(makecb('c'));\n    expect('ac4_ac5_');\n    // This insert shouldn't trigger a callback because it's not reactive.\n    c.insert({_id: 6, name: 'river', tags: ['flower']});\n    expect('');\n    handle.stop();\n  });\n});\n\n\nTinytest.add('minimongo - saveOriginals', test => {\n  // set up some data\n  const c = new LocalCollection();\n\n  let count;\n  c.insert({_id: 'foo', x: 'untouched'});\n  c.insert({_id: 'bar', x: 'updateme'});\n  c.insert({_id: 'baz', x: 'updateme'});\n  c.insert({_id: 'quux', y: 'removeme'});\n  c.insert({_id: 'whoa', y: 'removeme'});\n\n  // Save originals and make some changes.\n  c.saveOriginals();\n  c.insert({_id: 'hooray', z: 'insertme'});\n  c.remove({y: 'removeme'});\n  count = c.update({x: 'updateme'}, {$set: {z: 5}}, {multi: true});\n  c.update('bar', {$set: {k: 7}});  // update same doc twice\n\n  // Verify returned count is correct\n  test.equal(count, 2);\n\n  // Verify the originals.\n  let originals = c.retrieveOriginals();\n  const affected = ['bar', 'baz', 'quux', 'whoa', 'hooray'];\n  test.equal(originals.size(), affected.length);\n  affected.forEach(id => {\n    test.isTrue(originals.has(id));\n  });\n  test.equal(originals.get('bar'), {_id: 'bar', x: 'updateme'});\n  test.equal(originals.get('baz'), {_id: 'baz', x: 'updateme'});\n  test.equal(originals.get('quux'), {_id: 'quux', y: 'removeme'});\n  test.equal(originals.get('whoa'), {_id: 'whoa', y: 'removeme'});\n  test.equal(originals.get('hooray'), undefined);\n\n  // Verify that changes actually occured.\n  test.equal(c.find().count(), 4);\n  test.equal(c.findOne('foo'), {_id: 'foo', x: 'untouched'});\n  test.equal(c.findOne('bar'), {_id: 'bar', x: 'updateme', z: 5, k: 7});\n  test.equal(c.findOne('baz'), {_id: 'baz', x: 'updateme', z: 5});\n  test.equal(c.findOne('hooray'), {_id: 'hooray', z: 'insertme'});\n\n  // The next call doesn't get the same originals again.\n  c.saveOriginals();\n  originals = c.retrieveOriginals();\n  test.isTrue(originals);\n  test.isTrue(originals.empty());\n\n  // Insert and remove a document during the period.\n  c.saveOriginals();\n  c.insert({_id: 'temp', q: 8});\n  c.remove('temp');\n  originals = c.retrieveOriginals();\n  test.equal(originals.size(), 1);\n  test.isTrue(originals.has('temp'));\n  test.equal(originals.get('temp'), undefined);\n});\n\nTinytest.add('minimongo - saveOriginals errors', test => {\n  const c = new LocalCollection();\n  // Can't call retrieve before save.\n  test.throws(() => { c.retrieveOriginals(); });\n  c.saveOriginals();\n  // Can't call save twice.\n  test.throws(() => { c.saveOriginals(); });\n});\n\nTinytest.add('minimongo - objectid transformation', test => {\n  const testId = item => {\n    test.equal(item, MongoID.idParse(MongoID.idStringify(item)));\n  };\n  const randomOid = new MongoID.ObjectID();\n  testId(randomOid);\n  testId('FOO');\n  testId('ffffffffffff');\n  testId('0987654321abcdef09876543');\n  testId(new MongoID.ObjectID());\n  testId('--a string');\n\n  test.equal('ffffffffffff', MongoID.idParse(MongoID.idStringify('ffffffffffff')));\n});\n\n\nTinytest.add('minimongo - objectid', test => {\n  const randomOid = new MongoID.ObjectID();\n  const anotherRandomOid = new MongoID.ObjectID();\n  test.notEqual(randomOid, anotherRandomOid);\n  test.throws(() => { new MongoID.ObjectID('qqqqqqqqqqqqqqqqqqqqqqqq');});\n  test.throws(() => { new MongoID.ObjectID('ABCDEF'); });\n  test.equal(randomOid, new MongoID.ObjectID(randomOid.valueOf()));\n});\n\nTinytest.add('minimongo - pause', test => {\n  const operations = [];\n  const cbs = log_callbacks(operations);\n\n  const c = new LocalCollection();\n  const h = c.find({}).observe(cbs);\n\n  // remove and add cancel out.\n  c.insert({_id: 1, a: 1});\n  test.equal(operations.shift(), ['added', {a: 1}, 0, null]);\n\n  c.pauseObservers();\n\n  c.remove({_id: 1});\n  test.length(operations, 0);\n  c.insert({_id: 1, a: 1});\n  test.length(operations, 0);\n\n  c.resumeObservers();\n  test.length(operations, 0);\n\n\n  // two modifications become one\n  c.pauseObservers();\n\n  c.update({_id: 1}, {a: 2});\n  c.update({_id: 1}, {a: 3});\n\n  c.resumeObservers();\n  test.equal(operations.shift(), ['changed', {a: 3}, 0, {a: 1}]);\n  test.length(operations, 0);\n\n  // test special case for remove({})\n  c.pauseObservers();\n  test.equal(c.remove({}), 1);\n  test.length(operations, 0);\n  c.resumeObservers();\n  test.equal(operations.shift(), ['removed', 1, 0, {a: 3}]);\n  test.length(operations, 0);\n\n  h.stop();\n});\n\nTinytest.add('minimongo - ids matched by selector', test => {\n  const check = (selector, ids) => {\n    const idsFromSelector = LocalCollection._idsMatchedBySelector(selector);\n    // XXX normalize order, in a way that also works for ObjectIDs?\n    test.equal(idsFromSelector, ids);\n  };\n  check('foo', ['foo']);\n  check({_id: 'foo'}, ['foo']);\n  const oid1 = new MongoID.ObjectID();\n  check(oid1, [oid1]);\n  check({_id: oid1}, [oid1]);\n  check({_id: 'foo', x: 42}, ['foo']);\n  check({}, null);\n  check({_id: {$in: ['foo', oid1]}}, ['foo', oid1]);\n  check({_id: {$ne: 'foo'}}, null);\n  // not actually valid, but works for now...\n  check({$and: ['foo']}, ['foo']);\n  check({$and: [{x: 42}, {_id: oid1}]}, [oid1]);\n  check({$and: [{x: 42}, {_id: {$in: [oid1]}}]}, [oid1]);\n});\n\nTinytest.add('minimongo - reactive stop', test => {\n  const coll = new LocalCollection();\n  coll.insert({_id: 'A'});\n  coll.insert({_id: 'B'});\n  coll.insert({_id: 'C'});\n\n  const addBefore = (str, newChar, before) => {\n    const idx = str.indexOf(before);\n    if (idx === -1) {return str + newChar;}\n    return str.slice(0, idx) + newChar + str.slice(idx);\n  };\n\n  let x, y;\n  const sortOrder = ReactiveVar(1);\n\n  const c = Tracker.autorun(() => {\n    const q = coll.find({}, {sort: {_id: sortOrder.get()}});\n    x = '';\n    q.observe({ addedAt(doc, atIndex, before) {\n      x = addBefore(x, doc._id, before);\n    }});\n    y = '';\n    q.observeChanges({ addedBefore(id, fields, before) {\n      y = addBefore(y, id, before);\n    }});\n  });\n\n  test.equal(x, 'ABC');\n  test.equal(y, 'ABC');\n\n  sortOrder.set(-1);\n  test.equal(x, 'ABC');\n  test.equal(y, 'ABC');\n  Tracker.flush();\n  test.equal(x, 'CBA');\n  test.equal(y, 'CBA');\n\n  coll.insert({_id: 'D'});\n  coll.insert({_id: 'E'});\n  test.equal(x, 'EDCBA');\n  test.equal(y, 'EDCBA');\n\n  c.stop();\n  // stopping kills the observes immediately\n  coll.insert({_id: 'F'});\n  test.equal(x, 'EDCBA');\n  test.equal(y, 'EDCBA');\n});\n\nTinytest.add('minimongo - immediate invalidate', test => {\n  const coll = new LocalCollection();\n  coll.insert({_id: 'A'});\n\n  // This has two separate findOnes.  findOne() uses skip/limit, which means\n  // that its response to an update() call involves a recompute. We used to have\n  // a bug where we would first calculate all the calls that need to be\n  // recomputed, then recompute them one by one, without checking to see if the\n  // callbacks from recomputing one query stopped the second query, which\n  // crashed.\n  const c = Tracker.autorun(() => {\n    coll.findOne('A');\n    coll.findOne('A');\n  });\n\n  coll.update('A', {$set: {x: 42}});\n\n  c.stop();\n});\n\n\nTinytest.add('minimongo - count on cursor with limit', test => {\n  const coll = new LocalCollection();\n  let count;\n\n  coll.insert({_id: 'A'});\n  coll.insert({_id: 'B'});\n  coll.insert({_id: 'C'});\n  coll.insert({_id: 'D'});\n\n  const c = Tracker.autorun(c => {\n    const cursor = coll.find({_id: {$exists: true}}, {sort: {_id: 1}, limit: 3});\n    count = cursor.count();\n  });\n\n  test.equal(count, 3);\n\n  coll.remove('A'); // still 3 in the collection\n  Tracker.flush();\n  test.equal(count, 3);\n\n  coll.remove('B'); // expect count now 2\n  Tracker.flush();\n  test.equal(count, 2);\n\n\n  coll.insert({_id: 'A'}); // now 3 again\n  Tracker.flush();\n  test.equal(count, 3);\n\n  coll.insert({_id: 'B'}); // now 4 entries, but count should be 3 still\n  Tracker.flush();\n  test.equal(count, 3);\n\n  c.stop();\n});\n\nTinytest.add('minimongo - reactive count with cached cursor', test => {\n  const coll = new LocalCollection;\n  const cursor = coll.find({});\n  let firstAutorunCount, secondAutorunCount;\n  Tracker.autorun(() => {\n    firstAutorunCount = cursor.count();\n  });\n  Tracker.autorun(() => {\n    secondAutorunCount = coll.find({}).count();\n  });\n  test.equal(firstAutorunCount, 0);\n  test.equal(secondAutorunCount, 0);\n  coll.insert({i: 1});\n  coll.insert({i: 2});\n  coll.insert({i: 3});\n  Tracker.flush();\n  test.equal(firstAutorunCount, 3);\n  test.equal(secondAutorunCount, 3);\n});\n\nTinytest.add('minimongo - $near operator tests', test => {\n  let coll = new LocalCollection();\n  coll.insert({ rest: { loc: [2, 3] } });\n  coll.insert({ rest: { loc: [-3, 3] } });\n  coll.insert({ rest: { loc: [5, 5] } });\n\n  test.equal(coll.find({ 'rest.loc': { $near: [0, 0], $maxDistance: 30 } }).count(), 3);\n  test.equal(coll.find({ 'rest.loc': { $near: [0, 0], $maxDistance: 4 } }).count(), 1);\n  const points = coll.find({ 'rest.loc': { $near: [0, 0], $maxDistance: 6 } }).fetch();\n  points.forEach((point, i, points) => {\n    test.isTrue(!i || distance([0, 0], point.rest.loc) >= distance([0, 0], points[i - 1].rest.loc));\n  });\n\n  function distance(a, b) {\n    const x = a[0] - b[0];\n    const y = a[1] - b[1];\n    return Math.sqrt(x * x + y * y);\n  }\n\n  // GeoJSON tests\n  coll = new LocalCollection();\n  const data = [{ category: 'BURGLARY', descript: 'BURGLARY OF STORE, FORCIBLE ENTRY', address: '100 Block of 10TH ST', location: { type: 'Point', coordinates: [  -122.415449723856,  37.7749518087273 ] } },\n    { category: 'WEAPON LAWS', descript: 'POSS OF PROHIBITED WEAPON', address: '900 Block of MINNA ST', location: { type: 'Point', coordinates: [  -122.415386041221,  37.7747879744156 ] } },\n    { category: 'LARCENY/THEFT', descript: 'GRAND THEFT OF PROPERTY', address: '900 Block of MINNA ST', location: { type: 'Point', coordinates: [  -122.41538270191,  37.774683628213 ] } },\n    { category: 'LARCENY/THEFT', descript: 'PETTY THEFT FROM LOCKED AUTO', address: '900 Block of MINNA ST', location: { type: 'Point', coordinates: [  -122.415396041221,  37.7747879744156 ] } },\n    { category: 'OTHER OFFENSES', descript: 'POSSESSION OF BURGLARY TOOLS', address: '900 Block of MINNA ST', location: { type: 'Point', coordinates: [  -122.415386041221,  37.7747879734156 ] } },\n  ];\n\n  data.forEach((x, i) => { coll.insert(Object.assign(x, { x: i })); });\n\n  const close15 = coll.find({ location: { $near: {\n    $geometry: { type: 'Point',\n      coordinates: [-122.4154282, 37.7746115] },\n    $maxDistance: 15 } } }).fetch();\n  test.length(close15, 1);\n  test.equal(close15[0].descript, 'GRAND THEFT OF PROPERTY');\n\n  const close20 = coll.find({ location: { $near: {\n    $geometry: { type: 'Point',\n      coordinates: [-122.4154282, 37.7746115] },\n    $maxDistance: 20 } } }).fetch();\n  test.length(close20, 4);\n  test.equal(close20[0].descript, 'GRAND THEFT OF PROPERTY');\n  test.equal(close20[1].descript, 'PETTY THEFT FROM LOCKED AUTO');\n  test.equal(close20[2].descript, 'POSSESSION OF BURGLARY TOOLS');\n  test.equal(close20[3].descript, 'POSS OF PROHIBITED WEAPON');\n\n  // Any combinations of $near with $or/$and/$nor/$not should throw an error\n  test.throws(() => {\n    coll.find({ location: {\n      $not: {\n        $near: {\n          $geometry: {\n            type: 'Point',\n            coordinates: [-122.4154282, 37.7746115],\n          }, $maxDistance: 20 } } } });\n  });\n  test.throws(() => {\n    coll.find({\n      $and: [ { location: { $near: { $geometry: { type: 'Point', coordinates: [-122.4154282, 37.7746115] }, $maxDistance: 20 }}},\n        { x: 0 }],\n    });\n  });\n  test.throws(() => {\n    coll.find({\n      $or: [ { location: { $near: { $geometry: { type: 'Point', coordinates: [-122.4154282, 37.7746115] }, $maxDistance: 20 }}},\n        { x: 0 }],\n    });\n  });\n  test.throws(() => {\n    coll.find({\n      $nor: [ { location: { $near: { $geometry: { type: 'Point', coordinates: [-122.4154282, 37.7746115] }, $maxDistance: 1 }}},\n        { x: 0 }],\n    });\n  });\n  test.throws(() => {\n    coll.find({\n      $and: [{\n        $and: [{\n          location: {\n            $near: {\n              $geometry: {\n                type: 'Point',\n                coordinates: [-122.4154282, 37.7746115],\n              },\n              $maxDistance: 1,\n            },\n          },\n        }],\n      }],\n    });\n  });\n\n  // array tests\n  coll = new LocalCollection();\n  coll.insert({\n    _id: 'x',\n    k: 9,\n    a: [\n      {b: [\n        [100, 100],\n        [1,  1]]},\n      {b: [150,  150]}]});\n  coll.insert({\n    _id: 'y',\n    k: 9,\n    a: {b: [5, 5]}});\n  const testNear = (near, md, expected) => {\n    test.equal(\n      coll.find({'a.b': {$near: near, $maxDistance: md}}).fetch().map(doc => doc._id),\n      expected);\n  };\n  testNear([149, 149], 4, ['x']);\n  testNear([149, 149], 1000, ['x', 'y']);\n  // It's important that we figure out that 'x' is closer than 'y' to [2,2] even\n  // though the first within-1000 point in 'x' (ie, [100,100]) is farther than\n  // 'y'.\n  testNear([2, 2], 1000, ['x', 'y']);\n\n  // issue #3599\n  // Ensure that distance is not used as a tie-breaker for sort.\n  test.equal(\n    coll.find({'a.b': {$near: [1, 1]}}, {sort: {k: 1}}).fetch().map(doc => doc._id),\n    ['x', 'y']);\n  test.equal(\n    coll.find({'a.b': {$near: [5, 5]}}, {sort: {k: 1}}).fetch().map(doc => doc._id),\n    ['x', 'y']);\n\n  const operations = [];\n  const cbs = log_callbacks(operations);\n  const handle = coll.find({'a.b': {$near: [7, 7]}}).observe(cbs);\n\n  test.length(operations, 2);\n  test.equal(operations.shift(), ['added', {k: 9, a: {b: [5, 5]}}, 0, null]);\n  test.equal(operations.shift(),\n    ['added', {k: 9, a: [{b: [[100, 100], [1, 1]]}, {b: [150, 150]}]},\n      1, null]);\n  // This needs to be inserted in the MIDDLE of the two existing ones.\n  coll.insert({a: {b: [3, 3]}});\n  test.length(operations, 1);\n  test.equal(operations.shift(), ['added', {a: {b: [3, 3]}}, 1, 'x']);\n\n  handle.stop();\n});\n\n// issue #2077\nTinytest.add('minimongo - $near and $geometry for legacy coordinates', test => {\n  const coll = new LocalCollection();\n\n  coll.insert({\n    loc: {\n      x: 1,\n      y: 1,\n    },\n  });\n  coll.insert({\n    loc: [-1, -1],\n  });\n  coll.insert({\n    loc: [40, -10],\n  });\n  coll.insert({\n    loc: {\n      x: -10,\n      y: 40,\n    },\n  });\n\n  test.equal(coll.find({ loc: { $near: [0, 0], $maxDistance: 4 } }).count(), 2);\n  test.equal(coll.find({ loc: { $near: {$geometry: {type: 'Point', coordinates: [0, 0]}}} }).count(), 4);\n  test.equal(coll.find({ loc: { $near: {$geometry: {type: 'Point', coordinates: [0, 0]}, $maxDistance: 200000}}}).count(), 2);\n});\n\n// Regression test for #4377. Previously, \"replace\" updates didn't clone the\n// argument.\nTinytest.add('minimongo - update should clone', test => {\n  const x = [];\n  const coll = new LocalCollection;\n  const id = coll.insert({});\n  coll.update(id, {x});\n  x.push(1);\n  test.equal(coll.findOne(id), {_id: id, x: []});\n});\n\n// See #2275.\nTinytest.add('minimongo - fetch in observe', test => {\n  const coll = new LocalCollection;\n  let callbackInvoked = false;\n  const observe = coll.find().observeChanges({\n    added(id, fields) {\n      callbackInvoked = true;\n      test.equal(fields, {foo: 1});\n      const doc = coll.findOne({foo: 1});\n      test.isTrue(doc);\n      test.equal(doc.foo, 1);\n    },\n  });\n  test.isFalse(callbackInvoked);\n  const computation = Tracker.autorun(computation => {\n    if (computation.firstRun) {\n      coll.insert({foo: 1});\n    }\n  });\n  test.isTrue(callbackInvoked);\n  observe.stop();\n  computation.stop();\n});\n\n// See #2254\nTinytest.add('minimongo - fine-grained reactivity of observe with fields projection', test => {\n  const X = new LocalCollection;\n  const id = 'asdf';\n  X.insert({_id: id, foo: {bar: 123}});\n\n  let callbackInvoked = false;\n  const obs = X.find(id, {fields: {'foo.bar': 1}}).observeChanges({\n    changed(id, fields) {\n      callbackInvoked = true;\n    },\n  });\n\n  test.isFalse(callbackInvoked);\n  X.update(id, {$set: {'foo.baz': 456}});\n  test.isFalse(callbackInvoked);\n\n  obs.stop();\n});\nTinytest.add('minimongo - fine-grained reactivity of query with fields projection', test => {\n  const X = new LocalCollection;\n  const id = 'asdf';\n  X.insert({_id: id, foo: {bar: 123}});\n\n  let callbackInvoked = false;\n  const computation = Tracker.autorun(() => {\n    callbackInvoked = true;\n    return X.findOne(id, { fields: { 'foo.bar': 1 } });\n  });\n  test.isTrue(callbackInvoked);\n  callbackInvoked = false;\n  X.update(id, {$set: {'foo.baz': 456}});\n  test.isFalse(callbackInvoked);\n  X.update(id, {$set: {'foo.bar': 124}});\n  Tracker.flush();\n  test.isTrue(callbackInvoked);\n\n  computation.stop();\n});\n\n// Tests that the logic in `LocalCollection.prototype.update`\n// correctly deals with count() on a cursor with skip or limit (since\n// then the result set is an IdMap, not an array)\nTinytest.add('minimongo - reactive skip/limit count while updating', test => {\n  const X = new LocalCollection;\n  let count = -1;\n\n  const c = Tracker.autorun(() => {\n    count = X.find({}, {skip: 1, limit: 1}).count();\n  });\n\n  test.equal(count, 0);\n\n  X.insert({});\n  Tracker.flush({_throwFirstError: true});\n  test.equal(count, 0);\n\n  X.insert({});\n  Tracker.flush({_throwFirstError: true});\n  test.equal(count, 1);\n\n  X.update({}, {$set: {foo: 1}});\n  Tracker.flush({_throwFirstError: true});\n  test.equal(count, 1);\n\n  // Make sure a second update also works\n  X.update({}, {$set: {foo: 2}});\n  Tracker.flush({_throwFirstError: true});\n  test.equal(count, 1);\n\n  c.stop();\n});\n\n// Makes sure inserts cannot be performed using field names that have\n// Mongo restricted characters in them ('.', '$', '\\0'):\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nTinytest.add('minimongo - cannot insert using invalid field names', test => {\n  const collection = new LocalCollection();\n\n  // Quick test to make sure non-dot field inserts are working\n  collection.insert({ a: 'b' });\n\n  // Quick test to make sure field values with dots are allowed\n  collection.insert({ a: 'b.c' });\n\n  // Verify top level dot-field inserts are prohibited\n  ['a.b', '.b', 'a.', 'a.b.c'].forEach((field) => {\n    test.throws(() => {\n      collection.insert({ [field]: 'c' });\n    }, `Key ${field} must not contain '.'`);\n  });\n\n  // Verify nested dot-field inserts are prohibited\n  test.throws(() => {\n    collection.insert({ a: { b: { 'c.d': 'e' } } });\n  }, \"Key c.d must not contain '.'\");\n\n  // Verify field names starting with $ are prohibited\n  test.throws(() => {\n    collection.insert({ $a: 'b' });\n  }, \"Key $a must not start with '$'\");\n\n  // Verify nested field names starting with $ are prohibited\n  test.throws(() => {\n    collection.insert({ a: { b: { $c: 'd' } } });\n  }, \"Key $c must not start with '$'\");\n\n  // Verify top level fields with null characters are prohibited\n  ['\\0a', 'a\\0', 'a\\0b', '\\u0000a', 'a\\u0000', 'a\\u0000b'].forEach((field) => {\n    test.throws(() => {\n      collection.insert({ [field]: 'c' });\n    }, `Key ${field} must not contain null bytes`);\n  });\n\n  // Verify nested field names with null characters are prohibited\n  test.throws(() => {\n    collection.insert({ a: { b: { '\\0c': 'd' } } });\n  }, 'Key \\0c must not contain null bytes');\n});\n\n// Makes sure $set's cannot be performed using null bytes\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nTinytest.add('minimongo - cannot $set with null bytes', test => {\n  const collection = new LocalCollection();\n\n  // Quick test to make sure non-null byte $set's are working\n  const id = collection.insert({ a: 'b', c: 'd' });\n  collection.update({ _id: id }, { $set: { e: 'f' } });\n\n  // Verify $set's with null bytes throw an exception\n  test.throws(() => {\n    collection.update({ _id: id }, { $set: { '\\0a': 'b' } });\n  }, 'Key \\0a must not contain null bytes');\n});\n\n// Makes sure $rename's cannot be performed using null bytes\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nTinytest.add('minimongo - cannot $rename with null bytes', test => {\n  const collection = new LocalCollection();\n\n  // Quick test to make sure non-null byte $rename's are working\n  let id = collection.insert({ a: 'b', c: 'd' });\n  collection.update({ _id: id }, { $rename: { a: 'a1', c: 'c1' } });\n\n  // Verify $rename's with null bytes throw an exception\n  collection.remove({});\n  id = collection.insert({ a: 'b', c: 'd' });\n  test.throws(() => {\n    collection.update({ _id: id }, { $rename: { a: '\\0a', c: 'c\\0' } });\n  }, \"The 'to' field for $rename cannot contain an embedded null byte\");\n});\n"]},"hash":"b1a8c8b7a3753f93f64ad2566e2c6e1d8a27e320"}
