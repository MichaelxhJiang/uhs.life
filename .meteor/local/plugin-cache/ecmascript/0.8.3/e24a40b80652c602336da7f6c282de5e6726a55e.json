{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/webapp/webapp_tests.js","filenameRelative":"packages/webapp/webapp_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/webapp/webapp_tests.js.map","sourceFileName":"packages/webapp/webapp_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"webapp_tests"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar url = Npm.require(\"url\");\n\nvar crypto = Npm.require(\"crypto\");\n\nvar http = Npm.require(\"http\");\n\nvar additionalScript = \"(function () { var foo = 1; })\";\nWebAppInternals.addStaticJs(additionalScript);\nvar hash = crypto.createHash('sha1');\nhash.update(additionalScript);\nvar additionalScriptPathname = hash.digest('hex') + \".js\"; // Mock the 'res' object that gets passed to connect handlers. This mock\n// just records any utf8 data written to the response and returns it\n// when you call `mockResponse.getBody()`.\n\nvar MockResponse = function () {\n  this.buffer = \"\";\n  this.statusCode = null;\n};\n\nMockResponse.prototype.writeHead = function (statusCode) {\n  this.statusCode = statusCode;\n};\n\nMockResponse.prototype.setHeader = function (name, value) {// nothing\n};\n\nMockResponse.prototype.write = function (data, encoding) {\n  if (!encoding || encoding === \"utf8\") {\n    this.buffer = this.buffer + data;\n  }\n};\n\nMockResponse.prototype.end = function (data, encoding) {\n  if (!encoding || encoding === \"utf8\") {\n    if (data) {\n      this.buffer = this.buffer + data;\n    }\n  }\n};\n\nMockResponse.prototype.getBody = function () {\n  return this.buffer;\n};\n\nTinytest.add(\"webapp - content-type header\", function (test) {\n  var cssResource = _.find(_.keys(WebAppInternals.staticFiles), function (url) {\n    return WebAppInternals.staticFiles[url].type === \"css\";\n  });\n\n  var jsResource = _.find(_.keys(WebAppInternals.staticFiles), function (url) {\n    return WebAppInternals.staticFiles[url].type === \"js\";\n  });\n\n  var resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), cssResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(), \"text/css; charset=utf-8\");\n  resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), jsResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(), \"application/javascript; charset=utf-8\");\n});\nTinytest.add(\"webapp - additional static javascript\", function (test) {\n  var origInlineScriptsAllowed = WebAppInternals.inlineScriptsAllowed();\n  var staticFilesOpts = {\n    staticFiles: {},\n    clientDir: \"/\"\n  }; // It's okay to set this global state because we're not going to yield\n  // before settng it back to what it was originally.\n\n  WebAppInternals.setInlineScriptsAllowed(true);\n\n  (function () {\n    var boilerplate = WebAppInternals.getBoilerplate({\n      browser: \"doesn't-matter\",\n      url: \"also-doesnt-matter\"\n    }, \"web.browser\"); // When inline scripts are allowed, the script should be inlined.\n\n    test.isTrue(boilerplate.indexOf(additionalScript) !== -1); // And the script should not be served as its own separate resource,\n    // meaning that the static file handler should pass on this request.\n\n    var res = new MockResponse();\n    var req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    var nextCalled = false;\n    WebAppInternals.staticFilesMiddleware(staticFilesOpts, req, res, function () {\n      nextCalled = true;\n    });\n    test.isTrue(nextCalled);\n  })(); // When inline scripts are disallowed, the script body should not be\n  // inlined, and the script should be included in a <script src=\"..\">\n  // tag.\n\n\n  WebAppInternals.setInlineScriptsAllowed(false);\n\n  (function () {\n    var boilerplate = WebAppInternals.getBoilerplate({\n      browser: \"doesn't-matter\",\n      url: \"also-doesnt-matter\"\n    }, \"web.browser\"); // The script contents itself should not be present; the pathname\n    // where the script is served should be.\n\n    test.isTrue(boilerplate.indexOf(additionalScript) === -1);\n    test.isTrue(boilerplate.indexOf(additionalScriptPathname) !== -1); // And the static file handler should serve the script at that pathname.\n\n    var res = new MockResponse();\n    var req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    WebAppInternals.staticFilesMiddleware(staticFilesOpts, req, res, function () {});\n    var resBody = res.getBody();\n    test.isTrue(resBody.indexOf(additionalScript) !== -1);\n    test.equal(res.statusCode, 200);\n  })();\n\n  WebAppInternals.setInlineScriptsAllowed(origInlineScriptsAllowed);\n}); // Regression test: `generateBoilerplateInstance` should not change\n// `__meteor_runtime_config__`.\n\nTinytest.add(\"webapp - generating boilerplate should not change runtime config\", function (test) {\n  // Set a dummy key in the runtime config served in the\n  // boilerplate. Test that the dummy key appears in the boilerplate,\n  // but not in __meteor_runtime_config__ after generating the\n  // boilerplate.\n  test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n  var boilerplate = WebAppInternals.generateBoilerplateInstance(\"web.browser\", {}, // empty manifest\n  {\n    runtimeConfigOverrides: {\n      WEBAPP_TEST_KEY: true\n    }\n  });\n  var boilerplateHtml = boilerplate.toHTML();\n  test.isFalse(boilerplateHtml.indexOf(\"WEBAPP_TEST_KEY\") === -1);\n  test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n});\nTinytest.add(\"webapp - WebAppInternals.registerBoilerplateDataCallback\", function (test) {\n  var key = \"from webapp_tests.js\";\n  var callCount = 0;\n\n  function callback(request, data, arch) {\n    test.equal(arch, \"web.browser\");\n    test.equal(request.url, \"http://example.com\");\n    test.equal(data.dynamicHead, \"so dynamic\");\n    test.equal(data.body, \"\");\n    data.body = \"<div>oyez</div>\";\n    ++callCount;\n  }\n\n  WebAppInternals.registerBoilerplateDataCallback(key, callback);\n  test.equal(callCount, 0);\n  var req = new http.IncomingMessage();\n  req.url = \"http://example.com\";\n  req.browser = {\n    name: \"headless\"\n  };\n  req.dynamicHead = \"so dynamic\";\n  var html = WebAppInternals.getBoilerplate(req, \"web.browser\");\n  test.equal(callCount, 1);\n  test.isTrue(html.indexOf([\"<body>\", \"<div>oyez</div>\"].join(\"\\n\")) >= 0);\n  test.equal( // Make sure this callback doesn't get called again after this test.\n  WebAppInternals.registerBoilerplateDataCallback(key, null), callback);\n}); // Support 'named pipes' (strings) as ports for support of Windows Server /\n// Azure deployments\n\nTinytest.add(\"webapp - port should be parsed as int unless it is a named pipe\", function (test) {\n  // Named pipes on Windows Server follow the format:\n  // \\\\.\\pipe\\{randomstring} or \\\\{servername}\\pipe\\{randomstring}\n  var namedPipe = \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\";\n  var namedPipeServer = \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\";\n  test.equal(WebAppInternals.parsePort(namedPipe), \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\");\n  test.equal(WebAppInternals.parsePort(namedPipeServer), \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\");\n  test.equal(WebAppInternals.parsePort(8080), 8080);\n  test.equal(WebAppInternals.parsePort(\"8080\"), 8080); // Ensure strangely formatted ports still work for backwards compatibility\n\n  test.equal(WebAppInternals.parsePort(\"8080abc\"), 8080);\n});\n__meteor_runtime_config__.WEBAPP_TEST_A = '<p>foo</p>';\n__meteor_runtime_config__.WEBAPP_TEST_B = '</script>';\nTinytest.add(\"webapp - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(WebAppInternals.NpmModules.connect.version, /^2\\.(\\d+)\\.(\\d+)/);\n  test.equal((0, _typeof3.default)(WebAppInternals.NpmModules.connect.module), 'function');\n  test.equal((0, _typeof3.default)(WebAppInternals.NpmModules.connect.module.basicAuth), 'function');\n});","map":{"version":3,"sources":["packages/webapp/webapp_tests.js"],"names":["url","Npm","require","crypto","http","additionalScript","WebAppInternals","addStaticJs","hash","createHash","update","additionalScriptPathname","digest","MockResponse","buffer","statusCode","prototype","writeHead","setHeader","name","value","write","data","encoding","end","getBody","Tinytest","add","test","cssResource","_","find","keys","staticFiles","type","jsResource","resp","HTTP","get","resolve","Meteor","absoluteUrl","equal","headers","toLowerCase","origInlineScriptsAllowed","inlineScriptsAllowed","staticFilesOpts","clientDir","setInlineScriptsAllowed","boilerplate","getBoilerplate","browser","isTrue","indexOf","res","req","IncomingMessage","method","nextCalled","staticFilesMiddleware","resBody","isFalse","__meteor_runtime_config__","WEBAPP_TEST_KEY","generateBoilerplateInstance","runtimeConfigOverrides","boilerplateHtml","toHTML","key","callCount","callback","request","arch","dynamicHead","body","registerBoilerplateDataCallback","html","join","namedPipe","namedPipeServer","parsePort","WEBAPP_TEST_A","WEBAPP_TEST_B","matches","NpmModules","connect","version","module","basicAuth"],"mappings":";;;;;;AAAA,IAAIA,MAAMC,IAAIC,OAAJ,CAAY,KAAZ,CAAV;;AACA,IAAIC,SAASF,IAAIC,OAAJ,CAAY,QAAZ,CAAb;;AACA,IAAIE,OAAOH,IAAIC,OAAJ,CAAY,MAAZ,CAAX;;AAEA,IAAIG,mBAAmB,gCAAvB;AACAC,gBAAgBC,WAAhB,CAA4BF,gBAA5B;AACA,IAAIG,OAAOL,OAAOM,UAAP,CAAkB,MAAlB,CAAX;AACAD,KAAKE,MAAL,CAAYL,gBAAZ;AACA,IAAIM,2BAA2BH,KAAKI,MAAL,CAAY,KAAZ,IAAqB,KAApD,C,CAEA;AACA;AACA;;AACA,IAAIC,eAAe,YAAY;AAC7B,OAAKC,MAAL,GAAc,EAAd;AACA,OAAKC,UAAL,GAAkB,IAAlB;AACD,CAHD;;AAKAF,aAAaG,SAAb,CAAuBC,SAAvB,GAAmC,UAAUF,UAAV,EAAsB;AACvD,OAAKA,UAAL,GAAkBA,UAAlB;AACD,CAFD;;AAIAF,aAAaG,SAAb,CAAuBE,SAAvB,GAAmC,UAAUC,IAAV,EAAgBC,KAAhB,EAAuB,CACxD;AACD,CAFD;;AAIAP,aAAaG,SAAb,CAAuBK,KAAvB,GAA+B,UAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AACvD,MAAI,CAAEA,QAAF,IAAcA,aAAa,MAA/B,EAAuC;AACrC,SAAKT,MAAL,GAAc,KAAKA,MAAL,GAAcQ,IAA5B;AACD;AACF,CAJD;;AAMAT,aAAaG,SAAb,CAAuBQ,GAAvB,GAA6B,UAAUF,IAAV,EAAgBC,QAAhB,EAA0B;AACrD,MAAI,CAAEA,QAAF,IAAcA,aAAa,MAA/B,EAAuC;AACrC,QAAID,IAAJ,EAAU;AACR,WAAKR,MAAL,GAAc,KAAKA,MAAL,GAAcQ,IAA5B;AACD;AACF;AACF,CAND;;AAQAT,aAAaG,SAAb,CAAuBS,OAAvB,GAAiC,YAAY;AAC3C,SAAO,KAAKX,MAAZ;AACD,CAFD;;AAMAY,SAASC,GAAT,CAAa,8BAAb,EAA6C,UAAUC,IAAV,EAAgB;AAC3D,MAAIC,cAAcC,EAAEC,IAAF,CAChBD,EAAEE,IAAF,CAAO1B,gBAAgB2B,WAAvB,CADgB,EAEhB,UAAUjC,GAAV,EAAe;AACb,WAAOM,gBAAgB2B,WAAhB,CAA4BjC,GAA5B,EAAiCkC,IAAjC,KAA0C,KAAjD;AACD,GAJe,CAAlB;;AAMA,MAAIC,aAAaL,EAAEC,IAAF,CACfD,EAAEE,IAAF,CAAO1B,gBAAgB2B,WAAvB,CADe,EAEf,UAAUjC,GAAV,EAAe;AACb,WAAOM,gBAAgB2B,WAAhB,CAA4BjC,GAA5B,EAAiCkC,IAAjC,KAA0C,IAAjD;AACD,GAJc,CAAjB;;AAOA,MAAIE,OAAOC,KAAKC,GAAL,CAAStC,IAAIuC,OAAJ,CAAYC,OAAOC,WAAP,EAAZ,EAAkCZ,WAAlC,CAAT,CAAX;AACAD,OAAKc,KAAL,CAAWN,KAAKO,OAAL,CAAa,cAAb,EAA6BC,WAA7B,EAAX,EACW,yBADX;AAEAR,SAAOC,KAAKC,GAAL,CAAStC,IAAIuC,OAAJ,CAAYC,OAAOC,WAAP,EAAZ,EAAkCN,UAAlC,CAAT,CAAP;AACAP,OAAKc,KAAL,CAAWN,KAAKO,OAAL,CAAa,cAAb,EAA6BC,WAA7B,EAAX,EACW,uCADX;AAED,CApBD;AAsBAlB,SAASC,GAAT,CAAa,uCAAb,EAAsD,UAAUC,IAAV,EAAgB;AACpE,MAAIiB,2BAA2BvC,gBAAgBwC,oBAAhB,EAA/B;AAEA,MAAIC,kBAAkB;AACpBd,iBAAa,EADO;AAEpBe,eAAW;AAFS,GAAtB,CAHoE,CAQpE;AACA;;AACA1C,kBAAgB2C,uBAAhB,CAAwC,IAAxC;;AAEA,GAAC,YAAY;AACX,QAAIC,cAAc5C,gBAAgB6C,cAAhB,CAA+B;AAC/CC,eAAS,gBADsC;AAE/CpD,WAAK;AAF0C,KAA/B,EAGf,aAHe,CAAlB,CADW,CAMX;;AACA4B,SAAKyB,MAAL,CAAYH,YAAYI,OAAZ,CAAoBjD,gBAApB,MAA0C,CAAC,CAAvD,EAPW,CASX;AACA;;AACA,QAAIkD,MAAM,IAAI1C,YAAJ,EAAV;AACA,QAAI2C,MAAM,IAAIpD,KAAKqD,eAAT,EAAV;AACAD,QAAIb,OAAJ,GAAc,EAAd;AACAa,QAAIE,MAAJ,GAAa,KAAb;AACAF,QAAIxD,GAAJ,GAAU,MAAMW,wBAAhB;AACA,QAAIgD,aAAa,KAAjB;AACArD,oBAAgBsD,qBAAhB,CACEb,eADF,EACmBS,GADnB,EACwBD,GADxB,EAC6B,YAAY;AACrCI,mBAAa,IAAb;AACD,KAHH;AAIA/B,SAAKyB,MAAL,CAAYM,UAAZ;AACD,GAtBD,IAZoE,CAoCpE;AACA;AACA;;;AACArD,kBAAgB2C,uBAAhB,CAAwC,KAAxC;;AAEA,GAAC,YAAY;AACX,QAAIC,cAAc5C,gBAAgB6C,cAAhB,CAA+B;AAC/CC,eAAS,gBADsC;AAE/CpD,WAAK;AAF0C,KAA/B,EAGf,aAHe,CAAlB,CADW,CAMX;AACA;;AACA4B,SAAKyB,MAAL,CAAYH,YAAYI,OAAZ,CAAoBjD,gBAApB,MAA0C,CAAC,CAAvD;AACAuB,SAAKyB,MAAL,CAAYH,YAAYI,OAAZ,CAAoB3C,wBAApB,MAAkD,CAAC,CAA/D,EATW,CAWX;;AACA,QAAI4C,MAAM,IAAI1C,YAAJ,EAAV;AACA,QAAI2C,MAAM,IAAIpD,KAAKqD,eAAT,EAAV;AACAD,QAAIb,OAAJ,GAAc,EAAd;AACAa,QAAIE,MAAJ,GAAa,KAAb;AACAF,QAAIxD,GAAJ,GAAU,MAAMW,wBAAhB;AACAL,oBAAgBsD,qBAAhB,CAAsCb,eAAtC,EAAuDS,GAAvD,EAA4DD,GAA5D,EACiC,YAAY,CAAG,CADhD;AAEA,QAAIM,UAAUN,IAAI9B,OAAJ,EAAd;AACAG,SAAKyB,MAAL,CAAYQ,QAAQP,OAAR,CAAgBjD,gBAAhB,MAAsC,CAAC,CAAnD;AACAuB,SAAKc,KAAL,CAAWa,IAAIxC,UAAf,EAA2B,GAA3B;AACD,GAtBD;;AAwBAT,kBAAgB2C,uBAAhB,CAAwCJ,wBAAxC;AACD,CAlED,E,CAoEA;AACA;;AACAnB,SAASC,GAAT,CAAa,kEAAb,EAAiF,UAAUC,IAAV,EAAgB;AAC/F;AACA;AACA;AACA;AAEAA,OAAKkC,OAAL,CAAaC,0BAA0BC,eAAvC;AAEA,MAAId,cAAc5C,gBAAgB2D,2BAAhB,CAChB,aADgB,EAEhB,EAFgB,EAEZ;AACJ;AAAEC,4BAAwB;AAAEF,uBAAiB;AAAnB;AAA1B,GAHgB,CAAlB;AAMA,MAAIG,kBAAkBjB,YAAYkB,MAAZ,EAAtB;AACAxC,OAAKkC,OAAL,CAAaK,gBAAgBb,OAAhB,CAAwB,iBAAxB,MAA+C,CAAC,CAA7D;AAEA1B,OAAKkC,OAAL,CAAaC,0BAA0BC,eAAvC;AACD,CAlBD;AAoBAtC,SAASC,GAAT,CAAa,0DAAb,EAAyE,UAAUC,IAAV,EAAgB;AACvF,MAAMyC,MAAM,sBAAZ;AACA,MAAIC,YAAY,CAAhB;;AAEA,WAASC,QAAT,CAAkBC,OAAlB,EAA2BlD,IAA3B,EAAiCmD,IAAjC,EAAuC;AACrC7C,SAAKc,KAAL,CAAW+B,IAAX,EAAiB,aAAjB;AACA7C,SAAKc,KAAL,CAAW8B,QAAQxE,GAAnB,EAAwB,oBAAxB;AACA4B,SAAKc,KAAL,CAAWpB,KAAKoD,WAAhB,EAA6B,YAA7B;AACA9C,SAAKc,KAAL,CAAWpB,KAAKqD,IAAhB,EAAsB,EAAtB;AACArD,SAAKqD,IAAL,GAAY,iBAAZ;AACA,MAAEL,SAAF;AACD;;AAEDhE,kBAAgBsE,+BAAhB,CAAgDP,GAAhD,EAAqDE,QAArD;AAEA3C,OAAKc,KAAL,CAAW4B,SAAX,EAAsB,CAAtB;AAEA,MAAMd,MAAM,IAAIpD,KAAKqD,eAAT,EAAZ;AACAD,MAAIxD,GAAJ,GAAU,oBAAV;AACAwD,MAAIJ,OAAJ,GAAc;AAAEjC,UAAM;AAAR,GAAd;AACAqC,MAAIkB,WAAJ,GAAkB,YAAlB;AAEA,MAAMG,OAAOvE,gBAAgB6C,cAAhB,CAA+BK,GAA/B,EAAoC,aAApC,CAAb;AAEA5B,OAAKc,KAAL,CAAW4B,SAAX,EAAsB,CAAtB;AAEA1C,OAAKyB,MAAL,CAAYwB,KAAKvB,OAAL,CAAa,CACvB,QADuB,EAEvB,iBAFuB,EAGvBwB,IAHuB,CAGlB,IAHkB,CAAb,KAGK,CAHjB;AAKAlD,OAAKc,KAAL,EACE;AACApC,kBAAgBsE,+BAAhB,CAAgDP,GAAhD,EAAqD,IAArD,CAFF,EAGEE,QAHF;AAKD,CApCD,E,CAsCA;AACA;;AACA7C,SAASC,GAAT,CACE,iEADF,EAEE,UAAUC,IAAV,EAAgB;AACd;AACA;AACA,MAAImD,YAAY,mDAAhB;AACA,MAAIC,kBACF,iEADF;AAGApD,OAAKc,KAAL,CACEpC,gBAAgB2E,SAAhB,CAA0BF,SAA1B,CADF,EAEE,mDAFF;AAIAnD,OAAKc,KAAL,CACEpC,gBAAgB2E,SAAhB,CAA0BD,eAA1B,CADF,EAEE,iEAFF;AAIApD,OAAKc,KAAL,CACEpC,gBAAgB2E,SAAhB,CAA0B,IAA1B,CADF,EAEE,IAFF;AAIArD,OAAKc,KAAL,CACEpC,gBAAgB2E,SAAhB,CAA0B,MAA1B,CADF,EAEE,IAFF,EAnBc,CAuBd;;AACArD,OAAKc,KAAL,CACEpC,gBAAgB2E,SAAhB,CAA0B,SAA1B,CADF,EAEE,IAFF;AAID,CA9BH;AAiCAlB,0BAA0BmB,aAA1B,GAA0C,YAA1C;AACAnB,0BAA0BoB,aAA1B,GAA0C,WAA1C;AAGAzD,SAASC,GAAT,CAAa,sBAAb,EAAqC,UAAUC,IAAV,EAAgB;AACnD;AACAA,OAAKwD,OAAL,CAAa9E,gBAAgB+E,UAAhB,CAA2BC,OAA3B,CAAmCC,OAAhD,EAAyD,kBAAzD;AACA3D,OAAKc,KAAL,uBAAkBpC,gBAAgB+E,UAAhB,CAA2BC,OAA3B,CAAmCE,MAArD,GAA8D,UAA9D;AACA5D,OAAKc,KAAL,uBAAkBpC,gBAAgB+E,UAAhB,CAA2BC,OAA3B,CAAmCE,MAAnC,CAA0CC,SAA5D,GACW,UADX;AAED,CAND","file":"packages/webapp/webapp_tests.js.map","sourcesContent":["var url = Npm.require(\"url\");\nvar crypto = Npm.require(\"crypto\");\nvar http = Npm.require(\"http\");\n\nvar additionalScript = \"(function () { var foo = 1; })\";\nWebAppInternals.addStaticJs(additionalScript);\nvar hash = crypto.createHash('sha1');\nhash.update(additionalScript);\nvar additionalScriptPathname = hash.digest('hex') + \".js\";\n\n// Mock the 'res' object that gets passed to connect handlers. This mock\n// just records any utf8 data written to the response and returns it\n// when you call `mockResponse.getBody()`.\nvar MockResponse = function () {\n  this.buffer = \"\";\n  this.statusCode = null;\n};\n\nMockResponse.prototype.writeHead = function (statusCode) {\n  this.statusCode = statusCode;\n};\n\nMockResponse.prototype.setHeader = function (name, value) {\n  // nothing\n};\n\nMockResponse.prototype.write = function (data, encoding) {\n  if (! encoding || encoding === \"utf8\") {\n    this.buffer = this.buffer + data;\n  }\n};\n\nMockResponse.prototype.end = function (data, encoding) {\n  if (! encoding || encoding === \"utf8\") {\n    if (data) {\n      this.buffer = this.buffer + data;\n    }\n  }\n};\n\nMockResponse.prototype.getBody = function () {\n  return this.buffer;\n};\n\n\n\nTinytest.add(\"webapp - content-type header\", function (test) {\n  var cssResource = _.find(\n    _.keys(WebAppInternals.staticFiles),\n    function (url) {\n      return WebAppInternals.staticFiles[url].type === \"css\";\n    }\n  );\n  var jsResource = _.find(\n    _.keys(WebAppInternals.staticFiles),\n    function (url) {\n      return WebAppInternals.staticFiles[url].type === \"js\";\n    }\n  );\n\n  var resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), cssResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(),\n             \"text/css; charset=utf-8\");\n  resp = HTTP.get(url.resolve(Meteor.absoluteUrl(), jsResource));\n  test.equal(resp.headers[\"content-type\"].toLowerCase(),\n             \"application/javascript; charset=utf-8\");\n});\n\nTinytest.add(\"webapp - additional static javascript\", function (test) {\n  var origInlineScriptsAllowed = WebAppInternals.inlineScriptsAllowed();\n\n  var staticFilesOpts = {\n    staticFiles: {},\n    clientDir: \"/\"\n  };\n\n  // It's okay to set this global state because we're not going to yield\n  // before settng it back to what it was originally.\n  WebAppInternals.setInlineScriptsAllowed(true);\n\n  (function () {\n    var boilerplate = WebAppInternals.getBoilerplate({\n      browser: \"doesn't-matter\",\n      url: \"also-doesnt-matter\"\n    }, \"web.browser\");\n\n    // When inline scripts are allowed, the script should be inlined.\n    test.isTrue(boilerplate.indexOf(additionalScript) !== -1);\n\n    // And the script should not be served as its own separate resource,\n    // meaning that the static file handler should pass on this request.\n    var res = new MockResponse();\n    var req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    var nextCalled = false;\n    WebAppInternals.staticFilesMiddleware(\n      staticFilesOpts, req, res, function () {\n        nextCalled = true;\n      });\n    test.isTrue(nextCalled);\n  })();\n\n  // When inline scripts are disallowed, the script body should not be\n  // inlined, and the script should be included in a <script src=\"..\">\n  // tag.\n  WebAppInternals.setInlineScriptsAllowed(false);\n\n  (function () {\n    var boilerplate = WebAppInternals.getBoilerplate({\n      browser: \"doesn't-matter\",\n      url: \"also-doesnt-matter\"\n    }, \"web.browser\");\n\n    // The script contents itself should not be present; the pathname\n    // where the script is served should be.\n    test.isTrue(boilerplate.indexOf(additionalScript) === -1);\n    test.isTrue(boilerplate.indexOf(additionalScriptPathname) !== -1);\n\n    // And the static file handler should serve the script at that pathname.\n    var res = new MockResponse();\n    var req = new http.IncomingMessage();\n    req.headers = {};\n    req.method = \"GET\";\n    req.url = \"/\" + additionalScriptPathname;\n    WebAppInternals.staticFilesMiddleware(staticFilesOpts, req, res,\n                                     function () { });\n    var resBody = res.getBody();\n    test.isTrue(resBody.indexOf(additionalScript) !== -1);\n    test.equal(res.statusCode, 200);\n  })();\n\n  WebAppInternals.setInlineScriptsAllowed(origInlineScriptsAllowed);\n});\n\n// Regression test: `generateBoilerplateInstance` should not change\n// `__meteor_runtime_config__`.\nTinytest.add(\"webapp - generating boilerplate should not change runtime config\", function (test) {\n  // Set a dummy key in the runtime config served in the\n  // boilerplate. Test that the dummy key appears in the boilerplate,\n  // but not in __meteor_runtime_config__ after generating the\n  // boilerplate.\n\n  test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n\n  var boilerplate = WebAppInternals.generateBoilerplateInstance(\n    \"web.browser\",\n    {}, // empty manifest\n    { runtimeConfigOverrides: { WEBAPP_TEST_KEY: true } }\n  );\n\n  var boilerplateHtml = boilerplate.toHTML();\n  test.isFalse(boilerplateHtml.indexOf(\"WEBAPP_TEST_KEY\") === -1);\n\n  test.isFalse(__meteor_runtime_config__.WEBAPP_TEST_KEY);\n});\n\nTinytest.add(\"webapp - WebAppInternals.registerBoilerplateDataCallback\", function (test) {\n  const key = \"from webapp_tests.js\";\n  let callCount = 0;\n\n  function callback(request, data, arch) {\n    test.equal(arch, \"web.browser\");\n    test.equal(request.url, \"http://example.com\");\n    test.equal(data.dynamicHead, \"so dynamic\");\n    test.equal(data.body, \"\");\n    data.body = \"<div>oyez</div>\";\n    ++callCount;\n  }\n\n  WebAppInternals.registerBoilerplateDataCallback(key, callback);\n\n  test.equal(callCount, 0);\n\n  const req = new http.IncomingMessage();\n  req.url = \"http://example.com\";\n  req.browser = { name: \"headless\" };\n  req.dynamicHead = \"so dynamic\";\n\n  const html = WebAppInternals.getBoilerplate(req, \"web.browser\");\n\n  test.equal(callCount, 1);\n\n  test.isTrue(html.indexOf([\n    \"<body>\",\n    \"<div>oyez</div>\"\n  ].join(\"\\n\")) >= 0);\n\n  test.equal(\n    // Make sure this callback doesn't get called again after this test.\n    WebAppInternals.registerBoilerplateDataCallback(key, null),\n    callback\n  );\n});\n\n// Support 'named pipes' (strings) as ports for support of Windows Server /\n// Azure deployments\nTinytest.add(\n  \"webapp - port should be parsed as int unless it is a named pipe\",\n  function (test) {\n    // Named pipes on Windows Server follow the format:\n    // \\\\.\\pipe\\{randomstring} or \\\\{servername}\\pipe\\{randomstring}\n    var namedPipe = \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\";\n    var namedPipeServer =\n      \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\";\n\n    test.equal(\n      WebAppInternals.parsePort(namedPipe),\n      \"\\\\\\\\.\\\\pipe\\\\b27429e9-61e3-4c12-8bfe-950fa3295f74\"\n    );\n    test.equal(\n      WebAppInternals.parsePort(namedPipeServer),\n      \"\\\\\\\\SERVERNAME-1234\\\\pipe\\\\6e157e98-faef-49e4-a0cf-241037223308\"\n    );\n    test.equal(\n      WebAppInternals.parsePort(8080),\n      8080\n    );\n    test.equal(\n      WebAppInternals.parsePort(\"8080\"),\n      8080\n    );\n    // Ensure strangely formatted ports still work for backwards compatibility\n    test.equal(\n      WebAppInternals.parsePort(\"8080abc\"),\n      8080\n    );\n  }\n);\n\n__meteor_runtime_config__.WEBAPP_TEST_A = '<p>foo</p>';\n__meteor_runtime_config__.WEBAPP_TEST_B = '</script>';\n\n\nTinytest.add(\"webapp - npm modules\", function (test) {\n  // Make sure the version number looks like a version number.\n  test.matches(WebAppInternals.NpmModules.connect.version, /^2\\.(\\d+)\\.(\\d+)/);\n  test.equal(typeof(WebAppInternals.NpmModules.connect.module), 'function');\n  test.equal(typeof(WebAppInternals.NpmModules.connect.module.basicAuth),\n             'function');\n});\n"]},"hash":"e24a40b80652c602336da7f6c282de5e6726a55e"}
