{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/reactive-dict/migration.js","filenameRelative":"packages/reactive-dict/migration.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/reactive-dict/migration.js.map","sourceFileName":"packages/reactive-dict/migration.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"migration"},"ignored":false,"code":"ReactiveDict._migratedDictData = {}; // name -> data\n\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName)) return ReactiveDict._migratedDictData[dictName];\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts; // On migration, assemble the data from all the dicts that have been\n  // registered.\n\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in meteorBabelHelpers.sanitizeForInObject(dictsToMigrate)) {\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n    }\n\n    return [true, {\n      dicts: dataToMigrate\n    }];\n  });\n}","map":{"version":3,"sources":["packages/reactive-dict/migration.js"],"names":["ReactiveDict","_migratedDictData","_dictsToMigrate","_loadMigratedDict","dictName","_","has","_registerDictForMigrate","dict","Error","Meteor","isClient","Package","reload","migrationData","Reload","_migrationData","dicts","_onMigrate","dictsToMigrate","dataToMigrate","_getMigrationData"],"mappings":"AAAAA,aAAaC,iBAAb,GAAiC,EAAjC,C,CAAqC;;AACrCD,aAAaE,eAAb,GAA+B,EAA/B,C,CAAmC;;AAEnCF,aAAaG,iBAAb,GAAiC,UAAUC,QAAV,EAAoB;AACnD,MAAIC,EAAEC,GAAF,CAAMN,aAAaC,iBAAnB,EAAsCG,QAAtC,CAAJ,EACE,OAAOJ,aAAaC,iBAAb,CAA+BG,QAA/B,CAAP;AAEF,SAAO,IAAP;AACD,CALD;;AAOAJ,aAAaO,uBAAb,GAAuC,UAAUH,QAAV,EAAoBI,IAApB,EAA0B;AAC/D,MAAIH,EAAEC,GAAF,CAAMN,aAAaE,eAAnB,EAAoCE,QAApC,CAAJ,EACE,MAAM,IAAIK,KAAJ,CAAU,kCAAkCL,QAA5C,CAAN;AAEFJ,eAAaE,eAAb,CAA6BE,QAA7B,IAAyCI,IAAzC;AACD,CALD;;AAOA,IAAIE,OAAOC,QAAP,IAAmBC,QAAQC,MAA/B,EAAuC;AACrC;AACA;AACA,MAAIC,gBAAgBF,QAAQC,MAAR,CAAeE,MAAf,CAAsBC,cAAtB,CAAqC,eAArC,CAApB;;AACA,MAAIF,iBAAiBA,cAAcG,KAAnC,EACEjB,aAAaC,iBAAb,GAAiCa,cAAcG,KAA/C,CALmC,CAOrC;AACA;;AACAL,UAAQC,MAAR,CAAeE,MAAf,CAAsBG,UAAtB,CAAiC,eAAjC,EAAkD,YAAY;AAC5D,QAAIC,iBAAiBnB,aAAaE,eAAlC;AACA,QAAIkB,gBAAgB,EAApB;;AAEA,SAAK,IAAIhB,QAAT,2CAAqBe,cAArB;AACEC,oBAAchB,QAAd,IAA0Be,eAAef,QAAf,EAAyBiB,iBAAzB,EAA1B;AADF;;AAGA,WAAO,CAAC,IAAD,EAAO;AAACJ,aAAOG;AAAR,KAAP,CAAP;AACD,GARD;AASD","file":"packages/reactive-dict/migration.js.map","sourcesContent":["ReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName))\n    return ReactiveDict._migratedDictData[dictName];\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n"]},"hash":"4c273101fbebe25e0e4dfba416faa9bf13b95531"}
