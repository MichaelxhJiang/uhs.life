{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/startup/server/accounts.js","filenameRelative":"imports/startup/server/accounts.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/startup/server/accounts.js.map","sourceFileName":"imports/startup/server/accounts.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"accounts"},"ignored":false,"code":"var Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n    Meteor: function (v) {\n        Meteor = v;\n    }\n}, 0);\nvar Banned = new Mongo.Collection('blacklist');\nMeteor.users.allow({\n    update: function () {\n        return true;\n    },\n    remove: function () {\n        return true;\n    }\n});\n\nif (Meteor.isServer) {\n    Meteor.publish('allUsers', function () {\n        function usersPublication() {\n            return Meteor.users.find({});\n        }\n\n        return usersPublication;\n    }());\n    Meteor.publish('theUser', function () {\n        function theUserPublication() {\n            return Meteor.users.find({\n                _id: this.userId\n            });\n        }\n\n        return theUserPublication;\n    }());\n    Meteor.publish('allUsersLite', function () {\n        function usersLitePublication() {\n            return Meteor.users.find({}, {\n                'services.google.picture': 1,\n                'services.google.name': 1\n            });\n        }\n\n        return usersLitePublication;\n    }());\n}\n\nAccounts.validateNewUser(function (user) {\n    var email = user.services.google.email;\n\n    if (email.indexOf(\"gapps.yrdsb.ca\") !== -1) {\n        //check for teacher or student\n        return true;\n    } else {\n        console.log('not gapps yrdsb account');\n        throw new Meteor.Error(403, \"Currently uhs.life is only available to YRDSB GAPPS users, stay tuned for parental support!\");\n    }\n});\nAccounts.onCreateUser(function (options, user) {\n    if (!user.profile) {\n        user.profile = {\n            init: false,\n            teacher: false\n        };\n        user.private = {\n            courses: null,\n            token: null\n        };\n    }\n\n    var email = user.services.google.email;\n    var hasNumbers = email.match(/\\d+/g);\n\n    if (!hasNumbers) {\n        user.profile.teacher = true;\n    }\n\n    return user;\n});\nAccounts.validateLoginAttempt(function (info) {\n    var status = true;\n\n    try {\n        status = !Roles.userIsInRole(info.user._id, 'banned');\n    } catch (e) {\n        status = true;\n    }\n\n    console.log(status);\n\n    if (!status) {\n        throw new Meteor.Error(403, \"Sorry you have been banned from uhs.life by the administration for the following reason: \");\n    }\n\n    return true;\n});\nMeteor.methods({\n    'initUserProfile': function (id, info) {\n        Meteor.users.update({\n            _id: id\n        }, {\n            $set: {\n                \"profile.init\": true\n            }\n        });\n        Meteor.users.update({\n            _id: id\n        }, {\n            $set: {\n                \"profile.terms\": true\n            }\n        });\n    },\n    'addUserToRole': function (userId, roles) {\n        Roles.setUserRoles(userId, roles);\n    },\n    'accounts.setPersonalEmail': function (email) {\n        Meteor.users.update({\n            _id: this.userId\n        }, {\n            $set: {\n                \"profile.email\": email\n            }\n        });\n    },\n    'accounts.initRoles': function () {\n        var user = Meteor.users.findOne({\n            _id: this.userId\n        });\n        var email = user.services.google.email;\n        var hasNumbers = email.match(/\\d+/g);\n\n        if (hasNumbers) {\n            Roles.addUsersToRoles(this.userId, ['student']);\n        } else {\n            Roles.addUsersToRoles(this.userId, ['teacher']);\n        }\n    },\n    'accounts.ban': function (id, reason) {\n        if (!Roles.userIsInRole(this.userId, 'admin')) {\n            throw new Meteor.Error(403, \"You do not have the power to ban a user.\");\n        }\n\n        Meteor.users.update({\n            _id: id\n        }, {\n            $set: {\n                'private.bannedReason': reason\n            }\n        });\n        Roles.addUsersToRoles(id, 'banned');\n    }\n});","map":{"version":3,"sources":["imports/startup/server/accounts.js"],"names":["Meteor","module","watch","require","v","Banned","Mongo","Collection","users","allow","update","remove","isServer","publish","usersPublication","find","theUserPublication","_id","userId","usersLitePublication","Accounts","validateNewUser","user","email","services","google","indexOf","console","log","Error","onCreateUser","options","profile","init","teacher","private","courses","token","hasNumbers","match","validateLoginAttempt","info","status","Roles","userIsInRole","e","methods","id","$set","roles","setUserRoles","findOne","addUsersToRoles","reason"],"mappings":"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","file":"imports/startup/server/accounts.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\n\r\nconst Banned = new Mongo.Collection('blacklist');\r\n\r\nMeteor.users.allow({\r\n   update: function () {\r\n       return true;\r\n   },\r\n    remove: function () {\r\n        return true;\r\n    }\r\n});\r\n\r\nif(Meteor.isServer){\r\n    Meteor.publish('allUsers', function usersPublication() {\r\n        return Meteor.users.find({});\r\n    });\r\n    Meteor.publish('theUser', function theUserPublication() {\r\n        return Meteor.users.find({_id: this.userId})\r\n    });\r\n    Meteor.publish('allUsersLite', function usersLitePublication() {\r\n        return Meteor.users.find({},{\r\n            'services.google.picture': 1,\r\n            'services.google.name': 1\r\n        });\r\n    });\r\n}\r\n\r\nAccounts.validateNewUser(function (user) {\r\n    const email = user.services.google.email;\r\n    if (email.indexOf(\"gapps.yrdsb.ca\") !== -1) {\r\n        //check for teacher or student\r\n        return true;\r\n\r\n    } else {\r\n        console.log('not gapps yrdsb account');\r\n        throw new Meteor.Error(403, \"Currently uhs.life is only available to YRDSB GAPPS users, stay tuned for parental support!\");\r\n    }\r\n});\r\n\r\nAccounts.onCreateUser(function (options,user){\r\n    if (!user.profile) {\r\n        user.profile = {\r\n            init: false,\r\n            teacher: false\r\n        };\r\n        user.private = {\r\n            courses: null,\r\n            token: null\r\n        }\r\n    }\r\n    const email = user.services.google.email;\r\n    const hasNumbers = email.match(/\\d+/g);\r\n    if (!hasNumbers) {\r\n        user.profile.teacher = true;\r\n    }\r\n    return user;\r\n});\r\nAccounts.validateLoginAttempt(function (info) {\r\n    let status = true;\r\n    try{\r\n        status = !Roles.userIsInRole(info.user._id, 'banned')\r\n    }catch(e){\r\n        status = true;\r\n    }\r\n    console.log(status);\r\n    if(!status){\r\n        throw new Meteor.Error(403, \"Sorry you have been banned from uhs.life by the administration for the following reason: \")\r\n    }\r\n    return true;\r\n});\r\nMeteor.methods({\r\n    'initUserProfile': function (id,info) {\r\n        Meteor.users.update({_id: id}, {$set: {\"profile.init\": true}});\r\n        Meteor.users.update({_id: id}, {$set: {\"profile.terms\": true}});\r\n    },\r\n    'addUserToRole': function (userId, roles) {\r\n        Roles.setUserRoles(userId, roles);\r\n    },\r\n    'accounts.setPersonalEmail': function (email) {\r\n        Meteor.users.update({_id: this.userId}, {$set: {\"profile.email\": email}});\r\n    },\r\n    'accounts.initRoles': function () {\r\n        const user = Meteor.users.findOne({_id: this.userId});\r\n        const email = user.services.google.email;\r\n        const hasNumbers = email.match(/\\d+/g);\r\n        if (hasNumbers) {\r\n            Roles.addUsersToRoles(this.userId,['student']);\r\n        } else {\r\n            Roles.addUsersToRoles(this.userId,['teacher'])\r\n        }\r\n    },\r\n    'accounts.ban': function (id,reason) {\r\n        if(!Roles.userIsInRole(this.userId,'admin')){\r\n            throw new Meteor.Error(403, \"You do not have the power to ban a user.\")\r\n        }\r\n        Meteor.users.update({_id: id},{$set: {'private.bannedReason':reason}});\r\n        Roles.addUsersToRoles(id, 'banned');\r\n    }\r\n});"]},"hash":"73ed542d8c62161b679ec8371ec1a6fef08d9adc"}
