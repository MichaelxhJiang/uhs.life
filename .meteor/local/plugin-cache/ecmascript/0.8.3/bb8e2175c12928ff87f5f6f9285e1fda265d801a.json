{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"./posts.js","imported":["Posts"],"specifiers":[{"kind":"named","imported":"Posts","local":"Posts"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/api/posts/postsMethods.js","filenameRelative":"imports/api/posts/postsMethods.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/api/posts/postsMethods.js.map","sourceFileName":"imports/api/posts/postsMethods.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"postsMethods"},"ignored":false,"code":"var Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n    Meteor: function (v) {\n        Meteor = v;\n    }\n}, 0);\nvar Posts = void 0;\nmodule.watch(require(\"./posts.js\"), {\n    Posts: function (v) {\n        Posts = v;\n    }\n}, 1);\n\nif (Meteor.isServer) {\n    Meteor.publish('posts', function () {\n        function postsPublication() {\n            if (this.userId) {\n                console.log(this.userId);\n                return Posts.find({});\n            }\n        }\n\n        return postsPublication;\n    }());\n    Meteor.publish('announcements', function () {\n        function announcementsPublication(limit) {\n            var userLevel = '1';\n\n            if (Roles.userIsInRole(this.userId, 'student')) {\n                userLevel = '2';\n            } else if (Roles.userIsInRole(this.userId, ['teacher', 'admin'])) {\n                userLevel = '3';\n            }\n\n            return Posts.find({\n                'type': 'announcement',\n                'meta.approved': true,\n                $or: [{\n                    'meta.visibility': '1'\n                }, {\n                    'meta.visibility': userLevel\n                }]\n            }, {\n                limit: limit\n            });\n        }\n\n        return announcementsPublication;\n    }());\n    Meteor.publish('blogs', function () {\n        function blogsPublication(limit) {\n            return Posts.find({\n                'type': 'blog'\n            }, {\n                limit: limit\n            });\n        }\n\n        return blogsPublication;\n    }());\n    Meteor.publish('postsByCourse', function (code, limit) {\n        return Posts.find({\n            'type': 'blog',\n            'organizationsValues': code\n        }, {\n            limit: limit\n        });\n    });\n    Meteor.publish('postsByUser', function (limit) {\n        return Posts.find({\n            'author': this.userId\n        }, {\n            limit: limit\n        });\n    });\n}\n\nMeteor.methods({\n    'posts.removeAll': function () {\n        throw new Meteor.Error(403, \"No, just no.\"); //Posts.remove({});\n    },\n    'posts.postTextImage': function (json) {\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'announcementEditor'])) {\n            throw new Meteor.Error(403, \"You do not have permission to execute the following action.\");\n        }\n\n        var errStr = \"\",\n            err = false;\n\n        if (json.type !== \"announcement\") {\n            err = true;\n            errStr += \"Not an announcement. \";\n        }\n\n        if (json.subType !== \"imageText\") {\n            err = true;\n            errStr += \"Not correct announcement type. \";\n        }\n\n        if (!json.headline) {\n            err = true;\n            errStr += \"Missing headline. \";\n        }\n\n        if (!json.content) {\n            err = true;\n            errStr += \"Missing content. \";\n        }\n\n        console.log(json.imgId);\n\n        if (!json.imgId) {\n            err = true;\n            errStr += \"Missing image. \";\n        }\n\n        var sDate = new Date(json.startDate),\n            eDate = new Date(json.endDate),\n            currentDate = new Date();\n\n        if (sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()) {\n            err = true;\n            errStr = \"Your date selection is illegal. \";\n        }\n\n        if (err) {\n            throw new Meteor.Error(400, errStr);\n        }\n\n        json.meta.approved = false;\n        json.meta.screeningStage = 0;\n        json.meta.display = false; //adds draft to the Posts collection\n\n        Posts.insert(json, function (err, content) {\n            //error catch for algolia issues\n            if (err) {\n                console.error(err);\n            }\n        });\n    },\n    'posts.postText': function (json) {\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'announcementEditor'])) {\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\n        }\n\n        var errStr = \"\",\n            err = false;\n\n        if (json.type !== \"announcement\") {\n            err = true;\n            errStr += \"Not an announcement. \";\n        }\n\n        if (json.subType !== \"textOnly\") {\n            err = true;\n            errStr += \"Not correct announcement type. \";\n        }\n\n        if (!json.headline) {\n            err = true;\n            errStr += \"Missing headline. \";\n        }\n\n        if (!json.content) {\n            err = true;\n            errStr += \"Missing content. \";\n        }\n\n        var sDate = new Date(json.startDate),\n            eDate = new Date(json.endDate),\n            currentDate = new Date();\n\n        if (sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()) {\n            err = true;\n            errStr = \"Your date selection is illegal. \";\n        }\n\n        if (err) {\n            throw new Meteor.Error(400, errStr);\n        }\n\n        json.meta.approved = false;\n        json.meta.screeningStage = 0;\n        json.meta.display = false; //adds draft to the Posts collection\n\n        Posts.insert(json, function (err, content) {\n            //error catch for algolia issues\n            if (err) {\n                console.error(err);\n            }\n        });\n    },\n    'posts.postImage': function (json) {\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'announcementEditor'])) {\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\n        }\n\n        var errStr = \"\",\n            err = false;\n\n        if (json.type !== \"announcement\") {\n            err = true;\n            errStr += \"Not an announcement. \";\n        }\n\n        if (json.subType !== \"imageOnly\") {\n            err = true;\n            errStr += \"Not correct announcement type. \";\n        }\n\n        console.log(json.headline);\n\n        if (!json.headline) {\n            err = true;\n            errStr += \"Missing headline. \";\n        }\n\n        if (!json.imgId) {\n            err = true;\n            errStr += \"Missing image. \";\n        }\n\n        var sDate = new Date(json.startDate),\n            eDate = new Date(json.endDate),\n            currentDate = new Date();\n\n        if (sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()) {\n            err = true;\n            errStr = \"Your date selection is illegal. \";\n        }\n\n        if (err) {\n            throw new Meteor.Error(400, errStr);\n        }\n\n        json.meta.approved = false;\n        json.meta.screeningStage = 0;\n        json.meta.display = false; //adds draft to the Posts collection\n\n        Posts.insert(json, function (err, content) {\n            //error catch for algolia issues\n            if (err) {\n                console.error(err);\n            }\n        });\n    },\n    'posts.postBlog': function (json) {\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'blogEditor'])) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        var errStr = \"\",\n            err = false;\n\n        if (json.type !== \"blog\") {\n            err = true;\n            errStr += \"Not a blog. \";\n        }\n\n        if (!json.title) {\n            err = true;\n            errStr += \"Missing title. \";\n        }\n\n        if (!json.subtitle) {\n            err = true;\n            errStr += \"Missing subtitle. \";\n        }\n\n        if (!json.content) {\n            err = true;\n            errStr += \"Missing content. \";\n        }\n\n        if (!json.imgId) {\n            err = true;\n            errStr += \"Missing image. \";\n        }\n\n        var sDate = new Date(json.releaseDate),\n            currentDate = new Date();\n\n        if (sDate < currentDate) {\n            err = true;\n            errStr = \"Your date selection is illegal. \";\n        }\n\n        if (err) {\n            throw new Meteor.Error(400, errStr);\n        }\n\n        json.meta.approved = false;\n        json.meta.screeningStage = 0;\n        json.meta.display = false; //adds draft to the Posts collection\n\n        Posts.insert(json, function (err, content) {\n            //error catch for algolia issues\n            if (err) {\n                console.error(err);\n            }\n        });\n    },\n    'posts.getPostById': function (id) {\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        return Posts.findOne({\n            '_id': id\n        });\n    },\n    'posts.getDisplayPosts': function () {\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        return Posts.find({\n            'meta.approved': true,\n            'display': true\n        }).fetch();\n    },\n    'posts.getUnapprovedPosts': function () {\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        return Posts.find({\n            'meta.approved': false,\n            'meta.screeningStage': {\n                $ne: -1\n            }\n        }).fetch();\n    },\n    'posts.getApprovedPosts': function () {\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        return Posts.find({\n            'meta.approved': true,\n            'meta.screeningStage': 3\n        }).fetch();\n    },\n    'posts.getRejectedPosts': function () {\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        return Posts.find({\n            'meta.approved': false,\n            'meta.screeningStage': -1\n        }).fetch();\n    },\n    'posts.getPostsByUserId': function (userId) {\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        return Posts.find({\n            'authorId': userId\n        }).fetch();\n    },\n    'posts.removePost': function (postId) {\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        Posts.remove({\n            _id: postId\n        });\n    },\n    'posts.approvePost': function (postId) {\n        if (!Roles.userIsInRole(this.userId, ['admin'])) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        Posts.update({\n            '_id': postId\n        }, {\n            $set: {\n                'meta.approved': true,\n                'meta.screeningStage': 3\n            }\n        }, function (err, response) {\n            if (err) {\n                console.log(err);\n            } else {\n                var obj = Posts.findOne({\n                    '_id': postId\n                });\n                var type = obj.type,\n                    subType = obj.subType;\n                Meteor.call('scheduleAnnouncement', postId, function (err) {\n                    if (err) {\n                        console.log(err);\n                    }\n                });\n\n                if (type === 'announcement') {\n                    if (subType === 'textOnly') {\n                        Meteor.call('postTextAlgolia', postId);\n                    } else if (subType === 'imageOnly') {\n                        Meteor.call('postImageAlgolia', postId);\n                    } else {\n                        Meteor.call('postTextImageAlgolia', postId);\n                    }\n                } else {\n                    Meteor.call('postBlogAlgolia', postId);\n                } //Post on twitter\n\n\n                Meteor.call('setupTwitterAPI', function (err, response) {\n                    if (err) {\n                        console.log(err);\n                    } else {\n                        if (type === 'announcement') {\n                            if (subType === 'textOnly') {\n                                Meteor.call('postTextAnnouncementTwitter', obj, function (err) {\n                                    if (err) {\n                                        console.log(err);\n                                    }\n                                });\n                            } else if (subType === 'imageOnly') {\n                                Meteor.call('postImageAnnouncementTwitter', obj, function (err) {\n                                    if (err) {\n                                        console.log(err);\n                                    }\n                                });\n                            } else {\n                                Meteor.call('postTextImageAnnouncementTwitter', obj, function (err) {\n                                    if (err) {\n                                        console.log(err);\n                                    }\n                                });\n                            }\n                        } else {\n                            console.log('This post is not announcement');\n                            return -1;\n                        }\n                    }\n                });\n            }\n        });\n    },\n    'posts.unApprovePost': function (postId) {\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        Posts.findOneAndUpdate({\n            '_id': postId\n        }, {\n            $set: {\n                'meta.approved': false,\n                'meta.screeningStage': 0,\n                'display': false\n            }\n        });\n    },\n    'posts.rejectPost': function (postId, reason) {\n        if (!Roles.userIsInRole(this.userId, ['admin'])) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        Posts.update({\n            '_id': postId\n        }, {\n            $set: {\n                'meta.screeningStage': -1,\n                'meta.rejectedReason': reason\n            }\n        });\n    },\n    'posts.unRejectPost': function (postId) {\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\n        }\n\n        Posts.findOneAndUpdate({\n            '_id': postId\n        }, {\n            $set: {\n                'meta.screeningStage': 0\n            }\n        });\n    }\n});","map":{"version":3,"sources":["imports/api/posts/postsMethods.js"],"names":["Meteor","module","watch","require","v","Posts","isServer","publish","postsPublication","userId","console","log","find","announcementsPublication","limit","userLevel","Roles","userIsInRole","$or","blogsPublication","code","methods","Error","json","errStr","err","type","subType","headline","content","imgId","sDate","Date","startDate","eDate","endDate","currentDate","getTime","meta","approved","screeningStage","display","insert","error","title","subtitle","releaseDate","id","findOne","fetch","$ne","postId","remove","_id","update","$set","response","obj","call","findOneAndUpdate","reason"],"mappings":"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","file":"imports/api/posts/postsMethods.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Posts } from './posts.js';\r\n\r\nif (Meteor.isServer) {\r\n    Meteor.publish('posts', function postsPublication() {\r\n        if (this.userId) {\r\n            console.log(this.userId);\r\n            return Posts.find({});\r\n        }\r\n    });\r\n    Meteor.publish('announcements', function announcementsPublication(limit) {\r\n        let userLevel = '1';\r\n        if(Roles.userIsInRole(this.userId, 'student')){\r\n            userLevel = '2';\r\n        }else if(Roles.userIsInRole(this.userId, ['teacher', 'admin'])){\r\n            userLevel = '3';\r\n        }\r\n        return Posts.find({\r\n            'type': 'announcement',\r\n            'meta.approved': true,\r\n            $or: [{\r\n                'meta.visibility': '1'\r\n            },{\r\n                'meta.visibility': userLevel\r\n            }]\r\n        },{\r\n            limit: limit\r\n        });\r\n    });\r\n    Meteor.publish('blogs', function blogsPublication(limit) {\r\n        return Posts.find({\r\n            'type': 'blog'\r\n        },{\r\n            limit: limit\r\n        });\r\n    });\r\n    Meteor.publish('postsByCourse', function (code, limit) {\r\n        return Posts.find({\r\n            'type': 'blog',\r\n            'organizationsValues': code\r\n        },{\r\n            limit: limit\r\n        });\r\n    });\r\n    Meteor.publish('postsByUser', function (limit) {\r\n        return Posts.find({\r\n            'author': this.userId\r\n        }, {\r\n            limit: limit\r\n        });\r\n    })\r\n}\r\n\r\nMeteor.methods({\r\n    'posts.removeAll' : function() {\r\n        throw new Meteor.Error(403, \"No, just no.\");\r\n        //Posts.remove({});\r\n    },\r\n    'posts.postTextImage' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher','admin','announcementEditor'])) {\r\n            throw new Meteor.Error(403, \"You do not have permission to execute the following action.\");\r\n        }\r\n        let errStr = \"\", err = false;\r\n        if (json.type !== \"announcement\") {\r\n            err = true;\r\n            errStr += \"Not an announcement. \";\r\n        }\r\n        if (json.subType !== \"imageText\") {\r\n            err = true;\r\n            errStr += \"Not correct announcement type. \";\r\n        }\r\n        if (!json.headline) {\r\n            err = true;\r\n            errStr += \"Missing headline. \";\r\n        }\r\n        if (!json.content) {\r\n            err = true;\r\n            errStr += \"Missing content. \";\r\n        }\r\n        console.log(json.imgId);\r\n        if (!json.imgId) {\r\n            err = true;\r\n            errStr += \"Missing image. \";\r\n        }\r\n        let sDate = new Date(json.startDate),\r\n            eDate = new Date(json.endDate),\r\n            currentDate = new Date();\r\n        if(sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()){\r\n            err = true;\r\n            errStr = \"Your date selection is illegal. \"\r\n        }\r\n        if (err) {\r\n            throw new Meteor.Error(400, errStr);\r\n        }\r\n        json.meta.approved = false;\r\n        json.meta.screeningStage = 0;\r\n        json.meta.display = false;\r\n\r\n        //adds draft to the Posts collection\r\n        Posts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n    },\r\n    'posts.postText' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher','admin','announcementEditor'])) {\r\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        let errStr = \"\", err = false;\r\n        if (json.type !== \"announcement\") {\r\n            err = true;\r\n            errStr += \"Not an announcement. \";\r\n        }\r\n        if (json.subType !== \"textOnly\") {\r\n            err = true;\r\n            errStr += \"Not correct announcement type. \";\r\n        }\r\n        if (!json.headline) {\r\n            err = true;\r\n            errStr += \"Missing headline. \";\r\n        }\r\n        if (!json.content) {\r\n            err = true;\r\n            errStr += \"Missing content. \";\r\n        }\r\n        let sDate = new Date(json.startDate),\r\n            eDate = new Date(json.endDate),\r\n            currentDate = new Date();\r\n        if(sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()){\r\n            err = true;\r\n            errStr = \"Your date selection is illegal. \"\r\n        }\r\n        if (err) {\r\n            throw new Meteor.Error(400, errStr);\r\n        }\r\n\r\n        json.meta.approved = false;\r\n        json.meta.screeningStage = 0;\r\n        json.meta.display = false;\r\n\r\n        //adds draft to the Posts collection\r\n        Posts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    },\r\n    'posts.postImage' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher','admin','announcementEditor'])) {\r\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        let errStr = \"\", err = false;\r\n        if (json.type !== \"announcement\") {\r\n            err = true;\r\n            errStr += \"Not an announcement. \";\r\n        }\r\n        if (json.subType !== \"imageOnly\") {\r\n            err = true;\r\n            errStr += \"Not correct announcement type. \";\r\n        }\r\n        console.log(json.headline);\r\n        if (!json.headline) {\r\n            err = true;\r\n            errStr += \"Missing headline. \";\r\n        }\r\n        if (!json.imgId) {\r\n            err = true;\r\n            errStr += \"Missing image. \";\r\n        }\r\n        let sDate = new Date(json.startDate),\r\n            eDate = new Date(json.endDate),\r\n            currentDate = new Date();\r\n        if(sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()){\r\n            err = true;\r\n            errStr = \"Your date selection is illegal. \"\r\n        }\r\n        if (err) {\r\n            throw new Meteor.Error(400, errStr);\r\n        }\r\n\r\n        json.meta.approved = false;\r\n        json.meta.screeningStage = 0;\r\n        json.meta.display = false;\r\n\r\n        //adds draft to the Posts collection\r\n        Posts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    },\r\n    'posts.postBlog' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher','admin','blogEditor'])) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        let errStr = \"\", err = false;\r\n        if (json.type !== \"blog\") {\r\n            err = true;\r\n            errStr += \"Not a blog. \";\r\n        }\r\n        if (!json.title) {\r\n            err = true;\r\n            errStr += \"Missing title. \";\r\n        }\r\n        if (!json.subtitle) {\r\n            err = true;\r\n            errStr += \"Missing subtitle. \";\r\n        }\r\n        if (!json.content) {\r\n            err = true;\r\n            errStr += \"Missing content. \";\r\n        }\r\n        if (!json.imgId) {\r\n            err = true;\r\n            errStr += \"Missing image. \";\r\n        }\r\n        let sDate = new Date(json.releaseDate),\r\n            currentDate = new Date();\r\n        if(sDate < currentDate){\r\n            err = true;\r\n            errStr = \"Your date selection is illegal. \"\r\n        }\r\n        if (err) {\r\n            throw new Meteor.Error(400, errStr);\r\n        }\r\n\r\n        json.meta.approved = false;\r\n        json.meta.screeningStage = 0;\r\n        json.meta.display = false;\r\n\r\n        //adds draft to the Posts collection\r\n        Posts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    },\r\n    'posts.getPostById' : function(id) {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n        return Posts.findOne({'_id':id});\r\n    },\r\n    'posts.getDisplayPosts' : function() {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        return Posts.find({'meta.approved':true, 'display': true}).fetch();\r\n    },\r\n    'posts.getUnapprovedPosts' : function() {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        return Posts.find({'meta.approved':false, 'meta.screeningStage': {$ne: -1}}).fetch();\r\n    },\r\n    'posts.getApprovedPosts' : function() {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        return Posts.find({'meta.approved':true, 'meta.screeningStage': 3}).fetch();\r\n    },\r\n    'posts.getRejectedPosts' : function() {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        return Posts.find({'meta.approved':false, 'meta.screeningStage': -1}).fetch();\r\n    },\r\n    'posts.getPostsByUserId' : function (userId) {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        return Posts.find({'authorId': userId}).fetch();\r\n    },\r\n    'posts.removePost': function (postId) {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        Posts.remove({_id: postId});\r\n    },\r\n    'posts.approvePost' : function(postId) {\r\n        if (!Roles.userIsInRole( this.userId, ['admin'])) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        Posts.update({'_id':postId}, { $set: {'meta.approved':true, 'meta.screeningStage':3}}, function (err, response) {\r\n            if (err) {\r\n                console.log(err);\r\n            } else {\r\n                let obj = Posts.findOne({'_id':postId});\r\n                let type = obj.type, subType = obj.subType;\r\n\r\n                Meteor.call('scheduleAnnouncement', postId, function(err) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    }\r\n                });\r\n                if (type === 'announcement') {\r\n                    if (subType === 'textOnly') {\r\n                        Meteor.call('postTextAlgolia', postId);\r\n                    } else if (subType === 'imageOnly') {\r\n                        Meteor.call('postImageAlgolia', postId);\r\n                    } else {\r\n                        Meteor.call('postTextImageAlgolia', postId);\r\n                    }\r\n                } else {\r\n                    Meteor.call('postBlogAlgolia', postId);\r\n                }\r\n\r\n                //Post on twitter\r\n                Meteor.call('setupTwitterAPI', function(err, response) {\r\n                    if(err) {\r\n                        console.log(err);\r\n                    } else {\r\n\r\n                        if (type === 'announcement') {\r\n                            if (subType === 'textOnly') {\r\n                                Meteor.call('postTextAnnouncementTwitter', obj, function(err) {\r\n                                    if (err) {\r\n                                        console.log(err);\r\n                                    }\r\n                                });\r\n                            } else if (subType === 'imageOnly') {\r\n                                Meteor.call('postImageAnnouncementTwitter', obj, function(err) {\r\n                                    if (err) {\r\n                                        console.log(err);\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                Meteor.call('postTextImageAnnouncementTwitter', obj, function(err) {\r\n                                    if (err) {\r\n                                        console.log(err);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }  else {\r\n                            console.log('This post is not announcement');\r\n                            return -1;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    },\r\n    'posts.unApprovePost' : function (postId) {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        Posts.findOneAndUpdate ({'_id':postId}, { $set: {'meta.approved':false, 'meta.screeningStage':0, 'display': false}});\r\n    },\r\n    'posts.rejectPost' : function (postId, reason) {\r\n        if (!Roles.userIsInRole( this.userId, ['admin'])) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n        Posts.update ({'_id':postId}, { $set: {'meta.screeningStage': -1, 'meta.rejectedReason': reason}});\r\n    },\r\n    'posts.unRejectPost' : function (postId) {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        Posts.findOneAndUpdate ({'_id':postId}, { $set: {'meta.screeningStage': 0}});\r\n    }\r\n});\r\n"]},"hash":"bb8e2175c12928ff87f5f6f9285e1fda265d801a"}
