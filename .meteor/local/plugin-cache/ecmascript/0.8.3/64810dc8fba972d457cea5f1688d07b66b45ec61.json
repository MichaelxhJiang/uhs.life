{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/startup/client/routes.js","filenameRelative":"imports/startup/client/routes.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/startup/client/routes.js.map","sourceFileName":"imports/startup/client/routes.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"routes"},"ignored":false,"code":"/**\r\n * This file defines all the routing that takes place\r\n *\r\n * */var loggedIn = FlowRouter.group({\n    triggersEnter: [function () {\n        var route = void 0;\n        Session.set(\"DocumentTitle\", \"UHS Life - Crafted By Students, For Everyone\");\n\n        if (!(Meteor.loggingIn() || Meteor.userId())) {\n            route = FlowRouter.current();\n            Session.set('redirectAfterLogin', route.path);\n            console.log(Session.get('redirectAfterLogin'));\n            FlowRouter.go('/login');\n        } else {\n            Tracker.autorun(function () {\n                var userSub = Meteor.subscribe('allUsers');\n                var user = Meteor.user();\n\n                if (user && userSub.ready()) {\n                    Session.setPersistent('inDash', false);\n\n                    if (!user.profile.init) {\n                        Meteor.call('accounts.initRoles');\n                        FlowRouter.go('/first');\n                    } else {\n                        Session.setPersistent('name', user.services.google.name);\n\n                        if (Roles.userIsInRole(Meteor.userId(), 'student')) {\n                            Session.setPersistent('courses', user.private.courses);\n                            Session.setPersistent('token', user.private.token);\n                            Session.setPersistent('tokenExpiry', user.private.tokenDate);\n                        }\n\n                        Session.set('user_img', user.services.google.picture);\n                    }\n                }\n            });\n        }\n    }]\n});\nvar admin = FlowRouter.group({\n    triggersEnter: [function () {\n        var route = void 0;\n\n        if (!(Meteor.loggingIn() || Meteor.userId())) {\n            route = FlowRouter.current();\n            Session.set('redirectAfterLogin', route.path);\n            console.log(Session.get('redirectAfterLogin'));\n            FlowRouter.go('/login');\n        } else {\n            Session.setPersistent('inDash', true);\n            Tracker.autorun(function () {\n                var userSub = Meteor.subscribe('allUsers');\n                var user = Meteor.user();\n\n                if (user && userSub.ready()) {\n                    if (!user.profile.init) {\n                        Meteor.call('accounts.initRoles');\n                        FlowRouter.go('/first');\n                    } else {\n                        Session.set('name', user.services.google.name);\n                        Session.set('id', user.profile.id);\n                        Session.set('courses', user.private.courses);\n                        Session.set('tokenExpiry', user.private.tokenDate);\n                        Session.set('token', user.private.token);\n                        Session.set('user_img', user.services.google.picture);\n                    } /*else if(!Roles.userIsInRole(user._id, 'admin')){\r\n                       alertError('Sorry', \"You do not have access to this area.\");\r\n                       FlowRouter.go('/')\r\n                       }*/\n                }\n            });\n        }\n    }]\n});\nadmin.route('/dashboard/users', {\n    action: function () {\n        Session.set(\"DocumentTitle\", \"Users - Administrative Dashboard | uhs.life\");\n        BlazeLayout.render('dashboard', {\n            dash: 'dashUsers'\n        });\n    }\n});\nadmin.route('/dashboard/announcements', {\n    action: function () {\n        Session.set(\"DocumentTitle\", \"All Announcements - Administrative Dashboard | uhs.life\");\n        BlazeLayout.render('dashboard', {\n            dash: 'dashAnnouncements'\n        });\n    }\n});\nadmin.route('/dashboard/categories', {\n    action: function () {\n        Session.set(\"DocumentTitle\", \"Categories - Administrative Dashboard | uhs.life\");\n        BlazeLayout.render('dashboard', {\n            dash: 'dashCategories'\n        });\n    }\n});\nadmin.route('/dashboard/organizations', {\n    action: function () {\n        Session.set(\"DocumentTitle\", \"Organizations - Administrative Dashboard | uhs.life\");\n        BlazeLayout.render('dashboard', {\n            dash: 'dashOrganizations'\n        });\n    }\n});\nadmin.route('/dashboard/suggestions', {\n    action: function () {\n        Session.set(\"DocumentTitle\", \"Suggestions - Administrative Dashboard | uhs.life\");\n        BlazeLayout.render('dashboard', {\n            dash: 'dashSuggestions'\n        });\n    }\n});\nFlowRouter.route('/login', {\n    waitOn: function () {\n        setTimeout(function () {\n            Accounts.loginServicesConfigured();\n        }, 500);\n    },\n    action: function () {\n        if (!Meteor.userId()) {\n            Session.set('redirectAfterLogin', '/');\n            Session.set(\"DocumentTitle\", \"Please Login | uhs.life\");\n            BlazeLayout.render('applicationLayout', {\n                main: 'login'\n            });\n        } else {\n            FlowRouter.go('/');\n        }\n    },\n    name: 'login'\n});\nloggedIn.route('/stories', {\n    action: function () {\n        BlazeLayout.render('applicationLayout', {\n            main: 'blogs'\n        });\n    }\n});\nloggedIn.route('/blog/:postId', {\n    action: function (params) {\n        if (params.postId === 'preview') {\n            Session.setPersistent('post_data', Session.get('preview_json'));\n        } else {\n            Tracker.autorun(function () {\n                var post = Posts.findOne({\n                    _id: params.postId\n                });\n\n                if (post) {\n                    Session.set(\"DocumentTitle\", post.title + \" | uhs.life\");\n                    Session.setPersistent('post_data', post);\n                }\n            });\n        }\n\n        window.scrollTo(0, 0);\n        BlazeLayout.render('applicationLayout', {\n            main: 'details'\n        });\n    }\n});\nadmin.route('/dashboard', {\n    action: function () {\n        Session.set(\"DocumentTitle\", \"Administrative Dashboard | uhs.life\");\n        BlazeLayout.render('dashboard', {\n            dash: 'dashHome'\n        });\n    }\n});\nloggedIn.route('/course/:courseId', {\n    action: function (params) {\n        var tokenJson = Session.get('token');\n        console.log(tokenJson);\n        tokenJson.subject_id = params.courseId;\n        Meteor.call('getTeachAssistCourseDetails', tokenJson, function (err, data) {\n            if (err || data.ERROR) {\n                if (err.error === 400) {\n                    Modal.show('teachAssistPass');\n                } else {\n                    alertError('Something went wrong', 'We are having problems talking to teach assist. You can visit ta.yrdsb.ca for more details on your mark.');\n                }\n            } else {\n                console.log(data);\n                var a = Meteor.user().private.courses;\n                console.log(a);\n                var found = void 0;\n                var entry = void 0;\n\n                for (var index = 0; index < a.length; ++index) {\n                    entry = a[index];\n\n                    if (entry.subject_id === params.courseId) {\n                        found = entry;\n                        break;\n                    }\n                }\n\n                Session.setPersistent('displayMark', found.mark);\n                Session.setPersistent('courseData', data);\n                window.scrollTo(0, 0);\n                BlazeLayout.render('applicationLayout', {\n                    main: 'course'\n                });\n            }\n        });\n    },\n    name: 'course'\n});\nloggedIn.route('/big-picture', {\n    action: function () {\n        BlazeLayout.render('applicationLayout', {\n            main: 'bigPicture'\n        });\n    },\n    name: 'bigPicture' // Optional route name.\n\n});\nloggedIn.route('/', {\n    action: function () {\n        Session.set(\"DocumentTitle\", \"Stream | uhs.life\");\n        BlazeLayout.render('applicationLayout', {\n            main: 'stream'\n        });\n    },\n    name: 'root' // Optional route name.\n\n});\nloggedIn.route('/stream', {\n    action: function () {\n        BlazeLayout.render('applicationLayout', {\n            main: 'stream'\n        });\n    },\n    name: 'stream' // Optional route name.\n\n});\nloggedIn.route('/logout', {\n    action: function () {\n        Session.set(\"DocumentTitle\", \"Logging out...\");\n        Meteor.logout(function () {\n            Session.clear();\n            FlowRouter.go('/');\n        });\n    },\n    name: 'logout'\n});\nloggedIn.route('/first', {\n    action: function () {\n        Session.set(\"DocumentTitle\", \"Welcome to uhs.life!\");\n        BlazeLayout.render('applicationLayout', {\n            main: 'firstTime'\n        }); /*Tracker.autorun(function () {\r\n                let user = Meteor.user();\r\n                if(user){\r\n                    if(user.profile.init){\r\n                        FlowRouter.go('/')\r\n                    }else{\r\n                        BlazeLayout.render('applicationLayout',{main: 'firstTime'});\r\n                    }\r\n                }\r\n            });*/\n    },\n    name: 'first'\n});\n\ncheckTokenExpiry = function () {\n    var now = new Date();\n    var diff = Math.abs(now - Session.get('tokenExpiry'));\n    var minutes = Math.floor(diff / 1000 / 60);\n    return minutes < 15;\n};","map":{"version":3,"sources":["imports/startup/client/routes.js"],"names":["loggedIn","FlowRouter","group","triggersEnter","route","Session","set","Meteor","loggingIn","userId","current","path","console","log","get","go","Tracker","autorun","userSub","subscribe","user","ready","setPersistent","profile","init","call","services","google","name","Roles","userIsInRole","private","courses","token","tokenDate","picture","admin","id","action","BlazeLayout","render","dash","waitOn","setTimeout","Accounts","loginServicesConfigured","main","params","postId","post","Posts","findOne","_id","title","window","scrollTo","tokenJson","subject_id","courseId","err","data","ERROR","error","Modal","show","alertError","a","found","entry","index","length","mark","logout","clear","checkTokenExpiry","now","Date","diff","Math","abs","minutes","floor"],"mappings":"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","file":"imports/startup/client/routes.js.map","sourcesContent":["/**\r\n * This file defines all the routing that takes place\r\n *\r\n * */\r\n\r\nlet loggedIn = FlowRouter.group({\r\n    triggersEnter: [\r\n        function () {\r\n            let route;\r\n            Session.set(\"DocumentTitle\",\"UHS Life - Crafted By Students, For Everyone\");\r\n            if (!(Meteor.loggingIn() || Meteor.userId())){\r\n                route = FlowRouter.current();\r\n                Session.set('redirectAfterLogin', route.path);\r\n                console.log(Session.get('redirectAfterLogin'));\r\n                FlowRouter.go('/login');\r\n            }else{\r\n                Tracker.autorun(function () {\r\n                    let userSub = Meteor.subscribe('allUsers');\r\n                    let user = Meteor.user();\r\n                    if(user && userSub.ready()){\r\n                        Session.setPersistent('inDash', false);\r\n                        if(!user.profile.init){\r\n                            Meteor.call('accounts.initRoles');\r\n                            FlowRouter.go('/first')\r\n                        }else{\r\n                            Session.setPersistent('name', user.services.google.name);\r\n                            if(Roles.userIsInRole(Meteor.userId(),'student')){\r\n                                Session.setPersistent('courses',user.private.courses);\r\n                                Session.setPersistent('token',user.private.token);\r\n                                Session.setPersistent('tokenExpiry',user.private.tokenDate);\r\n                            }\r\n                            Session.set('user_img', user.services.google.picture);\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    ]\r\n});\r\n\r\nlet admin = FlowRouter.group({\r\n    triggersEnter: [\r\n        function () {\r\n            let route;\r\n            if (!(Meteor.loggingIn() || Meteor.userId())){\r\n                route = FlowRouter.current();\r\n                Session.set('redirectAfterLogin', route.path);\r\n                console.log(Session.get('redirectAfterLogin'));\r\n                FlowRouter.go('/login');\r\n            }else{\r\n                Session.setPersistent('inDash', true);\r\n                Tracker.autorun(function () {\r\n                    let userSub = Meteor.subscribe('allUsers');\r\n                    let user = Meteor.user();\r\n                    if(user && userSub.ready()){\r\n                        if(!user.profile.init){\r\n                            Meteor.call('accounts.initRoles');\r\n                            FlowRouter.go('/first')\r\n                        }else{\r\n                            Session.set('name', user.services.google.name);\r\n                            Session.set('id', user.profile.id);\r\n                            Session.set('courses',user.private.courses);\r\n                            Session.set('tokenExpiry',user.private.tokenDate);\r\n                            Session.set('token',user.private.token);\r\n                            Session.set('user_img', user.services.google.picture);\r\n                        }\r\n                        /*else if(!Roles.userIsInRole(user._id, 'admin')){\r\n                         alertError('Sorry', \"You do not have access to this area.\");\r\n                         FlowRouter.go('/')\r\n                         }*/\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    ]\r\n});\r\n\r\nadmin.route('/dashboard/users', {\r\n    action: function () {\r\n        Session.set(\"DocumentTitle\",\"Users - Administrative Dashboard | uhs.life\");\r\n        BlazeLayout.render('dashboard',{dash: 'dashUsers'})\r\n    }\r\n});\r\n\r\nadmin.route('/dashboard/announcements', {\r\n    action: function () {\r\n        Session.set(\"DocumentTitle\",\"All Announcements - Administrative Dashboard | uhs.life\");\r\n        BlazeLayout.render('dashboard',{dash: 'dashAnnouncements'})\r\n    }\r\n});\r\n\r\nadmin.route('/dashboard/categories', {\r\n    action: function () {\r\n        Session.set(\"DocumentTitle\",\"Categories - Administrative Dashboard | uhs.life\");\r\n        BlazeLayout.render('dashboard',{dash: 'dashCategories'})\r\n    }\r\n});\r\n\r\nadmin.route('/dashboard/organizations', {\r\n    action: function () {\r\n        Session.set(\"DocumentTitle\",\"Organizations - Administrative Dashboard | uhs.life\");\r\n        BlazeLayout.render('dashboard',{dash: 'dashOrganizations'})\r\n    }\r\n});\r\n\r\nadmin.route('/dashboard/suggestions', {\r\n    action: function () {\r\n        Session.set(\"DocumentTitle\",\"Suggestions - Administrative Dashboard | uhs.life\");\r\n        BlazeLayout.render('dashboard',{dash: 'dashSuggestions'})\r\n    }\r\n});\r\n\r\nFlowRouter.route('/login',{\r\n    waitOn: function(){\r\n        setTimeout(function() {\r\n            Accounts.loginServicesConfigured();\r\n        },500);\r\n    },\r\n    action: function(){\r\n        if(!Meteor.userId()){\r\n            Session.set('redirectAfterLogin', '/');\r\n            Session.set(\"DocumentTitle\",\"Please Login | uhs.life\");\r\n            BlazeLayout.render('applicationLayout', {main: 'login'});\r\n        }else{\r\n            FlowRouter.go('/');\r\n        }\r\n    },\r\n    name: 'login'\r\n});\r\n\r\nloggedIn.route('/stories',{\r\n    action: function () {\r\n        BlazeLayout.render('applicationLayout',{main: 'blogs'})\r\n    }\r\n});\r\n\r\nloggedIn.route('/blog/:postId',{\r\n    action: function (params) {\r\n        if(params.postId === 'preview'){\r\n            Session.setPersistent('post_data', Session.get('preview_json'))\r\n        }else{\r\n            Tracker.autorun(function () {\r\n               let post = Posts.findOne({_id: params.postId});\r\n               if(post){\r\n                   Session.set(\"DocumentTitle\", post.title + \" | uhs.life\");\r\n                   Session.setPersistent('post_data', post);\r\n               }\r\n            });\r\n        }\r\n        window.scrollTo(0, 0);\r\n        BlazeLayout.render('applicationLayout',{main: 'details'})\r\n    }\r\n});\r\n\r\nadmin.route('/dashboard',{\r\n    action: function () {\r\n        Session.set(\"DocumentTitle\",\"Administrative Dashboard | uhs.life\");\r\n        BlazeLayout.render('dashboard',{dash: 'dashHome'})\r\n    }\r\n});\r\n\r\nloggedIn.route('/course/:courseId',{\r\n    action: function (params) {\r\n        let tokenJson = Session.get('token');\r\n        console.log(tokenJson);\r\n        tokenJson.subject_id = params.courseId;\r\n        Meteor.call('getTeachAssistCourseDetails', tokenJson, function (err, data) {\r\n            if(err || data.ERROR){\r\n                if(err.error === 400){\r\n                    Modal.show('teachAssistPass');\r\n                }else{\r\n                    alertError('Something went wrong', 'We are having problems talking to teach assist. You can visit ta.yrdsb.ca for more details on your mark.')\r\n                }\r\n            }else{\r\n                console.log(data);\r\n                let a = Meteor.user().private.courses;\r\n                console.log(a);\r\n                let found;\r\n                let entry;\r\n                for (let index = 0; index < a.length; ++index) {\r\n                    entry = a[index];\r\n                    if (entry.subject_id === params.courseId) {\r\n                        found = entry;\r\n                        break;\r\n                    }\r\n                }\r\n                Session.setPersistent('displayMark', found.mark);\r\n                Session.setPersistent('courseData', data);\r\n                window.scrollTo(0, 0);\r\n                BlazeLayout.render('applicationLayout',{main: 'course'});\r\n            }\r\n        });\r\n    },\r\n    name: 'course'\r\n});\r\n\r\nloggedIn.route( '/big-picture', {\r\n    action: function() {\r\n        BlazeLayout.render('applicationLayout', {main: 'bigPicture'});\r\n    },\r\n    name: 'bigPicture' // Optional route name.\r\n});\r\n\r\nloggedIn.route( '/', {\r\n    action: function() {\r\n        Session.set(\"DocumentTitle\", \"Stream | uhs.life\");\r\n        BlazeLayout.render('applicationLayout', {main: 'stream'});\r\n    },\r\n    name: 'root' // Optional route name.\r\n});\r\n\r\nloggedIn.route( '/stream', {\r\n    action: function() {\r\n        BlazeLayout.render('applicationLayout', {main: 'stream'});\r\n    },\r\n    name: 'stream' // Optional route name.\r\n});\r\n\r\nloggedIn.route('/logout',{\r\n    action: () => {\r\n        Session.set(\"DocumentTitle\",\"Logging out...\");\r\n        Meteor.logout(function() {\r\n            Session.clear();\r\n            FlowRouter.go('/');\r\n        });\r\n    },\r\n    name: 'logout'\r\n});\r\n\r\nloggedIn.route('/first', {\r\n    action: function () {\r\n        Session.set(\"DocumentTitle\",\"Welcome to uhs.life!\");\r\n        BlazeLayout.render('applicationLayout',{main: 'firstTime'});\r\n        /*Tracker.autorun(function () {\r\n            let user = Meteor.user();\r\n            if(user){\r\n                if(user.profile.init){\r\n                    FlowRouter.go('/')\r\n                }else{\r\n                    BlazeLayout.render('applicationLayout',{main: 'firstTime'});\r\n                }\r\n            }\r\n        });*/\r\n    },\r\n    name: 'first'\r\n});\r\n\r\ncheckTokenExpiry = function () {\r\n    const now = new Date();\r\n    let diff = Math.abs(now - Session.get('tokenExpiry'));\r\n    let minutes = Math.floor((diff/1000)/60);\r\n    return minutes < 15;\r\n}"]},"hash":"64810dc8fba972d457cea5f1688d07b66b45ec61"}
