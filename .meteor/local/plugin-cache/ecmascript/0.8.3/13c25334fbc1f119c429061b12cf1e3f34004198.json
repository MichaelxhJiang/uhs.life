{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"fs","imported":["statSync","unlinkSync","existsSync"],"specifiers":[{"kind":"named","imported":"statSync","local":"statSync"},{"kind":"named","imported":"unlinkSync","local":"unlinkSync"},{"kind":"named","imported":"existsSync","local":"existsSync"}]}],"exports":{"exported":["removeExistingSocketFile","registerSocketFileCleanup"],"specifiers":[{"kind":"local","local":"removeExistingSocketFile","exported":"removeExistingSocketFile"},{"kind":"local","local":"registerSocketFileCleanup","exported":"registerSocketFileCleanup"}]}}},"options":{"filename":"packages/webapp/socket_file.js","filenameRelative":"packages/webapp/socket_file.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/webapp/socket_file.js.map","sourceFileName":"packages/webapp/socket_file.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"socket_file"},"ignored":false,"code":"module.export({\n  removeExistingSocketFile: function () {\n    return removeExistingSocketFile;\n  },\n  registerSocketFileCleanup: function () {\n    return registerSocketFileCleanup;\n  }\n});\nvar statSync = void 0,\n    unlinkSync = void 0,\n    existsSync = void 0;\nmodule.watch(require(\"fs\"), {\n  statSync: function (v) {\n    statSync = v;\n  },\n  unlinkSync: function (v) {\n    unlinkSync = v;\n  },\n  existsSync: function (v) {\n    existsSync = v;\n  }\n}, 0);\n\nvar removeExistingSocketFile = function (socketPath) {\n  try {\n    if (statSync(socketPath).isSocket()) {\n      // Since a new socket file will be created, remove the existing\n      // file.\n      unlinkSync(socketPath);\n    } else {\n      throw new Error(\"An existing file was found at \\\"\" + socketPath + \"\\\" and it is not \" + 'a socket file. Please confirm PORT is pointing to valid and ' + 'un-used socket file path.');\n    }\n  } catch (error) {\n    // If there is no existing socket file to cleanup, great, we'll\n    // continue normally. If the caught exception represents any other\n    // issue, re-throw.\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  }\n};\n\nvar registerSocketFileCleanup = function (socketPath) {\n  var eventEmitter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process;\n  ['exit', 'SIGINT', 'SIGHUP', 'SIGTERM'].forEach(function (signal) {\n    eventEmitter.on(signal, Meteor.bindEnvironment(function () {\n      if (existsSync(socketPath)) {\n        unlinkSync(socketPath);\n      }\n    }));\n  });\n};","map":{"version":3,"sources":["packages/webapp/socket_file.js"],"names":["module","export","removeExistingSocketFile","registerSocketFileCleanup","statSync","unlinkSync","existsSync","watch","require","v","socketPath","isSocket","Error","error","code","eventEmitter","process","forEach","on","signal","Meteor","bindEnvironment"],"mappings":"AAAAA,OAAOC,MAAP,CAAc;AAACC,4BAAyB;AAAA,WAAIA,wBAAJ;AAAA,GAA1B;AAAuDC,6BAA0B;AAAA,WAAIA,yBAAJ;AAAA;AAAjF,CAAd;AAA+H,IAAIC,iBAAJ;AAAA,IAAaC,mBAAb;AAAA,IAAwBC,mBAAxB;AAAmCN,OAAOO,KAAP,CAAaC,QAAQ,IAAR,CAAb,EAA2B;AAACJ,UAAD,YAAUK,CAAV,EAAY;AAACL,eAASK,CAAT;AAAW,GAAxB;AAAyBJ,YAAzB,YAAoCI,CAApC,EAAsC;AAACJ,iBAAWI,CAAX;AAAa,GAApD;AAAqDH,YAArD,YAAgEG,CAAhE,EAAkE;AAACH,iBAAWG,CAAX;AAAa;AAAhF,CAA3B,EAA6G,CAA7G;;AAyB3J,IAAMP,2BAA2B,UAACQ,UAAD,EAAgB;AACtD,MAAI;AACF,QAAIN,SAASM,UAAT,EAAqBC,QAArB,EAAJ,EAAqC;AACnC;AACA;AACAN,iBAAWK,UAAX;AACD,KAJD,MAIO;AACL,YAAM,IAAIE,KAAJ,CACJ,qCAAkCF,UAAlC,yBACA,8DADA,GAEA,2BAHI,CAAN;AAKD;AACF,GAZD,CAYE,OAAOG,KAAP,EAAc;AACd;AACA;AACA;AACA,QAAIA,MAAMC,IAAN,KAAe,QAAnB,EAA6B;AAC3B,YAAMD,KAAN;AACD;AACF;AACF,CArBM;;AA0BA,IAAMV,4BACX,UAACO,UAAD,EAAwC;AAAA,MAA3BK,YAA2B,uEAAZC,OAAY;AACtC,GAAC,MAAD,EAAS,QAAT,EAAmB,QAAnB,EAA6B,SAA7B,EAAwCC,OAAxC,CAAgD,kBAAU;AACxDF,iBAAaG,EAAb,CAAgBC,MAAhB,EAAwBC,OAAOC,eAAP,CAAuB,YAAM;AACnD,UAAIf,WAAWI,UAAX,CAAJ,EAA4B;AAC1BL,mBAAWK,UAAX;AACD;AACF,KAJuB,CAAxB;AAKD,GAND;AAOD,CATI","file":"packages/webapp/socket_file.js.map","sourcesContent":["import { statSync, unlinkSync, existsSync } from 'fs';\n\n// Since a new socket file will be created when the HTTP server\n// starts up, if found remove the existing file.\n//\n// WARNING:\n// This will remove the configured socket file without warning. If\n// the configured socket file is already in use by another application,\n// it will still be removed. Node does not provide a reliable way to\n// differentiate between a socket file that is already in use by\n// another application or a stale socket file that has been\n// left over after a SIGKILL. Since we have no reliable way to\n// differentiate between these two scenarios, the best course of\n// action during startup is to remove any existing socket file. This\n// is not the safest course of action as removing the existing socket\n// file could impact an application using it, but this approach helps\n// ensure the HTTP server can startup without manual\n// intervention (e.g. asking for the verification and cleanup of socket\n// files before allowing the HTTP server to be started).\n//\n// The above being said, as long as the socket file path is\n// configured carefully when the application is deployed (and extra\n// care is taken to make sure the configured path is unique and doesn't\n// conflict with another socket file path), then there should not be\n// any issues with this approach.\nexport const removeExistingSocketFile = (socketPath) => {\n  try {\n    if (statSync(socketPath).isSocket()) {\n      // Since a new socket file will be created, remove the existing\n      // file.\n      unlinkSync(socketPath);\n    } else {\n      throw new Error(\n        `An existing file was found at \"${socketPath}\" and it is not ` +\n        'a socket file. Please confirm PORT is pointing to valid and ' +\n        'un-used socket file path.'\n      );\n    }\n  } catch (error) {\n    // If there is no existing socket file to cleanup, great, we'll\n    // continue normally. If the caught exception represents any other\n    // issue, re-throw.\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  }\n};\n\n// Remove the socket file when done to avoid leaving behind a stale one.\n// Note - a stale socket file is still left behind if the running node\n// process is killed via signal 9 - SIGKILL.\nexport const registerSocketFileCleanup =\n  (socketPath, eventEmitter = process) => {\n    ['exit', 'SIGINT', 'SIGHUP', 'SIGTERM'].forEach(signal => {\n      eventEmitter.on(signal, Meteor.bindEnvironment(() => {\n        if (existsSync(socketPath)) {\n          unlinkSync(socketPath);\n        }\n      }));\n    });\n  };\n"]},"hash":"13c25334fbc1f119c429061b12cf1e3f34004198"}
