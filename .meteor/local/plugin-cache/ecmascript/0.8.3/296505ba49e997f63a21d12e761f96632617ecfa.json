{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/ddp-server/writefence.js","filenameRelative":"packages/ddp-server/writefence.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/ddp-server/writefence.js.map","sourceFileName":"packages/ddp-server/writefence.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"writefence"},"ignored":false,"code":"var Future = Npm.require('fibers/future'); // A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\n\n\nDDPServer._WriteFence = function () {\n  var self = this;\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n}; // The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\n\n\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable();\n\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n    if (self.retired) return {\n      committed: function () {}\n    };\n    if (self.fired) throw new Error(\"fence has already activated -- too late to add writes\");\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed) throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n\n        self._maybeFire();\n      }\n    };\n  },\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get()) throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n\n    self._maybeFire();\n  },\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future();\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired) throw new Error(\"write fence already activated?\");\n\n    if (self.armed && !self.outstanding_writes) {\n      var invokeCallback = function (func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback:\", err);\n        }\n      };\n\n      self.outstanding_writes++;\n\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n\n        _.each(callbacks, invokeCallback);\n      }\n\n      self.outstanding_writes--;\n\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (!self.fired) throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});","map":{"version":3,"sources":["packages/ddp-server/writefence.js"],"names":["Future","Npm","require","DDPServer","_WriteFence","self","armed","fired","retired","outstanding_writes","before_fire_callbacks","completion_callbacks","_CurrentWriteFence","Meteor","EnvironmentVariable","_","extend","prototype","beginWrite","committed","Error","_maybeFire","arm","get","onBeforeFire","func","push","onAllCommitted","armAndWait","future","wait","invokeCallback","err","_debug","length","callbacks","each","retire"],"mappings":"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","file":"packages/ddp-server/writefence.js.map","sourcesContent":["var Future = Npm.require('fibers/future');\n\n// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = function () {\n  var self = this;\n\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable;\n\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n\n    if (self.retired)\n      return { committed: function () {} };\n\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to add writes\");\n\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed)\n          throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n        self._maybeFire();\n      }\n    };\n  },\n\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get())\n      throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n    self._maybeFire();\n  },\n\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future;\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"write fence already activated?\");\n    if (self.armed && !self.outstanding_writes) {\n      function invokeCallback (func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback:\", err);\n        }\n      }\n\n      self.outstanding_writes++;\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n      self.outstanding_writes--;\n\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (! self.fired)\n      throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});\n"]},"hash":"296505ba49e997f63a21d12e761f96632617ecfa"}
