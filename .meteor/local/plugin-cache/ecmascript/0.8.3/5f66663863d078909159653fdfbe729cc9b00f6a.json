{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./accounts_client.js","imported":["AccountsClient"],"specifiers":[{"kind":"named","imported":"AccountsClient","local":"AccountsClient"}]}],"exports":{"exported":["AccountsTest"],"specifiers":[{"kind":"local","local":"AccountsTest","exported":"AccountsTest"}]}}},"options":{"filename":"packages/accounts-base/url_client.js","filenameRelative":"packages/accounts-base/url_client.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/accounts-base/url_client.js.map","sourceFileName":"packages/accounts-base/url_client.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"url_client"},"ignored":false,"code":"module.export({\n  AccountsTest: function () {\n    return AccountsTest;\n  }\n});\nvar AccountsClient = void 0;\nmodule.watch(require(\"./accounts_client.js\"), {\n  AccountsClient: function (v) {\n    AccountsClient = v;\n  }\n}, 0);\nvar Ap = AccountsClient.prototype; // All of the special hash URLs we support for accounts interactions\n\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];\nvar savedHash = window.location.hash;\n\nAp._initUrlMatching = function () {\n  // By default, allow the autologin process to happen.\n  this._autoLoginEnabled = true; // We only support one callback per URL.\n\n  this._accountsCallbacks = {}; // Try to match the saved value of window.location.hash.\n\n  this._attemptToMatchHash();\n}; // Separate out this functionality for testing\n\n\nAp._attemptToMatchHash = function () {\n  attemptToMatchHash(this, savedHash, defaultSuccessHandler);\n}; // Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\n\n\nfunction attemptToMatchHash(accounts, hash, success) {\n  _.each(accountsPaths, function (urlPart) {\n    var token;\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");\n    var match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1]; // XXX COMPAT WITH 0.9.3\n\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    } // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n\n\n    window.location.hash = \"\"; // Do some stuff with the token we matched\n\n    success.call(accounts, token, urlPart);\n  });\n}\n\nfunction defaultSuccessHandler(token, urlPart) {\n  var self = this; // put login in a suspended state to wait for the interaction to finish\n\n  self._autoLoginEnabled = false; // wait for other packages to register callbacks\n\n  Meteor.startup(function () {\n    // if a callback has been registered for this kind of token, call it\n    if (self._accountsCallbacks[urlPart]) {\n      self._accountsCallbacks[urlPart](token, function () {\n        self._enableAutoLogin();\n      });\n    }\n  });\n} // Export for testing\n\n\nvar AccountsTest = {\n  attemptToMatchHash: function (hash, success) {\n    return attemptToMatchHash(Accounts, hash, success);\n  }\n};\n\n// XXX these should be moved to accounts-password eventually. Right now\n// this is prevented by the need to set autoLoginEnabled=false, but in\n// some bright future we won't need to do that anymore.\n/**\n * @summary Register a function to call when a reset password link is clicked\n * in an email sent by\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onResetPasswordLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword).\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n * login process is suspended until this function is called, so that the\n * password for user A can be reset even if user B was logged in.\n * @locus Client\n */Ap.onResetPasswordLink = function (callback) {\n  if (this._accountsCallbacks[\"reset-password\"]) {\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"reset-password\"] = callback;\n}; /**\n    * @summary Register a function to call when an email verification link is\n    * clicked in an email sent by\n    * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n    * This function should be called in top-level code, not inside\n    * `Meteor.startup()`.\n    * @memberof! Accounts\n    * @name onEmailVerificationLink\n    * @param  {Function} callback The function to call. It is given two arguments:\n    *\n    * 1. `token`: An email verification token that can be passed to\n    * [`Accounts.verifyEmail`](#accounts_verifyemail).\n    * 2. `done`: A function to call when the email verification UI flow is complete.\n    * The normal login process is suspended until this function is called, so\n    * that the user can be notified that they are verifying their email before\n    * being logged in.\n    * @locus Client\n    */\n\nAp.onEmailVerificationLink = function (callback) {\n  if (this._accountsCallbacks[\"verify-email\"]) {\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"verify-email\"] = callback;\n}; /**\n    * @summary Register a function to call when an account enrollment link is\n    * clicked in an email sent by\n    * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n    * This function should be called in top-level code, not inside\n    * `Meteor.startup()`.\n    * @memberof! Accounts\n    * @name onEnrollmentLink\n    * @param  {Function} callback The function to call. It is given two arguments:\n    *\n    * 1. `token`: A password reset token that can be passed to\n    * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n    * enrolled account a password.\n    * 2. `done`: A function to call when the enrollment UI flow is complete.\n    * The normal login process is suspended until this function is called, so that\n    * user A can be enrolled even if user B was logged in.\n    * @locus Client\n    */\n\nAp.onEnrollmentLink = function (callback) {\n  if (this._accountsCallbacks[\"enroll-account\"]) {\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"enroll-account\"] = callback;\n};","map":{"version":3,"sources":["packages/accounts-base/url_client.js"],"names":["module","export","AccountsTest","AccountsClient","watch","require","v","Ap","prototype","accountsPaths","savedHash","window","location","hash","_initUrlMatching","_autoLoginEnabled","_accountsCallbacks","_attemptToMatchHash","attemptToMatchHash","defaultSuccessHandler","accounts","success","_","each","urlPart","token","tokenRegex","RegExp","match","_resetPasswordToken","_verifyEmailToken","_enrollAccountToken","call","self","Meteor","startup","_enableAutoLogin","Accounts","onResetPasswordLink","callback","_debug","onEmailVerificationLink","onEnrollmentLink"],"mappings":"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","file":"packages/accounts-base/url_client.js.map","sourcesContent":["import {AccountsClient} from \"./accounts_client.js\";\n\nvar Ap = AccountsClient.prototype;\n\n// All of the special hash URLs we support for accounts interactions\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];\n\nvar savedHash = window.location.hash;\n\nAp._initUrlMatching = function () {\n  // By default, allow the autologin process to happen.\n  this._autoLoginEnabled = true;\n\n  // We only support one callback per URL.\n  this._accountsCallbacks = {};\n\n  // Try to match the saved value of window.location.hash.\n  this._attemptToMatchHash();\n};\n\n// Separate out this functionality for testing\n\nAp._attemptToMatchHash = function () {\n  attemptToMatchHash(this, savedHash, defaultSuccessHandler);\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nfunction attemptToMatchHash(accounts, hash, success) {\n  _.each(accountsPaths, function (urlPart) {\n    var token;\n\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");\n    var match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\nfunction defaultSuccessHandler(token, urlPart) {\n  var self = this;\n\n  // put login in a suspended state to wait for the interaction to finish\n  self._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(function () {\n    // if a callback has been registered for this kind of token, call it\n    if (self._accountsCallbacks[urlPart]) {\n      self._accountsCallbacks[urlPart](token, function () {\n        self._enableAutoLogin();\n      });\n    }\n  });\n}\n\n// Export for testing\nexport var AccountsTest = {\n  attemptToMatchHash: function (hash, success) {\n    return attemptToMatchHash(Accounts, hash, success);\n  }\n};\n\n// XXX these should be moved to accounts-password eventually. Right now\n// this is prevented by the need to set autoLoginEnabled=false, but in\n// some bright future we won't need to do that anymore.\n\n/**\n * @summary Register a function to call when a reset password link is clicked\n * in an email sent by\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onResetPasswordLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword).\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n * login process is suspended until this function is called, so that the\n * password for user A can be reset even if user B was logged in.\n * @locus Client\n */\nAp.onResetPasswordLink = function (callback) {\n  if (this._accountsCallbacks[\"reset-password\"]) {\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"reset-password\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an email verification link is\n * clicked in an email sent by\n * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEmailVerificationLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: An email verification token that can be passed to\n * [`Accounts.verifyEmail`](#accounts_verifyemail).\n * 2. `done`: A function to call when the email verification UI flow is complete.\n * The normal login process is suspended until this function is called, so\n * that the user can be notified that they are verifying their email before\n * being logged in.\n * @locus Client\n */\nAp.onEmailVerificationLink = function (callback) {\n  if (this._accountsCallbacks[\"verify-email\"]) {\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"verify-email\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an account enrollment link is\n * clicked in an email sent by\n * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEnrollmentLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n * enrolled account a password.\n * 2. `done`: A function to call when the enrollment UI flow is complete.\n * The normal login process is suspended until this function is called, so that\n * user A can be enrolled even if user B was logged in.\n * @locus Client\n */\nAp.onEnrollmentLink = function (callback) {\n  if (this._accountsCallbacks[\"enroll-account\"]) {\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"enroll-account\"] = callback;\n};\n"]},"hash":"5f66663863d078909159653fdfbe729cc9b00f6a"}
