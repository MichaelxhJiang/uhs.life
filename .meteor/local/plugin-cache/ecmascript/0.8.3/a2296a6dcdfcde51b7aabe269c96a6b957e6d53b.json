{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/minimongo/minimongo_tests.js","filenameRelative":"packages/minimongo/minimongo_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/minimongo/minimongo_tests.js.map","sourceFileName":"packages/minimongo/minimongo_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"minimongo_tests"},"ignored":false,"code":"Tinytest.add('minimongo - wrapTransform', function (test) {\n  var wrap = LocalCollection.wrapTransform; // Transforming no function gives falsey.\n\n  test.isFalse(wrap(undefined));\n  test.isFalse(wrap(null)); // It's OK if you don't change the ID.\n\n  var validTransform = function (doc) {\n    delete doc.x;\n    doc.y = 42;\n\n    doc.z = function () {\n      return 43;\n    };\n\n    return doc;\n  };\n\n  var transformed = wrap(validTransform)({\n    _id: 'asdf',\n    x: 54\n  });\n  test.equal(Object.keys(transformed), ['_id', 'y', 'z']);\n  test.equal(transformed.y, 42);\n  test.equal(transformed.z(), 43); // Ensure that ObjectIDs work (even if the _ids in question are not ===-equal)\n\n  var oid1 = new MongoID.ObjectID();\n  var oid2 = new MongoID.ObjectID(oid1.toHexString());\n  test.equal(wrap(function () {\n    return {\n      _id: oid2\n    };\n  })({\n    _id: oid1\n  }), {\n    _id: oid2\n  }); // transform functions must return objects\n\n  var invalidObjects = ['asdf', new MongoID.ObjectID(), false, null, true, 27, [123], /adsf/, new Date(), function () {}, undefined];\n  invalidObjects.forEach(function (invalidObject) {\n    var wrapped = wrap(function () {\n      return invalidObject;\n    });\n    test.throws(function () {\n      wrapped({\n        _id: 'asdf'\n      });\n    });\n  }, /transform must return object/); // transform functions may not change _ids\n\n  var wrapped = wrap(function (doc) {\n    doc._id = 'x';\n    return doc;\n  });\n  test.throws(function () {\n    wrapped({\n      _id: 'y'\n    });\n  }, /can't have different _id/); // transform functions may remove _ids\n\n  test.equal({\n    _id: 'a',\n    x: 2\n  }, wrap(function (d) {\n    delete d._id;\n    return d;\n  })({\n    _id: 'a',\n    x: 2\n  })); // test that wrapped transform functions are nonreactive\n\n  var unwrapped = function (doc) {\n    test.isFalse(Tracker.active);\n    return doc;\n  };\n\n  var handle = Tracker.autorun(function () {\n    test.isTrue(Tracker.active);\n    wrap(unwrapped)({\n      _id: 'xxx'\n    });\n  });\n  handle.stop();\n});","map":{"version":3,"sources":["packages/minimongo/minimongo_tests.js"],"names":["Tinytest","add","wrap","LocalCollection","wrapTransform","test","isFalse","undefined","validTransform","doc","x","y","z","transformed","_id","equal","Object","keys","oid1","MongoID","ObjectID","oid2","toHexString","invalidObjects","Date","forEach","wrapped","invalidObject","throws","d","unwrapped","Tracker","active","handle","autorun","isTrue","stop"],"mappings":"AAAAA,SAASC,GAAT,CAAa,2BAAb,EAA0C,gBAAQ;AAChD,MAAMC,OAAOC,gBAAgBC,aAA7B,CADgD,CAGhD;;AACAC,OAAKC,OAAL,CAAaJ,KAAKK,SAAL,CAAb;AACAF,OAAKC,OAAL,CAAaJ,KAAK,IAAL,CAAb,EALgD,CAOhD;;AACA,MAAMM,iBAAiB,eAAO;AAC5B,WAAOC,IAAIC,CAAX;AACAD,QAAIE,CAAJ,GAAQ,EAAR;;AACAF,QAAIG,CAAJ,GAAQ;AAAA,aAAM,EAAN;AAAA,KAAR;;AACA,WAAOH,GAAP;AACD,GALD;;AAMA,MAAMI,cAAcX,KAAKM,cAAL,EAAqB;AAACM,SAAK,MAAN;AAAcJ,OAAG;AAAjB,GAArB,CAApB;AACAL,OAAKU,KAAL,CAAWC,OAAOC,IAAP,CAAYJ,WAAZ,CAAX,EAAqC,CAAC,KAAD,EAAQ,GAAR,EAAa,GAAb,CAArC;AACAR,OAAKU,KAAL,CAAWF,YAAYF,CAAvB,EAA0B,EAA1B;AACAN,OAAKU,KAAL,CAAWF,YAAYD,CAAZ,EAAX,EAA4B,EAA5B,EAjBgD,CAmBhD;;AACA,MAAMM,OAAO,IAAIC,QAAQC,QAAZ,EAAb;AACA,MAAMC,OAAO,IAAIF,QAAQC,QAAZ,CAAqBF,KAAKI,WAAL,EAArB,CAAb;AACAjB,OAAKU,KAAL,CAAWb,KAAK;AAAA,WAAO;AACrBY,WAAKO;AADgB,KAAP;AAAA,GAAL,EAEP;AAACP,SAAKI;AAAN,GAFO,CAAX,EAGA;AAACJ,SAAKO;AAAN,GAHA,EAtBgD,CA2BhD;;AACA,MAAME,iBAAiB,CACrB,MADqB,EACb,IAAIJ,QAAQC,QAAZ,EADa,EACW,KADX,EACkB,IADlB,EACwB,IADxB,EAErB,EAFqB,EAEjB,CAAC,GAAD,CAFiB,EAEV,MAFU,EAEF,IAAII,IAAJ,EAFE,EAEQ,YAAM,CAAE,CAFhB,EAEkBjB,SAFlB,CAAvB;AAIAgB,iBAAeE,OAAf,CAAuB,yBAAiB;AACtC,QAAMC,UAAUxB,KAAK;AAAA,aAAMyB,aAAN;AAAA,KAAL,CAAhB;AACAtB,SAAKuB,MAAL,CAAY,YAAM;AAChBF,cAAQ;AAACZ,aAAK;AAAN,OAAR;AACD,KAFD;AAGD,GALD,EAKG,8BALH,EAhCgD,CAuChD;;AACA,MAAMY,UAAUxB,KAAK,eAAO;AAAEO,QAAIK,GAAJ,GAAU,GAAV;AAAe,WAAOL,GAAP;AAAa,GAA1C,CAAhB;AACAJ,OAAKuB,MAAL,CAAY,YAAM;AAChBF,YAAQ;AAACZ,WAAK;AAAN,KAAR;AACD,GAFD,EAEG,0BAFH,EAzCgD,CA6ChD;;AACAT,OAAKU,KAAL,CAAW;AAACD,SAAK,GAAN;AAAWJ,OAAG;AAAd,GAAX,EACER,KAAK,aAAK;AAAC,WAAO2B,EAAEf,GAAT;AAAc,WAAOe,CAAP;AAAU,GAAnC,EAAqC;AAACf,SAAK,GAAN;AAAWJ,OAAG;AAAd,GAArC,CADF,EA9CgD,CAiDhD;;AACA,MAAMoB,YAAY,eAAO;AACvBzB,SAAKC,OAAL,CAAayB,QAAQC,MAArB;AACA,WAAOvB,GAAP;AACD,GAHD;;AAIA,MAAMwB,SAASF,QAAQG,OAAR,CAAgB,YAAM;AACnC7B,SAAK8B,MAAL,CAAYJ,QAAQC,MAApB;AACA9B,SAAK4B,SAAL,EAAgB;AAAChB,WAAK;AAAN,KAAhB;AACD,GAHc,CAAf;AAIAmB,SAAOG,IAAP;AACD,CA3DD","file":"packages/minimongo/minimongo_tests.js.map","sourcesContent":["Tinytest.add('minimongo - wrapTransform', test => {\n  const wrap = LocalCollection.wrapTransform;\n\n  // Transforming no function gives falsey.\n  test.isFalse(wrap(undefined));\n  test.isFalse(wrap(null));\n\n  // It's OK if you don't change the ID.\n  const validTransform = doc => {\n    delete doc.x;\n    doc.y = 42;\n    doc.z = () => 43;\n    return doc;\n  };\n  const transformed = wrap(validTransform)({_id: 'asdf', x: 54});\n  test.equal(Object.keys(transformed), ['_id', 'y', 'z']);\n  test.equal(transformed.y, 42);\n  test.equal(transformed.z(), 43);\n\n  // Ensure that ObjectIDs work (even if the _ids in question are not ===-equal)\n  const oid1 = new MongoID.ObjectID();\n  const oid2 = new MongoID.ObjectID(oid1.toHexString());\n  test.equal(wrap(() => ({\n    _id: oid2,\n  }))({_id: oid1}),\n  {_id: oid2});\n\n  // transform functions must return objects\n  const invalidObjects = [\n    'asdf', new MongoID.ObjectID(), false, null, true,\n    27, [123], /adsf/, new Date, () => {}, undefined,\n  ];\n  invalidObjects.forEach(invalidObject => {\n    const wrapped = wrap(() => invalidObject);\n    test.throws(() => {\n      wrapped({_id: 'asdf'});\n    });\n  }, /transform must return object/);\n\n  // transform functions may not change _ids\n  const wrapped = wrap(doc => { doc._id = 'x'; return doc; });\n  test.throws(() => {\n    wrapped({_id: 'y'});\n  }, /can't have different _id/);\n\n  // transform functions may remove _ids\n  test.equal({_id: 'a', x: 2},\n    wrap(d => {delete d._id; return d;})({_id: 'a', x: 2}));\n\n  // test that wrapped transform functions are nonreactive\n  const unwrapped = doc => {\n    test.isFalse(Tracker.active);\n    return doc;\n  };\n  const handle = Tracker.autorun(() => {\n    test.isTrue(Tracker.active);\n    wrap(unwrapped)({_id: 'xxx'});\n  });\n  handle.stop();\n});\n"]},"hash":"a2296a6dcdfcde51b7aabe269c96a6b957e6d53b"}
