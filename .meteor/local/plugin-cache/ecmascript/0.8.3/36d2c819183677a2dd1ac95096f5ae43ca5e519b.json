{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"../../api/posts/posts.js","imported":["Posts"],"specifiers":[{"kind":"named","imported":"Posts","local":"Posts"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/startup/server/algoliaPost.js","filenameRelative":"imports/startup/server/algoliaPost.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/startup/server/algoliaPost.js.map","sourceFileName":"imports/startup/server/algoliaPost.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"algoliaPost"},"ignored":false,"code":"var Posts = void 0;\nmodule.watch(require(\"../../api/posts/posts.js\"), {\n    Posts: function (v) {\n        Posts = v;\n    }\n}, 0);\n//Server side method to be called from client to post announcement\n// api key that connects the client side to Algolia's server\nvar client = AlgoliaSearch(\"GJDCY9DKEW\", \"31f60dc3cc7926270934909c81f867ee\"); // select indice (collection) of data to be accesed. In this case it would be the announcements\n\nvar index = client.initIndex('announcement');\nindex.setSettings({\n    searchableAttributes: ['headline', 'content', 'type', 'tags', 'categories', 'subType']\n});\nMeteor.methods({\n    /**\r\n    @params title : string; text: string; fileType: string; textFirst: boolean\r\n    **/'postTextImageAlgolia': function (postId) {\n        var json = Posts.findOne({\n            '_id': postId\n        });\n        var newJson = {\n            type: json.type,\n            subType: json.subType,\n            headline: json.headline,\n            content: json.content,\n            tags: json.tags,\n            categories: json.categories,\n            imgId: json.imgId //adds object to the indice announcement\n\n        };\n        index.addObject(newJson, Meteor.bindEnvironment(function (err, content) {\n            //error catch for algolia issues\n            if (err) {\n                console.error('Algolia returned an error', err);\n            } else {\n                //prints the announcement posted\n                console.log(content);\n                Posts.update({\n                    '_id': postId\n                }, {\n                    $set: {\n                        'meta.algoliaId': content.objectID\n                    }\n                }, function (err, response) {\n                    if (err) {\n                        console.log(err);\n                    } else {\n                        console.log(response);\n                    }\n                });\n            }\n        }));\n    },\n    'postTextAlgolia': function (postId) {\n        var json = Posts.findOne({\n            '_id': postId\n        });\n        var newJson = {\n            type: json.type,\n            subType: json.subType,\n            headline: json.headline,\n            content: json.content,\n            tags: json.tags,\n            categories: json.categories //adds object to the indice announcement\n\n        };\n        index.addObject(newJson, Meteor.bindEnvironment(function (err, content) {\n            //error catch for algolia issues\n            if (err) {\n                console.error('Algolia returned an error', err);\n            } else {\n                //prints the announcement posted\n                console.log(content);\n                Posts.update({\n                    '_id': postId\n                }, {\n                    $set: {\n                        'meta.algoliaId': content.objectID\n                    }\n                }, function (err, response) {\n                    if (err) {\n                        console.log(err);\n                    } else {\n                        console.log(response);\n                    }\n                });\n            }\n        }));\n    },\n    'postImageAlgolia': function (postId) {\n        var json = Posts.findOne({\n            '_id': postId\n        });\n        var newJson = {\n            type: json.type,\n            subType: json.subType,\n            headline: json.headline,\n            tags: json.tags,\n            categories: json.categories,\n            imgId: json.imgId //adds object to the indice announcement\n\n        };\n        index.addObject(newJson, Meteor.bindEnvironment(function (err, content) {\n            //error catch for algolia issues\n            if (err) {\n                console.error('Algolia returned an error', err);\n            } else {\n                //prints the announcement posted\n                console.log(content);\n                Posts.update({\n                    '_id': postId\n                }, {\n                    $set: {\n                        'meta.algoliaId': content.objectID\n                    }\n                }, function (err, response) {\n                    if (err) {\n                        console.log(err);\n                    } else {\n                        console.log(response);\n                    }\n                });\n            }\n        }));\n    },\n    'postBlogAlgolia': function (postId) {\n        var json = Posts.findOne({\n            '_id': postId\n        });\n        var newJson = {\n            type: json.type,\n            headline: json.title,\n            subType: json.subtitle,\n            content: json.content,\n            tags: json.tags,\n            categories: json.categories,\n            imgId: json.imgId //adds object to the indice announcement\n\n        };\n        index.addObjects(newJson, Meteor.bindEnvironment(function (err, content) {\n            //error catch for algolia issues\n            if (err) {\n                console.error('Algolia returned an error', err);\n            } else {\n                //prints the announcement posted\n                Posts.update({\n                    '_id': postId\n                }, {\n                    $set: {\n                        'meta.algoliaId': content.objectID\n                    }\n                }, function (err, response) {\n                    if (err) {\n                        console.log(err);\n                    } else {\n                        console.log(response);\n                    }\n                });\n                console.log(content);\n            }\n        }));\n    }\n});","map":{"version":3,"sources":["imports/startup/server/algoliaPost.js"],"names":["Posts","module","watch","require","v","client","AlgoliaSearch","index","initIndex","setSettings","searchableAttributes","Meteor","methods","postId","json","findOne","newJson","type","subType","headline","content","tags","categories","imgId","addObject","bindEnvironment","err","console","error","log","update","$set","objectID","response","title","subtitle","addObjects"],"mappings":"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","file":"imports/startup/server/algoliaPost.js.map","sourcesContent":["//Server side method to be called from client to post announcement\r\n\r\n// api key that connects the client side to Algolia's server\r\nvar client = AlgoliaSearch(\"GJDCY9DKEW\", \"31f60dc3cc7926270934909c81f867ee\");\r\n\r\n// select indice (collection) of data to be accesed. In this case it would be the announcements\r\nvar index = client.initIndex('announcement');\r\n\r\nindex.setSettings({\r\n    searchableAttributes: [\r\n        'headline',\r\n        'content',\r\n        'type',\r\n        'tags',\r\n        'categories',\r\n        'subType'\r\n    ]\r\n});\r\n\r\nimport {Posts} from '../../api/posts/posts.js';\r\n\r\nMeteor.methods({\r\n    /**\r\n    @params title : string; text: string; fileType: string; textFirst: boolean\r\n    **/\r\n    'postTextImageAlgolia' : function(postId) {\r\n        let json = Posts.findOne({'_id':postId});\r\n\r\n        let newJson = {\r\n            type: json.type,\r\n            subType: json.subType,\r\n            headline: json.headline,\r\n            content: json.content,\r\n            tags: json.tags,\r\n            categories: json.categories,\r\n            imgId: json.imgId\r\n        }\r\n        //adds object to the indice announcement\r\n        index.addObject(newJson, Meteor.bindEnvironment(function(err, content) {\r\n\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error('Algolia returned an error', err);\r\n            } else {\r\n                //prints the announcement posted\r\n                console.log(content);\r\n                Posts.update({'_id': postId}, { $set: {'meta.algoliaId':content.objectID}}, function(err, response) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    } else {\r\n                        console.log(response);\r\n                    }\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    'postTextAlgolia' : function(postId) {\r\n        let json = Posts.findOne({'_id':postId});\r\n\r\n        let newJson = {\r\n            type: json.type,\r\n            subType: json.subType,\r\n            headline: json.headline,\r\n            content: json.content,\r\n            tags: json.tags,\r\n            categories: json.categories,\r\n        }\r\n\r\n        //adds object to the indice announcement\r\n        index.addObject(newJson, Meteor.bindEnvironment(function(err, content) {\r\n\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error('Algolia returned an error', err);\r\n            } else {\r\n                //prints the announcement posted\r\n                console.log(content);\r\n                Posts.update({'_id':postId}, { $set: {'meta.algoliaId':content.objectID}}, function(err, response) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    } else {\r\n                        console.log(response);\r\n                    }\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    'postImageAlgolia' : function(postId) {\r\n        let json = Posts.findOne({'_id':postId});\r\n\r\n        let newJson = {\r\n            type: json.type,\r\n            subType: json.subType,\r\n            headline: json.headline,\r\n            tags: json.tags,\r\n            categories: json.categories,\r\n            imgId: json.imgId\r\n        }\r\n\r\n        //adds object to the indice announcement\r\n        index.addObject(newJson, Meteor.bindEnvironment(function(err, content) {\r\n\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error('Algolia returned an error', err);\r\n            } else {\r\n                //prints the announcement posted\r\n                console.log(content);\r\n                Posts.update({'_id':postId}, { $set: {'meta.algoliaId':content.objectID}}, function(err, response) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    } else {\r\n                        console.log(response);\r\n                    }\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    'postBlogAlgolia' : function(postId) {\r\n        let json = Posts.findOne({'_id':postId});\r\n        let newJson = {\r\n            type: json.type,\r\n            headline: json.title,\r\n            subType: json.subtitle,\r\n            content: json.content,\r\n            tags: json.tags,\r\n            categories: json.categories,\r\n            imgId: json.imgId\r\n        }\r\n        //adds object to the indice announcement\r\n        index.addObjects(newJson, Meteor.bindEnvironment(function(err, content) {\r\n\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error('Algolia returned an error', err);\r\n            } else {\r\n                //prints the announcement posted\r\n                Posts.update({'_id':postId}, { $set: {'meta.algoliaId':content.objectID}}, function(err, response) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    } else {\r\n                        console.log(response);\r\n                    }\r\n                });\r\n                console.log(content);\r\n\r\n            }\r\n        }));\r\n    },\r\n});\r\n"]},"hash":"36d2c819183677a2dd1ac95096f5ae43ca5e519b"}
