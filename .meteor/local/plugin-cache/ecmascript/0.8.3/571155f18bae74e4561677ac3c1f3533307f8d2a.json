{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/ddp-server/crossbar_tests.js","filenameRelative":"packages/ddp-server/crossbar_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/ddp-server/crossbar_tests.js.map","sourceFileName":"packages/ddp-server/crossbar_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"crossbar_tests"},"ignored":false,"code":"// White box tests of invalidation crossbar matching function.\n// Note: the current crossbar match function is designed specifically\n// to ensure that a modification that targets a specific ID does not\n// notify a query that is watching a different specific ID. (And to\n// keep separate collections separate.) Other than that, there's no\n// deep meaning to the matching function, and it could be changed later\n// as long as it preserves that property.\nTinytest.add('livedata - crossbar', function (test) {\n  var crossbar = new DDPServer._Crossbar();\n  test.isTrue(crossbar._matches({\n    collection: \"C\"\n  }, {\n    collection: \"C\"\n  }));\n  test.isTrue(crossbar._matches({\n    collection: \"C\",\n    id: \"X\"\n  }, {\n    collection: \"C\"\n  }));\n  test.isTrue(crossbar._matches({\n    collection: \"C\"\n  }, {\n    collection: \"C\",\n    id: \"X\"\n  }));\n  test.isTrue(crossbar._matches({\n    collection: \"C\",\n    id: \"X\"\n  }, {\n    collection: \"C\"\n  }));\n  test.isFalse(crossbar._matches({\n    collection: \"C\",\n    id: \"X\"\n  }, {\n    collection: \"C\",\n    id: \"Y\"\n  })); // Test that stopped listens definitely don't fire.\n\n  var calledFirst = false;\n  var calledSecond = false;\n  var trigger = {\n    collection: \"C\"\n  };\n  var secondHandle;\n  crossbar.listen(trigger, function (notification) {\n    // This test assumes that listeners will be called in the order\n    // registered. It's not wrong for the crossbar to do something different,\n    // but the test won't be valid in that case, so make it fail so we notice.\n    calledFirst = true;\n\n    if (calledSecond) {\n      test.fail({\n        type: \"test_assumption_failed\",\n        message: \"test assumed that listeners would be called in the order registered\"\n      });\n    } else {\n      secondHandle.stop();\n    }\n  });\n  secondHandle = crossbar.listen(trigger, function (notification) {\n    // This should not get invoked, because it should be stopped by the other\n    // listener!\n    calledSecond = true;\n  });\n  crossbar.fire(trigger);\n  test.isTrue(calledFirst);\n  test.isFalse(calledSecond);\n});","map":{"version":3,"sources":["packages/ddp-server/crossbar_tests.js"],"names":["Tinytest","add","test","crossbar","DDPServer","_Crossbar","isTrue","_matches","collection","id","isFalse","calledFirst","calledSecond","trigger","secondHandle","listen","notification","fail","type","message","stop","fire"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,SAASC,GAAT,CAAa,qBAAb,EAAoC,UAAUC,IAAV,EAAgB;AAClD,MAAIC,WAAW,IAAIC,UAAUC,SAAd,EAAf;AACAH,OAAKI,MAAL,CAAYH,SAASI,QAAT,CAAkB;AAACC,gBAAY;AAAb,GAAlB,EACkB;AAACA,gBAAY;AAAb,GADlB,CAAZ;AAEAN,OAAKI,MAAL,CAAYH,SAASI,QAAT,CAAkB;AAACC,gBAAY,GAAb;AAAkBC,QAAI;AAAtB,GAAlB,EACkB;AAACD,gBAAY;AAAb,GADlB,CAAZ;AAEAN,OAAKI,MAAL,CAAYH,SAASI,QAAT,CAAkB;AAACC,gBAAY;AAAb,GAAlB,EACkB;AAACA,gBAAY,GAAb;AAAkBC,QAAI;AAAtB,GADlB,CAAZ;AAEAP,OAAKI,MAAL,CAAYH,SAASI,QAAT,CAAkB;AAACC,gBAAY,GAAb;AAAkBC,QAAI;AAAtB,GAAlB,EACkB;AAACD,gBAAY;AAAb,GADlB,CAAZ;AAGAN,OAAKQ,OAAL,CAAaP,SAASI,QAAT,CAAkB;AAACC,gBAAY,GAAb;AAAkBC,QAAI;AAAtB,GAAlB,EACkB;AAACD,gBAAY,GAAb;AAAkBC,QAAI;AAAtB,GADlB,CAAb,EAXkD,CAclD;;AACA,MAAIE,cAAc,KAAlB;AACA,MAAIC,eAAe,KAAnB;AACA,MAAIC,UAAU;AAACL,gBAAY;AAAb,GAAd;AACA,MAAIM,YAAJ;AACAX,WAASY,MAAT,CAAgBF,OAAhB,EAAyB,UAAUG,YAAV,EAAwB;AAC/C;AACA;AACA;AACAL,kBAAc,IAAd;;AACA,QAAIC,YAAJ,EAAkB;AAChBV,WAAKe,IAAL,CAAU;AACRC,cAAM,wBADE;AAERC,iBAAS;AAFD,OAAV;AAID,KALD,MAKO;AACLL,mBAAaM,IAAb;AACD;AACF,GAbD;AAcAN,iBAAeX,SAASY,MAAT,CAAgBF,OAAhB,EAAyB,UAAUG,YAAV,EAAwB;AAC9D;AACA;AACAJ,mBAAe,IAAf;AACD,GAJc,CAAf;AAKAT,WAASkB,IAAT,CAAcR,OAAd;AACAX,OAAKI,MAAL,CAAYK,WAAZ;AACAT,OAAKQ,OAAL,CAAaE,YAAb;AACD,CAzCD","file":"packages/ddp-server/crossbar_tests.js.map","sourcesContent":["// White box tests of invalidation crossbar matching function.\n// Note: the current crossbar match function is designed specifically\n// to ensure that a modification that targets a specific ID does not\n// notify a query that is watching a different specific ID. (And to\n// keep separate collections separate.) Other than that, there's no\n// deep meaning to the matching function, and it could be changed later\n// as long as it preserves that property.\nTinytest.add('livedata - crossbar', function (test) {\n  var crossbar = new DDPServer._Crossbar;\n  test.isTrue(crossbar._matches({collection: \"C\"},\n                                {collection: \"C\"}));\n  test.isTrue(crossbar._matches({collection: \"C\", id: \"X\"},\n                                {collection: \"C\"}));\n  test.isTrue(crossbar._matches({collection: \"C\"},\n                                {collection: \"C\", id: \"X\"}));\n  test.isTrue(crossbar._matches({collection: \"C\", id: \"X\"},\n                                {collection: \"C\"}));\n\n  test.isFalse(crossbar._matches({collection: \"C\", id: \"X\"},\n                                 {collection: \"C\", id: \"Y\"}));\n\n  // Test that stopped listens definitely don't fire.\n  var calledFirst = false;\n  var calledSecond = false;\n  var trigger = {collection: \"C\"};\n  var secondHandle;\n  crossbar.listen(trigger, function (notification) {\n    // This test assumes that listeners will be called in the order\n    // registered. It's not wrong for the crossbar to do something different,\n    // but the test won't be valid in that case, so make it fail so we notice.\n    calledFirst = true;\n    if (calledSecond) {\n      test.fail({\n        type: \"test_assumption_failed\",\n        message: \"test assumed that listeners would be called in the order registered\"\n      });\n    } else {\n      secondHandle.stop();\n    }\n  });\n  secondHandle = crossbar.listen(trigger, function (notification) {\n    // This should not get invoked, because it should be stopped by the other\n    // listener!\n    calledSecond = true;\n  });\n  crossbar.fire(trigger);\n  test.isTrue(calledFirst);\n  test.isFalse(calledSecond);\n});\n"]},"hash":"571155f18bae74e4561677ac3c1f3533307f8d2a"}
