{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/mongo/doc_fetcher_tests.js","filenameRelative":"packages/mongo/doc_fetcher_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/mongo/doc_fetcher_tests.js.map","sourceFileName":"packages/mongo/doc_fetcher_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"doc_fetcher_tests"},"ignored":false,"code":"var Fiber = Npm.require('fibers');\n\nvar Future = Npm.require('fibers/future');\n\ntestAsyncMulti(\"mongo-livedata - doc fetcher\", [function (test, expect) {\n  var self = this;\n  var collName = \"docfetcher-\" + Random.id();\n  var collection = new Mongo.Collection(collName);\n  var id1 = collection.insert({\n    x: 1\n  });\n  var id2 = collection.insert({\n    y: 2\n  });\n  var fetcher = new MongoTest.DocFetcher(MongoInternals.defaultRemoteCollectionDriver().mongo); // Test basic operation.\n\n  fetcher.fetch(collName, id1, Random.id(), expect(null, {\n    _id: id1,\n    x: 1\n  }));\n  fetcher.fetch(collName, \"nonexistent!\", Random.id(), expect(null, null));\n  var fetched = false;\n  var cacheKey = Random.id();\n  var expected = {\n    _id: id2,\n    y: 2\n  };\n  fetcher.fetch(collName, id2, cacheKey, expect(function (e, d) {\n    fetched = true;\n    test.isFalse(e);\n    test.equal(d, expected);\n  })); // The fetcher yields.\n\n  test.isFalse(fetched); // Now ask for another document with the same cache key. Because a fetch for\n  // that cache key is in flight, we will get the other fetch's document, not\n  // this random document.\n\n  fetcher.fetch(collName, Random.id(), cacheKey, expect(function (e, d) {\n    test.isFalse(e);\n    test.equal(d, expected);\n  }));\n}]);","map":{"version":3,"sources":["packages/mongo/doc_fetcher_tests.js"],"names":["Fiber","Npm","require","Future","testAsyncMulti","test","expect","self","collName","Random","id","collection","Mongo","Collection","id1","insert","x","id2","y","fetcher","MongoTest","DocFetcher","MongoInternals","defaultRemoteCollectionDriver","mongo","fetch","_id","fetched","cacheKey","expected","e","d","isFalse","equal"],"mappings":"AAAA,IAAIA,QAAQC,IAAIC,OAAJ,CAAY,QAAZ,CAAZ;;AACA,IAAIC,SAASF,IAAIC,OAAJ,CAAY,eAAZ,CAAb;;AAEAE,eAAe,8BAAf,EAA+C,CAC7C,UAAUC,IAAV,EAAgBC,MAAhB,EAAwB;AACtB,MAAIC,OAAO,IAAX;AACA,MAAIC,WAAW,gBAAgBC,OAAOC,EAAP,EAA/B;AACA,MAAIC,aAAa,IAAIC,MAAMC,UAAV,CAAqBL,QAArB,CAAjB;AACA,MAAIM,MAAMH,WAAWI,MAAX,CAAkB;AAACC,OAAG;AAAJ,GAAlB,CAAV;AACA,MAAIC,MAAMN,WAAWI,MAAX,CAAkB;AAACG,OAAG;AAAJ,GAAlB,CAAV;AAEA,MAAIC,UAAU,IAAIC,UAAUC,UAAd,CACZC,eAAeC,6BAAf,GAA+CC,KADnC,CAAd,CAPsB,CAUtB;;AACAL,UAAQM,KAAR,CAAcjB,QAAd,EAAwBM,GAAxB,EAA6BL,OAAOC,EAAP,EAA7B,EAA0CJ,OAAO,IAAP,EAAa;AAACoB,SAAKZ,GAAN;AAAWE,OAAG;AAAd,GAAb,CAA1C;AACAG,UAAQM,KAAR,CAAcjB,QAAd,EAAwB,cAAxB,EAAwCC,OAAOC,EAAP,EAAxC,EAAqDJ,OAAO,IAAP,EAAa,IAAb,CAArD;AAEA,MAAIqB,UAAU,KAAd;AACA,MAAIC,WAAWnB,OAAOC,EAAP,EAAf;AACA,MAAImB,WAAW;AAACH,SAAKT,GAAN;AAAWC,OAAG;AAAd,GAAf;AACAC,UAAQM,KAAR,CAAcjB,QAAd,EAAwBS,GAAxB,EAA6BW,QAA7B,EAAuCtB,OAAO,UAAUwB,CAAV,EAAaC,CAAb,EAAgB;AAC5DJ,cAAU,IAAV;AACAtB,SAAK2B,OAAL,CAAaF,CAAb;AACAzB,SAAK4B,KAAL,CAAWF,CAAX,EAAcF,QAAd;AACD,GAJsC,CAAvC,EAjBsB,CAsBtB;;AACAxB,OAAK2B,OAAL,CAAaL,OAAb,EAvBsB,CAyBtB;AACA;AACA;;AACAR,UAAQM,KAAR,CAAcjB,QAAd,EAAwBC,OAAOC,EAAP,EAAxB,EAAqCkB,QAArC,EAA+CtB,OAAO,UAAUwB,CAAV,EAAaC,CAAb,EAAgB;AACpE1B,SAAK2B,OAAL,CAAaF,CAAb;AACAzB,SAAK4B,KAAL,CAAWF,CAAX,EAAcF,QAAd;AACD,GAH8C,CAA/C;AAID,CAjC4C,CAA/C","file":"packages/mongo/doc_fetcher_tests.js.map","sourcesContent":["var Fiber = Npm.require('fibers');\nvar Future = Npm.require('fibers/future');\n\ntestAsyncMulti(\"mongo-livedata - doc fetcher\", [\n  function (test, expect) {\n    var self = this;\n    var collName = \"docfetcher-\" + Random.id();\n    var collection = new Mongo.Collection(collName);\n    var id1 = collection.insert({x: 1});\n    var id2 = collection.insert({y: 2});\n\n    var fetcher = new MongoTest.DocFetcher(\n      MongoInternals.defaultRemoteCollectionDriver().mongo);\n\n    // Test basic operation.\n    fetcher.fetch(collName, id1, Random.id(), expect(null, {_id: id1, x: 1}));\n    fetcher.fetch(collName, \"nonexistent!\", Random.id(), expect(null, null));\n\n    var fetched = false;\n    var cacheKey = Random.id();\n    var expected = {_id: id2, y: 2};\n    fetcher.fetch(collName, id2, cacheKey, expect(function (e, d) {\n      fetched = true;\n      test.isFalse(e);\n      test.equal(d, expected);\n    }));\n    // The fetcher yields.\n    test.isFalse(fetched);\n\n    // Now ask for another document with the same cache key. Because a fetch for\n    // that cache key is in flight, we will get the other fetch's document, not\n    // this random document.\n    fetcher.fetch(collName, Random.id(), cacheKey, expect(function (e, d) {\n      test.isFalse(e);\n      test.equal(d, expected);\n    }));\n  }\n]);\n"]},"hash":"12be580620b4923759ac1772befda643152d9233"}
