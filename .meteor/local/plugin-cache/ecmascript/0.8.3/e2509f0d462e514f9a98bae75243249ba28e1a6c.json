{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"fs","imported":["writeFileSync","unlinkSync","statSync"],"specifiers":[{"kind":"named","imported":"writeFileSync","local":"writeFileSync"},{"kind":"named","imported":"unlinkSync","local":"unlinkSync"},{"kind":"named","imported":"statSync","local":"statSync"}]},{"source":"net","imported":["createServer"],"specifiers":[{"kind":"named","imported":"createServer","local":"createServer"}]},{"source":"./socket_file.js","imported":["removeExistingSocketFile","registerSocketFileCleanup"],"specifiers":[{"kind":"named","imported":"removeExistingSocketFile","local":"removeExistingSocketFile"},{"kind":"named","imported":"registerSocketFileCleanup","local":"registerSocketFileCleanup"}]},{"source":"events","imported":["EventEmitter"],"specifiers":[{"kind":"named","imported":"EventEmitter","local":"EventEmitter"}]},{"source":"os","imported":["tmpdir"],"specifiers":[{"kind":"named","imported":"tmpdir","local":"tmpdir"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/webapp/socket_file_tests.js","filenameRelative":"packages/webapp/socket_file_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/webapp/socket_file_tests.js.map","sourceFileName":"packages/webapp/socket_file_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"socket_file_tests"},"ignored":false,"code":"var writeFileSync = void 0,\n    unlinkSync = void 0,\n    statSync = void 0;\nmodule.watch(require(\"fs\"), {\n  writeFileSync: function (v) {\n    writeFileSync = v;\n  },\n  unlinkSync: function (v) {\n    unlinkSync = v;\n  },\n  statSync: function (v) {\n    statSync = v;\n  }\n}, 0);\nvar createServer = void 0;\nmodule.watch(require(\"net\"), {\n  createServer: function (v) {\n    createServer = v;\n  }\n}, 1);\nvar removeExistingSocketFile = void 0,\n    registerSocketFileCleanup = void 0;\nmodule.watch(require(\"./socket_file.js\"), {\n  removeExistingSocketFile: function (v) {\n    removeExistingSocketFile = v;\n  },\n  registerSocketFileCleanup: function (v) {\n    registerSocketFileCleanup = v;\n  }\n}, 2);\nvar EventEmitter = void 0;\nmodule.watch(require(\"events\"), {\n  EventEmitter: function (v) {\n    EventEmitter = v;\n  }\n}, 3);\nvar tmpdir = void 0;\nmodule.watch(require(\"os\"), {\n  tmpdir: function (v) {\n    tmpdir = v;\n  }\n}, 4);\nvar testSocketFile = tmpdir() + \"/socket_file_tests\";\n\nvar removeTestSocketFile = function () {\n  try {\n    unlinkSync(testSocketFile);\n  } catch (error) {// Do nothing\n  }\n};\n\nTinytest.add(\"socket file - don't remove a non-socket file\", function (test) {\n  writeFileSync(testSocketFile);\n  test.throws(function () {\n    removeExistingSocketFile(testSocketFile);\n  }, /An existing file was found/);\n  removeTestSocketFile();\n});\nTinytest.addAsync('socket file - remove a previously existing socket file', function (test, done) {\n  removeTestSocketFile();\n  var server = createServer();\n  server.listen(testSocketFile);\n  server.on('listening', Meteor.bindEnvironment(function () {\n    test.isNotUndefined(statSync(testSocketFile));\n    removeExistingSocketFile(testSocketFile);\n    test.throws(function () {\n      statSync(testSocketFile);\n    }, /ENOENT/);\n    server.close();\n    done();\n  }));\n});\nTinytest.add('socket file - no existing socket file, nothing to remove', function (test) {\n  removeTestSocketFile();\n  removeExistingSocketFile(testSocketFile);\n});\nTinytest.add('socket file - remove socket file on exit', function (test) {\n  var testEventEmitter = new EventEmitter();\n  registerSocketFileCleanup(testSocketFile, testEventEmitter);\n  ['exit', 'SIGINT', 'SIGHUP', 'SIGTERM'].forEach(function (signal) {\n    writeFileSync(testSocketFile);\n    test.isNotUndefined(statSync(testSocketFile));\n    testEventEmitter.emit(signal);\n    test.throws(function () {\n      statSync(testSocketFile);\n    }, /ENOENT/);\n  });\n});","map":{"version":3,"sources":["packages/webapp/socket_file_tests.js"],"names":["writeFileSync","unlinkSync","statSync","module","watch","require","v","createServer","removeExistingSocketFile","registerSocketFileCleanup","EventEmitter","tmpdir","testSocketFile","removeTestSocketFile","error","Tinytest","add","test","throws","addAsync","done","server","listen","on","Meteor","bindEnvironment","isNotUndefined","close","testEventEmitter","forEach","emit","signal"],"mappings":"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","file":"packages/webapp/socket_file_tests.js.map","sourcesContent":["import { writeFileSync, unlinkSync, statSync } from 'fs';\nimport { createServer } from 'net';\nimport {\n  removeExistingSocketFile,\n  registerSocketFileCleanup,\n} from './socket_file.js';\nimport { EventEmitter } from 'events';\nimport { tmpdir } from 'os';\n\nconst testSocketFile = `${tmpdir()}/socket_file_tests`;\n\nconst removeTestSocketFile = () => {\n  try {\n    unlinkSync(testSocketFile);\n  } catch (error) {\n    // Do nothing\n  }\n}\n\nTinytest.add(\"socket file - don't remove a non-socket file\", test => {\n  writeFileSync(testSocketFile);\n  test.throws(\n    () => { removeExistingSocketFile(testSocketFile); },\n    /An existing file was found/\n  );\n  removeTestSocketFile()\n});\n\nTinytest.addAsync(\n  'socket file - remove a previously existing socket file',\n  (test, done) => {\n    removeTestSocketFile();\n    const server = createServer();\n    server.listen(testSocketFile);\n\n    server.on('listening', Meteor.bindEnvironment(() => {\n      test.isNotUndefined(statSync(testSocketFile));\n      removeExistingSocketFile(testSocketFile);\n      test.throws(\n        () => { statSync(testSocketFile); },\n        /ENOENT/\n      );\n      server.close();\n      done();\n    }));\n  }\n);\n\nTinytest.add(\n  'socket file - no existing socket file, nothing to remove',\n  test => {\n    removeTestSocketFile();\n    removeExistingSocketFile(testSocketFile);\n  }\n);\n\nTinytest.add('socket file - remove socket file on exit', test => {\n  const testEventEmitter = new EventEmitter();\n  registerSocketFileCleanup(testSocketFile, testEventEmitter);\n  ['exit', 'SIGINT', 'SIGHUP', 'SIGTERM'].forEach(signal => {\n    writeFileSync(testSocketFile);\n    test.isNotUndefined(statSync(testSocketFile));\n    testEventEmitter.emit(signal);\n    test.throws(\n      () => { statSync(testSocketFile); },\n      /ENOENT/\n    );\n  });\n});\n"]},"hash":"e2509f0d462e514f9a98bae75243249ba28e1a6c"}
