{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../../api/images/images.js","imported":["Images"],"specifiers":[{"kind":"named","imported":"Images","local":"Images"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/startup/server/twitter.js","filenameRelative":"imports/startup/server/twitter.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/startup/server/twitter.js.map","sourceFileName":"imports/startup/server/twitter.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"twitter"},"ignored":false,"code":"var Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n    Meteor: function (v) {\n        Meteor = v;\n    }\n}, 0);\nvar Images = void 0;\nmodule.watch(require(\"../../api/images/images.js\"), {\n    Images: function (v) {\n        Images = v;\n    }\n}, 1);\nMeteor.methods({\n    //return the twitter api key\n    'getTwitterAPIKey': function () {\n        return 'cwR4tCHFOTFRIyiLQVacIzns8';\n    },\n    //return the twitter api secret\n    'getTwitterAPISecret': function () {\n        return 'MP0Pphmcp6HL0FF6WXYhZa2M8b8cTH297MNqRR7M6wwCOBxfwU';\n    },\n    //return the twitter access token\n    'getTwitterAccessToken': function () {\n        return '882355763771043840-8uCzofs2q4HHE8m0GS2QZUxqNxzOvEG';\n    },\n    //return the twitter access token secret\n    'getTwitterAccessTokenSecret': function () {\n        return 'vpw7YwWu9tic20VI2qDh8W73zJoROenAnDEQoh7PMlM5l';\n    },\n    //setup the twitter api\n    'setupTwitterAPI': function () {\n        //Initialize the twitter API\n        T = new Twit({\n            consumer_key: 'cwR4tCHFOTFRIyiLQVacIzns8',\n            consumer_secret: 'MP0Pphmcp6HL0FF6WXYhZa2M8b8cTH297MNqRR7M6wwCOBxfwU',\n            access_token: '882355763771043840-8uCzofs2q4HHE8m0GS2QZUxqNxzOvEG',\n            access_token_secret: 'vpw7YwWu9tic20VI2qDh8W73zJoROenAnDEQoh7PMlM5l'\n        });\n        console.log(\"setting up twitter\");\n    },\n    //post to twitter account\n    'postTextAnnouncementTwitter': function (obj) {\n        var headline = obj.headline,\n            content = obj.content;\n        var status = obj.headline + '\\n' + obj.content;\n\n        if (status.length > 140) {\n            status = status.substring(0, 137);\n        }\n\n        status += \"...\";\n        T.post('statuses/update', {\n            status: status\n        }, function (err, data, response) {\n            console.log(data);\n        });\n    },\n    'postImageAnnouncementTwitter': function (obj) {\n        var fs = require('fs'); // post a tweet with media\n        //let b64content = fs.readFileSync('/Documents/TestFacebookAPI/facebookapi/public/images/stock1.jpg', { encoding: 'base64' });\n\n\n        var getBase64Data = function (doc, callback) {\n            var buffer = new Buffer(0); // callback has the form function (err, res) {}\n\n            var readStream = doc.createReadStream();\n            readStream.on('data', function (chunk) {\n                buffer = Buffer.concat([buffer, chunk]);\n            });\n            readStream.on('error', function (err) {\n                callback(err, null);\n            });\n            readStream.on('end', function () {\n                // done\n                callback(null, buffer.toString('base64'));\n            });\n        };\n\n        var getBase64DataSync = Meteor.wrapAsync(getBase64Data);\n        var file = Images.findOne({\n            '_id': obj.imgId\n        });\n        getBase64DataSync(file, function (err, b64content) {\n            // first we must post the media to Twitter\n            T.post('media/upload', {\n                media_data: b64content\n            }, function (err, data, response) {\n                // now we can reference the media and post a tweet (media will attach to the tweet)\n                var mediaIdStr = data.media_id_string;\n                var params = {\n                    status: obj.headline,\n                    media_ids: [mediaIdStr]\n                };\n                T.post('statuses/update', params, function (err, data, response) {\n                    console.log(data);\n                });\n            });\n        });\n    },\n    'postTextImageAnnouncementTwitter': function (obj) {\n        var getBase64Data = function (doc, callback) {\n            var buffer = new Buffer(0); // callback has the form function (err, res) {}\n\n            var readStream = doc.createReadStream();\n            readStream.on('data', function (chunk) {\n                buffer = Buffer.concat([buffer, chunk]);\n            });\n            readStream.on('error', function (err) {\n                callback(err, null);\n            });\n            readStream.on('end', function () {\n                // done\n                callback(null, buffer.toString('base64'));\n            });\n        };\n\n        var getBase64DataSync = Meteor.wrapAsync(getBase64Data);\n        var status = obj.headline + '\\n' + obj.content;\n\n        if (status.length > 140) {\n            status = status.substring(0, 137);\n        }\n\n        status += \"...\";\n        var file = Images.findOne({\n            '_id': obj.imgId\n        });\n        getBase64DataSync(file, function (err, b64content) {\n            // first we must post the media to Twitter\n            T.post('media/upload', {\n                media_data: b64content\n            }, function (err, data, response) {\n                // now we can reference the media and post a tweet (media will attach to the tweet)\n                var mediaIdStr = data.media_id_string;\n                var params = {\n                    status: status,\n                    media_ids: [mediaIdStr]\n                };\n                T.post('statuses/update', params, function (err, data, response) {\n                    console.log(data);\n                });\n            });\n        });\n    }\n});","map":{"version":3,"sources":["imports/startup/server/twitter.js"],"names":["Meteor","module","watch","require","v","Images","methods","T","Twit","consumer_key","consumer_secret","access_token","access_token_secret","console","log","obj","headline","content","status","length","substring","post","err","data","response","fs","getBase64Data","doc","callback","buffer","Buffer","readStream","createReadStream","on","chunk","concat","toString","getBase64DataSync","wrapAsync","file","findOne","imgId","b64content","media_data","mediaIdStr","media_id_string","params","media_ids"],"mappings":"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","file":"imports/startup/server/twitter.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport { Images } from '../../api/images/images.js'\r\n\r\nMeteor.methods({\r\n    //return the twitter api key\r\n    'getTwitterAPIKey' : function() {\r\n        return 'cwR4tCHFOTFRIyiLQVacIzns8';\r\n    },\r\n    //return the twitter api secret\r\n    'getTwitterAPISecret' : function() {\r\n        return 'MP0Pphmcp6HL0FF6WXYhZa2M8b8cTH297MNqRR7M6wwCOBxfwU';\r\n    },\r\n    //return the twitter access token\r\n    'getTwitterAccessToken' : function() {\r\n        return '882355763771043840-8uCzofs2q4HHE8m0GS2QZUxqNxzOvEG';\r\n    },\r\n    //return the twitter access token secret\r\n    'getTwitterAccessTokenSecret' : function() {\r\n        return 'vpw7YwWu9tic20VI2qDh8W73zJoROenAnDEQoh7PMlM5l';\r\n    },\r\n    //setup the twitter api\r\n    'setupTwitterAPI' : function () {\r\n\r\n        //Initialize the twitter API\r\n        T = new Twit({\r\n            consumer_key:         'cwR4tCHFOTFRIyiLQVacIzns8',\r\n            consumer_secret:      'MP0Pphmcp6HL0FF6WXYhZa2M8b8cTH297MNqRR7M6wwCOBxfwU',\r\n            access_token:         '882355763771043840-8uCzofs2q4HHE8m0GS2QZUxqNxzOvEG',\r\n            access_token_secret:  'vpw7YwWu9tic20VI2qDh8W73zJoROenAnDEQoh7PMlM5l'\r\n        });\r\n        console.log(\"setting up twitter\");\r\n\r\n    },\r\n    //post to twitter account\r\n    'postTextAnnouncementTwitter' : function(obj) {\r\n        let headline = obj.headline,\r\n        content = obj.content;\r\n        let status = obj.headline + '\\n' + obj.content;\r\n        if (status.length > 140) {\r\n            status = status.substring(0, 137);\r\n        }\r\n        status += \"...\";\r\n        T.post('statuses/update', { status: status}, function(err, data, response) {\r\n            console.log(data)\r\n        });\r\n    },\r\n    'postImageAnnouncementTwitter' : function(obj) {\r\n        let fs = require('fs');\r\n        // post a tweet with media\r\n        //let b64content = fs.readFileSync('/Documents/TestFacebookAPI/facebookapi/public/images/stock1.jpg', { encoding: 'base64' });\r\n\r\n        let getBase64Data = function(doc, callback) {\r\n            let buffer = new Buffer(0);\r\n            // callback has the form function (err, res) {}\r\n            let readStream = doc.createReadStream();\r\n            readStream.on('data', function(chunk) {\r\n                buffer = Buffer.concat([buffer, chunk]);\r\n            });\r\n            readStream.on('error', function(err) {\r\n                callback(err, null);\r\n            });\r\n            readStream.on('end', function() {\r\n                // done\r\n                callback(null, buffer.toString('base64'));\r\n            });\r\n        };\r\n        let getBase64DataSync = Meteor.wrapAsync(getBase64Data);\r\n\r\n        let file = Images.findOne({'_id': obj.imgId});\r\n        getBase64DataSync(file, function(err, b64content) {\r\n            // first we must post the media to Twitter\r\n            T.post('media/upload', { media_data: b64content }, function (err, data, response) {\r\n\r\n                // now we can reference the media and post a tweet (media will attach to the tweet)\r\n                let mediaIdStr = data.media_id_string\r\n                let params = { status: obj.headline, media_ids: [mediaIdStr] }\r\n\r\n                T.post('statuses/update', params, function (err, data, response) {\r\n                    console.log(data);\r\n                });\r\n            });\r\n        })\r\n    },\r\n    'postTextImageAnnouncementTwitter' : function(obj) {\r\n        let getBase64Data = function(doc, callback) {\r\n            let buffer = new Buffer(0);\r\n            // callback has the form function (err, res) {}\r\n            let readStream = doc.createReadStream();\r\n            readStream.on('data', function(chunk) {\r\n                buffer = Buffer.concat([buffer, chunk]);\r\n            });\r\n            readStream.on('error', function(err) {\r\n                callback(err, null);\r\n            });\r\n            readStream.on('end', function() {\r\n                // done\r\n                callback(null, buffer.toString('base64'));\r\n            });\r\n        };\r\n        let getBase64DataSync = Meteor.wrapAsync(getBase64Data);\r\n\r\n        let status = obj.headline + '\\n' + obj.content;\r\n        if (status.length > 140) {\r\n            status = status.substring(0, 137);\r\n        }\r\n        status += \"...\";\r\n\r\n        let file = Images.findOne({'_id': obj.imgId});\r\n        getBase64DataSync(file, function(err, b64content) {\r\n            // first we must post the media to Twitter\r\n            T.post('media/upload', { media_data: b64content }, function (err, data, response) {\r\n\r\n                // now we can reference the media and post a tweet (media will attach to the tweet)\r\n                let mediaIdStr = data.media_id_string\r\n                let params = { status: status, media_ids: [mediaIdStr] }\r\n\r\n                T.post('statuses/update', params, function (err, data, response) {\r\n                    console.log(data);\r\n                });\r\n            });\r\n        })\r\n    }\r\n})\r\n"]},"hash":"79d0ee06790c4933eed7a6db94b1b6f7315c2c86"}
