{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"node-schedule","imported":["default"],"specifiers":[{"kind":"named","imported":"default","local":"schedule"}]},{"source":"../../api/posts/posts.js","imported":["Posts"],"specifiers":[{"kind":"named","imported":"Posts","local":"Posts"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"imports/startup/server/scheduler.js","filenameRelative":"imports/startup/server/scheduler.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"imports/startup/server/scheduler.js.map","sourceFileName":"imports/startup/server/scheduler.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"scheduler"},"ignored":false,"code":"var Meteor = void 0;\nmodule.watch(require(\"meteor/meteor\"), {\n   Meteor: function (v) {\n      Meteor = v;\n   }\n}, 0);\nvar schedule = void 0;\nmodule.watch(require(\"node-schedule\"), {\n   \"default\": function (v) {\n      schedule = v;\n   }\n}, 1);\nvar Posts = void 0;\nmodule.watch(require(\"../../api/posts/posts.js\"), {\n   Posts: function (v) {\n      Posts = v;\n   }\n}, 2);\nMeteor.methods({\n   'scheduleAnnouncement': function (announcementId) {\n      var announcement = Posts.findOne({\n         '_id': announcementId\n      });\n\n      if (announcement.type === 'announcement') {\n         var sDate = new Date(announcement.startDate);\n         var eDate = new Date(announcement.endDate);\n         var cDate = new Date();\n         var flag = false;\n         sDate.setHours(8);\n         eDate.setHours(8);\n\n         if (eDate.getTime() === sDate.getTime()) {\n            //scheduled for one day\n            eDate = new Date(eDate.setTime(eDate.getTime() + 86400000)); //move end day to next day midnight\n         }\n\n         if (sDate.getTime() < cDate.getTime()) {\n            //already past start date\n            console.log(\"updated start date\");\n            sDate = new Date(); //update the start date\n\n            sDate.setSeconds(sDate.getSeconds() + 5); //add a delay\n         }\n\n         if (eDate.getTime() < cDate.getTime()) {\n            //already past end date\n            console.log(\"updated end date\");\n            flag = true;\n         }\n\n         if (!flag) {\n            var j = schedule.scheduleJob(sDate, Meteor.bindEnvironment(function () {\n               //Set display to TRUE\n               console.log(\"DISPLAY TRUE\");\n               Posts.update({\n                  '_id': announcementId\n               }, {\n                  $set: {\n                     'meta.display': true\n                  }\n               });\n            }));\n            var k = schedule.scheduleJob(eDate, Meteor.bindEnvironment(function () {\n               //Set display to FALSE\n               console.log(\"DISPLAY FALSE\");\n               Posts.update({\n                  '_id': announcementId\n               }, {\n                  $set: {\n                     'meta.display': false\n                  }\n               });\n            }));\n         }\n      } else {\n         console.log('Not an announcement');\n         return -1;\n      }\n   },\n   'scheduleBlog': function (blogId) {\n      var blog = Posts.findOne({\n         '_id': blogId\n      });\n\n      if (blog.type === 'blog') {\n         var rDate = new Date(blog.releaseDate);\n         var cDate = new Date();\n\n         if (rDate.getTime() < cDate.getTime()) {\n            //already past start date\n            rDate = new Date(); //update the start date\n\n            rDate.setSeconds(rDate.getSeconds() + 5); //add a delay\n         }\n\n         var j = schedule.scheduleJob(rDate, Meteor.bindEnvironment(function () {\n            //Set display to TRUE\n            Posts.update({\n               '_id': blogId\n            }, {\n               $set: {\n                  'meta.display': true\n               }\n            });\n         }));\n      } else {\n         console.log('not a blog');\n         return -1;\n      }\n   }\n});","map":{"version":3,"sources":["imports/startup/server/scheduler.js"],"names":["Meteor","module","watch","require","v","schedule","Posts","methods","announcementId","announcement","findOne","type","sDate","Date","startDate","eDate","endDate","cDate","flag","setHours","getTime","setTime","console","log","setSeconds","getSeconds","j","scheduleJob","bindEnvironment","update","$set","k","blogId","blog","rDate","releaseDate"],"mappings":"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","file":"imports/startup/server/scheduler.js.map","sourcesContent":["import { Meteor } from 'meteor/meteor';\r\nimport schedule from 'node-schedule';\r\nimport { Posts } from '../../api/posts/posts.js';\r\n\r\nMeteor.methods({\r\n   'scheduleAnnouncement' : function(announcementId) {\r\n      let announcement = Posts.findOne({'_id': announcementId});\r\n\r\n      if (announcement.type === 'announcement') {\r\n         let sDate = new Date(announcement.startDate);\r\n         let eDate = new Date(announcement.endDate);\r\n         let cDate = new Date();\r\n         let flag = false;\r\n\r\n         sDate.setHours(8);\r\n         eDate.setHours(8);\r\n\r\n         if (eDate.getTime() === sDate.getTime()) {   //scheduled for one day\r\n            eDate = new Date(eDate.setTime( eDate.getTime() + 86400000 )); //move end day to next day midnight\r\n         }\r\n         if (sDate.getTime() < cDate.getTime()) { //already past start date\r\n             console.log(\"updated start date\");\r\n            sDate = new Date();  //update the start date\r\n            sDate.setSeconds(sDate.getSeconds() + 5);  //add a delay\r\n         }\r\n         if (eDate.getTime() < cDate.getTime()) { //already past end date\r\n             console.log(\"updated end date\");\r\n            flag = true;\r\n         }\r\n\r\n\r\n         if (!flag) {\r\n            let j = schedule.scheduleJob(sDate, Meteor.bindEnvironment(function() {\r\n               //Set display to TRUE\r\n               console.log(\"DISPLAY TRUE\");\r\n               Posts.update({'_id': announcementId}, { $set: {'meta.display':true}});\r\n           }));\r\n            let k = schedule.scheduleJob(eDate, Meteor.bindEnvironment(function() {\r\n               //Set display to FALSE\r\n               console.log(\"DISPLAY FALSE\");\r\n               Posts.update({'_id': announcementId}, { $set: {'meta.display':false}});\r\n            }));\r\n         }\r\n      } else {\r\n         console.log('Not an announcement');\r\n         return -1;\r\n     }\r\n   },\r\n   'scheduleBlog' : function(blogId) {\r\n      let blog = Posts.findOne({'_id':blogId});\r\n\r\n      if (blog.type === 'blog') {\r\n         let rDate = new Date(blog.releaseDate);\r\n         let cDate = new Date();\r\n\r\n         if (rDate.getTime() < cDate.getTime()) { //already past start date\r\n            rDate = new Date();  //update the start date\r\n            rDate.setSeconds(rDate.getSeconds() + 5);  //add a delay\r\n         }\r\n\r\n         let j = schedule.scheduleJob(rDate, Meteor.bindEnvironment(function() {\r\n            //Set display to TRUE\r\n            Posts.update({'_id': blogId}, { $set: {'meta.display':true}});\r\n        }));\r\n      } else {\r\n         console.log('not a blog');\r\n         return -1;\r\n      }\r\n   }\r\n});\r\n"]},"hash":"4d39a43d69dcfb05ac4e51291e3cae02e8a7268a"}
