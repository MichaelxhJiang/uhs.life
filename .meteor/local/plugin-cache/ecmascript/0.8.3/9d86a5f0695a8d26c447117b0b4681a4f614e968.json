{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./namespace.js","imported":["DDP","LivedataTest"],"specifiers":[{"kind":"named","imported":"DDP","local":"DDP"},{"kind":"named","imported":"LivedataTest","local":"LivedataTest"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/ddp-client/stream_client_common.js","filenameRelative":"packages/ddp-client/stream_client_common.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/ddp-client/stream_client_common.js.map","sourceFileName":"packages/ddp-client/stream_client_common.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"stream_client_common"},"ignored":false,"code":"var DDP = void 0,\n    LivedataTest = void 0;\nmodule.watch(require(\"./namespace.js\"), {\n  DDP: function (v) {\n    DDP = v;\n  },\n  LivedataTest: function (v) {\n    LivedataTest = v;\n  }\n}, 0);\n\n// XXX from Underscore.String (http://epeli.github.com/underscore.string/)\nvar startsWith = function (str, starts) {\n  return str.length >= starts.length && str.substring(0, starts.length) === starts;\n};\n\nvar endsWith = function (str, ends) {\n  return str.length >= ends.length && str.substring(str.length - ends.length) === ends;\n}; // @param url {String} URL to Meteor app, eg:\n//   \"/\" or \"madewith.meteor.com\" or \"https://foo.meteor.com\"\n//   or \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"\n// @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.\n// for scheme \"http\" and subPath \"sockjs\"\n//   \"http://subdomain.meteor.com/sockjs\" or \"/sockjs\"\n//   or \"https://ddp--1234-foo.meteor.com/sockjs\"\n\n\nvar translateUrl = function (url, newSchemeBase, subPath) {\n  if (!newSchemeBase) {\n    newSchemeBase = \"http\";\n  }\n\n  var ddpUrlMatch = url.match(/^ddp(i?)\\+sockjs:\\/\\//);\n  var httpUrlMatch = url.match(/^http(s?):\\/\\//);\n  var newScheme;\n\n  if (ddpUrlMatch) {\n    // Remove scheme and split off the host.\n    var urlAfterDDP = url.substr(ddpUrlMatch[0].length);\n    newScheme = ddpUrlMatch[1] === \"i\" ? newSchemeBase : newSchemeBase + \"s\";\n    var slashPos = urlAfterDDP.indexOf('/');\n    var host = slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);\n    var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos); // In the host (ONLY!), change '*' characters into random digits. This\n    // allows different stream connections to connect to different hostnames\n    // and avoid browser per-hostname connection limits.\n\n    host = host.replace(/\\*/g, function () {\n      return Math.floor(Random.fraction() * 10);\n    });\n    return newScheme + '://' + host + rest;\n  } else if (httpUrlMatch) {\n    newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + \"s\";\n    var urlAfterHttp = url.substr(httpUrlMatch[0].length);\n    url = newScheme + \"://\" + urlAfterHttp;\n  } // Prefix FQDNs but not relative URLs\n\n\n  if (url.indexOf(\"://\") === -1 && !startsWith(url, \"/\")) {\n    url = newSchemeBase + \"://\" + url;\n  } // XXX This is not what we should be doing: if I have a site\n  // deployed at \"/foo\", then DDP.connect(\"/\") should actually connect\n  // to \"/\", not to \"/foo\". \"/\" is an absolute path. (Contrast: if\n  // deployed at \"/foo\", it would be reasonable for DDP.connect(\"bar\")\n  // to connect to \"/foo/bar\").\n  //\n  // We should make this properly honor absolute paths rather than\n  // forcing the path to be relative to the site root. Simultaneously,\n  // we should set DDP_DEFAULT_CONNECTION_URL to include the site\n  // root. See also client_convenience.js #RationalizingRelativeDDPURLs\n\n\n  url = Meteor._relativeToSiteRootUrl(url);\n  if (endsWith(url, \"/\")) return url + subPath;else return url + \"/\" + subPath;\n};\n\ntoSockjsUrl = function (url) {\n  return translateUrl(url, \"http\", \"sockjs\");\n};\n\ntoWebsocketUrl = function (url) {\n  var ret = translateUrl(url, \"ws\", \"websocket\");\n  return ret;\n};\n\nLivedataTest.toSockjsUrl = toSockjsUrl;\n\n_.extend(LivedataTest.ClientStream.prototype, {\n  // Register for callbacks.\n  on: function (name, callback) {\n    var self = this;\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect') throw new Error(\"unknown event type: \" + name);\n    if (!self.eventCallbacks[name]) self.eventCallbacks[name] = [];\n    self.eventCallbacks[name].push(callback);\n  },\n  _initCommon: function (options) {\n    var self = this;\n    options = options || {}; //// Constants\n    // how long to wait until we declare the connection attempt\n    // failed.\n\n    self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n    self.eventCallbacks = {}; // name -> [callback]\n\n    self._forcedToDisconnect = false; //// Reactive status\n\n    self.currentStatus = {\n      status: \"connecting\",\n      connected: false,\n      retryCount: 0\n    };\n    self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency();\n\n    self.statusChanged = function () {\n      if (self.statusListeners) self.statusListeners.changed();\n    }; //// Retry logic\n\n\n    self._retry = new Retry();\n    self.connectionTimer = null;\n  },\n  // Trigger a reconnect.\n  reconnect: function (options) {\n    var self = this;\n    options = options || {};\n\n    if (options.url) {\n      self._changeUrl(options.url);\n    }\n\n    if (options._sockjsOptions) {\n      self.options._sockjsOptions = options._sockjsOptions;\n    }\n\n    if (self.currentStatus.connected) {\n      if (options._force || options.url) {\n        // force reconnect.\n        self._lostConnection(new DDP.ForcedReconnectError());\n      } // else, noop.\n\n\n      return;\n    } // if we're mid-connection, stop it.\n\n\n    if (self.currentStatus.status === \"connecting\") {\n      // Pretend it's a clean close.\n      self._lostConnection();\n    }\n\n    self._retry.clear();\n\n    self.currentStatus.retryCount -= 1; // don't count manual retries\n\n    self._retryNow();\n  },\n  disconnect: function (options) {\n    var self = this;\n    options = options || {}; // Failed is permanent. If we're failed, don't let people go back\n    // online by calling 'disconnect' then 'reconnect'.\n\n    if (self._forcedToDisconnect) return; // If _permanent is set, permanently disconnect a stream. Once a stream\n    // is forced to disconnect, it can never reconnect. This is for\n    // error cases such as ddp version mismatch, where trying again\n    // won't fix the problem.\n\n    if (options._permanent) {\n      self._forcedToDisconnect = true;\n    }\n\n    self._cleanup();\n\n    self._retry.clear();\n\n    self.currentStatus = {\n      status: options._permanent ? \"failed\" : \"offline\",\n      connected: false,\n      retryCount: 0\n    };\n    if (options._permanent && options._error) self.currentStatus.reason = options._error;\n    self.statusChanged();\n  },\n  // maybeError is set unless it's a clean protocol-level close.\n  _lostConnection: function (maybeError) {\n    var self = this;\n\n    self._cleanup(maybeError);\n\n    self._retryLater(maybeError); // sets status. no need to do it here.\n\n  },\n  // fired when we detect that we've gone online. try to reconnect\n  // immediately.\n  _online: function () {\n    // if we've requested to be offline by disconnecting, don't reconnect.\n    if (this.currentStatus.status != \"offline\") this.reconnect();\n  },\n  _retryLater: function (maybeError) {\n    var self = this;\n    var timeout = 0;\n\n    if (self.options.retry || maybeError && maybeError.errorType === \"DDP.ForcedReconnectError\") {\n      timeout = self._retry.retryLater(self.currentStatus.retryCount, _.bind(self._retryNow, self));\n      self.currentStatus.status = \"waiting\";\n      self.currentStatus.retryTime = new Date().getTime() + timeout;\n    } else {\n      self.currentStatus.status = \"failed\";\n      delete self.currentStatus.retryTime;\n    }\n\n    self.currentStatus.connected = false;\n    self.statusChanged();\n  },\n  _retryNow: function () {\n    var self = this;\n    if (self._forcedToDisconnect) return;\n    self.currentStatus.retryCount += 1;\n    self.currentStatus.status = \"connecting\";\n    self.currentStatus.connected = false;\n    delete self.currentStatus.retryTime;\n    self.statusChanged();\n\n    self._launchConnection();\n  },\n  // Get current status. Reactive.\n  status: function () {\n    var self = this;\n    if (self.statusListeners) self.statusListeners.depend();\n    return self.currentStatus;\n  }\n});\n\nDDP.ConnectionError = Meteor.makeErrorType(\"DDP.ConnectionError\", function (message) {\n  var self = this;\n  self.message = message;\n});\nDDP.ForcedReconnectError = Meteor.makeErrorType(\"DDP.ForcedReconnectError\", function () {});","map":{"version":3,"sources":["packages/ddp-client/stream_client_common.js"],"names":["DDP","LivedataTest","module","watch","require","v","startsWith","str","starts","length","substring","endsWith","ends","translateUrl","url","newSchemeBase","subPath","ddpUrlMatch","match","httpUrlMatch","newScheme","urlAfterDDP","substr","slashPos","indexOf","host","rest","replace","Math","floor","Random","fraction","urlAfterHttp","Meteor","_relativeToSiteRootUrl","toSockjsUrl","toWebsocketUrl","ret","_","extend","ClientStream","prototype","on","name","callback","self","Error","eventCallbacks","push","_initCommon","options","CONNECT_TIMEOUT","connectTimeoutMs","_forcedToDisconnect","currentStatus","status","connected","retryCount","statusListeners","Tracker","Dependency","statusChanged","changed","_retry","Retry","connectionTimer","reconnect","_changeUrl","_sockjsOptions","_force","_lostConnection","ForcedReconnectError","clear","_retryNow","disconnect","_permanent","_cleanup","_error","reason","maybeError","_retryLater","_online","timeout","retry","errorType","retryLater","bind","retryTime","Date","getTime","_launchConnection","depend","ConnectionError","makeErrorType","message"],"mappings":"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","file":"packages/ddp-client/stream_client_common.js.map","sourcesContent":["import { DDP, LivedataTest } from \"./namespace.js\";\n\n// XXX from Underscore.String (http://epeli.github.com/underscore.string/)\nvar startsWith = function(str, starts) {\n  return str.length >= starts.length &&\n    str.substring(0, starts.length) === starts;\n};\nvar endsWith = function(str, ends) {\n  return str.length >= ends.length &&\n    str.substring(str.length - ends.length) === ends;\n};\n\n// @param url {String} URL to Meteor app, eg:\n//   \"/\" or \"madewith.meteor.com\" or \"https://foo.meteor.com\"\n//   or \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"\n// @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.\n// for scheme \"http\" and subPath \"sockjs\"\n//   \"http://subdomain.meteor.com/sockjs\" or \"/sockjs\"\n//   or \"https://ddp--1234-foo.meteor.com/sockjs\"\nvar translateUrl =  function(url, newSchemeBase, subPath) {\n  if (! newSchemeBase) {\n    newSchemeBase = \"http\";\n  }\n\n  var ddpUrlMatch = url.match(/^ddp(i?)\\+sockjs:\\/\\//);\n  var httpUrlMatch = url.match(/^http(s?):\\/\\//);\n  var newScheme;\n  if (ddpUrlMatch) {\n    // Remove scheme and split off the host.\n    var urlAfterDDP = url.substr(ddpUrlMatch[0].length);\n    newScheme = ddpUrlMatch[1] === \"i\" ? newSchemeBase : newSchemeBase + \"s\";\n    var slashPos = urlAfterDDP.indexOf('/');\n    var host =\n          slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);\n    var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos);\n\n    // In the host (ONLY!), change '*' characters into random digits. This\n    // allows different stream connections to connect to different hostnames\n    // and avoid browser per-hostname connection limits.\n    host = host.replace(/\\*/g, function () {\n      return Math.floor(Random.fraction()*10);\n    });\n\n    return newScheme + '://' + host + rest;\n  } else if (httpUrlMatch) {\n    newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + \"s\";\n    var urlAfterHttp = url.substr(httpUrlMatch[0].length);\n    url = newScheme + \"://\" + urlAfterHttp;\n  }\n\n  // Prefix FQDNs but not relative URLs\n  if (url.indexOf(\"://\") === -1 && !startsWith(url, \"/\")) {\n    url = newSchemeBase + \"://\" + url;\n  }\n\n  // XXX This is not what we should be doing: if I have a site\n  // deployed at \"/foo\", then DDP.connect(\"/\") should actually connect\n  // to \"/\", not to \"/foo\". \"/\" is an absolute path. (Contrast: if\n  // deployed at \"/foo\", it would be reasonable for DDP.connect(\"bar\")\n  // to connect to \"/foo/bar\").\n  //\n  // We should make this properly honor absolute paths rather than\n  // forcing the path to be relative to the site root. Simultaneously,\n  // we should set DDP_DEFAULT_CONNECTION_URL to include the site\n  // root. See also client_convenience.js #RationalizingRelativeDDPURLs\n  url = Meteor._relativeToSiteRootUrl(url);\n\n  if (endsWith(url, \"/\"))\n    return url + subPath;\n  else\n    return url + \"/\" + subPath;\n};\n\ntoSockjsUrl = function (url) {\n  return translateUrl(url, \"http\", \"sockjs\");\n};\n\ntoWebsocketUrl = function (url) {\n  var ret = translateUrl(url, \"ws\", \"websocket\");\n  return ret;\n};\n\nLivedataTest.toSockjsUrl = toSockjsUrl;\n\n \n_.extend(LivedataTest.ClientStream.prototype, {\n\n  // Register for callbacks.\n  on: function (name, callback) {\n    var self = this;\n\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect')\n      throw new Error(\"unknown event type: \" + name);\n\n    if (!self.eventCallbacks[name])\n      self.eventCallbacks[name] = [];\n    self.eventCallbacks[name].push(callback);\n  },\n\n\n  _initCommon: function (options) {\n    var self = this;\n    options = options || {};\n\n    //// Constants\n\n    // how long to wait until we declare the connection attempt\n    // failed.\n    self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n\n    self.eventCallbacks = {}; // name -> [callback]\n\n    self._forcedToDisconnect = false;\n\n    //// Reactive status\n    self.currentStatus = {\n      status: \"connecting\",\n      connected: false,\n      retryCount: 0\n    };\n\n\n    self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency;\n    self.statusChanged = function () {\n      if (self.statusListeners)\n        self.statusListeners.changed();\n    };\n\n    //// Retry logic\n    self._retry = new Retry;\n    self.connectionTimer = null;\n\n  },\n\n  // Trigger a reconnect.\n  reconnect: function (options) {\n    var self = this;\n    options = options || {};\n\n    if (options.url) {\n      self._changeUrl(options.url);\n    }\n\n    if (options._sockjsOptions) {\n      self.options._sockjsOptions = options._sockjsOptions;\n    }\n\n    if (self.currentStatus.connected) {\n      if (options._force || options.url) {\n        // force reconnect.\n        self._lostConnection(new DDP.ForcedReconnectError);\n      } // else, noop.\n      return;\n    }\n\n    // if we're mid-connection, stop it.\n    if (self.currentStatus.status === \"connecting\") {\n      // Pretend it's a clean close.\n      self._lostConnection();\n    }\n\n    self._retry.clear();\n    self.currentStatus.retryCount -= 1; // don't count manual retries\n    self._retryNow();\n  },\n\n  disconnect: function (options) {\n    var self = this;\n    options = options || {};\n\n    // Failed is permanent. If we're failed, don't let people go back\n    // online by calling 'disconnect' then 'reconnect'.\n    if (self._forcedToDisconnect)\n      return;\n\n    // If _permanent is set, permanently disconnect a stream. Once a stream\n    // is forced to disconnect, it can never reconnect. This is for\n    // error cases such as ddp version mismatch, where trying again\n    // won't fix the problem.\n    if (options._permanent) {\n      self._forcedToDisconnect = true;\n    }\n\n    self._cleanup();\n    self._retry.clear();\n\n    self.currentStatus = {\n      status: (options._permanent ? \"failed\" : \"offline\"),\n      connected: false,\n      retryCount: 0\n    };\n\n    if (options._permanent && options._error)\n      self.currentStatus.reason = options._error;\n\n    self.statusChanged();\n  },\n\n  // maybeError is set unless it's a clean protocol-level close.\n  _lostConnection: function (maybeError) {\n    var self = this;\n\n    self._cleanup(maybeError);\n    self._retryLater(maybeError); // sets status. no need to do it here.\n  },\n\n  // fired when we detect that we've gone online. try to reconnect\n  // immediately.\n  _online: function () {\n    // if we've requested to be offline by disconnecting, don't reconnect.\n    if (this.currentStatus.status != \"offline\")\n      this.reconnect();\n  },\n\n  _retryLater: function (maybeError) {\n    var self = this;\n\n    var timeout = 0;\n    if (self.options.retry ||\n        (maybeError && maybeError.errorType === \"DDP.ForcedReconnectError\")) {\n      timeout = self._retry.retryLater(\n        self.currentStatus.retryCount,\n        _.bind(self._retryNow, self)\n      );\n      self.currentStatus.status = \"waiting\";\n      self.currentStatus.retryTime = (new Date()).getTime() + timeout;\n    } else {\n      self.currentStatus.status = \"failed\";\n      delete self.currentStatus.retryTime;\n    }\n\n    self.currentStatus.connected = false;\n    self.statusChanged();\n  },\n\n  _retryNow: function () {\n    var self = this;\n\n    if (self._forcedToDisconnect)\n      return;\n\n    self.currentStatus.retryCount += 1;\n    self.currentStatus.status = \"connecting\";\n    self.currentStatus.connected = false;\n    delete self.currentStatus.retryTime;\n    self.statusChanged();\n\n    self._launchConnection();\n  },\n\n\n  // Get current status. Reactive.\n  status: function () {\n    var self = this;\n    if (self.statusListeners)\n      self.statusListeners.depend();\n    return self.currentStatus;\n  }\n});\n\nDDP.ConnectionError = Meteor.makeErrorType(\n  \"DDP.ConnectionError\", function (message) {\n    var self = this;\n    self.message = message;\n});\n\nDDP.ForcedReconnectError = Meteor.makeErrorType(\n  \"DDP.ForcedReconnectError\", function () {});\n"]},"hash":"9d86a5f0695a8d26c447117b0b4681a4f614e968"}
