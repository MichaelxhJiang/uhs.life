{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/ddp-client/random_stream_tests.js","filenameRelative":"packages/ddp-client/random_stream_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/ddp-client/random_stream_tests.js.map","sourceFileName":"packages/ddp-client/random_stream_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"random_stream_tests"},"ignored":false,"code":"Tinytest.add(\"livedata - DDP.randomStream\", function (test) {\n  var randomSeed = Random.id();\n  var context = {\n    randomSeed: randomSeed\n  };\n\n  var sequence = DDP._CurrentMethodInvocation.withValue(context, function () {\n    return DDP.randomStream('1');\n  });\n\n  var seeds = sequence.alea.args;\n  test.equal(seeds.length, 2);\n  test.equal(seeds[0], randomSeed);\n  test.equal(seeds[1], '1');\n  var id1 = sequence.id(); // Clone the sequence by building it the same way RandomStream.get does\n\n  var sequenceClone = Random.createWithSeeds.apply(null, seeds);\n  var id1Cloned = sequenceClone.id();\n  var id2Cloned = sequenceClone.id();\n  test.equal(id1, id1Cloned); // We should get the same sequence when we use the same key\n\n  sequence = DDP._CurrentMethodInvocation.withValue(context, function () {\n    return DDP.randomStream('1');\n  });\n  seeds = sequence.alea.args;\n  test.equal(seeds.length, 2);\n  test.equal(seeds[0], randomSeed);\n  test.equal(seeds[1], '1'); // But we should be at the 'next' position in the stream\n\n  var id2 = sequence.id(); // Technically these could be equal, but likely to be a bug if hit\n  // http://search.dilbert.com/comic/Random%20Number%20Generator\n\n  test.notEqual(id1, id2);\n  test.equal(id2, id2Cloned);\n});\nTinytest.add(\"livedata - DDP.randomStream with no-args\", function (test) {\n  DDP.randomStream().id();\n});","map":{"version":3,"sources":["packages/ddp-client/random_stream_tests.js"],"names":["Tinytest","add","test","randomSeed","Random","id","context","sequence","DDP","_CurrentMethodInvocation","withValue","randomStream","seeds","alea","args","equal","length","id1","sequenceClone","createWithSeeds","apply","id1Cloned","id2Cloned","id2","notEqual"],"mappings":"AAAAA,SAASC,GAAT,CAAa,6BAAb,EAA4C,UAAUC,IAAV,EAAgB;AAC1D,MAAIC,aAAaC,OAAOC,EAAP,EAAjB;AACA,MAAIC,UAAU;AAAEH,gBAAYA;AAAd,GAAd;;AAEA,MAAII,WAAWC,IAAIC,wBAAJ,CAA6BC,SAA7B,CAAuCJ,OAAvC,EAAgD,YAAY;AACzE,WAAOE,IAAIG,YAAJ,CAAiB,GAAjB,CAAP;AACD,GAFc,CAAf;;AAIA,MAAIC,QAAQL,SAASM,IAAT,CAAcC,IAA1B;AAEAZ,OAAKa,KAAL,CAAWH,MAAMI,MAAjB,EAAyB,CAAzB;AACAd,OAAKa,KAAL,CAAWH,MAAM,CAAN,CAAX,EAAqBT,UAArB;AACAD,OAAKa,KAAL,CAAWH,MAAM,CAAN,CAAX,EAAqB,GAArB;AAEA,MAAIK,MAAMV,SAASF,EAAT,EAAV,CAd0D,CAgB1D;;AACA,MAAIa,gBAAgBd,OAAOe,eAAP,CAAuBC,KAAvB,CAA6B,IAA7B,EAAmCR,KAAnC,CAApB;AACA,MAAIS,YAAYH,cAAcb,EAAd,EAAhB;AACA,MAAIiB,YAAYJ,cAAcb,EAAd,EAAhB;AACAH,OAAKa,KAAL,CAAWE,GAAX,EAAgBI,SAAhB,EApB0D,CAsB1D;;AACAd,aAAWC,IAAIC,wBAAJ,CAA6BC,SAA7B,CAAuCJ,OAAvC,EAAgD,YAAY;AACrE,WAAOE,IAAIG,YAAJ,CAAiB,GAAjB,CAAP;AACD,GAFU,CAAX;AAGAC,UAAQL,SAASM,IAAT,CAAcC,IAAtB;AACAZ,OAAKa,KAAL,CAAWH,MAAMI,MAAjB,EAAyB,CAAzB;AACAd,OAAKa,KAAL,CAAWH,MAAM,CAAN,CAAX,EAAqBT,UAArB;AACAD,OAAKa,KAAL,CAAWH,MAAM,CAAN,CAAX,EAAqB,GAArB,EA7B0D,CA+B1D;;AACA,MAAIW,MAAMhB,SAASF,EAAT,EAAV,CAhC0D,CAkC1D;AACA;;AACAH,OAAKsB,QAAL,CAAcP,GAAd,EAAmBM,GAAnB;AAEArB,OAAKa,KAAL,CAAWQ,GAAX,EAAgBD,SAAhB;AACD,CAvCD;AAyCAtB,SAASC,GAAT,CAAa,0CAAb,EAAyD,UAAUC,IAAV,EAAgB;AACvEM,MAAIG,YAAJ,GAAmBN,EAAnB;AACD,CAFD","file":"packages/ddp-client/random_stream_tests.js.map","sourcesContent":["Tinytest.add(\"livedata - DDP.randomStream\", function (test) {\n  var randomSeed = Random.id();\n  var context = { randomSeed: randomSeed };\n\n  var sequence = DDP._CurrentMethodInvocation.withValue(context, function () {\n    return DDP.randomStream('1');\n  });\n\n  var seeds = sequence.alea.args;\n\n  test.equal(seeds.length, 2);\n  test.equal(seeds[0], randomSeed);\n  test.equal(seeds[1], '1');\n\n  var id1 = sequence.id();\n\n  // Clone the sequence by building it the same way RandomStream.get does\n  var sequenceClone = Random.createWithSeeds.apply(null, seeds);\n  var id1Cloned = sequenceClone.id();\n  var id2Cloned = sequenceClone.id();\n  test.equal(id1, id1Cloned);\n\n  // We should get the same sequence when we use the same key\n  sequence = DDP._CurrentMethodInvocation.withValue(context, function () {\n    return DDP.randomStream('1');\n  });\n  seeds = sequence.alea.args;\n  test.equal(seeds.length, 2);\n  test.equal(seeds[0], randomSeed);\n  test.equal(seeds[1], '1');\n\n  // But we should be at the 'next' position in the stream\n  var id2 = sequence.id();\n\n  // Technically these could be equal, but likely to be a bug if hit\n  // http://search.dilbert.com/comic/Random%20Number%20Generator\n  test.notEqual(id1, id2);\n\n  test.equal(id2, id2Cloned);\n});\n\nTinytest.add(\"livedata - DDP.randomStream with no-args\", function (test) {\n  DDP.randomStream().id();\n});\n"]},"hash":"f9a744834298d228759c236b9a3da9eefd05dd53"}
