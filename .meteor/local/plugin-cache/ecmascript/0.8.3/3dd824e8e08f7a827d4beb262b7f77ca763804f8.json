{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/random/random_tests.js","filenameRelative":"packages/random/random_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/random/random_tests.js.map","sourceFileName":"packages/random/random_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"random_tests"},"ignored":false,"code":"Tinytest.add('random', function (test) {\n  // Deterministic with a specified seed, which should generate the\n  // same sequence in all environments.\n  //\n  // For repeatable unit test failures using deterministic random\n  // number sequences it's fine if a new Meteor release changes the\n  // algorithm being used and it starts generating a different\n  // sequence for a seed, as long as the sequence is consistent for\n  // a particular release.\n  var random = Random.createWithSeeds(0);\n  test.equal(random.id(), \"cp9hWvhg8GSvuZ9os\");\n  test.equal(random.id(), \"3f3k6Xo7rrHCifQhR\");\n  test.equal(random.id(), \"shxDnjWWmnKPEoLhM\");\n  test.equal(random.id(), \"6QTjB8C5SEqhmz4ni\");\n}); // node crypto and window.crypto.getRandomValues() don't let us specify a seed,\n// but at least test that the output is in the right format.\n\nTinytest.add('random - format', function (test) {\n  var idLen = 17;\n  test.equal(Random.id().length, idLen);\n  test.equal(Random.id(29).length, 29);\n  var numDigits = 9;\n  var hexStr = Random.hexString(numDigits);\n  test.equal(hexStr.length, numDigits);\n  parseInt(hexStr, 16); // should not throw\n\n  var frac = Random.fraction();\n  test.isTrue(frac < 1.0);\n  test.isTrue(frac >= 0.0);\n  test.equal(Random.secret().length, 43);\n  test.equal(Random.secret(13).length, 13);\n});\nTinytest.add('random - Alea is last resort', function (test) {\n  if (Meteor.isServer) {\n    test.isTrue(Random.alea === undefined);\n  }\n\n  if (Meteor.isClient) {\n    var useGetRandomValues = !!(typeof window !== \"undefined\" && window.crypto && window.crypto.getRandomValues);\n    test.equal(Random.alea === undefined, useGetRandomValues);\n  }\n});\nTinytest.add('random - createWithSeeds requires parameters', function (test) {\n  test.throws(function () {\n    Random.createWithSeeds();\n  });\n});","map":{"version":3,"sources":["packages/random/random_tests.js"],"names":["Tinytest","add","test","random","Random","createWithSeeds","equal","id","idLen","length","numDigits","hexStr","hexString","parseInt","frac","fraction","isTrue","secret","Meteor","isServer","alea","undefined","isClient","useGetRandomValues","window","crypto","getRandomValues","throws"],"mappings":"AAAAA,SAASC,GAAT,CAAa,QAAb,EAAuB,UAAUC,IAAV,EAAgB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIC,SAASC,OAAOC,eAAP,CAAuB,CAAvB,CAAb;AACAH,OAAKI,KAAL,CAAWH,OAAOI,EAAP,EAAX,EAAwB,mBAAxB;AACAL,OAAKI,KAAL,CAAWH,OAAOI,EAAP,EAAX,EAAwB,mBAAxB;AACAL,OAAKI,KAAL,CAAWH,OAAOI,EAAP,EAAX,EAAwB,mBAAxB;AACAL,OAAKI,KAAL,CAAWH,OAAOI,EAAP,EAAX,EAAwB,mBAAxB;AACD,CAdD,E,CAgBA;AACA;;AACAP,SAASC,GAAT,CAAa,iBAAb,EAAgC,UAAUC,IAAV,EAAgB;AAC9C,MAAIM,QAAQ,EAAZ;AACAN,OAAKI,KAAL,CAAWF,OAAOG,EAAP,GAAYE,MAAvB,EAA+BD,KAA/B;AACAN,OAAKI,KAAL,CAAWF,OAAOG,EAAP,CAAU,EAAV,EAAcE,MAAzB,EAAiC,EAAjC;AACA,MAAIC,YAAY,CAAhB;AACA,MAAIC,SAASP,OAAOQ,SAAP,CAAiBF,SAAjB,CAAb;AACAR,OAAKI,KAAL,CAAWK,OAAOF,MAAlB,EAA0BC,SAA1B;AACAG,WAASF,MAAT,EAAiB,EAAjB,EAP8C,CAOxB;;AACtB,MAAIG,OAAOV,OAAOW,QAAP,EAAX;AACAb,OAAKc,MAAL,CAAYF,OAAO,GAAnB;AACAZ,OAAKc,MAAL,CAAYF,QAAQ,GAApB;AAEAZ,OAAKI,KAAL,CAAWF,OAAOa,MAAP,GAAgBR,MAA3B,EAAmC,EAAnC;AACAP,OAAKI,KAAL,CAAWF,OAAOa,MAAP,CAAc,EAAd,EAAkBR,MAA7B,EAAqC,EAArC;AACD,CAdD;AAgBAT,SAASC,GAAT,CAAa,8BAAb,EAA6C,UAAUC,IAAV,EAAgB;AAC3D,MAAIgB,OAAOC,QAAX,EAAqB;AACnBjB,SAAKc,MAAL,CAAYZ,OAAOgB,IAAP,KAAgBC,SAA5B;AACD;;AACD,MAAIH,OAAOI,QAAX,EAAqB;AACnB,QAAIC,qBAAqB,CAAC,EAAE,OAAOC,MAAP,KAAkB,WAAlB,IACxBA,OAAOC,MADiB,IACPD,OAAOC,MAAP,CAAcC,eADT,CAA1B;AAEAxB,SAAKI,KAAL,CAAWF,OAAOgB,IAAP,KAAgBC,SAA3B,EAAsCE,kBAAtC;AACD;AACF,CATD;AAWAvB,SAASC,GAAT,CAAa,8CAAb,EAA6D,UAAUC,IAAV,EAAgB;AAC3EA,OAAKyB,MAAL,CAAY,YAAY;AACtBvB,WAAOC,eAAP;AACD,GAFD;AAGD,CAJD","file":"packages/random/random_tests.js.map","sourcesContent":["Tinytest.add('random', function (test) {\n  // Deterministic with a specified seed, which should generate the\n  // same sequence in all environments.\n  //\n  // For repeatable unit test failures using deterministic random\n  // number sequences it's fine if a new Meteor release changes the\n  // algorithm being used and it starts generating a different\n  // sequence for a seed, as long as the sequence is consistent for\n  // a particular release.\n  var random = Random.createWithSeeds(0);\n  test.equal(random.id(), \"cp9hWvhg8GSvuZ9os\");\n  test.equal(random.id(), \"3f3k6Xo7rrHCifQhR\");\n  test.equal(random.id(), \"shxDnjWWmnKPEoLhM\");\n  test.equal(random.id(), \"6QTjB8C5SEqhmz4ni\");\n});\n\n// node crypto and window.crypto.getRandomValues() don't let us specify a seed,\n// but at least test that the output is in the right format.\nTinytest.add('random - format', function (test) {\n  var idLen = 17;\n  test.equal(Random.id().length, idLen);\n  test.equal(Random.id(29).length, 29);\n  var numDigits = 9;\n  var hexStr = Random.hexString(numDigits);\n  test.equal(hexStr.length, numDigits);\n  parseInt(hexStr, 16); // should not throw\n  var frac = Random.fraction();\n  test.isTrue(frac < 1.0);\n  test.isTrue(frac >= 0.0);\n\n  test.equal(Random.secret().length, 43);\n  test.equal(Random.secret(13).length, 13);\n});\n\nTinytest.add('random - Alea is last resort', function (test) {\n  if (Meteor.isServer) {\n    test.isTrue(Random.alea === undefined);\n  }\n  if (Meteor.isClient) {\n    var useGetRandomValues = !!(typeof window !== \"undefined\" &&\n        window.crypto && window.crypto.getRandomValues);\n    test.equal(Random.alea === undefined, useGetRandomValues);\n  }\n});\n\nTinytest.add('random - createWithSeeds requires parameters', function (test) {\n  test.throws(function () {\n    Random.createWithSeeds();\n  });\n});\n"]},"hash":"3dd824e8e08f7a827d4beb262b7f77ca763804f8"}
