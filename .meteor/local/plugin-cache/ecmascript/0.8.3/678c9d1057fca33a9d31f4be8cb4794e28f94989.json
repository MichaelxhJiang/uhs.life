{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[{"source":"./namespace.js","imported":["DDP"],"specifiers":[{"kind":"named","imported":"DDP","local":"DDP"}]}],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/ddp-client/client_convenience.js","filenameRelative":"packages/ddp-client/client_convenience.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/ddp-client/client_convenience.js.map","sourceFileName":"packages/ddp-client/client_convenience.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"client_convenience"},"ignored":false,"code":"var DDP = void 0;\nmodule.watch(require(\"./namespace.js\"), {\n  DDP: function (v) {\n    DDP = v;\n  }\n}, 0);\n\n// Meteor.refresh can be called on the client (if you're in common code) but it\n// only has an effect on the server.\nMeteor.refresh = function (notification) {};\n\nif (Meteor.isClient) {\n  // By default, try to connect back to the same endpoint as the page\n  // was served from.\n  //\n  // XXX We should be doing this a different way. Right now we don't\n  // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't\n  // include it on the server when computing\n  // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our\n  // default, '/'.) We get by with this because DDP.connect then\n  // forces the URL passed to it to be interpreted relative to the\n  // app's deploy path, even if it is absolute. Instead, we should\n  // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;\n  // make the default ddpUrl be '' rather that '/'; and make\n  // _translateUrl in stream_client_common.js not force absolute paths\n  // to be treated like relative paths. See also\n  // stream_client_common.js #RationalizingRelativeDDPURLs\n  var ddpUrl = '/';\n\n  if (typeof __meteor_runtime_config__ !== \"undefined\") {\n    if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL) ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;\n  }\n\n  var retry = new Retry();\n\n  var onDDPVersionNegotiationFailure = function (description) {\n    Meteor._debug(description);\n\n    if (Package.reload) {\n      var migrationData = Package.reload.Reload._migrationData('livedata') || {};\n      var failures = migrationData.DDPVersionNegotiationFailures || 0;\n      ++failures;\n\n      Package.reload.Reload._onMigrate('livedata', function () {\n        return [true, {\n          DDPVersionNegotiationFailures: failures\n        }];\n      });\n\n      retry.retryLater(failures, function () {\n        Package.reload.Reload._reload();\n      });\n    }\n  };\n\n  Meteor.connection = DDP.connect(ddpUrl, {\n    onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure\n  }); // Proxy the public methods of Meteor.connection so they can\n  // be called directly on Meteor.\n\n  _.each(['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect', 'disconnect'], function (name) {\n    Meteor[name] = _.bind(Meteor.connection[name], Meteor.connection);\n  });\n} else {\n  // Never set up a default connection on the server. Don't even map\n  // subscribe/call/etc onto Meteor.\n  Meteor.connection = null;\n} // Meteor.connection used to be called\n// Meteor.default_connection. Provide backcompat as a courtesy even\n// though it was never documented.\n// XXX COMPAT WITH 0.6.4\n\n\nMeteor.default_connection = Meteor.connection; // We should transition from Meteor.connect to DDP.connect.\n// XXX COMPAT WITH 0.6.4\n\nMeteor.connect = DDP.connect;","map":{"version":3,"sources":["packages/ddp-client/client_convenience.js"],"names":["DDP","module","watch","require","v","Meteor","refresh","notification","isClient","ddpUrl","__meteor_runtime_config__","DDP_DEFAULT_CONNECTION_URL","retry","Retry","onDDPVersionNegotiationFailure","description","_debug","Package","reload","migrationData","Reload","_migrationData","failures","DDPVersionNegotiationFailures","_onMigrate","retryLater","_reload","connection","connect","_","each","name","bind","default_connection"],"mappings":"AAAA,IAAIA,YAAJ;AAAQC,OAAOC,KAAP,CAAaC,QAAQ,gBAAR,CAAb,EAAuC;AAACH,KAAD,YAAKI,CAAL,EAAO;AAACJ,UAAII,CAAJ;AAAM;AAAd,CAAvC,EAAuD,CAAvD;;AAER;AACA;AACAC,OAAOC,OAAP,GAAiB,UAAUC,YAAV,EAAwB,CACxC,CADD;;AAGA,IAAIF,OAAOG,QAAX,EAAqB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAIC,SAAS,GAAb;;AACA,MAAI,OAAOC,yBAAP,KAAqC,WAAzC,EAAsD;AACpD,QAAIA,0BAA0BC,0BAA9B,EACEF,SAASC,0BAA0BC,0BAAnC;AACH;;AAED,MAAIC,QAAQ,IAAIC,KAAJ,EAAZ;;AAEA,MAAIC,iCAAiC,UAAUC,WAAV,EAAuB;AAC1DV,WAAOW,MAAP,CAAcD,WAAd;;AACA,QAAIE,QAAQC,MAAZ,EAAoB;AAClB,UAAIC,gBAAgBF,QAAQC,MAAR,CAAeE,MAAf,CAAsBC,cAAtB,CAAqC,UAArC,KAAoD,EAAxE;AACA,UAAIC,WAAWH,cAAcI,6BAAd,IAA+C,CAA9D;AACA,QAAED,QAAF;;AACAL,cAAQC,MAAR,CAAeE,MAAf,CAAsBI,UAAtB,CAAiC,UAAjC,EAA6C,YAAY;AACvD,eAAO,CAAC,IAAD,EAAO;AAACD,yCAA+BD;AAAhC,SAAP,CAAP;AACD,OAFD;;AAGAV,YAAMa,UAAN,CAAiBH,QAAjB,EAA2B,YAAY;AACrCL,gBAAQC,MAAR,CAAeE,MAAf,CAAsBM,OAAtB;AACD,OAFD;AAGD;AACF,GAbD;;AAeArB,SAAOsB,UAAP,GACE3B,IAAI4B,OAAJ,CAAYnB,MAAZ,EAAoB;AAClBK,oCAAgCA;AADd,GAApB,CADF,CAvCmB,CA4CnB;AACA;;AACAe,IAAEC,IAAF,CAAO,CAAC,WAAD,EAAc,SAAd,EAAyB,MAAzB,EAAiC,OAAjC,EAA0C,QAA1C,EAAoD,WAApD,EACC,YADD,CAAP,EAEO,UAAUC,IAAV,EAAgB;AACd1B,WAAO0B,IAAP,IAAeF,EAAEG,IAAF,CAAO3B,OAAOsB,UAAP,CAAkBI,IAAlB,CAAP,EAAgC1B,OAAOsB,UAAvC,CAAf;AACD,GAJR;AAKD,CAnDD,MAmDO;AACL;AACA;AACAtB,SAAOsB,UAAP,GAAoB,IAApB;AACD,C,CAED;AACA;AACA;AACA;;;AACAtB,OAAO4B,kBAAP,GAA4B5B,OAAOsB,UAAnC,C,CAEA;AACA;;AACAtB,OAAOuB,OAAP,GAAiB5B,IAAI4B,OAArB","file":"packages/ddp-client/client_convenience.js.map","sourcesContent":["import { DDP } from \"./namespace.js\";\n\n// Meteor.refresh can be called on the client (if you're in common code) but it\n// only has an effect on the server.\nMeteor.refresh = function (notification) {\n};\n\nif (Meteor.isClient) {\n  // By default, try to connect back to the same endpoint as the page\n  // was served from.\n  //\n  // XXX We should be doing this a different way. Right now we don't\n  // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't\n  // include it on the server when computing\n  // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our\n  // default, '/'.) We get by with this because DDP.connect then\n  // forces the URL passed to it to be interpreted relative to the\n  // app's deploy path, even if it is absolute. Instead, we should\n  // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;\n  // make the default ddpUrl be '' rather that '/'; and make\n  // _translateUrl in stream_client_common.js not force absolute paths\n  // to be treated like relative paths. See also\n  // stream_client_common.js #RationalizingRelativeDDPURLs\n  var ddpUrl = '/';\n  if (typeof __meteor_runtime_config__ !== \"undefined\") {\n    if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL)\n      ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;\n  }\n\n  var retry = new Retry();\n\n  var onDDPVersionNegotiationFailure = function (description) {\n    Meteor._debug(description);\n    if (Package.reload) {\n      var migrationData = Package.reload.Reload._migrationData('livedata') || {};\n      var failures = migrationData.DDPVersionNegotiationFailures || 0;\n      ++failures;\n      Package.reload.Reload._onMigrate('livedata', function () {\n        return [true, {DDPVersionNegotiationFailures: failures}];\n      });\n      retry.retryLater(failures, function () {\n        Package.reload.Reload._reload();\n      });\n    }\n  };\n\n  Meteor.connection =\n    DDP.connect(ddpUrl, {\n      onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure\n    });\n\n  // Proxy the public methods of Meteor.connection so they can\n  // be called directly on Meteor.\n  _.each(['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect',\n          'disconnect'],\n         function (name) {\n           Meteor[name] = _.bind(Meteor.connection[name], Meteor.connection);\n         });\n} else {\n  // Never set up a default connection on the server. Don't even map\n  // subscribe/call/etc onto Meteor.\n  Meteor.connection = null;\n}\n\n// Meteor.connection used to be called\n// Meteor.default_connection. Provide backcompat as a courtesy even\n// though it was never documented.\n// XXX COMPAT WITH 0.6.4\nMeteor.default_connection = Meteor.connection;\n\n// We should transition from Meteor.connect to DDP.connect.\n// XXX COMPAT WITH 0.6.4\nMeteor.connect = DDP.connect;\n"]},"hash":"678c9d1057fca33a9d31f4be8cb4794e28f94989"}
