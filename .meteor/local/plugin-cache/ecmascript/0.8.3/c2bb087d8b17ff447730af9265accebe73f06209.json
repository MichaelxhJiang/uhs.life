{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/mongo/upsert_compatibility_test.js","filenameRelative":"packages/mongo/upsert_compatibility_test.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/mongo/upsert_compatibility_test.js.map","sourceFileName":"packages/mongo/upsert_compatibility_test.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"upsert_compatibility_test"},"ignored":false,"code":"Tinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'MONGO'\n  });\n  coll.insert({\n    foo: 1\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    $set: {\n      foo: 2\n    }\n  });\n  var updated = coll.findOne({\n    foo: 2\n  });\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {\n    foo: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'MONGO'\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    $set: {\n      bar: 2\n    }\n  });\n  var inserted = coll.findOne({\n    foo: 1\n  });\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {\n    foo: 1,\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'MONGO'\n  });\n  coll.insert({\n    foo: 1,\n    baz: 42\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    bar: 2\n  });\n  var updated = coll.findOne({\n    bar: 2\n  });\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'MONGO'\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    bar: 2\n  });\n  var inserted = coll.findOne({\n    bar: 2\n  });\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.isTrue(result.insertedId instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'STRING'\n  });\n  coll.insert({\n    foo: 1\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    $set: {\n      foo: 2\n    }\n  });\n  var updated = coll.findOne({\n    foo: 2\n  });\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(typeof updated._id === 'string');\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {\n    foo: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'STRING'\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    $set: {\n      bar: 2\n    }\n  });\n  var inserted = coll.findOne({\n    foo: 1\n  });\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {\n    foo: 1,\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'STRING'\n  });\n  coll.insert({\n    foo: 1,\n    baz: 42\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    bar: 2\n  });\n  var updated = coll.findOne({\n    bar: 2\n  });\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(typeof updated._id === 'string');\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'STRING'\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    bar: 2\n  });\n  var inserted = coll.findOne({\n    bar: 2\n  });\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {\n    bar: 2\n  }), true);\n});\nTinytest.add('mongo livedata - native upsert - MONGO passing id insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_' + collName, {\n    idGeneration: 'MONGO'\n  });\n  var result = coll.upsert({\n    foo: 1\n  }, {\n    _id: 'meu id'\n  });\n  var inserted = coll.findOne({\n    _id: 'meu id'\n  });\n  test.equal(result.insertedId, 'meu id');\n  test.equal(result.numberAffected, 1);\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(EJSON.equals(inserted, {\n    _id: 'meu id'\n  }), true);\n});","map":{"version":3,"sources":["packages/mongo/upsert_compatibility_test.js"],"names":["Tinytest","add","test","collName","Random","id","coll","Mongo","Collection","idGeneration","insert","foo","result","upsert","$set","updated","findOne","equal","insertedId","undefined","numberAffected","isTrue","_id","ObjectID","EJSON","equals","bar","inserted","baz"],"mappings":"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","file":"packages/mongo/upsert_compatibility_test.js.map","sourcesContent":["Tinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  coll.insert({foo: 1});\n  var result = coll.upsert({foo: 1}, {$set: {foo:2}});\n  var updated = coll.findOne({foo: 2});\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {foo: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {$set: {bar:2}});\n  var inserted = coll.findOne({foo: 1});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {foo: 1, bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  coll.insert({foo: 1, baz: 42});\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var updated = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(updated._id instanceof Mongo.ObjectID);\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type MONGO PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var inserted = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(inserted._id instanceof Mongo.ObjectID);\n  test.isTrue(result.insertedId instanceof Mongo.ObjectID);\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  coll.insert({foo: 1});\n  var result = coll.upsert({foo: 1}, {$set: {foo:2}});\n  var updated = coll.findOne({foo: 2});\n\n  test.equal(result.insertedId, undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {foo: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING with MODIFIERS insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  var result = coll.upsert({foo: 1}, {$set: {bar:2}});\n  var inserted = coll.findOne({foo: 1});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {foo: 1, bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT update', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  coll.insert({foo: 1, baz: 42});\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var updated = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId === undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof updated._id === 'string');\n\n  delete updated['_id'];\n  test.equal(EJSON.equals(updated, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - id type STRING PLAIN OBJECT insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'STRING'});\n\n  var result = coll.upsert({foo: 1}, {bar:2});\n  var inserted = coll.findOne({bar: 2});\n\n  test.isTrue(result.insertedId !== undefined);\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n  test.equal(inserted._id, result.insertedId);\n\n  delete inserted['_id'];\n  test.equal(EJSON.equals(inserted, {bar: 2}), true);\n});\n\nTinytest.add('mongo livedata - native upsert - MONGO passing id insert', function (test) {\n  var collName = Random.id();\n  var coll = new Mongo.Collection('native_upsert_'+collName, {idGeneration: 'MONGO'});\n\n  var result = coll.upsert({foo: 1}, {_id: 'meu id'});\n  var inserted = coll.findOne({_id: 'meu id'});\n\n  test.equal(result.insertedId, 'meu id');\n  test.equal(result.numberAffected, 1);\n\n  test.isTrue(typeof inserted._id === 'string');\n\n  test.equal(EJSON.equals(inserted, {_id: 'meu id'}), true);\n});\n"]},"hash":"c2bb087d8b17ff447730af9265accebe73f06209"}
