{"metadata":{"usedHelpers":[],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/mongo/remote_collection_driver.js","filenameRelative":"packages/mongo/remote_collection_driver.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/mongo/remote_collection_driver.js.map","sourceFileName":"packages/mongo/remote_collection_driver.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"remote_collection_driver"},"ignored":false,"code":"MongoInternals.RemoteCollectionDriver = function (mongo_url, options) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url, options);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function (name) {\n    var self = this;\n    var ret = {};\n\n    _.each(['find', 'findOne', 'insert', 'update', 'upsert', 'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection', 'dropCollection', 'rawCollection'], function (m) {\n      ret[m] = _.bind(self.mongo[m], self.mongo, name);\n    });\n\n    return ret;\n  }\n}); // Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\n\n\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  var connectionOptions = {};\n  var mongoUrl = process.env.MONGO_URL;\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  if (!mongoUrl) throw new Error(\"MONGO_URL must be set in environment\");\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);\n});","map":{"version":3,"sources":["packages/mongo/remote_collection_driver.js"],"names":["MongoInternals","RemoteCollectionDriver","mongo_url","options","self","mongo","MongoConnection","_","extend","prototype","open","name","ret","each","m","bind","defaultRemoteCollectionDriver","once","connectionOptions","mongoUrl","process","env","MONGO_URL","MONGO_OPLOG_URL","oplogUrl","Error"],"mappings":"AAAAA,eAAeC,sBAAf,GAAwC,UACtCC,SADsC,EAC3BC,OAD2B,EAClB;AACpB,MAAIC,OAAO,IAAX;AACAA,OAAKC,KAAL,GAAa,IAAIC,eAAJ,CAAoBJ,SAApB,EAA+BC,OAA/B,CAAb;AACD,CAJD;;AAMAI,EAAEC,MAAF,CAASR,eAAeC,sBAAf,CAAsCQ,SAA/C,EAA0D;AACxDC,QAAM,UAAUC,IAAV,EAAgB;AACpB,QAAIP,OAAO,IAAX;AACA,QAAIQ,MAAM,EAAV;;AACAL,MAAEM,IAAF,CACE,CAAC,MAAD,EAAS,SAAT,EAAoB,QAApB,EAA8B,QAA9B,EAAwC,QAAxC,EACC,QADD,EACW,cADX,EAC2B,YAD3B,EACyC,yBADzC,EAEC,gBAFD,EAEmB,eAFnB,CADF,EAIE,UAAUC,CAAV,EAAa;AACXF,UAAIE,CAAJ,IAASP,EAAEQ,IAAF,CAAOX,KAAKC,KAAL,CAAWS,CAAX,CAAP,EAAsBV,KAAKC,KAA3B,EAAkCM,IAAlC,CAAT;AACD,KANH;;AAOA,WAAOC,GAAP;AACD;AAZuD,CAA1D,E,CAgBA;AACA;AACA;;;AACAZ,eAAegB,6BAAf,GAA+CT,EAAEU,IAAF,CAAO,YAAY;AAChE,MAAIC,oBAAoB,EAAxB;AAEA,MAAIC,WAAWC,QAAQC,GAAR,CAAYC,SAA3B;;AAEA,MAAIF,QAAQC,GAAR,CAAYE,eAAhB,EAAiC;AAC/BL,sBAAkBM,QAAlB,GAA6BJ,QAAQC,GAAR,CAAYE,eAAzC;AACD;;AAED,MAAI,CAAEJ,QAAN,EACE,MAAM,IAAIM,KAAJ,CAAU,sCAAV,CAAN;AAEF,SAAO,IAAIzB,eAAeC,sBAAnB,CAA0CkB,QAA1C,EAAoDD,iBAApD,CAAP;AACD,CAb8C,CAA/C","file":"packages/mongo/remote_collection_driver.js.map","sourcesContent":["MongoInternals.RemoteCollectionDriver = function (\n  mongo_url, options) {\n  var self = this;\n  self.mongo = new MongoConnection(mongo_url, options);\n};\n\n_.extend(MongoInternals.RemoteCollectionDriver.prototype, {\n  open: function (name) {\n    var self = this;\n    var ret = {};\n    _.each(\n      ['find', 'findOne', 'insert', 'update', 'upsert',\n       'remove', '_ensureIndex', '_dropIndex', '_createCappedCollection',\n       'dropCollection', 'rawCollection'],\n      function (m) {\n        ret[m] = _.bind(self.mongo[m], self.mongo, name);\n      });\n    return ret;\n  }\n});\n\n\n// Create the singleton RemoteCollectionDriver only on demand, so we\n// only require Mongo configuration if it's actually used (eg, not if\n// you're only trying to receive data from a remote DDP server.)\nMongoInternals.defaultRemoteCollectionDriver = _.once(function () {\n  var connectionOptions = {};\n\n  var mongoUrl = process.env.MONGO_URL;\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  if (! mongoUrl)\n    throw new Error(\"MONGO_URL must be set in environment\");\n\n  return new MongoInternals.RemoteCollectionDriver(mongoUrl, connectionOptions);\n});\n"]},"hash":"ee1b7558f8a8e04184aeb74b974b039b03bf9e2d"}
