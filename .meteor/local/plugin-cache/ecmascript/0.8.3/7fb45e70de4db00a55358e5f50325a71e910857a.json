{"metadata":{"usedHelpers":["typeof","interopRequireDefault"],"marked":[],"modules":{"imports":[],"exports":{"exported":[],"specifiers":[]}}},"options":{"filename":"packages/http/httpcall_tests.js","filenameRelative":"packages/http/httpcall_tests.js","env":{"development":{"plugins":[]}},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],{"generateLetDeclarations":true,"enforceStrictMode":false}],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":true,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"packages/http/httpcall_tests.js.map","sourceFileName":"packages/http/httpcall_tests.js","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"parserOpts":false,"generatorOpts":false,"basename":"httpcall_tests"},"ignored":false,"code":"var _typeof2 = require(\"babel-runtime/helpers/typeof\");\n\nvar _typeof3 = _interopRequireDefault(_typeof2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n// URL prefix for tests to talk to\nvar _XHR_URL_PREFIX = \"/http_test_responder\";\n\nvar url_base = function () {\n  if (Meteor.isServer) {\n    var address = WebApp.httpServer.address();\n    return \"http://127.0.0.1:\" + address.port;\n  } else {\n    return \"\";\n  }\n};\n\nvar url_prefix = function () {\n  if (Meteor.isServer && _XHR_URL_PREFIX.indexOf(\"http\") !== 0) {\n    _XHR_URL_PREFIX = url_base() + _XHR_URL_PREFIX;\n  }\n\n  return _XHR_URL_PREFIX;\n};\n\ntestAsyncMulti(\"httpcall - basic\", [function (test, expect) {\n  var basic_get = function (url, options, expected_url) {\n    var callback = function (error, result) {\n      test.isFalse(error);\n\n      if (!error) {\n        test.equal(typeof result === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(result), \"object\");\n        test.equal(result.statusCode, 200);\n        var data = result.data; // allow dropping of final ? (which mobile browsers seem to do)\n\n        var allowed = [expected_url];\n        if (expected_url.slice(-1) === '?') allowed.push(expected_url.slice(0, -1));\n        test.include(allowed, expected_url);\n        test.equal(data.method, \"GET\");\n      }\n    };\n\n    HTTP.call(\"GET\", url_prefix() + url, options, expect(callback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var result = HTTP.call(\"GET\", url_prefix() + url, options);\n        callback(undefined, result);\n      } catch (e) {\n        callback(e, e.response);\n      }\n    }\n  };\n\n  basic_get(\"/foo\", null, \"/foo\");\n  basic_get(\"/foo?\", null, \"/foo?\");\n  basic_get(\"/foo?a=b\", null, \"/foo?a=b\");\n  basic_get(\"/foo\", {\n    params: {\n      fruit: \"apple\"\n    }\n  }, \"/foo?fruit=apple\");\n  basic_get(\"/foo\", {\n    params: {\n      fruit: \"apple\",\n      dog: \"Spot the dog\"\n    }\n  }, \"/foo?fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo?\", {\n    params: {\n      fruit: \"apple\",\n      dog: \"Spot the dog\"\n    }\n  }, \"/foo?fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo?bar\", {\n    params: {\n      fruit: \"apple\",\n      dog: \"Spot the dog\"\n    }\n  }, \"/foo?bar&fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo?bar\", {\n    params: {\n      fruit: \"apple\",\n      dog: \"Spot the dog\"\n    },\n    query: \"baz\"\n  }, \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo\", {\n    params: {\n      fruit: \"apple\",\n      dog: \"Spot the dog\"\n    },\n    query: \"baz\"\n  }, \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo?\", {\n    params: {\n      fruit: \"apple\",\n      dog: \"Spot the dog\"\n    },\n    query: \"baz\"\n  }, \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n  basic_get(\"/foo?bar\", {\n    query: \"\"\n  }, \"/foo?\");\n  basic_get(\"/foo?bar\", {\n    params: {\n      fruit: \"apple\",\n      dog: \"Spot the dog\"\n    },\n    query: \"\"\n  }, \"/foo?fruit=apple&dog=Spot+the+dog\");\n}]);\ntestAsyncMulti(\"httpcall - errors\", [function (test, expect) {\n  // Accessing unknown server (should fail to make any connection)\n  var unknownServerCallback = function (error, result) {\n    test.isTrue(error);\n    test.isFalse(result);\n    test.isFalse(error.response);\n  };\n\n  var invalidIp = \"0.0.0.199\"; // This is an invalid destination IP address, and thus should always give an error.\n  // If your ISP is intercepting DNS misses and serving ads, an obviously\n  // invalid URL (http://asdf.asdf) might produce an HTTP response.\n\n  HTTP.call(\"GET\", \"http://\" + invalidIp + \"/\", expect(unknownServerCallback));\n\n  if (Meteor.isServer) {\n    // test sync version\n    try {\n      var unknownServerResult = HTTP.call(\"GET\", \"http://\" + invalidIp + \"/\");\n      unknownServerCallback(undefined, unknownServerResult);\n    } catch (e) {\n      unknownServerCallback(e, e.response);\n    }\n  } // Server serves 500\n\n\n  var error500Callback = function (error, result) {\n    test.isTrue(error);\n    test.isTrue(error.message.indexOf(\"500\") !== -1); // message has statusCode\n\n    test.isTrue(error.message.indexOf(error.response.content.substring(0, 10)) !== -1); // message has part of content\n\n    test.isTrue(result);\n    test.isTrue(error.response);\n    test.equal(result, error.response);\n    test.equal(error.response.statusCode, 500); // in test_responder.js we make a very long response body, to make sure\n    // that we truncate messages. first of all, make sure we didn't make that\n    // message too short, so that we can be sure we're verifying that we truncate.\n\n    test.isTrue(error.response.content.length > 520);\n    test.isTrue(error.message.length < 520); // make sure we truncate.\n  };\n\n  HTTP.call(\"GET\", url_prefix() + \"/fail\", expect(error500Callback));\n\n  if (Meteor.isServer) {\n    // test sync version\n    try {\n      var error500Result = HTTP.call(\"GET\", url_prefix() + \"/fail\");\n      error500Callback(undefined, error500Result);\n    } catch (e) {\n      error500Callback(e, e.response);\n    }\n  }\n}]);\ntestAsyncMulti(\"httpcall - timeout\", [function (test, expect) {\n  // Should time out\n  var timeoutCallback = function (error, result) {\n    test.isTrue(error);\n    test.isFalse(result);\n    test.isFalse(error.response);\n  };\n\n  var timeoutUrl = url_prefix() + \"/slow-\" + Random.id();\n  HTTP.call(\"GET\", timeoutUrl, {\n    timeout: 500\n  }, expect(timeoutCallback));\n\n  if (Meteor.isServer) {\n    // test sync version\n    try {\n      var timeoutResult = HTTP.call(\"GET\", timeoutUrl, {\n        timeout: 500\n      });\n      timeoutCallback(undefined, timeoutResult);\n    } catch (e) {\n      timeoutCallback(e, e.response);\n    }\n  } // Should not time out\n\n\n  var noTimeoutCallback = function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.url.substring(0, 4), \"/foo\");\n    test.equal(data.method, \"GET\");\n  };\n\n  var noTimeoutUrl = url_prefix() + \"/foo-\" + Random.id();\n  HTTP.call(\"GET\", noTimeoutUrl, {\n    timeout: 2000\n  }, expect(noTimeoutCallback));\n\n  if (Meteor.isServer) {\n    // test sync version\n    try {\n      var noTimeoutResult = HTTP.call(\"GET\", noTimeoutUrl, {\n        timeout: 2000\n      });\n      noTimeoutCallback(undefined, noTimeoutResult);\n    } catch (e) {\n      noTimeoutCallback(e, e.response);\n    }\n  }\n}]);\ntestAsyncMulti(\"httpcall - redirect\", [function (test, expect) {\n  // Test that we follow redirects by default\n  HTTP.call(\"GET\", url_prefix() + \"/redirect\", expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result); // should be redirected transparently to /foo\n\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.url, \"/foo\");\n    test.equal(data.method, \"GET\");\n  })); // followRedirect option; can't be false on client\n\n  _.each([false, true], function (followRedirects) {\n    var do_it = function (should_work) {\n      var maybe_expect = should_work ? expect : _.identity;\n\n      _.each([\"GET\", \"POST\"], function (method) {\n        HTTP.call(method, url_prefix() + \"/redirect\", {\n          followRedirects: followRedirects\n        }, maybe_expect(function (error, result) {\n          test.isFalse(error);\n          test.isTrue(result);\n\n          if (followRedirects) {\n            // should be redirected transparently to /foo\n            test.equal(result.statusCode, 200);\n            var data = result.data;\n            test.equal(data.url, \"/foo\"); // This is \"GET\" even when the initial request was a\n            // POST because browsers follow redirects with a GET\n            // even when the initial request was a different method.\n\n            test.equal(data.method, \"GET\");\n          } else {\n            // should see redirect\n            test.equal(result.statusCode, 301);\n          }\n        }));\n      });\n    };\n\n    if (Meteor.isClient && !followRedirects) {\n      // not supported, should fail\n      test.throws(do_it);\n    } else {\n      do_it(true);\n    }\n  });\n}]);\ntestAsyncMulti(\"httpcall - methods\", [function (test, expect) {\n  // non-get methods\n  var test_method = function (meth, func_name) {\n    func_name = func_name || meth.toLowerCase();\n    HTTP[func_name](url_prefix() + \"/foo\", expect(function (error, result) {\n      test.isFalse(error);\n      test.isTrue(result);\n      test.equal(result.statusCode, 200);\n      var data = result.data;\n      test.equal(data.url, \"/foo\"); // IE <= 8 turns seems to turn POSTs with no body into\n      // GETs, inexplicably.\n      //\n      // XXX Except now it doesn't!? Not sure what changed, but\n      // these lines now break the test...\n      // if (Meteor.isClient && $.browser.msie && $.browser.version <= 8\n      //     && meth === \"POST\")\n      //   meth = \"GET\";\n\n      test.equal(data.method, meth);\n    }));\n  };\n\n  test_method(\"GET\");\n  test_method(\"POST\");\n  test_method(\"PUT\");\n  test_method(\"DELETE\", 'del');\n  test_method(\"PATCH\");\n}, function (test, expect) {\n  // contents and data\n  HTTP.call(\"POST\", url_prefix() + \"/foo\", {\n    content: \"Hello World!\"\n  }, expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.body, \"Hello World!\");\n  }));\n  HTTP.call(\"POST\", url_prefix() + \"/data-test\", {\n    data: {\n      greeting: \"Hello World!\"\n    }\n  }, expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.body, {\n      greeting: \"Hello World!\"\n    }); // nb: some browsers include a charset here too.\n\n    test.matches(data.headers['content-type'], /^application\\/json\\b/);\n  }));\n  HTTP.call(\"POST\", url_prefix() + \"/data-test-explicit\", {\n    data: {\n      greeting: \"Hello World!\"\n    },\n    headers: {\n      'Content-Type': 'text/stupid'\n    }\n  }, expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.body, {\n      greeting: \"Hello World!\"\n    }); // nb: some browsers include a charset here too.\n\n    test.matches(data.headers['content-type'], /^text\\/stupid\\b/);\n  }));\n}]);\ntestAsyncMulti(\"httpcall - http auth\", [function (test, expect) {\n  // Test basic auth\n  // Unfortunately, any failed auth will result in a browser\n  // password prompt.  So we don't test auth failure, only\n  // success.\n  // Random password breaks in Firefox, because Firefox incorrectly\n  // uses cached credentials even if we supply different ones:\n  // https://bugzilla.mozilla.org/show_bug.cgi?id=654348\n  var password = 'rocks'; //var password = Random.id().replace(/[^0-9a-zA-Z]/g, '');\n\n  HTTP.call(\"GET\", url_prefix() + \"/login?\" + password, {\n    auth: \"meteor:\" + password\n  }, expect(function (error, result) {\n    // should succeed\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.url, \"/login?\" + password);\n  })); // test fail on malformed username:password\n\n  test.throws(function () {\n    HTTP.call(\"GET\", url_prefix() + \"/login?\" + password, {\n      auth: \"fooooo\"\n    }, function () {\n      throw new Error(\"can't get here\");\n    });\n  });\n}]);\ntestAsyncMulti(\"httpcall - headers\", [function (test, expect) {\n  HTTP.call(\"GET\", url_prefix() + \"/foo-with-headers\", {\n    headers: {\n      \"Test-header\": \"Value\",\n      \"another\": \"Value2\"\n    }\n  }, expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    var data = result.data;\n    test.equal(data.url, \"/foo-with-headers\");\n    test.equal(data.method, \"GET\");\n    test.equal(data.headers['test-header'], \"Value\");\n    test.equal(data.headers['another'], \"Value2\");\n  }));\n  HTTP.call(\"GET\", url_prefix() + \"/headers\", expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 201);\n    test.equal(result.headers['a-silly-header'], \"Tis a\");\n    test.equal(result.headers['another-silly-header'], \"Silly place.\");\n  }));\n}]);\ntestAsyncMulti(\"httpcall - params\", [function (test, expect) {\n  var do_test = function (method, url, params, opt_opts, expect_url, expect_body) {\n    var opts = {};\n\n    if (typeof opt_opts === \"string\") {\n      // opt_opts omitted\n      expect_body = expect_url;\n      expect_url = opt_opts;\n    } else {\n      opts = opt_opts;\n    }\n\n    HTTP.call(method, url_prefix() + url, _.extend({\n      params: params\n    }, opts), expect(function (error, result) {\n      test.isFalse(error);\n      test.isTrue(result);\n      test.equal(result.statusCode, 200);\n\n      if (method !== \"HEAD\") {\n        var data = result.data;\n        test.equal(data.method, method);\n        test.equal(data.url, expect_url);\n        test.equal(data.body, expect_body);\n      }\n    }));\n  };\n\n  do_test(\"GET\", \"/blah\", {\n    foo: \"bar\"\n  }, \"/blah?foo=bar\", \"\");\n  do_test(\"GET\", \"/\", {\n    foo: \"bar\",\n    fruit: \"apple\"\n  }, \"/?foo=bar&fruit=apple\", \"\");\n  do_test(\"POST\", \"/\", {\n    foo: \"bar\",\n    fruit: \"apple\"\n  }, \"/\", \"foo=bar&fruit=apple\");\n  do_test(\"POST\", \"/\", {\n    foo: \"bar\",\n    fruit: \"apple\"\n  }, \"/\", \"foo=bar&fruit=apple\");\n  do_test(\"GET\", \"/\", {\n    'foo?': \"bang?\"\n  }, {}, \"/?foo%3F=bang%3F\", \"\");\n  do_test(\"POST\", \"/\", {\n    'foo?': \"bang?\"\n  }, {}, \"/\", \"foo%3F=bang%3F\");\n  do_test(\"POST\", \"/\", {\n    foo: \"bar\",\n    fruit: \"apple\"\n  }, {\n    content: \"stuff!\"\n  }, \"/?foo=bar&fruit=apple\", \"stuff!\");\n  do_test(\"POST\", \"/\", {\n    foo: \"bar\",\n    greeting: \"Hello World\"\n  }, {\n    content: \"stuff!\"\n  }, \"/?foo=bar&greeting=Hello+World\", \"stuff!\");\n  do_test(\"POST\", \"/foo\", {\n    foo: \"bar\",\n    greeting: \"Hello World\"\n  }, \"/foo\", \"foo=bar&greeting=Hello+World\");\n  do_test(\"HEAD\", \"/head\", {\n    foo: \"bar\"\n  }, \"/head?foo=bar\", \"\");\n  do_test(\"PUT\", \"/put\", {\n    foo: \"bar\"\n  }, \"/put\", \"foo=bar\");\n}]);\ntestAsyncMulti(\"httpcall - npmRequestOptions\", [function (test, expect) {\n  if (Meteor.isClient) {\n    test.throws(function () {\n      HTTP.get(url_prefix() + \"/\", {\n        npmRequestOptions: {\n          encoding: null\n        }\n      }, function () {});\n    });\n    return;\n  }\n\n  HTTP.get(url_prefix() + \"/\", {\n    npmRequestOptions: {\n      encoding: null\n    }\n  }, expect(function (error, result) {\n    test.isFalse(error);\n    test.isTrue(result);\n    test.equal(result.statusCode, 200);\n    test.instanceOf(result.content, Buffer);\n  }));\n}]);\nMeteor.isClient && testAsyncMulti(\"httpcall - beforeSend\", [function (test, expect) {\n  var fired = false;\n\n  var bSend = function (xhr) {\n    test.isFalse(fired);\n    fired = true;\n    test.isTrue(xhr instanceof XMLHttpRequest);\n  };\n\n  HTTP.get(url_prefix() + \"/\", {\n    beforeSend: bSend\n  }, expect(function () {\n    test.isTrue(fired);\n  }));\n}]);\n\nif (Meteor.isServer) {\n  // This is testing the server's static file sending code, not the http\n  // package. It's here because it is very similar to the other tests\n  // here, even though it is testing something else.\n  //\n  // client http library mangles paths before they are requested. only\n  // run this test on the server.\n  testAsyncMulti(\"httpcall - static file serving\", [function (test, expect) {\n    // Suppress error printing for this test (and for any other code that sets\n    // the x-suppress-error header).\n    WebApp.suppressConnectErrors();\n\n    var do_test = function (path, code, match) {\n      HTTP.get(url_base() + path, {\n        headers: {\n          'x-suppress-error': 'true'\n        }\n      }, expect(function (error, result) {\n        test.equal(result.statusCode, code);\n        if (match) test.matches(result.content, match);\n      }));\n    }; // existing static file\n\n\n    do_test(\"/packages/local-test_http/test_static.serveme\", 200, /static file serving/); // no such file, so return the default app HTML.\n\n    var getsAppHtml = [// This file doesn't exist.\n    \"/nosuchfile\", // Our static file serving doesn't process .. or its encoded version, so\n    // any of these return the app HTML.\n    \"/../nosuchfile\", \"/%2e%2e/nosuchfile\", \"/%2E%2E/nosuchfile\", \"/%2d%2d/nosuchfile\", \"/packages/http/../http/test_static.serveme\", \"/packages/http/%2e%2e/http/test_static.serveme\", \"/packages/http/%2E%2E/http/test_static.serveme\", \"/packages/http/../../packages/http/test_static.serveme\", \"/packages/http/%2e%2e/%2e%2e/packages/http/test_static.serveme\", \"/packages/http/%2E%2E/%2E%2E/packages/http/test_static.serveme\", // ... and they *definitely* shouldn't be able to escape the app bundle.\n    \"/packages/http/../../../../../../packages/http/test_static.serveme\", \"/../../../../../../../../../../../bin/ls\", \"/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/bin/ls\", \"/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/bin/ls\"];\n\n    _.each(getsAppHtml, function (x) {\n      do_test(x, 200, /__meteor_runtime_config__ = JSON/);\n    });\n  }]);\n}\n\nMeteor.isServer && Tinytest.add(\"httpcall - npm modules\", function (test) {\n  // Make sure the version number looks like a version number. (All published\n  // request version numbers end in \".0\".)\n  test.matches(HTTPInternals.NpmModules.request.version, /^2\\.(\\d+)\\.0/);\n  test.equal((0, _typeof3.default)(HTTPInternals.NpmModules.request.module), 'function');\n  test.isTrue(HTTPInternals.NpmModules.request.module.get);\n}); // TO TEST/ADD:\n// - https\n// - cookies?\n// - human-readable error reason/cause?\n// - data parse error","map":{"version":3,"sources":["packages/http/httpcall_tests.js"],"names":["_XHR_URL_PREFIX","url_base","Meteor","isServer","address","WebApp","httpServer","port","url_prefix","indexOf","testAsyncMulti","test","expect","basic_get","url","options","expected_url","callback","error","result","isFalse","equal","statusCode","data","allowed","slice","push","include","method","HTTP","call","undefined","e","response","params","fruit","dog","query","unknownServerCallback","isTrue","invalidIp","unknownServerResult","error500Callback","message","content","substring","length","error500Result","timeoutCallback","timeoutUrl","Random","id","timeout","timeoutResult","noTimeoutCallback","noTimeoutUrl","noTimeoutResult","_","each","followRedirects","do_it","should_work","maybe_expect","identity","isClient","throws","test_method","meth","func_name","toLowerCase","body","greeting","matches","headers","password","auth","Error","do_test","opt_opts","expect_url","expect_body","opts","extend","foo","get","npmRequestOptions","encoding","instanceOf","Buffer","fired","bSend","xhr","XMLHttpRequest","beforeSend","suppressConnectErrors","path","code","match","getsAppHtml","x","Tinytest","add","HTTPInternals","NpmModules","request","version","module"],"mappings":"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","file":"packages/http/httpcall_tests.js.map","sourcesContent":["// URL prefix for tests to talk to\nvar _XHR_URL_PREFIX = \"/http_test_responder\";\n\nvar url_base = function () {\n  if (Meteor.isServer) {\n    var address = WebApp.httpServer.address();\n    return \"http://127.0.0.1:\" + address.port;\n  } else {\n    return \"\";\n  }\n};\n\nvar url_prefix = function () {\n  if (Meteor.isServer && _XHR_URL_PREFIX.indexOf(\"http\") !== 0) {\n    _XHR_URL_PREFIX = url_base() + _XHR_URL_PREFIX;\n  }\n  return _XHR_URL_PREFIX;\n};\n\n\ntestAsyncMulti(\"httpcall - basic\", [\n  function(test, expect) {\n    var basic_get = function(url, options, expected_url) {\n\n      var callback = function(error, result) {\n        test.isFalse(error);\n        if (! error) {\n          test.equal(typeof result, \"object\");\n          test.equal(result.statusCode, 200);\n\n          var data = result.data;\n\n          // allow dropping of final ? (which mobile browsers seem to do)\n          var allowed = [expected_url];\n          if (expected_url.slice(-1) === '?')\n            allowed.push(expected_url.slice(0, -1));\n\n          test.include(allowed, expected_url);\n          test.equal(data.method, \"GET\");\n        }\n      };\n\n\n      HTTP.call(\"GET\", url_prefix()+url, options, expect(callback));\n\n      if (Meteor.isServer) {\n        // test sync version\n        try {\n          var result = HTTP.call(\"GET\", url_prefix()+url, options);\n          callback(undefined, result);\n        } catch (e) {\n          callback(e, e.response);\n        }\n      }\n    };\n\n    basic_get(\"/foo\", null, \"/foo\");\n    basic_get(\"/foo?\", null, \"/foo?\");\n    basic_get(\"/foo?a=b\", null, \"/foo?a=b\");\n    basic_get(\"/foo\", {params: {fruit: \"apple\"}},\n              \"/foo?fruit=apple\");\n    basic_get(\"/foo\", {params: {fruit: \"apple\", dog: \"Spot the dog\"}},\n              \"/foo?fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?\", {params: {fruit: \"apple\", dog: \"Spot the dog\"}},\n              \"/foo?fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?bar\", {params: {fruit: \"apple\", dog: \"Spot the dog\"}},\n              \"/foo?bar&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?bar\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                           query: \"baz\"},\n              \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                       query: \"baz\"},\n              \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                       query: \"baz\"},\n              \"/foo?baz&fruit=apple&dog=Spot+the+dog\");\n    basic_get(\"/foo?bar\", {query: \"\"}, \"/foo?\");\n    basic_get(\"/foo?bar\", {params: {fruit: \"apple\", dog: \"Spot the dog\"},\n                           query: \"\"},\n              \"/foo?fruit=apple&dog=Spot+the+dog\");\n  }]);\n\ntestAsyncMulti(\"httpcall - errors\", [\n  function(test, expect) {\n\n    // Accessing unknown server (should fail to make any connection)\n    var unknownServerCallback = function(error, result) {\n      test.isTrue(error);\n      test.isFalse(result);\n      test.isFalse(error.response);\n    };\n\n    const invalidIp = \"0.0.0.199\";\n    // This is an invalid destination IP address, and thus should always give an error.\n    // If your ISP is intercepting DNS misses and serving ads, an obviously\n    // invalid URL (http://asdf.asdf) might produce an HTTP response.\n    HTTP.call(\"GET\", `http://${invalidIp}/`, expect(unknownServerCallback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var unknownServerResult = HTTP.call(\"GET\", `http://${invalidIp}/`);\n        unknownServerCallback(undefined, unknownServerResult);\n      } catch (e) {\n        unknownServerCallback(e, e.response);\n      }\n    }\n\n    // Server serves 500\n    var error500Callback = function(error, result) {\n      test.isTrue(error);\n      test.isTrue(error.message.indexOf(\"500\") !== -1); // message has statusCode\n      test.isTrue(error.message.indexOf(\n        error.response.content.substring(0, 10)) !== -1); // message has part of content\n\n      test.isTrue(result);\n      test.isTrue(error.response);\n      test.equal(result, error.response);\n      test.equal(error.response.statusCode, 500);\n\n      // in test_responder.js we make a very long response body, to make sure\n      // that we truncate messages. first of all, make sure we didn't make that\n      // message too short, so that we can be sure we're verifying that we truncate.\n      test.isTrue(error.response.content.length > 520);\n      test.isTrue(error.message.length < 520); // make sure we truncate.\n    };\n    HTTP.call(\"GET\", url_prefix()+\"/fail\", expect(error500Callback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var error500Result = HTTP.call(\"GET\", url_prefix()+\"/fail\");\n        error500Callback(undefined, error500Result);\n      } catch (e) {\n        error500Callback(e, e.response);\n      }\n    }\n  }\n]);\n\ntestAsyncMulti(\"httpcall - timeout\", [\n  function(test, expect) {\n\n    // Should time out\n    var timeoutCallback = function(error, result) {\n      test.isTrue(error);\n      test.isFalse(result);\n      test.isFalse(error.response);\n    };\n    var timeoutUrl = url_prefix()+\"/slow-\"+Random.id();\n    HTTP.call(\n      \"GET\", timeoutUrl,\n      { timeout: 500 },\n      expect(timeoutCallback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var timeoutResult = HTTP.call(\"GET\", timeoutUrl, { timeout: 500 });\n        timeoutCallback(undefined, timeoutResult);\n      } catch (e) {\n        timeoutCallback(e, e.response);\n      }\n    }\n\n    // Should not time out\n    var noTimeoutCallback = function(error, result) {\n      test.isFalse(error);\n      test.isTrue(result);\n      test.equal(result.statusCode, 200);\n      var data = result.data;\n      test.equal(data.url.substring(0, 4), \"/foo\");\n      test.equal(data.method, \"GET\");\n    };\n    var noTimeoutUrl = url_prefix()+\"/foo-\"+Random.id();\n    HTTP.call(\n      \"GET\", noTimeoutUrl,\n      { timeout: 2000 },\n      expect(noTimeoutCallback));\n\n    if (Meteor.isServer) {\n      // test sync version\n      try {\n        var noTimeoutResult = HTTP.call(\"GET\", noTimeoutUrl, { timeout: 2000 });\n        noTimeoutCallback(undefined, noTimeoutResult);\n      } catch (e) {\n        noTimeoutCallback(e, e.response);\n      }\n    }\n  }\n]);\n\ntestAsyncMulti(\"httpcall - redirect\", [\n\n  function(test, expect) {\n    // Test that we follow redirects by default\n    HTTP.call(\"GET\", url_prefix()+\"/redirect\", expect(\n      function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n\n        // should be redirected transparently to /foo\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.url, \"/foo\");\n        test.equal(data.method, \"GET\");\n      }));\n\n    // followRedirect option; can't be false on client\n    _.each([false, true], function(followRedirects) {\n      var do_it = function(should_work) {\n        var maybe_expect = should_work ? expect : _.identity;\n        _.each([\"GET\", \"POST\"], function (method) {\n          HTTP.call(\n            method, url_prefix()+\"/redirect\",\n            {followRedirects: followRedirects},\n            maybe_expect(function(error, result) {\n              test.isFalse(error);\n              test.isTrue(result);\n\n              if (followRedirects) {\n                // should be redirected transparently to /foo\n                test.equal(result.statusCode, 200);\n                var data = result.data;\n                test.equal(data.url, \"/foo\");\n                // This is \"GET\" even when the initial request was a\n                // POST because browsers follow redirects with a GET\n                // even when the initial request was a different method.\n                test.equal(data.method, \"GET\");\n              } else {\n                // should see redirect\n                test.equal(result.statusCode, 301);\n              }\n            }));\n        });\n      };\n      if (Meteor.isClient && ! followRedirects) {\n        // not supported, should fail\n        test.throws(do_it);\n      } else {\n        do_it(true);\n      }\n    });\n  }\n\n]);\n\ntestAsyncMulti(\"httpcall - methods\", [\n\n  function(test, expect) {\n    // non-get methods\n    var test_method = function(meth, func_name) {\n      func_name = func_name || meth.toLowerCase();\n      HTTP[func_name](\n        url_prefix()+\"/foo\",\n        expect(function(error, result) {\n          test.isFalse(error);\n          test.isTrue(result);\n          test.equal(result.statusCode, 200);\n          var data = result.data;\n          test.equal(data.url, \"/foo\");\n\n          // IE <= 8 turns seems to turn POSTs with no body into\n          // GETs, inexplicably.\n          //\n          // XXX Except now it doesn't!? Not sure what changed, but\n          // these lines now break the test...\n          // if (Meteor.isClient && $.browser.msie && $.browser.version <= 8\n          //     && meth === \"POST\")\n          //   meth = \"GET\";\n\n          test.equal(data.method, meth);\n        }));\n    };\n\n    test_method(\"GET\");\n    test_method(\"POST\");\n    test_method(\"PUT\");\n    test_method(\"DELETE\", 'del');\n    test_method(\"PATCH\");\n  },\n\n  function(test, expect) {\n    // contents and data\n    HTTP.call(\n      \"POST\", url_prefix()+\"/foo\",\n      { content: \"Hello World!\" },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.body, \"Hello World!\");\n      }));\n\n    HTTP.call(\n      \"POST\", url_prefix()+\"/data-test\",\n      { data: {greeting: \"Hello World!\"} },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.body, {greeting: \"Hello World!\"});\n        // nb: some browsers include a charset here too.\n        test.matches(data.headers['content-type'], /^application\\/json\\b/);\n      }));\n\n    HTTP.call(\n      \"POST\", url_prefix()+\"/data-test-explicit\",\n      { data: {greeting: \"Hello World!\"},\n        headers: {'Content-Type': 'text/stupid'} },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.body, {greeting: \"Hello World!\"});\n        // nb: some browsers include a charset here too.\n        test.matches(data.headers['content-type'], /^text\\/stupid\\b/);\n      }));\n  }\n]);\n\ntestAsyncMulti(\"httpcall - http auth\", [\n  function(test, expect) {\n    // Test basic auth\n\n    // Unfortunately, any failed auth will result in a browser\n    // password prompt.  So we don't test auth failure, only\n    // success.\n\n    // Random password breaks in Firefox, because Firefox incorrectly\n    // uses cached credentials even if we supply different ones:\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=654348\n    var password = 'rocks';\n    //var password = Random.id().replace(/[^0-9a-zA-Z]/g, '');\n    HTTP.call(\n      \"GET\", url_prefix()+\"/login?\"+password,\n      { auth: \"meteor:\"+password },\n      expect(function(error, result) {\n        // should succeed\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.url, \"/login?\"+password);\n      }));\n\n    // test fail on malformed username:password\n    test.throws(function() {\n      HTTP.call(\n        \"GET\", url_prefix()+\"/login?\"+password,\n        { auth: \"fooooo\" },\n        function() { throw new Error(\"can't get here\"); });\n    });\n  }\n]);\n\ntestAsyncMulti(\"httpcall - headers\", [\n  function(test, expect) {\n    HTTP.call(\n      \"GET\", url_prefix()+\"/foo-with-headers\",\n      {headers: { \"Test-header\": \"Value\",\n                  \"another\": \"Value2\" } },\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n\n        test.equal(result.statusCode, 200);\n        var data = result.data;\n        test.equal(data.url, \"/foo-with-headers\");\n        test.equal(data.method, \"GET\");\n        test.equal(data.headers['test-header'], \"Value\");\n        test.equal(data.headers['another'], \"Value2\");\n      }));\n\n    HTTP.call(\n      \"GET\", url_prefix()+\"/headers\",\n      expect(function(error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n\n        test.equal(result.statusCode, 201);\n        test.equal(result.headers['a-silly-header'], \"Tis a\");\n        test.equal(result.headers['another-silly-header'], \"Silly place.\");\n      }));\n  }\n]);\n\ntestAsyncMulti(\"httpcall - params\", [\n  function(test, expect) {\n    var do_test = function(method, url, params, opt_opts, expect_url, expect_body) {\n      var opts = {};\n      if (typeof opt_opts === \"string\") {\n        // opt_opts omitted\n        expect_body = expect_url;\n        expect_url = opt_opts;\n      } else {\n        opts = opt_opts;\n      }\n      HTTP.call(\n        method, url_prefix()+url,\n        _.extend({ params: params }, opts),\n        expect(function(error, result) {\n          test.isFalse(error);\n          test.isTrue(result);\n          test.equal(result.statusCode, 200);\n          if (method !== \"HEAD\") {\n            var data = result.data;\n            test.equal(data.method, method);\n            test.equal(data.url, expect_url);\n            test.equal(data.body, expect_body);\n          }\n      }));\n    };\n\n    do_test(\"GET\", \"/blah\", {foo:\"bar\"}, \"/blah?foo=bar\", \"\");\n    do_test(\"GET\", \"/\", {foo:\"bar\", fruit:\"apple\"}, \"/?foo=bar&fruit=apple\", \"\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", fruit:\"apple\"}, \"/\", \"foo=bar&fruit=apple\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", fruit:\"apple\"}, \"/\", \"foo=bar&fruit=apple\");\n    do_test(\"GET\", \"/\", {'foo?':\"bang?\"}, {}, \"/?foo%3F=bang%3F\", \"\");\n    do_test(\"POST\", \"/\", {'foo?':\"bang?\"}, {}, \"/\", \"foo%3F=bang%3F\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", fruit:\"apple\"}, {\n      content: \"stuff!\"}, \"/?foo=bar&fruit=apple\", \"stuff!\");\n    do_test(\"POST\", \"/\", {foo:\"bar\", greeting:\"Hello World\"}, {\n      content: \"stuff!\"}, \"/?foo=bar&greeting=Hello+World\", \"stuff!\");\n    do_test(\"POST\", \"/foo\", {foo:\"bar\", greeting:\"Hello World\"},\n            \"/foo\", \"foo=bar&greeting=Hello+World\");\n    do_test(\"HEAD\", \"/head\", {foo:\"bar\"}, \"/head?foo=bar\", \"\");\n    do_test(\"PUT\", \"/put\", {foo:\"bar\"}, \"/put\", \"foo=bar\");\n  }\n]);\n\ntestAsyncMulti(\"httpcall - npmRequestOptions\", [\n  function (test, expect) {\n    if (Meteor.isClient) {\n      test.throws(function () {\n        HTTP.get(url_prefix() + \"/\",\n                 { npmRequestOptions: { encoding: null } },\n                 function () {});\n      });\n      return;\n    }\n\n    HTTP.get(\n      url_prefix() + \"/\",\n      { npmRequestOptions: { encoding: null } },\n      expect(function (error, result) {\n        test.isFalse(error);\n        test.isTrue(result);\n        test.equal(result.statusCode, 200);\n        test.instanceOf(result.content, Buffer);\n      })\n    );\n  }\n]);\n\nMeteor.isClient && testAsyncMulti(\"httpcall - beforeSend\", [\n  function (test, expect) {\n    var fired = false;\n    var bSend = function(xhr){\n      test.isFalse(fired);\n      fired = true;\n      test.isTrue(xhr instanceof XMLHttpRequest);\n    };\n\n    HTTP.get(url_prefix() + \"/\", {beforeSend: bSend}, expect(function () {\n      test.isTrue(fired);\n    }));\n  }\n]);\n\n\nif (Meteor.isServer) {\n  // This is testing the server's static file sending code, not the http\n  // package. It's here because it is very similar to the other tests\n  // here, even though it is testing something else.\n  //\n  // client http library mangles paths before they are requested. only\n  // run this test on the server.\n  testAsyncMulti(\"httpcall - static file serving\", [\n    function(test, expect) {\n      // Suppress error printing for this test (and for any other code that sets\n      // the x-suppress-error header).\n      WebApp.suppressConnectErrors();\n\n      var do_test = function (path, code, match) {\n        HTTP.get(\n          url_base() + path,\n          {headers: {'x-suppress-error': 'true'}},\n          expect(function(error, result) {\n            test.equal(result.statusCode, code);\n            if (match)\n              test.matches(result.content, match);\n          }));\n      };\n\n      // existing static file\n      do_test(\"/packages/local-test_http/test_static.serveme\", 200, /static file serving/);\n\n      // no such file, so return the default app HTML.\n      var getsAppHtml = [\n        // This file doesn't exist.\n        \"/nosuchfile\",\n\n        // Our static file serving doesn't process .. or its encoded version, so\n        // any of these return the app HTML.\n        \"/../nosuchfile\",\n        \"/%2e%2e/nosuchfile\",\n        \"/%2E%2E/nosuchfile\",\n        \"/%2d%2d/nosuchfile\",\n        \"/packages/http/../http/test_static.serveme\",\n        \"/packages/http/%2e%2e/http/test_static.serveme\",\n        \"/packages/http/%2E%2E/http/test_static.serveme\",\n        \"/packages/http/../../packages/http/test_static.serveme\",\n        \"/packages/http/%2e%2e/%2e%2e/packages/http/test_static.serveme\",\n        \"/packages/http/%2E%2E/%2E%2E/packages/http/test_static.serveme\",\n\n        // ... and they *definitely* shouldn't be able to escape the app bundle.\n        \"/packages/http/../../../../../../packages/http/test_static.serveme\",\n        \"/../../../../../../../../../../../bin/ls\",\n        \"/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/bin/ls\",\n        \"/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/%2E%2E/bin/ls\"\n      ];\n\n      _.each(getsAppHtml, function (x) {\n        do_test(x, 200, /__meteor_runtime_config__ = JSON/);\n      });\n    }\n  ]);\n}\n\nMeteor.isServer && Tinytest.add(\"httpcall - npm modules\", function (test) {\n  // Make sure the version number looks like a version number. (All published\n  // request version numbers end in \".0\".)\n  test.matches(HTTPInternals.NpmModules.request.version, /^2\\.(\\d+)\\.0/);\n  test.equal(typeof(HTTPInternals.NpmModules.request.module), 'function');\n  test.isTrue(HTTPInternals.NpmModules.request.module.get);\n});\n\n// TO TEST/ADD:\n// - https\n// - cookies?\n// - human-readable error reason/cause?\n// - data parse error\n"]},"hash":"7fb45e70de4db00a55358e5f50325a71e910857a"}
