{"_id":"fibers","_rev":"178-5694c940ea115bb10ab042b2a4a2c59d","name":"fibers","description":"Cooperative multi-tasking for Javascript","dist-tags":{"latest":"2.0.0"},"versions":{"0.1.0":{"name":"fibers","version":"0.1.0","description":"Cooperative multi-tasking for Javascript; or, the closet thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make"},"bin":{"node-fibers":"./bin/node-fibers","fiber-shim":"./bin/fiber-shim"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.2.0"},"_id":"fibers@0.1.0","_engineSupported":true,"_npmVersion":"0.2.15","_nodeVersion":"v0.3.6","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"3b0bb5be2b52713ccacf408a97119521fc0dd18c","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.1.0.tgz"}},"0.1.1":{"name":"fibers","version":"0.1.1","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers","fiber-shim":"./bin/fiber-shim"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.2.0"},"_id":"fibers@0.1.1","_engineSupported":true,"_npmVersion":"0.2.15","_nodeVersion":"v0.3.6","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"a57e987c8158ae4424a0498255b77f26c9ef114b","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.1.1.tgz"}},"0.1.2":{"name":"fibers","version":"0.1.2","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers","fiber-shim":"./bin/fiber-shim"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.2.0"},"_id":"fibers@0.1.2","_engineSupported":true,"_npmVersion":"0.2.15","_nodeVersion":"v0.3.6","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"5d1868d644e92a09c67fd67ceeec95e51a68bdf2","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.1.2.tgz"}},"0.1.3":{"name":"fibers","version":"0.1.3","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers","fiber-shim":"./bin/fiber-shim"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.2.0"},"_id":"fibers@0.1.3","_engineSupported":true,"_npmVersion":"0.2.17","_nodeVersion":"v0.3.8-pre","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"c29124209c7b506a52c1a6904e55c00fadbb1dde","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.1.3.tgz"}},"0.1.4":{"name":"fibers","version":"0.1.4","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers","fiber-shim":"./bin/fiber-shim"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.2.0"},"_id":"fibers@0.1.4","_engineSupported":true,"_npmVersion":"0.3.0-6","_nodeVersion":"v0.4.0","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"523b518ce8d49485267589ae4de38c335a93bd92","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.1.4.tgz"}},"0.1.6":{"name":"fibers","version":"0.1.6","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers","fiber-shim":"./bin/fiber-shim"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.2.0"},"_id":"fibers@0.1.6","_engineSupported":true,"_npmVersion":"0.3.0-9","_nodeVersion":"v0.4.0","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"dc3c9480f840b150a8e3fe5e5714d070f8981d79","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.1.6.tgz"}},"0.1.7":{"name":"fibers","version":"0.1.7","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers","fiber-shim":"./bin/fiber-shim"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.2.0"},"_id":"fibers@0.1.7","_engineSupported":true,"_npmVersion":"0.3.0-9","_nodeVersion":"v0.4.0","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"448b4f9a1a94c82ff379030caa6fbeb2ef662527","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.1.7.tgz"}},"0.1.8":{"name":"fibers","version":"0.1.8","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers","fiber-shim":"./bin/fiber-shim"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.2.0"},"_id":"fibers@0.1.8","_engineSupported":true,"_npmVersion":"0.3.3","_nodeVersion":"v0.4.0","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"b5b6257f1bb561d7bc5b5eb68f331d13d70cf644","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.1.8.tgz"}},"0.2.0":{"name":"fibers","version":"0.2.0","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers","fiber-shim":"./bin/fiber-shim"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.2.0"},"_id":"fibers@0.2.0","_engineSupported":true,"_npmVersion":"0.3.3","_nodeVersion":"v0.4.0","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"c8c545abb260f295abe5df37b2869bcbefc1b0b8","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.2.0.tgz"}},"0.2.1":{"name":"fibers","version":"0.2.1","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers","fiber-shim":"./bin/fiber-shim"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.2.0"},"_id":"fibers@0.2.1","_engineSupported":true,"_npmVersion":"0.3.3","_nodeVersion":"v0.4.0","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"424bcf5ca55e8dadfc3fec64f0ebdf19bec668c6","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.2.1.tgz"}},"0.2.2":{"name":"fibers","version":"0.2.2","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.3.0"},"_id":"fibers@0.2.2","_engineSupported":true,"_npmVersion":"0.3.3","_nodeVersion":"v0.4.0","directories":{"bin":"./bin"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"201358d7600ac790bc847af754556a64bc2fc1b3","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.2.2.tgz"}},"0.2.3":{"name":"fibers","version":"0.2.3","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.3.0"},"_id":"fibers@0.2.3","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.4.2","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"92222f6ef203e4021343f2c33d81d9fc14365391","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.2.3.tgz"}},"0.2.4":{"name":"fibers","version":"0.2.4","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.3.0"},"_id":"fibers@0.2.4","_engineSupported":true,"_npmVersion":"0.3.15","_nodeVersion":"v0.5.0-pre","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"8a82b9b43bc3ec35b0332e7fcc3ae0449baebb4b","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.2.4.tgz"}},"0.2.5":{"name":"fibers","version":"0.2.5","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.3.0"},"_id":"fibers@0.2.5","_engineSupported":true,"_npmVersion":"0.3.18","_nodeVersion":"v0.4.5","directories":{"bin":"./bin","man":"./man"},"files":[""],"_defaultsLoaded":true,"dist":{"shasum":"a22ea29eb1a3ad158e6692c4c0fa7798464e4d43","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.2.5.tgz"}},"0.2.6":{"name":"fibers","version":"0.2.6","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.3.0"},"dependencies":{},"devDependencies":{},"_id":"fibers@0.2.6","_engineSupported":true,"_npmVersion":"1.0.1rc9","_nodeVersion":"v0.5.0-pre","_defaultsLoaded":true,"dist":{"shasum":"47ce34088f3cf25787e8c2e75b62ed5b5370ca88","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.2.6.tgz"},"directories":{}},"0.5.0":{"name":"fibers","version":"0.5.0","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"bin":{"node-fibers":"./bin/node-fibers"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.3.0"},"_npmJsonOpts":{"file":"/Users/marcel/.npm/fibers/0.5.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"fibers@0.5.0","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.5.1-pre","_defaultsLoaded":true,"dist":{"shasum":"d5868bd8bc97e69d9c420a592547b285d1883d35","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.5.0.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"0.6.0":{"name":"fibers","version":"0.6.0","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/marcel/.npm/fibers/0.6.0/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"fibers@0.6.0","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.5.2","_defaultsLoaded":true,"dist":{"shasum":"1bf663a30d53c014d22985d1648ae2d190139753","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.6.0.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"0.5.1":{"name":"fibers","version":"0.5.1","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.3.0"},"_npmJsonOpts":{"file":"/Users/marcel/.npm/fibers/0.5.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"fibers@0.5.1","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"5bb599571cfa62054b6e87beb586a8be0abf8cc7","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.5.1.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"0.6.1":{"name":"fibers","version":"0.6.1","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/marcel/.npm/fibers/0.6.1/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"fibers@0.6.1","dependencies":{},"devDependencies":{},"_engineSupported":false,"_npmVersion":"1.0.22","_nodeVersion":"v0.4.11","_defaultsLoaded":true,"dist":{"shasum":"818bda29fc2bd395f18e95f7f964b0e1256e6ff6","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.6.1.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"0.6.2":{"name":"fibers","version":"0.6.2","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/marcel/.npm/fibers/0.6.2/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"fibers@0.6.2","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.5.8","_defaultsLoaded":true,"dist":{"shasum":"8ac8d30a5dfe87e23d8fc582ca734fed26139180","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.6.2.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"0.6.3":{"name":"fibers","version":"0.6.3","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.5.2"},"_npmJsonOpts":{"file":"/Users/marcel/.npm/fibers/0.6.3/package/package.json","wscript":false,"contributors":false,"serverjs":false},"_id":"fibers@0.6.3","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.0.22","_nodeVersion":"v0.5.9-pre","_defaultsLoaded":true,"dist":{"shasum":"bca6e0af4c8af3932616730c6f6f828cf9f17693","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.6.3.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"0.6.4":{"name":"fibers","version":"0.6.4","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["macos","linux"],"engines":{"node":">=0.5.2"},"_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"_id":"fibers@0.6.4","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-beta-9","_nodeVersion":"v0.6.2","_defaultsLoaded":true,"dist":{"shasum":"2b7665d217bd806b56481ca190783c8fd3f5159b","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.6.4.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"0.6.5":{"name":"fibers","version":"0.6.5","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"make clean all"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["darwin","linux"],"engines":{"node":">=0.5.2"},"_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"_id":"fibers@0.6.5","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-beta-9","_nodeVersion":"v0.7.4-pre","_defaultsLoaded":true,"dist":{"shasum":"634ce7591f4e64666c22bc5aa3a79c935481903a","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.6.5.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"0.6.6":{"name":"fibers","version":"0.6.6","description":"Cooperative multi-tasking for Javascript; or, the closest thing to a thread you'll see in node","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"$(which gmake || which make) clean native"},"man":["./man/fibers.1"],"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"os":["darwin","linux","sunos","openbsd","freebsd"],"engines":{"node":">=0.5.2"},"_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"_id":"fibers@0.6.6","dependencies":{},"devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-beta-9","_nodeVersion":"v0.7.8-pre","_defaultsLoaded":true,"dist":{"shasum":"9e05866eb6abb92c7790eaf1f80c2824568266aa","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.6.6.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"0.6.7":{"name":"fibers","version":"0.6.7","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node ./build.js","test":"node ./test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"engines":{"node":">=0.5.2"},"dependencies":{"node-gyp":"*"},"_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"_id":"fibers@0.6.7","devDependencies":{},"_engineSupported":true,"_npmVersion":"1.1.0-beta-9","_nodeVersion":"v0.7.9-pre","_defaultsLoaded":true,"dist":{"shasum":"dada11fd1cc352a26e53752df2d65c52fa2688a9","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.6.7.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"0.6.8":{"name":"fibers","version":"0.6.8","description":"fibers(1) -- Fiber support for v8 and Node ==========================================","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node ./build.js","test":"node ./test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"engines":{"node":">=0.5.2"},"_id":"fibers@0.6.8","_from":"fibers","dist":{"shasum":"0d860559e72488f2f00c6cd97c6881fd40c59dd5","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.6.8.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"0.6.9":{"name":"fibers","version":"0.6.9","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node ./build.js","test":"node ./test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"engines":{"node":">=0.5.2"},"_id":"fibers@0.6.9","dist":{"shasum":"252d7e384113f8a8b934c2d9290598aa053350da","tarball":"https://registry.npmjs.org/fibers/-/fibers-0.6.9.tgz"},"_npmVersion":"1.1.59","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"1.0.0":{"name":"fibers","version":"1.0.0","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node ./build.js","test":"node ./test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"engines":{"node":">=0.5.2"},"_id":"fibers@1.0.0","dist":{"shasum":"77e17f59f53c57e154b84bc4ca195f20d91d8fca","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.0.tgz"},"_from":".","_npmVersion":"1.2.14","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"1.0.1":{"name":"fibers","version":"1.0.1","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node ./build.js","test":"node ./test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"engines":{"node":">=0.5.2"},"_id":"fibers@1.0.1","dist":{"shasum":"6c4cb3b3815176fc4aad821df67442d8185d7a66","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.1.tgz"},"_from":".","_npmVersion":"1.2.18","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"1.0.2":{"name":"fibers","version":"1.0.2","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node ./build.js","test":"node ./test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"engines":{"node":">=0.5.2"},"bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.2","dist":{"shasum":"5e24eb5bd929c2be607047dbf88fa758514d3927","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.2.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"directories":{}},"1.0.4":{"name":"fibers","version":"1.0.4","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node ./build.js","test":"node ./test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"engines":{"node":">=0.5.2"},"gitHead":"4de9de194aa5a2b37c07ddf65763d27044ff30ef","bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.4","_shasum":"0b33e6429c4b0e237fd249c7e14fad328cdf0c76","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"dist":{"shasum":"0b33e6429c4b0e237fd249c7e14fad328cdf0c76","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.4.tgz"},"directories":{}},"1.0.5":{"name":"fibers","version":"1.0.5","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node ./build.js","test":"node ./test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"engines":{"node":">=0.5.2"},"gitHead":"aff726a79af0c9d400ec0fa37be53f23643a4623","bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.5","_shasum":"3bea1f697d8540bb3904961ad50939bdee1df678","_from":".","_npmVersion":"1.4.28","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"dist":{"shasum":"3bea1f697d8540bb3904961ad50939bdee1df678","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.5.tgz"},"directories":{}},"1.0.6-b":{"name":"fibers","version":"1.0.6-b","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node build.js || nodejs build.js","test":"node test.js || nodejs test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"license":"MIT","engines":{"node":">=0.5.2"},"gitHead":"8c591087fcc5768d209ff8a30979c9257503d13f","bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.6-b","_shasum":"a5a60949c24b401ab5487977211821d9ed9c4223","_from":".","_npmVersion":"2.11.3","_nodeVersion":"2.3.2","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"dist":{"shasum":"a5a60949c24b401ab5487977211821d9ed9c4223","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.6-b.tgz"},"directories":{}},"1.0.7":{"name":"fibers","version":"1.0.7","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node build.js || nodejs build.js","test":"node test.js || nodejs test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"license":"MIT","engines":{"node":">=0.5.2"},"gitHead":"8c591087fcc5768d209ff8a30979c9257503d13f","bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.7","_shasum":"7dabae2b238188caa3748a8968c3c9df91752982","_from":".","_npmVersion":"2.11.3","_nodeVersion":"2.3.2","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"dist":{"shasum":"7dabae2b238188caa3748a8968c3c9df91752982","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.7.tgz"},"directories":{}},"1.0.8":{"name":"fibers","version":"1.0.8","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node build.js || nodejs build.js","test":"node test.js || nodejs test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"license":"MIT","engines":{"node":">=0.5.2"},"gitHead":"7dfdb6d2fb1e3fabf26d1f6d5102e08d0c557c5d","bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.8","_shasum":"cbffda427c4e588a6f8601c2a07d134b092077f2","_from":".","_npmVersion":"3.3.12","_nodeVersion":"5.1.0","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"dist":{"shasum":"cbffda427c4e588a6f8601c2a07d134b092077f2","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.8.tgz"},"directories":{}},"1.0.9":{"name":"fibers","version":"1.0.9","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node build.js || nodejs build.js","test":"node test.js || nodejs test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"license":"MIT","engines":{"node":">=0.5.2"},"gitHead":"e09057a0c7b028544f26a28df39c4a422734d467","bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.9","_shasum":"9adedaa5d9a13bcd8056ba69af0ca6ede3549f1f","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.1","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"dist":{"shasum":"9adedaa5d9a13bcd8056ba69af0ca6ede3549f1f","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.9.tgz"},"_npmOperationalInternal":{"host":"packages-6-west.internal.npmjs.com","tmp":"tmp/fibers-1.0.9.tgz_1455152353277_0.5520556389819831"},"directories":{}},"1.0.10":{"name":"fibers","version":"1.0.10","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node build.js || nodejs build.js","test":"node test.js || nodejs test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"license":"MIT","engines":{"node":">=0.5.2"},"gitHead":"4e31a39d35635251e8680301dccf7d186396f739","bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.10","_shasum":"0ccea7287e5dafd2626c2c9d3f15113a1b5829cd","_from":".","_npmVersion":"2.14.4","_nodeVersion":"4.1.1","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"dist":{"shasum":"0ccea7287e5dafd2626c2c9d3f15113a1b5829cd","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.10.tgz"},"_npmOperationalInternal":{"host":"packages-5-east.internal.npmjs.com","tmp":"tmp/fibers-1.0.10.tgz_1456365159038_0.8597446731291711"},"directories":{}},"1.0.11":{"name":"fibers","version":"1.0.11","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node build.js || nodejs build.js","test":"node test.js || nodejs test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"license":"MIT","engines":{"node":">=0.5.2"},"gitHead":"722b14ffb04c83876d3ca8de3f67a3acc3fd0115","bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.11","_shasum":"f11ef70e7dda6426a1f3fa3d34d5d7474ada671b","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.0.0","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"dist":{"shasum":"f11ef70e7dda6426a1f3fa3d34d5d7474ada671b","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.11.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/fibers-1.0.11.tgz_1462299523408_0.36823642742820084"},"directories":{}},"1.0.12":{"name":"fibers","version":"1.0.12","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node build.js || nodejs build.js","test":"node test.js || nodejs test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"license":"MIT","engines":{"node":">=0.5.2"},"gitHead":"722b14ffb04c83876d3ca8de3f67a3acc3fd0115","bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.12","_shasum":"09fedadc90a0a325fc2d4c82594360946370da29","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.0.0","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"dist":{"shasum":"09fedadc90a0a325fc2d4c82594360946370da29","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.12.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/fibers-1.0.12.tgz_1462306169476_0.19019678514450788"},"directories":{}},"1.0.13":{"name":"fibers","version":"1.0.13","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node build.js || nodejs build.js","test":"node test.js || nodejs test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"license":"MIT","engines":{"node":">=0.5.2"},"gitHead":"dfb51692edc6f93787c602ede6c08067f9ce7bf3","bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.13","_shasum":"35e0aba17ad9f8cea35f712ef8cc445470f0740d","_from":".","_npmVersion":"3.8.6","_nodeVersion":"6.0.0","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"dist":{"shasum":"35e0aba17ad9f8cea35f712ef8cc445470f0740d","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.13.tgz"},"_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/fibers-1.0.13.tgz_1462729077451_0.3959117094054818"},"directories":{}},"1.0.14":{"_args":[["fibers","/Users/marcel/tmp"]],"_from":".","_id":"fibers@1.0.14","_inCache":true,"_installable":true,"_location":"/fibers","_nodeVersion":"6.5.0","_npmOperationalInternal":{"host":"packages-16-east.internal.npmjs.com","tmp":"tmp/fibers-1.0.14.tgz_1472720842044_0.8893263016361743"},"_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"_npmVersion":"3.10.3","_phantomChildren":{},"_requested":{"name":"fibers","raw":"fibers","rawSpec":"","scope":null,"spec":"latest","type":"tag"},"_requiredBy":["#USER"],"_shasum":"824bc9a950691a0b2a52c30a69ddf62bc158d1ca","_shrinkwrap":null,"_spec":"fibers","_where":"/Users/marcel/tmp","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"dependencies":{},"description":"Cooperative multi-tasking for Javascript","devDependencies":{},"directories":{},"dist":{"shasum":"824bc9a950691a0b2a52c30a69ddf62bc158d1ca","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.14.tgz"},"engines":{"node":">=0.5.2"},"gitHead":"dfb51692edc6f93787c602ede6c08067f9ce7bf3","homepage":"https://github.com/laverdet/node-fibers","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"license":"MIT","main":"fibers","maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"name":"fibers","optionalDependencies":{},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"scripts":{"install":"node build.js || nodejs build.js","test":"node test.js || nodejs test.js"},"version":"1.0.14"},"1.0.15":{"name":"fibers","version":"1.0.15","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node build.js || nodejs build.js","test":"node test.js || nodejs test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"license":"MIT","engines":{"node":">=0.5.2"},"gitHead":"8d7e4ffeb5151ade2ef32455080fbb2ffc226e13","bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@1.0.15","_shasum":"22f039c8f18b856190fbbe4decf056154c1eae9c","_from":".","_npmVersion":"3.10.3","_nodeVersion":"6.5.0","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"dist":{"shasum":"22f039c8f18b856190fbbe4decf056154c1eae9c","tarball":"https://registry.npmjs.org/fibers/-/fibers-1.0.15.tgz"},"_npmOperationalInternal":{"host":"packages-12-west.internal.npmjs.com","tmp":"tmp/fibers-1.0.15.tgz_1475775502850_0.722931124502793"},"directories":{}},"2.0.0":{"name":"fibers","version":"2.0.0","description":"Cooperative multi-tasking for Javascript","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"homepage":"https://github.com/laverdet/node-fibers","author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"main":"fibers","scripts":{"install":"node build.js || nodejs build.js","test":"node test.js || nodejs test.js"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"license":"MIT","engines":{"node":">=0.5.2"},"bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"_id":"fibers@2.0.0","_npmVersion":"5.0.0","_nodeVersion":"8.0.0","_npmUser":{"name":"laverdet","email":"marcel.npm@laverdet.com"},"dist":{"integrity":"sha512-sLxo4rZVk7xLgAjb/6zEzHJfSALx6u6coN1z61XCOF7i6CyTdJawF4+RdpjCSeS8AP66eR2InScbYAz9RAVOgA==","shasum":"f26d0aaf1f99995fbe1cb3f340efac08bda9dc4b","tarball":"https://registry.npmjs.org/fibers/-/fibers-2.0.0.tgz"},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"_npmOperationalInternal":{"host":"s3://npm-registry-packages","tmp":"tmp/fibers-2.0.0.tgz_1496688401588_0.38031439599581063"},"directories":{}}},"maintainers":[{"name":"laverdet","email":"marcel.npm@laverdet.com"}],"time":{"modified":"2017-09-08T01:20:59.633Z","created":"2011-01-23T09:53:42.599Z","0.1.0":"2011-01-23T09:53:43.234Z","0.1.1":"2011-01-24T16:17:18.486Z","0.1.2":"2011-01-26T00:02:39.875Z","0.1.3":"2011-02-03T14:15:05.390Z","0.1.4":"2011-02-17T16:46:57.002Z","0.1.6":"2011-02-18T19:13:41.166Z","0.1.7":"2011-02-18T21:26:59.025Z","0.1.8":"2011-02-20T17:22:27.151Z","0.2.0":"2011-02-22T18:07:40.209Z","0.2.1":"2011-02-23T14:23:03.664Z","0.2.2":"2011-02-24T14:08:53.993Z","0.2.3":"2011-03-11T14:41:19.929Z","0.2.4":"2011-03-28T13:31:23.290Z","0.2.5":"2011-04-12T23:35:18.315Z","0.2.6":"2011-05-03T23:13:32.431Z","0.5.0":"2011-07-27T01:56:02.667Z","0.6.0":"2011-08-13T10:59:27.615Z","0.6.1":"2011-08-30T01:03:33.516Z","0.5.1":"2011-09-01T11:23:28.961Z","0.6.2":"2011-10-08T08:03:13.688Z","0.6.3":"2011-10-24T22:39:28.151Z","0.6.4":"2012-01-05T05:27:11.615Z","0.6.5":"2012-03-17T17:16:04.959Z","0.6.6":"2012-04-27T06:10:46.606Z","0.6.7":"2012-05-09T10:15:37.577Z","0.6.8":"2012-06-30T19:55:36.068Z","0.6.9":"2012-09-02T06:15:14.234Z","1.0.0":"2013-03-18T19:46:17.630Z","1.0.1":"2013-06-13T06:16:46.973Z","1.0.2":"2014-08-25T03:55:58.794Z","1.0.3":"2014-12-17T19:40:03.194Z","1.0.4":"2015-01-03T03:35:31.591Z","1.0.5":"2015-01-07T02:15:14.417Z","1.0.6":"2015-07-02T22:57:24.679Z","1.0.6-b":"2015-09-11T22:11:19.016Z","1.0.7":"2015-09-11T22:13:26.446Z","1.0.8":"2015-12-01T07:58:49.555Z","1.0.9":"2016-02-11T00:59:17.254Z","1.0.10":"2016-02-25T01:52:40.125Z","1.0.11":"2016-05-03T18:18:46.378Z","1.0.12":"2016-05-03T20:09:32.203Z","1.0.13":"2016-05-08T17:37:58.533Z","1.0.14":"2016-09-01T09:07:25.414Z","1.0.15":"2016-10-06T17:38:25.126Z","1.0.16":"2017-06-04T03:46:48.255Z","2.0.0":"2017-06-05T18:46:43.229Z"},"author":{"name":"Marcel Laverdet","email":"marcel@laverdet.com","url":"https://github.com/laverdet/"},"repository":{"type":"git","url":"git://github.com/laverdet/node-fibers.git"},"users":{"fgribreau":true,"ramanshalupau":true,"lych":true,"zetay":true,"dercoder":true,"ksnyde":true,"sherylynn":true,"fill":true,"gonzalofj":true,"fatelei":true,"rifaqat":true,"fresheneesz":true,"dickeylth":true,"derickchou0129":true,"nickleefly":true,"markthethomas":true,"pobrien":true,"koslun":true,"goodseller":true,"n370":true,"monolithed":true,"dbuggerx":true,"magicxiao85":true,"nickeljew":true,"allenfuller":true,"neckro":true,"zxbing0066":true,"zuizuihao":true,"ristostevcev":true,"timogriese":true,"bluelovers":true,"456wyc":true,"zenonn40":true,"rexpan":true,"i-erokhin":true,"qlqllu":true,"shakakira":true,"matiasmarani":true,"superwf":true,"giordanocardillo":true,"ys_sidson_aidson":true,"soenkekluth":true,"zerongga":true},"readme":"fibers(1) -- Fiber support for v8 and Node\n==========================================\n\nINSTALLING\n----------\n\n### via npm\n* `npm install fibers`\n* You're done! (see \"supported platforms\" below if you run into errors)\n\n### from source\n* `git clone git://github.com/laverdet/node-fibers.git`\n* `cd node-fibers`\n* `npm install`\n\nNote: node-fibers uses [node-gyp](https://github.com/TooTallNate/node-gyp) for\nbuilding. To manually invoke the build process, you can use `node-gyp rebuild`.\nThis will put the compiled extension in `build/Release/fibers.node`. However,\nwhen you do `require('fibers')`, it will expect the module to be in, for\nexample, `bin/linux-x64-v8-3.11/fibers.node`. You can manually put the module\nhere every time you build, or you can use the included build script. Either\n`npm install` or `node build -f` will do this for you. If you are going to be\nhacking on node-fibers, it may be worthwhile to first do `node-gyp configure`\nand then for subsequent rebuilds you can just do `node-gyp build` which will\nbe faster than a full `npm install` or `node-gyp rebuild`.\n\n### meteor users please read this\nIf you're trying to get meteor running and you ended up at this page you're\nprobably doing something wrong. Please uninstall all versions of NodeJS and\nMeteor, then start over. See\n[meteor#5124](https://github.com/meteor/meteor/issues/5124) for more\ninformation.\n\n### supported platforms\nIf you are running NodeJS version 4.x, 5.x, or 6.x on Linux, OS X, or Windows\n(7 or later) then you should be able to install fibers from npm just fine. If\nyou are running an older (or newer) version of node or some other operating\nsystem you will have to compile fibers on your system.\n\n(special thanks to [Jeroen Janssen](https://github.com/japj) for his work on\nfibers in Windows)\n\nIf you do end up needing to compile fibers first make sure you have node-gyp\ninstalled as a global dependency (`npm install -g node-gyp`), and that you have\nsetup your build enviroment by following the instructions at\n[node-gyp](https://github.com/TooTallNate/node-gyp). Ubuntu-flavored Linux users\nmay need to run `sudo apt-get install g++` as well.\n\n\nEXAMPLES\n--------\n\nThe examples below describe basic use of `Fiber`, but note that it is **not\nrecommended** to use `Fiber` without an abstraction in between your code and\nfibers. See \"FUTURES\" below for additional information.\n\n### Sleep\nThis is a quick example of how you can write sleep() with fibers. Note that\nwhile the sleep() call is blocking inside the fiber, node is able to handle\nother events.\n\n\t$ cat sleep.js\n\n```javascript\nvar Fiber = require('fibers');\n\nfunction sleep(ms) {\n\tvar fiber = Fiber.current;\n\tsetTimeout(function() {\n\t\tfiber.run();\n\t}, ms);\n\tFiber.yield();\n}\n\nFiber(function() {\n\tconsole.log('wait... ' + new Date);\n\tsleep(1000);\n\tconsole.log('ok... ' + new Date);\n}).run();\nconsole.log('back in main');\n```\n\n\t$ node sleep.js\n\twait... Fri Jan 21 2011 22:42:04 GMT+0900 (JST)\n\tback in main\n\tok... Fri Jan 21 2011 22:42:05 GMT+0900 (JST)\n\n\n### Incremental Generator\nYielding execution will resume back in the fiber right where you left off. You\ncan also pass values back and forth through yield() and run(). Again, the node\nevent loop is never blocked while this script is running.\n\n\t$ cat generator.js\n\n```javascript\nvar Fiber = require('fibers');\n\nvar inc = Fiber(function(start) {\n\tvar total = start;\n\twhile (true) {\n\t\ttotal += Fiber.yield(total);\n\t}\n});\n\nfor (var ii = inc.run(1); ii <= 10; ii = inc.run(1)) {\n\tconsole.log(ii);\n}\n```\n\n\t$ node generator.js\n\t1\n\t2\n\t3\n\t4\n\t5\n\t6\n\t7\n\t8\n\t9\n\t10\n\n\n### Fibonacci Generator\nExpanding on the incremental generator above, we can create a generator which\nreturns a new Fibonacci number with each invocation. You can compare this with\nthe [ECMAScript Harmony\nGenerator](http://wiki.ecmascript.org/doku.php?id=harmony:generators) Fibonacci\nexample.\n\n\t$ cat fibonacci.js\n\n```javascript\nvar Fiber = require('fibers');\n\n// Generator function. Returns a function which returns incrementing\n// Fibonacci numbers with each call.\nfunction Fibonacci() {\n\t// Create a new fiber which yields sequential Fibonacci numbers\n\tvar fiber = Fiber(function() {\n\t\tFiber.yield(0); // F(0) -> 0\n\t\tvar prev = 0, curr = 1;\n\t\twhile (true) {\n\t\t\tFiber.yield(curr);\n\t\t\tvar tmp = prev + curr;\n\t\t\tprev = curr;\n\t\t\tcurr = tmp;\n\t\t}\n\t});\n\t// Return a bound handle to `run` on this fiber\n\treturn fiber.run.bind(fiber);\n}\n\n// Initialize a new Fibonacci sequence and iterate up to 1597\nvar seq = Fibonacci();\nfor (var ii = seq(); ii <= 1597; ii = seq()) {\n\tconsole.log(ii);\n}\n```\n\n\t$ node fibonacci.js\n\t0\n\t1\n\t1\n\t2\n\t3\n\t5\n\t8\n\t13\n\t21\n\t34\n\t55\n\t89\n\t144\n\t233\n\t377\n\t610\n\t987\n\t1597\n\n\n### Basic Exceptions\nFibers are exception-safe; exceptions will continue travelling through fiber\nboundaries:\n\n\t$ cat error.js\n\n```javascript\nvar Fiber = require('fibers');\n\nvar fn = Fiber(function() {\n\tconsole.log('async work here...');\n\tFiber.yield();\n\tconsole.log('still working...');\n\tFiber.yield();\n\tconsole.log('just a little bit more...');\n\tFiber.yield();\n\tthrow new Error('oh crap!');\n});\n\ntry {\n\twhile (true) {\n\t\tfn.run();\n\t}\n} catch(e) {\n\tconsole.log('safely caught that error!');\n\tconsole.log(e.stack);\n}\nconsole.log('done!');\n```\n\n\t$ node error.js\n\tasync work here...\n\tstill working...\n\tjust a little bit more...\n\tsafely caught that error!\n\tError: oh crap!\n\t\t\tat error.js:11:9\n\tdone!\n\n\nFUTURES\n-------\n\nUsing the `Fiber` class without an abstraction in between your code and the raw\nAPI is **not recommended**. `Fiber` is meant to implement the smallest amount of\nfunctionality in order make possible many different programming patterns. This\nmakes the `Fiber` class relatively lousy to work with directly, but extremely\npowerful when coupled with a decent abstraction. There is no right answer for\nwhich abstraction is right for you and your project. Included with `node-fibers`\nis an implementation of \"futures\" which is fiber-aware. Usage of this library\nis documented below. There are several other externally-maintained options\nwhich can be found on the [wiki](https://github.com/laverdet/node-fibers/wiki).\nYou **should** feel encouraged to be creative with fibers and build a solution\nwhich works well with your project. For instance, `Future` is not a good\nabstraction to use if you want to build a generator function (see Fibonacci\nexample above).\n\nUsing `Future` to wrap existing node functions. At no point is the node event\nloop blocked:\n\n\t$ cat ls.js\n\n```javascript\nvar Future = require('fibers/future');\nvar fs = Future.wrap(require('fs'));\n\nFuture.task(function() {\n\t// Get a list of files in the directory\n\tvar fileNames = fs.readdirFuture('.').wait();\n\tconsole.log('Found '+ fileNames.length+ ' files');\n\n\t// Stat each file\n\tvar stats = [];\n\tfor (var ii = 0; ii < fileNames.length; ++ii) {\n\t\tstats.push(fs.statFuture(fileNames[ii]));\n\t}\n\tstats.map(function(f) {\n\t\tf.wait()\n\t});\n\n\t// Print file size\n\tfor (var ii = 0; ii < fileNames.length; ++ii) {\n\t\tconsole.log(fileNames[ii]+ ': '+ stats[ii].get().size);\n\t}\n}).detach();\n```\n\n\t$ node ls.js \n\tFound 11 files\n\tbin: 4096\n\tfibers.js: 1708\n\t.gitignore: 37\n\tREADME.md: 8664\n\tfuture.js: 5833\n\t.git: 4096\n\tLICENSE: 1054\n\tsrc: 4096\n\tls.js: 860\n\tMakefile: 436\n\tpackage.json: 684\n\n\nThe future API is designed to make it easy to move between classic\ncallback-style code and fiber-aware waiting code:\n\n\t$ cat sleep.js\n\n```javascript\nvar Future = require('fibers/future'), wait = Future.wait;\n\n// This function returns a future which resolves after a timeout. This\n// demonstrates manually resolving futures.\nfunction sleep(ms) {\n\tvar future = new Future;\n\tsetTimeout(function() {\n\t\tfuture.return();\n\t}, ms);\n\treturn future;\n}\n\n// You can create functions which automatically run in their own fiber and\n// return futures that resolve when the fiber returns (this probably sounds\n// confusing.. just play with it to understand).\nvar calcTimerDelta = function(ms) {\n\tvar start = new Date;\n\tsleep(ms).wait();\n\treturn new Date - start;\n}.future(); // <-- important!\n\n// And futures also include node-friendly callbacks if you don't want to use\n// wait()\ncalcTimerDelta(2000).resolve(function(err, val) {\n\tconsole.log('Set timer for 2000ms, waited '+ val+ 'ms');\n});\n```\n\n\t$ node sleep.js\n\tSet timer for 2000ms, waited 2009ms\n\n\nAPI DOCUMENTATION\n-----------------\nFiber's definition looks something like this:\n\n```javascript\n/**\n * Instantiate a new Fiber. You may invoke this either as a function or as\n * a constructor; the behavior is the same.\n *\n * When run() is called on this fiber for the first time, `fn` will be\n * invoked as the first frame on a new stack. Execution will continue on\n * this new stack until `fn` returns, or Fiber.yield() is called.\n *\n * After the function returns the fiber is reset to original state and\n * may be restarted with another call to run().\n */\nfunction Fiber(fn) {\n\t[native code]\n}\n\n/**\n * `Fiber.current` will contain the currently-running Fiber. It will be\n * `undefined` if there is no fiber (i.e. the main stack of execution).\n *\n * See \"Garbage Collection\" for more information on responsible use of\n * `Fiber.current`.\n */\nFiber.current = undefined;\n\n/**\n * `Fiber.yield()` will halt execution of the current fiber and return control\n * back to original caller of run(). If an argument is supplied to yield(),\n * run() will return that value.\n *\n * When run() is called again, yield() will return.\n *\n * Note that this function is a global to allow for correct garbage\n * collection. This results in no loss of functionality because it is only\n * valid to yield from the currently running fiber anyway.\n *\n * Note also that `yield` is a reserved word in Javascript. This is normally\n * not an issue, however some code linters may complain. Rest assured that it\n * will run fine now and in future versions of Javascript.\n */\nFiber.yield = function(param) {\n\t[native code]\n}\n\n/**\n * run() will start execution of this Fiber, or if it is currently yielding,\n * it will resume execution. If an argument is supplied, this argument will\n * be passed to the fiber, either as the first parameter to the main\n * function [if the fiber has not been started] or as the return value of\n * yield() [if the fiber is currently yielding].\n *\n * This function will return either the parameter passed to yield(), or the\n * returned value from the fiber's main function.\n */\nFiber.prototype.run = function(param) {\n\t[native code]\n}\n\n/**\n * reset() will terminate a running Fiber and restore it to its original\n * state, as if it had returned execution.\n *\n * This is accomplished by causing yield() to throw an exception, and any\n * futher calls to yield() will also throw an exception. This continues\n * until the fiber has completely unwound and returns.\n *\n * If the fiber returns a value it will be returned by reset().\n *\n * If the fiber is not running, reset() will have no effect.\n */\nFiber.prototype.reset = function() {\n\t[native code]\n}\n\n/**\n * throwInto() will cause a currently yielding fiber's yield() call to\n * throw instead of return gracefully. This can be useful for notifying a\n * fiber that you are no longer interested in its task, and that it should\n * give up.\n *\n * Note that if the fiber does not handle the exception it will continue to\n * bubble up and throwInto() will throw the exception right back at you.\n */\nFiber.prototype.throwInto = function(exception) {\n\t[native code]\n}\n```\n\n\nFuture's definition looks something like this:\n\n```javascript\n/**\n * Returns a future-function which, when run, starts running the target\n * function and returns a future for the result.\n * \n * Example usage: \n * var funcy = function(arg) {\n *   return arg+1;\n * }.future();\n * \n * funcy(1).wait(); // returns 2\n */\nFunction.prototype.future = function() { ... }\n\n/**\n * Future object, instantiated with the new operator.\n */\nfunction Future() {}\n\n/**\n * Wrap a node-style async function to return a future in place of using a callback.\n * \n * fn - the function or object to wrap\n * array - indicates that this callback will return more than 1 argument after `err`. For example,\n *         `child_process.exec()` returns [err, stdout, stderr]\n * suffix - appends a string to every method that was overridden, if you passed an object\n * \n * Example usage: Future.wrap(asyncFunction)(arg1).wait()\n */\nFuture.wrap = function(fn, multi, suffix) { ... }\n\n/**\n * Invoke a function that will be run in its own fiber context and return a future to its return\n * value.\n *\n * Example:\n * Future.task(function() {\n *   // You can safely `wait` on stuff here\n * }).detach();\n */\nFuture.task = function(fn) { ... }\n\n/**\n * Wait on a series of futures and then return. If the futures throw an exception this function\n * /won't/ throw it back. You can get the value of the future by calling get() on it directly. If\n * you want to wait on a single future you're better off calling future.wait() on the instance.\n * \n * Example usage: Future.wait(aFuture, anotherFuture)\n */\nFuture.wait = function(/* ... */) { ... }\n\n/**\n * Return the value of this future. If the future hasn't resolved yet this will throw an error.\n */\nFuture.prototype.get = function() { ... }\n\n/**\n * Mark this future as returned. All pending callbacks will be invoked immediately.\n * \n * value - the value to return when get() or wait() is called.\n * \n * Example usage: aFuture.return(value)\n */\nFuture.prototype.return = function(value) { ... }\n\n/**\n * Throw from this future as returned. All pending callbacks will be invoked immediately.\n * Note that execution will continue normally after running this method, \n * so make sure you exit appropriately after running throw()\n * \n * error - the error to throw when get() or wait() is called.\n * \n * Example usage: aFuture.throw(new Error(\"Something borked\"))\n */\nFuture.prototype.throw = function(error) { ... }\n\n/**\n * \"detach\" this future. Basically this is useful if you want to run a task in a future, you\n * aren't interested in its return value, but if it throws you don't want the exception to be\n * lost. If this fiber throws, an exception will be thrown to the event loop and node will\n * probably fall down.\n */\nFuture.prototype.detach = function() { ... }\n\n/**\n * Returns whether or not this future has resolved yet.\n */\nFuture.prototype.isResolved = function() { ... }\n\n/**\n * Returns a node-style function which will mark this future as resolved when called.\n * \n * Example usage: \n *   var errback = aFuture.resolver();\n *   asyncFunction(arg1, arg2, etc, errback)\n *   var result = aFuture.wait();\n */\nFuture.prototype.resolver = function() { ... }\n\n/**\n * Waits for this future to resolve and then invokes a callback.\n *\n * If only one argument is passed it is a standard function(err, val){} errback.\n *\n * If two arguments are passed, the first argument is a future which will be thrown to in the case\n * of error, and the second is a function(val){} callback.\n */\nFuture.prototype.resolve = function(/* errback or future, callback */) { ... }\n\n/**\n * Propogate results to another future.\n * \n * Example usage: future1.proxy(future2) // future2 gets automatically resolved with however future1 resolves\n */\nFuture.prototype.proxy = function(future) { ... }\n\n/**\n * Differs from its functional counterpart in that it actually resolves the future. Thus if the\n * future threw, future.wait() will throw.\n */\nFuture.prototype.wait = function() { ... }\n\n/**\n * Support for converting a Future to and from ES6 Promises.\n */\nFuture.fromPromise = function(promise) { ... }\nFuture.prototype.promise = function() { ... }\n```\n\nGARBAGE COLLECTION\n------------------\n\nIf you intend to build generators, iterators, or \"lazy lists\", you should be\naware that all fibers must eventually unwind. This is implemented by causing\nyield() to throw unconditionally when the library is trying to unwind your\nfiber-- either because reset() was called, or all handles to the fiber were lost\nand v8 wants to delete it.\n\nSomething like this will, at some point, cause an infinite loop in your\napplication:\n\n```javascript\nvar fiber = Fiber(function() {\n\twhile (true) {\n\t\ttry {\n\t\t\tFiber.yield();\n\t\t} catch(e) {}\n\t}\n});\nfiber.run();\n```\n\nIf you either call reset() on this fiber, or the v8 garbage collector decides it\nis no longer in use, the fiber library will attempt to unwind the fiber by\ncausing all calls to yield() to throw. However, if you catch these exceptions\nand continue anyway, an infinite loop will occur.\n\nThere are other garbage collection issues that occur with misuse of fiber\nhandles. If you grab a handle to a fiber from within itself, you should make\nsure that the fiber eventually unwinds. This application will leak memory:\n\n```javascript\nvar fiber = Fiber(function() {\n\tvar that = Fiber.current;\n\tFiber.yield();\n}\nfiber.run();\nfiber = undefined;\n```\n\nThere is no way to get back into the fiber that was started, however it's\nimpossible for v8's garbage collector to detect this. With a handle to the fiber\nstill outstanding, v8 will never garbage collect it and the stack will remain in\nmemory until the application exits.\n\nThus, you should take care when grabbing references to `Fiber.current`.\n","homepage":"https://github.com/laverdet/node-fibers","keywords":["fiber","fibers","coroutine","thread","async","parallel","worker","future","promise"],"bugs":{"url":"https://github.com/laverdet/node-fibers/issues"},"readmeFilename":"README.md","license":"MIT","_attachments":{},"_etag":"W/\"59b1f07b-10463\"","_lastModified":"Fri, 08 Sep 2017 01:20:59 GMT"}