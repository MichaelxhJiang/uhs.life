[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Random = Package.random.Random;\nvar Hook = Package['callback-hook'].Hook;\nvar ReactiveVar = Package['reactive-var'].ReactiveVar;\nvar DDP = Package['ddp-client'].DDP;\nvar Mongo = Package.mongo.Mongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar Accounts, EXPIRE_TOKENS_INTERVAL_MS, CONNECTION_CLOSE_DELAY_MS;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"accounts-base\":{\"client_main.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-base/client_main.js                                                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar module1 = module;                                                                                                  // 1\nmodule1.export({                                                                                                       // 1\n  AccountsClient: function () {                                                                                        // 1\n    return AccountsClient;                                                                                             // 1\n  },                                                                                                                   // 1\n  AccountsTest: function () {                                                                                          // 1\n    return AccountsTest;                                                                                               // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar AccountsClient = void 0;                                                                                           // 1\nmodule1.watch(require(\"./accounts_client.js\"), {                                                                       // 1\n  AccountsClient: function (v) {                                                                                       // 1\n    AccountsClient = v;                                                                                                // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar AccountsTest = void 0;                                                                                             // 1\nmodule1.watch(require(\"./url_client.js\"), {                                                                            // 1\n  AccountsTest: function (v) {                                                                                         // 1\n    AccountsTest = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\nmodule1.watch(require(\"./localstorage_token.js\"));                                                                     // 1\n/**                                                                                                                    // 5\n * @namespace Accounts                                                                                                 //\n * @summary The namespace for all client-side accounts-related methods.                                                //\n */Accounts = new AccountsClient(); /**                                                                                //\n                                     * @summary A [Mongo.Collection](#collections) containing user documents.          //\n                                     * @locus Anywhere                                                                 //\n                                     * @type {Mongo.Collection}                                                        //\n                                     * @importFromPackage meteor                                                       //\n                                     */                                                                                //\nMeteor.users = Accounts.users;                                                                                         // 17\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts_client.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-base/accounts_client.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  AccountsClient: function () {                                                                                        // 1\n    return AccountsClient;                                                                                             // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar AccountsCommon = void 0;                                                                                           // 1\nmodule.watch(require(\"./accounts_common.js\"), {                                                                        // 1\n  AccountsCommon: function (v) {                                                                                       // 1\n    AccountsCommon = v;                                                                                                // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\nvar AccountsClient = function (_AccountsCommon) {                                                                      //\n  (0, _inherits3.default)(AccountsClient, _AccountsCommon);                                                            //\n                                                                                                                       //\n  function AccountsClient(options) {                                                                                   // 14\n    (0, _classCallCheck3.default)(this, AccountsClient);                                                               // 14\n                                                                                                                       //\n    var _this = (0, _possibleConstructorReturn3.default)(this, _AccountsCommon.call(this, options));                   // 14\n                                                                                                                       //\n    _this._loggingIn = new ReactiveVar(false);                                                                         // 17\n    _this._loggingOut = new ReactiveVar(false);                                                                        // 18\n    _this._loginServicesHandle = _this.connection.subscribe(\"meteor.loginServiceConfiguration\");                       // 20\n    _this._pageLoadLoginCallbacks = [];                                                                                // 23\n    _this._pageLoadLoginAttemptInfo = null; // Defined in url_client.js.                                               // 24\n                                                                                                                       //\n    _this._initUrlMatching(); // Defined in localstorage_token.js.                                                     // 27\n                                                                                                                       //\n                                                                                                                       //\n    _this._initLocalStorage(); // This is for .registerClientLoginFunction & .callLoginFunction.                       // 30\n                                                                                                                       //\n                                                                                                                       //\n    _this._loginFuncs = {};                                                                                            // 33\n    return _this;                                                                                                      // 14\n  } ///                                                                                                                // 34\n  /// CURRENT USER                                                                                                     // 37\n  ///                                                                                                                  // 38\n  // @override                                                                                                         // 40\n                                                                                                                       //\n                                                                                                                       //\n  AccountsClient.prototype.userId = function () {                                                                      //\n    function userId() {                                                                                                //\n      return this.connection.userId();                                                                                 // 42\n    }                                                                                                                  // 43\n                                                                                                                       //\n    return userId;                                                                                                     //\n  }(); // This is mostly just called within this file, but Meteor.loginWithPassword                                    //\n  // also uses it to make loggingIn() be true during the beginPasswordExchange                                         // 46\n  // method call too.                                                                                                  // 47\n                                                                                                                       //\n                                                                                                                       //\n  AccountsClient.prototype._setLoggingIn = function () {                                                               //\n    function _setLoggingIn(x) {                                                                                        //\n      this._loggingIn.set(x);                                                                                          // 49\n    }                                                                                                                  // 50\n                                                                                                                       //\n    return _setLoggingIn;                                                                                              //\n  }(); /**                                                                                                             //\n        * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n        * @locus Client                                                                                                //\n        */                                                                                                             //\n                                                                                                                       //\n  AccountsClient.prototype.loggingIn = function () {                                                                   //\n    function loggingIn() {                                                                                             //\n      return this._loggingIn.get();                                                                                    // 57\n    }                                                                                                                  // 58\n                                                                                                                       //\n    return loggingIn;                                                                                                  //\n  }(); /**                                                                                                             //\n        * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n        * @locus Client                                                                                                //\n        */                                                                                                             //\n                                                                                                                       //\n  AccountsClient.prototype.loggingOut = function () {                                                                  //\n    function loggingOut() {                                                                                            //\n      return this._loggingOut.get();                                                                                   // 65\n    }                                                                                                                  // 66\n                                                                                                                       //\n    return loggingOut;                                                                                                 //\n  }(); /**                                                                                                             //\n        * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n        `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.                                                  //\n        * @locus Client                                                                                                //\n        * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n        Should be the OAuth provider name accordingly.                                                                 //\n        * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.  //\n        */                                                                                                             //\n                                                                                                                       //\n  AccountsClient.prototype.registerClientLoginFunction = function () {                                                 //\n    function registerClientLoginFunction(funcName, func) {                                                             //\n      if (this._loginFuncs[funcName]) {                                                                                // 77\n        throw new Error(funcName + \" has been defined already\");                                                       // 78\n      }                                                                                                                // 79\n                                                                                                                       //\n      this._loginFuncs[funcName] = func;                                                                               // 80\n    }                                                                                                                  // 81\n                                                                                                                       //\n    return registerClientLoginFunction;                                                                                //\n  }(); /**                                                                                                             //\n        * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n        arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n        all arguments for the login function.                                                                          //\n        * @locus Client                                                                                                //\n        * @param {String} funcName The name of the login function you wanted to call.                                  //\n        */                                                                                                             //\n                                                                                                                       //\n  AccountsClient.prototype.callLoginFunction = function () {                                                           //\n    function callLoginFunction(funcName) {                                                                             //\n      if (!this._loginFuncs[funcName]) {                                                                               // 91\n        throw new Error(funcName + \" was not defined\");                                                                // 92\n      }                                                                                                                // 93\n                                                                                                                       //\n      for (var _len = arguments.length, funcArgs = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {    // 90\n        funcArgs[_key - 1] = arguments[_key];                                                                          // 90\n      }                                                                                                                // 90\n                                                                                                                       //\n      return this._loginFuncs[funcName].apply(this, funcArgs);                                                         // 94\n    }                                                                                                                  // 95\n                                                                                                                       //\n    return callLoginFunction;                                                                                          //\n  }(); /**                                                                                                             //\n        * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login   //\n        function.                                                                                                      //\n        * @locus Client                                                                                                //\n        * @param {String} funcName The name of the login function you wanted to call.                                  //\n        * @param {Array} funcArgs The `arguments` for the login function.                                              //\n        */                                                                                                             //\n                                                                                                                       //\n  AccountsClient.prototype.applyLoginFunction = function () {                                                          //\n    function applyLoginFunction(funcName, funcArgs) {                                                                  //\n      if (!this._loginFuncs[funcName]) {                                                                               // 105\n        throw new Error(funcName + \" was not defined\");                                                                // 106\n      }                                                                                                                // 107\n                                                                                                                       //\n      return this._loginFuncs[funcName].apply(this, funcArgs);                                                         // 108\n    }                                                                                                                  // 109\n                                                                                                                       //\n    return applyLoginFunction;                                                                                         //\n  }(); /**                                                                                                             //\n        * @summary Log the user out.                                                                                   //\n        * @locus Client                                                                                                //\n        * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n        */                                                                                                             //\n                                                                                                                       //\n  AccountsClient.prototype.logout = function () {                                                                      //\n    function logout(callback) {                                                                                        //\n      var self = this;                                                                                                 // 117\n                                                                                                                       //\n      self._loggingOut.set(true);                                                                                      // 118\n                                                                                                                       //\n      self.connection.apply('logout', [], {                                                                            // 119\n        wait: true                                                                                                     // 120\n      }, function (error, result) {                                                                                    // 119\n        self._loggingOut.set(false);                                                                                   // 122\n                                                                                                                       //\n        if (error) {                                                                                                   // 123\n          callback && callback(error);                                                                                 // 124\n        } else {                                                                                                       // 125\n          self.makeClientLoggedOut();                                                                                  // 126\n          callback && callback();                                                                                      // 127\n        }                                                                                                              // 128\n      });                                                                                                              // 129\n    }                                                                                                                  // 130\n                                                                                                                       //\n    return logout;                                                                                                     //\n  }(); /**                                                                                                             //\n        * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n        * @locus Client                                                                                                //\n        * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n        */                                                                                                             //\n                                                                                                                       //\n  AccountsClient.prototype.logoutOtherClients = function () {                                                          //\n    function logoutOtherClients(callback) {                                                                            //\n      var self = this; // We need to make two method calls: one to replace our current token,                          // 138\n      // and another to remove all tokens except the current one. We want to                                           // 141\n      // call these two methods one after the other, without any other                                                 // 142\n      // methods running between them. For example, we don't want `logout`                                             // 143\n      // to be called in between our two method calls (otherwise the second                                            // 144\n      // method call would return an error). Another example: we don't want                                            // 145\n      // logout to be called before the callback for `getNewToken`;                                                    // 146\n      // otherwise we would momentarily log the user out and then write a                                              // 147\n      // new token to localStorage.                                                                                    // 148\n      //                                                                                                               // 149\n      // To accomplish this, we make both calls as wait methods, and queue                                             // 150\n      // them one after the other, without spinning off the event loop in                                              // 151\n      // between. Even though we queue `removeOtherTokens` before                                                      // 152\n      // `getNewToken`, we won't actually send the `removeOtherTokens` call                                            // 153\n      // until the `getNewToken` callback has finished running, because they                                           // 154\n      // are both wait methods.                                                                                        // 155\n                                                                                                                       //\n      self.connection.apply('getNewToken', [], {                                                                       // 156\n        wait: true                                                                                                     // 159\n      }, function (err, result) {                                                                                      // 159\n        if (!err) {                                                                                                    // 161\n          self._storeLoginToken(self.userId(), result.token, result.tokenExpires);                                     // 162\n        }                                                                                                              // 167\n      });                                                                                                              // 168\n      self.connection.apply('removeOtherTokens', [], {                                                                 // 171\n        wait: true                                                                                                     // 174\n      }, function (err) {                                                                                              // 174\n        callback && callback(err);                                                                                     // 176\n      });                                                                                                              // 177\n    }                                                                                                                  // 179\n                                                                                                                       //\n    return logoutOtherClients;                                                                                         //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return AccountsClient;                                                                                               //\n}(AccountsCommon);                                                                                                     //\n                                                                                                                       //\n;                                                                                                                      // 180\nvar Ap = AccountsClient.prototype; /**                                                                                 // 182\n                                    * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n                                    * @locus Client                                                                    //\n                                    * @importFromPackage meteor                                                        //\n                                    */                                                                                 //\n                                                                                                                       //\nMeteor.loggingIn = function () {                                                                                       // 189\n  return Accounts.loggingIn();                                                                                         // 190\n}; /**                                                                                                                 // 191\n    * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.     //\n    * @locus Client                                                                                                    //\n    * @importFromPackage meteor                                                                                        //\n    */                                                                                                                 //\n                                                                                                                       //\nMeteor.loggingOut = function () {                                                                                      // 198\n  return Accounts.loggingOut();                                                                                        // 199\n}; ///                                                                                                                 // 200\n/// LOGIN METHODS                                                                                                      // 203\n///                                                                                                                    // 204\n// Call a login method on the server.                                                                                  // 206\n//                                                                                                                     // 207\n// A login method is a method which on success calls `this.setUserId(id)` and                                          // 208\n// `Accounts._setLoginToken` on the server and returns an object with fields                                           // 209\n// 'id' (containing the user id), 'token' (containing a resume token), and                                             // 210\n// optionally `tokenExpires`.                                                                                          // 211\n//                                                                                                                     // 212\n// This function takes care of:                                                                                        // 213\n//   - Updating the Meteor.loggingIn() reactive data source                                                            // 214\n//   - Calling the method in 'wait' mode                                                                               // 215\n//   - On success, saving the resume token to localStorage                                                             // 216\n//   - On success, calling Accounts.connection.setUserId()                                                             // 217\n//   - Setting up an onReconnect handler which logs in with                                                            // 218\n//     the resume token                                                                                                // 219\n//                                                                                                                     // 220\n// Options:                                                                                                            // 221\n// - methodName: The method to call (default 'login')                                                                  // 222\n// - methodArguments: The arguments for the method                                                                     // 223\n// - validateResult: If provided, will be called with the result of the                                                // 224\n//                 method. If it throws, the client will not be logged in (and                                         // 225\n//                 its error will be passed to the callback).                                                          // 226\n// - userCallback: Will be called with no arguments once the user is fully                                             // 227\n//                 logged in, or with the error on error.                                                              // 228\n//                                                                                                                     // 229\n                                                                                                                       //\n                                                                                                                       //\nAp.callLoginMethod = function (options) {                                                                              // 230\n  var self = this;                                                                                                     // 231\n  options = _.extend({                                                                                                 // 233\n    methodName: 'login',                                                                                               // 234\n    methodArguments: [{}],                                                                                             // 235\n    _suppressLoggingIn: false                                                                                          // 236\n  }, options); // Set defaults for callback arguments to no-op functions; make sure we                                 // 233\n  // override falsey values too.                                                                                       // 240\n                                                                                                                       //\n  _.each(['validateResult', 'userCallback'], function (f) {                                                            // 241\n    if (!options[f]) options[f] = function () {};                                                                      // 242\n  }); // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.                                            // 244\n                                                                                                                       //\n                                                                                                                       //\n  var loginCallbacks = _.once(function (error) {                                                                       // 247\n    if (!error) {                                                                                                      // 248\n      self._onLoginHook.each(function (callback) {                                                                     // 249\n        callback();                                                                                                    // 250\n        return true;                                                                                                   // 251\n      });                                                                                                              // 252\n    } else {                                                                                                           // 253\n      self._onLoginFailureHook.each(function (callback) {                                                              // 254\n        callback({                                                                                                     // 255\n          error: error                                                                                                 // 255\n        });                                                                                                            // 255\n        return true;                                                                                                   // 256\n      });                                                                                                              // 257\n    }                                                                                                                  // 258\n                                                                                                                       //\n    options.userCallback.apply(this, arguments);                                                                       // 259\n  });                                                                                                                  // 260\n                                                                                                                       //\n  var reconnected = false; // We want to set up onReconnect as soon as we get a result token back from                 // 262\n  // the server, without having to wait for subscriptions to rerun. This is                                            // 265\n  // because if we disconnect and reconnect between getting the result and                                             // 266\n  // getting the results of subscription rerun, we WILL NOT re-send this                                               // 267\n  // method (because we never re-send methods whose results we've received)                                            // 268\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"                                              // 269\n  // time. This will lead to makeClientLoggedIn(result.id) even though we                                              // 270\n  // haven't actually sent a login method!                                                                             // 271\n  //                                                                                                                   // 272\n  // But by making sure that we send this \"resume\" login in that case (and                                             // 273\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate                                           // 274\n  // client-side userId. (It's important that livedata_connection guarantees                                           // 275\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback                                            // 276\n  // will occur before the callback from the resume login call.)                                                       // 277\n                                                                                                                       //\n  var onResultReceived = function (err, result) {                                                                      // 278\n    if (err || !result || !result.token) {// Leave onReconnect alone if there was an error, so that if the user was    // 279\n      // already logged in they will still get logged in on reconnect.                                                 // 281\n      // See issue #4970.                                                                                              // 282\n    } else {                                                                                                           // 283\n      // First clear out any previously set Acccounts login onReconnect                                                // 284\n      // callback (to make sure we don't keep piling up duplicate callbacks,                                           // 285\n      // which would then all be triggered when reconnecting).                                                         // 286\n      if (self._reconnectStopper) {                                                                                    // 287\n        self._reconnectStopper.stop();                                                                                 // 288\n      }                                                                                                                // 289\n                                                                                                                       //\n      self._reconnectStopper = DDP.onReconnect(function (conn) {                                                       // 291\n        if (conn != self.connection) {                                                                                 // 292\n          return;                                                                                                      // 293\n        }                                                                                                              // 294\n                                                                                                                       //\n        reconnected = true; // If our token was updated in storage, use the latest one.                                // 295\n                                                                                                                       //\n        var storedToken = self._storedLoginToken();                                                                    // 297\n                                                                                                                       //\n        if (storedToken) {                                                                                             // 298\n          result = {                                                                                                   // 299\n            token: storedToken,                                                                                        // 300\n            tokenExpires: self._storedLoginTokenExpires()                                                              // 301\n          };                                                                                                           // 299\n        }                                                                                                              // 303\n                                                                                                                       //\n        if (!result.tokenExpires) result.tokenExpires = self._tokenExpiration(new Date());                             // 304\n                                                                                                                       //\n        if (self._tokenExpiresSoon(result.tokenExpires)) {                                                             // 306\n          self.makeClientLoggedOut();                                                                                  // 307\n        } else {                                                                                                       // 308\n          self.callLoginMethod({                                                                                       // 309\n            methodArguments: [{                                                                                        // 310\n              resume: result.token                                                                                     // 310\n            }],                                                                                                        // 310\n            // Reconnect quiescence ensures that the user doesn't see an                                               // 311\n            // intermediate state before the login method finishes. So we don't                                        // 312\n            // need to show a logging-in animation.                                                                    // 313\n            _suppressLoggingIn: true,                                                                                  // 314\n            userCallback: function (error) {                                                                           // 315\n              var storedTokenNow = self._storedLoginToken();                                                           // 316\n                                                                                                                       //\n              if (error) {                                                                                             // 317\n                // If we had a login error AND the current stored token is the                                         // 318\n                // one that we tried to log in with, then declare ourselves                                            // 319\n                // logged out. If there's a token in storage but it's not the                                          // 320\n                // token that we tried to log in with, we don't know anything                                          // 321\n                // about whether that token is valid or not, so do nothing. The                                        // 322\n                // periodic localStorage poll will decide if we are logged in or                                       // 323\n                // out with this token, if it hasn't already. Of course, even                                          // 324\n                // with this check, another tab could insert a new valid token                                         // 325\n                // immediately before we clear localStorage here, which would                                          // 326\n                // lead to both tabs being logged out, but by checking the token                                       // 327\n                // in storage right now we hope to make that unlikely to happen.                                       // 328\n                //                                                                                                     // 329\n                // If there is no token in storage right now, we don't have to                                         // 330\n                // do anything; whatever code removed the token from storage was                                       // 331\n                // responsible for calling `makeClientLoggedOut()`, or the                                             // 332\n                // periodic localStorage poll will call `makeClientLoggedOut`                                          // 333\n                // eventually if another tab wiped the token from storage.                                             // 334\n                if (storedTokenNow && storedTokenNow === result.token) {                                               // 335\n                  self.makeClientLoggedOut();                                                                          // 336\n                }                                                                                                      // 337\n              } // Possibly a weird callback to call, but better than nothing if                                       // 338\n              // there is a reconnect between \"login result received\" and \"data                                        // 340\n              // ready\".                                                                                               // 341\n                                                                                                                       //\n                                                                                                                       //\n              loginCallbacks(error);                                                                                   // 342\n            }                                                                                                          // 343\n          });                                                                                                          // 309\n        }                                                                                                              // 344\n      });                                                                                                              // 345\n    }                                                                                                                  // 346\n  }; // This callback is called once the local cache of the current-user                                               // 347\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to                                          // 350\n  // date.                                                                                                             // 351\n                                                                                                                       //\n                                                                                                                       //\n  var loggedInAndDataReadyCallback = function (error, result) {                                                        // 352\n    // If the login method returns its result but the connection is lost                                               // 353\n    // before the data is in the local cache, it'll set an onReconnect (see                                            // 354\n    // above). The onReconnect will try to log in using the token, and *it*                                            // 355\n    // will call userCallback via its own version of this                                                              // 356\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.                                             // 357\n    if (reconnected) return; // Note that we need to call this even if _suppressLoggingIn is true,                     // 358\n    // because it could be matching a _setLoggingIn(true) from a                                                       // 362\n    // half-completed pre-reconnect login method.                                                                      // 363\n                                                                                                                       //\n    self._setLoggingIn(false);                                                                                         // 364\n                                                                                                                       //\n    if (error || !result) {                                                                                            // 365\n      error = error || new Error(\"No result from call to \" + options.methodName);                                      // 366\n      loginCallbacks(error);                                                                                           // 368\n      return;                                                                                                          // 369\n    }                                                                                                                  // 370\n                                                                                                                       //\n    try {                                                                                                              // 371\n      options.validateResult(result);                                                                                  // 372\n    } catch (e) {                                                                                                      // 373\n      loginCallbacks(e);                                                                                               // 374\n      return;                                                                                                          // 375\n    } // Make the client logged in. (The user data should already be loaded!)                                          // 376\n                                                                                                                       //\n                                                                                                                       //\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);                                             // 379\n    loginCallbacks();                                                                                                  // 380\n  };                                                                                                                   // 381\n                                                                                                                       //\n  if (!options._suppressLoggingIn) self._setLoggingIn(true);                                                           // 383\n  self.connection.apply(options.methodName, options.methodArguments, {                                                 // 385\n    wait: true,                                                                                                        // 388\n    onResultReceived: onResultReceived                                                                                 // 388\n  }, loggedInAndDataReadyCallback);                                                                                    // 388\n};                                                                                                                     // 390\n                                                                                                                       //\nAp.makeClientLoggedOut = function () {                                                                                 // 392\n  // Ensure client was successfully logged in before running logout hooks.                                             // 393\n  if (this.connection._userId) {                                                                                       // 394\n    this._onLogoutHook.each(function (callback) {                                                                      // 395\n      callback();                                                                                                      // 396\n      return true;                                                                                                     // 397\n    });                                                                                                                // 398\n  }                                                                                                                    // 399\n                                                                                                                       //\n  this._unstoreLoginToken();                                                                                           // 400\n                                                                                                                       //\n  this.connection.setUserId(null);                                                                                     // 401\n  this._reconnectStopper && this._reconnectStopper.stop();                                                             // 402\n};                                                                                                                     // 403\n                                                                                                                       //\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {                                                       // 405\n  this._storeLoginToken(userId, token, tokenExpires);                                                                  // 406\n                                                                                                                       //\n  this.connection.setUserId(userId);                                                                                   // 407\n}; /**                                                                                                                 // 408\n    * @summary Log the user out.                                                                                       //\n    * @locus Client                                                                                                    //\n    * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n    * @importFromPackage meteor                                                                                        //\n    */                                                                                                                 //\n                                                                                                                       //\nMeteor.logout = function (callback) {                                                                                  // 416\n  return Accounts.logout(callback);                                                                                    // 417\n}; /**                                                                                                                 // 418\n    * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n    * @locus Client                                                                                                    //\n    * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n    * @importFromPackage meteor                                                                                        //\n    */                                                                                                                 //\n                                                                                                                       //\nMeteor.logoutOtherClients = function (callback) {                                                                      // 426\n  return Accounts.logoutOtherClients(callback);                                                                        // 427\n}; ///                                                                                                                 // 428\n/// LOGIN SERVICES                                                                                                     // 432\n///                                                                                                                    // 433\n// A reactive function returning whether the loginServiceConfiguration                                                 // 435\n// subscription is ready. Used by accounts-ui to hide the login button                                                 // 436\n// until we have all the configuration loaded                                                                          // 437\n//                                                                                                                     // 438\n                                                                                                                       //\n                                                                                                                       //\nAp.loginServicesConfigured = function () {                                                                             // 439\n  return this._loginServicesHandle.ready();                                                                            // 440\n}; // Some login services such as the redirect login flow or the resume                                                // 441\n// login handler can log the user in at page load time.  The                                                           // 445\n// Meteor.loginWithX functions have a callback argument, but the                                                       // 446\n// callback function instance won't be in memory any longer if the                                                     // 447\n// page was reloaded.  The `onPageLoadLogin` function allows a                                                         // 448\n// callback to be registered for the case where the login was                                                          // 449\n// initiated in a previous VM, and we now have the result of the login                                                 // 450\n// attempt in a new VM.                                                                                                // 451\n// Register a callback to be called if we have information about a                                                     // 453\n// login attempt at page load time.  Call the callback immediately if                                                  // 454\n// we already have the page load login attempt info, otherwise stash                                                   // 455\n// the callback to be called if and when we do get the attempt info.                                                   // 456\n//                                                                                                                     // 457\n                                                                                                                       //\n                                                                                                                       //\nAp.onPageLoadLogin = function (f) {                                                                                    // 458\n  if (this._pageLoadLoginAttemptInfo) {                                                                                // 459\n    f(this._pageLoadLoginAttemptInfo);                                                                                 // 460\n  } else {                                                                                                             // 461\n    this._pageLoadLoginCallbacks.push(f);                                                                              // 462\n  }                                                                                                                    // 463\n}; // Receive the information about the login attempt at page load time.                                               // 464\n// Call registered callbacks, and also record the info in case                                                         // 468\n// someone's callback hasn't been registered yet.                                                                      // 469\n//                                                                                                                     // 470\n                                                                                                                       //\n                                                                                                                       //\nAp._pageLoadLogin = function (attemptInfo) {                                                                           // 471\n  if (this._pageLoadLoginAttemptInfo) {                                                                                // 472\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");                                       // 473\n                                                                                                                       //\n    return;                                                                                                            // 474\n  }                                                                                                                    // 475\n                                                                                                                       //\n  _.each(this._pageLoadLoginCallbacks, function (callback) {                                                           // 477\n    callback(attemptInfo);                                                                                             // 478\n  });                                                                                                                  // 479\n                                                                                                                       //\n  this._pageLoadLoginCallbacks = [];                                                                                   // 481\n  this._pageLoadLoginAttemptInfo = attemptInfo;                                                                        // 482\n}; ///                                                                                                                 // 483\n/// HANDLEBARS HELPERS                                                                                                 // 487\n///                                                                                                                    // 488\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}                                              // 490\n// global helpers.                                                                                                     // 491\n                                                                                                                       //\n                                                                                                                       //\nif (Package.blaze) {                                                                                                   // 492\n  /**                                                                                                                  // 493\n   * @global                                                                                                           //\n   * @name  currentUser                                                                                                //\n   * @isHelper true                                                                                                    //\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.   //\n   */Package.blaze.Blaze.Template.registerHelper('currentUser', function () {                                          //\n    return Meteor.user();                                                                                              // 500\n  }); /**                                                                                                              // 501\n       * @global                                                                                                       //\n       * @name  loggingIn                                                                                              //\n       * @isHelper true                                                                                                //\n       * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).                                                       //\n       */                                                                                                              //\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {                                               // 509\n    return Meteor.loggingIn();                                                                                         // 510\n  }); /**                                                                                                              // 511\n       * @global                                                                                                       //\n       * @name  loggingOut                                                                                             //\n       * @isHelper true                                                                                                //\n       * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).                                                     //\n       */                                                                                                              //\n  Package.blaze.Blaze.Template.registerHelper('loggingOut', function () {                                              // 519\n    return Meteor.loggingOut();                                                                                        // 520\n  }); /**                                                                                                              // 521\n       * @global                                                                                                       //\n       * @name  loggingInOrOut                                                                                         //\n       * @isHelper true                                                                                                //\n       * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).          //\n       */                                                                                                              //\n  Package.blaze.Blaze.Template.registerHelper('loggingInOrOut', function () {                                          // 529\n    return Meteor.loggingIn() || Meteor.loggingOut();                                                                  // 530\n  });                                                                                                                  // 531\n}                                                                                                                      // 532\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"accounts_common.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-base/accounts_common.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  AccountsCommon: function () {                                                                                        // 1\n    return AccountsCommon;                                                                                             // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nvar AccountsCommon = function () {                                                                                     //\n  function AccountsCommon(options) {                                                                                   // 11\n    (0, _classCallCheck3.default)(this, AccountsCommon);                                                               // 11\n    // Currently this is read directly by packages like accounts-password                                              // 12\n    // and accounts-ui-unstyled.                                                                                       // 13\n    this._options = {}; // Note that setting this.connection = null causes this.users to be a                          // 14\n    // LocalCollection, which is not what we want.                                                                     // 17\n                                                                                                                       //\n    this.connection = undefined;                                                                                       // 18\n                                                                                                                       //\n    this._initConnection(options || {}); // There is an allow call in accounts_server.js that restricts writes to      // 19\n    // this collection.                                                                                                // 22\n                                                                                                                       //\n                                                                                                                       //\n    this.users = new Mongo.Collection(\"users\", {                                                                       // 23\n      _preventAutopublish: true,                                                                                       // 24\n      connection: this.connection                                                                                      // 25\n    }); // Callback exceptions are printed with Meteor._debug and ignored.                                             // 23\n                                                                                                                       //\n    this._onLoginHook = new Hook({                                                                                     // 29\n      bindEnvironment: false,                                                                                          // 30\n      debugPrintExceptions: \"onLogin callback\"                                                                         // 31\n    });                                                                                                                // 29\n    this._onLoginFailureHook = new Hook({                                                                              // 34\n      bindEnvironment: false,                                                                                          // 35\n      debugPrintExceptions: \"onLoginFailure callback\"                                                                  // 36\n    });                                                                                                                // 34\n    this._onLogoutHook = new Hook({                                                                                    // 39\n      bindEnvironment: false,                                                                                          // 40\n      debugPrintExceptions: \"onLogout callback\"                                                                        // 41\n    });                                                                                                                // 39\n  } /**                                                                                                                // 43\n     * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                    //\n     * @locus Anywhere                                                                                                 //\n     */                                                                                                                //\n                                                                                                                       //\n  AccountsCommon.prototype.userId = function () {                                                                      //\n    function userId() {                                                                                                //\n      throw new Error(\"userId method not implemented\");                                                                // 50\n    }                                                                                                                  // 51\n                                                                                                                       //\n    return userId;                                                                                                     //\n  }(); /**                                                                                                             //\n        * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.             //\n        * @locus Anywhere                                                                                              //\n        */                                                                                                             //\n                                                                                                                       //\n  AccountsCommon.prototype.user = function () {                                                                        //\n    function user() {                                                                                                  //\n      var userId = this.userId();                                                                                      // 58\n      return userId ? this.users.findOne(userId) : null;                                                               // 59\n    }                                                                                                                  // 60\n                                                                                                                       //\n    return user;                                                                                                       //\n  }(); // Set up config for the accounts system. Call this on both the client                                          //\n  // and the server.                                                                                                   // 63\n  //                                                                                                                   // 64\n  // Note that this method gets overridden on AccountsServer.prototype, but                                            // 65\n  // the overriding method calls the overridden method.                                                                // 66\n  //                                                                                                                   // 67\n  // XXX we should add some enforcement that this is called on both the                                                // 68\n  // client and the server. Otherwise, a user can                                                                      // 69\n  // 'forbidClientAccountCreation' only on the client and while it looks                                               // 70\n  // like their app is secure, the server will still accept createUser                                                 // 71\n  // calls. https://github.com/meteor/meteor/issues/828                                                                // 72\n  //                                                                                                                   // 73\n  // @param options {Object} an object with fields:                                                                    // 74\n  // - sendVerificationEmail {Boolean}                                                                                 // 75\n  //     Send email address verification emails to new users created from                                              // 76\n  //     client signups.                                                                                               // 77\n  // - forbidClientAccountCreation {Boolean}                                                                           // 78\n  //     Do not allow clients to create accounts directly.                                                             // 79\n  // - restrictCreationByEmailDomain {Function or String}                                                              // 80\n  //     Require created users to have an email matching the function or                                               // 81\n  //     having the string as domain.                                                                                  // 82\n  // - loginExpirationInDays {Number}                                                                                  // 83\n  //     Number of days since login until a user is logged out (login token                                            // 84\n  //     expires).                                                                                                     // 85\n  // - passwordResetTokenExpirationInDays {Number}                                                                     // 86\n  //     Number of days since password reset token creation until the                                                  // 87\n  //     token cannt be used any longer (password reset token expires).                                                // 88\n  // - ambiguousErrorMessages {Boolean}                                                                                // 89\n  //     Return ambiguous error messages from login failures to prevent                                                // 90\n  //     user enumeration.                                                                                             // 91\n  // - bcryptRounds {Number}                                                                                           // 92\n  //     Allows override of number of bcrypt rounds (aka work factor) used                                             // 93\n  //     to store passwords.                                                                                           // 94\n  /**                                                                                                                  // 96\n   * @summary Set global accounts options.                                                                             //\n   * @locus Anywhere                                                                                                   //\n   * @param {Object} options                                                                                           //\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   */                                                                                                                  //\n                                                                                                                       //\n  AccountsCommon.prototype.config = function () {                                                                      //\n    function config(options) {                                                                                         //\n      var self = this; // We don't want users to accidentally only call Accounts.config on the                         // 110\n      // client, where some of the options will have partial effects (eg removing                                      // 113\n      // the \"create account\" button from accounts-ui if forbidClientAccountCreation                                   // 114\n      // is set, or redirecting Google login to a specific-domain page) without                                        // 115\n      // having their full effects.                                                                                    // 116\n                                                                                                                       //\n      if (Meteor.isServer) {                                                                                           // 117\n        __meteor_runtime_config__.accountsConfigCalled = true;                                                         // 118\n      } else if (!__meteor_runtime_config__.accountsConfigCalled) {                                                    // 119\n        // XXX would be nice to \"crash\" the client and replace the UI with an error                                    // 120\n        // message, but there's no trivial way to do this.                                                             // 121\n        Meteor._debug(\"Accounts.config was called on the client but not on the \" + \"server; some configuration options may not take effect.\");\n      } // We need to validate the oauthSecretKey option at the time                                                   // 124\n      // Accounts.config is called. We also deliberately don't store the                                               // 127\n      // oauthSecretKey in Accounts._options.                                                                          // 128\n                                                                                                                       //\n                                                                                                                       //\n      if (_.has(options, \"oauthSecretKey\")) {                                                                          // 129\n        if (Meteor.isClient) throw new Error(\"The oauthSecretKey option may only be specified on the server\");         // 130\n        if (!Package[\"oauth-encryption\"]) throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n        Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);                                   // 134\n        options = _.omit(options, \"oauthSecretKey\");                                                                   // 135\n      } // validate option keys                                                                                        // 136\n                                                                                                                       //\n                                                                                                                       //\n      var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpirationInDays\", \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\", \"ambiguousErrorMessages\", \"bcryptRounds\"];\n                                                                                                                       //\n      _.each(_.keys(options), function (key) {                                                                         // 142\n        if (!_.contains(VALID_KEYS, key)) {                                                                            // 143\n          throw new Error(\"Accounts.config: Invalid key: \" + key);                                                     // 144\n        }                                                                                                              // 145\n      }); // set values in Accounts._options                                                                           // 146\n                                                                                                                       //\n                                                                                                                       //\n      _.each(VALID_KEYS, function (key) {                                                                              // 149\n        if (key in options) {                                                                                          // 150\n          if (key in self._options) {                                                                                  // 151\n            throw new Error(\"Can't set `\" + key + \"` more than once\");                                                 // 152\n          }                                                                                                            // 153\n                                                                                                                       //\n          self._options[key] = options[key];                                                                           // 154\n        }                                                                                                              // 155\n      });                                                                                                              // 156\n    }                                                                                                                  // 157\n                                                                                                                       //\n    return config;                                                                                                     //\n  }(); /**                                                                                                             //\n        * @summary Register a callback to be called after a login attempt succeeds.                                    //\n        * @locus Anywhere                                                                                              //\n        * @param {Function} func The callback to be called when login is successful.                                   //\n        */                                                                                                             //\n                                                                                                                       //\n  AccountsCommon.prototype.onLogin = function () {                                                                     //\n    function onLogin(func) {                                                                                           //\n      return this._onLoginHook.register(func);                                                                         // 165\n    }                                                                                                                  // 166\n                                                                                                                       //\n    return onLogin;                                                                                                    //\n  }(); /**                                                                                                             //\n        * @summary Register a callback to be called after a login attempt fails.                                       //\n        * @locus Anywhere                                                                                              //\n        * @param {Function} func The callback to be called after the login has failed.                                 //\n        */                                                                                                             //\n                                                                                                                       //\n  AccountsCommon.prototype.onLoginFailure = function () {                                                              //\n    function onLoginFailure(func) {                                                                                    //\n      return this._onLoginFailureHook.register(func);                                                                  // 174\n    }                                                                                                                  // 175\n                                                                                                                       //\n    return onLoginFailure;                                                                                             //\n  }(); /**                                                                                                             //\n        * @summary Register a callback to be called after a logout attempt succeeds.                                   //\n        * @locus Anywhere                                                                                              //\n        * @param {Function} func The callback to be called when logout is successful.                                  //\n        */                                                                                                             //\n                                                                                                                       //\n  AccountsCommon.prototype.onLogout = function () {                                                                    //\n    function onLogout(func) {                                                                                          //\n      return this._onLogoutHook.register(func);                                                                        // 183\n    }                                                                                                                  // 184\n                                                                                                                       //\n    return onLogout;                                                                                                   //\n  }();                                                                                                                 //\n                                                                                                                       //\n  AccountsCommon.prototype._initConnection = function () {                                                             //\n    function _initConnection(options) {                                                                                //\n      if (!Meteor.isClient) {                                                                                          // 187\n        return;                                                                                                        // 188\n      } // The connection used by the Accounts system. This is the connection                                          // 189\n      // that will get logged in by Meteor.login(), and this is the                                                    // 192\n      // connection whose login state will be reflected by Meteor.userId().                                            // 193\n      //                                                                                                               // 194\n      // It would be much preferable for this to be in accounts_client.js,                                             // 195\n      // but it has to be here because it's needed to create the                                                       // 196\n      // Meteor.users collection.                                                                                      // 197\n                                                                                                                       //\n                                                                                                                       //\n      if (options.connection) {                                                                                        // 199\n        this.connection = options.connection;                                                                          // 200\n      } else if (options.ddpUrl) {                                                                                     // 201\n        this.connection = DDP.connect(options.ddpUrl);                                                                 // 202\n      } else if (typeof __meteor_runtime_config__ !== \"undefined\" && __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n        // Temporary, internal hook to allow the server to point the client                                            // 205\n        // to a different authentication server. This is for a very                                                    // 206\n        // particular use case that comes up when implementing a oauth                                                 // 207\n        // server. Unsupported and may go away at any point in time.                                                   // 208\n        //                                                                                                             // 209\n        // We will eventually provide a general way to use account-base                                                // 210\n        // against any DDP connection, not just one special one.                                                       // 211\n        this.connection = DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);                              // 212\n      } else {                                                                                                         // 214\n        this.connection = Meteor.connection;                                                                           // 215\n      }                                                                                                                // 216\n    }                                                                                                                  // 217\n                                                                                                                       //\n    return _initConnection;                                                                                            //\n  }();                                                                                                                 //\n                                                                                                                       //\n  AccountsCommon.prototype._getTokenLifetimeMs = function () {                                                         //\n    function _getTokenLifetimeMs() {                                                                                   //\n      // When loginExpirationInDays is set to null, we'll use a really high                                            // 220\n      // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an                                                  // 221\n      // unexpiring token.                                                                                             // 222\n      var loginExpirationInDays = this._options.loginExpirationInDays === null ? LOGIN_UNEXPIRING_TOKEN_DAYS : this._options.loginExpirationInDays;\n      return (loginExpirationInDays || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;                           // 227\n    }                                                                                                                  // 229\n                                                                                                                       //\n    return _getTokenLifetimeMs;                                                                                        //\n  }();                                                                                                                 //\n                                                                                                                       //\n  AccountsCommon.prototype._getPasswordResetTokenLifetimeMs = function () {                                            //\n    function _getPasswordResetTokenLifetimeMs() {                                                                      //\n      return (this._options.passwordResetTokenExpirationInDays || DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n    }                                                                                                                  // 234\n                                                                                                                       //\n    return _getPasswordResetTokenLifetimeMs;                                                                           //\n  }();                                                                                                                 //\n                                                                                                                       //\n  AccountsCommon.prototype._getPasswordEnrollTokenLifetimeMs = function () {                                           //\n    function _getPasswordEnrollTokenLifetimeMs() {                                                                     //\n      return (this._options.passwordEnrollTokenExpirationInDays || DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n    }                                                                                                                  // 239\n                                                                                                                       //\n    return _getPasswordEnrollTokenLifetimeMs;                                                                          //\n  }();                                                                                                                 //\n                                                                                                                       //\n  AccountsCommon.prototype._tokenExpiration = function () {                                                            //\n    function _tokenExpiration(when) {                                                                                  //\n      // We pass when through the Date constructor for backwards compatibility;                                        // 242\n      // `when` used to be a number.                                                                                   // 243\n      return new Date(new Date(when).getTime() + this._getTokenLifetimeMs());                                          // 244\n    }                                                                                                                  // 245\n                                                                                                                       //\n    return _tokenExpiration;                                                                                           //\n  }();                                                                                                                 //\n                                                                                                                       //\n  AccountsCommon.prototype._tokenExpiresSoon = function () {                                                           //\n    function _tokenExpiresSoon(when) {                                                                                 //\n      var minLifetimeMs = .1 * this._getTokenLifetimeMs();                                                             // 248\n                                                                                                                       //\n      var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;                                                       // 249\n      if (minLifetimeMs > minLifetimeCapMs) minLifetimeMs = minLifetimeCapMs;                                          // 250\n      return new Date() > new Date(when) - minLifetimeMs;                                                              // 252\n    }                                                                                                                  // 253\n                                                                                                                       //\n    return _tokenExpiresSoon;                                                                                          //\n  }();                                                                                                                 //\n                                                                                                                       //\n  return AccountsCommon;                                                                                               //\n}();                                                                                                                   //\n                                                                                                                       //\nvar Ap = AccountsCommon.prototype; // Note that Accounts is defined separately in accounts_client.js and               // 256\n// accounts_server.js.                                                                                                 // 259\n/**                                                                                                                    // 261\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.                        //\n * @locus Anywhere but publish functions                                                                               //\n * @importFromPackage meteor                                                                                           //\n */                                                                                                                    //\n                                                                                                                       //\nMeteor.userId = function () {                                                                                          // 266\n  return Accounts.userId();                                                                                            // 267\n}; /**                                                                                                                 // 268\n    * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.                 //\n    * @locus Anywhere but publish functions                                                                            //\n    * @importFromPackage meteor                                                                                        //\n    */                                                                                                                 //\n                                                                                                                       //\nMeteor.user = function () {                                                                                            // 275\n  return Accounts.user();                                                                                              // 276\n}; // how long (in days) until a login token expires                                                                   // 277\n                                                                                                                       //\n                                                                                                                       //\nvar DEFAULT_LOGIN_EXPIRATION_DAYS = 90; // Expose for testing.                                                         // 280\n                                                                                                                       //\nAp.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS; // how long (in days) until reset password token expires\n                                                                                                                       //\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3; // how long (in days) until enrol password token expires         // 285\n                                                                                                                       //\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30; // Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.                                          // 289\n// Tries to avoid abrupt disconnects from expiring tokens.                                                             // 290\n                                                                                                                       //\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour                                                                    // 291\n// how often (in milliseconds) we check for expired tokens                                                             // 292\n                                                                                                                       //\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes                                                                  // 293\n// how long we wait before logging out clients when Meteor.logoutOtherClients is                                       // 294\n// called                                                                                                              // 295\n                                                                                                                       //\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000; // A large number of expiration days (approximately 100 years worth) that is    // 296\n// used when creating unexpiring tokens.                                                                               // 299\n                                                                                                                       //\nvar LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100; // Expose for testing.                                                    // 300\n                                                                                                                       //\nAp.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS; // loginServiceConfiguration and ConfigError are maintained for backwards compatibility\n                                                                                                                       //\nMeteor.startup(function () {                                                                                           // 305\n  var ServiceConfiguration = Package['service-configuration'].ServiceConfiguration;                                    // 306\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;                                                  // 308\n  Ap.ConfigError = ServiceConfiguration.ConfigError;                                                                   // 309\n}); // Thrown when the user cancels the login process (eg, closes an oauth                                             // 310\n// popup, declines retina scan, etc)                                                                                   // 313\n                                                                                                                       //\nvar lceName = 'Accounts.LoginCancelledError';                                                                          // 314\nAp.LoginCancelledError = Meteor.makeErrorType(lceName, function (description) {                                        // 315\n  this.message = description;                                                                                          // 318\n});                                                                                                                    // 319\nAp.LoginCancelledError.prototype.name = lceName; // This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic                                          // 324\n// error code rather than a number).                                                                                   // 325\n                                                                                                                       //\nAp.LoginCancelledError.numericError = 0x8acdc2f;                                                                       // 326\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"localstorage_token.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-base/localstorage_token.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar AccountsClient = void 0;                                                                                           // 1\nmodule.watch(require(\"./accounts_client.js\"), {                                                                        // 1\n  AccountsClient: function (v) {                                                                                       // 1\n    AccountsClient = v;                                                                                                // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Ap = AccountsClient.prototype; // This file deals with storing a login token and user id in the                    // 2\n// browser's localStorage facility. It polls local storage every few                                                   // 5\n// seconds to synchronize login state between multiple tabs in the same                                                // 6\n// browser.                                                                                                            // 7\n// Login with a Meteor access token. This is the only public function                                                  // 9\n// here.                                                                                                               // 10\n                                                                                                                       //\nMeteor.loginWithToken = function (token, callback) {                                                                   // 11\n  return Accounts.loginWithToken(token, callback);                                                                     // 12\n};                                                                                                                     // 13\n                                                                                                                       //\nAp.loginWithToken = function (token, callback) {                                                                       // 15\n  this.callLoginMethod({                                                                                               // 16\n    methodArguments: [{                                                                                                // 17\n      resume: token                                                                                                    // 18\n    }],                                                                                                                // 17\n    userCallback: callback                                                                                             // 20\n  });                                                                                                                  // 16\n}; // Semi-internal API. Call this function to re-enable auto login after                                              // 22\n// if it was disabled at startup.                                                                                      // 25\n                                                                                                                       //\n                                                                                                                       //\nAp._enableAutoLogin = function () {                                                                                    // 26\n  this._autoLoginEnabled = true;                                                                                       // 27\n                                                                                                                       //\n  this._pollStoredLoginToken();                                                                                        // 28\n}; ///                                                                                                                 // 29\n/// STORING                                                                                                            // 33\n///                                                                                                                    // 34\n// Call this from the top level of the test file for any test that does                                                // 36\n// logging in and out, to protect multiple tabs running the same tests                                                 // 37\n// simultaneously from interfering with each others' localStorage.                                                     // 38\n                                                                                                                       //\n                                                                                                                       //\nAp._isolateLoginTokenForTest = function () {                                                                           // 39\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();                                                           // 40\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();                                                                   // 41\n};                                                                                                                     // 42\n                                                                                                                       //\nAp._storeLoginToken = function (userId, token, tokenExpires) {                                                         // 44\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);                                                              // 45\n                                                                                                                       //\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);                                                           // 46\n                                                                                                                       //\n  if (!tokenExpires) tokenExpires = this._tokenExpiration(new Date());                                                 // 47\n                                                                                                                       //\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires); // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time                                                                                             // 52\n                                                                                                                       //\n                                                                                                                       //\n  this._lastLoginTokenWhenPolled = token;                                                                              // 53\n};                                                                                                                     // 54\n                                                                                                                       //\nAp._unstoreLoginToken = function () {                                                                                  // 56\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);                                                                   // 57\n                                                                                                                       //\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);                                                               // 58\n                                                                                                                       //\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY); // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time                                                                                             // 62\n                                                                                                                       //\n                                                                                                                       //\n  this._lastLoginTokenWhenPolled = null;                                                                               // 63\n}; // This is private, but it is exported for now because it is used by a                                              // 64\n// test in accounts-password.                                                                                          // 67\n//                                                                                                                     // 68\n                                                                                                                       //\n                                                                                                                       //\nAp._storedLoginToken = function () {                                                                                   // 69\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);                                                           // 70\n};                                                                                                                     // 71\n                                                                                                                       //\nAp._storedLoginTokenExpires = function () {                                                                            // 73\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);                                                   // 74\n};                                                                                                                     // 75\n                                                                                                                       //\nAp._storedUserId = function () {                                                                                       // 77\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);                                                               // 78\n};                                                                                                                     // 79\n                                                                                                                       //\nAp._unstoreLoginTokenIfExpiresSoon = function () {                                                                     // 81\n  var tokenExpires = this._storedLoginTokenExpires();                                                                  // 82\n                                                                                                                       //\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {                                                // 83\n    this._unstoreLoginToken();                                                                                         // 84\n  }                                                                                                                    // 85\n}; ///                                                                                                                 // 86\n/// AUTO-LOGIN                                                                                                         // 89\n///                                                                                                                    // 90\n                                                                                                                       //\n                                                                                                                       //\nAp._initLocalStorage = function () {                                                                                   // 92\n  var self = this; // Key names to use in localStorage                                                                 // 93\n                                                                                                                       //\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";                                                                          // 96\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";                                                           // 97\n  self.USER_ID_KEY = \"Meteor.userId\";                                                                                  // 98\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;                                              // 100\n                                                                                                                       //\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {                                                    // 101\n    // We want to keep using the same keys for existing apps that do not                                               // 102\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have                                             // 103\n    // to log in again after an app updates to a version of Meteor that                                                // 104\n    // contains this code, but it's generally preferable to namespace the                                              // 105\n    // keys so that connections from distinct apps to distinct DDP URLs                                                // 106\n    // will be distinct in Meteor._localStorage.                                                                       // 107\n    var namespace = \":\" + this.connection._stream.rawUrl;                                                              // 108\n                                                                                                                       //\n    if (rootUrlPathPrefix) {                                                                                           // 109\n      namespace += \":\" + rootUrlPathPrefix;                                                                            // 110\n    }                                                                                                                  // 111\n                                                                                                                       //\n    self.LOGIN_TOKEN_KEY += namespace;                                                                                 // 112\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;                                                                         // 113\n    self.USER_ID_KEY += namespace;                                                                                     // 114\n  }                                                                                                                    // 115\n                                                                                                                       //\n  if (self._autoLoginEnabled) {                                                                                        // 117\n    // Immediately try to log in via local storage, so that any DDP                                                    // 118\n    // messages are sent after we have established our user account                                                    // 119\n    self._unstoreLoginTokenIfExpiresSoon();                                                                            // 120\n                                                                                                                       //\n    var token = self._storedLoginToken();                                                                              // 121\n                                                                                                                       //\n    if (token) {                                                                                                       // 122\n      // On startup, optimistically present us as logged in while the                                                  // 123\n      // request is in flight. This reduces page flicker on startup.                                                   // 124\n      var userId = self._storedUserId();                                                                               // 125\n                                                                                                                       //\n      userId && self.connection.setUserId(userId);                                                                     // 126\n      self.loginWithToken(token, function (err) {                                                                      // 127\n        if (err) {                                                                                                     // 128\n          Meteor._debug(\"Error logging in with token: \" + err);                                                        // 129\n                                                                                                                       //\n          self.makeClientLoggedOut();                                                                                  // 130\n        }                                                                                                              // 131\n                                                                                                                       //\n        self._pageLoadLogin({                                                                                          // 133\n          type: \"resume\",                                                                                              // 134\n          allowed: !err,                                                                                               // 135\n          error: err,                                                                                                  // 136\n          methodName: \"login\",                                                                                         // 137\n          // XXX This is duplicate code with loginWithToken, but                                                       // 138\n          // loginWithToken can also be called at other times besides                                                  // 139\n          // page load.                                                                                                // 140\n          methodArguments: [{                                                                                          // 141\n            resume: token                                                                                              // 141\n          }]                                                                                                           // 141\n        });                                                                                                            // 133\n      });                                                                                                              // 143\n    }                                                                                                                  // 144\n  } // Poll local storage every 3 seconds to login if someone logged in in                                             // 145\n  // another tab                                                                                                       // 148\n                                                                                                                       //\n                                                                                                                       //\n  self._lastLoginTokenWhenPolled = token;                                                                              // 149\n                                                                                                                       //\n  if (self._pollIntervalTimer) {                                                                                       // 151\n    // Unlikely that _initLocalStorage will be called more than once for                                               // 152\n    // the same AccountsClient instance, but just in case...                                                           // 153\n    clearInterval(self._pollIntervalTimer);                                                                            // 154\n  }                                                                                                                    // 155\n                                                                                                                       //\n  self._pollIntervalTimer = setInterval(function () {                                                                  // 157\n    self._pollStoredLoginToken();                                                                                      // 158\n  }, 3000);                                                                                                            // 159\n};                                                                                                                     // 160\n                                                                                                                       //\nAp._pollStoredLoginToken = function () {                                                                               // 162\n  var self = this;                                                                                                     // 163\n                                                                                                                       //\n  if (!self._autoLoginEnabled) {                                                                                       // 165\n    return;                                                                                                            // 166\n  }                                                                                                                    // 167\n                                                                                                                       //\n  var currentLoginToken = self._storedLoginToken(); // != instead of !== just to make sure undefined and null are treated the same\n                                                                                                                       //\n                                                                                                                       //\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {                                                           // 172\n    if (currentLoginToken) {                                                                                           // 173\n      self.loginWithToken(currentLoginToken, function (err) {                                                          // 174\n        if (err) {                                                                                                     // 175\n          self.makeClientLoggedOut();                                                                                  // 176\n        }                                                                                                              // 177\n      });                                                                                                              // 178\n    } else {                                                                                                           // 179\n      self.logout();                                                                                                   // 180\n    }                                                                                                                  // 181\n  }                                                                                                                    // 182\n                                                                                                                       //\n  self._lastLoginTokenWhenPolled = currentLoginToken;                                                                  // 184\n};                                                                                                                     // 185\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"url_client.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/accounts-base/url_client.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  AccountsTest: function () {                                                                                          // 1\n    return AccountsTest;                                                                                               // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar AccountsClient = void 0;                                                                                           // 1\nmodule.watch(require(\"./accounts_client.js\"), {                                                                        // 1\n  AccountsClient: function (v) {                                                                                       // 1\n    AccountsClient = v;                                                                                                // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar Ap = AccountsClient.prototype; // All of the special hash URLs we support for accounts interactions                // 3\n                                                                                                                       //\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];                                              // 6\nvar savedHash = window.location.hash;                                                                                  // 8\n                                                                                                                       //\nAp._initUrlMatching = function () {                                                                                    // 10\n  // By default, allow the autologin process to happen.                                                                // 11\n  this._autoLoginEnabled = true; // We only support one callback per URL.                                              // 12\n                                                                                                                       //\n  this._accountsCallbacks = {}; // Try to match the saved value of window.location.hash.                               // 15\n                                                                                                                       //\n  this._attemptToMatchHash();                                                                                          // 18\n}; // Separate out this functionality for testing                                                                      // 19\n                                                                                                                       //\n                                                                                                                       //\nAp._attemptToMatchHash = function () {                                                                                 // 23\n  attemptToMatchHash(this, savedHash, defaultSuccessHandler);                                                          // 24\n}; // Note that both arguments are optional and are currently only passed by                                           // 25\n// accounts_url_tests.js.                                                                                              // 28\n                                                                                                                       //\n                                                                                                                       //\nfunction attemptToMatchHash(accounts, hash, success) {                                                                 // 29\n  _.each(accountsPaths, function (urlPart) {                                                                           // 30\n    var token;                                                                                                         // 31\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");                                                     // 33\n    var match = hash.match(tokenRegex);                                                                                // 34\n                                                                                                                       //\n    if (match) {                                                                                                       // 36\n      token = match[1]; // XXX COMPAT WITH 0.9.3                                                                       // 37\n                                                                                                                       //\n      if (urlPart === \"reset-password\") {                                                                              // 40\n        accounts._resetPasswordToken = token;                                                                          // 41\n      } else if (urlPart === \"verify-email\") {                                                                         // 42\n        accounts._verifyEmailToken = token;                                                                            // 43\n      } else if (urlPart === \"enroll-account\") {                                                                       // 44\n        accounts._enrollAccountToken = token;                                                                          // 45\n      }                                                                                                                // 46\n    } else {                                                                                                           // 47\n      return;                                                                                                          // 48\n    } // If no handlers match the hash, then maybe it's meant to be consumed                                           // 49\n    // by some entirely different code, so we only clear it the first time                                             // 52\n    // a handler successfully matches. Note that later handlers reuse the                                              // 53\n    // savedHash, so clearing window.location.hash here will not interfere                                             // 54\n    // with their needs.                                                                                               // 55\n                                                                                                                       //\n                                                                                                                       //\n    window.location.hash = \"\"; // Do some stuff with the token we matched                                              // 56\n                                                                                                                       //\n    success.call(accounts, token, urlPart);                                                                            // 59\n  });                                                                                                                  // 60\n}                                                                                                                      // 61\n                                                                                                                       //\nfunction defaultSuccessHandler(token, urlPart) {                                                                       // 63\n  var self = this; // put login in a suspended state to wait for the interaction to finish                             // 64\n                                                                                                                       //\n  self._autoLoginEnabled = false; // wait for other packages to register callbacks                                     // 67\n                                                                                                                       //\n  Meteor.startup(function () {                                                                                         // 70\n    // if a callback has been registered for this kind of token, call it                                               // 71\n    if (self._accountsCallbacks[urlPart]) {                                                                            // 72\n      self._accountsCallbacks[urlPart](token, function () {                                                            // 73\n        self._enableAutoLogin();                                                                                       // 74\n      });                                                                                                              // 75\n    }                                                                                                                  // 76\n  });                                                                                                                  // 77\n} // Export for testing                                                                                                // 78\n                                                                                                                       //\n                                                                                                                       //\nvar AccountsTest = {                                                                                                   // 81\n  attemptToMatchHash: function (hash, success) {                                                                       // 82\n    return attemptToMatchHash(Accounts, hash, success);                                                                // 83\n  }                                                                                                                    // 84\n};                                                                                                                     // 81\n                                                                                                                       //\n// XXX these should be moved to accounts-password eventually. Right now                                                // 87\n// this is prevented by the need to set autoLoginEnabled=false, but in                                                 // 88\n// some bright future we won't need to do that anymore.                                                                // 89\n/**                                                                                                                    // 91\n * @summary Register a function to call when a reset password link is clicked                                          //\n * in an email sent by                                                                                                 //\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).                                              //\n * This function should be called in top-level code, not inside                                                        //\n * `Meteor.startup()`.                                                                                                 //\n * @memberof! Accounts                                                                                                 //\n * @name onResetPasswordLink                                                                                           //\n * @param  {Function} callback The function to call. It is given two arguments:                                        //\n *                                                                                                                     //\n * 1. `token`: A password reset token that can be passed to                                                            //\n * [`Accounts.resetPassword`](#accounts_resetpassword).                                                                //\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal                               //\n * login process is suspended until this function is called, so that the                                               //\n * password for user A can be reset even if user B was logged in.                                                      //\n * @locus Client                                                                                                       //\n */Ap.onResetPasswordLink = function (callback) {                                                                      //\n  if (this._accountsCallbacks[\"reset-password\"]) {                                                                     // 109\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                    // 112\n                                                                                                                       //\n  this._accountsCallbacks[\"reset-password\"] = callback;                                                                // 114\n}; /**                                                                                                                 // 115\n    * @summary Register a function to call when an email verification link is                                          //\n    * clicked in an email sent by                                                                                      //\n    * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).                                             //\n    * This function should be called in top-level code, not inside                                                     //\n    * `Meteor.startup()`.                                                                                              //\n    * @memberof! Accounts                                                                                              //\n    * @name onEmailVerificationLink                                                                                    //\n    * @param  {Function} callback The function to call. It is given two arguments:                                     //\n    *                                                                                                                  //\n    * 1. `token`: An email verification token that can be passed to                                                    //\n    * [`Accounts.verifyEmail`](#accounts_verifyemail).                                                                 //\n    * 2. `done`: A function to call when the email verification UI flow is complete.                                   //\n    * The normal login process is suspended until this function is called, so                                          //\n    * that the user can be notified that they are verifying their email before                                         //\n    * being logged in.                                                                                                 //\n    * @locus Client                                                                                                    //\n    */                                                                                                                 //\n                                                                                                                       //\nAp.onEmailVerificationLink = function (callback) {                                                                     // 135\n  if (this._accountsCallbacks[\"verify-email\"]) {                                                                       // 136\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                    // 139\n                                                                                                                       //\n  this._accountsCallbacks[\"verify-email\"] = callback;                                                                  // 141\n}; /**                                                                                                                 // 142\n    * @summary Register a function to call when an account enrollment link is                                          //\n    * clicked in an email sent by                                                                                      //\n    * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).                                                 //\n    * This function should be called in top-level code, not inside                                                     //\n    * `Meteor.startup()`.                                                                                              //\n    * @memberof! Accounts                                                                                              //\n    * @name onEnrollmentLink                                                                                           //\n    * @param  {Function} callback The function to call. It is given two arguments:                                     //\n    *                                                                                                                  //\n    * 1. `token`: A password reset token that can be passed to                                                         //\n    * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly                                            //\n    * enrolled account a password.                                                                                     //\n    * 2. `done`: A function to call when the enrollment UI flow is complete.                                           //\n    * The normal login process is suspended until this function is called, so that                                     //\n    * user A can be enrolled even if user B was logged in.                                                             //\n    * @locus Client                                                                                                    //\n    */                                                                                                                 //\n                                                                                                                       //\nAp.onEnrollmentLink = function (callback) {                                                                            // 162\n  if (this._accountsCallbacks[\"enroll-account\"]) {                                                                     // 163\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" + \"Only one callback added will be executed.\");\n  }                                                                                                                    // 166\n                                                                                                                       //\n  this._accountsCallbacks[\"enroll-account\"] = callback;                                                                // 168\n};                                                                                                                     // 169\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/accounts-base/client_main.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['accounts-base'] = exports, {\n  Accounts: Accounts\n});\n\n})();\n","servePath":"/packages/accounts-base.js","sourceMap":{"version":3,"sources":["packages/accounts-base/client_main.js","packages/accounts-base/accounts_client.js","packages/accounts-base/accounts_common.js","packages/accounts-base/localstorage_token.js","packages/accounts-base/url_client.js"],"names":["module1","module","export","AccountsClient","AccountsTest","watch","require","v","Accounts","Meteor","users","AccountsCommon","options","_loggingIn","ReactiveVar","_loggingOut","_loginServicesHandle","connection","subscribe","_pageLoadLoginCallbacks","_pageLoadLoginAttemptInfo","_initUrlMatching","_initLocalStorage","_loginFuncs","userId","_setLoggingIn","x","set","loggingIn","get","loggingOut","registerClientLoginFunction","funcName","func","Error","callLoginFunction","funcArgs","apply","applyLoginFunction","logout","callback","self","wait","error","result","makeClientLoggedOut","logoutOtherClients","err","_storeLoginToken","token","tokenExpires","Ap","prototype","callLoginMethod","_","extend","methodName","methodArguments","_suppressLoggingIn","each","f","loginCallbacks","once","_onLoginHook","_onLoginFailureHook","userCallback","arguments","reconnected","onResultReceived","_reconnectStopper","stop","DDP","onReconnect","conn","storedToken","_storedLoginToken","_storedLoginTokenExpires","_tokenExpiration","Date","_tokenExpiresSoon","resume","storedTokenNow","loggedInAndDataReadyCallback","validateResult","e","makeClientLoggedIn","id","_userId","_onLogoutHook","_unstoreLoginToken","setUserId","loginServicesConfigured","ready","onPageLoadLogin","push","_pageLoadLogin","attemptInfo","_debug","Package","blaze","Blaze","Template","registerHelper","user","_options","undefined","_initConnection","Mongo","Collection","_preventAutopublish","Hook","bindEnvironment","debugPrintExceptions","findOne","config","isServer","__meteor_runtime_config__","accountsConfigCalled","has","isClient","OAuthEncryption","loadKey","oauthSecretKey","omit","VALID_KEYS","keys","key","contains","onLogin","register","onLoginFailure","onLogout","ddpUrl","connect","ACCOUNTS_CONNECTION_URL","_getTokenLifetimeMs","loginExpirationInDays","LOGIN_UNEXPIRING_TOKEN_DAYS","DEFAULT_LOGIN_EXPIRATION_DAYS","_getPasswordResetTokenLifetimeMs","passwordResetTokenExpirationInDays","DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS","_getPasswordEnrollTokenLifetimeMs","passwordEnrollTokenExpirationInDays","DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS","when","getTime","minLifetimeMs","minLifetimeCapMs","MIN_TOKEN_LIFETIME_CAP_SECS","EXPIRE_TOKENS_INTERVAL_MS","CONNECTION_CLOSE_DELAY_MS","startup","ServiceConfiguration","loginServiceConfiguration","configurations","ConfigError","lceName","LoginCancelledError","makeErrorType","description","message","name","numericError","loginWithToken","_enableAutoLogin","_autoLoginEnabled","_pollStoredLoginToken","_isolateLoginTokenForTest","LOGIN_TOKEN_KEY","Random","USER_ID_KEY","_localStorage","setItem","LOGIN_TOKEN_EXPIRES_KEY","_lastLoginTokenWhenPolled","removeItem","getItem","_storedUserId","_unstoreLoginTokenIfExpiresSoon","rootUrlPathPrefix","ROOT_URL_PATH_PREFIX","namespace","_stream","rawUrl","type","allowed","_pollIntervalTimer","clearInterval","setInterval","currentLoginToken","accountsPaths","savedHash","window","location","hash","_accountsCallbacks","_attemptToMatchHash","attemptToMatchHash","defaultSuccessHandler","accounts","success","urlPart","tokenRegex","RegExp","match","_resetPasswordToken","_verifyEmailToken","_enrollAccountToken","call","onResetPasswordLink","onEmailVerificationLink","onEnrollmentLink"],"mappings":"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","file":"/packages/accounts-base.js","sourcesContent":["import {AccountsClient} from \"./accounts_client.js\";\nimport {AccountsTest} from \"./url_client.js\";\nimport \"./localstorage_token.js\";\n\n/**\n * @namespace Accounts\n * @summary The namespace for all client-side accounts-related methods.\n */\nAccounts = new AccountsClient();\n\n/**\n * @summary A [Mongo.Collection](#collections) containing user documents.\n * @locus Anywhere\n * @type {Mongo.Collection}\n * @importFromPackage meteor\n */\nMeteor.users = Accounts.users;\n\nexport {\n  // Since this file is the main module for the client version of the\n  // accounts-base package, properties of non-entry-point modules need to\n  // be re-exported in order to be accessible to modules that import the\n  // accounts-base package.\n  AccountsClient,\n  AccountsTest,\n};\n","import {AccountsCommon} from \"./accounts_common.js\";\n\n/**\n * @summary Constructor for the `Accounts` object on the client.\n * @locus Client\n * @class AccountsClient\n * @extends AccountsCommon\n * @instancename accountsClient\n * @param {Object} options an object with fields:\n * @param {Object} options.connection Optional DDP connection to reuse.\n * @param {String} options.ddpUrl Optional URL for creating a new DDP connection.\n */\nexport class AccountsClient extends AccountsCommon {\n  constructor(options) {\n    super(options);\n\n    this._loggingIn = new ReactiveVar(false);\n    this._loggingOut = new ReactiveVar(false);\n\n    this._loginServicesHandle =\n      this.connection.subscribe(\"meteor.loginServiceConfiguration\");\n\n    this._pageLoadLoginCallbacks = [];\n    this._pageLoadLoginAttemptInfo = null;\n\n    // Defined in url_client.js.\n    this._initUrlMatching();\n\n    // Defined in localstorage_token.js.\n    this._initLocalStorage();\n\n    // This is for .registerClientLoginFunction & .callLoginFunction.\n    this._loginFuncs = {};\n  }\n\n  ///\n  /// CURRENT USER\n  ///\n\n  // @override\n  userId() {\n    return this.connection.userId();\n  }\n\n  // This is mostly just called within this file, but Meteor.loginWithPassword\n  // also uses it to make loggingIn() be true during the beginPasswordExchange\n  // method call too.\n  _setLoggingIn(x) {\n    this._loggingIn.set(x);\n  }\n\n  /**\n   * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingIn() {\n    return this._loggingIn.get();\n  }\n\n  /**\n   * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n   * @locus Client\n   */\n  loggingOut() {\n    return this._loggingOut.get();\n  }\n\n  /**\n   * @summary Register a new login function on the client. Intended for OAuth package authors. You can call the login function by using\n   `Accounts.callLoginFunction` or `Accounts.callLoginFunction`.\n   * @locus Client\n   * @param {String} funcName The name of your login function. Used by `Accounts.callLoginFunction` and `Accounts.applyLoginFunction`.\n   Should be the OAuth provider name accordingly.\n   * @param {Function} func The actual function you want to call. Just write it in the manner of `loginWithFoo`.\n   */\n  registerClientLoginFunction(funcName, func) {\n    if (this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} has been defined already`);\n    }\n    this._loginFuncs[funcName] = func;\n  }\n\n  /**\n   * @summary Call a login function defined using `Accounts.registerClientLoginFunction`. Excluding the first argument, all remaining\n   arguments are passed to the login function accordingly. Use `applyLoginFunction` if you want to pass in an arguments array that contains\n   all arguments for the login function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   */\n  callLoginFunction(funcName, ...funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Same as ``callLoginFunction` but accept an `arguments` which contains all arguments for the login\n   function.\n   * @locus Client\n   * @param {String} funcName The name of the login function you wanted to call.\n   * @param {Array} funcArgs The `arguments` for the login function.\n   */\n  applyLoginFunction(funcName, funcArgs) {\n    if (!this._loginFuncs[funcName]) {\n      throw new Error(`${funcName} was not defined`);\n    }\n    return this._loginFuncs[funcName].apply(this, funcArgs);\n  }\n\n  /**\n   * @summary Log the user out.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logout(callback) {\n    var self = this;\n    self._loggingOut.set(true);\n    self.connection.apply('logout', [], {\n      wait: true\n    }, function (error, result) {\n      self._loggingOut.set(false);\n      if (error) {\n        callback && callback(error);\n      } else {\n        self.makeClientLoggedOut();\n        callback && callback();\n      }\n    });\n  }\n\n  /**\n   * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n   * @locus Client\n   * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n   */\n  logoutOtherClients(callback) {\n    var self = this;\n\n    // We need to make two method calls: one to replace our current token,\n    // and another to remove all tokens except the current one. We want to\n    // call these two methods one after the other, without any other\n    // methods running between them. For example, we don't want `logout`\n    // to be called in between our two method calls (otherwise the second\n    // method call would return an error). Another example: we don't want\n    // logout to be called before the callback for `getNewToken`;\n    // otherwise we would momentarily log the user out and then write a\n    // new token to localStorage.\n    //\n    // To accomplish this, we make both calls as wait methods, and queue\n    // them one after the other, without spinning off the event loop in\n    // between. Even though we queue `removeOtherTokens` before\n    // `getNewToken`, we won't actually send the `removeOtherTokens` call\n    // until the `getNewToken` callback has finished running, because they\n    // are both wait methods.\n    self.connection.apply(\n      'getNewToken',\n      [],\n      { wait: true },\n      function (err, result) {\n        if (! err) {\n          self._storeLoginToken(\n            self.userId(),\n            result.token,\n            result.tokenExpires\n          );\n        }\n      }\n    );\n\n    self.connection.apply(\n      'removeOtherTokens',\n      [],\n      { wait: true },\n      function (err) {\n        callback && callback(err);\n      }\n    );\n  }\n};\n\nvar Ap = AccountsClient.prototype;\n\n/**\n * @summary True if a login method (such as `Meteor.loginWithPassword`, `Meteor.loginWithFacebook`, or `Accounts.createUser`) is currently in progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingIn = function () {\n  return Accounts.loggingIn();\n};\n\n/**\n * @summary True if a logout method (such as `Meteor.logout`) is currently in progress. A reactive data source.\n * @locus Client\n * @importFromPackage meteor\n */\nMeteor.loggingOut = function () {\n  return Accounts.loggingOut();\n};\n\n///\n/// LOGIN METHODS\n///\n\n// Call a login method on the server.\n//\n// A login method is a method which on success calls `this.setUserId(id)` and\n// `Accounts._setLoginToken` on the server and returns an object with fields\n// 'id' (containing the user id), 'token' (containing a resume token), and\n// optionally `tokenExpires`.\n//\n// This function takes care of:\n//   - Updating the Meteor.loggingIn() reactive data source\n//   - Calling the method in 'wait' mode\n//   - On success, saving the resume token to localStorage\n//   - On success, calling Accounts.connection.setUserId()\n//   - Setting up an onReconnect handler which logs in with\n//     the resume token\n//\n// Options:\n// - methodName: The method to call (default 'login')\n// - methodArguments: The arguments for the method\n// - validateResult: If provided, will be called with the result of the\n//                 method. If it throws, the client will not be logged in (and\n//                 its error will be passed to the callback).\n// - userCallback: Will be called with no arguments once the user is fully\n//                 logged in, or with the error on error.\n//\nAp.callLoginMethod = function (options) {\n  var self = this;\n\n  options = _.extend({\n    methodName: 'login',\n    methodArguments: [{}],\n    _suppressLoggingIn: false\n  }, options);\n\n  // Set defaults for callback arguments to no-op functions; make sure we\n  // override falsey values too.\n  _.each(['validateResult', 'userCallback'], function (f) {\n    if (!options[f])\n      options[f] = function () {};\n  });\n\n  // Prepare callbacks: user provided and onLogin/onLoginFailure hooks.\n  var loginCallbacks = _.once(function (error) {\n    if (!error) {\n      self._onLoginHook.each(function (callback) {\n        callback();\n        return true;\n      });\n    } else {\n      self._onLoginFailureHook.each(function (callback) {\n        callback({ error });\n        return true;\n      });\n    }\n    options.userCallback.apply(this, arguments);\n  });\n\n  var reconnected = false;\n\n  // We want to set up onReconnect as soon as we get a result token back from\n  // the server, without having to wait for subscriptions to rerun. This is\n  // because if we disconnect and reconnect between getting the result and\n  // getting the results of subscription rerun, we WILL NOT re-send this\n  // method (because we never re-send methods whose results we've received)\n  // but we WILL call loggedInAndDataReadyCallback at \"reconnect quiesce\"\n  // time. This will lead to makeClientLoggedIn(result.id) even though we\n  // haven't actually sent a login method!\n  //\n  // But by making sure that we send this \"resume\" login in that case (and\n  // calling makeClientLoggedOut if it fails), we'll end up with an accurate\n  // client-side userId. (It's important that livedata_connection guarantees\n  // that the \"reconnect quiesce\"-time call to loggedInAndDataReadyCallback\n  // will occur before the callback from the resume login call.)\n  var onResultReceived = function (err, result) {\n    if (err || !result || !result.token) {\n      // Leave onReconnect alone if there was an error, so that if the user was\n      // already logged in they will still get logged in on reconnect.\n      // See issue #4970.\n    } else {\n      // First clear out any previously set Acccounts login onReconnect\n      // callback (to make sure we don't keep piling up duplicate callbacks,\n      // which would then all be triggered when reconnecting).\n      if (self._reconnectStopper) {\n        self._reconnectStopper.stop();\n      }\n\n      self._reconnectStopper = DDP.onReconnect(function (conn) {\n        if (conn != self.connection) {\n          return;\n        }\n        reconnected = true;\n        // If our token was updated in storage, use the latest one.\n        var storedToken = self._storedLoginToken();\n        if (storedToken) {\n          result = {\n            token: storedToken,\n            tokenExpires: self._storedLoginTokenExpires()\n          };\n        }\n        if (! result.tokenExpires)\n          result.tokenExpires = self._tokenExpiration(new Date());\n        if (self._tokenExpiresSoon(result.tokenExpires)) {\n          self.makeClientLoggedOut();\n        } else {\n          self.callLoginMethod({\n            methodArguments: [{resume: result.token}],\n            // Reconnect quiescence ensures that the user doesn't see an\n            // intermediate state before the login method finishes. So we don't\n            // need to show a logging-in animation.\n            _suppressLoggingIn: true,\n            userCallback: function (error) {\n              var storedTokenNow = self._storedLoginToken();\n              if (error) {\n                // If we had a login error AND the current stored token is the\n                // one that we tried to log in with, then declare ourselves\n                // logged out. If there's a token in storage but it's not the\n                // token that we tried to log in with, we don't know anything\n                // about whether that token is valid or not, so do nothing. The\n                // periodic localStorage poll will decide if we are logged in or\n                // out with this token, if it hasn't already. Of course, even\n                // with this check, another tab could insert a new valid token\n                // immediately before we clear localStorage here, which would\n                // lead to both tabs being logged out, but by checking the token\n                // in storage right now we hope to make that unlikely to happen.\n                //\n                // If there is no token in storage right now, we don't have to\n                // do anything; whatever code removed the token from storage was\n                // responsible for calling `makeClientLoggedOut()`, or the\n                // periodic localStorage poll will call `makeClientLoggedOut`\n                // eventually if another tab wiped the token from storage.\n                if (storedTokenNow && storedTokenNow === result.token) {\n                  self.makeClientLoggedOut();\n                }\n              }\n              // Possibly a weird callback to call, but better than nothing if\n              // there is a reconnect between \"login result received\" and \"data\n              // ready\".\n              loginCallbacks(error);\n            }});\n        }\n      });\n    }\n  };\n\n  // This callback is called once the local cache of the current-user\n  // subscription (and all subscriptions, in fact) are guaranteed to be up to\n  // date.\n  var loggedInAndDataReadyCallback = function (error, result) {\n    // If the login method returns its result but the connection is lost\n    // before the data is in the local cache, it'll set an onReconnect (see\n    // above). The onReconnect will try to log in using the token, and *it*\n    // will call userCallback via its own version of this\n    // loggedInAndDataReadyCallback. So we don't have to do anything here.\n    if (reconnected)\n      return;\n\n    // Note that we need to call this even if _suppressLoggingIn is true,\n    // because it could be matching a _setLoggingIn(true) from a\n    // half-completed pre-reconnect login method.\n    self._setLoggingIn(false);\n    if (error || !result) {\n      error = error || new Error(\n        \"No result from call to \" + options.methodName);\n      loginCallbacks(error);\n      return;\n    }\n    try {\n      options.validateResult(result);\n    } catch (e) {\n      loginCallbacks(e);\n      return;\n    }\n\n    // Make the client logged in. (The user data should already be loaded!)\n    self.makeClientLoggedIn(result.id, result.token, result.tokenExpires);\n    loginCallbacks();\n  };\n\n  if (!options._suppressLoggingIn)\n    self._setLoggingIn(true);\n  self.connection.apply(\n    options.methodName,\n    options.methodArguments,\n    {wait: true, onResultReceived: onResultReceived},\n    loggedInAndDataReadyCallback);\n};\n\nAp.makeClientLoggedOut = function () {\n  // Ensure client was successfully logged in before running logout hooks.\n  if (this.connection._userId) {\n    this._onLogoutHook.each(function (callback) {\n      callback();\n      return true;\n    });\n  }\n  this._unstoreLoginToken();\n  this.connection.setUserId(null);\n  this._reconnectStopper && this._reconnectStopper.stop();\n};\n\nAp.makeClientLoggedIn = function (userId, token, tokenExpires) {\n  this._storeLoginToken(userId, token, tokenExpires);\n  this.connection.setUserId(userId);\n};\n\n/**\n * @summary Log the user out.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logout = function (callback) {\n  return Accounts.logout(callback);\n};\n\n/**\n * @summary Log out other clients logged in as the current user, but does not log out the client that calls this function.\n * @locus Client\n * @param {Function} [callback] Optional callback. Called with no arguments on success, or with a single `Error` argument on failure.\n * @importFromPackage meteor\n */\nMeteor.logoutOtherClients = function (callback) {\n  return Accounts.logoutOtherClients(callback);\n};\n\n\n///\n/// LOGIN SERVICES\n///\n\n// A reactive function returning whether the loginServiceConfiguration\n// subscription is ready. Used by accounts-ui to hide the login button\n// until we have all the configuration loaded\n//\nAp.loginServicesConfigured = function () {\n  return this._loginServicesHandle.ready();\n};\n\n\n// Some login services such as the redirect login flow or the resume\n// login handler can log the user in at page load time.  The\n// Meteor.loginWithX functions have a callback argument, but the\n// callback function instance won't be in memory any longer if the\n// page was reloaded.  The `onPageLoadLogin` function allows a\n// callback to be registered for the case where the login was\n// initiated in a previous VM, and we now have the result of the login\n// attempt in a new VM.\n\n// Register a callback to be called if we have information about a\n// login attempt at page load time.  Call the callback immediately if\n// we already have the page load login attempt info, otherwise stash\n// the callback to be called if and when we do get the attempt info.\n//\nAp.onPageLoadLogin = function (f) {\n  if (this._pageLoadLoginAttemptInfo) {\n    f(this._pageLoadLoginAttemptInfo);\n  } else {\n    this._pageLoadLoginCallbacks.push(f);\n  }\n};\n\n\n// Receive the information about the login attempt at page load time.\n// Call registered callbacks, and also record the info in case\n// someone's callback hasn't been registered yet.\n//\nAp._pageLoadLogin = function (attemptInfo) {\n  if (this._pageLoadLoginAttemptInfo) {\n    Meteor._debug(\"Ignoring unexpected duplicate page load login attempt info\");\n    return;\n  }\n\n  _.each(this._pageLoadLoginCallbacks, function (callback) {\n    callback(attemptInfo);\n  });\n\n  this._pageLoadLoginCallbacks = [];\n  this._pageLoadLoginAttemptInfo = attemptInfo;\n};\n\n\n///\n/// HANDLEBARS HELPERS\n///\n\n// If our app has a Blaze, register the {{currentUser}} and {{loggingIn}}\n// global helpers.\nif (Package.blaze) {\n  /**\n   * @global\n   * @name  currentUser\n   * @isHelper true\n   * @summary Calls [Meteor.user()](#meteor_user). Use `{{#if currentUser}}` to check whether the user is logged in.\n   */\n  Package.blaze.Blaze.Template.registerHelper('currentUser', function () {\n    return Meteor.user();\n  });\n\n  /**\n   * @global\n   * @name  loggingIn\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingIn', function () {\n    return Meteor.loggingIn();\n  });\n\n  /**\n   * @global\n   * @name  loggingOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingOut', function () {\n    return Meteor.loggingOut();\n  });\n\n  /**\n   * @global\n   * @name  loggingInOrOut\n   * @isHelper true\n   * @summary Calls [Meteor.loggingIn()](#meteor_loggingin) or [Meteor.loggingOut()](#meteor_loggingout).\n   */\n  Package.blaze.Blaze.Template.registerHelper('loggingInOrOut', function () {\n    return (Meteor.loggingIn() || Meteor.loggingOut());\n  });\n}\n","/**\n * @summary Super-constructor for AccountsClient and AccountsServer.\n * @locus Anywhere\n * @class AccountsCommon\n * @instancename accountsClientOrServer\n * @param options {Object} an object with fields:\n * - connection {Object} Optional DDP connection to reuse.\n * - ddpUrl {String} Optional URL for creating a new DDP connection.\n */\nexport class AccountsCommon {\n  constructor(options) {\n    // Currently this is read directly by packages like accounts-password\n    // and accounts-ui-unstyled.\n    this._options = {};\n\n    // Note that setting this.connection = null causes this.users to be a\n    // LocalCollection, which is not what we want.\n    this.connection = undefined;\n    this._initConnection(options || {});\n\n    // There is an allow call in accounts_server.js that restricts writes to\n    // this collection.\n    this.users = new Mongo.Collection(\"users\", {\n      _preventAutopublish: true,\n      connection: this.connection\n    });\n\n    // Callback exceptions are printed with Meteor._debug and ignored.\n    this._onLoginHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogin callback\"\n    });\n\n    this._onLoginFailureHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLoginFailure callback\"\n    });\n\n    this._onLogoutHook = new Hook({\n      bindEnvironment: false,\n      debugPrintExceptions: \"onLogout callback\"\n    });\n  }\n\n  /**\n   * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  userId() {\n    throw new Error(\"userId method not implemented\");\n  }\n\n  /**\n   * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n   * @locus Anywhere\n   */\n  user() {\n    var userId = this.userId();\n    return userId ? this.users.findOne(userId) : null;\n  }\n\n  // Set up config for the accounts system. Call this on both the client\n  // and the server.\n  //\n  // Note that this method gets overridden on AccountsServer.prototype, but\n  // the overriding method calls the overridden method.\n  //\n  // XXX we should add some enforcement that this is called on both the\n  // client and the server. Otherwise, a user can\n  // 'forbidClientAccountCreation' only on the client and while it looks\n  // like their app is secure, the server will still accept createUser\n  // calls. https://github.com/meteor/meteor/issues/828\n  //\n  // @param options {Object} an object with fields:\n  // - sendVerificationEmail {Boolean}\n  //     Send email address verification emails to new users created from\n  //     client signups.\n  // - forbidClientAccountCreation {Boolean}\n  //     Do not allow clients to create accounts directly.\n  // - restrictCreationByEmailDomain {Function or String}\n  //     Require created users to have an email matching the function or\n  //     having the string as domain.\n  // - loginExpirationInDays {Number}\n  //     Number of days since login until a user is logged out (login token\n  //     expires).\n  // - passwordResetTokenExpirationInDays {Number}\n  //     Number of days since password reset token creation until the\n  //     token cannt be used any longer (password reset token expires).\n  // - ambiguousErrorMessages {Boolean}\n  //     Return ambiguous error messages from login failures to prevent\n  //     user enumeration.\n  // - bcryptRounds {Number}\n  //     Allows override of number of bcrypt rounds (aka work factor) used\n  //     to store passwords.\n\n  /**\n   * @summary Set global accounts options.\n   * @locus Anywhere\n   * @param {Object} options\n   * @param {Boolean} options.sendVerificationEmail New users with an email address will receive an address verification email.\n   * @param {Boolean} options.forbidClientAccountCreation Calls to [`createUser`](#accounts_createuser) from the client will be rejected. In addition, if you are using [accounts-ui](#accountsui), the \"Create account\" link will not be available.\n   * @param {String | Function} options.restrictCreationByEmailDomain If set to a string, only allows new users if the domain part of their email address matches the string. If set to a function, only allows new users if the function returns true.  The function is passed the full email address of the proposed new user.  Works with password-based sign-in and external services that expose email addresses (Google, Facebook, GitHub). All existing users still can log in after enabling this option. Example: `Accounts.config({ restrictCreationByEmailDomain: 'school.edu' })`.\n   * @param {Number} options.loginExpirationInDays The number of days from when a user logs in until their token expires and they are logged out. Defaults to 90. Set to `null` to disable login expiration.\n   * @param {String} options.oauthSecretKey When using the `oauth-encryption` package, the 16 byte key using to encrypt sensitive account credentials in the database, encoded in base64.  This option may only be specifed on the server.  See packages/oauth-encryption/README.md for details.\n   * @param {Number} options.passwordResetTokenExpirationInDays The number of days from when a link to reset password is sent until token expires and user can't reset password with the link anymore. Defaults to 3.\n   * @param {Number} options.passwordEnrollTokenExpirationInDays The number of days from when a link to set inital password is sent until token expires and user can't set password with the link anymore. Defaults to 30.\n   * @param {Boolean} options.ambiguousErrorMessages Return ambiguous error messages from login failures to prevent user enumeration. Defaults to false.\n   */\n  config(options) {\n    var self = this;\n\n    // We don't want users to accidentally only call Accounts.config on the\n    // client, where some of the options will have partial effects (eg removing\n    // the \"create account\" button from accounts-ui if forbidClientAccountCreation\n    // is set, or redirecting Google login to a specific-domain page) without\n    // having their full effects.\n    if (Meteor.isServer) {\n      __meteor_runtime_config__.accountsConfigCalled = true;\n    } else if (!__meteor_runtime_config__.accountsConfigCalled) {\n      // XXX would be nice to \"crash\" the client and replace the UI with an error\n      // message, but there's no trivial way to do this.\n      Meteor._debug(\"Accounts.config was called on the client but not on the \" +\n                    \"server; some configuration options may not take effect.\");\n    }\n\n    // We need to validate the oauthSecretKey option at the time\n    // Accounts.config is called. We also deliberately don't store the\n    // oauthSecretKey in Accounts._options.\n    if (_.has(options, \"oauthSecretKey\")) {\n      if (Meteor.isClient)\n        throw new Error(\"The oauthSecretKey option may only be specified on the server\");\n      if (! Package[\"oauth-encryption\"])\n        throw new Error(\"The oauth-encryption package must be loaded to set oauthSecretKey\");\n      Package[\"oauth-encryption\"].OAuthEncryption.loadKey(options.oauthSecretKey);\n      options = _.omit(options, \"oauthSecretKey\");\n    }\n\n    // validate option keys\n    var VALID_KEYS = [\"sendVerificationEmail\", \"forbidClientAccountCreation\", \"passwordEnrollTokenExpirationInDays\",\n                      \"restrictCreationByEmailDomain\", \"loginExpirationInDays\", \"passwordResetTokenExpirationInDays\",\n                      \"ambiguousErrorMessages\", \"bcryptRounds\"];\n    _.each(_.keys(options), function (key) {\n      if (!_.contains(VALID_KEYS, key)) {\n        throw new Error(\"Accounts.config: Invalid key: \" + key);\n      }\n    });\n\n    // set values in Accounts._options\n    _.each(VALID_KEYS, function (key) {\n      if (key in options) {\n        if (key in self._options) {\n          throw new Error(\"Can't set `\" + key + \"` more than once\");\n        }\n        self._options[key] = options[key];\n      }\n    });\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when login is successful.\n   */\n  onLogin(func) {\n    return this._onLoginHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a login attempt fails.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called after the login has failed.\n   */\n  onLoginFailure(func) {\n    return this._onLoginFailureHook.register(func);\n  }\n\n  /**\n   * @summary Register a callback to be called after a logout attempt succeeds.\n   * @locus Anywhere\n   * @param {Function} func The callback to be called when logout is successful.\n   */\n  onLogout(func) {\n    return this._onLogoutHook.register(func);\n  }\n\n  _initConnection(options) {\n    if (! Meteor.isClient) {\n      return;\n    }\n\n    // The connection used by the Accounts system. This is the connection\n    // that will get logged in by Meteor.login(), and this is the\n    // connection whose login state will be reflected by Meteor.userId().\n    //\n    // It would be much preferable for this to be in accounts_client.js,\n    // but it has to be here because it's needed to create the\n    // Meteor.users collection.\n\n    if (options.connection) {\n      this.connection = options.connection;\n    } else if (options.ddpUrl) {\n      this.connection = DDP.connect(options.ddpUrl);\n    } else if (typeof __meteor_runtime_config__ !== \"undefined\" &&\n               __meteor_runtime_config__.ACCOUNTS_CONNECTION_URL) {\n      // Temporary, internal hook to allow the server to point the client\n      // to a different authentication server. This is for a very\n      // particular use case that comes up when implementing a oauth\n      // server. Unsupported and may go away at any point in time.\n      //\n      // We will eventually provide a general way to use account-base\n      // against any DDP connection, not just one special one.\n      this.connection =\n        DDP.connect(__meteor_runtime_config__.ACCOUNTS_CONNECTION_URL);\n    } else {\n      this.connection = Meteor.connection;\n    }\n  }\n\n  _getTokenLifetimeMs() {\n    // When loginExpirationInDays is set to null, we'll use a really high\n    // number of days (LOGIN_UNEXPIRABLE_TOKEN_DAYS) to simulate an\n    // unexpiring token.\n    const loginExpirationInDays =\n      (this._options.loginExpirationInDays === null)\n        ? LOGIN_UNEXPIRING_TOKEN_DAYS\n        : this._options.loginExpirationInDays;\n    return (loginExpirationInDays\n        || DEFAULT_LOGIN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordResetTokenLifetimeMs() {\n    return (this._options.passwordResetTokenExpirationInDays ||\n            DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _getPasswordEnrollTokenLifetimeMs() {\n    return (this._options.passwordEnrollTokenExpirationInDays ||\n        DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS) * 24 * 60 * 60 * 1000;\n  }\n\n  _tokenExpiration(when) {\n    // We pass when through the Date constructor for backwards compatibility;\n    // `when` used to be a number.\n    return new Date((new Date(when)).getTime() + this._getTokenLifetimeMs());\n  }\n\n  _tokenExpiresSoon(when) {\n    var minLifetimeMs = .1 * this._getTokenLifetimeMs();\n    var minLifetimeCapMs = MIN_TOKEN_LIFETIME_CAP_SECS * 1000;\n    if (minLifetimeMs > minLifetimeCapMs)\n      minLifetimeMs = minLifetimeCapMs;\n    return new Date() > (new Date(when) - minLifetimeMs);\n  }\n}\n\nvar Ap = AccountsCommon.prototype;\n\n// Note that Accounts is defined separately in accounts_client.js and\n// accounts_server.js.\n\n/**\n * @summary Get the current user id, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.userId = function () {\n  return Accounts.userId();\n};\n\n/**\n * @summary Get the current user record, or `null` if no user is logged in. A reactive data source.\n * @locus Anywhere but publish functions\n * @importFromPackage meteor\n */\nMeteor.user = function () {\n  return Accounts.user();\n};\n\n// how long (in days) until a login token expires\nconst DEFAULT_LOGIN_EXPIRATION_DAYS = 90;\n// Expose for testing.\nAp.DEFAULT_LOGIN_EXPIRATION_DAYS = DEFAULT_LOGIN_EXPIRATION_DAYS;\n\n// how long (in days) until reset password token expires\nvar DEFAULT_PASSWORD_RESET_TOKEN_EXPIRATION_DAYS = 3;\n// how long (in days) until enrol password token expires\nvar DEFAULT_PASSWORD_ENROLL_TOKEN_EXPIRATION_DAYS = 30;\n// Clients don't try to auto-login with a token that is going to expire within\n// .1 * DEFAULT_LOGIN_EXPIRATION_DAYS, capped at MIN_TOKEN_LIFETIME_CAP_SECS.\n// Tries to avoid abrupt disconnects from expiring tokens.\nvar MIN_TOKEN_LIFETIME_CAP_SECS = 3600; // one hour\n// how often (in milliseconds) we check for expired tokens\nEXPIRE_TOKENS_INTERVAL_MS = 600 * 1000; // 10 minutes\n// how long we wait before logging out clients when Meteor.logoutOtherClients is\n// called\nCONNECTION_CLOSE_DELAY_MS = 10 * 1000;\n\n// A large number of expiration days (approximately 100 years worth) that is\n// used when creating unexpiring tokens.\nconst LOGIN_UNEXPIRING_TOKEN_DAYS = 365 * 100;\n// Expose for testing.\nAp.LOGIN_UNEXPIRING_TOKEN_DAYS = LOGIN_UNEXPIRING_TOKEN_DAYS;\n\n// loginServiceConfiguration and ConfigError are maintained for backwards compatibility\nMeteor.startup(function () {\n  var ServiceConfiguration =\n    Package['service-configuration'].ServiceConfiguration;\n  Ap.loginServiceConfiguration = ServiceConfiguration.configurations;\n  Ap.ConfigError = ServiceConfiguration.ConfigError;\n});\n\n// Thrown when the user cancels the login process (eg, closes an oauth\n// popup, declines retina scan, etc)\nvar lceName = 'Accounts.LoginCancelledError';\nAp.LoginCancelledError = Meteor.makeErrorType(\n  lceName,\n  function (description) {\n    this.message = description;\n  }\n);\nAp.LoginCancelledError.prototype.name = lceName;\n\n// This is used to transmit specific subclass errors over the wire. We should\n// come up with a more generic way to do this (eg, with some sort of symbolic\n// error code rather than a number).\nAp.LoginCancelledError.numericError = 0x8acdc2f;\n","import {AccountsClient} from \"./accounts_client.js\";\nvar Ap = AccountsClient.prototype;\n\n// This file deals with storing a login token and user id in the\n// browser's localStorage facility. It polls local storage every few\n// seconds to synchronize login state between multiple tabs in the same\n// browser.\n\n// Login with a Meteor access token. This is the only public function\n// here.\nMeteor.loginWithToken = function (token, callback) {\n  return Accounts.loginWithToken(token, callback);\n};\n\nAp.loginWithToken = function (token, callback) {\n  this.callLoginMethod({\n    methodArguments: [{\n      resume: token\n    }],\n    userCallback: callback\n  });\n};\n\n// Semi-internal API. Call this function to re-enable auto login after\n// if it was disabled at startup.\nAp._enableAutoLogin = function () {\n  this._autoLoginEnabled = true;\n  this._pollStoredLoginToken();\n};\n\n\n///\n/// STORING\n///\n\n// Call this from the top level of the test file for any test that does\n// logging in and out, to protect multiple tabs running the same tests\n// simultaneously from interfering with each others' localStorage.\nAp._isolateLoginTokenForTest = function () {\n  this.LOGIN_TOKEN_KEY = this.LOGIN_TOKEN_KEY + Random.id();\n  this.USER_ID_KEY = this.USER_ID_KEY + Random.id();\n};\n\nAp._storeLoginToken = function (userId, token, tokenExpires) {\n  Meteor._localStorage.setItem(this.USER_ID_KEY, userId);\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_KEY, token);\n  if (! tokenExpires)\n    tokenExpires = this._tokenExpiration(new Date());\n  Meteor._localStorage.setItem(this.LOGIN_TOKEN_EXPIRES_KEY, tokenExpires);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = token;\n};\n\nAp._unstoreLoginToken = function () {\n  Meteor._localStorage.removeItem(this.USER_ID_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_KEY);\n  Meteor._localStorage.removeItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n\n  // to ensure that the localstorage poller doesn't end up trying to\n  // connect a second time\n  this._lastLoginTokenWhenPolled = null;\n};\n\n// This is private, but it is exported for now because it is used by a\n// test in accounts-password.\n//\nAp._storedLoginToken = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_KEY);\n};\n\nAp._storedLoginTokenExpires = function () {\n  return Meteor._localStorage.getItem(this.LOGIN_TOKEN_EXPIRES_KEY);\n};\n\nAp._storedUserId = function () {\n  return Meteor._localStorage.getItem(this.USER_ID_KEY);\n};\n\nAp._unstoreLoginTokenIfExpiresSoon = function () {\n  var tokenExpires = this._storedLoginTokenExpires();\n  if (tokenExpires && this._tokenExpiresSoon(new Date(tokenExpires))) {\n    this._unstoreLoginToken();\n  }\n};\n\n///\n/// AUTO-LOGIN\n///\n\nAp._initLocalStorage = function () {\n  var self = this;\n\n  // Key names to use in localStorage\n  self.LOGIN_TOKEN_KEY = \"Meteor.loginToken\";\n  self.LOGIN_TOKEN_EXPIRES_KEY = \"Meteor.loginTokenExpires\";\n  self.USER_ID_KEY = \"Meteor.userId\";\n\n  var rootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n  if (rootUrlPathPrefix || this.connection !== Meteor.connection) {\n    // We want to keep using the same keys for existing apps that do not\n    // set a custom ROOT_URL_PATH_PREFIX, so that most users will not have\n    // to log in again after an app updates to a version of Meteor that\n    // contains this code, but it's generally preferable to namespace the\n    // keys so that connections from distinct apps to distinct DDP URLs\n    // will be distinct in Meteor._localStorage.\n    var namespace = \":\" + this.connection._stream.rawUrl;\n    if (rootUrlPathPrefix) {\n      namespace += \":\" + rootUrlPathPrefix;\n    }\n    self.LOGIN_TOKEN_KEY += namespace;\n    self.LOGIN_TOKEN_EXPIRES_KEY += namespace;\n    self.USER_ID_KEY += namespace;\n  }\n\n  if (self._autoLoginEnabled) {\n    // Immediately try to log in via local storage, so that any DDP\n    // messages are sent after we have established our user account\n    self._unstoreLoginTokenIfExpiresSoon();\n    var token = self._storedLoginToken();\n    if (token) {\n      // On startup, optimistically present us as logged in while the\n      // request is in flight. This reduces page flicker on startup.\n      var userId = self._storedUserId();\n      userId && self.connection.setUserId(userId);\n      self.loginWithToken(token, function (err) {\n        if (err) {\n          Meteor._debug(\"Error logging in with token: \" + err);\n          self.makeClientLoggedOut();\n        }\n\n        self._pageLoadLogin({\n          type: \"resume\",\n          allowed: !err,\n          error: err,\n          methodName: \"login\",\n          // XXX This is duplicate code with loginWithToken, but\n          // loginWithToken can also be called at other times besides\n          // page load.\n          methodArguments: [{resume: token}]\n        });\n      });\n    }\n  }\n\n  // Poll local storage every 3 seconds to login if someone logged in in\n  // another tab\n  self._lastLoginTokenWhenPolled = token;\n\n  if (self._pollIntervalTimer) {\n    // Unlikely that _initLocalStorage will be called more than once for\n    // the same AccountsClient instance, but just in case...\n    clearInterval(self._pollIntervalTimer);\n  }\n\n  self._pollIntervalTimer = setInterval(function () {\n    self._pollStoredLoginToken();\n  }, 3000);\n};\n\nAp._pollStoredLoginToken = function () {\n  var self = this;\n\n  if (! self._autoLoginEnabled) {\n    return;\n  }\n\n  var currentLoginToken = self._storedLoginToken();\n\n  // != instead of !== just to make sure undefined and null are treated the same\n  if (self._lastLoginTokenWhenPolled != currentLoginToken) {\n    if (currentLoginToken) {\n      self.loginWithToken(currentLoginToken, function (err) {\n        if (err) {\n          self.makeClientLoggedOut();\n        }\n      });\n    } else {\n      self.logout();\n    }\n  }\n\n  self._lastLoginTokenWhenPolled = currentLoginToken;\n};\n","import {AccountsClient} from \"./accounts_client.js\";\n\nvar Ap = AccountsClient.prototype;\n\n// All of the special hash URLs we support for accounts interactions\nvar accountsPaths = [\"reset-password\", \"verify-email\", \"enroll-account\"];\n\nvar savedHash = window.location.hash;\n\nAp._initUrlMatching = function () {\n  // By default, allow the autologin process to happen.\n  this._autoLoginEnabled = true;\n\n  // We only support one callback per URL.\n  this._accountsCallbacks = {};\n\n  // Try to match the saved value of window.location.hash.\n  this._attemptToMatchHash();\n};\n\n// Separate out this functionality for testing\n\nAp._attemptToMatchHash = function () {\n  attemptToMatchHash(this, savedHash, defaultSuccessHandler);\n};\n\n// Note that both arguments are optional and are currently only passed by\n// accounts_url_tests.js.\nfunction attemptToMatchHash(accounts, hash, success) {\n  _.each(accountsPaths, function (urlPart) {\n    var token;\n\n    var tokenRegex = new RegExp(\"^\\\\#\\\\/\" + urlPart + \"\\\\/(.*)$\");\n    var match = hash.match(tokenRegex);\n\n    if (match) {\n      token = match[1];\n\n      // XXX COMPAT WITH 0.9.3\n      if (urlPart === \"reset-password\") {\n        accounts._resetPasswordToken = token;\n      } else if (urlPart === \"verify-email\") {\n        accounts._verifyEmailToken = token;\n      } else if (urlPart === \"enroll-account\") {\n        accounts._enrollAccountToken = token;\n      }\n    } else {\n      return;\n    }\n\n    // If no handlers match the hash, then maybe it's meant to be consumed\n    // by some entirely different code, so we only clear it the first time\n    // a handler successfully matches. Note that later handlers reuse the\n    // savedHash, so clearing window.location.hash here will not interfere\n    // with their needs.\n    window.location.hash = \"\";\n\n    // Do some stuff with the token we matched\n    success.call(accounts, token, urlPart);\n  });\n}\n\nfunction defaultSuccessHandler(token, urlPart) {\n  var self = this;\n\n  // put login in a suspended state to wait for the interaction to finish\n  self._autoLoginEnabled = false;\n\n  // wait for other packages to register callbacks\n  Meteor.startup(function () {\n    // if a callback has been registered for this kind of token, call it\n    if (self._accountsCallbacks[urlPart]) {\n      self._accountsCallbacks[urlPart](token, function () {\n        self._enableAutoLogin();\n      });\n    }\n  });\n}\n\n// Export for testing\nexport var AccountsTest = {\n  attemptToMatchHash: function (hash, success) {\n    return attemptToMatchHash(Accounts, hash, success);\n  }\n};\n\n// XXX these should be moved to accounts-password eventually. Right now\n// this is prevented by the need to set autoLoginEnabled=false, but in\n// some bright future we won't need to do that anymore.\n\n/**\n * @summary Register a function to call when a reset password link is clicked\n * in an email sent by\n * [`Accounts.sendResetPasswordEmail`](#accounts_sendresetpasswordemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onResetPasswordLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword).\n * 2. `done`: A function to call when the password reset UI flow is complete. The normal\n * login process is suspended until this function is called, so that the\n * password for user A can be reset even if user B was logged in.\n * @locus Client\n */\nAp.onResetPasswordLink = function (callback) {\n  if (this._accountsCallbacks[\"reset-password\"]) {\n    Meteor._debug(\"Accounts.onResetPasswordLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"reset-password\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an email verification link is\n * clicked in an email sent by\n * [`Accounts.sendVerificationEmail`](#accounts_sendverificationemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEmailVerificationLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: An email verification token that can be passed to\n * [`Accounts.verifyEmail`](#accounts_verifyemail).\n * 2. `done`: A function to call when the email verification UI flow is complete.\n * The normal login process is suspended until this function is called, so\n * that the user can be notified that they are verifying their email before\n * being logged in.\n * @locus Client\n */\nAp.onEmailVerificationLink = function (callback) {\n  if (this._accountsCallbacks[\"verify-email\"]) {\n    Meteor._debug(\"Accounts.onEmailVerificationLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"verify-email\"] = callback;\n};\n\n/**\n * @summary Register a function to call when an account enrollment link is\n * clicked in an email sent by\n * [`Accounts.sendEnrollmentEmail`](#accounts_sendenrollmentemail).\n * This function should be called in top-level code, not inside\n * `Meteor.startup()`.\n * @memberof! Accounts\n * @name onEnrollmentLink\n * @param  {Function} callback The function to call. It is given two arguments:\n *\n * 1. `token`: A password reset token that can be passed to\n * [`Accounts.resetPassword`](#accounts_resetpassword) to give the newly\n * enrolled account a password.\n * 2. `done`: A function to call when the enrollment UI flow is complete.\n * The normal login process is suspended until this function is called, so that\n * user A can be enrolled even if user B was logged in.\n * @locus Client\n */\nAp.onEnrollmentLink = function (callback) {\n  if (this._accountsCallbacks[\"enroll-account\"]) {\n    Meteor._debug(\"Accounts.onEnrollmentLink was called more than once. \" +\n      \"Only one callback added will be executed.\");\n  }\n\n  this._accountsCallbacks[\"enroll-account\"] = callback;\n};\n"]}}]