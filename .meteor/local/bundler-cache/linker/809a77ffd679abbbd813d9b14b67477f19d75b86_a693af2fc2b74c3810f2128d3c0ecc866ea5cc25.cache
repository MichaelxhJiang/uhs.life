[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar ReactiveProperty = Package['cfs:reactive-property'].ReactiveProperty;\n\n/* Package-scope variables */\nvar MicroQueue, ReactiveList, PowerQueue;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/cfs_power-queue/packages/cfs_power-queue.js              //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/cfs:power-queue/power-queue.js                                                                           //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// Rig weak dependencies                                                                                             // 1\nif (typeof MicroQueue === 'undefined' && Package['micro-queue']) {                                                   // 2\n  MicroQueue = Package['micro-queue'].MicroQueue;                                                                    // 3\n}                                                                                                                    // 4\nif (typeof ReactiveList === 'undefined' && Package['reactive-list']) {                                               // 5\n  ReactiveList = Package['reactive-list'].ReactiveList;                                                              // 6\n}                                                                                                                    // 7\n                                                                                                                     // 8\n// Rig weak dependencies in +0.9.1                                                                                   // 9\nif (typeof MicroQueue === 'undefined' && Package['cfs:micro-queue']) {                                               // 10\n  MicroQueue = Package['cfs:micro-queue'].MicroQueue;                                                                // 11\n}                                                                                                                    // 12\nif (typeof ReactiveList === 'undefined' && Package['cfs:reactive-list']) {                                           // 13\n  ReactiveList = Package['cfs:reactive-list'].ReactiveList;                                                          // 14\n}                                                                                                                    // 15\n                                                                                                                     // 16\n/**                                                                                                                  // 17\n * Creates an instance of a power queue // Testing inline comment                                                    // 18\n * [Check out demo](http://power-queue-test.meteor.com/)                                                             // 19\n *                                                                                                                   // 20\n * @constructor                                                                                                      // 21\n * @self powerqueue                                                                                                  // 22\n * @param {object} [options] Settings                                                                                // 23\n * @param {boolean} [options.filo=false] Make it a first in last out queue                                           // 24\n * @param {boolean} [options.isPaused=false] Set queue paused                                                        // 25\n * @param {boolean} [options.autostart=true] May adding a task start the queue                                       // 26\n * @param {string} [options.name=\"Queue\"] Name of the queue                                                          // 27\n * @param {number} [options.maxProcessing=1] Limit of simultanous running tasks                                      // 28\n * @param {number} [options.maxFailures = 5] Limit retries of failed tasks, if 0 or below we allow infinite failures // 29\n * @param {number} [options.jumpOnFailure = true] Jump to next task and retry failed task later                      // 30\n * @param {boolean} [options.debug=false] Log verbose messages to the console                                        // 31\n * @param {boolean} [options.reactive=true] Set whether or not this queue should be reactive                         // 32\n * @param {boolean} [options.onAutostart] Callback for the queue autostart event                                     // 33\n * @param {boolean} [options.onPaused] Callback for the queue paused event                                           // 34\n * @param {boolean} [options.onReleased] Callback for the queue release event                                        // 35\n * @param {boolean} [options.onEnded] Callback for the queue end event                                               // 36\n * @param {[SpinalQueue](spinal-queue.spec.md)} [options.spinalQueue] Set spinal queue uses pr. default `MicroQueue` or `ReactiveList` if added to the project\n */                                                                                                                  // 38\nPowerQueue = function(options) {                                                                                     // 39\n  var self = this;                                                                                                   // 40\n  var test = 5;                                                                                                      // 41\n                                                                                                                     // 42\n  self.reactive = (options && options.reactive === false) ? false :  true;                                           // 43\n                                                                                                                     // 44\n  // Allow user to use another micro-queue #3                                                                        // 45\n  // We try setting the ActiveQueue to MicroQueue if installed in the app                                            // 46\n  var ActiveQueue = (typeof MicroQueue !== 'undefined') && MicroQueue || undefined;                                  // 47\n                                                                                                                     // 48\n  // If ReactiveList is added to the project we use this over MicroQueue                                             // 49\n  ActiveQueue = (typeof ReactiveList !== 'undefined') && ReactiveList || ActiveQueue;                                // 50\n                                                                                                                     // 51\n  // We allow user to overrule and set a custom spinal-queue spec complient queue                                    // 52\n  if (options && typeof options.spinalQueue !== 'undefined') {                                                       // 53\n    ActiveQueue = options.spinalQueue;                                                                               // 54\n  }                                                                                                                  // 55\n                                                                                                                     // 56\n  if (typeof ActiveQueue === 'undefined') {                                                                          // 57\n    console.log('Error: You need to add a spinal queue to the project');                                             // 58\n    console.log('Please add \"micro-queue\", \"reactive-list\" to the project');                                         // 59\n    throw new Error('Please add \"micro-queue\", \"reactive-list\" or other spinalQueue compatible packages');           // 60\n  }                                                                                                                  // 61\n                                                                                                                     // 62\n  // Default is fifo lilo                                                                                            // 63\n  self.invocations = new ActiveQueue({                                                                               // 64\n    //                                                                                                               // 65\n    sort: (options && (options.filo || options.lifo)),                                                               // 66\n    reactive: self.reactive                                                                                          // 67\n  });                                                                                                                // 68\n  //var self.invocations = new ReactiveList(queueOrder);                                                             // 69\n                                                                                                                     // 70\n  // List of current tasks being processed                                                                           // 71\n  self._processList = new ActiveQueue({                                                                              // 72\n    reactive: self.reactive                                                                                          // 73\n  }); //ReactiveList();                                                                                              // 74\n                                                                                                                     // 75\n  // Max number of simultanious tasks being processed                                                                // 76\n  self._maxProcessing = new ReactiveProperty(options && options.maxProcessing || 1, self.reactive);                  // 77\n                                                                                                                     // 78\n  // Reactive number of tasks being processed                                                                        // 79\n  self._isProcessing = new ReactiveProperty(0, self.reactive);                                                       // 80\n                                                                                                                     // 81\n  // Boolean indicating if queue is paused or not                                                                    // 82\n  self._paused = new ReactiveProperty((options && options.isPaused || false), self.reactive);                        // 83\n                                                                                                                     // 84\n  // Boolean indicator for queue status active / running (can still be paused)                                       // 85\n  self._running = new ReactiveProperty(false, self.reactive);                                                        // 86\n                                                                                                                     // 87\n  // Counter for errors, errors are triggered if maxFailures is exeeded                                              // 88\n  self._errors = new ReactiveProperty(0, self.reactive);                                                             // 89\n                                                                                                                     // 90\n  // Counter for task failures, contains error count                                                                 // 91\n  self._failures = new ReactiveProperty(0, self.reactive);                                                           // 92\n                                                                                                                     // 93\n  // On failure jump to new task - if false the current task is rerun until error                                    // 94\n  self._jumpOnFailure = (options && options.jumpOnFailure === false) ? false : true;                                 // 95\n                                                                                                                     // 96\n  // Count of all added tasks                                                                                        // 97\n  self._maxLength = new ReactiveProperty(0, self.reactive);                                                          // 98\n                                                                                                                     // 99\n  // Boolean indicate whether or not a \"add\" task is allowed to start the queue                                      // 100\n  self._autostart = new ReactiveProperty( ((options && options.autostart === false) ? false : true), self.reactive); // 101\n                                                                                                                     // 102\n  // Limit times a task is allowed to fail and be rerun later before triggering an error                             // 103\n  self._maxFailures = new ReactiveProperty( (options && options.maxFailures || 5), self.reactive);                   // 104\n                                                                                                                     // 105\n  // Name / title of this queue - Not used - should deprecate                                                        // 106\n  self.title = options && options.name || 'Queue';                                                                   // 107\n                                                                                                                     // 108\n  // debug - will print error / failures passed to next                                                              // 109\n  self.debug = !!(options && options.debug);                                                                         // 110\n                                                                                                                     // 111\n  /** @method PowerQueue.total                                                                                       // 112\n   * @reactive                                                                                                       // 113\n   * @returns {number} The total number of tasks added to this queue                                                 // 114\n   */                                                                                                                // 115\n  self.total = self._maxLength.get;                                                                                  // 116\n                                                                                                                     // 117\n  /** @method PowerQueue.isPaused                                                                                    // 118\n   * @reactive                                                                                                       // 119\n   * @returns {boolean} Status of the paused state of the queue                                                      // 120\n   */                                                                                                                // 121\n  self.isPaused = self._paused.get;                                                                                  // 122\n                                                                                                                     // 123\n  /** @method PowerQueue.processing                                                                                  // 124\n   * @reactive                                                                                                       // 125\n   * @returns {number} Number of tasks currently being processed                                                     // 126\n   */                                                                                                                // 127\n  self.processing = self._isProcessing.get;                                                                          // 128\n                                                                                                                     // 129\n  /** @method PowerQueue.errors                                                                                      // 130\n   * @reactive                                                                                                       // 131\n   * @returns {number} The total number of errors                                                                    // 132\n   * Errors are triggered when [maxFailures](PowerQueue.maxFailures) are exeeded                                     // 133\n   */                                                                                                                // 134\n  self.errors = self._errors.get;                                                                                    // 135\n                                                                                                                     // 136\n  /** @method PowerQueue.failures                                                                                    // 137\n   * @reactive                                                                                                       // 138\n   * @returns {number} The total number of failed tasks                                                              // 139\n   */                                                                                                                // 140\n  self.failures = self._failures.get;                                                                                // 141\n                                                                                                                     // 142\n  /** @method PowerQueue.isRunning                                                                                   // 143\n   * @reactive                                                                                                       // 144\n   * @returns {boolean} True if the queue is running                                                                 // 145\n   * > NOTE: The task can be paused but marked as running                                                            // 146\n   */                                                                                                                // 147\n  self.isRunning = self._running.get;                                                                                // 148\n                                                                                                                     // 149\n  /** @method PowerQueue.maxProcessing Get setter for maxProcessing                                                  // 150\n   * @param {number} [max] If not used this function works as a getter                                               // 151\n   * @reactive                                                                                                       // 152\n   * @returns {number} Maximum number of simultaneous processing tasks                                               // 153\n   *                                                                                                                 // 154\n   * Example:                                                                                                        // 155\n   * ```js                                                                                                           // 156\n   *   foo.maxProcessing();    // Works as a getter and returns the current value                                    // 157\n   *   foo.maxProcessing(20);  // This sets the value to 20                                                          // 158\n   * ```                                                                                                             // 159\n   */                                                                                                                // 160\n  self.maxProcessing = self._maxProcessing.getset;                                                                   // 161\n                                                                                                                     // 162\n  self._maxProcessing.onChange = function() {                                                                        // 163\n    // The user can change the max allowed processing tasks up or down here...                                       // 164\n    // Update the throttle up                                                                                        // 165\n    self.updateThrottleUp();                                                                                         // 166\n    // Update the throttle down                                                                                      // 167\n    self.updateThrottleDown();                                                                                       // 168\n  };                                                                                                                 // 169\n                                                                                                                     // 170\n  /** @method PowerQueue.autostart Get setter for autostart                                                          // 171\n   * @param {boolean} [autorun] If not used this function works as a getter                                          // 172\n   * @reactive                                                                                                       // 173\n   * @returns {boolean} If adding a task may trigger the queue to start                                              // 174\n   *                                                                                                                 // 175\n   * Example:                                                                                                        // 176\n   * ```js                                                                                                           // 177\n   *   foo.autostart();    // Works as a getter and returns the current value                                        // 178\n   *   foo.autostart(true);  // This sets the value to true                                                          // 179\n   * ```                                                                                                             // 180\n   */                                                                                                                // 181\n  self.autostart = self._autostart.getset;                                                                           // 182\n                                                                                                                     // 183\n  /** @method PowerQueue.maxFailures Get setter for maxFailures                                                      // 184\n   * @param {number} [max] If not used this function works as a getter                                               // 185\n   * @reactive                                                                                                       // 186\n   * @returns {number} The maximum for failures pr. task before triggering an error                                  // 187\n   *                                                                                                                 // 188\n   * Example:                                                                                                        // 189\n   * ```js                                                                                                           // 190\n   *   foo.maxFailures();    // Works as a getter and returns the current value                                      // 191\n   *   foo.maxFailures(10);  // This sets the value to 10                                                            // 192\n   * ```                                                                                                             // 193\n   */                                                                                                                // 194\n  self.maxFailures = self._maxFailures.getset;                                                                       // 195\n                                                                                                                     // 196\n  /** @callback PowerQueue.onPaused                                                                                  // 197\n   * Is called when queue is ended                                                                                   // 198\n   */                                                                                                                // 199\n  self.onPaused = options && options.onPaused || function() {                                                        // 200\n    self.debug && console.log(self.title + ' ENDED');                                                                // 201\n  };                                                                                                                 // 202\n                                                                                                                     // 203\n  /** @callback PowerQueue.onEnded                                                                                   // 204\n   * Is called when queue is ended                                                                                   // 205\n   */                                                                                                                // 206\n  self.onEnded = options && options.onEnded || function() {                                                          // 207\n    self.debug && console.log(self.title + ' ENDED');                                                                // 208\n  };                                                                                                                 // 209\n                                                                                                                     // 210\n  /** @callback PowerQueue.onRelease                                                                                 // 211\n   * Is called when queue is released                                                                                // 212\n   */                                                                                                                // 213\n  self.onRelease = options && options.onRelease || function() {                                                      // 214\n    self.debug && console.log(self.title + ' RELEASED');                                                             // 215\n  };                                                                                                                 // 216\n                                                                                                                     // 217\n  /** @callback PowerQueue.onAutostart                                                                               // 218\n   * Is called when queue is auto started                                                                            // 219\n   */                                                                                                                // 220\n  self.onAutostart = options && options.onAutostart || function() {                                                  // 221\n    self.debug && console.log(self.title + ' Autostart');                                                            // 222\n  };                                                                                                                 // 223\n};                                                                                                                   // 224\n                                                                                                                     // 225\n  /** @method PowerQueue.prototype.processList                                                                       // 226\n   * @reactive                                                                                                       // 227\n   * @returns {array} List of tasks currently being processed                                                        // 228\n   */                                                                                                                // 229\n  PowerQueue.prototype.processingList = function() {                                                                 // 230\n    var self = this;                                                                                                 // 231\n    return self._processList.fetch();                                                                                // 232\n  };                                                                                                                 // 233\n                                                                                                                     // 234\n  /** @method PowerQueue.prototype.isHalted                                                                          // 235\n   * @reactive                                                                                                       // 236\n   * @returns {boolean} True if the queue is not running or paused                                                   // 237\n   */                                                                                                                // 238\n  PowerQueue.prototype.isHalted = function() {                                                                       // 239\n    var self = this;                                                                                                 // 240\n    return (!self._running.get() || self._paused.get());                                                             // 241\n  };                                                                                                                 // 242\n                                                                                                                     // 243\n  /** @method PowerQueue.prototype.length                                                                            // 244\n   * @reactive                                                                                                       // 245\n   * @returns {number} Number of tasks left in queue to be processed                                                 // 246\n   */                                                                                                                // 247\n  PowerQueue.prototype.length = function() {                                                                         // 248\n    var self = this;                                                                                                 // 249\n    return self.invocations.length();                                                                                // 250\n  };                                                                                                                 // 251\n                                                                                                                     // 252\n  /** @method PowerQueue.prototype.progress                                                                          // 253\n   * @reactive                                                                                                       // 254\n   * @returns {number} 0 .. 100 % Indicates the status of the queue                                                  // 255\n   */                                                                                                                // 256\n  PowerQueue.prototype.progress = function() {                                                                       // 257\n    var self = this;                                                                                                 // 258\n    var progress = self._maxLength.get() - self.invocations.length() - self._isProcessing.get();                     // 259\n    if (self._maxLength.value > 0) {                                                                                 // 260\n      return Math.round(progress / self._maxLength.value * 100);                                                     // 261\n    }                                                                                                                // 262\n    return 0;                                                                                                        // 263\n  };                                                                                                                 // 264\n                                                                                                                     // 265\n  /** @method PowerQueue.prototype.usage                                                                             // 266\n   * @reactive                                                                                                       // 267\n   * @returns {number} 0 .. 100 % Indicates resource usage of the queue                                              // 268\n   */                                                                                                                // 269\n  PowerQueue.prototype.usage = function() {                                                                          // 270\n    var self = this;                                                                                                 // 271\n    return Math.round(self._isProcessing.get() / self._maxProcessing.get() * 100);                                   // 272\n  };                                                                                                                 // 273\n                                                                                                                     // 274\n  /** @method PowerQueue.prototype.reset Reset the queue                                                             // 275\n   * Calling this will:                                                                                              // 276\n   * * stop the queue                                                                                                // 277\n   * * paused to false                                                                                               // 278\n   * * Discart all queue data                                                                                        // 279\n   *                                                                                                                 // 280\n   * > NOTE: At the moment if the queue has processing tasks they can change                                         // 281\n   * > the `errors` and `failures` counters. This could change in the future or                                      // 282\n   * > be prevented by creating a whole new instance of the `PowerQueue`                                             // 283\n   */                                                                                                                // 284\n  PowerQueue.prototype.reset = function() {                                                                          // 285\n    var self = this;                                                                                                 // 286\n    self.debug && console.log(self.title + ' RESET');                                                                // 287\n    self._running.set(false);                                                                                        // 288\n    self._paused.set(false);                                                                                         // 289\n    self.invocations.reset();                                                                                        // 290\n    self._processList.reset();                                                                                       // 291\n                                                                                                                     // 292\n    // // Loop through the processing tasks and reset these                                                          // 293\n    // self._processList.forEach(function(data) {                                                                    // 294\n    //   if (data.queue instanceof PowerQueue) {                                                                     // 295\n    //     data.queue.reset();                                                                                       // 296\n    //   }                                                                                                           // 297\n    // }, true);                                                                                                     // 298\n    self._maxLength.set(0);                                                                                          // 299\n    self._failures.set(0);                                                                                           // 300\n    self._errors.set(0);                                                                                             // 301\n  };                                                                                                                 // 302\n                                                                                                                     // 303\n  /** @method PowerQueue._autoStartTasks                                                                             // 304\n   * @private                                                                                                        // 305\n   *                                                                                                                 // 306\n   * This method defines the autostart algorithm that allows add task to trigger                                     // 307\n   * a start of the queue if queue is not paused.                                                                    // 308\n   */                                                                                                                // 309\n  PowerQueue.prototype._autoStartTasks = function() {                                                                // 310\n    var self = this;                                                                                                 // 311\n                                                                                                                     // 312\n    // We dont start anything by ourselfs if queue is paused                                                         // 313\n    if (!self._paused.value) {                                                                                       // 314\n                                                                                                                     // 315\n      // Queue is not running and we are set to autostart so we start the queue                                      // 316\n      if (!self._running.value && self._autostart.value) {                                                           // 317\n        // Trigger callback / event                                                                                  // 318\n        self.onAutostart();                                                                                          // 319\n        // Set queue as running                                                                                      // 320\n        self._running.set(true);                                                                                     // 321\n      }                                                                                                              // 322\n                                                                                                                     // 323\n      // Make sure that we use all available resources                                                               // 324\n      if (self._running.value) {                                                                                     // 325\n        // Call next to start up the queue                                                                           // 326\n        self.next(null);                                                                                             // 327\n      }                                                                                                              // 328\n                                                                                                                     // 329\n    }                                                                                                                // 330\n  };                                                                                                                 // 331\n                                                                                                                     // 332\n  /** @method PowerQueue.prototype.add                                                                               // 333\n   * @param {any} data The task to be handled                                                                        // 334\n   * @param {number} [failures] Used internally to Pass on number of failures.                                       // 335\n   */                                                                                                                // 336\n  PowerQueue.prototype.add = function(data, failures, id) {                                                          // 337\n    var self = this;                                                                                                 // 338\n                                                                                                                     // 339\n    // Assign new id to task                                                                                         // 340\n    var assignNewId = self._jumpOnFailure || typeof id === 'undefined';                                              // 341\n                                                                                                                     // 342\n    // Set the task id                                                                                               // 343\n    var taskId = (assignNewId) ? self._maxLength.value + 1 : id;                                                     // 344\n                                                                                                                     // 345\n    // self.invocations.add({ _id: currentId, data: data, failures: failures || 0 }, reversed);                      // 346\n    self.invocations.insert(taskId, { _id: taskId, data: data, failures: failures || 0 });                           // 347\n                                                                                                                     // 348\n    // If we assigned new id then increase length                                                                    // 349\n    if (assignNewId) self._maxLength.inc();                                                                          // 350\n                                                                                                                     // 351\n    self._autoStartTasks();                                                                                          // 352\n  };                                                                                                                 // 353\n                                                                                                                     // 354\n  /** @method PowerQueue.prototype.updateThrottleUp                                                                  // 355\n   * @private                                                                                                        // 356\n   *                                                                                                                 // 357\n   * Calling this method will update the throttle on the queue adding tasks.                                         // 358\n   *                                                                                                                 // 359\n   * > Note: Currently we only support the PowerQueue - but we could support                                         // 360\n   * > a more general interface for pauseable tasks or other usecases.                                               // 361\n   */                                                                                                                // 362\n  PowerQueue.prototype.updateThrottleUp = function() {                                                               // 363\n    var self = this;                                                                                                 // 364\n                                                                                                                     // 365\n    // How many additional tasks can we handle?                                                                      // 366\n    var availableSlots = self._maxProcessing.value - self._isProcessing.value;                                       // 367\n    // If we can handle more, we have more, we're running, and we're not paused                                      // 368\n    if (!self._paused.value && self._running.value && availableSlots > 0 && self.invocations._length > 0) {          // 369\n      // Increase counter of current number of tasks being processed                                                 // 370\n      self._isProcessing.inc();                                                                                      // 371\n      // Run task                                                                                                    // 372\n      self.runTask(self.invocations.getFirstItem());                                                                 // 373\n      // Repeat recursively; this is better than a for loop to avoid blocking the UI                                 // 374\n      self.updateThrottleUp();                                                                                       // 375\n    }                                                                                                                // 376\n                                                                                                                     // 377\n  };                                                                                                                 // 378\n                                                                                                                     // 379\n  /** @method PowerQueue.prototype.updateThrottleDown                                                                // 380\n   * @private                                                                                                        // 381\n   *                                                                                                                 // 382\n   * Calling this method will update the throttle on the queue pause tasks.                                          // 383\n   *                                                                                                                 // 384\n   * > Note: Currently we only support the PowerQueue - but we could support                                         // 385\n   * > a more general interface for pauseable tasks or other usecases.                                               // 386\n   */                                                                                                                // 387\n  PowerQueue.prototype.updateThrottleDown = function() {                                                             // 388\n    var self = this;                                                                                                 // 389\n    // Calculate the differece between acutuall processing tasks and target                                          // 390\n    var diff = self._isProcessing.value - self._maxProcessing.value;                                                 // 391\n                                                                                                                     // 392\n    // If the diff is more than 0 then we have many tasks processing.                                                // 393\n    if (diff > 0) {                                                                                                  // 394\n      // We pause the latest added tasks                                                                             // 395\n      self._processList.forEachReverse(function(data) {                                                              // 396\n        if (diff > 0 && data.queue instanceof PowerQueue) {                                                          // 397\n          diff--;                                                                                                    // 398\n          // We dont mind calling pause on multiple times on each task                                               // 399\n          // theres a simple check going on preventing any duplicate actions                                         // 400\n          data.queue.pause();                                                                                        // 401\n        }                                                                                                            // 402\n      }, true);                                                                                                      // 403\n    }                                                                                                                // 404\n  };                                                                                                                 // 405\n                                                                                                                     // 406\n  /** @method PowerQueue.prototype.next                                                                              // 407\n   * @param {string} [err] Error message if task failed                                                              // 408\n   * > * Can pass in `null` to start the queue                                                                       // 409\n   * > * Passing in a string to `next` will trigger a failure                                                        // 410\n   * > * Passing nothing will simply let the next task run                                                           // 411\n   * `next` is handed into the [taskHandler](PowerQueue.taskHandler) as a                                            // 412\n   * callback to mark an error or end of current task                                                                // 413\n   */                                                                                                                // 414\n  PowerQueue.prototype.next = function(err) {                                                                        // 415\n    var self = this;                                                                                                 // 416\n    // Primary concern is to throttle up because we are either:                                                      // 417\n    // 1. Starting the queue                                                                                         // 418\n    // 2. Starting next task                                                                                         // 419\n    //                                                                                                               // 420\n    // This function does not shut down running tasks                                                                // 421\n    self.updateThrottleUp();                                                                                         // 422\n                                                                                                                     // 423\n    // We are running, no tasks are being processed even we just updated the                                         // 424\n    // throttle up and we got no errors.                                                                             // 425\n    // 1. We are paused and releasing tasks                                                                          // 426\n    // 2. We are done                                                                                                // 427\n    if (self._running.value && self._isProcessing.value === 0 && err !== null) {                                     // 428\n                                                                                                                     // 429\n      // We have no tasks processing so this queue is now releasing resources                                        // 430\n      // this could be that the queue is paused or stopped, in that case the                                         // 431\n      // self.invocations._length would be > 0                                                                       // 432\n      // If on the other hand the self.invocations._length is 0 then we have no more                                 // 433\n      // tasks in the queue so the queue has ended                                                                   // 434\n      self.onRelease(self.invocations._length);                                                                      // 435\n                                                                                                                     // 436\n      if (!self.invocations._length) { // !self._paused.value &&                                                     // 437\n        // Check if queue is done working                                                                            // 438\n        // Stop the queue                                                                                            // 439\n        self._running.set(false);                                                                                    // 440\n        // self.invocations.reset(); // This should be implicit                                                      // 441\n        self.onEnded();                                                                                              // 442\n      }                                                                                                              // 443\n                                                                                                                     // 444\n    }                                                                                                                // 445\n  };                                                                                                                 // 446\n                                                                                                                     // 447\n  /** @callback done                                                                                                 // 448\n   * @param {Meteor.Error | Error | String | null} [feedback] This allows the task to communicate with the queue     // 449\n   *                                                                                                                 // 450\n   * Explaination of `feedback`                                                                                      // 451\n   * * `Meteor.Error` This means that the task failed in a controlled manner and is allowed to rerun                 // 452\n   * * `Error` This will throw the passed error - as its an unitended error                                          // 453\n   * * `null` The task is not done yet, rerun later                                                                  // 454\n   * * `String` The task can perform certain commands on the queue                                                   // 455\n   *    * \"pause\" - pause the queue                                                                                  // 456\n   *    * \"stop\" - stop the queue                                                                                    // 457\n   *    * \"reset\" - reset the queue                                                                                  // 458\n   *    * \"cancel\" - cancel the queue                                                                                // 459\n   *                                                                                                                 // 460\n   */                                                                                                                // 461\n                                                                                                                     // 462\n                                                                                                                     // 463\n  /** @method PowerQueue.prototype.runTaskDone                                                                       // 464\n   * @private                                                                                                        // 465\n   * @param {Meteor.Error | Error | String | null} [feedback] This allows the task to communicate with the queue     // 466\n   * @param {object} invocation                                                                                      // 467\n   *                                                                                                                 // 468\n   * > Note: `feedback` is explained in [Done callback](#done)                                                       // 469\n   *                                                                                                                 // 470\n   */                                                                                                                // 471\n  // Rig the callback function                                                                                       // 472\n  PowerQueue.prototype.runTaskDone = function(feedback, invocation) {                                                // 473\n    var self = this;                                                                                                 // 474\n                                                                                                                     // 475\n    // If the task handler throws an error then add it to the queue again                                            // 476\n    // we allow this for a max of self._maxFailures                                                                  // 477\n    // If the error is null then we add the task silently back into the                                              // 478\n    // microQueue in reverse... This could be due to pause or throttling                                             // 479\n    if (feedback instanceof Meteor.Error) {                                                                          // 480\n      // We only count failures if maxFailures are above 0                                                           // 481\n      if (self._maxFailures.value > 0) invocation.failures++;                                                        // 482\n      self._failures.inc();                                                                                          // 483\n                                                                                                                     // 484\n      // If the user has set the debug flag we print out failures/errors                                             // 485\n      console.error('Error: \"' + self.title + '\" ' + feedback.message + ', ' + feedback.stack);                      // 486\n                                                                                                                     // 487\n      if (invocation.failures < self._maxFailures.value) {                                                           // 488\n        // Add the task again with the increased failures                                                            // 489\n        self.add(invocation.data, invocation.failures, invocation._id);                                              // 490\n      } else {                                                                                                       // 491\n        self._errors.inc();                                                                                          // 492\n        self.errorHandler(invocation.data, self.add, invocation.failures);                                           // 493\n      }                                                                                                              // 494\n                                                                                                                     // 495\n      // If a error is thrown we assume its not intended                                                             // 496\n    } else if (feedback instanceof Error) throw feedback;                                                            // 497\n                                                                                                                     // 498\n    if (feedback)                                                                                                    // 499\n                                                                                                                     // 500\n    // We use null to throttle pauseable tasks                                                                       // 501\n    if (feedback === null) {                                                                                         // 502\n      // We add this task into the queue, no questions asked                                                         // 503\n      self.invocations.insert(invocation._id, { data: invocation.data, failures: invocation.failures, _id: invocation._id });\n    }                                                                                                                // 505\n                                                                                                                     // 506\n    // If the user returns a string we got a command                                                                 // 507\n    if (feedback === ''+feedback) {                                                                                  // 508\n      var command = {                                                                                                // 509\n        'pause': function() { self.pause(); },                                                                       // 510\n        'stop': function() { self.stop(); },                                                                         // 511\n        'reset': function() { self.reset(); },                                                                       // 512\n        'cancel': function() { self.cancel(); },                                                                     // 513\n      };                                                                                                             // 514\n      if (typeof command[feedback] === 'function') {                                                                 // 515\n        // Run the command on this queue                                                                             // 516\n        command[feedback]();                                                                                         // 517\n      } else {                                                                                                       // 518\n        // We dont recognize this command, throw an error                                                            // 519\n        throw new Error('Unknown queue command \"' + feedback + '\"');                                                 // 520\n      }                                                                                                              // 521\n    }                                                                                                                // 522\n    // Decrease the number of tasks being processed                                                                  // 523\n    // make sure we dont go below 0                                                                                  // 524\n    if (self._isProcessing.value > 0) self._isProcessing.dec();                                                      // 525\n    // Task has ended we remove the task from the process list                                                       // 526\n    self._processList.remove(invocation._id);                                                                        // 527\n                                                                                                                     // 528\n    invocation.data = null;                                                                                          // 529\n    invocation.failures = null;                                                                                      // 530\n    invocation._id = null;                                                                                           // 531\n    invocation = null;                                                                                               // 532\n    delete invocation;                                                                                               // 533\n    // Next task                                                                                                     // 534\n    Meteor.setTimeout(function() {                                                                                   // 535\n      self.next();                                                                                                   // 536\n    }, 0);                                                                                                           // 537\n                                                                                                                     // 538\n  };                                                                                                                 // 539\n                                                                                                                     // 540\n                                                                                                                     // 541\n  /** @method PowerQueue.prototype.runTask                                                                           // 542\n   * @private // This is not part of the open api                                                                    // 543\n   * @param {object} invocation The object stored in the micro-queue                                                 // 544\n   */                                                                                                                // 545\n  PowerQueue.prototype.runTask = function(invocation) {                                                              // 546\n    var self = this;                                                                                                 // 547\n                                                                                                                     // 548\n    // We start the fitting task handler                                                                             // 549\n    // Currently we only support the PowerQueue but we could have a more general                                     // 550\n    // interface for tasks that allow throttling                                                                     // 551\n    try {                                                                                                            // 552\n      if (invocation.data instanceof PowerQueue) {                                                                   // 553\n                                                                                                                     // 554\n        // Insert PowerQueue into process list                                                                       // 555\n        self._processList.insert(invocation._id, { id: invocation._id, queue: invocation.data });                    // 556\n        // Handle task                                                                                               // 557\n        self.queueTaskHandler(invocation.data, function subQueueCallbackDone(feedback) {                             // 558\n          self.runTaskDone(feedback, invocation);                                                                    // 559\n        }, invocation.failures);                                                                                     // 560\n                                                                                                                     // 561\n      } else {                                                                                                       // 562\n                                                                                                                     // 563\n        // Insert task into process list                                                                             // 564\n        self._processList.insert(invocation._id, invocation.data);                                                   // 565\n        // Handle task                                                                                               // 566\n        self.taskHandler(invocation.data, function taskCallbackDone(feedback) {                                      // 567\n          self.runTaskDone(feedback, invocation);                                                                    // 568\n        }, invocation.failures);                                                                                     // 569\n                                                                                                                     // 570\n      }                                                                                                              // 571\n    } catch(err) {                                                                                                   // 572\n      throw new Error('Error while running taskHandler for queue, Error: ' + err.message);                           // 573\n    }                                                                                                                // 574\n  };                                                                                                                 // 575\n                                                                                                                     // 576\n  /** @method PowerQueue.prototype.queueTaskHandler                                                                  // 577\n   * This method handles tasks that are sub queues                                                                   // 578\n   */                                                                                                                // 579\n  PowerQueue.prototype.queueTaskHandler = function(subQueue, next, failures) {                                       // 580\n    var self = this;                                                                                                 // 581\n    // Monitor sub queue task releases                                                                               // 582\n    subQueue.onRelease = function(remaining) {                                                                       // 583\n      // Ok, we were paused - this could be throttling so we respect this                                            // 584\n      // So when the queue is halted we add it back into the main queue                                              // 585\n      if (remaining > 0) {                                                                                           // 586\n        // We get out of the queue but dont repport error and add to run later                                       // 587\n        next(null);                                                                                                  // 588\n      } else {                                                                                                       // 589\n        // Queue has ended                                                                                           // 590\n        // We simply trigger next task when the sub queue is complete                                                // 591\n        next();                                                                                                      // 592\n        // When running subqueues it doesnt make sense to track failures and retry                                   // 593\n        // the sub queue - this is sub queue domain                                                                  // 594\n      }                                                                                                              // 595\n    };                                                                                                               // 596\n                                                                                                                     // 597\n    // Start the queue                                                                                               // 598\n    subQueue.run();                                                                                                  // 599\n  };                                                                                                                 // 600\n                                                                                                                     // 601\n  /** @callback PowerQueue.prototype.taskHandler                                                                     // 602\n   * @param {any} data This can be data or functions                                                                 // 603\n   * @param {function} next Function `next` call this to end task                                                    // 604\n   * @param {number} failures Number of failures on this task                                                        // 605\n   *                                                                                                                 // 606\n   * Default task handler expects functions as data:                                                                 // 607\n   * ```js                                                                                                           // 608\n   *   self.taskHandler = function(data, next, failures) {                                                           // 609\n   *     // This default task handler expects invocation to be a function to run                                     // 610\n   *     if (typeof data !== 'function') {                                                                           // 611\n   *       throw new Error('Default task handler expects a function');                                               // 612\n   *     }                                                                                                           // 613\n   *     try {                                                                                                       // 614\n   *       // Have the function call next                                                                            // 615\n   *       data(next, failures);                                                                                     // 616\n   *     } catch(err) {                                                                                              // 617\n   *       // Throw to fail this task                                                                                // 618\n   *       next(err);                                                                                                // 619\n   *     }                                                                                                           // 620\n   *   };                                                                                                            // 621\n   * ```                                                                                                             // 622\n   */                                                                                                                // 623\n                                                                                                                     // 624\n  // Can be overwrittin by the user                                                                                  // 625\n  PowerQueue.prototype.taskHandler = function(data, next, failures) {                                                // 626\n    var self = this;                                                                                                 // 627\n    // This default task handler expects invocation to be a function to run                                          // 628\n    if (typeof data !== 'function') {                                                                                // 629\n      throw new Error('Default task handler expects a function');                                                    // 630\n    }                                                                                                                // 631\n    try {                                                                                                            // 632\n      // Have the function call next                                                                                 // 633\n      data(next, failures);                                                                                          // 634\n    } catch(err) {                                                                                                   // 635\n      // Throw to fail this task                                                                                     // 636\n      next(err);                                                                                                     // 637\n    }                                                                                                                // 638\n  };                                                                                                                 // 639\n                                                                                                                     // 640\n  /** @callback PowerQueue.prototype.errorHandler                                                                    // 641\n   * @param {any} data This can be data or functions                                                                 // 642\n   * @param {function} addTask Use this function to insert the data into the queue again                             // 643\n   * @param {number} failures Number of failures on this task                                                        // 644\n   *                                                                                                                 // 645\n   * The default callback:                                                                                           // 646\n   * ```js                                                                                                           // 647\n   *   var foo = new PowerQueue();                                                                                   // 648\n   *                                                                                                                 // 649\n   *   // Overwrite the default action                                                                               // 650\n   *   foo.errorHandler = function(data, addTask, failures) {                                                        // 651\n   *     // This could be overwritten the data contains the task data and addTask                                    // 652\n   *     // is a helper for adding the task to the queue                                                             // 653\n   *     // try again: addTask(data);                                                                                // 654\n   *     // console.log('Terminate at ' + failures + ' failures');                                                   // 655\n   *   };                                                                                                            // 656\n   * ```                                                                                                             // 657\n   */                                                                                                                // 658\n  PowerQueue.prototype.errorHandler = function(data, addTask, failures) {                                            // 659\n    var self = this;                                                                                                 // 660\n    // This could be overwritten the data contains the task data and addTask                                         // 661\n    // is a helper for adding the task to the queue                                                                  // 662\n    // try again: addTask(data);                                                                                     // 663\n    self.debug && console.log('Terminate at ' + failures + ' failures');                                             // 664\n  };                                                                                                                 // 665\n                                                                                                                     // 666\n  /** @method PowerQueue.prototype.pause Pause the queue                                                             // 667\n   * @todo We should have it pause all processing tasks                                                              // 668\n   */                                                                                                                // 669\n  PowerQueue.prototype.pause = function() {                                                                          // 670\n    var self = this;                                                                                                 // 671\n    if (!self._paused.value) {                                                                                       // 672\n                                                                                                                     // 673\n      self._paused.set(true);                                                                                        // 674\n      // Loop through the processing tasks and pause these                                                           // 675\n      self._processList.forEach(function(data) {                                                                     // 676\n        if (data.queue instanceof PowerQueue) {                                                                      // 677\n          // Pause the sub queue                                                                                     // 678\n          data.queue.pause();                                                                                        // 679\n        }                                                                                                            // 680\n      }, true);                                                                                                      // 681\n                                                                                                                     // 682\n      // Trigger callback                                                                                            // 683\n      self.onPaused();                                                                                               // 684\n    }                                                                                                                // 685\n  };                                                                                                                 // 686\n                                                                                                                     // 687\n  /** @method PowerQueue.prototype.resume Start a paused queue                                                       // 688\n   * @todo We should have it resume all processing tasks                                                             // 689\n   *                                                                                                                 // 690\n   * > This will not start a stopped queue                                                                           // 691\n   */                                                                                                                // 692\n  PowerQueue.prototype.resume = function() {                                                                         // 693\n    var self = this;                                                                                                 // 694\n    self.run();                                                                                                      // 695\n  };                                                                                                                 // 696\n                                                                                                                     // 697\n  /** @method PowerQueue.prototype.run Starts the queue                                                              // 698\n   * > Using this command will resume a paused queue and will                                                        // 699\n   * > start a stopped queue.                                                                                        // 700\n   */                                                                                                                // 701\n  PowerQueue.prototype.run = function() {                                                                            // 702\n    var self = this;                                                                                                 // 703\n    //not paused and already running or queue empty or paused subqueues                                              // 704\n    if (!self._paused.value && self._running.value || !self.invocations._length) {                                   // 705\n      return;                                                                                                        // 706\n    }                                                                                                                // 707\n                                                                                                                     // 708\n    self._paused.set(false);                                                                                         // 709\n    self._running.set(true);                                                                                         // 710\n    self.next(null);                                                                                                 // 711\n  };                                                                                                                 // 712\n                                                                                                                     // 713\n  /** @method PowerQueue.prototype.stop Stops the queue                                                              // 714\n   */                                                                                                                // 715\n  PowerQueue.prototype.stop = function() {                                                                           // 716\n    var self = this;                                                                                                 // 717\n    self._running.set(false);                                                                                        // 718\n  };                                                                                                                 // 719\n                                                                                                                     // 720\n  /** @method PowerQueue.prototype.cancel Cancel the queue                                                           // 721\n   */                                                                                                                // 722\n  PowerQueue.prototype.cancel = function() {                                                                         // 723\n    var self = this;                                                                                                 // 724\n    self.reset();                                                                                                    // 725\n  };                                                                                                                 // 726\n                                                                                                                     // 727\n                                                                                                                     // 728\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['cfs:power-queue'] = {}, {\n  PowerQueue: PowerQueue\n});\n\n})();\n","servePath":"/packages/cfs_power-queue.js"}]