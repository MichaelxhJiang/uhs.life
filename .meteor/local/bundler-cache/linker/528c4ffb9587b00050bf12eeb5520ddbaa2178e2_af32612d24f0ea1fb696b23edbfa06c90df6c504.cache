[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar FS, _Utility;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/cfs_base-package/packages/cfs_base-package.js            //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {                                                       // 1\n                                                                     // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/cfs:base-package/base-common.js                                                                          //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// Exported namespace                                                                                                // 1\nFS = {};                                                                                                             // 2\n                                                                                                                     // 3\n// namespace for adapters; XXX should this be added by cfs-storage-adapter pkg instead?                              // 4\nFS.Store = {                                                                                                         // 5\n  GridFS: function () {                                                                                              // 6\n    throw new Error('To use FS.Store.GridFS, you must add the \"cfs-gridfs\" package.');                               // 7\n  },                                                                                                                 // 8\n  FileSystem: function () {                                                                                          // 9\n    throw new Error('To use FS.Store.FileSystem, you must add the \"cfs-filesystem\" package.');                       // 10\n  },                                                                                                                 // 11\n  S3: function () {                                                                                                  // 12\n    throw new Error('To use FS.Store.S3, you must add the \"cfs-s3\" package.');                                       // 13\n  }                                                                                                                  // 14\n};                                                                                                                   // 15\n                                                                                                                     // 16\n// namespace for access points                                                                                       // 17\nFS.AccessPoint = {};                                                                                                 // 18\n                                                                                                                     // 19\n// namespace for utillities                                                                                          // 20\nFS.Utility = {};                                                                                                     // 21\n                                                                                                                     // 22\n// A general place for any package to store global config settings                                                   // 23\nFS.config = {};                                                                                                      // 24\n                                                                                                                     // 25\n// An internal collection reference                                                                                  // 26\nFS._collections = {};                                                                                                // 27\n                                                                                                                     // 28\n// Test scope                                                                                                        // 29\n_Utility = {};                                                                                                       // 30\n                                                                                                                     // 31\n// #############################################################################                                     // 32\n//                                                                                                                   // 33\n// HELPERS                                                                                                           // 34\n//                                                                                                                   // 35\n// #############################################################################                                     // 36\n                                                                                                                     // 37\n/** @method _Utility.defaultZero                                                                                     // 38\n * @private                                                                                                          // 39\n  * @param {Any} val Returns number or 0 if value is a falsy                                                         // 40\n  */                                                                                                                 // 41\n_Utility.defaultZero = function(val) {                                                                               // 42\n  return +(val || 0);                                                                                                // 43\n};                                                                                                                   // 44\n                                                                                                                     // 45\n/**                                                                                                                  // 46\n * @method FS.Utility.cloneFileRecord                                                                                // 47\n * @public                                                                                                           // 48\n * @param {FS.File|FS.Collection filerecord} rec                                                                     // 49\n * @param {Object} [options]                                                                                         // 50\n * @param {Boolean} [options.full=false] Set `true` to prevent certain properties from being omitted from the clone. // 51\n * @returns {Object} Cloned filerecord                                                                               // 52\n *                                                                                                                   // 53\n * Makes a shallow clone of `rec`, filtering out some properties that might be present if                            // 54\n * it's an FS.File instance, but which we never want to be part of the stored                                        // 55\n * filerecord.                                                                                                       // 56\n *                                                                                                                   // 57\n * This is a blacklist clone rather than a whitelist because we want the user to be able                             // 58\n * to specify whatever additional properties they wish.                                                              // 59\n *                                                                                                                   // 60\n * In general, we expect the following whitelist properties used by the internal and                                 // 61\n * external APIs:                                                                                                    // 62\n *                                                                                                                   // 63\n * _id, name, size, type, chunkCount, chunkSize, chunkSum, copies, createdAt, updatedAt, uploadedAt                  // 64\n *                                                                                                                   // 65\n * Those properties, and any additional properties added by the user, should be present                              // 66\n * in the returned object, which is suitable for inserting into the backing collection or                            // 67\n * extending an FS.File instance.                                                                                    // 68\n *                                                                                                                   // 69\n */                                                                                                                  // 70\nFS.Utility.cloneFileRecord = function(rec, options) {                                                                // 71\n  options = options || {};                                                                                           // 72\n  var result = {};                                                                                                   // 73\n  // We use this method for two purposes. If using it to clone one FS.File into another, then                        // 74\n  // we want a full clone. But if using it to get a filerecord object for inserting into the                         // 75\n  // internal collection, then there are certain properties we want to omit so that they aren't                      // 76\n  // stored in the collection.                                                                                       // 77\n  var omit = options.full ? [] : ['collectionName', 'collection', 'data', 'createdByTransform'];                     // 78\n  for (var prop in rec) {                                                                                            // 79\n    if (rec.hasOwnProperty(prop) && !_.contains(omit, prop)) {                                                       // 80\n      result[prop] = rec[prop];                                                                                      // 81\n    }                                                                                                                // 82\n  }                                                                                                                  // 83\n  return result;                                                                                                     // 84\n};                                                                                                                   // 85\n                                                                                                                     // 86\n/**                                                                                                                  // 87\n * @method FS.Utility.defaultCallback                                                                                // 88\n * @public                                                                                                           // 89\n * @param {Error} [err]                                                                                              // 90\n * @returns {undefined}                                                                                              // 91\n *                                                                                                                   // 92\n * Can be used as a default callback for client methods that need a callback.                                        // 93\n * Simply throws the provided error if there is one.                                                                 // 94\n */                                                                                                                  // 95\nFS.Utility.defaultCallback = function defaultCallback(err) {                                                         // 96\n  if (err) {                                                                                                         // 97\n    // Show gentle error if Meteor error                                                                             // 98\n    if (err instanceof Meteor.Error) {                                                                               // 99\n      console.error(err.message);                                                                                    // 100\n    } else {                                                                                                         // 101\n      // Normal error, just throw error                                                                              // 102\n      throw err;                                                                                                     // 103\n    }                                                                                                                // 104\n                                                                                                                     // 105\n  }                                                                                                                  // 106\n};                                                                                                                   // 107\n                                                                                                                     // 108\n/**                                                                                                                  // 109\n * @method FS.Utility.defaultCallback                                                                                // 110\n * @public                                                                                                           // 111\n * @param {Function} [f] A callback function, if you have one. Can be undefined or null.                             // 112\n * @param {Meteor.Error | Error | String} [err] Error or error message (string)                                      // 113\n * @returns {Any} the callback result if any                                                                         // 114\n *                                                                                                                   // 115\n * Handle Error, creates an Error instance with the given text. If callback is                                       // 116\n * a function, passes the error to that function. Otherwise throws it. Useful                                        // 117\n * for dealing with errors in methods that optionally accept a callback.                                             // 118\n */                                                                                                                  // 119\nFS.Utility.handleError = function(f, err, result) {                                                                  // 120\n  // Set callback                                                                                                    // 121\n  var callback = (typeof f === 'function')? f : FS.Utility.defaultCallback;                                          // 122\n  // Set the err                                                                                                     // 123\n  var error = (err === ''+err)? new Error(err) : err;                                                                // 124\n  // callback                                                                                                        // 125\n  return callback(error, result);                                                                                    // 126\n}                                                                                                                    // 127\n                                                                                                                     // 128\n/**                                                                                                                  // 129\n * @method FS.Utility.noop                                                                                           // 130\n * @public                                                                                                           // 131\n * Use this to hand a no operation / empty function                                                                  // 132\n */                                                                                                                  // 133\nFS.Utility.noop = function() {};                                                                                     // 134\n                                                                                                                     // 135\n/**                                                                                                                  // 136\n * @method validateAction                                                                                            // 137\n * @private                                                                                                          // 138\n * @param {Object} validators - The validators object to use, with `deny` and `allow` properties.                    // 139\n * @param {FS.File} fileObj - Mounted or mountable file object to be passed to validators.                           // 140\n * @param {String} userId - The ID of the user who is attempting the action.                                         // 141\n * @returns {undefined}                                                                                              // 142\n *                                                                                                                   // 143\n * Throws a \"400-Bad Request\" Meteor error if the file is not mounted or                                             // 144\n * a \"400-Access denied\" Meteor error if the action is not allowed.                                                  // 145\n */                                                                                                                  // 146\nFS.Utility.validateAction = function validateAction(validators, fileObj, userId) {                                   // 147\n  var denyValidators = validators.deny;                                                                              // 148\n  var allowValidators = validators.allow;                                                                            // 149\n                                                                                                                     // 150\n  // If insecure package is used and there are no validators defined,                                                // 151\n  // allow the action.                                                                                               // 152\n  if (typeof Package === 'object'                                                                                    // 153\n          && Package.insecure                                                                                        // 154\n          && denyValidators.length + allowValidators.length === 0) {                                                 // 155\n    return;                                                                                                          // 156\n  }                                                                                                                  // 157\n                                                                                                                     // 158\n  // If already mounted, validators should receive a fileObj                                                         // 159\n  // that is fully populated                                                                                         // 160\n  if (fileObj.isMounted()) {                                                                                         // 161\n    fileObj.getFileRecord();                                                                                         // 162\n  }                                                                                                                  // 163\n                                                                                                                     // 164\n  // Any deny returns true means denied.                                                                             // 165\n  if (_.any(denyValidators, function(validator) {                                                                    // 166\n    return validator(userId, fileObj);                                                                               // 167\n  })) {                                                                                                              // 168\n    throw new Meteor.Error(403, \"Access denied\");                                                                    // 169\n  }                                                                                                                  // 170\n  // Any allow returns true means proceed. Throw error if they all fail.                                             // 171\n  if (_.all(allowValidators, function(validator) {                                                                   // 172\n    return !validator(userId, fileObj);                                                                              // 173\n  })) {                                                                                                              // 174\n    throw new Meteor.Error(403, \"Access denied\");                                                                    // 175\n  }                                                                                                                  // 176\n};                                                                                                                   // 177\n                                                                                                                     // 178\n/**                                                                                                                  // 179\n * @method FS.Utility.getFileName                                                                                    // 180\n * @private                                                                                                          // 181\n * @param {String} name - A filename, filepath, or URL                                                               // 182\n * @returns {String} The filename without the URL, filepath, or query string                                         // 183\n */                                                                                                                  // 184\nFS.Utility.getFileName = function utilGetFileName(name) {                                                            // 185\n  // in case it's a URL, strip off potential query string                                                            // 186\n  // should have no effect on filepath                                                                               // 187\n  name = name.split('?')[0];                                                                                         // 188\n  // strip off beginning path or url                                                                                 // 189\n  var lastSlash = name.lastIndexOf('/');                                                                             // 190\n  if (lastSlash !== -1) {                                                                                            // 191\n    name = name.slice(lastSlash + 1);                                                                                // 192\n  }                                                                                                                  // 193\n  return name;                                                                                                       // 194\n};                                                                                                                   // 195\n                                                                                                                     // 196\n/**                                                                                                                  // 197\n * @method FS.Utility.getFileExtension                                                                               // 198\n * @public                                                                                                           // 199\n * @param {String} name - A filename, filepath, or URL that may or may not have an extension.                        // 200\n * @returns {String} The extension or an empty string if no extension found.                                         // 201\n */                                                                                                                  // 202\nFS.Utility.getFileExtension = function utilGetFileExtension(name) {                                                  // 203\n  name = FS.Utility.getFileName(name);                                                                               // 204\n  // Seekout the last '.' if found                                                                                   // 205\n  var found = name.lastIndexOf('.');                                                                                 // 206\n  // Return the extension if found else ''                                                                           // 207\n  // If found is -1, we return '' because there is no extension                                                      // 208\n  // If found is 0, we return '' because it's a hidden file                                                          // 209\n  return (found > 0 ? name.slice(found + 1).toLowerCase() : '');                                                     // 210\n};                                                                                                                   // 211\n                                                                                                                     // 212\n/**                                                                                                                  // 213\n * @method FS.Utility.setFileExtension                                                                               // 214\n * @public                                                                                                           // 215\n * @param {String} name - A filename that may or may not already have an extension.                                  // 216\n * @param {String} ext - An extension without leading period, which you want to be the new extension on `name`.      // 217\n * @returns {String} The filename with changed extension.                                                            // 218\n */                                                                                                                  // 219\nFS.Utility.setFileExtension = function utilSetFileExtension(name, ext) {                                             // 220\n  if (!name || !name.length) {                                                                                       // 221\n    return name;                                                                                                     // 222\n  }                                                                                                                  // 223\n  var currentExt = FS.Utility.getFileExtension(name);                                                                // 224\n  if (currentExt.length) {                                                                                           // 225\n    name = name.slice(0, currentExt.length * -1) + ext;                                                              // 226\n  } else {                                                                                                           // 227\n    name = name + '.' + ext;                                                                                         // 228\n  }                                                                                                                  // 229\n  return name;                                                                                                       // 230\n};                                                                                                                   // 231\n                                                                                                                     // 232\n/*                                                                                                                   // 233\n * Borrowed these from http package                                                                                  // 234\n */                                                                                                                  // 235\nFS.Utility.encodeParams = function encodeParams(params) {                                                            // 236\n  var buf = [];                                                                                                      // 237\n  _.each(params, function(value, key) {                                                                              // 238\n    if (buf.length)                                                                                                  // 239\n      buf.push('&');                                                                                                 // 240\n    buf.push(FS.Utility.encodeString(key), '=', FS.Utility.encodeString(value));                                     // 241\n  });                                                                                                                // 242\n  return buf.join('').replace(/%20/g, '+');                                                                          // 243\n};                                                                                                                   // 244\n                                                                                                                     // 245\nFS.Utility.encodeString = function encodeString(str) {                                                               // 246\n  return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");                                   // 247\n};                                                                                                                   // 248\n                                                                                                                     // 249\n/*                                                                                                                   // 250\n * btoa and atob shims for client and server                                                                         // 251\n */                                                                                                                  // 252\n                                                                                                                     // 253\nFS.Utility._btoa = function _fsUtility_btoa(str) {                                                                   // 254\n  var buffer;                                                                                                        // 255\n                                                                                                                     // 256\n  if (str instanceof Buffer) {                                                                                       // 257\n    buffer = str;                                                                                                    // 258\n  } else {                                                                                                           // 259\n    buffer = new Buffer(str.toString(), 'binary');                                                                   // 260\n  }                                                                                                                  // 261\n                                                                                                                     // 262\n  return buffer.toString('base64');                                                                                  // 263\n};                                                                                                                   // 264\n                                                                                                                     // 265\nFS.Utility.btoa = function fsUtility_btoa(str) {                                                                     // 266\n  if (typeof btoa === 'function') {                                                                                  // 267\n    // Client                                                                                                        // 268\n    return btoa(str);                                                                                                // 269\n  } else if (typeof Buffer !== 'undefined') {                                                                        // 270\n    // Server                                                                                                        // 271\n    return FS.Utility._btoa(str);                                                                                    // 272\n  } else {                                                                                                           // 273\n    throw new Error('FS.Utility.btoa: Cannot base64 encode on your system');                                         // 274\n  }                                                                                                                  // 275\n};                                                                                                                   // 276\n                                                                                                                     // 277\nFS.Utility._atob = function _fsUtility_atob(str) {                                                                   // 278\n  return new Buffer(str, 'base64').toString('binary');                                                               // 279\n};                                                                                                                   // 280\n                                                                                                                     // 281\nFS.Utility.atob = function fsUtility_atob(str) {                                                                     // 282\n  if (typeof atob === 'function') {                                                                                  // 283\n    // Client                                                                                                        // 284\n    return atob(str);                                                                                                // 285\n  } else if (typeof Buffer !== 'undefined') {                                                                        // 286\n    // Server                                                                                                        // 287\n    return FS.Utility._atob(str);                                                                                    // 288\n  } else {                                                                                                           // 289\n    throw new Error('FS.Utility.atob: Cannot base64 encode on your system');                                         // 290\n  }                                                                                                                  // 291\n};                                                                                                                   // 292\n                                                                                                                     // 293\n// Api wrap for 3party libs like underscore                                                                          // 294\nFS.Utility.extend = _.extend;                                                                                        // 295\n                                                                                                                     // 296\nFS.Utility.each = _.each;                                                                                            // 297\n                                                                                                                     // 298\nFS.Utility.isEmpty = _.isEmpty;                                                                                      // 299\n                                                                                                                     // 300\nFS.Utility.indexOf = _.indexOf;                                                                                      // 301\n                                                                                                                     // 302\nFS.Utility.isArray = _.isArray;                                                                                      // 303\n                                                                                                                     // 304\nFS.Utility.map = _.map;                                                                                              // 305\n                                                                                                                     // 306\nFS.Utility.once = _.once;                                                                                            // 307\n                                                                                                                     // 308\nFS.Utility.include = _.include;                                                                                      // 309\n                                                                                                                     // 310\nFS.Utility.size = _.size;                                                                                            // 311\n                                                                                                                     // 312\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 322\n}).call(this);                                                       // 323\n                                                                     // 324\n                                                                     // 325\n                                                                     // 326\n                                                                     // 327\n                                                                     // 328\n                                                                     // 329\n(function () {                                                       // 330\n                                                                     // 331\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/cfs:base-package/base-client.js                                                                          //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n                                                                                                                     // 1\n//XXX not sure this is still working properly?                                                                       // 2\nFS.Utility.connectionLogin = function(connection) {                                                                  // 3\n  // We check if the accounts package is installed, since we depend on                                               // 4\n  // `Meteor.userId()`                                                                                               // 5\n  if (typeof Accounts !== 'undefined') {                                                                             // 6\n    // Monitor logout from main connection                                                                           // 7\n    Meteor.startup(function() {                                                                                      // 8\n      Tracker.autorun(function() {                                                                                   // 9\n        var userId = Meteor.userId();                                                                                // 10\n        if (userId) {                                                                                                // 11\n          connection.onReconnect = function() {                                                                      // 12\n            var token = Accounts._storedLoginToken();                                                                // 13\n            connection.apply('login', [{resume: token}], function(err, result) {                                     // 14\n              if (!err && result) {                                                                                  // 15\n                connection.setUserId(result.id);                                                                     // 16\n              }                                                                                                      // 17\n            });                                                                                                      // 18\n          };                                                                                                         // 19\n        } else {                                                                                                     // 20\n          connection.onReconnect = null;                                                                             // 21\n          connection.setUserId(null);                                                                                // 22\n        }                                                                                                            // 23\n      });                                                                                                            // 24\n    });                                                                                                              // 25\n                                                                                                                     // 26\n  }                                                                                                                  // 27\n};                                                                                                                   // 28\n                                                                                                                     // 29\n/**                                                                                                                  // 30\n * @method FS.Utility.eachFile                                                                                       // 31\n * @public                                                                                                           // 32\n * @param {Event} e - Browser event                                                                                  // 33\n * @param {Function} f - Function to run for each file found in the event.                                           // 34\n * @returns {undefined}                                                                                              // 35\n *                                                                                                                   // 36\n * Utility for iteration over files in event                                                                         // 37\n */                                                                                                                  // 38\nFS.Utility.eachFile = function(e, f) {                                                                               // 39\n  var evt = (e.originalEvent || e);                                                                                  // 40\n                                                                                                                     // 41\n  var files = evt.target.files;                                                                                      // 42\n                                                                                                                     // 43\n  if (!files || files.length === 0) {                                                                                // 44\n    files = evt.dataTransfer ? evt.dataTransfer.files : [];                                                          // 45\n  }                                                                                                                  // 46\n                                                                                                                     // 47\n  for (var i = 0; i < files.length; i++) {                                                                           // 48\n    f(files[i], i);                                                                                                  // 49\n  }                                                                                                                  // 50\n};                                                                                                                   // 51\n                                                                                                                     // 52\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 391\n}).call(this);                                                       // 392\n                                                                     // 393\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['cfs:base-package'] = {}, {\n  FS: FS,\n  _Utility: _Utility\n});\n\n})();\n","servePath":"/packages/cfs_base-package.js"}]