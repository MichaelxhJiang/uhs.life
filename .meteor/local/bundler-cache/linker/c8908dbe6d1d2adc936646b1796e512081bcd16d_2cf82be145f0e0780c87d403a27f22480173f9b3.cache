[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar Log = Package.logging.Log;\nvar _ = Package.underscore._;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\nvar Boilerplate = Package['boilerplate-generator'].Boilerplate;\nvar WebAppHashing = Package['webapp-hashing'].WebAppHashing;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-server'].Symbol;\nvar Map = Package['ecmascript-runtime-server'].Map;\nvar Set = Package['ecmascript-runtime-server'].Set;\n\n/* Package-scope variables */\nvar exports, WebApp, WebAppInternals, main;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"webapp\":{\"webapp_server.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/webapp/webapp_server.js                                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                               //\n                                                                                                                      //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                      //\n                                                                                                                      //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                     //\n                                                                                                                      //\nvar module1 = module;                                                                                                 // 1\nmodule1.export({                                                                                                      // 1\n  WebApp: function () {                                                                                               // 1\n    return WebApp;                                                                                                    // 1\n  },                                                                                                                  // 1\n  WebAppInternals: function () {                                                                                      // 1\n    return WebAppInternals;                                                                                           // 1\n  }                                                                                                                   // 1\n});                                                                                                                   // 1\nvar assert = void 0;                                                                                                  // 1\nmodule1.watch(require(\"assert\"), {                                                                                    // 1\n  \"default\": function (v) {                                                                                           // 1\n    assert = v;                                                                                                       // 1\n  }                                                                                                                   // 1\n}, 0);                                                                                                                // 1\nvar readFile = void 0;                                                                                                // 1\nmodule1.watch(require(\"fs\"), {                                                                                        // 1\n  readFile: function (v) {                                                                                            // 1\n    readFile = v;                                                                                                     // 1\n  }                                                                                                                   // 1\n}, 1);                                                                                                                // 1\nvar createServer = void 0;                                                                                            // 1\nmodule1.watch(require(\"http\"), {                                                                                      // 1\n  createServer: function (v) {                                                                                        // 1\n    createServer = v;                                                                                                 // 1\n  }                                                                                                                   // 1\n}, 2);                                                                                                                // 1\nvar pathJoin = void 0,                                                                                                // 1\n    pathDirname = void 0;                                                                                             // 1\nmodule1.watch(require(\"path\"), {                                                                                      // 1\n  join: function (v) {                                                                                                // 1\n    pathJoin = v;                                                                                                     // 1\n  },                                                                                                                  // 1\n  dirname: function (v) {                                                                                             // 1\n    pathDirname = v;                                                                                                  // 1\n  }                                                                                                                   // 1\n}, 3);                                                                                                                // 1\nvar parseUrl = void 0;                                                                                                // 1\nmodule1.watch(require(\"url\"), {                                                                                       // 1\n  parse: function (v) {                                                                                               // 1\n    parseUrl = v;                                                                                                     // 1\n  }                                                                                                                   // 1\n}, 4);                                                                                                                // 1\nvar createHash = void 0;                                                                                              // 1\nmodule1.watch(require(\"crypto\"), {                                                                                    // 1\n  createHash: function (v) {                                                                                          // 1\n    createHash = v;                                                                                                   // 1\n  }                                                                                                                   // 1\n}, 5);                                                                                                                // 1\nvar connect = void 0;                                                                                                 // 1\nmodule1.watch(require(\"connect\"), {                                                                                   // 1\n  \"default\": function (v) {                                                                                           // 1\n    connect = v;                                                                                                      // 1\n  }                                                                                                                   // 1\n}, 6);                                                                                                                // 1\nvar parseRequest = void 0;                                                                                            // 1\nmodule1.watch(require(\"parseurl\"), {                                                                                  // 1\n  \"default\": function (v) {                                                                                           // 1\n    parseRequest = v;                                                                                                 // 1\n  }                                                                                                                   // 1\n}, 7);                                                                                                                // 1\nvar lookupUserAgent = void 0;                                                                                         // 1\nmodule1.watch(require(\"useragent\"), {                                                                                 // 1\n  lookup: function (v) {                                                                                              // 1\n    lookupUserAgent = v;                                                                                              // 1\n  }                                                                                                                   // 1\n}, 8);                                                                                                                // 1\nvar send = void 0;                                                                                                    // 1\nmodule1.watch(require(\"send\"), {                                                                                      // 1\n  \"default\": function (v) {                                                                                           // 1\n    send = v;                                                                                                         // 1\n  }                                                                                                                   // 1\n}, 9);                                                                                                                // 1\nvar removeExistingSocketFile = void 0,                                                                                // 1\n    registerSocketFileCleanup = void 0;                                                                               // 1\nmodule1.watch(require(\"./socket_file.js\"), {                                                                          // 1\n  removeExistingSocketFile: function (v) {                                                                            // 1\n    removeExistingSocketFile = v;                                                                                     // 1\n  },                                                                                                                  // 1\n  registerSocketFileCleanup: function (v) {                                                                           // 1\n    registerSocketFileCleanup = v;                                                                                    // 1\n  }                                                                                                                   // 1\n}, 10);                                                                                                               // 1\nvar SHORT_SOCKET_TIMEOUT = 5 * 1000;                                                                                  // 19\nvar LONG_SOCKET_TIMEOUT = 120 * 1000;                                                                                 // 20\nvar WebApp = {};                                                                                                      // 22\nvar WebAppInternals = {};                                                                                             // 23\nWebAppInternals.NpmModules = {                                                                                        // 25\n  connect: {                                                                                                          // 26\n    version: Npm.require('connect/package.json').version,                                                             // 27\n    module: connect                                                                                                   // 28\n  }                                                                                                                   // 26\n};                                                                                                                    // 25\nWebApp.defaultArch = 'web.browser'; // XXX maps archs to manifests                                                    // 32\n                                                                                                                      //\nWebApp.clientPrograms = {}; // XXX maps archs to program path on filesystem                                           // 35\n                                                                                                                      //\nvar archPath = {};                                                                                                    // 38\n                                                                                                                      //\nvar bundledJsCssUrlRewriteHook = function (url) {                                                                     // 40\n  var bundledPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';                                           // 41\n  return bundledPrefix + url;                                                                                         // 43\n};                                                                                                                    // 44\n                                                                                                                      //\nvar sha1 = function (contents) {                                                                                      // 46\n  var hash = createHash('sha1');                                                                                      // 47\n  hash.update(contents);                                                                                              // 48\n  return hash.digest('hex');                                                                                          // 49\n};                                                                                                                    // 50\n                                                                                                                      //\nvar readUtf8FileSync = function (filename) {                                                                          // 52\n  return Meteor.wrapAsync(readFile)(filename, 'utf8');                                                                // 53\n}; // #BrowserIdentification                                                                                          // 54\n//                                                                                                                    // 57\n// We have multiple places that want to identify the browser: the                                                     // 58\n// unsupported browser page, the appcache package, and, eventually                                                    // 59\n// delivering browser polyfills only as needed.                                                                       // 60\n//                                                                                                                    // 61\n// To avoid detecting the browser in multiple places ad-hoc, we create a                                              // 62\n// Meteor \"browser\" object. It uses but does not expose the npm                                                       // 63\n// useragent module (we could choose a different mechanism to identify                                                // 64\n// the browser in the future if we wanted to).  The browser object                                                    // 65\n// contains                                                                                                           // 66\n//                                                                                                                    // 67\n// * `name`: the name of the browser in camel case                                                                    // 68\n// * `major`, `minor`, `patch`: integers describing the browser version                                               // 69\n//                                                                                                                    // 70\n// Also here is an early version of a Meteor `request` object, intended                                               // 71\n// to be a high-level description of the request without exposing                                                     // 72\n// details of connect's low-level `req`.  Currently it contains:                                                      // 73\n//                                                                                                                    // 74\n// * `browser`: browser identification object described above                                                         // 75\n// * `url`: parsed url, including parsed query params                                                                 // 76\n//                                                                                                                    // 77\n// As a temporary hack there is a `categorizeRequest` function on WebApp which                                        // 78\n// converts a connect `req` to a Meteor `request`. This can go away once smart                                        // 79\n// packages such as appcache are being passed a `request` object directly when                                        // 80\n// they serve content.                                                                                                // 81\n//                                                                                                                    // 82\n// This allows `request` to be used uniformly: it is passed to the html                                               // 83\n// attributes hook, and the appcache package can use it when deciding                                                 // 84\n// whether to generate a 404 for the manifest.                                                                        // 85\n//                                                                                                                    // 86\n// Real routing / server side rendering will probably refactor this                                                   // 87\n// heavily.                                                                                                           // 88\n// e.g. \"Mobile Safari\" => \"mobileSafari\"                                                                             // 91\n                                                                                                                      //\n                                                                                                                      //\nvar camelCase = function (name) {                                                                                     // 92\n  var parts = name.split(' ');                                                                                        // 93\n  parts[0] = parts[0].toLowerCase();                                                                                  // 94\n                                                                                                                      //\n  for (var i = 1; i < parts.length; ++i) {                                                                            // 95\n    parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].substr(1);                                                 // 96\n  }                                                                                                                   // 97\n                                                                                                                      //\n  return parts.join('');                                                                                              // 98\n};                                                                                                                    // 99\n                                                                                                                      //\nvar identifyBrowser = function (userAgentString) {                                                                    // 101\n  var userAgent = lookupUserAgent(userAgentString);                                                                   // 102\n  return {                                                                                                            // 103\n    name: camelCase(userAgent.family),                                                                                // 104\n    major: +userAgent.major,                                                                                          // 105\n    minor: +userAgent.minor,                                                                                          // 106\n    patch: +userAgent.patch                                                                                           // 107\n  };                                                                                                                  // 103\n}; // XXX Refactor as part of implementing real routing.                                                              // 109\n                                                                                                                      //\n                                                                                                                      //\nWebAppInternals.identifyBrowser = identifyBrowser;                                                                    // 112\n                                                                                                                      //\nWebApp.categorizeRequest = function (req) {                                                                           // 114\n  return _.extend({                                                                                                   // 115\n    browser: identifyBrowser(req.headers['user-agent']),                                                              // 116\n    url: parseUrl(req.url, true)                                                                                      // 117\n  }, _.pick(req, 'dynamicHead', 'dynamicBody'));                                                                      // 115\n}; // HTML attribute hooks: functions to be called to determine any attributes to                                     // 119\n// be added to the '<html>' tag. Each function is passed a 'request' object (see                                      // 122\n// #BrowserIdentification) and should return null or object.                                                          // 123\n                                                                                                                      //\n                                                                                                                      //\nvar htmlAttributeHooks = [];                                                                                          // 124\n                                                                                                                      //\nvar getHtmlAttributes = function (request) {                                                                          // 125\n  var combinedAttributes = {};                                                                                        // 126\n                                                                                                                      //\n  _.each(htmlAttributeHooks || [], function (hook) {                                                                  // 127\n    var attributes = hook(request);                                                                                   // 128\n    if (attributes === null) return;                                                                                  // 129\n    if ((typeof attributes === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(attributes)) !== 'object') throw Error(\"HTML attribute hook must return null or object\");\n                                                                                                                      //\n    _.extend(combinedAttributes, attributes);                                                                         // 133\n  });                                                                                                                 // 134\n                                                                                                                      //\n  return combinedAttributes;                                                                                          // 135\n};                                                                                                                    // 136\n                                                                                                                      //\nWebApp.addHtmlAttributeHook = function (hook) {                                                                       // 137\n  htmlAttributeHooks.push(hook);                                                                                      // 138\n}; // Serve app HTML for this URL?                                                                                    // 139\n                                                                                                                      //\n                                                                                                                      //\nvar appUrl = function (url) {                                                                                         // 142\n  if (url === '/favicon.ico' || url === '/robots.txt') return false; // NOTE: app.manifest is not a web standard like favicon.ico and\n  // robots.txt. It is a file name we have chosen to use for HTML5                                                    // 147\n  // appcache URLs. It is included here to prevent using an appcache                                                  // 148\n  // then removing it from poisoning an app permanently. Eventually,                                                  // 149\n  // once we have server side routing, this won't be needed as                                                        // 150\n  // unknown URLs with return a 404 automatically.                                                                    // 151\n                                                                                                                      //\n  if (url === '/app.manifest') return false; // Avoid serving app HTML for declared routes such as /sockjs/.          // 152\n                                                                                                                      //\n  if (RoutePolicy.classify(url)) return false; // we currently return app HTML on all URLs by default                 // 156\n                                                                                                                      //\n  return true;                                                                                                        // 160\n}; // We need to calculate the client hash after all packages have loaded                                             // 161\n// to give them a chance to populate __meteor_runtime_config__.                                                       // 165\n//                                                                                                                    // 166\n// Calculating the hash during startup means that packages can only                                                   // 167\n// populate __meteor_runtime_config__ during load, not during startup.                                                // 168\n//                                                                                                                    // 169\n// Calculating instead it at the beginning of main after all startup                                                  // 170\n// hooks had run would allow packages to also populate                                                                // 171\n// __meteor_runtime_config__ during startup, but that's too late for                                                  // 172\n// autoupdate because it needs to have the client hash at startup to                                                  // 173\n// insert the auto update version itself into                                                                         // 174\n// __meteor_runtime_config__ to get it to the client.                                                                 // 175\n//                                                                                                                    // 176\n// An alternative would be to give autoupdate a \"post-start,                                                          // 177\n// pre-listen\" hook to allow it to insert the auto update version at                                                  // 178\n// the right moment.                                                                                                  // 179\n                                                                                                                      //\n                                                                                                                      //\nMeteor.startup(function () {                                                                                          // 181\n  var calculateClientHash = WebAppHashing.calculateClientHash;                                                        // 182\n                                                                                                                      //\n  WebApp.clientHash = function (archName) {                                                                           // 183\n    archName = archName || WebApp.defaultArch;                                                                        // 184\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest);                                             // 185\n  };                                                                                                                  // 186\n                                                                                                                      //\n  WebApp.calculateClientHashRefreshable = function (archName) {                                                       // 188\n    archName = archName || WebApp.defaultArch;                                                                        // 189\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, function (name) {                            // 190\n      return name === \"css\";                                                                                          // 192\n    });                                                                                                               // 193\n  };                                                                                                                  // 194\n                                                                                                                      //\n  WebApp.calculateClientHashNonRefreshable = function (archName) {                                                    // 195\n    archName = archName || WebApp.defaultArch;                                                                        // 196\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, function (name) {                            // 197\n      return name !== \"css\";                                                                                          // 199\n    });                                                                                                               // 200\n  };                                                                                                                  // 201\n                                                                                                                      //\n  WebApp.calculateClientHashCordova = function () {                                                                   // 202\n    var archName = 'web.cordova';                                                                                     // 203\n    if (!WebApp.clientPrograms[archName]) return 'none';                                                              // 204\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest, null, _.pick(__meteor_runtime_config__, 'PUBLIC_SETTINGS'));\n  };                                                                                                                  // 210\n}); // When we have a request pending, we want the socket timeout to be long, to                                      // 211\n// give ourselves a while to serve it, and to allow sockjs long polls to                                              // 216\n// complete.  On the other hand, we want to close idle sockets relatively                                             // 217\n// quickly, so that we can shut down relatively promptly but cleanly, without                                         // 218\n// cutting off anyone's response.                                                                                     // 219\n                                                                                                                      //\nWebApp._timeoutAdjustmentRequestCallback = function (req, res) {                                                      // 220\n  // this is really just req.socket.setTimeout(LONG_SOCKET_TIMEOUT);                                                  // 221\n  req.setTimeout(LONG_SOCKET_TIMEOUT); // Insert our new finish listener to run BEFORE the existing one which removes\n  // the response from the socket.                                                                                    // 224\n                                                                                                                      //\n  var finishListeners = res.listeners('finish'); // XXX Apparently in Node 0.12 this event was called 'prefinish'.    // 225\n  // https://github.com/joyent/node/commit/7c9b6070                                                                   // 227\n  // But it has switched back to 'finish' in Node v4:                                                                 // 228\n  // https://github.com/nodejs/node/pull/1411                                                                         // 229\n                                                                                                                      //\n  res.removeAllListeners('finish');                                                                                   // 230\n  res.on('finish', function () {                                                                                      // 231\n    res.setTimeout(SHORT_SOCKET_TIMEOUT);                                                                             // 232\n  });                                                                                                                 // 233\n                                                                                                                      //\n  _.each(finishListeners, function (l) {                                                                              // 234\n    res.on('finish', l);                                                                                              // 234\n  });                                                                                                                 // 234\n}; // Will be updated by main before we listen.                                                                       // 235\n// Map from client arch to boilerplate object.                                                                        // 239\n// Boilerplate object has:                                                                                            // 240\n//   - func: XXX                                                                                                      // 241\n//   - baseData: XXX                                                                                                  // 242\n                                                                                                                      //\n                                                                                                                      //\nvar boilerplateByArch = {}; // Register a callback function that can selectively modify boilerplate                   // 243\n// data given arguments (request, data, arch). The key should be a unique                                             // 246\n// identifier, to prevent accumulating duplicate callbacks from the same                                              // 247\n// call site over time. Callbacks will be called in the order they were                                               // 248\n// registered. A callback should return false if it did not make any                                                  // 249\n// changes affecting the boilerplate. Passing null deletes the callback.                                              // 250\n// Any previous callback registered for this key will be returned.                                                    // 251\n                                                                                                                      //\nvar boilerplateDataCallbacks = Object.create(null);                                                                   // 252\n                                                                                                                      //\nWebAppInternals.registerBoilerplateDataCallback = function (key, callback) {                                          // 253\n  var previousCallback = boilerplateDataCallbacks[key];                                                               // 254\n                                                                                                                      //\n  if (typeof callback === \"function\") {                                                                               // 256\n    boilerplateDataCallbacks[key] = callback;                                                                         // 257\n  } else {                                                                                                            // 258\n    assert.strictEqual(callback, null);                                                                               // 259\n    delete boilerplateDataCallbacks[key];                                                                             // 260\n  } // Return the previous callback in case the new callback needs to call                                            // 261\n  // it; for example, when the new callback is a wrapper for the old.                                                 // 264\n                                                                                                                      //\n                                                                                                                      //\n  return previousCallback || null;                                                                                    // 265\n}; // Given a request (as returned from `categorizeRequest`), return the                                              // 266\n// boilerplate HTML to serve for that request.                                                                        // 269\n//                                                                                                                    // 270\n// If a previous connect middleware has rendered content for the head or body,                                        // 271\n// returns the boilerplate with that content patched in otherwise                                                     // 272\n// memoizes on HTML attributes (used by, eg, appcache) and whether inline                                             // 273\n// scripts are currently allowed.                                                                                     // 274\n// XXX so far this function is always called with arch === 'web.browser'                                              // 275\n                                                                                                                      //\n                                                                                                                      //\nvar memoizedBoilerplate = {};                                                                                         // 276\n                                                                                                                      //\nfunction getBoilerplate(request, arch) {                                                                              // 278\n  return getBoilerplateAsync(request, arch).await();                                                                  // 279\n}                                                                                                                     // 280\n                                                                                                                      //\nfunction getBoilerplateAsync(request, arch) {                                                                         // 282\n  var boilerplate = boilerplateByArch[arch];                                                                          // 283\n  var data = Object.assign({}, boilerplate.baseData, {                                                                // 284\n    htmlAttributes: getHtmlAttributes(request)                                                                        // 285\n  }, _.pick(request, \"dynamicHead\", \"dynamicBody\"));                                                                  // 284\n  var madeChanges = false;                                                                                            // 288\n  var promise = Promise.resolve();                                                                                    // 289\n  Object.keys(boilerplateDataCallbacks).forEach(function (key) {                                                      // 291\n    promise = promise.then(function () {                                                                              // 292\n      var callback = boilerplateDataCallbacks[key];                                                                   // 293\n      return callback(request, data, arch);                                                                           // 294\n    }).then(function (result) {                                                                                       // 295\n      // Callbacks should return false if they did not make any changes.                                              // 296\n      if (result !== false) {                                                                                         // 297\n        madeChanges = true;                                                                                           // 298\n      }                                                                                                               // 299\n    });                                                                                                               // 300\n  });                                                                                                                 // 301\n  return promise.then(function () {                                                                                   // 303\n    var useMemoized = !(data.dynamicHead || data.dynamicBody || madeChanges);                                         // 304\n                                                                                                                      //\n    if (!useMemoized) {                                                                                               // 310\n      return boilerplate.toHTML(data);                                                                                // 311\n    } // The only thing that changes from request to request (unless extra                                            // 312\n    // content is added to the head or body, or boilerplateDataCallbacks                                              // 315\n    // modified the data) are the HTML attributes (used by, eg, appcache)                                             // 316\n    // and whether inline scripts are allowed, so memoize based on that.                                              // 317\n                                                                                                                      //\n                                                                                                                      //\n    var memHash = JSON.stringify({                                                                                    // 318\n      inlineScriptsAllowed: inlineScriptsAllowed,                                                                     // 319\n      htmlAttributes: data.htmlAttributes,                                                                            // 320\n      arch: arch                                                                                                      // 321\n    });                                                                                                               // 318\n                                                                                                                      //\n    if (!memoizedBoilerplate[memHash]) {                                                                              // 324\n      memoizedBoilerplate[memHash] = boilerplateByArch[arch].toHTML(data);                                            // 325\n    }                                                                                                                 // 327\n                                                                                                                      //\n    return memoizedBoilerplate[memHash];                                                                              // 329\n  });                                                                                                                 // 330\n}                                                                                                                     // 331\n                                                                                                                      //\nWebAppInternals.generateBoilerplateInstance = function (arch, manifest, additionalOptions) {                          // 333\n  additionalOptions = additionalOptions || {};                                                                        // 336\n                                                                                                                      //\n  var runtimeConfig = _.extend(_.clone(__meteor_runtime_config__), additionalOptions.runtimeConfigOverrides || {});   // 338\n                                                                                                                      //\n  return new Boilerplate(arch, manifest, _.extend({                                                                   // 342\n    pathMapper: function (itemPath) {                                                                                 // 344\n      return pathJoin(archPath[arch], itemPath);                                                                      // 345\n    },                                                                                                                // 345\n    baseDataExtension: {                                                                                              // 346\n      additionalStaticJs: _.map(additionalStaticJs || [], function (contents, pathname) {                             // 347\n        return {                                                                                                      // 350\n          pathname: pathname,                                                                                         // 351\n          contents: contents                                                                                          // 352\n        };                                                                                                            // 350\n      }),                                                                                                             // 354\n      // Convert to a JSON string, then get rid of most weird characters, then                                        // 356\n      // wrap in double quotes. (The outermost JSON.stringify really ought to                                         // 357\n      // just be \"wrap in double quotes\" but we use it to be safe.) This might                                        // 358\n      // end up inside a <script> tag so we need to be careful to not include                                         // 359\n      // \"</script>\", but normal {{spacebars}} escaping escapes too much! See                                         // 360\n      // https://github.com/meteor/meteor/issues/3730                                                                 // 361\n      meteorRuntimeConfig: JSON.stringify(encodeURIComponent(JSON.stringify(runtimeConfig))),                         // 362\n      rootUrlPathPrefix: __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '',                                        // 364\n      bundledJsCssUrlRewriteHook: bundledJsCssUrlRewriteHook,                                                         // 365\n      inlineScriptsAllowed: WebAppInternals.inlineScriptsAllowed(),                                                   // 366\n      inline: additionalOptions.inline                                                                                // 367\n    }                                                                                                                 // 346\n  }, additionalOptions));                                                                                             // 343\n}; // A mapping from url path to \"info\". Where \"info\" has the following fields:                                       // 371\n// - type: the type of file to be served                                                                              // 374\n// - cacheable: optionally, whether the file should be cached or not                                                  // 375\n// - sourceMapUrl: optionally, the url of the source map                                                              // 376\n//                                                                                                                    // 377\n// Info also contains one of the following:                                                                           // 378\n// - content: the stringified content that should be served at this path                                              // 379\n// - absolutePath: the absolute path on disk to the file                                                              // 380\n                                                                                                                      //\n                                                                                                                      //\nvar staticFiles; // Serve static files from the manifest or added with                                                // 382\n// `addStaticJs`. Exported for tests.                                                                                 // 385\n                                                                                                                      //\nWebAppInternals.staticFilesMiddleware = function (staticFiles, req, res, next) {                                      // 386\n  if ('GET' != req.method && 'HEAD' != req.method && 'OPTIONS' != req.method) {                                       // 387\n    next();                                                                                                           // 388\n    return;                                                                                                           // 389\n  }                                                                                                                   // 390\n                                                                                                                      //\n  var pathname = parseRequest(req).pathname;                                                                          // 391\n                                                                                                                      //\n  try {                                                                                                               // 392\n    pathname = decodeURIComponent(pathname);                                                                          // 393\n  } catch (e) {                                                                                                       // 394\n    next();                                                                                                           // 395\n    return;                                                                                                           // 396\n  }                                                                                                                   // 397\n                                                                                                                      //\n  var serveStaticJs = function (s) {                                                                                  // 399\n    res.writeHead(200, {                                                                                              // 400\n      'Content-type': 'application/javascript; charset=UTF-8'                                                         // 401\n    });                                                                                                               // 400\n    res.write(s);                                                                                                     // 403\n    res.end();                                                                                                        // 404\n  };                                                                                                                  // 405\n                                                                                                                      //\n  if (pathname === \"/meteor_runtime_config.js\" && !WebAppInternals.inlineScriptsAllowed()) {                          // 407\n    serveStaticJs(\"__meteor_runtime_config__ = \" + JSON.stringify(__meteor_runtime_config__) + \";\");                  // 409\n    return;                                                                                                           // 411\n  } else if (_.has(additionalStaticJs, pathname) && !WebAppInternals.inlineScriptsAllowed()) {                        // 412\n    serveStaticJs(additionalStaticJs[pathname]);                                                                      // 414\n    return;                                                                                                           // 415\n  }                                                                                                                   // 416\n                                                                                                                      //\n  if (!_.has(staticFiles, pathname)) {                                                                                // 418\n    next();                                                                                                           // 419\n    return;                                                                                                           // 420\n  } // We don't need to call pause because, unlike 'static', once we call into                                        // 421\n  // 'send' and yield to the event loop, we never call another handler with                                           // 424\n  // 'next'.                                                                                                          // 425\n                                                                                                                      //\n                                                                                                                      //\n  var info = staticFiles[pathname]; // Cacheable files are files that should never change. Typically                  // 427\n  // named by their hash (eg meteor bundled js and css files).                                                        // 430\n  // We cache them ~forever (1yr).                                                                                    // 431\n                                                                                                                      //\n  var maxAge = info.cacheable ? 1000 * 60 * 60 * 24 * 365 : 0; // Set the X-SourceMap header, which current Chrome, FireFox, and Safari\n  // understand.  (The SourceMap header is slightly more spec-correct but FF                                          // 437\n  // doesn't understand it.)                                                                                          // 438\n  //                                                                                                                  // 439\n  // You may also need to enable source maps in Chrome: open dev tools, click                                         // 440\n  // the gear in the bottom right corner, and select \"enable source maps\".                                            // 441\n                                                                                                                      //\n  if (info.sourceMapUrl) {                                                                                            // 442\n    res.setHeader('X-SourceMap', __meteor_runtime_config__.ROOT_URL_PATH_PREFIX + info.sourceMapUrl);                 // 443\n  }                                                                                                                   // 446\n                                                                                                                      //\n  if (info.type === \"js\" || info.type === \"dynamic js\") {                                                             // 448\n    res.setHeader(\"Content-Type\", \"application/javascript; charset=UTF-8\");                                           // 450\n  } else if (info.type === \"css\") {                                                                                   // 451\n    res.setHeader(\"Content-Type\", \"text/css; charset=UTF-8\");                                                         // 452\n  } else if (info.type === \"json\") {                                                                                  // 453\n    res.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");                                                 // 454\n  }                                                                                                                   // 455\n                                                                                                                      //\n  if (info.hash) {                                                                                                    // 457\n    res.setHeader('ETag', '\"' + info.hash + '\"');                                                                     // 458\n  }                                                                                                                   // 459\n                                                                                                                      //\n  if (info.content) {                                                                                                 // 461\n    res.write(info.content);                                                                                          // 462\n    res.end();                                                                                                        // 463\n  } else {                                                                                                            // 464\n    send(req, info.absolutePath, {                                                                                    // 465\n      maxage: maxAge,                                                                                                 // 466\n      dotfiles: 'allow',                                                                                              // 467\n      // if we specified a dotfile in the manifest, serve it                                                          // 467\n      lastModified: false // don't set last-modified based on the file date                                           // 468\n                                                                                                                      //\n    }).on('error', function (err) {                                                                                   // 465\n      Log.error(\"Error serving static file \" + err);                                                                  // 470\n      res.writeHead(500);                                                                                             // 471\n      res.end();                                                                                                      // 472\n    }).on('directory', function () {                                                                                  // 473\n      Log.error(\"Unexpected directory \" + info.absolutePath);                                                         // 475\n      res.writeHead(500);                                                                                             // 476\n      res.end();                                                                                                      // 477\n    }).pipe(res);                                                                                                     // 478\n  }                                                                                                                   // 480\n};                                                                                                                    // 481\n                                                                                                                      //\nvar getUrlPrefixForArch = function (arch) {                                                                           // 483\n  // XXX we rely on the fact that arch names don't contain slashes                                                    // 484\n  // in that case we would need to uri escape it                                                                      // 485\n  // We add '__' to the beginning of non-standard archs to \"scope\" the url                                            // 487\n  // to Meteor internals.                                                                                             // 488\n  return arch === WebApp.defaultArch ? '' : '/' + '__' + arch.replace(/^web\\./, '');                                  // 489\n}; // Parse the passed in port value. Return the port as-is if it's a String                                          // 491\n// (e.g. a Windows Server style named pipe), otherwise return the port as an                                          // 494\n// integer.                                                                                                           // 495\n//                                                                                                                    // 496\n// DEPRECATED: Direct use of this function is not recommended; it is no                                               // 497\n// longer used internally, and will be removed in a future release.                                                   // 498\n                                                                                                                      //\n                                                                                                                      //\nWebAppInternals.parsePort = function (port) {                                                                         // 499\n  var parsedPort = parseInt(port);                                                                                    // 500\n                                                                                                                      //\n  if (Number.isNaN(parsedPort)) {                                                                                     // 501\n    parsedPort = port;                                                                                                // 502\n  }                                                                                                                   // 503\n                                                                                                                      //\n  return parsedPort;                                                                                                  // 504\n};                                                                                                                    // 505\n                                                                                                                      //\nfunction runWebAppServer() {                                                                                          // 507\n  var shuttingDown = false;                                                                                           // 508\n  var syncQueue = new Meteor._SynchronousQueue();                                                                     // 509\n                                                                                                                      //\n  var getItemPathname = function (itemUrl) {                                                                          // 511\n    return decodeURIComponent(parseUrl(itemUrl).pathname);                                                            // 512\n  };                                                                                                                  // 513\n                                                                                                                      //\n  WebAppInternals.reloadClientPrograms = function () {                                                                // 515\n    syncQueue.runTask(function () {                                                                                   // 516\n      staticFiles = {};                                                                                               // 517\n                                                                                                                      //\n      var generateClientProgram = function (clientPath, arch) {                                                       // 518\n        // read the control for the client we'll be serving up                                                        // 519\n        var clientJsonPath = pathJoin(__meteor_bootstrap__.serverDir, clientPath);                                    // 520\n        var clientDir = pathDirname(clientJsonPath);                                                                  // 522\n        var clientJson = JSON.parse(readUtf8FileSync(clientJsonPath));                                                // 523\n        if (clientJson.format !== \"web-program-pre1\") throw new Error(\"Unsupported format for client assets: \" + JSON.stringify(clientJson.format));\n        if (!clientJsonPath || !clientDir || !clientJson) throw new Error(\"Client config file not parsed.\");          // 528\n        var urlPrefix = getUrlPrefixForArch(arch);                                                                    // 531\n        var manifest = clientJson.manifest;                                                                           // 533\n                                                                                                                      //\n        _.each(manifest, function (item) {                                                                            // 534\n          if (item.url && item.where === \"client\") {                                                                  // 535\n            staticFiles[urlPrefix + getItemPathname(item.url)] = {                                                    // 536\n              absolutePath: pathJoin(clientDir, item.path),                                                           // 537\n              cacheable: item.cacheable,                                                                              // 538\n              hash: item.hash,                                                                                        // 539\n              // Link from source to its map                                                                          // 540\n              sourceMapUrl: item.sourceMapUrl,                                                                        // 541\n              type: item.type                                                                                         // 542\n            };                                                                                                        // 536\n                                                                                                                      //\n            if (item.sourceMap) {                                                                                     // 545\n              // Serve the source map too, under the specified URL. We assume all                                     // 546\n              // source maps are cacheable.                                                                           // 547\n              staticFiles[urlPrefix + getItemPathname(item.sourceMapUrl)] = {                                         // 548\n                absolutePath: pathJoin(clientDir, item.sourceMap),                                                    // 549\n                cacheable: true                                                                                       // 550\n              };                                                                                                      // 548\n            }                                                                                                         // 552\n          }                                                                                                           // 553\n        });                                                                                                           // 554\n                                                                                                                      //\n        var program = {                                                                                               // 556\n          format: \"web-program-pre1\",                                                                                 // 557\n          manifest: manifest,                                                                                         // 558\n          version: process.env.AUTOUPDATE_VERSION || WebAppHashing.calculateClientHash(manifest, null, _.pick(__meteor_runtime_config__, \"PUBLIC_SETTINGS\")),\n          cordovaCompatibilityVersions: clientJson.cordovaCompatibilityVersions,                                      // 565\n          PUBLIC_SETTINGS: __meteor_runtime_config__.PUBLIC_SETTINGS                                                  // 566\n        };                                                                                                            // 556\n        WebApp.clientPrograms[arch] = program; // Serve the program as a string at /foo/<arch>/manifest.json          // 569\n        // XXX change manifest.json -> program.json                                                                   // 572\n                                                                                                                      //\n        staticFiles[urlPrefix + getItemPathname('/manifest.json')] = {                                                // 573\n          content: JSON.stringify(program),                                                                           // 574\n          cacheable: false,                                                                                           // 575\n          hash: program.version,                                                                                      // 576\n          type: \"json\"                                                                                                // 577\n        };                                                                                                            // 573\n      };                                                                                                              // 579\n                                                                                                                      //\n      try {                                                                                                           // 581\n        var clientPaths = __meteor_bootstrap__.configJson.clientPaths;                                                // 582\n                                                                                                                      //\n        _.each(clientPaths, function (clientPath, arch) {                                                             // 583\n          archPath[arch] = pathDirname(clientPath);                                                                   // 584\n          generateClientProgram(clientPath, arch);                                                                    // 585\n        }); // Exported for tests.                                                                                    // 586\n                                                                                                                      //\n                                                                                                                      //\n        WebAppInternals.staticFiles = staticFiles;                                                                    // 589\n      } catch (e) {                                                                                                   // 590\n        Log.error(\"Error reloading the client program: \" + e.stack);                                                  // 591\n        process.exit(1);                                                                                              // 592\n      }                                                                                                               // 593\n    });                                                                                                               // 594\n  };                                                                                                                  // 595\n                                                                                                                      //\n  WebAppInternals.generateBoilerplate = function () {                                                                 // 597\n    // This boilerplate will be served to the mobile devices when used with                                           // 598\n    // Meteor/Cordova for the Hot-Code Push and since the file will be served by                                      // 599\n    // the device's server, it is important to set the DDP url to the actual                                          // 600\n    // Meteor server accepting DDP connections and not the device's file server.                                      // 601\n    var defaultOptionsForArch = {                                                                                     // 602\n      'web.cordova': {                                                                                                // 603\n        runtimeConfigOverrides: {                                                                                     // 604\n          // XXX We use absoluteUrl() here so that we serve https://                                                  // 605\n          // URLs to cordova clients if force-ssl is in use. If we were                                               // 606\n          // to use __meteor_runtime_config__.ROOT_URL instead of                                                     // 607\n          // absoluteUrl(), then Cordova clients would immediately get a                                              // 608\n          // HCP setting their DDP_DEFAULT_CONNECTION_URL to                                                          // 609\n          // http://example.meteor.com. This breaks the app, because                                                  // 610\n          // force-ssl doesn't serve CORS headers on 302                                                              // 611\n          // redirects. (Plus it's undesirable to have clients                                                        // 612\n          // connecting to http://example.meteor.com when force-ssl is                                                // 613\n          // in use.)                                                                                                 // 614\n          DDP_DEFAULT_CONNECTION_URL: process.env.MOBILE_DDP_URL || Meteor.absoluteUrl(),                             // 615\n          ROOT_URL: process.env.MOBILE_ROOT_URL || Meteor.absoluteUrl()                                               // 617\n        }                                                                                                             // 604\n      }                                                                                                               // 603\n    };                                                                                                                // 602\n    syncQueue.runTask(function () {                                                                                   // 623\n      _.each(WebApp.clientPrograms, function (program, archName) {                                                    // 624\n        boilerplateByArch[archName] = WebAppInternals.generateBoilerplateInstance(archName, program.manifest, defaultOptionsForArch[archName]);\n      }); // Clear the memoized boilerplate cache.                                                                    // 629\n                                                                                                                      //\n                                                                                                                      //\n      memoizedBoilerplate = {}; // Configure CSS injection for the default arch                                       // 632\n      // XXX implement the CSS injection for all archs?                                                               // 635\n                                                                                                                      //\n      var cssFiles = boilerplateByArch[WebApp.defaultArch].baseData.css; // Rewrite all CSS files (which are written directly to <style> tags)\n      // by autoupdate_client to use the CDN prefix/etc                                                               // 638\n                                                                                                                      //\n      var allCss = _.map(cssFiles, function (cssFile) {                                                               // 639\n        return {                                                                                                      // 640\n          url: bundledJsCssUrlRewriteHook(cssFile.url)                                                                // 640\n        };                                                                                                            // 640\n      });                                                                                                             // 641\n                                                                                                                      //\n      WebAppInternals.refreshableAssets = {                                                                           // 642\n        allCss: allCss                                                                                                // 642\n      };                                                                                                              // 642\n    });                                                                                                               // 643\n  };                                                                                                                  // 644\n                                                                                                                      //\n  WebAppInternals.reloadClientPrograms(); // webserver                                                                // 646\n                                                                                                                      //\n  var app = connect(); // Packages and apps can add handlers that run before any other Meteor                         // 649\n  // handlers via WebApp.rawConnectHandlers.                                                                          // 652\n                                                                                                                      //\n  var rawConnectHandlers = connect();                                                                                 // 653\n  app.use(rawConnectHandlers); // Auto-compress any json, javascript, or text.                                        // 654\n                                                                                                                      //\n  app.use(connect.compress()); // We're not a proxy; reject (without crashing) attempts to treat us like              // 657\n  // one. (See #1212.)                                                                                                // 660\n                                                                                                                      //\n  app.use(function (req, res, next) {                                                                                 // 661\n    if (RoutePolicy.isValidUrl(req.url)) {                                                                            // 662\n      next();                                                                                                         // 663\n      return;                                                                                                         // 664\n    }                                                                                                                 // 665\n                                                                                                                      //\n    res.writeHead(400);                                                                                               // 666\n    res.write(\"Not a proxy\");                                                                                         // 667\n    res.end();                                                                                                        // 668\n  }); // Strip off the path prefix, if it exists.                                                                     // 669\n                                                                                                                      //\n  app.use(function (request, response, next) {                                                                        // 672\n    var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;                                                  // 673\n                                                                                                                      //\n    var url = Npm.require('url').parse(request.url);                                                                  // 674\n                                                                                                                      //\n    var pathname = url.pathname; // check if the path in the url starts with the path prefix (and the part            // 675\n    // after the path prefix must start with a / if it exists.)                                                       // 677\n                                                                                                                      //\n    if (pathPrefix && pathname.substring(0, pathPrefix.length) === pathPrefix && (pathname.length == pathPrefix.length || pathname.substring(pathPrefix.length, pathPrefix.length + 1) === \"/\")) {\n      request.url = request.url.substring(pathPrefix.length);                                                         // 681\n      next();                                                                                                         // 682\n    } else if (pathname === \"/favicon.ico\" || pathname === \"/robots.txt\") {                                           // 683\n      next();                                                                                                         // 684\n    } else if (pathPrefix) {                                                                                          // 685\n      response.writeHead(404);                                                                                        // 686\n      response.write(\"Unknown path\");                                                                                 // 687\n      response.end();                                                                                                 // 688\n    } else {                                                                                                          // 689\n      next();                                                                                                         // 690\n    }                                                                                                                 // 691\n  }); // Parse the query string into res.query. Used by oauth_server, but it's                                        // 692\n  // generally pretty handy..                                                                                         // 695\n                                                                                                                      //\n  app.use(connect.query()); // Serve static files from the manifest.                                                  // 696\n  // This is inspired by the 'static' middleware.                                                                     // 699\n                                                                                                                      //\n  app.use(function (req, res, next) {                                                                                 // 700\n    Promise.resolve().then(function () {                                                                              // 701\n      WebAppInternals.staticFilesMiddleware(staticFiles, req, res, next);                                             // 702\n    });                                                                                                               // 703\n  }); // Packages and apps can add handlers to this via WebApp.connectHandlers.                                       // 704\n  // They are inserted before our default handler.                                                                    // 707\n                                                                                                                      //\n  var packageAndAppHandlers = connect();                                                                              // 708\n  app.use(packageAndAppHandlers);                                                                                     // 709\n  var suppressConnectErrors = false; // connect knows it is an error handler because it has 4 arguments instead of    // 711\n  // 3. go figure.  (It is not smart enough to find such a thing if it's hidden                                       // 713\n  // inside packageAndAppHandlers.)                                                                                   // 714\n                                                                                                                      //\n  app.use(function (err, req, res, next) {                                                                            // 715\n    if (!err || !suppressConnectErrors || !req.headers['x-suppress-error']) {                                         // 716\n      next(err);                                                                                                      // 717\n      return;                                                                                                         // 718\n    }                                                                                                                 // 719\n                                                                                                                      //\n    res.writeHead(err.status, {                                                                                       // 720\n      'Content-Type': 'text/plain'                                                                                    // 720\n    });                                                                                                               // 720\n    res.end(\"An error message\");                                                                                      // 721\n  });                                                                                                                 // 722\n  app.use(function (req, res, next) {                                                                                 // 724\n    Promise.resolve().then(function () {                                                                              // 725\n      if (!appUrl(req.url)) {                                                                                         // 726\n        return next();                                                                                                // 727\n      }                                                                                                               // 728\n                                                                                                                      //\n      var headers = {                                                                                                 // 730\n        'Content-Type': 'text/html; charset=utf-8'                                                                    // 731\n      };                                                                                                              // 730\n                                                                                                                      //\n      if (shuttingDown) {                                                                                             // 734\n        headers['Connection'] = 'Close';                                                                              // 735\n      }                                                                                                               // 736\n                                                                                                                      //\n      var request = WebApp.categorizeRequest(req);                                                                    // 738\n                                                                                                                      //\n      if (request.url.query && request.url.query['meteor_css_resource']) {                                            // 740\n        // In this case, we're requesting a CSS resource in the meteor-specific                                       // 741\n        // way, but we don't have it.  Serve a static css file that indicates that                                    // 742\n        // we didn't have it, so we can detect that and refresh.  Make sure                                           // 743\n        // that any proxies or CDNs don't cache this error!  (Normally proxies                                        // 744\n        // or CDNs are smart enough not to cache error pages, but in order to                                         // 745\n        // make this hack work, we need to return the CSS file as a 200, which                                        // 746\n        // would otherwise be cached.)                                                                                // 747\n        headers['Content-Type'] = 'text/css; charset=utf-8';                                                          // 748\n        headers['Cache-Control'] = 'no-cache';                                                                        // 749\n        res.writeHead(200, headers);                                                                                  // 750\n        res.write(\".meteor-css-not-found-error { width: 0px;}\");                                                      // 751\n        res.end();                                                                                                    // 752\n        return;                                                                                                       // 753\n      }                                                                                                               // 754\n                                                                                                                      //\n      if (request.url.query && request.url.query['meteor_js_resource']) {                                             // 756\n        // Similarly, we're requesting a JS resource that we don't have.                                              // 757\n        // Serve an uncached 404. (We can't use the same hack we use for CSS,                                         // 758\n        // because actually acting on that hack requires us to have the JS                                            // 759\n        // already!)                                                                                                  // 760\n        headers['Cache-Control'] = 'no-cache';                                                                        // 761\n        res.writeHead(404, headers);                                                                                  // 762\n        res.end(\"404 Not Found\");                                                                                     // 763\n        return;                                                                                                       // 764\n      }                                                                                                               // 765\n                                                                                                                      //\n      if (request.url.query && request.url.query['meteor_dont_serve_index']) {                                        // 767\n        // When downloading files during a Cordova hot code push, we need                                             // 768\n        // to detect if a file is not available instead of inadvertently                                              // 769\n        // downloading the default index page.                                                                        // 770\n        // So similar to the situation above, we serve an uncached 404.                                               // 771\n        headers['Cache-Control'] = 'no-cache';                                                                        // 772\n        res.writeHead(404, headers);                                                                                  // 773\n        res.end(\"404 Not Found\");                                                                                     // 774\n        return;                                                                                                       // 775\n      } // /packages/asdfsad ... /__cordova/dafsdf.js                                                                 // 776\n                                                                                                                      //\n                                                                                                                      //\n      var pathname = parseRequest(req).pathname;                                                                      // 779\n      var archKey = pathname.split('/')[1];                                                                           // 780\n      var archKeyCleaned = 'web.' + archKey.replace(/^__/, '');                                                       // 781\n                                                                                                                      //\n      if (!/^__/.test(archKey) || !_.has(archPath, archKeyCleaned)) {                                                 // 783\n        archKey = WebApp.defaultArch;                                                                                 // 784\n      } else {                                                                                                        // 785\n        archKey = archKeyCleaned;                                                                                     // 786\n      }                                                                                                               // 787\n                                                                                                                      //\n      return getBoilerplateAsync(request, archKey).then(function (boilerplate) {                                      // 789\n        var statusCode = res.statusCode ? res.statusCode : 200;                                                       // 793\n        res.writeHead(statusCode, headers);                                                                           // 794\n        res.write(boilerplate);                                                                                       // 795\n        res.end();                                                                                                    // 796\n      }, function (error) {                                                                                           // 797\n        Log.error(\"Error running template: \" + error.stack);                                                          // 798\n        res.writeHead(500, headers);                                                                                  // 799\n        res.end();                                                                                                    // 800\n      });                                                                                                             // 801\n    });                                                                                                               // 802\n  }); // Return 404 by default, if no other handlers serve this URL.                                                  // 803\n                                                                                                                      //\n  app.use(function (req, res) {                                                                                       // 806\n    res.writeHead(404);                                                                                               // 807\n    res.end();                                                                                                        // 808\n  });                                                                                                                 // 809\n  var httpServer = createServer(app);                                                                                 // 812\n  var onListeningCallbacks = []; // After 5 seconds w/o data on a socket, kill it.  On the other hand, if             // 813\n  // there's an outstanding request, give it a higher timeout instead (to avoid                                       // 816\n  // killing long-polling requests)                                                                                   // 817\n                                                                                                                      //\n  httpServer.setTimeout(SHORT_SOCKET_TIMEOUT); // Do this here, and then also in livedata/stream_server.js, because   // 818\n  // stream_server.js kills all the current request handlers when installing its                                      // 821\n  // own.                                                                                                             // 822\n                                                                                                                      //\n  httpServer.on('request', WebApp._timeoutAdjustmentRequestCallback); // If the client gave us a bad request, tell it instead of just closing the\n  // socket. This lets load balancers in front of us differentiate between \"a                                         // 826\n  // server is randomly closing sockets for no reason\" and \"client sent a bad                                         // 827\n  // request\".                                                                                                        // 828\n  //                                                                                                                  // 829\n  // This will only work on Node 6; Node 4 destroys the socket before calling                                         // 830\n  // this event. See https://github.com/nodejs/node/pull/4557/ for details.                                           // 831\n                                                                                                                      //\n  httpServer.on('clientError', function (err, socket) {                                                               // 832\n    // Pre-Node-6, do nothing.                                                                                        // 833\n    if (socket.destroyed) {                                                                                           // 834\n      return;                                                                                                         // 835\n    }                                                                                                                 // 836\n                                                                                                                      //\n    if (err.message === 'Parse Error') {                                                                              // 838\n      socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');                                                                 // 839\n    } else {                                                                                                          // 840\n      // For other errors, use the default behavior as if we had no clientError                                       // 841\n      // handler.                                                                                                     // 842\n      socket.destroy(err);                                                                                            // 843\n    }                                                                                                                 // 844\n  }); // start up app                                                                                                 // 845\n                                                                                                                      //\n  _.extend(WebApp, {                                                                                                  // 848\n    connectHandlers: packageAndAppHandlers,                                                                           // 849\n    rawConnectHandlers: rawConnectHandlers,                                                                           // 850\n    httpServer: httpServer,                                                                                           // 851\n    connectApp: app,                                                                                                  // 852\n    // For testing.                                                                                                   // 853\n    suppressConnectErrors: function () {                                                                              // 854\n      suppressConnectErrors = true;                                                                                   // 855\n    },                                                                                                                // 856\n    onListening: function (f) {                                                                                       // 857\n      if (onListeningCallbacks) onListeningCallbacks.push(f);else f();                                                // 858\n    }                                                                                                                 // 862\n  }); // Let the rest of the packages (and Meteor.startup hooks) insert connect                                       // 848\n  // middlewares and update __meteor_runtime_config__, then keep going to set up                                      // 866\n  // actually serving HTML.                                                                                           // 867\n                                                                                                                      //\n                                                                                                                      //\n  exports.main = function (argv) {                                                                                    // 868\n    WebAppInternals.generateBoilerplate();                                                                            // 869\n                                                                                                                      //\n    var startHttpServer = function (listenOptions) {                                                                  // 871\n      httpServer.listen(listenOptions, Meteor.bindEnvironment(function () {                                           // 872\n        if (process.env.METEOR_PRINT_ON_LISTEN) {                                                                     // 873\n          console.log(\"LISTENING\");                                                                                   // 874\n        }                                                                                                             // 875\n                                                                                                                      //\n        var callbacks = onListeningCallbacks;                                                                         // 876\n        onListeningCallbacks = null;                                                                                  // 877\n        callbacks.forEach(function (callback) {                                                                       // 878\n          callback();                                                                                                 // 878\n        });                                                                                                           // 878\n      }, function (e) {                                                                                               // 879\n        console.error(\"Error listening:\", e);                                                                         // 880\n        console.error(e && e.stack);                                                                                  // 881\n      }));                                                                                                            // 882\n    };                                                                                                                // 883\n                                                                                                                      //\n    var localPort = process.env.PORT || 0;                                                                            // 885\n    var unixSocketPath = process.env.UNIX_SOCKET_PATH;                                                                // 886\n                                                                                                                      //\n    if (unixSocketPath) {                                                                                             // 888\n      // Start the HTTP server using a socket file.                                                                   // 889\n      removeExistingSocketFile(unixSocketPath);                                                                       // 890\n      startHttpServer({                                                                                               // 891\n        path: unixSocketPath                                                                                          // 891\n      });                                                                                                             // 891\n      registerSocketFileCleanup(unixSocketPath);                                                                      // 892\n    } else {                                                                                                          // 893\n      localPort = isNaN(Number(localPort)) ? localPort : Number(localPort);                                           // 894\n                                                                                                                      //\n      if (/\\\\\\\\?.+\\\\pipe\\\\?.+/.test(localPort)) {                                                                     // 895\n        // Start the HTTP server using Windows Server style named pipe.                                               // 896\n        startHttpServer({                                                                                             // 897\n          path: localPort                                                                                             // 897\n        });                                                                                                           // 897\n      } else if (typeof localPort === \"number\") {                                                                     // 898\n        // Start the HTTP server using TCP.                                                                           // 899\n        startHttpServer({                                                                                             // 900\n          port: localPort,                                                                                            // 901\n          host: process.env.BIND_IP || \"0.0.0.0\"                                                                      // 902\n        });                                                                                                           // 900\n      } else {                                                                                                        // 904\n        throw new Error(\"Invalid PORT specified\");                                                                    // 905\n      }                                                                                                               // 906\n    }                                                                                                                 // 907\n                                                                                                                      //\n    return \"DAEMON\";                                                                                                  // 909\n  };                                                                                                                  // 910\n}                                                                                                                     // 911\n                                                                                                                      //\nrunWebAppServer();                                                                                                    // 914\nvar inlineScriptsAllowed = true;                                                                                      // 917\n                                                                                                                      //\nWebAppInternals.inlineScriptsAllowed = function () {                                                                  // 919\n  return inlineScriptsAllowed;                                                                                        // 920\n};                                                                                                                    // 921\n                                                                                                                      //\nWebAppInternals.setInlineScriptsAllowed = function (value) {                                                          // 923\n  inlineScriptsAllowed = value;                                                                                       // 924\n  WebAppInternals.generateBoilerplate();                                                                              // 925\n};                                                                                                                    // 926\n                                                                                                                      //\nWebAppInternals.setBundledJsCssUrlRewriteHook = function (hookFn) {                                                   // 929\n  bundledJsCssUrlRewriteHook = hookFn;                                                                                // 930\n  WebAppInternals.generateBoilerplate();                                                                              // 931\n};                                                                                                                    // 932\n                                                                                                                      //\nWebAppInternals.setBundledJsCssPrefix = function (prefix) {                                                           // 934\n  var self = this;                                                                                                    // 935\n  self.setBundledJsCssUrlRewriteHook(function (url) {                                                                 // 936\n    return prefix + url;                                                                                              // 938\n  });                                                                                                                 // 939\n}; // Packages can call `WebAppInternals.addStaticJs` to specify static                                               // 940\n// JavaScript to be included in the app. This static JS will be inlined,                                              // 943\n// unless inline scripts have been disabled, in which case it will be                                                 // 944\n// served under `/<sha1 of contents>`.                                                                                // 945\n                                                                                                                      //\n                                                                                                                      //\nvar additionalStaticJs = {};                                                                                          // 946\n                                                                                                                      //\nWebAppInternals.addStaticJs = function (contents) {                                                                   // 947\n  additionalStaticJs[\"/\" + sha1(contents) + \".js\"] = contents;                                                        // 948\n}; // Exported for tests                                                                                              // 949\n                                                                                                                      //\n                                                                                                                      //\nWebAppInternals.getBoilerplate = getBoilerplate;                                                                      // 952\nWebAppInternals.additionalStaticJs = additionalStaticJs;                                                              // 953\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"socket_file.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/webapp/socket_file.js                                                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nmodule.export({                                                                                                       // 1\n  removeExistingSocketFile: function () {                                                                             // 1\n    return removeExistingSocketFile;                                                                                  // 1\n  },                                                                                                                  // 1\n  registerSocketFileCleanup: function () {                                                                            // 1\n    return registerSocketFileCleanup;                                                                                 // 1\n  }                                                                                                                   // 1\n});                                                                                                                   // 1\nvar statSync = void 0,                                                                                                // 1\n    unlinkSync = void 0,                                                                                              // 1\n    existsSync = void 0;                                                                                              // 1\nmodule.watch(require(\"fs\"), {                                                                                         // 1\n  statSync: function (v) {                                                                                            // 1\n    statSync = v;                                                                                                     // 1\n  },                                                                                                                  // 1\n  unlinkSync: function (v) {                                                                                          // 1\n    unlinkSync = v;                                                                                                   // 1\n  },                                                                                                                  // 1\n  existsSync: function (v) {                                                                                          // 1\n    existsSync = v;                                                                                                   // 1\n  }                                                                                                                   // 1\n}, 0);                                                                                                                // 1\n                                                                                                                      //\nvar removeExistingSocketFile = function (socketPath) {                                                                // 26\n  try {                                                                                                               // 27\n    if (statSync(socketPath).isSocket()) {                                                                            // 28\n      // Since a new socket file will be created, remove the existing                                                 // 29\n      // file.                                                                                                        // 30\n      unlinkSync(socketPath);                                                                                         // 31\n    } else {                                                                                                          // 32\n      throw new Error(\"An existing file was found at \\\"\" + socketPath + \"\\\" and it is not \" + 'a socket file. Please confirm PORT is pointing to valid and ' + 'un-used socket file path.');\n    }                                                                                                                 // 38\n  } catch (error) {                                                                                                   // 39\n    // If there is no existing socket file to cleanup, great, we'll                                                   // 40\n    // continue normally. If the caught exception represents any other                                                // 41\n    // issue, re-throw.                                                                                               // 42\n    if (error.code !== 'ENOENT') {                                                                                    // 43\n      throw error;                                                                                                    // 44\n    }                                                                                                                 // 45\n  }                                                                                                                   // 46\n};                                                                                                                    // 47\n                                                                                                                      //\nvar registerSocketFileCleanup = function (socketPath) {                                                               // 52\n  var eventEmitter = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process;                     // 53\n  ['exit', 'SIGINT', 'SIGHUP', 'SIGTERM'].forEach(function (signal) {                                                 // 54\n    eventEmitter.on(signal, Meteor.bindEnvironment(function () {                                                      // 55\n      if (existsSync(socketPath)) {                                                                                   // 56\n        unlinkSync(socketPath);                                                                                       // 57\n      }                                                                                                               // 58\n    }));                                                                                                              // 59\n  });                                                                                                                 // 60\n};                                                                                                                    // 61\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"connect\":{\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/connect/index.js                                                           //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n\nmodule.exports = require('./lib/connect');\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"parseurl\":{\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/parseurl/index.js                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*!\n * parseurl\n * Copyright(c) 2014 Jonathan Ong\n * Copyright(c) 2014 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar url = require('url')\nvar parse = url.parse\nvar Url = url.Url\n\n/**\n * Pattern for a simple path case.\n * See: https://github.com/joyent/node/pull/7878\n */\n\nvar simplePathRegExp = /^(\\/\\/?(?!\\/)[^\\?#\\s]*)(\\?[^#\\s]*)?$/\n\n/**\n * Exports.\n */\n\nmodule.exports = parseurl\nmodule.exports.original = originalurl\n\n/**\n * Parse the `req` url with memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @api public\n */\n\nfunction parseurl(req) {\n  var url = req.url\n\n  if (url === undefined) {\n    // URL is undefined\n    return undefined\n  }\n\n  var parsed = req._parsedUrl\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed\n  }\n\n  // Parse the URL\n  parsed = fastparse(url)\n  parsed._raw = url\n\n  return req._parsedUrl = parsed\n};\n\n/**\n * Parse the `req` original url with fallback and memoization.\n *\n * @param {ServerRequest} req\n * @return {Object}\n * @api public\n */\n\nfunction originalurl(req) {\n  var url = req.originalUrl\n\n  if (typeof url !== 'string') {\n    // Fallback\n    return parseurl(req)\n  }\n\n  var parsed = req._parsedOriginalUrl\n\n  if (fresh(url, parsed)) {\n    // Return cached URL parse\n    return parsed\n  }\n\n  // Parse the URL\n  parsed = fastparse(url)\n  parsed._raw = url\n\n  return req._parsedOriginalUrl = parsed\n};\n\n/**\n * Parse the `str` url with fast-path short-cut.\n *\n * @param {string} str\n * @return {Object}\n * @api private\n */\n\nfunction fastparse(str) {\n  // Try fast path regexp\n  // See: https://github.com/joyent/node/pull/7878\n  var simplePath = typeof str === 'string' && simplePathRegExp.exec(str)\n\n  // Construct simple URL\n  if (simplePath) {\n    var pathname = simplePath[1]\n    var search = simplePath[2] || null\n    var url = Url !== undefined\n      ? new Url()\n      : {}\n    url.path = str\n    url.href = str\n    url.pathname = pathname\n    url.search = search\n    url.query = search && search.substr(1)\n\n    return url\n  }\n\n  return parse(str)\n}\n\n/**\n * Determine if parsed is still fresh for url.\n *\n * @param {string} url\n * @param {object} parsedUrl\n * @return {boolean}\n * @api private\n */\n\nfunction fresh(url, parsedUrl) {\n  return typeof parsedUrl === 'object'\n    && parsedUrl !== null\n    && (Url === undefined || parsedUrl instanceof Url)\n    && parsedUrl._raw === url\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"useragent\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// ../npm/node_modules/useragent/package.json                                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nexports.name = \"useragent\";\nexports.version = \"2.0.7\";\nexports.main = \"./index.js\";\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/useragent/index.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n'use strict';\n\n/**\n * This is where all the magic comes from, specially crafted for `useragent`.\n */\nvar regexps = require('./lib/regexps');\n\n/**\n * Reduce references by storing the lookups.\n */\n// OperatingSystem parsers:\nvar osparsers = regexps.os\n  , osparserslength = osparsers.length;\n\n// UserAgent parsers:\nvar agentparsers = regexps.browser\n  , agentparserslength = agentparsers.length;\n\n// Device parsers:\nvar deviceparsers = regexps.device\n  , deviceparserslength = deviceparsers.length;\n\n/**\n * The representation of a parsed user agent.\n *\n * @constructor\n * @param {String} family The name of the browser\n * @param {String} major Major version of the browser\n * @param {String} minor Minor version of the browser\n * @param {String} patch Patch version of the browser\n * @param {String} source The actual user agent string\n * @api public\n */\nfunction Agent(family, major, minor, patch, source) {\n  this.family = family || 'Other';\n  this.major = major || '0';\n  this.minor = minor || '0';\n  this.patch = patch || '0';\n  this.source = source || '';\n}\n\n/**\n * OnDemand parsing of the Operating System.\n *\n * @type {OperatingSystem}\n * @api public\n */\nObject.defineProperty(Agent.prototype, 'os', {\n  get: function lazyparse() {\n    var userAgent = this.source\n      , length = osparserslength\n      , parsers = osparsers\n      , i = 0\n      , parser\n      , res;\n\n    for (; i < length; i++) {\n      if (res = parsers[i][0].exec(userAgent)) {\n        parser = parsers[i];\n\n        if (parser[1]) res[1] = parser[1].replace('$1', res[1]);\n        break;\n      }\n    }\n\n    return Object.defineProperty(this, 'os', {\n        value: !parser || !res\n          ? new OperatingSystem()\n          : new OperatingSystem(\n                res[1]\n              , parser[2] || res[2]\n              , parser[3] || res[3]\n              , parser[4] || res[4]\n            )\n    }).os;\n  },\n\n  /**\n   * Bypass the OnDemand parsing and set an OperatingSystem instance.\n   *\n   * @param {OperatingSystem} os\n   * @api public\n   */\n  set: function set(os) {\n    if (!(os instanceof OperatingSystem)) return false;\n\n    return Object.defineProperty(this, 'os', {\n      value: os\n    }).os;\n  }\n});\n\n/**\n * OnDemand parsing of the Device type.\n *\n * @type {Device}\n * @api public\n */\nObject.defineProperty(Agent.prototype, 'device', {\n  get: function lazyparse() {\n    var userAgent = this.source\n      , length = deviceparserslength\n      , parsers = deviceparsers\n      , i = 0\n      , parser\n      , res;\n\n    for (; i < length; i++) {\n      if (res = parsers[i][0].exec(userAgent)) {\n        parser = parsers[i];\n\n        if (parser[1]) res[1] = parser[1].replace('$1', res[1]);\n        break;\n      }\n    }\n\n    return Object.defineProperty(this, 'device', {\n        value: !parser || !res\n          ? new Device()\n          : new Device(\n                res[1]\n              , parser[2] || res[2]\n              , parser[3] || res[3]\n              , parser[4] || res[4]\n            )\n    }).device;\n  },\n\n  /**\n   * Bypass the OnDemand parsing and set an Device instance.\n   *\n   * @param {Device} device\n   * @api public\n   */\n  set: function set(device) {\n    if (!(device instanceof Device)) return false;\n\n    return Object.defineProperty(this, 'device', {\n      value: device\n    }).device;\n  }\n});\n/*** Generates a string output of the parsed user agent.\n *\n * @returns {String}\n * @api public\n */\nAgent.prototype.toAgent = function toAgent() {\n  var output = this.family\n    , version = this.toVersion();\n\n  if (version) output += ' '+ version;\n  return output;\n};\n\n/**\n * Generates a string output of the parser user agent and operating system.\n *\n * @returns {String}  \"UserAgent 0.0.0 / OS\"\n * @api public\n */\nAgent.prototype.toString = function toString() {\n  var agent = this.toAgent()\n    , os = this.os !== 'Other' ? this.os : false;\n\n  return agent + (os ? ' / ' + os : '');\n};\n\n/**\n * Outputs a compiled veersion number of the user agent.\n *\n * @returns {String}\n * @api public\n */\nAgent.prototype.toVersion = function toVersion() {\n  var version = '';\n\n  if (this.major) {\n    version += this.major;\n\n    if (this.minor) {\n     version += '.' + this.minor;\n\n     // Special case here, the patch can also be Alpha, Beta etc so we need\n     // to check if it's a string or not.\n     if (this.patch) {\n      version += (isNaN(+this.patch) ? ' ' : '.') + this.patch;\n     }\n    }\n  }\n\n  return version;\n};\n\n/**\n * Outputs a JSON string of the Agent.\n *\n * @returns {String}\n * @api public\n */\nAgent.prototype.toJSON = function toJSON() {\n  return {\n      family: this.family\n    , major: this.major\n    , minor: this.minor\n    , patch: this.patch\n    , device: this.device\n    , os: this.os\n  };\n};\n\n/**\n * The representation of a parsed Operating System.\n *\n * @constructor\n * @param {String} family The name of the os\n * @param {String} major Major version of the os\n * @param {String} minor Minor version of the os\n * @param {String} patch Patch version of the os\n * @api public\n */\nfunction OperatingSystem(family, major, minor, patch) {\n  this.family = family || 'Other';\n  this.major = major || '';\n  this.minor = minor || '';\n  this.patch = patch || '';\n}\n\n/**\n * Generates a stringified version of the Operating System.\n *\n * @returns {String} \"Operating System 0.0.0\"\n * @api public\n */\nOperatingSystem.prototype.toString = function toString() {\n  var output = this.family\n    , version = this.toVersion();\n\n  if (version) output += ' '+ version;\n  return output;\n};\n\n/**\n * Generates the version of the Operating System.\n *\n * @returns {String}\n * @api public\n */\nOperatingSystem.prototype.toVersion = function toVersion() {\n  var version = '';\n\n  if (this.major) {\n    version += this.major;\n\n    if (this.minor) {\n     version += '.' + this.minor;\n\n     // Special case here, the patch can also be Alpha, Beta etc so we need\n     // to check if it's a string or not.\n     if (this.patch) {\n      version += (isNaN(+this.patch) ? ' ' : '.') + this.patch;\n     }\n    }\n  }\n\n  return version;\n};\n\n/**\n * Outputs a JSON string of the OS, values are defaulted to undefined so they\n * are not outputed in the stringify.\n *\n * @returns {String}\n * @api public\n */\nOperatingSystem.prototype.toJSON = function toJSON(){\n  return {\n      family: this.family\n    , major: this.major || undefined\n    , minor: this.minor || undefined\n    , patch: this.patch || undefined\n  };\n};\n\n/**\n * The representation of a parsed Device.\n *\n * @constructor\n * @param {String} family The name of the os\n * @api public\n */\nfunction Device(family, major, minor, patch) {\n  this.family = family || 'Other';\n  this.major = major || '';\n  this.minor = minor || '';\n  this.patch = patch || '';\n}\n\n/**\n * Generates a stringified version of the Device.\n *\n * @returns {String} \"Device 0.0.0\"\n * @api public\n */\nDevice.prototype.toString = function toString() {\n  var output = this.family\n    , version = this.toVersion();\n\n  if (version) output += ' '+ version;\n  return output;\n};\n\n/**\n * Generates the version of the Device.\n *\n * @returns {String}\n * @api public\n */\nDevice.prototype.toVersion = function toVersion() {\n  var version = '';\n\n  if (this.major) {\n    version += this.major;\n\n    if (this.minor) {\n     version += '.' + this.minor;\n\n     // Special case here, the patch can also be Alpha, Beta etc so we need\n     // to check if it's a string or not.\n     if (this.patch) {\n      version += (isNaN(+this.patch) ? ' ' : '.') + this.patch;\n     }\n    }\n  }\n\n  return version;\n};\n\n/**\n * Get string representation.\n *\n * @returns {String}\n * @api public\n */\nDevice.prototype.toString = function toString() {\n  var output = this.family\n    , version = this.toVersion();\n\n  if (version) output += ' '+ version;\n  return output;\n};\n\n/**\n * Outputs a JSON string of the Device, values are defaulted to undefined so they\n * are not outputed in the stringify.\n *\n * @returns {String}\n * @api public\n */\nDevice.prototype.toJSON = function toJSON() {\n  return {\n      family: this.family\n    , major: this.major || undefined\n    , minor: this.minor || undefined\n    , patch: this.patch || undefined\n  };\n};\n\n/**\n * Small nifty thick that allows us to download a fresh set regexs from t3h\n * Int3rNetz when we want to. We will be using the compiled version by default\n * but users can opt-in for updates.\n *\n * @param {Boolean} refresh Refresh the dataset from the remote\n * @api public\n */\nmodule.exports = function updater() {\n  try {\n    require('./lib/update').update(function updating(err, results) {\n      if (err) {\n        console.log('[useragent] Failed to update the parsed due to an error:');\n        console.log('[useragent] '+ (err.message ? err.message : err));\n        return;\n      }\n\n      regexps = results;\n\n      // OperatingSystem parsers:\n      osparsers = regexps.os;\n      osparserslength = osparsers.length;\n\n      // UserAgent parsers:\n      agentparsers = regexps.browser;\n      agentparserslength = agentparsers.length;\n\n      // Device parsers:\n      deviceparsers = regexps.device;\n      deviceparserslength = deviceparsers.length;\n    });\n  } catch (e) {\n    console.error('[useragent] If you want to use automatic updating, please add:');\n    console.error('[useragent]   - request (npm install request --save)');\n    console.error('[useragent]   - yamlparser (npm install yamlparser --save)');\n    console.error('[useragent] To your own package.json');\n  }\n};\n\n// Override the exports with our newly set module.exports\nexports = module.exports;\n\n/**\n * Nao that we have setup all the different classes and configured it we can\n * actually start assembling and exposing everything.\n */\nexports.Device = Device;\nexports.OperatingSystem = OperatingSystem;\nexports.Agent = Agent;\n\n/**\n * Parses the user agent string with the generated parsers from the\n * ua-parser project on google code.\n *\n * @param {String} userAgent The user agent string\n * @param {String} jsAgent Optional UA from js to detect chrome frame\n * @returns {Agent}\n * @api public\n */\nexports.parse = function parse(userAgent, jsAgent) {\n  if (!userAgent) return new Agent();\n\n  var length = agentparserslength\n    , parsers = agentparsers\n    , i = 0\n    , parser\n    , res;\n\n  for (; i < length; i++) {\n    if (res = parsers[i][0].exec(userAgent)) {\n      parser = parsers[i];\n\n      if (parser[1]) res[1] = parser[1].replace('$1', res[1]);\n      if (!jsAgent) return new Agent(\n          res[1]\n        , parser[2] || res[2]\n        , parser[3] || res[3]\n        , parser[4] || res[4]\n        , userAgent\n      );\n\n      break;\n    }\n  }\n\n  // Return early if we didn't find an match, but might still be able to parse\n  // the os and device, so make sure we supply it with the source\n  if (!parser || !res) return new Agent('', '', '', '', userAgent);\n\n  // Detect Chrome Frame, but make sure it's enabled! So we need to check for\n  // the Chrome/ so we know that it's actually using Chrome under the hood.\n  if (jsAgent && ~jsAgent.indexOf('Chrome/') && ~userAgent.indexOf('chromeframe')) {\n    res[1] = 'Chrome Frame (IE '+ res[1] +'.'+ res[2] +')';\n\n    // Run the JavaScripted userAgent string through the parser again so we can\n    // update the version numbers;\n    parser = parse(jsAgent);\n    parser[2] = parser.major;\n    parser[3] = parser.minor;\n    parser[4] = parser.patch;\n  }\n\n  return new Agent(\n      res[1]\n    , parser[2] || res[2]\n    , parser[3] || res[3]\n    , parser[4] || res[4]\n    , userAgent\n  );\n};\n\n/**\n * If you are doing a lot of lookups you might want to cache the results of the\n * parsed user agent string instead, in memory.\n *\n * @TODO We probably want to create 2 dictionary's here 1 for the Agent\n * instances and one for the userAgent instance mapping so we can re-use simular\n * Agent instance and lower our memory consumption.\n *\n * @param {String} userAgent The user agent string\n * @param {String} jsAgent Optional UA from js to detect chrome frame\n * @api public\n */\nvar LRU = require('lru-cache')(5000);\nexports.lookup = function lookup(userAgent, jsAgent) {\n  var key = (userAgent || '')+(jsAgent || '')\n    , cached = LRU.get(key);\n\n  if (cached) return cached;\n  LRU.set(key, (cached = exports.parse(userAgent, jsAgent)));\n\n  return cached;\n};\n\n/**\n * Does a more inaccurate but more common check for useragents identification.\n * The version detection is from the jQuery.com library and is licensed under\n * MIT.\n *\n * @param {String} useragent The user agent\n * @returns {Object} matches\n * @api public\n */\nexports.is = function is(useragent) {\n  var ua = (useragent || '').toLowerCase()\n    , details = {\n        chrome: false\n      , firefox: false\n      , ie: false\n      , mobile_safari: false\n      , mozilla: false\n      , opera: false\n      , safari: false\n      , webkit: false\n      , version: (ua.match(exports.is.versionRE) || [0, \"0\"])[1]\n    };\n\n  if (~ua.indexOf('webkit')) {\n    details.webkit = true;\n\n    if (~ua.indexOf('chrome')) {\n      details.chrome = true;\n    } else if (~ua.indexOf('safari')) {\n      details.safari = true;\n\n      if (~ua.indexOf('mobile') && ~ua.indexOf('apple')) {\n        details.mobile_safari = true;\n      }\n    }\n  } else if (~ua.indexOf('opera')) {\n    details.opera = true;\n  } else if (~ua.indexOf('mozilla') && !~ua.indexOf('compatible')) {\n    details.mozilla = true;\n\n    if (~ua.indexOf('firefox')) details.firefox = true;\n  } else if (~ua.indexOf('msie')) {\n    details.ie = true;\n  }\n\n  return details;\n};\n\n/**\n * Parses out the version numbers.\n *\n * @type {RegExp}\n * @api private\n */\nexports.is.versionRE = /.+(?:rv|it|ra|ie)[\\/: ]([\\d.]+)/;\n\n/**\n * Transform a JSON object back to a valid userAgent string\n *\n * @param {Object} details\n * @returns {Agent}\n */\nexports.fromJSON = function fromJSON(details) {\n  if (typeof details === 'string') details = JSON.parse(details);\n\n  var agent = new Agent(details.family, details.major, details.minor, details.patch)\n    , os = details.os;\n\n  // The device family was added in v2.0\n  if ('device' in details) {\n    agent.device = new Device(details.device.family);\n  } else {\n    agent.device = new Device();\n  }\n\n  if ('os' in details && os) {\n    // In v1.1.0 we only parsed out the Operating System name, not the full\n    // version which we added in v2.0. To provide backwards compatible we should\n    // we should set the details.os as family\n    if (typeof os === 'string') {\n      agent.os = new OperatingSystem(os);\n    } else {\n      agent.os = new OperatingSystem(os.family, os.major, os.minor, os.patch);\n    }\n  }\n\n  return agent;\n};\n\n/**\n * Library version.\n *\n * @type {String}\n * @api public\n */\nexports.version = require('./package.json').version;\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"send\":{\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/webapp/node_modules/send/index.js                                                              //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*!\n * send\n * Copyright(c) 2012 TJ Holowaychuk\n * Copyright(c) 2014-2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict'\n\n/**\n * Module dependencies.\n * @private\n */\n\nvar createError = require('http-errors')\nvar debug = require('debug')('send')\nvar deprecate = require('depd')('send')\nvar destroy = require('destroy')\nvar escapeHtml = require('escape-html')\n  , parseRange = require('range-parser')\n  , Stream = require('stream')\n  , mime = require('mime')\n  , fresh = require('fresh')\n  , path = require('path')\n  , fs = require('fs')\n  , normalize = path.normalize\n  , join = path.join\nvar etag = require('etag')\nvar EventEmitter = require('events').EventEmitter;\nvar ms = require('ms');\nvar onFinished = require('on-finished')\nvar statuses = require('statuses')\n\n/**\n * Variables.\n */\nvar extname = path.extname\nvar maxMaxAge = 60 * 60 * 24 * 365 * 1000; // 1 year\nvar resolve = path.resolve\nvar sep = path.sep\nvar toString = Object.prototype.toString\nvar upPathRegexp = /(?:^|[\\\\\\/])\\.\\.(?:[\\\\\\/]|$)/\n\n/**\n * Module exports.\n * @public\n */\n\nmodule.exports = send\nmodule.exports.mime = mime\n\n/**\n * Shim EventEmitter.listenerCount for node.js < 0.10\n */\n\n/* istanbul ignore next */\nvar listenerCount = EventEmitter.listenerCount\n  || function(emitter, type){ return emitter.listeners(type).length; };\n\n/**\n * Return a `SendStream` for `req` and `path`.\n *\n * @param {object} req\n * @param {string} path\n * @param {object} [options]\n * @return {SendStream}\n * @public\n */\n\nfunction send(req, path, options) {\n  return new SendStream(req, path, options);\n}\n\n/**\n * Initialize a `SendStream` with the given `path`.\n *\n * @param {Request} req\n * @param {String} path\n * @param {object} [options]\n * @private\n */\n\nfunction SendStream(req, path, options) {\n  var opts = options || {}\n\n  this.options = opts\n  this.path = path\n  this.req = req\n\n  this._etag = opts.etag !== undefined\n    ? Boolean(opts.etag)\n    : true\n\n  this._dotfiles = opts.dotfiles !== undefined\n    ? opts.dotfiles\n    : 'ignore'\n\n  if (this._dotfiles !== 'ignore' && this._dotfiles !== 'allow' && this._dotfiles !== 'deny') {\n    throw new TypeError('dotfiles option must be \"allow\", \"deny\", or \"ignore\"')\n  }\n\n  this._hidden = Boolean(opts.hidden)\n\n  if (opts.hidden !== undefined) {\n    deprecate('hidden: use dotfiles: \\'' + (this._hidden ? 'allow' : 'ignore') + '\\' instead')\n  }\n\n  // legacy support\n  if (opts.dotfiles === undefined) {\n    this._dotfiles = undefined\n  }\n\n  this._extensions = opts.extensions !== undefined\n    ? normalizeList(opts.extensions, 'extensions option')\n    : []\n\n  this._index = opts.index !== undefined\n    ? normalizeList(opts.index, 'index option')\n    : ['index.html']\n\n  this._lastModified = opts.lastModified !== undefined\n    ? Boolean(opts.lastModified)\n    : true\n\n  this._maxage = opts.maxAge || opts.maxage\n  this._maxage = typeof this._maxage === 'string'\n    ? ms(this._maxage)\n    : Number(this._maxage)\n  this._maxage = !isNaN(this._maxage)\n    ? Math.min(Math.max(0, this._maxage), maxMaxAge)\n    : 0\n\n  this._root = opts.root\n    ? resolve(opts.root)\n    : null\n\n  if (!this._root && opts.from) {\n    this.from(opts.from)\n  }\n}\n\n/**\n * Inherits from `Stream.prototype`.\n */\n\nSendStream.prototype.__proto__ = Stream.prototype;\n\n/**\n * Enable or disable etag generation.\n *\n * @param {Boolean} val\n * @return {SendStream}\n * @api public\n */\n\nSendStream.prototype.etag = deprecate.function(function etag(val) {\n  val = Boolean(val);\n  debug('etag %s', val);\n  this._etag = val;\n  return this;\n}, 'send.etag: pass etag as option');\n\n/**\n * Enable or disable \"hidden\" (dot) files.\n *\n * @param {Boolean} path\n * @return {SendStream}\n * @api public\n */\n\nSendStream.prototype.hidden = deprecate.function(function hidden(val) {\n  val = Boolean(val);\n  debug('hidden %s', val);\n  this._hidden = val;\n  this._dotfiles = undefined\n  return this;\n}, 'send.hidden: use dotfiles option');\n\n/**\n * Set index `paths`, set to a falsy\n * value to disable index support.\n *\n * @param {String|Boolean|Array} paths\n * @return {SendStream}\n * @api public\n */\n\nSendStream.prototype.index = deprecate.function(function index(paths) {\n  var index = !paths ? [] : normalizeList(paths, 'paths argument');\n  debug('index %o', paths);\n  this._index = index;\n  return this;\n}, 'send.index: pass index as option');\n\n/**\n * Set root `path`.\n *\n * @param {String} path\n * @return {SendStream}\n * @api public\n */\n\nSendStream.prototype.root = function(path){\n  path = String(path);\n  this._root = resolve(path)\n  return this;\n};\n\nSendStream.prototype.from = deprecate.function(SendStream.prototype.root,\n  'send.from: pass root as option');\n\nSendStream.prototype.root = deprecate.function(SendStream.prototype.root,\n  'send.root: pass root as option');\n\n/**\n * Set max-age to `maxAge`.\n *\n * @param {Number} maxAge\n * @return {SendStream}\n * @api public\n */\n\nSendStream.prototype.maxage = deprecate.function(function maxage(maxAge) {\n  maxAge = typeof maxAge === 'string'\n    ? ms(maxAge)\n    : Number(maxAge);\n  if (isNaN(maxAge)) maxAge = 0;\n  if (Infinity == maxAge) maxAge = 60 * 60 * 24 * 365 * 1000;\n  debug('max-age %d', maxAge);\n  this._maxage = maxAge;\n  return this;\n}, 'send.maxage: pass maxAge as option');\n\n/**\n * Emit error with `status`.\n *\n * @param {number} status\n * @param {Error} [error]\n * @private\n */\n\nSendStream.prototype.error = function error(status, error) {\n  // emit if listeners instead of responding\n  if (listenerCount(this, 'error') !== 0) {\n    return this.emit('error', createError(error, status, {\n      expose: false\n    }))\n  }\n\n  var res = this.res\n  var msg = statuses[status]\n\n  // wipe all existing headers\n  res._headers = null\n\n  // send basic response\n  res.statusCode = status\n  res.setHeader('Content-Type', 'text/plain; charset=UTF-8')\n  res.setHeader('Content-Length', Buffer.byteLength(msg))\n  res.setHeader('X-Content-Type-Options', 'nosniff')\n  res.end(msg)\n}\n\n/**\n * Check if the pathname ends with \"/\".\n *\n * @return {Boolean}\n * @api private\n */\n\nSendStream.prototype.hasTrailingSlash = function(){\n  return '/' == this.path[this.path.length - 1];\n};\n\n/**\n * Check if this is a conditional GET request.\n *\n * @return {Boolean}\n * @api private\n */\n\nSendStream.prototype.isConditionalGET = function(){\n  return this.req.headers['if-none-match']\n    || this.req.headers['if-modified-since'];\n};\n\n/**\n * Strip content-* header fields.\n *\n * @private\n */\n\nSendStream.prototype.removeContentHeaderFields = function removeContentHeaderFields() {\n  var res = this.res\n  var headers = Object.keys(res._headers || {})\n\n  for (var i = 0; i < headers.length; i++) {\n    var header = headers[i]\n    if (header.substr(0, 8) === 'content-' && header !== 'content-location') {\n      res.removeHeader(header)\n    }\n  }\n}\n\n/**\n * Respond with 304 not modified.\n *\n * @api private\n */\n\nSendStream.prototype.notModified = function(){\n  var res = this.res;\n  debug('not modified');\n  this.removeContentHeaderFields();\n  res.statusCode = 304;\n  res.end();\n};\n\n/**\n * Raise error that headers already sent.\n *\n * @api private\n */\n\nSendStream.prototype.headersAlreadySent = function headersAlreadySent(){\n  var err = new Error('Can\\'t set headers after they are sent.');\n  debug('headers already sent');\n  this.error(500, err);\n};\n\n/**\n * Check if the request is cacheable, aka\n * responded with 2xx or 304 (see RFC 2616 section 14.2{5,6}).\n *\n * @return {Boolean}\n * @api private\n */\n\nSendStream.prototype.isCachable = function(){\n  var res = this.res;\n  return (res.statusCode >= 200 && res.statusCode < 300) || 304 == res.statusCode;\n};\n\n/**\n * Handle stat() error.\n *\n * @param {Error} error\n * @private\n */\n\nSendStream.prototype.onStatError = function onStatError(error) {\n  switch (error.code) {\n    case 'ENAMETOOLONG':\n    case 'ENOENT':\n    case 'ENOTDIR':\n      this.error(404, error)\n      break\n    default:\n      this.error(500, error)\n      break\n  }\n}\n\n/**\n * Check if the cache is fresh.\n *\n * @return {Boolean}\n * @api private\n */\n\nSendStream.prototype.isFresh = function(){\n  return fresh(this.req.headers, this.res._headers);\n};\n\n/**\n * Check if the range is fresh.\n *\n * @return {Boolean}\n * @api private\n */\n\nSendStream.prototype.isRangeFresh = function isRangeFresh(){\n  var ifRange = this.req.headers['if-range'];\n\n  if (!ifRange) return true;\n\n  return ~ifRange.indexOf('\"')\n    ? ~ifRange.indexOf(this.res._headers['etag'])\n    : Date.parse(this.res._headers['last-modified']) <= Date.parse(ifRange);\n};\n\n/**\n * Redirect to path.\n *\n * @param {string} path\n * @private\n */\n\nSendStream.prototype.redirect = function redirect(path) {\n  if (listenerCount(this, 'directory') !== 0) {\n    this.emit('directory')\n    return\n  }\n\n  if (this.hasTrailingSlash()) {\n    this.error(403)\n    return\n  }\n\n  var loc = path + '/'\n  var msg = 'Redirecting to <a href=\"' + escapeHtml(loc) + '\">' + escapeHtml(loc) + '</a>\\n'\n  var res = this.res\n\n  // redirect\n  res.statusCode = 301\n  res.setHeader('Content-Type', 'text/html; charset=UTF-8')\n  res.setHeader('Content-Length', Buffer.byteLength(msg))\n  res.setHeader('X-Content-Type-Options', 'nosniff')\n  res.setHeader('Location', loc)\n  res.end(msg)\n}\n\n/**\n * Pipe to `res.\n *\n * @param {Stream} res\n * @return {Stream} res\n * @api public\n */\n\nSendStream.prototype.pipe = function(res){\n  var self = this\n    , args = arguments\n    , root = this._root;\n\n  // references\n  this.res = res;\n\n  // decode the path\n  var path = decode(this.path)\n  if (path === -1) return this.error(400)\n\n  // null byte(s)\n  if (~path.indexOf('\\0')) return this.error(400);\n\n  var parts\n  if (root !== null) {\n    // malicious path\n    if (upPathRegexp.test(normalize('.' + sep + path))) {\n      debug('malicious path \"%s\"', path)\n      return this.error(403)\n    }\n\n    // join / normalize from optional root dir\n    path = normalize(join(root, path))\n    root = normalize(root + sep)\n\n    // explode path parts\n    parts = path.substr(root.length).split(sep)\n  } else {\n    // \"..\" is malicious without \"root\"\n    if (upPathRegexp.test(path)) {\n      debug('malicious path \"%s\"', path)\n      return this.error(403)\n    }\n\n    // explode path parts\n    parts = normalize(path).split(sep)\n\n    // resolve the path\n    path = resolve(path)\n  }\n\n  // dotfile handling\n  if (containsDotFile(parts)) {\n    var access = this._dotfiles\n\n    // legacy support\n    if (access === undefined) {\n      access = parts[parts.length - 1][0] === '.'\n        ? (this._hidden ? 'allow' : 'ignore')\n        : 'allow'\n    }\n\n    debug('%s dotfile \"%s\"', access, path)\n    switch (access) {\n      case 'allow':\n        break\n      case 'deny':\n        return this.error(403)\n      case 'ignore':\n      default:\n        return this.error(404)\n    }\n  }\n\n  // index file support\n  if (this._index.length && this.path[this.path.length - 1] === '/') {\n    this.sendIndex(path);\n    return res;\n  }\n\n  this.sendFile(path);\n  return res;\n};\n\n/**\n * Transfer `path`.\n *\n * @param {String} path\n * @api public\n */\n\nSendStream.prototype.send = function(path, stat){\n  var len = stat.size;\n  var options = this.options\n  var opts = {}\n  var res = this.res;\n  var req = this.req;\n  var ranges = req.headers.range;\n  var offset = options.start || 0;\n\n  if (res._header) {\n    // impossible to send now\n    return this.headersAlreadySent();\n  }\n\n  debug('pipe \"%s\"', path)\n\n  // set header fields\n  this.setHeader(path, stat);\n\n  // set content-type\n  this.type(path);\n\n  // conditional GET support\n  if (this.isConditionalGET()\n    && this.isCachable()\n    && this.isFresh()) {\n    return this.notModified();\n  }\n\n  // adjust len to start/end options\n  len = Math.max(0, len - offset);\n  if (options.end !== undefined) {\n    var bytes = options.end - offset + 1;\n    if (len > bytes) len = bytes;\n  }\n\n  // Range support\n  if (ranges) {\n    ranges = parseRange(len, ranges);\n\n    // If-Range support\n    if (!this.isRangeFresh()) {\n      debug('range stale');\n      ranges = -2;\n    }\n\n    // unsatisfiable\n    if (-1 == ranges) {\n      debug('range unsatisfiable');\n      res.setHeader('Content-Range', 'bytes */' + stat.size);\n      return this.error(416);\n    }\n\n    // valid (syntactically invalid/multiple ranges are treated as a regular response)\n    if (-2 != ranges && ranges.length === 1) {\n      debug('range %j', ranges);\n\n      // Content-Range\n      res.statusCode = 206;\n      res.setHeader('Content-Range', 'bytes '\n        + ranges[0].start\n        + '-'\n        + ranges[0].end\n        + '/'\n        + len);\n\n      offset += ranges[0].start;\n      len = ranges[0].end - ranges[0].start + 1;\n    }\n  }\n\n  // clone options\n  for (var prop in options) {\n    opts[prop] = options[prop]\n  }\n\n  // set read options\n  opts.start = offset\n  opts.end = Math.max(offset, offset + len - 1)\n\n  // content-length\n  res.setHeader('Content-Length', len);\n\n  // HEAD support\n  if ('HEAD' == req.method) return res.end();\n\n  this.stream(path, opts)\n};\n\n/**\n * Transfer file for `path`.\n *\n * @param {String} path\n * @api private\n */\nSendStream.prototype.sendFile = function sendFile(path) {\n  var i = 0\n  var self = this\n\n  debug('stat \"%s\"', path);\n  fs.stat(path, function onstat(err, stat) {\n    if (err && err.code === 'ENOENT'\n      && !extname(path)\n      && path[path.length - 1] !== sep) {\n      // not found, check extensions\n      return next(err)\n    }\n    if (err) return self.onStatError(err)\n    if (stat.isDirectory()) return self.redirect(self.path)\n    self.emit('file', path, stat)\n    self.send(path, stat)\n  })\n\n  function next(err) {\n    if (self._extensions.length <= i) {\n      return err\n        ? self.onStatError(err)\n        : self.error(404)\n    }\n\n    var p = path + '.' + self._extensions[i++]\n\n    debug('stat \"%s\"', p)\n    fs.stat(p, function (err, stat) {\n      if (err) return next(err)\n      if (stat.isDirectory()) return next()\n      self.emit('file', p, stat)\n      self.send(p, stat)\n    })\n  }\n}\n\n/**\n * Transfer index for `path`.\n *\n * @param {String} path\n * @api private\n */\nSendStream.prototype.sendIndex = function sendIndex(path){\n  var i = -1;\n  var self = this;\n\n  function next(err){\n    if (++i >= self._index.length) {\n      if (err) return self.onStatError(err);\n      return self.error(404);\n    }\n\n    var p = join(path, self._index[i]);\n\n    debug('stat \"%s\"', p);\n    fs.stat(p, function(err, stat){\n      if (err) return next(err);\n      if (stat.isDirectory()) return next();\n      self.emit('file', p, stat);\n      self.send(p, stat);\n    });\n  }\n\n  next();\n};\n\n/**\n * Stream `path` to the response.\n *\n * @param {String} path\n * @param {Object} options\n * @api private\n */\n\nSendStream.prototype.stream = function(path, options){\n  // TODO: this is all lame, refactor meeee\n  var finished = false;\n  var self = this;\n  var res = this.res;\n  var req = this.req;\n\n  // pipe\n  var stream = fs.createReadStream(path, options);\n  this.emit('stream', stream);\n  stream.pipe(res);\n\n  // response finished, done with the fd\n  onFinished(res, function onfinished(){\n    finished = true;\n    destroy(stream);\n  });\n\n  // error handling code-smell\n  stream.on('error', function onerror(err){\n    // request already finished\n    if (finished) return;\n\n    // clean up stream\n    finished = true;\n    destroy(stream);\n\n    // error\n    self.onStatError(err);\n  });\n\n  // end\n  stream.on('end', function onend(){\n    self.emit('end');\n  });\n};\n\n/**\n * Set content-type based on `path`\n * if it hasn't been explicitly set.\n *\n * @param {String} path\n * @api private\n */\n\nSendStream.prototype.type = function(path){\n  var res = this.res;\n  if (res.getHeader('Content-Type')) return;\n  var type = mime.lookup(path);\n  var charset = mime.charsets.lookup(type);\n  debug('content-type %s', type);\n  res.setHeader('Content-Type', type + (charset ? '; charset=' + charset : ''));\n};\n\n/**\n * Set response header fields, most\n * fields may be pre-defined.\n *\n * @param {String} path\n * @param {Object} stat\n * @api private\n */\n\nSendStream.prototype.setHeader = function setHeader(path, stat){\n  var res = this.res;\n\n  this.emit('headers', res, path, stat);\n\n  if (!res.getHeader('Accept-Ranges')) res.setHeader('Accept-Ranges', 'bytes');\n  if (!res.getHeader('Cache-Control')) res.setHeader('Cache-Control', 'public, max-age=' + Math.floor(this._maxage / 1000));\n\n  if (this._lastModified && !res.getHeader('Last-Modified')) {\n    var modified = stat.mtime.toUTCString()\n    debug('modified %s', modified)\n    res.setHeader('Last-Modified', modified)\n  }\n\n  if (this._etag && !res.getHeader('ETag')) {\n    var val = etag(stat)\n    debug('etag %s', val)\n    res.setHeader('ETag', val)\n  }\n};\n\n/**\n * Determine if path parts contain a dotfile.\n *\n * @api private\n */\n\nfunction containsDotFile(parts) {\n  for (var i = 0; i < parts.length; i++) {\n    if (parts[i][0] === '.') {\n      return true\n    }\n  }\n\n  return false\n}\n\n/**\n * decodeURIComponent.\n *\n * Allows V8 to only deoptimize this fn instead of all\n * of send().\n *\n * @param {String} path\n * @api private\n */\n\nfunction decode(path) {\n  try {\n    return decodeURIComponent(path)\n  } catch (err) {\n    return -1\n  }\n}\n\n/**\n * Normalize the index option into an array.\n *\n * @param {boolean|string|array} val\n * @param {string} name\n * @private\n */\n\nfunction normalizeList(val, name) {\n  var list = [].concat(val || [])\n\n  for (var i = 0; i < list.length; i++) {\n    if (typeof list[i] !== 'string') {\n      throw new TypeError(name + ' must be array of strings or false')\n    }\n  }\n\n  return list\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/webapp/webapp_server.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.webapp = exports, {\n  WebApp: WebApp,\n  WebAppInternals: WebAppInternals,\n  main: main\n});\n\n})();\n","servePath":"/packages/webapp.js","sourceMap":{"version":3,"sources":["packages/webapp/webapp_server.js","packages/webapp/socket_file.js"],"names":["module1","module","export","WebApp","WebAppInternals","assert","watch","require","v","readFile","createServer","pathJoin","pathDirname","join","dirname","parseUrl","parse","createHash","connect","parseRequest","lookupUserAgent","lookup","send","removeExistingSocketFile","registerSocketFileCleanup","SHORT_SOCKET_TIMEOUT","LONG_SOCKET_TIMEOUT","NpmModules","version","Npm","defaultArch","clientPrograms","archPath","bundledJsCssUrlRewriteHook","url","bundledPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","sha1","contents","hash","update","digest","readUtf8FileSync","filename","Meteor","wrapAsync","camelCase","name","parts","split","toLowerCase","i","length","charAt","toUpperCase","substr","identifyBrowser","userAgentString","userAgent","family","major","minor","patch","categorizeRequest","req","_","extend","browser","headers","pick","htmlAttributeHooks","getHtmlAttributes","request","combinedAttributes","each","hook","attributes","Error","addHtmlAttributeHook","push","appUrl","RoutePolicy","classify","startup","calculateClientHash","WebAppHashing","clientHash","archName","manifest","calculateClientHashRefreshable","calculateClientHashNonRefreshable","calculateClientHashCordova","_timeoutAdjustmentRequestCallback","res","setTimeout","finishListeners","listeners","removeAllListeners","on","l","boilerplateByArch","boilerplateDataCallbacks","Object","create","registerBoilerplateDataCallback","key","callback","previousCallback","strictEqual","memoizedBoilerplate","getBoilerplate","arch","getBoilerplateAsync","await","boilerplate","data","assign","baseData","htmlAttributes","madeChanges","promise","Promise","resolve","keys","forEach","then","result","useMemoized","dynamicHead","dynamicBody","toHTML","memHash","JSON","stringify","inlineScriptsAllowed","generateBoilerplateInstance","additionalOptions","runtimeConfig","clone","runtimeConfigOverrides","Boilerplate","pathMapper","itemPath","baseDataExtension","additionalStaticJs","map","pathname","meteorRuntimeConfig","encodeURIComponent","rootUrlPathPrefix","inline","staticFiles","staticFilesMiddleware","next","method","decodeURIComponent","e","serveStaticJs","s","writeHead","write","end","has","info","maxAge","cacheable","sourceMapUrl","setHeader","type","content","absolutePath","maxage","dotfiles","lastModified","err","Log","error","pipe","getUrlPrefixForArch","replace","parsePort","parsedPort","parseInt","port","Number","isNaN","runWebAppServer","shuttingDown","syncQueue","_SynchronousQueue","getItemPathname","itemUrl","reloadClientPrograms","runTask","generateClientProgram","clientPath","clientJsonPath","__meteor_bootstrap__","serverDir","clientDir","clientJson","format","urlPrefix","item","where","path","sourceMap","program","process","env","AUTOUPDATE_VERSION","cordovaCompatibilityVersions","PUBLIC_SETTINGS","clientPaths","configJson","stack","exit","generateBoilerplate","defaultOptionsForArch","DDP_DEFAULT_CONNECTION_URL","MOBILE_DDP_URL","absoluteUrl","ROOT_URL","MOBILE_ROOT_URL","cssFiles","css","allCss","cssFile","refreshableAssets","app","rawConnectHandlers","use","compress","isValidUrl","response","pathPrefix","substring","query","packageAndAppHandlers","suppressConnectErrors","status","archKey","archKeyCleaned","test","statusCode","httpServer","onListeningCallbacks","socket","destroyed","message","destroy","connectHandlers","connectApp","onListening","f","exports","main","startHttpServer","listen","listenOptions","bindEnvironment","METEOR_PRINT_ON_LISTEN","console","log","callbacks","localPort","PORT","unixSocketPath","UNIX_SOCKET_PATH","host","BIND_IP","setInlineScriptsAllowed","value","setBundledJsCssUrlRewriteHook","hookFn","setBundledJsCssPrefix","prefix","self","addStaticJs","statSync","unlinkSync","existsSync","socketPath","isSocket","code","eventEmitter","signal"],"mappings":"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","file":"/packages/webapp.js","sourcesContent":["import assert from \"assert\";\nimport { readFile } from \"fs\";\nimport { createServer } from \"http\";\nimport {\n  join as pathJoin,\n  dirname as pathDirname,\n} from \"path\";\nimport { parse as parseUrl } from \"url\";\nimport { createHash } from \"crypto\";\nimport connect from \"connect\";\nimport parseRequest from \"parseurl\";\nimport { lookup as lookupUserAgent } from \"useragent\";\nimport send from \"send\";\nimport {\n  removeExistingSocketFile,\n  registerSocketFileCleanup,\n} from './socket_file.js';\n\nvar SHORT_SOCKET_TIMEOUT = 5*1000;\nvar LONG_SOCKET_TIMEOUT = 120*1000;\n\nexport const WebApp = {};\nexport const WebAppInternals = {};\n\nWebAppInternals.NpmModules = {\n  connect: {\n    version: Npm.require('connect/package.json').version,\n    module: connect\n  }\n};\n\nWebApp.defaultArch = 'web.browser';\n\n// XXX maps archs to manifests\nWebApp.clientPrograms = {};\n\n// XXX maps archs to program path on filesystem\nvar archPath = {};\n\nvar bundledJsCssUrlRewriteHook = function (url) {\n  var bundledPrefix =\n     __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '';\n  return bundledPrefix + url;\n};\n\nvar sha1 = function (contents) {\n  var hash = createHash('sha1');\n  hash.update(contents);\n  return hash.digest('hex');\n};\n\nvar readUtf8FileSync = function (filename) {\n  return Meteor.wrapAsync(readFile)(filename, 'utf8');\n};\n\n// #BrowserIdentification\n//\n// We have multiple places that want to identify the browser: the\n// unsupported browser page, the appcache package, and, eventually\n// delivering browser polyfills only as needed.\n//\n// To avoid detecting the browser in multiple places ad-hoc, we create a\n// Meteor \"browser\" object. It uses but does not expose the npm\n// useragent module (we could choose a different mechanism to identify\n// the browser in the future if we wanted to).  The browser object\n// contains\n//\n// * `name`: the name of the browser in camel case\n// * `major`, `minor`, `patch`: integers describing the browser version\n//\n// Also here is an early version of a Meteor `request` object, intended\n// to be a high-level description of the request without exposing\n// details of connect's low-level `req`.  Currently it contains:\n//\n// * `browser`: browser identification object described above\n// * `url`: parsed url, including parsed query params\n//\n// As a temporary hack there is a `categorizeRequest` function on WebApp which\n// converts a connect `req` to a Meteor `request`. This can go away once smart\n// packages such as appcache are being passed a `request` object directly when\n// they serve content.\n//\n// This allows `request` to be used uniformly: it is passed to the html\n// attributes hook, and the appcache package can use it when deciding\n// whether to generate a 404 for the manifest.\n//\n// Real routing / server side rendering will probably refactor this\n// heavily.\n\n\n// e.g. \"Mobile Safari\" => \"mobileSafari\"\nvar camelCase = function (name) {\n  var parts = name.split(' ');\n  parts[0] = parts[0].toLowerCase();\n  for (var i = 1;  i < parts.length;  ++i) {\n    parts[i] = parts[i].charAt(0).toUpperCase() + parts[i].substr(1);\n  }\n  return parts.join('');\n};\n\nvar identifyBrowser = function (userAgentString) {\n  var userAgent = lookupUserAgent(userAgentString);\n  return {\n    name: camelCase(userAgent.family),\n    major: +userAgent.major,\n    minor: +userAgent.minor,\n    patch: +userAgent.patch\n  };\n};\n\n// XXX Refactor as part of implementing real routing.\nWebAppInternals.identifyBrowser = identifyBrowser;\n\nWebApp.categorizeRequest = function (req) {\n  return _.extend({\n    browser: identifyBrowser(req.headers['user-agent']),\n    url: parseUrl(req.url, true)\n  }, _.pick(req, 'dynamicHead', 'dynamicBody'));\n};\n\n// HTML attribute hooks: functions to be called to determine any attributes to\n// be added to the '<html>' tag. Each function is passed a 'request' object (see\n// #BrowserIdentification) and should return null or object.\nvar htmlAttributeHooks = [];\nvar getHtmlAttributes = function (request) {\n  var combinedAttributes  = {};\n  _.each(htmlAttributeHooks || [], function (hook) {\n    var attributes = hook(request);\n    if (attributes === null)\n      return;\n    if (typeof attributes !== 'object')\n      throw Error(\"HTML attribute hook must return null or object\");\n    _.extend(combinedAttributes, attributes);\n  });\n  return combinedAttributes;\n};\nWebApp.addHtmlAttributeHook = function (hook) {\n  htmlAttributeHooks.push(hook);\n};\n\n// Serve app HTML for this URL?\nvar appUrl = function (url) {\n  if (url === '/favicon.ico' || url === '/robots.txt')\n    return false;\n\n  // NOTE: app.manifest is not a web standard like favicon.ico and\n  // robots.txt. It is a file name we have chosen to use for HTML5\n  // appcache URLs. It is included here to prevent using an appcache\n  // then removing it from poisoning an app permanently. Eventually,\n  // once we have server side routing, this won't be needed as\n  // unknown URLs with return a 404 automatically.\n  if (url === '/app.manifest')\n    return false;\n\n  // Avoid serving app HTML for declared routes such as /sockjs/.\n  if (RoutePolicy.classify(url))\n    return false;\n\n  // we currently return app HTML on all URLs by default\n  return true;\n};\n\n\n// We need to calculate the client hash after all packages have loaded\n// to give them a chance to populate __meteor_runtime_config__.\n//\n// Calculating the hash during startup means that packages can only\n// populate __meteor_runtime_config__ during load, not during startup.\n//\n// Calculating instead it at the beginning of main after all startup\n// hooks had run would allow packages to also populate\n// __meteor_runtime_config__ during startup, but that's too late for\n// autoupdate because it needs to have the client hash at startup to\n// insert the auto update version itself into\n// __meteor_runtime_config__ to get it to the client.\n//\n// An alternative would be to give autoupdate a \"post-start,\n// pre-listen\" hook to allow it to insert the auto update version at\n// the right moment.\n\nMeteor.startup(function () {\n  var calculateClientHash = WebAppHashing.calculateClientHash;\n  WebApp.clientHash = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest);\n  };\n\n  WebApp.calculateClientHashRefreshable = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest,\n      function (name) {\n        return name === \"css\";\n      });\n  };\n  WebApp.calculateClientHashNonRefreshable = function (archName) {\n    archName = archName || WebApp.defaultArch;\n    return calculateClientHash(WebApp.clientPrograms[archName].manifest,\n      function (name) {\n        return name !== \"css\";\n      });\n  };\n  WebApp.calculateClientHashCordova = function () {\n    var archName = 'web.cordova';\n    if (! WebApp.clientPrograms[archName])\n      return 'none';\n\n    return calculateClientHash(\n      WebApp.clientPrograms[archName].manifest, null, _.pick(\n        __meteor_runtime_config__, 'PUBLIC_SETTINGS'));\n  };\n});\n\n\n\n// When we have a request pending, we want the socket timeout to be long, to\n// give ourselves a while to serve it, and to allow sockjs long polls to\n// complete.  On the other hand, we want to close idle sockets relatively\n// quickly, so that we can shut down relatively promptly but cleanly, without\n// cutting off anyone's response.\nWebApp._timeoutAdjustmentRequestCallback = function (req, res) {\n  // this is really just req.socket.setTimeout(LONG_SOCKET_TIMEOUT);\n  req.setTimeout(LONG_SOCKET_TIMEOUT);\n  // Insert our new finish listener to run BEFORE the existing one which removes\n  // the response from the socket.\n  var finishListeners = res.listeners('finish');\n  // XXX Apparently in Node 0.12 this event was called 'prefinish'.\n  // https://github.com/joyent/node/commit/7c9b6070\n  // But it has switched back to 'finish' in Node v4:\n  // https://github.com/nodejs/node/pull/1411\n  res.removeAllListeners('finish');\n  res.on('finish', function () {\n    res.setTimeout(SHORT_SOCKET_TIMEOUT);\n  });\n  _.each(finishListeners, function (l) { res.on('finish', l); });\n};\n\n\n// Will be updated by main before we listen.\n// Map from client arch to boilerplate object.\n// Boilerplate object has:\n//   - func: XXX\n//   - baseData: XXX\nvar boilerplateByArch = {};\n\n// Register a callback function that can selectively modify boilerplate\n// data given arguments (request, data, arch). The key should be a unique\n// identifier, to prevent accumulating duplicate callbacks from the same\n// call site over time. Callbacks will be called in the order they were\n// registered. A callback should return false if it did not make any\n// changes affecting the boilerplate. Passing null deletes the callback.\n// Any previous callback registered for this key will be returned.\nconst boilerplateDataCallbacks = Object.create(null);\nWebAppInternals.registerBoilerplateDataCallback = function (key, callback) {\n  const previousCallback = boilerplateDataCallbacks[key];\n\n  if (typeof callback === \"function\") {\n    boilerplateDataCallbacks[key] = callback;\n  } else {\n    assert.strictEqual(callback, null);\n    delete boilerplateDataCallbacks[key];\n  }\n\n  // Return the previous callback in case the new callback needs to call\n  // it; for example, when the new callback is a wrapper for the old.\n  return previousCallback || null;\n};\n\n// Given a request (as returned from `categorizeRequest`), return the\n// boilerplate HTML to serve for that request.\n//\n// If a previous connect middleware has rendered content for the head or body,\n// returns the boilerplate with that content patched in otherwise\n// memoizes on HTML attributes (used by, eg, appcache) and whether inline\n// scripts are currently allowed.\n// XXX so far this function is always called with arch === 'web.browser'\nvar memoizedBoilerplate = {};\n\nfunction getBoilerplate(request, arch) {\n  return getBoilerplateAsync(request, arch).await();\n}\n\nfunction getBoilerplateAsync(request, arch) {\n  const boilerplate = boilerplateByArch[arch];\n  const data = Object.assign({}, boilerplate.baseData, {\n    htmlAttributes: getHtmlAttributes(request),\n  }, _.pick(request, \"dynamicHead\", \"dynamicBody\"));\n\n  let madeChanges = false;\n  let promise = Promise.resolve();\n\n  Object.keys(boilerplateDataCallbacks).forEach(key => {\n    promise = promise.then(() => {\n      const callback = boilerplateDataCallbacks[key];\n      return callback(request, data, arch);\n    }).then(result => {\n      // Callbacks should return false if they did not make any changes.\n      if (result !== false) {\n        madeChanges = true;\n      }\n    });\n  });\n\n  return promise.then(() => {\n    const useMemoized = ! (\n      data.dynamicHead ||\n      data.dynamicBody ||\n      madeChanges\n    );\n\n    if (! useMemoized) {\n      return boilerplate.toHTML(data);\n    }\n\n    // The only thing that changes from request to request (unless extra\n    // content is added to the head or body, or boilerplateDataCallbacks\n    // modified the data) are the HTML attributes (used by, eg, appcache)\n    // and whether inline scripts are allowed, so memoize based on that.\n    var memHash = JSON.stringify({\n      inlineScriptsAllowed,\n      htmlAttributes: data.htmlAttributes,\n      arch,\n    });\n\n    if (! memoizedBoilerplate[memHash]) {\n      memoizedBoilerplate[memHash] =\n        boilerplateByArch[arch].toHTML(data);\n    }\n\n    return memoizedBoilerplate[memHash];\n  });\n}\n\nWebAppInternals.generateBoilerplateInstance = function (arch,\n                                                        manifest,\n                                                        additionalOptions) {\n  additionalOptions = additionalOptions || {};\n\n  var runtimeConfig = _.extend(\n    _.clone(__meteor_runtime_config__),\n    additionalOptions.runtimeConfigOverrides || {}\n  );\n  return new Boilerplate(arch, manifest,\n    _.extend({\n      pathMapper: function (itemPath) {\n        return pathJoin(archPath[arch], itemPath); },\n      baseDataExtension: {\n        additionalStaticJs: _.map(\n          additionalStaticJs || [],\n          function (contents, pathname) {\n            return {\n              pathname: pathname,\n              contents: contents\n            };\n          }\n        ),\n        // Convert to a JSON string, then get rid of most weird characters, then\n        // wrap in double quotes. (The outermost JSON.stringify really ought to\n        // just be \"wrap in double quotes\" but we use it to be safe.) This might\n        // end up inside a <script> tag so we need to be careful to not include\n        // \"</script>\", but normal {{spacebars}} escaping escapes too much! See\n        // https://github.com/meteor/meteor/issues/3730\n        meteorRuntimeConfig: JSON.stringify(\n          encodeURIComponent(JSON.stringify(runtimeConfig))),\n        rootUrlPathPrefix: __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || '',\n        bundledJsCssUrlRewriteHook: bundledJsCssUrlRewriteHook,\n        inlineScriptsAllowed: WebAppInternals.inlineScriptsAllowed(),\n        inline: additionalOptions.inline\n      }\n    }, additionalOptions)\n  );\n};\n\n// A mapping from url path to \"info\". Where \"info\" has the following fields:\n// - type: the type of file to be served\n// - cacheable: optionally, whether the file should be cached or not\n// - sourceMapUrl: optionally, the url of the source map\n//\n// Info also contains one of the following:\n// - content: the stringified content that should be served at this path\n// - absolutePath: the absolute path on disk to the file\n\nvar staticFiles;\n\n// Serve static files from the manifest or added with\n// `addStaticJs`. Exported for tests.\nWebAppInternals.staticFilesMiddleware = function (staticFiles, req, res, next) {\n  if ('GET' != req.method && 'HEAD' != req.method && 'OPTIONS' != req.method) {\n    next();\n    return;\n  }\n  var pathname = parseRequest(req).pathname;\n  try {\n    pathname = decodeURIComponent(pathname);\n  } catch (e) {\n    next();\n    return;\n  }\n\n  var serveStaticJs = function (s) {\n    res.writeHead(200, {\n      'Content-type': 'application/javascript; charset=UTF-8'\n    });\n    res.write(s);\n    res.end();\n  };\n\n  if (pathname === \"/meteor_runtime_config.js\" &&\n      ! WebAppInternals.inlineScriptsAllowed()) {\n    serveStaticJs(\"__meteor_runtime_config__ = \" +\n                  JSON.stringify(__meteor_runtime_config__) + \";\");\n    return;\n  } else if (_.has(additionalStaticJs, pathname) &&\n              ! WebAppInternals.inlineScriptsAllowed()) {\n    serveStaticJs(additionalStaticJs[pathname]);\n    return;\n  }\n\n  if (!_.has(staticFiles, pathname)) {\n    next();\n    return;\n  }\n\n  // We don't need to call pause because, unlike 'static', once we call into\n  // 'send' and yield to the event loop, we never call another handler with\n  // 'next'.\n\n  var info = staticFiles[pathname];\n\n  // Cacheable files are files that should never change. Typically\n  // named by their hash (eg meteor bundled js and css files).\n  // We cache them ~forever (1yr).\n  var maxAge = info.cacheable\n        ? 1000 * 60 * 60 * 24 * 365\n        : 0;\n\n  // Set the X-SourceMap header, which current Chrome, FireFox, and Safari\n  // understand.  (The SourceMap header is slightly more spec-correct but FF\n  // doesn't understand it.)\n  //\n  // You may also need to enable source maps in Chrome: open dev tools, click\n  // the gear in the bottom right corner, and select \"enable source maps\".\n  if (info.sourceMapUrl) {\n    res.setHeader('X-SourceMap',\n                  __meteor_runtime_config__.ROOT_URL_PATH_PREFIX +\n                  info.sourceMapUrl);\n  }\n\n  if (info.type === \"js\" ||\n      info.type === \"dynamic js\") {\n    res.setHeader(\"Content-Type\", \"application/javascript; charset=UTF-8\");\n  } else if (info.type === \"css\") {\n    res.setHeader(\"Content-Type\", \"text/css; charset=UTF-8\");\n  } else if (info.type === \"json\") {\n    res.setHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n  }\n\n  if (info.hash) {\n    res.setHeader('ETag', '\"' + info.hash + '\"');\n  }\n\n  if (info.content) {\n    res.write(info.content);\n    res.end();\n  } else {\n    send(req, info.absolutePath, {\n        maxage: maxAge,\n        dotfiles: 'allow', // if we specified a dotfile in the manifest, serve it\n        lastModified: false // don't set last-modified based on the file date\n      }).on('error', function (err) {\n        Log.error(\"Error serving static file \" + err);\n        res.writeHead(500);\n        res.end();\n      })\n      .on('directory', function () {\n        Log.error(\"Unexpected directory \" + info.absolutePath);\n        res.writeHead(500);\n        res.end();\n      })\n      .pipe(res);\n  }\n};\n\nvar getUrlPrefixForArch = function (arch) {\n  // XXX we rely on the fact that arch names don't contain slashes\n  // in that case we would need to uri escape it\n\n  // We add '__' to the beginning of non-standard archs to \"scope\" the url\n  // to Meteor internals.\n  return arch === WebApp.defaultArch ?\n    '' : '/' + '__' + arch.replace(/^web\\./, '');\n};\n\n// Parse the passed in port value. Return the port as-is if it's a String\n// (e.g. a Windows Server style named pipe), otherwise return the port as an\n// integer.\n//\n// DEPRECATED: Direct use of this function is not recommended; it is no\n// longer used internally, and will be removed in a future release.\nWebAppInternals.parsePort = port => {\n  let parsedPort = parseInt(port);\n  if (Number.isNaN(parsedPort)) {\n    parsedPort = port;\n  }\n  return parsedPort;\n}\n\nfunction runWebAppServer() {\n  var shuttingDown = false;\n  var syncQueue = new Meteor._SynchronousQueue();\n\n  var getItemPathname = function (itemUrl) {\n    return decodeURIComponent(parseUrl(itemUrl).pathname);\n  };\n\n  WebAppInternals.reloadClientPrograms = function () {\n    syncQueue.runTask(function() {\n      staticFiles = {};\n      var generateClientProgram = function (clientPath, arch) {\n        // read the control for the client we'll be serving up\n        var clientJsonPath = pathJoin(__meteor_bootstrap__.serverDir,\n                                   clientPath);\n        var clientDir = pathDirname(clientJsonPath);\n        var clientJson = JSON.parse(readUtf8FileSync(clientJsonPath));\n        if (clientJson.format !== \"web-program-pre1\")\n          throw new Error(\"Unsupported format for client assets: \" +\n                          JSON.stringify(clientJson.format));\n\n        if (! clientJsonPath || ! clientDir || ! clientJson)\n          throw new Error(\"Client config file not parsed.\");\n\n        var urlPrefix = getUrlPrefixForArch(arch);\n\n        var manifest = clientJson.manifest;\n        _.each(manifest, function (item) {\n          if (item.url && item.where === \"client\") {\n            staticFiles[urlPrefix + getItemPathname(item.url)] = {\n              absolutePath: pathJoin(clientDir, item.path),\n              cacheable: item.cacheable,\n              hash: item.hash,\n              // Link from source to its map\n              sourceMapUrl: item.sourceMapUrl,\n              type: item.type\n            };\n\n            if (item.sourceMap) {\n              // Serve the source map too, under the specified URL. We assume all\n              // source maps are cacheable.\n              staticFiles[urlPrefix + getItemPathname(item.sourceMapUrl)] = {\n                absolutePath: pathJoin(clientDir, item.sourceMap),\n                cacheable: true\n              };\n            }\n          }\n        });\n\n        var program = {\n          format: \"web-program-pre1\",\n          manifest: manifest,\n          version: process.env.AUTOUPDATE_VERSION ||\n            WebAppHashing.calculateClientHash(\n              manifest,\n              null,\n              _.pick(__meteor_runtime_config__, \"PUBLIC_SETTINGS\")\n            ),\n          cordovaCompatibilityVersions: clientJson.cordovaCompatibilityVersions,\n          PUBLIC_SETTINGS: __meteor_runtime_config__.PUBLIC_SETTINGS\n        };\n\n        WebApp.clientPrograms[arch] = program;\n\n        // Serve the program as a string at /foo/<arch>/manifest.json\n        // XXX change manifest.json -> program.json\n        staticFiles[urlPrefix + getItemPathname('/manifest.json')] = {\n          content: JSON.stringify(program),\n          cacheable: false,\n          hash: program.version,\n          type: \"json\"\n        };\n      };\n\n      try {\n        var clientPaths = __meteor_bootstrap__.configJson.clientPaths;\n        _.each(clientPaths, function (clientPath, arch) {\n          archPath[arch] = pathDirname(clientPath);\n          generateClientProgram(clientPath, arch);\n        });\n\n        // Exported for tests.\n        WebAppInternals.staticFiles = staticFiles;\n      } catch (e) {\n        Log.error(\"Error reloading the client program: \" + e.stack);\n        process.exit(1);\n      }\n    });\n  };\n\n  WebAppInternals.generateBoilerplate = function () {\n    // This boilerplate will be served to the mobile devices when used with\n    // Meteor/Cordova for the Hot-Code Push and since the file will be served by\n    // the device's server, it is important to set the DDP url to the actual\n    // Meteor server accepting DDP connections and not the device's file server.\n    var defaultOptionsForArch = {\n      'web.cordova': {\n        runtimeConfigOverrides: {\n          // XXX We use absoluteUrl() here so that we serve https://\n          // URLs to cordova clients if force-ssl is in use. If we were\n          // to use __meteor_runtime_config__.ROOT_URL instead of\n          // absoluteUrl(), then Cordova clients would immediately get a\n          // HCP setting their DDP_DEFAULT_CONNECTION_URL to\n          // http://example.meteor.com. This breaks the app, because\n          // force-ssl doesn't serve CORS headers on 302\n          // redirects. (Plus it's undesirable to have clients\n          // connecting to http://example.meteor.com when force-ssl is\n          // in use.)\n          DDP_DEFAULT_CONNECTION_URL: process.env.MOBILE_DDP_URL ||\n            Meteor.absoluteUrl(),\n          ROOT_URL: process.env.MOBILE_ROOT_URL ||\n            Meteor.absoluteUrl()\n        }\n      }\n    };\n\n    syncQueue.runTask(function() {\n      _.each(WebApp.clientPrograms, function (program, archName) {\n        boilerplateByArch[archName] =\n          WebAppInternals.generateBoilerplateInstance(\n            archName, program.manifest,\n            defaultOptionsForArch[archName]);\n      });\n\n      // Clear the memoized boilerplate cache.\n      memoizedBoilerplate = {};\n\n      // Configure CSS injection for the default arch\n      // XXX implement the CSS injection for all archs?\n      var cssFiles = boilerplateByArch[WebApp.defaultArch].baseData.css;\n      // Rewrite all CSS files (which are written directly to <style> tags)\n      // by autoupdate_client to use the CDN prefix/etc\n      var allCss = _.map(cssFiles, function(cssFile) {\n        return { url: bundledJsCssUrlRewriteHook(cssFile.url) };\n      });\n      WebAppInternals.refreshableAssets = { allCss };\n    });\n  };\n\n  WebAppInternals.reloadClientPrograms();\n\n  // webserver\n  var app = connect();\n\n  // Packages and apps can add handlers that run before any other Meteor\n  // handlers via WebApp.rawConnectHandlers.\n  var rawConnectHandlers = connect();\n  app.use(rawConnectHandlers);\n\n  // Auto-compress any json, javascript, or text.\n  app.use(connect.compress());\n\n  // We're not a proxy; reject (without crashing) attempts to treat us like\n  // one. (See #1212.)\n  app.use(function(req, res, next) {\n    if (RoutePolicy.isValidUrl(req.url)) {\n      next();\n      return;\n    }\n    res.writeHead(400);\n    res.write(\"Not a proxy\");\n    res.end();\n  });\n\n  // Strip off the path prefix, if it exists.\n  app.use(function (request, response, next) {\n    var pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX;\n    var url = Npm.require('url').parse(request.url);\n    var pathname = url.pathname;\n    // check if the path in the url starts with the path prefix (and the part\n    // after the path prefix must start with a / if it exists.)\n    if (pathPrefix && pathname.substring(0, pathPrefix.length) === pathPrefix &&\n       (pathname.length == pathPrefix.length\n        || pathname.substring(pathPrefix.length, pathPrefix.length + 1) === \"/\")) {\n      request.url = request.url.substring(pathPrefix.length);\n      next();\n    } else if (pathname === \"/favicon.ico\" || pathname === \"/robots.txt\") {\n      next();\n    } else if (pathPrefix) {\n      response.writeHead(404);\n      response.write(\"Unknown path\");\n      response.end();\n    } else {\n      next();\n    }\n  });\n\n  // Parse the query string into res.query. Used by oauth_server, but it's\n  // generally pretty handy..\n  app.use(connect.query());\n\n  // Serve static files from the manifest.\n  // This is inspired by the 'static' middleware.\n  app.use(function (req, res, next) {\n    Promise.resolve().then(() => {\n      WebAppInternals.staticFilesMiddleware(staticFiles, req, res, next);\n    });\n  });\n\n  // Packages and apps can add handlers to this via WebApp.connectHandlers.\n  // They are inserted before our default handler.\n  var packageAndAppHandlers = connect();\n  app.use(packageAndAppHandlers);\n\n  var suppressConnectErrors = false;\n  // connect knows it is an error handler because it has 4 arguments instead of\n  // 3. go figure.  (It is not smart enough to find such a thing if it's hidden\n  // inside packageAndAppHandlers.)\n  app.use(function (err, req, res, next) {\n    if (!err || !suppressConnectErrors || !req.headers['x-suppress-error']) {\n      next(err);\n      return;\n    }\n    res.writeHead(err.status, { 'Content-Type': 'text/plain' });\n    res.end(\"An error message\");\n  });\n\n  app.use(function (req, res, next) {\n    Promise.resolve().then(() => {\n      if (! appUrl(req.url)) {\n        return next();\n      }\n\n      var headers = {\n        'Content-Type': 'text/html; charset=utf-8'\n      };\n\n      if (shuttingDown) {\n        headers['Connection'] = 'Close';\n      }\n\n      var request = WebApp.categorizeRequest(req);\n\n      if (request.url.query && request.url.query['meteor_css_resource']) {\n        // In this case, we're requesting a CSS resource in the meteor-specific\n        // way, but we don't have it.  Serve a static css file that indicates that\n        // we didn't have it, so we can detect that and refresh.  Make sure\n        // that any proxies or CDNs don't cache this error!  (Normally proxies\n        // or CDNs are smart enough not to cache error pages, but in order to\n        // make this hack work, we need to return the CSS file as a 200, which\n        // would otherwise be cached.)\n        headers['Content-Type'] = 'text/css; charset=utf-8';\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(200, headers);\n        res.write(\".meteor-css-not-found-error { width: 0px;}\");\n        res.end();\n        return;\n      }\n\n      if (request.url.query && request.url.query['meteor_js_resource']) {\n        // Similarly, we're requesting a JS resource that we don't have.\n        // Serve an uncached 404. (We can't use the same hack we use for CSS,\n        // because actually acting on that hack requires us to have the JS\n        // already!)\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(404, headers);\n        res.end(\"404 Not Found\");\n        return;\n      }\n\n      if (request.url.query && request.url.query['meteor_dont_serve_index']) {\n        // When downloading files during a Cordova hot code push, we need\n        // to detect if a file is not available instead of inadvertently\n        // downloading the default index page.\n        // So similar to the situation above, we serve an uncached 404.\n        headers['Cache-Control'] = 'no-cache';\n        res.writeHead(404, headers);\n        res.end(\"404 Not Found\");\n        return;\n      }\n\n      // /packages/asdfsad ... /__cordova/dafsdf.js\n      var pathname = parseRequest(req).pathname;\n      var archKey = pathname.split('/')[1];\n      var archKeyCleaned = 'web.' + archKey.replace(/^__/, '');\n\n      if (!/^__/.test(archKey) || !_.has(archPath, archKeyCleaned)) {\n        archKey = WebApp.defaultArch;\n      } else {\n        archKey = archKeyCleaned;\n      }\n\n      return getBoilerplateAsync(\n        request,\n        archKey\n      ).then(boilerplate => {\n        var statusCode = res.statusCode ? res.statusCode : 200;\n        res.writeHead(statusCode, headers);\n        res.write(boilerplate);\n        res.end();\n      }, error => {\n        Log.error(\"Error running template: \" + error.stack);\n        res.writeHead(500, headers);\n        res.end();\n      });\n    });\n  });\n\n  // Return 404 by default, if no other handlers serve this URL.\n  app.use(function (req, res) {\n    res.writeHead(404);\n    res.end();\n  });\n\n\n  var httpServer = createServer(app);\n  var onListeningCallbacks = [];\n\n  // After 5 seconds w/o data on a socket, kill it.  On the other hand, if\n  // there's an outstanding request, give it a higher timeout instead (to avoid\n  // killing long-polling requests)\n  httpServer.setTimeout(SHORT_SOCKET_TIMEOUT);\n\n  // Do this here, and then also in livedata/stream_server.js, because\n  // stream_server.js kills all the current request handlers when installing its\n  // own.\n  httpServer.on('request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // If the client gave us a bad request, tell it instead of just closing the\n  // socket. This lets load balancers in front of us differentiate between \"a\n  // server is randomly closing sockets for no reason\" and \"client sent a bad\n  // request\".\n  //\n  // This will only work on Node 6; Node 4 destroys the socket before calling\n  // this event. See https://github.com/nodejs/node/pull/4557/ for details.\n  httpServer.on('clientError', (err, socket) => {\n    // Pre-Node-6, do nothing.\n    if (socket.destroyed) {\n      return;\n    }\n\n    if (err.message === 'Parse Error') {\n      socket.end('HTTP/1.1 400 Bad Request\\r\\n\\r\\n');\n    } else {\n      // For other errors, use the default behavior as if we had no clientError\n      // handler.\n      socket.destroy(err);\n    }\n  });\n\n  // start up app\n  _.extend(WebApp, {\n    connectHandlers: packageAndAppHandlers,\n    rawConnectHandlers: rawConnectHandlers,\n    httpServer: httpServer,\n    connectApp: app,\n    // For testing.\n    suppressConnectErrors: function () {\n      suppressConnectErrors = true;\n    },\n    onListening: function (f) {\n      if (onListeningCallbacks)\n        onListeningCallbacks.push(f);\n      else\n        f();\n    }\n  });\n\n  // Let the rest of the packages (and Meteor.startup hooks) insert connect\n  // middlewares and update __meteor_runtime_config__, then keep going to set up\n  // actually serving HTML.\n  exports.main = argv => {\n    WebAppInternals.generateBoilerplate();\n\n    const startHttpServer = listenOptions => {\n      httpServer.listen(listenOptions, Meteor.bindEnvironment(() => {\n        if (process.env.METEOR_PRINT_ON_LISTEN) {\n          console.log(\"LISTENING\");\n        }\n        const callbacks = onListeningCallbacks;\n        onListeningCallbacks = null;\n        callbacks.forEach(callback => { callback(); });\n      }, e => {\n        console.error(\"Error listening:\", e);\n        console.error(e && e.stack);\n      }));\n    };\n\n    let localPort = process.env.PORT || 0;\n    const unixSocketPath = process.env.UNIX_SOCKET_PATH;\n\n    if (unixSocketPath) {\n      // Start the HTTP server using a socket file.\n      removeExistingSocketFile(unixSocketPath);\n      startHttpServer({ path: unixSocketPath });\n      registerSocketFileCleanup(unixSocketPath);\n    } else {\n      localPort = isNaN(Number(localPort)) ? localPort : Number(localPort);\n      if (/\\\\\\\\?.+\\\\pipe\\\\?.+/.test(localPort)) {\n        // Start the HTTP server using Windows Server style named pipe.\n        startHttpServer({ path: localPort });\n      } else if (typeof localPort === \"number\") {\n        // Start the HTTP server using TCP.\n        startHttpServer({\n          port: localPort,\n          host: process.env.BIND_IP || \"0.0.0.0\"\n        });\n      } else {\n        throw new Error(\"Invalid PORT specified\");\n      }\n    }\n\n    return \"DAEMON\";\n  };\n}\n\n\nrunWebAppServer();\n\n\nvar inlineScriptsAllowed = true;\n\nWebAppInternals.inlineScriptsAllowed = function () {\n  return inlineScriptsAllowed;\n};\n\nWebAppInternals.setInlineScriptsAllowed = function (value) {\n  inlineScriptsAllowed = value;\n  WebAppInternals.generateBoilerplate();\n};\n\n\nWebAppInternals.setBundledJsCssUrlRewriteHook = function (hookFn) {\n  bundledJsCssUrlRewriteHook = hookFn;\n  WebAppInternals.generateBoilerplate();\n};\n\nWebAppInternals.setBundledJsCssPrefix = function (prefix) {\n  var self = this;\n  self.setBundledJsCssUrlRewriteHook(\n    function (url) {\n      return prefix + url;\n  });\n};\n\n// Packages can call `WebAppInternals.addStaticJs` to specify static\n// JavaScript to be included in the app. This static JS will be inlined,\n// unless inline scripts have been disabled, in which case it will be\n// served under `/<sha1 of contents>`.\nvar additionalStaticJs = {};\nWebAppInternals.addStaticJs = function (contents) {\n  additionalStaticJs[\"/\" + sha1(contents) + \".js\"] = contents;\n};\n\n// Exported for tests\nWebAppInternals.getBoilerplate = getBoilerplate;\nWebAppInternals.additionalStaticJs = additionalStaticJs;\n","import { statSync, unlinkSync, existsSync } from 'fs';\n\n// Since a new socket file will be created when the HTTP server\n// starts up, if found remove the existing file.\n//\n// WARNING:\n// This will remove the configured socket file without warning. If\n// the configured socket file is already in use by another application,\n// it will still be removed. Node does not provide a reliable way to\n// differentiate between a socket file that is already in use by\n// another application or a stale socket file that has been\n// left over after a SIGKILL. Since we have no reliable way to\n// differentiate between these two scenarios, the best course of\n// action during startup is to remove any existing socket file. This\n// is not the safest course of action as removing the existing socket\n// file could impact an application using it, but this approach helps\n// ensure the HTTP server can startup without manual\n// intervention (e.g. asking for the verification and cleanup of socket\n// files before allowing the HTTP server to be started).\n//\n// The above being said, as long as the socket file path is\n// configured carefully when the application is deployed (and extra\n// care is taken to make sure the configured path is unique and doesn't\n// conflict with another socket file path), then there should not be\n// any issues with this approach.\nexport const removeExistingSocketFile = (socketPath) => {\n  try {\n    if (statSync(socketPath).isSocket()) {\n      // Since a new socket file will be created, remove the existing\n      // file.\n      unlinkSync(socketPath);\n    } else {\n      throw new Error(\n        `An existing file was found at \"${socketPath}\" and it is not ` +\n        'a socket file. Please confirm PORT is pointing to valid and ' +\n        'un-used socket file path.'\n      );\n    }\n  } catch (error) {\n    // If there is no existing socket file to cleanup, great, we'll\n    // continue normally. If the caught exception represents any other\n    // issue, re-throw.\n    if (error.code !== 'ENOENT') {\n      throw error;\n    }\n  }\n};\n\n// Remove the socket file when done to avoid leaving behind a stale one.\n// Note - a stale socket file is still left behind if the running node\n// process is killed via signal 9 - SIGKILL.\nexport const registerSocketFileCleanup =\n  (socketPath, eventEmitter = process) => {\n    ['exit', 'SIGINT', 'SIGHUP', 'SIGTERM'].forEach(signal => {\n      eventEmitter.on(signal, Meteor.bindEnvironment(() => {\n        if (existsSync(socketPath)) {\n          unlinkSync(socketPath);\n        }\n      }));\n    });\n  };\n"]}}]