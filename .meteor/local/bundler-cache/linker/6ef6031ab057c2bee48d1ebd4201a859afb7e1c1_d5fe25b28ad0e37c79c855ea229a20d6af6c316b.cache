[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package.modules.meteorInstall;\nvar Promise = Package.promise.Promise;\n\n/* Package-scope variables */\nvar meteorBabelHelpers;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"babel-runtime\":{\"babel-runtime.js\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// packages/babel-runtime/babel-runtime.js                                    //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nexports.meteorBabelHelpers = require(\"meteor-babel-helpers\");\n\n// Returns true if a given absolute identifier will be provided at runtime\n// by the babel-runtime package.\nexports.checkHelper = function checkHelper(id) {\n  // There used to be more complicated logic here, when the babel-runtime\n  // package provided helper implementations of its own, but now this\n  // function exists just for backwards compatibility.\n  return false;\n};\n\ntry {\n  var regeneratorRuntime = require(\"babel-runtime/regenerator\");\n} catch (e) {\n  throw new Error([\n    \"The babel-runtime npm package could not be found in your node_modules \",\n    \"directory. Please run the following command to install it:\",\n    \"\",\n    \"  meteor npm install --save babel-runtime\",\n    \"\"\n  ].join(\"\\n\"));\n}\n\nif (regeneratorRuntime &&\n    typeof Promise === \"function\" &&\n    typeof Promise.asyncApply === \"function\") {\n  // If Promise.asyncApply is defined, use it to wrap calls to\n  // runtime.async so that the entire async function will run in its own\n  // Fiber, not just the code that comes after the first await.\n  var realAsync = regeneratorRuntime.async;\n  regeneratorRuntime.async = function () {\n    return Promise.asyncApply(realAsync, regeneratorRuntime, arguments);\n  };\n}\n\n////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"meteor-babel-helpers\":{\"package.json\":function(require,exports){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// ../npm/node_modules/meteor-babel-helpers/package.json                      //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nexports.name = \"meteor-babel-helpers\";\nexports.version = \"0.0.3\";\nexports.main = \"index.js\";\n\n////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////\n//                                                                            //\n// node_modules/meteor/babel-runtime/node_modules/meteor-babel-helpers/index. //\n//                                                                            //\n////////////////////////////////////////////////////////////////////////////////\n                                                                              //\nfunction canDefineNonEnumerableProperties() {\n  var testObj = {};\n  var testPropName = \"t\";\n\n  try {\n    Object.defineProperty(testObj, testPropName, {\n      enumerable: false,\n      value: testObj\n    });\n\n    for (var k in testObj) {\n      if (k === testPropName) {\n        return false;\n      }\n    }\n  } catch (e) {\n    return false;\n  }\n\n  return testObj[testPropName] === testObj;\n}\n\nfunction sanitizeEasy(value) {\n  return value;\n}\n\nfunction sanitizeHard(obj) {\n  if (Array.isArray(obj)) {\n    var newObj = {};\n    var keys = Object.keys(obj);\n    var keyCount = keys.length;\n    for (var i = 0; i < keyCount; ++i) {\n      var key = keys[i];\n      newObj[key] = obj[key];\n    }\n    return newObj;\n  }\n\n  return obj;\n}\n\nmeteorBabelHelpers = module.exports = {\n  // Meteor-specific runtime helper for wrapping the object of for-in\n  // loops, so that inherited Array methods defined by es5-shim can be\n  // ignored in browsers where they cannot be defined as non-enumerable.\n  sanitizeForInObject: canDefineNonEnumerableProperties()\n    ? sanitizeEasy\n    : sanitizeHard,\n\n  // Exposed so that we can test sanitizeForInObject in environments that\n  // support defining non-enumerable properties.\n  _sanitizeForInObjectHard: sanitizeHard\n};\n\n////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/babel-runtime/babel-runtime.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['babel-runtime'] = exports, {\n  meteorBabelHelpers: meteorBabelHelpers\n});\n\n})();\n","servePath":"/packages/babel-runtime.js"}]