[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package.modules.meteorInstall;\n\n/* Package-scope variables */\nvar Date, parseInt, parseFloat, originalStringReplace;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"es5-shim\":{\"client.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/es5-shim/client.js                                                                                        //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nrequire(\"./import_globals.js\");                                                                                       // 1\nrequire(\"es5-shim/es5-shim.js\");                                                                                      // 2\nrequire(\"es5-shim/es5-sham.js\");                                                                                      // 3\nrequire(\"./console.js\");                                                                                              // 4\nrequire(\"./export_globals.js\");                                                                                       // 5\n                                                                                                                      // 6\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"console.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/es5-shim/console.js                                                                                       //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar hasOwn = Object.prototype.hasOwnProperty;                                                                         // 1\n                                                                                                                      // 2\nfunction wrap(method) {                                                                                               // 3\n  var original = console[method];                                                                                     // 4\n  if (original && typeof original === \"object\") {                                                                     // 5\n    // Turn callable console method objects into actual functions.                                                    // 6\n    console[method] = function () {                                                                                   // 7\n      return Function.prototype.apply.call(                                                                           // 8\n        original, console, arguments                                                                                  // 9\n      );                                                                                                              // 10\n    };                                                                                                                // 11\n  }                                                                                                                   // 12\n}                                                                                                                     // 13\n                                                                                                                      // 14\nif (typeof console === \"object\" &&                                                                                    // 15\n    // In older Internet Explorers, methods like console.log are actually                                             // 16\n    // callable objects rather than functions.                                                                        // 17\n    typeof console.log === \"object\") {                                                                                // 18\n  for (var method in console) {                                                                                       // 19\n    // In most browsers, this hasOwn check will fail for all console                                                  // 20\n    // methods anyway, but fortunately in IE8 the method objects we care                                              // 21\n    // about are own properties.                                                                                      // 22\n    if (hasOwn.call(console, method)) {                                                                               // 23\n      wrap(method);                                                                                                   // 24\n    }                                                                                                                 // 25\n  }                                                                                                                   // 26\n}                                                                                                                     // 27\n                                                                                                                      // 28\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"export_globals.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/es5-shim/export_globals.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nif (global.Date !== Date) {                                                                                           // 1\n  global.Date = Date;                                                                                                 // 2\n}                                                                                                                     // 3\n                                                                                                                      // 4\nif (global.parseInt !== parseInt) {                                                                                   // 5\n  global.parseInt = parseInt;                                                                                         // 6\n}                                                                                                                     // 7\n                                                                                                                      // 8\nif (global.parseFloat !== parseFloat) {                                                                               // 9\n  global.parseFloat = parseFloat;                                                                                     // 10\n}                                                                                                                     // 11\n                                                                                                                      // 12\nvar Sp = String.prototype;                                                                                            // 13\nif (Sp.replace !== originalStringReplace) {                                                                           // 14\n  // Restore the original value of String#replace, because the es5-shim                                               // 15\n  // reimplementation is buggy. See also import_globals.js.                                                           // 16\n  Sp.replace = originalStringReplace;                                                                                 // 17\n}                                                                                                                     // 18\n                                                                                                                      // 19\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"import_globals.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/es5-shim/import_globals.js                                                                                //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// Because the es5-{shim,sham}.js code assigns to Date and parseInt,                                                  // 1\n// Meteor treats them as package variables, and so declares them as                                                   // 2\n// variables in package scope, which causes some references to Date and                                               // 3\n// parseInt in the shim/sham code to refer to those undefined package                                                 // 4\n// variables. The simplest solution seems to be to initialize the package                                             // 5\n// variables to their appropriate global values.                                                                      // 6\nDate = global.Date;                                                                                                   // 7\nparseInt = global.parseInt;                                                                                           // 8\nparseFloat = global.parseFloat;                                                                                       // 9\n                                                                                                                      // 10\n// Save the original String#replace method, because es5-shim's                                                        // 11\n// reimplementation of it causes problems in markdown/showdown.js.                                                    // 12\n// This original method will be restored in export_globals.js.                                                        // 13\noriginalStringReplace = String.prototype.replace;                                                                     // 14\n                                                                                                                      // 15\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"es5-shim\":{\"es5-shim.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/es5-shim/node_modules/es5-shim/es5-shim.js                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*!                                                                                                                   // 1\n * https://github.com/es-shims/es5-shim                                                                               // 2\n * @license es5-shim Copyright 2009-2015 by contributors, MIT License                                                 // 3\n * see https://github.com/es-shims/es5-shim/blob/master/LICENSE                                                       // 4\n */                                                                                                                   // 5\n                                                                                                                      // 6\n// vim: ts=4 sts=4 sw=4 expandtab                                                                                     // 7\n                                                                                                                      // 8\n// Add semicolon to prevent IIFE from being passed as argument to concatenated code.                                  // 9\n;                                                                                                                     // 10\n                                                                                                                      // 11\n// UMD (Universal Module Definition)                                                                                  // 12\n// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js                                            // 13\n(function (root, factory) {                                                                                           // 14\n    'use strict';                                                                                                     // 15\n                                                                                                                      // 16\n    /* global define, exports, module */                                                                              // 17\n    if (typeof define === 'function' && define.amd) {                                                                 // 18\n        // AMD. Register as an anonymous module.                                                                      // 19\n        define(factory);                                                                                              // 20\n    } else if (typeof exports === 'object') {                                                                         // 21\n        // Node. Does not work with strict CommonJS, but                                                              // 22\n        // only CommonJS-like enviroments that support module.exports,                                                // 23\n        // like Node.                                                                                                 // 24\n        module.exports = factory();                                                                                   // 25\n    } else {                                                                                                          // 26\n        // Browser globals (root is window)                                                                           // 27\n        root.returnExports = factory();                                                                               // 28\n    }                                                                                                                 // 29\n}(this, function () {                                                                                                 // 30\n    /**                                                                                                               // 31\n     * Brings an environment as close to ECMAScript 5 compliance                                                      // 32\n     * as is possible with the facilities of erstwhile engines.                                                       // 33\n     *                                                                                                                // 34\n     * Annotated ES5: http://es5.github.com/ (specific links below)                                                   // 35\n     * ES5 Spec: http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf                            // 36\n     * Required reading: http://javascriptweblog.wordpress.com/2011/12/05/extending-javascript-natives/               // 37\n     */                                                                                                               // 38\n                                                                                                                      // 39\n    // Shortcut to an often accessed properties, in order to avoid multiple                                           // 40\n    // dereference that costs universally. This also holds a reference to known-good                                  // 41\n    // functions.                                                                                                     // 42\n    var $Array = Array;                                                                                               // 43\n    var ArrayPrototype = $Array.prototype;                                                                            // 44\n    var $Object = Object;                                                                                             // 45\n    var ObjectPrototype = $Object.prototype;                                                                          // 46\n    var $Function = Function;                                                                                         // 47\n    var FunctionPrototype = $Function.prototype;                                                                      // 48\n    var $String = String;                                                                                             // 49\n    var StringPrototype = $String.prototype;                                                                          // 50\n    var $Number = Number;                                                                                             // 51\n    var NumberPrototype = $Number.prototype;                                                                          // 52\n    var array_slice = ArrayPrototype.slice;                                                                           // 53\n    var array_splice = ArrayPrototype.splice;                                                                         // 54\n    var array_push = ArrayPrototype.push;                                                                             // 55\n    var array_unshift = ArrayPrototype.unshift;                                                                       // 56\n    var array_concat = ArrayPrototype.concat;                                                                         // 57\n    var array_join = ArrayPrototype.join;                                                                             // 58\n    var call = FunctionPrototype.call;                                                                                // 59\n    var apply = FunctionPrototype.apply;                                                                              // 60\n    var max = Math.max;                                                                                               // 61\n    var min = Math.min;                                                                                               // 62\n                                                                                                                      // 63\n    // Having a toString local variable name breaks in Opera so use to_string.                                        // 64\n    var to_string = ObjectPrototype.toString;                                                                         // 65\n                                                                                                                      // 66\n    /* global Symbol */                                                                                               // 67\n    /* eslint-disable one-var-declaration-per-line, no-redeclare, max-statements-per-line */                          // 68\n    var hasToStringTag = typeof Symbol === 'function' && typeof Symbol.toStringTag === 'symbol';                      // 69\n    var isCallable; /* inlined from https://npmjs.com/is-callable */ var fnToStr = Function.prototype.toString, constructorRegex = /^\\s*class /, isES6ClassFn = function isES6ClassFn(value) { try { var fnStr = fnToStr.call(value); var singleStripped = fnStr.replace(/\\/\\/.*\\n/g, ''); var multiStripped = singleStripped.replace(/\\/\\*[.\\s\\S]*\\*\\//g, ''); var spaceStripped = multiStripped.replace(/\\n/mg, ' ').replace(/ {2}/g, ' '); return constructorRegex.test(spaceStripped); } catch (e) { return false; /* not a function */ } }, tryFunctionObject = function tryFunctionObject(value) { try { if (isES6ClassFn(value)) { return false; } fnToStr.call(value); return true; } catch (e) { return false; } }, fnClass = '[object Function]', genClass = '[object GeneratorFunction]', isCallable = function isCallable(value) { if (!value) { return false; } if (typeof value !== 'function' && typeof value !== 'object') { return false; } if (hasToStringTag) { return tryFunctionObject(value); } if (isES6ClassFn(value)) { return false; } var strClass = to_string.call(value); return strClass === fnClass || strClass === genClass; };\n                                                                                                                      // 71\n    var isRegex; /* inlined from https://npmjs.com/is-regex */ var regexExec = RegExp.prototype.exec, tryRegexExec = function tryRegexExec(value) { try { regexExec.call(value); return true; } catch (e) { return false; } }, regexClass = '[object RegExp]'; isRegex = function isRegex(value) { if (typeof value !== 'object') { return false; } return hasToStringTag ? tryRegexExec(value) : to_string.call(value) === regexClass; };\n    var isString; /* inlined from https://npmjs.com/is-string */ var strValue = String.prototype.valueOf, tryStringObject = function tryStringObject(value) { try { strValue.call(value); return true; } catch (e) { return false; } }, stringClass = '[object String]'; isString = function isString(value) { if (typeof value === 'string') { return true; } if (typeof value !== 'object') { return false; } return hasToStringTag ? tryStringObject(value) : to_string.call(value) === stringClass; };\n    /* eslint-enable one-var-declaration-per-line, no-redeclare, max-statements-per-line */                           // 74\n                                                                                                                      // 75\n    /* inlined from http://npmjs.com/define-properties */                                                             // 76\n    var supportsDescriptors = $Object.defineProperty && (function () {                                                // 77\n        try {                                                                                                         // 78\n            var obj = {};                                                                                             // 79\n            $Object.defineProperty(obj, 'x', { enumerable: false, value: obj });                                      // 80\n            for (var _ in obj) { // jscs:ignore disallowUnusedVariables                                               // 81\n                return false;                                                                                         // 82\n            }                                                                                                         // 83\n            return obj.x === obj;                                                                                     // 84\n        } catch (e) { /* this is ES3 */                                                                               // 85\n            return false;                                                                                             // 86\n        }                                                                                                             // 87\n    }());                                                                                                             // 88\n    var defineProperties = (function (has) {                                                                          // 89\n        // Define configurable, writable, and non-enumerable props                                                    // 90\n        // if they don't exist.                                                                                       // 91\n        var defineProperty;                                                                                           // 92\n        if (supportsDescriptors) {                                                                                    // 93\n            defineProperty = function (object, name, method, forceAssign) {                                           // 94\n                if (!forceAssign && (name in object)) {                                                               // 95\n                    return;                                                                                           // 96\n                }                                                                                                     // 97\n                $Object.defineProperty(object, name, {                                                                // 98\n                    configurable: true,                                                                               // 99\n                    enumerable: false,                                                                                // 100\n                    writable: true,                                                                                   // 101\n                    value: method                                                                                     // 102\n                });                                                                                                   // 103\n            };                                                                                                        // 104\n        } else {                                                                                                      // 105\n            defineProperty = function (object, name, method, forceAssign) {                                           // 106\n                if (!forceAssign && (name in object)) {                                                               // 107\n                    return;                                                                                           // 108\n                }                                                                                                     // 109\n                object[name] = method;                                                                                // 110\n            };                                                                                                        // 111\n        }                                                                                                             // 112\n        return function defineProperties(object, map, forceAssign) {                                                  // 113\n            for (var name in map) {                                                                                   // 114\n                if (has.call(map, name)) {                                                                            // 115\n                    defineProperty(object, name, map[name], forceAssign);                                             // 116\n                }                                                                                                     // 117\n            }                                                                                                         // 118\n        };                                                                                                            // 119\n    }(ObjectPrototype.hasOwnProperty));                                                                               // 120\n                                                                                                                      // 121\n    //                                                                                                                // 122\n    // Util                                                                                                           // 123\n    // ======                                                                                                         // 124\n    //                                                                                                                // 125\n                                                                                                                      // 126\n    /* replaceable with https://npmjs.com/package/es-abstract /helpers/isPrimitive */                                 // 127\n    var isPrimitive = function isPrimitive(input) {                                                                   // 128\n        var type = typeof input;                                                                                      // 129\n        return input === null || (type !== 'object' && type !== 'function');                                          // 130\n    };                                                                                                                // 131\n                                                                                                                      // 132\n    var isActualNaN = $Number.isNaN || function isActualNaN(x) {                                                      // 133\n        return x !== x;                                                                                               // 134\n    };                                                                                                                // 135\n                                                                                                                      // 136\n    var ES = {                                                                                                        // 137\n        // ES5 9.4                                                                                                    // 138\n        // http://es5.github.com/#x9.4                                                                                // 139\n        // http://jsperf.com/to-integer                                                                               // 140\n        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToInteger */                                    // 141\n        ToInteger: function ToInteger(num) {                                                                          // 142\n            var n = +num;                                                                                             // 143\n            if (isActualNaN(n)) {                                                                                     // 144\n                n = 0;                                                                                                // 145\n            } else if (n !== 0 && n !== (1 / 0) && n !== -(1 / 0)) {                                                  // 146\n                n = (n > 0 || -1) * Math.floor(Math.abs(n));                                                          // 147\n            }                                                                                                         // 148\n            return n;                                                                                                 // 149\n        },                                                                                                            // 150\n                                                                                                                      // 151\n        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToPrimitive */                                  // 152\n        ToPrimitive: function ToPrimitive(input) {                                                                    // 153\n            var val, valueOf, toStr;                                                                                  // 154\n            if (isPrimitive(input)) {                                                                                 // 155\n                return input;                                                                                         // 156\n            }                                                                                                         // 157\n            valueOf = input.valueOf;                                                                                  // 158\n            if (isCallable(valueOf)) {                                                                                // 159\n                val = valueOf.call(input);                                                                            // 160\n                if (isPrimitive(val)) {                                                                               // 161\n                    return val;                                                                                       // 162\n                }                                                                                                     // 163\n            }                                                                                                         // 164\n            toStr = input.toString;                                                                                   // 165\n            if (isCallable(toStr)) {                                                                                  // 166\n                val = toStr.call(input);                                                                              // 167\n                if (isPrimitive(val)) {                                                                               // 168\n                    return val;                                                                                       // 169\n                }                                                                                                     // 170\n            }                                                                                                         // 171\n            throw new TypeError();                                                                                    // 172\n        },                                                                                                            // 173\n                                                                                                                      // 174\n        // ES5 9.9                                                                                                    // 175\n        // http://es5.github.com/#x9.9                                                                                // 176\n        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToObject */                                     // 177\n        ToObject: function (o) {                                                                                      // 178\n            if (o == null) { // this matches both null and undefined                                                  // 179\n                throw new TypeError(\"can't convert \" + o + ' to object');                                             // 180\n            }                                                                                                         // 181\n            return $Object(o);                                                                                        // 182\n        },                                                                                                            // 183\n                                                                                                                      // 184\n        /* replaceable with https://npmjs.com/package/es-abstract ES5.ToUint32 */                                     // 185\n        ToUint32: function ToUint32(x) {                                                                              // 186\n            return x >>> 0;                                                                                           // 187\n        }                                                                                                             // 188\n    };                                                                                                                // 189\n                                                                                                                      // 190\n    //                                                                                                                // 191\n    // Function                                                                                                       // 192\n    // ========                                                                                                       // 193\n    //                                                                                                                // 194\n                                                                                                                      // 195\n    // ES-5 15.3.4.5                                                                                                  // 196\n    // http://es5.github.com/#x15.3.4.5                                                                               // 197\n                                                                                                                      // 198\n    var Empty = function Empty() {};                                                                                  // 199\n                                                                                                                      // 200\n    defineProperties(FunctionPrototype, {                                                                             // 201\n        bind: function bind(that) { // .length is 1                                                                   // 202\n            // 1. Let Target be the this value.                                                                       // 203\n            var target = this;                                                                                        // 204\n            // 2. If IsCallable(Target) is false, throw a TypeError exception.                                        // 205\n            if (!isCallable(target)) {                                                                                // 206\n                throw new TypeError('Function.prototype.bind called on incompatible ' + target);                      // 207\n            }                                                                                                         // 208\n            // 3. Let A be a new (possibly empty) internal list of all of the                                         // 209\n            //   argument values provided after thisArg (arg1, arg2 etc), in order.                                   // 210\n            // XXX slicedArgs will stand in for \"A\" if used                                                           // 211\n            var args = array_slice.call(arguments, 1); // for normal call                                             // 212\n            // 4. Let F be a new native ECMAScript object.                                                            // 213\n            // 11. Set the [[Prototype]] internal property of F to the standard                                       // 214\n            //   built-in Function prototype object as specified in 15.3.3.1.                                         // 215\n            // 12. Set the [[Call]] internal property of F as described in                                            // 216\n            //   15.3.4.5.1.                                                                                          // 217\n            // 13. Set the [[Construct]] internal property of F as described in                                       // 218\n            //   15.3.4.5.2.                                                                                          // 219\n            // 14. Set the [[HasInstance]] internal property of F as described in                                     // 220\n            //   15.3.4.5.3.                                                                                          // 221\n            var bound;                                                                                                // 222\n            var binder = function () {                                                                                // 223\n                                                                                                                      // 224\n                if (this instanceof bound) {                                                                          // 225\n                    // 15.3.4.5.2 [[Construct]]                                                                       // 226\n                    // When the [[Construct]] internal method of a function object,                                   // 227\n                    // F that was created using the bind function is called with a                                    // 228\n                    // list of arguments ExtraArgs, the following steps are taken:                                    // 229\n                    // 1. Let target be the value of F's [[TargetFunction]]                                           // 230\n                    //   internal property.                                                                           // 231\n                    // 2. If target has no [[Construct]] internal method, a                                           // 232\n                    //   TypeError exception is thrown.                                                               // 233\n                    // 3. Let boundArgs be the value of F's [[BoundArgs]] internal                                    // 234\n                    //   property.                                                                                    // 235\n                    // 4. Let args be a new list containing the same values as the                                    // 236\n                    //   list boundArgs in the same order followed by the same                                        // 237\n                    //   values as the list ExtraArgs in the same order.                                              // 238\n                    // 5. Return the result of calling the [[Construct]] internal                                     // 239\n                    //   method of target providing args as the arguments.                                            // 240\n                                                                                                                      // 241\n                    var result = apply.call(                                                                          // 242\n                        target,                                                                                       // 243\n                        this,                                                                                         // 244\n                        array_concat.call(args, array_slice.call(arguments))                                          // 245\n                    );                                                                                                // 246\n                    if ($Object(result) === result) {                                                                 // 247\n                        return result;                                                                                // 248\n                    }                                                                                                 // 249\n                    return this;                                                                                      // 250\n                                                                                                                      // 251\n                } else {                                                                                              // 252\n                    // 15.3.4.5.1 [[Call]]                                                                            // 253\n                    // When the [[Call]] internal method of a function object, F,                                     // 254\n                    // which was created using the bind function is called with a                                     // 255\n                    // this value and a list of arguments ExtraArgs, the following                                    // 256\n                    // steps are taken:                                                                               // 257\n                    // 1. Let boundArgs be the value of F's [[BoundArgs]] internal                                    // 258\n                    //   property.                                                                                    // 259\n                    // 2. Let boundThis be the value of F's [[BoundThis]] internal                                    // 260\n                    //   property.                                                                                    // 261\n                    // 3. Let target be the value of F's [[TargetFunction]] internal                                  // 262\n                    //   property.                                                                                    // 263\n                    // 4. Let args be a new list containing the same values as the                                    // 264\n                    //   list boundArgs in the same order followed by the same                                        // 265\n                    //   values as the list ExtraArgs in the same order.                                              // 266\n                    // 5. Return the result of calling the [[Call]] internal method                                   // 267\n                    //   of target providing boundThis as the this value and                                          // 268\n                    //   providing args as the arguments.                                                             // 269\n                                                                                                                      // 270\n                    // equiv: target.call(this, ...boundArgs, ...args)                                                // 271\n                    return apply.call(                                                                                // 272\n                        target,                                                                                       // 273\n                        that,                                                                                         // 274\n                        array_concat.call(args, array_slice.call(arguments))                                          // 275\n                    );                                                                                                // 276\n                                                                                                                      // 277\n                }                                                                                                     // 278\n                                                                                                                      // 279\n            };                                                                                                        // 280\n                                                                                                                      // 281\n            // 15. If the [[Class]] internal property of Target is \"Function\", then                                   // 282\n            //     a. Let L be the length property of Target minus the length of A.                                   // 283\n            //     b. Set the length own property of F to either 0 or L, whichever is                                 // 284\n            //       larger.                                                                                          // 285\n            // 16. Else set the length own property of F to 0.                                                        // 286\n                                                                                                                      // 287\n            var boundLength = max(0, target.length - args.length);                                                    // 288\n                                                                                                                      // 289\n            // 17. Set the attributes of the length own property of F to the values                                   // 290\n            //   specified in 15.3.5.1.                                                                               // 291\n            var boundArgs = [];                                                                                       // 292\n            for (var i = 0; i < boundLength; i++) {                                                                   // 293\n                array_push.call(boundArgs, '$' + i);                                                                  // 294\n            }                                                                                                         // 295\n                                                                                                                      // 296\n            // XXX Build a dynamic function with desired amount of arguments is the only                              // 297\n            // way to set the length property of a function.                                                          // 298\n            // In environments where Content Security Policies enabled (Chrome extensions,                            // 299\n            // for ex.) all use of eval or Function costructor throws an exception.                                   // 300\n            // However in all of these environments Function.prototype.bind exists                                    // 301\n            // and so this code will never be executed.                                                               // 302\n            bound = $Function('binder', 'return function (' + array_join.call(boundArgs, ',') + '){ return binder.apply(this, arguments); }')(binder);\n                                                                                                                      // 304\n            if (target.prototype) {                                                                                   // 305\n                Empty.prototype = target.prototype;                                                                   // 306\n                bound.prototype = new Empty();                                                                        // 307\n                // Clean up dangling references.                                                                      // 308\n                Empty.prototype = null;                                                                               // 309\n            }                                                                                                         // 310\n                                                                                                                      // 311\n            // TODO                                                                                                   // 312\n            // 18. Set the [[Extensible]] internal property of F to true.                                             // 313\n                                                                                                                      // 314\n            // TODO                                                                                                   // 315\n            // 19. Let thrower be the [[ThrowTypeError]] function Object (13.2.3).                                    // 316\n            // 20. Call the [[DefineOwnProperty]] internal method of F with                                           // 317\n            //   arguments \"caller\", PropertyDescriptor {[[Get]]: thrower, [[Set]]:                                   // 318\n            //   thrower, [[Enumerable]]: false, [[Configurable]]: false}, and                                        // 319\n            //   false.                                                                                               // 320\n            // 21. Call the [[DefineOwnProperty]] internal method of F with                                           // 321\n            //   arguments \"arguments\", PropertyDescriptor {[[Get]]: thrower,                                         // 322\n            //   [[Set]]: thrower, [[Enumerable]]: false, [[Configurable]]: false},                                   // 323\n            //   and false.                                                                                           // 324\n                                                                                                                      // 325\n            // TODO                                                                                                   // 326\n            // NOTE Function objects created using Function.prototype.bind do not                                     // 327\n            // have a prototype property or the [[Code]], [[FormalParameters]], and                                   // 328\n            // [[Scope]] internal properties.                                                                         // 329\n            // XXX can't delete prototype in pure-js.                                                                 // 330\n                                                                                                                      // 331\n            // 22. Return F.                                                                                          // 332\n            return bound;                                                                                             // 333\n        }                                                                                                             // 334\n    });                                                                                                               // 335\n                                                                                                                      // 336\n    // _Please note: Shortcuts are defined after `Function.prototype.bind` as we                                      // 337\n    // use it in defining shortcuts.                                                                                  // 338\n    var owns = call.bind(ObjectPrototype.hasOwnProperty);                                                             // 339\n    var toStr = call.bind(ObjectPrototype.toString);                                                                  // 340\n    var arraySlice = call.bind(array_slice);                                                                          // 341\n    var arraySliceApply = apply.bind(array_slice);                                                                    // 342\n    var strSlice = call.bind(StringPrototype.slice);                                                                  // 343\n    var strSplit = call.bind(StringPrototype.split);                                                                  // 344\n    var strIndexOf = call.bind(StringPrototype.indexOf);                                                              // 345\n    var pushCall = call.bind(array_push);                                                                             // 346\n    var isEnum = call.bind(ObjectPrototype.propertyIsEnumerable);                                                     // 347\n    var arraySort = call.bind(ArrayPrototype.sort);                                                                   // 348\n                                                                                                                      // 349\n    //                                                                                                                // 350\n    // Array                                                                                                          // 351\n    // =====                                                                                                          // 352\n    //                                                                                                                // 353\n                                                                                                                      // 354\n    var isArray = $Array.isArray || function isArray(obj) {                                                           // 355\n        return toStr(obj) === '[object Array]';                                                                       // 356\n    };                                                                                                                // 357\n                                                                                                                      // 358\n    // ES5 15.4.4.12                                                                                                  // 359\n    // http://es5.github.com/#x15.4.4.13                                                                              // 360\n    // Return len+argCount.                                                                                           // 361\n    // [bugfix, ielt8]                                                                                                // 362\n    // IE < 8 bug: [].unshift(0) === undefined but should be \"1\"                                                      // 363\n    var hasUnshiftReturnValueBug = [].unshift(0) !== 1;                                                               // 364\n    defineProperties(ArrayPrototype, {                                                                                // 365\n        unshift: function () {                                                                                        // 366\n            array_unshift.apply(this, arguments);                                                                     // 367\n            return this.length;                                                                                       // 368\n        }                                                                                                             // 369\n    }, hasUnshiftReturnValueBug);                                                                                     // 370\n                                                                                                                      // 371\n    // ES5 15.4.3.2                                                                                                   // 372\n    // http://es5.github.com/#x15.4.3.2                                                                               // 373\n    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/isArray                             // 374\n    defineProperties($Array, { isArray: isArray });                                                                   // 375\n                                                                                                                      // 376\n    // The IsCallable() check in the Array functions                                                                  // 377\n    // has been replaced with a strict check on the                                                                   // 378\n    // internal class of the object to trap cases where                                                               // 379\n    // the provided function was actually a regular                                                                   // 380\n    // expression literal, which in V8 and                                                                            // 381\n    // JavaScriptCore is a typeof \"function\".  Only in                                                                // 382\n    // V8 are regular expression literals permitted as                                                                // 383\n    // reduce parameters, so it is desirable in the                                                                   // 384\n    // general case for the shim to match the more                                                                    // 385\n    // strict and common behavior of rejecting regular                                                                // 386\n    // expressions.                                                                                                   // 387\n                                                                                                                      // 388\n    // ES5 15.4.4.18                                                                                                  // 389\n    // http://es5.github.com/#x15.4.4.18                                                                              // 390\n    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/array/forEach                             // 391\n                                                                                                                      // 392\n    // Check failure of by-index access of string characters (IE < 9)                                                 // 393\n    // and failure of `0 in boxedString` (Rhino)                                                                      // 394\n    var boxedString = $Object('a');                                                                                   // 395\n    var splitString = boxedString[0] !== 'a' || !(0 in boxedString);                                                  // 396\n                                                                                                                      // 397\n    var properlyBoxesContext = function properlyBoxed(method) {                                                       // 398\n        // Check node 0.6.21 bug where third parameter is not boxed                                                   // 399\n        var properlyBoxesNonStrict = true;                                                                            // 400\n        var properlyBoxesStrict = true;                                                                               // 401\n        var threwException = false;                                                                                   // 402\n        if (method) {                                                                                                 // 403\n            try {                                                                                                     // 404\n                method.call('foo', function (_, __, context) {                                                        // 405\n                    if (typeof context !== 'object') {                                                                // 406\n                        properlyBoxesNonStrict = false;                                                               // 407\n                    }                                                                                                 // 408\n                });                                                                                                   // 409\n                                                                                                                      // 410\n                method.call([1], function () {                                                                        // 411\n                    'use strict';                                                                                     // 412\n                                                                                                                      // 413\n                    properlyBoxesStrict = typeof this === 'string';                                                   // 414\n                }, 'x');                                                                                              // 415\n            } catch (e) {                                                                                             // 416\n                threwException = true;                                                                                // 417\n            }                                                                                                         // 418\n        }                                                                                                             // 419\n        return !!method && !threwException && properlyBoxesNonStrict && properlyBoxesStrict;                          // 420\n    };                                                                                                                // 421\n                                                                                                                      // 422\n    defineProperties(ArrayPrototype, {                                                                                // 423\n        forEach: function forEach(callbackfn/*, thisArg*/) {                                                          // 424\n            var object = ES.ToObject(this);                                                                           // 425\n            var self = splitString && isString(this) ? strSplit(this, '') : object;                                   // 426\n            var i = -1;                                                                                               // 427\n            var length = ES.ToUint32(self.length);                                                                    // 428\n            var T;                                                                                                    // 429\n            if (arguments.length > 1) {                                                                               // 430\n                T = arguments[1];                                                                                     // 431\n            }                                                                                                         // 432\n                                                                                                                      // 433\n            // If no callback function or if callback is not a callable function                                      // 434\n            if (!isCallable(callbackfn)) {                                                                            // 435\n                throw new TypeError('Array.prototype.forEach callback must be a function');                           // 436\n            }                                                                                                         // 437\n                                                                                                                      // 438\n            while (++i < length) {                                                                                    // 439\n                if (i in self) {                                                                                      // 440\n                    // Invoke the callback function with call, passing arguments:                                     // 441\n                    // context, property value, property key, thisArg object                                          // 442\n                    if (typeof T === 'undefined') {                                                                   // 443\n                        callbackfn(self[i], i, object);                                                               // 444\n                    } else {                                                                                          // 445\n                        callbackfn.call(T, self[i], i, object);                                                       // 446\n                    }                                                                                                 // 447\n                }                                                                                                     // 448\n            }                                                                                                         // 449\n        }                                                                                                             // 450\n    }, !properlyBoxesContext(ArrayPrototype.forEach));                                                                // 451\n                                                                                                                      // 452\n    // ES5 15.4.4.19                                                                                                  // 453\n    // http://es5.github.com/#x15.4.4.19                                                                              // 454\n    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/map                               // 455\n    defineProperties(ArrayPrototype, {                                                                                // 456\n        map: function map(callbackfn/*, thisArg*/) {                                                                  // 457\n            var object = ES.ToObject(this);                                                                           // 458\n            var self = splitString && isString(this) ? strSplit(this, '') : object;                                   // 459\n            var length = ES.ToUint32(self.length);                                                                    // 460\n            var result = $Array(length);                                                                              // 461\n            var T;                                                                                                    // 462\n            if (arguments.length > 1) {                                                                               // 463\n                T = arguments[1];                                                                                     // 464\n            }                                                                                                         // 465\n                                                                                                                      // 466\n            // If no callback function or if callback is not a callable function                                      // 467\n            if (!isCallable(callbackfn)) {                                                                            // 468\n                throw new TypeError('Array.prototype.map callback must be a function');                               // 469\n            }                                                                                                         // 470\n                                                                                                                      // 471\n            for (var i = 0; i < length; i++) {                                                                        // 472\n                if (i in self) {                                                                                      // 473\n                    if (typeof T === 'undefined') {                                                                   // 474\n                        result[i] = callbackfn(self[i], i, object);                                                   // 475\n                    } else {                                                                                          // 476\n                        result[i] = callbackfn.call(T, self[i], i, object);                                           // 477\n                    }                                                                                                 // 478\n                }                                                                                                     // 479\n            }                                                                                                         // 480\n            return result;                                                                                            // 481\n        }                                                                                                             // 482\n    }, !properlyBoxesContext(ArrayPrototype.map));                                                                    // 483\n                                                                                                                      // 484\n    // ES5 15.4.4.20                                                                                                  // 485\n    // http://es5.github.com/#x15.4.4.20                                                                              // 486\n    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/filter                            // 487\n    defineProperties(ArrayPrototype, {                                                                                // 488\n        filter: function filter(callbackfn/*, thisArg*/) {                                                            // 489\n            var object = ES.ToObject(this);                                                                           // 490\n            var self = splitString && isString(this) ? strSplit(this, '') : object;                                   // 491\n            var length = ES.ToUint32(self.length);                                                                    // 492\n            var result = [];                                                                                          // 493\n            var value;                                                                                                // 494\n            var T;                                                                                                    // 495\n            if (arguments.length > 1) {                                                                               // 496\n                T = arguments[1];                                                                                     // 497\n            }                                                                                                         // 498\n                                                                                                                      // 499\n            // If no callback function or if callback is not a callable function                                      // 500\n            if (!isCallable(callbackfn)) {                                                                            // 501\n                throw new TypeError('Array.prototype.filter callback must be a function');                            // 502\n            }                                                                                                         // 503\n                                                                                                                      // 504\n            for (var i = 0; i < length; i++) {                                                                        // 505\n                if (i in self) {                                                                                      // 506\n                    value = self[i];                                                                                  // 507\n                    if (typeof T === 'undefined' ? callbackfn(value, i, object) : callbackfn.call(T, value, i, object)) {\n                        pushCall(result, value);                                                                      // 509\n                    }                                                                                                 // 510\n                }                                                                                                     // 511\n            }                                                                                                         // 512\n            return result;                                                                                            // 513\n        }                                                                                                             // 514\n    }, !properlyBoxesContext(ArrayPrototype.filter));                                                                 // 515\n                                                                                                                      // 516\n    // ES5 15.4.4.16                                                                                                  // 517\n    // http://es5.github.com/#x15.4.4.16                                                                              // 518\n    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/every                               // 519\n    defineProperties(ArrayPrototype, {                                                                                // 520\n        every: function every(callbackfn/*, thisArg*/) {                                                              // 521\n            var object = ES.ToObject(this);                                                                           // 522\n            var self = splitString && isString(this) ? strSplit(this, '') : object;                                   // 523\n            var length = ES.ToUint32(self.length);                                                                    // 524\n            var T;                                                                                                    // 525\n            if (arguments.length > 1) {                                                                               // 526\n                T = arguments[1];                                                                                     // 527\n            }                                                                                                         // 528\n                                                                                                                      // 529\n            // If no callback function or if callback is not a callable function                                      // 530\n            if (!isCallable(callbackfn)) {                                                                            // 531\n                throw new TypeError('Array.prototype.every callback must be a function');                             // 532\n            }                                                                                                         // 533\n                                                                                                                      // 534\n            for (var i = 0; i < length; i++) {                                                                        // 535\n                if (i in self && !(typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {\n                    return false;                                                                                     // 537\n                }                                                                                                     // 538\n            }                                                                                                         // 539\n            return true;                                                                                              // 540\n        }                                                                                                             // 541\n    }, !properlyBoxesContext(ArrayPrototype.every));                                                                  // 542\n                                                                                                                      // 543\n    // ES5 15.4.4.17                                                                                                  // 544\n    // http://es5.github.com/#x15.4.4.17                                                                              // 545\n    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/some                                // 546\n    defineProperties(ArrayPrototype, {                                                                                // 547\n        some: function some(callbackfn/*, thisArg */) {                                                               // 548\n            var object = ES.ToObject(this);                                                                           // 549\n            var self = splitString && isString(this) ? strSplit(this, '') : object;                                   // 550\n            var length = ES.ToUint32(self.length);                                                                    // 551\n            var T;                                                                                                    // 552\n            if (arguments.length > 1) {                                                                               // 553\n                T = arguments[1];                                                                                     // 554\n            }                                                                                                         // 555\n                                                                                                                      // 556\n            // If no callback function or if callback is not a callable function                                      // 557\n            if (!isCallable(callbackfn)) {                                                                            // 558\n                throw new TypeError('Array.prototype.some callback must be a function');                              // 559\n            }                                                                                                         // 560\n                                                                                                                      // 561\n            for (var i = 0; i < length; i++) {                                                                        // 562\n                if (i in self && (typeof T === 'undefined' ? callbackfn(self[i], i, object) : callbackfn.call(T, self[i], i, object))) {\n                    return true;                                                                                      // 564\n                }                                                                                                     // 565\n            }                                                                                                         // 566\n            return false;                                                                                             // 567\n        }                                                                                                             // 568\n    }, !properlyBoxesContext(ArrayPrototype.some));                                                                   // 569\n                                                                                                                      // 570\n    // ES5 15.4.4.21                                                                                                  // 571\n    // http://es5.github.com/#x15.4.4.21                                                                              // 572\n    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduce                            // 573\n    var reduceCoercesToObject = false;                                                                                // 574\n    if (ArrayPrototype.reduce) {                                                                                      // 575\n        reduceCoercesToObject = typeof ArrayPrototype.reduce.call('es5', function (_, __, ___, list) {                // 576\n            return list;                                                                                              // 577\n        }) === 'object';                                                                                              // 578\n    }                                                                                                                 // 579\n    defineProperties(ArrayPrototype, {                                                                                // 580\n        reduce: function reduce(callbackfn/*, initialValue*/) {                                                       // 581\n            var object = ES.ToObject(this);                                                                           // 582\n            var self = splitString && isString(this) ? strSplit(this, '') : object;                                   // 583\n            var length = ES.ToUint32(self.length);                                                                    // 584\n                                                                                                                      // 585\n            // If no callback function or if callback is not a callable function                                      // 586\n            if (!isCallable(callbackfn)) {                                                                            // 587\n                throw new TypeError('Array.prototype.reduce callback must be a function');                            // 588\n            }                                                                                                         // 589\n                                                                                                                      // 590\n            // no value to return if no initial value and an empty array                                              // 591\n            if (length === 0 && arguments.length === 1) {                                                             // 592\n                throw new TypeError('reduce of empty array with no initial value');                                   // 593\n            }                                                                                                         // 594\n                                                                                                                      // 595\n            var i = 0;                                                                                                // 596\n            var result;                                                                                               // 597\n            if (arguments.length >= 2) {                                                                              // 598\n                result = arguments[1];                                                                                // 599\n            } else {                                                                                                  // 600\n                do {                                                                                                  // 601\n                    if (i in self) {                                                                                  // 602\n                        result = self[i++];                                                                           // 603\n                        break;                                                                                        // 604\n                    }                                                                                                 // 605\n                                                                                                                      // 606\n                    // if array contains no values, no initial value to return                                        // 607\n                    if (++i >= length) {                                                                              // 608\n                        throw new TypeError('reduce of empty array with no initial value');                           // 609\n                    }                                                                                                 // 610\n                } while (true);                                                                                       // 611\n            }                                                                                                         // 612\n                                                                                                                      // 613\n            for (; i < length; i++) {                                                                                 // 614\n                if (i in self) {                                                                                      // 615\n                    result = callbackfn(result, self[i], i, object);                                                  // 616\n                }                                                                                                     // 617\n            }                                                                                                         // 618\n                                                                                                                      // 619\n            return result;                                                                                            // 620\n        }                                                                                                             // 621\n    }, !reduceCoercesToObject);                                                                                       // 622\n                                                                                                                      // 623\n    // ES5 15.4.4.22                                                                                                  // 624\n    // http://es5.github.com/#x15.4.4.22                                                                              // 625\n    // https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Objects/Array/reduceRight                       // 626\n    var reduceRightCoercesToObject = false;                                                                           // 627\n    if (ArrayPrototype.reduceRight) {                                                                                 // 628\n        reduceRightCoercesToObject = typeof ArrayPrototype.reduceRight.call('es5', function (_, __, ___, list) {      // 629\n            return list;                                                                                              // 630\n        }) === 'object';                                                                                              // 631\n    }                                                                                                                 // 632\n    defineProperties(ArrayPrototype, {                                                                                // 633\n        reduceRight: function reduceRight(callbackfn/*, initial*/) {                                                  // 634\n            var object = ES.ToObject(this);                                                                           // 635\n            var self = splitString && isString(this) ? strSplit(this, '') : object;                                   // 636\n            var length = ES.ToUint32(self.length);                                                                    // 637\n                                                                                                                      // 638\n            // If no callback function or if callback is not a callable function                                      // 639\n            if (!isCallable(callbackfn)) {                                                                            // 640\n                throw new TypeError('Array.prototype.reduceRight callback must be a function');                       // 641\n            }                                                                                                         // 642\n                                                                                                                      // 643\n            // no value to return if no initial value, empty array                                                    // 644\n            if (length === 0 && arguments.length === 1) {                                                             // 645\n                throw new TypeError('reduceRight of empty array with no initial value');                              // 646\n            }                                                                                                         // 647\n                                                                                                                      // 648\n            var result;                                                                                               // 649\n            var i = length - 1;                                                                                       // 650\n            if (arguments.length >= 2) {                                                                              // 651\n                result = arguments[1];                                                                                // 652\n            } else {                                                                                                  // 653\n                do {                                                                                                  // 654\n                    if (i in self) {                                                                                  // 655\n                        result = self[i--];                                                                           // 656\n                        break;                                                                                        // 657\n                    }                                                                                                 // 658\n                                                                                                                      // 659\n                    // if array contains no values, no initial value to return                                        // 660\n                    if (--i < 0) {                                                                                    // 661\n                        throw new TypeError('reduceRight of empty array with no initial value');                      // 662\n                    }                                                                                                 // 663\n                } while (true);                                                                                       // 664\n            }                                                                                                         // 665\n                                                                                                                      // 666\n            if (i < 0) {                                                                                              // 667\n                return result;                                                                                        // 668\n            }                                                                                                         // 669\n                                                                                                                      // 670\n            do {                                                                                                      // 671\n                if (i in self) {                                                                                      // 672\n                    result = callbackfn(result, self[i], i, object);                                                  // 673\n                }                                                                                                     // 674\n            } while (i--);                                                                                            // 675\n                                                                                                                      // 676\n            return result;                                                                                            // 677\n        }                                                                                                             // 678\n    }, !reduceRightCoercesToObject);                                                                                  // 679\n                                                                                                                      // 680\n    // ES5 15.4.4.14                                                                                                  // 681\n    // http://es5.github.com/#x15.4.4.14                                                                              // 682\n    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/indexOf                             // 683\n    var hasFirefox2IndexOfBug = ArrayPrototype.indexOf && [0, 1].indexOf(1, 2) !== -1;                                // 684\n    defineProperties(ArrayPrototype, {                                                                                // 685\n        indexOf: function indexOf(searchElement/*, fromIndex */) {                                                    // 686\n            var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);                        // 687\n            var length = ES.ToUint32(self.length);                                                                    // 688\n                                                                                                                      // 689\n            if (length === 0) {                                                                                       // 690\n                return -1;                                                                                            // 691\n            }                                                                                                         // 692\n                                                                                                                      // 693\n            var i = 0;                                                                                                // 694\n            if (arguments.length > 1) {                                                                               // 695\n                i = ES.ToInteger(arguments[1]);                                                                       // 696\n            }                                                                                                         // 697\n                                                                                                                      // 698\n            // handle negative indices                                                                                // 699\n            i = i >= 0 ? i : max(0, length + i);                                                                      // 700\n            for (; i < length; i++) {                                                                                 // 701\n                if (i in self && self[i] === searchElement) {                                                         // 702\n                    return i;                                                                                         // 703\n                }                                                                                                     // 704\n            }                                                                                                         // 705\n            return -1;                                                                                                // 706\n        }                                                                                                             // 707\n    }, hasFirefox2IndexOfBug);                                                                                        // 708\n                                                                                                                      // 709\n    // ES5 15.4.4.15                                                                                                  // 710\n    // http://es5.github.com/#x15.4.4.15                                                                              // 711\n    // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/lastIndexOf                         // 712\n    var hasFirefox2LastIndexOfBug = ArrayPrototype.lastIndexOf && [0, 1].lastIndexOf(0, -3) !== -1;                   // 713\n    defineProperties(ArrayPrototype, {                                                                                // 714\n        lastIndexOf: function lastIndexOf(searchElement/*, fromIndex */) {                                            // 715\n            var self = splitString && isString(this) ? strSplit(this, '') : ES.ToObject(this);                        // 716\n            var length = ES.ToUint32(self.length);                                                                    // 717\n                                                                                                                      // 718\n            if (length === 0) {                                                                                       // 719\n                return -1;                                                                                            // 720\n            }                                                                                                         // 721\n            var i = length - 1;                                                                                       // 722\n            if (arguments.length > 1) {                                                                               // 723\n                i = min(i, ES.ToInteger(arguments[1]));                                                               // 724\n            }                                                                                                         // 725\n            // handle negative indices                                                                                // 726\n            i = i >= 0 ? i : length - Math.abs(i);                                                                    // 727\n            for (; i >= 0; i--) {                                                                                     // 728\n                if (i in self && searchElement === self[i]) {                                                         // 729\n                    return i;                                                                                         // 730\n                }                                                                                                     // 731\n            }                                                                                                         // 732\n            return -1;                                                                                                // 733\n        }                                                                                                             // 734\n    }, hasFirefox2LastIndexOfBug);                                                                                    // 735\n                                                                                                                      // 736\n    // ES5 15.4.4.12                                                                                                  // 737\n    // http://es5.github.com/#x15.4.4.12                                                                              // 738\n    var spliceNoopReturnsEmptyArray = (function () {                                                                  // 739\n        var a = [1, 2];                                                                                               // 740\n        var result = a.splice();                                                                                      // 741\n        return a.length === 2 && isArray(result) && result.length === 0;                                              // 742\n    }());                                                                                                             // 743\n    defineProperties(ArrayPrototype, {                                                                                // 744\n        // Safari 5.0 bug where .splice() returns undefined                                                           // 745\n        splice: function splice(start, deleteCount) {                                                                 // 746\n            if (arguments.length === 0) {                                                                             // 747\n                return [];                                                                                            // 748\n            } else {                                                                                                  // 749\n                return array_splice.apply(this, arguments);                                                           // 750\n            }                                                                                                         // 751\n        }                                                                                                             // 752\n    }, !spliceNoopReturnsEmptyArray);                                                                                 // 753\n                                                                                                                      // 754\n    var spliceWorksWithEmptyObject = (function () {                                                                   // 755\n        var obj = {};                                                                                                 // 756\n        ArrayPrototype.splice.call(obj, 0, 0, 1);                                                                     // 757\n        return obj.length === 1;                                                                                      // 758\n    }());                                                                                                             // 759\n    defineProperties(ArrayPrototype, {                                                                                // 760\n        splice: function splice(start, deleteCount) {                                                                 // 761\n            if (arguments.length === 0) {                                                                             // 762\n                return [];                                                                                            // 763\n            }                                                                                                         // 764\n            var args = arguments;                                                                                     // 765\n            this.length = max(ES.ToInteger(this.length), 0);                                                          // 766\n            if (arguments.length > 0 && typeof deleteCount !== 'number') {                                            // 767\n                args = arraySlice(arguments);                                                                         // 768\n                if (args.length < 2) {                                                                                // 769\n                    pushCall(args, this.length - start);                                                              // 770\n                } else {                                                                                              // 771\n                    args[1] = ES.ToInteger(deleteCount);                                                              // 772\n                }                                                                                                     // 773\n            }                                                                                                         // 774\n            return array_splice.apply(this, args);                                                                    // 775\n        }                                                                                                             // 776\n    }, !spliceWorksWithEmptyObject);                                                                                  // 777\n    var spliceWorksWithLargeSparseArrays = (function () {                                                             // 778\n        // Per https://github.com/es-shims/es5-shim/issues/295                                                        // 779\n        // Safari 7/8 breaks with sparse arrays of size 1e5 or greater                                                // 780\n        var arr = new $Array(1e5);                                                                                    // 781\n        // note: the index MUST be 8 or larger or the test will false pass                                            // 782\n        arr[8] = 'x';                                                                                                 // 783\n        arr.splice(1, 1);                                                                                             // 784\n        // note: this test must be defined *after* the indexOf shim                                                   // 785\n        // per https://github.com/es-shims/es5-shim/issues/313                                                        // 786\n        return arr.indexOf('x') === 7;                                                                                // 787\n    }());                                                                                                             // 788\n    var spliceWorksWithSmallSparseArrays = (function () {                                                             // 789\n        // Per https://github.com/es-shims/es5-shim/issues/295                                                        // 790\n        // Opera 12.15 breaks on this, no idea why.                                                                   // 791\n        var n = 256;                                                                                                  // 792\n        var arr = [];                                                                                                 // 793\n        arr[n] = 'a';                                                                                                 // 794\n        arr.splice(n + 1, 0, 'b');                                                                                    // 795\n        return arr[n] === 'a';                                                                                        // 796\n    }());                                                                                                             // 797\n    defineProperties(ArrayPrototype, {                                                                                // 798\n        splice: function splice(start, deleteCount) {                                                                 // 799\n            var O = ES.ToObject(this);                                                                                // 800\n            var A = [];                                                                                               // 801\n            var len = ES.ToUint32(O.length);                                                                          // 802\n            var relativeStart = ES.ToInteger(start);                                                                  // 803\n            var actualStart = relativeStart < 0 ? max((len + relativeStart), 0) : min(relativeStart, len);            // 804\n            var actualDeleteCount = min(max(ES.ToInteger(deleteCount), 0), len - actualStart);                        // 805\n                                                                                                                      // 806\n            var k = 0;                                                                                                // 807\n            var from;                                                                                                 // 808\n            while (k < actualDeleteCount) {                                                                           // 809\n                from = $String(actualStart + k);                                                                      // 810\n                if (owns(O, from)) {                                                                                  // 811\n                    A[k] = O[from];                                                                                   // 812\n                }                                                                                                     // 813\n                k += 1;                                                                                               // 814\n            }                                                                                                         // 815\n                                                                                                                      // 816\n            var items = arraySlice(arguments, 2);                                                                     // 817\n            var itemCount = items.length;                                                                             // 818\n            var to;                                                                                                   // 819\n            if (itemCount < actualDeleteCount) {                                                                      // 820\n                k = actualStart;                                                                                      // 821\n                var maxK = len - actualDeleteCount;                                                                   // 822\n                while (k < maxK) {                                                                                    // 823\n                    from = $String(k + actualDeleteCount);                                                            // 824\n                    to = $String(k + itemCount);                                                                      // 825\n                    if (owns(O, from)) {                                                                              // 826\n                        O[to] = O[from];                                                                              // 827\n                    } else {                                                                                          // 828\n                        delete O[to];                                                                                 // 829\n                    }                                                                                                 // 830\n                    k += 1;                                                                                           // 831\n                }                                                                                                     // 832\n                k = len;                                                                                              // 833\n                var minK = len - actualDeleteCount + itemCount;                                                       // 834\n                while (k > minK) {                                                                                    // 835\n                    delete O[k - 1];                                                                                  // 836\n                    k -= 1;                                                                                           // 837\n                }                                                                                                     // 838\n            } else if (itemCount > actualDeleteCount) {                                                               // 839\n                k = len - actualDeleteCount;                                                                          // 840\n                while (k > actualStart) {                                                                             // 841\n                    from = $String(k + actualDeleteCount - 1);                                                        // 842\n                    to = $String(k + itemCount - 1);                                                                  // 843\n                    if (owns(O, from)) {                                                                              // 844\n                        O[to] = O[from];                                                                              // 845\n                    } else {                                                                                          // 846\n                        delete O[to];                                                                                 // 847\n                    }                                                                                                 // 848\n                    k -= 1;                                                                                           // 849\n                }                                                                                                     // 850\n            }                                                                                                         // 851\n            k = actualStart;                                                                                          // 852\n            for (var i = 0; i < items.length; ++i) {                                                                  // 853\n                O[k] = items[i];                                                                                      // 854\n                k += 1;                                                                                               // 855\n            }                                                                                                         // 856\n            O.length = len - actualDeleteCount + itemCount;                                                           // 857\n                                                                                                                      // 858\n            return A;                                                                                                 // 859\n        }                                                                                                             // 860\n    }, !spliceWorksWithLargeSparseArrays || !spliceWorksWithSmallSparseArrays);                                       // 861\n                                                                                                                      // 862\n    var originalJoin = ArrayPrototype.join;                                                                           // 863\n    var hasStringJoinBug;                                                                                             // 864\n    try {                                                                                                             // 865\n        hasStringJoinBug = Array.prototype.join.call('123', ',') !== '1,2,3';                                         // 866\n    } catch (e) {                                                                                                     // 867\n        hasStringJoinBug = true;                                                                                      // 868\n    }                                                                                                                 // 869\n    if (hasStringJoinBug) {                                                                                           // 870\n        defineProperties(ArrayPrototype, {                                                                            // 871\n            join: function join(separator) {                                                                          // 872\n                var sep = typeof separator === 'undefined' ? ',' : separator;                                         // 873\n                return originalJoin.call(isString(this) ? strSplit(this, '') : this, sep);                            // 874\n            }                                                                                                         // 875\n        }, hasStringJoinBug);                                                                                         // 876\n    }                                                                                                                 // 877\n                                                                                                                      // 878\n    var hasJoinUndefinedBug = [1, 2].join(undefined) !== '1,2';                                                       // 879\n    if (hasJoinUndefinedBug) {                                                                                        // 880\n        defineProperties(ArrayPrototype, {                                                                            // 881\n            join: function join(separator) {                                                                          // 882\n                var sep = typeof separator === 'undefined' ? ',' : separator;                                         // 883\n                return originalJoin.call(this, sep);                                                                  // 884\n            }                                                                                                         // 885\n        }, hasJoinUndefinedBug);                                                                                      // 886\n    }                                                                                                                 // 887\n                                                                                                                      // 888\n    var pushShim = function push(item) {                                                                              // 889\n        var O = ES.ToObject(this);                                                                                    // 890\n        var n = ES.ToUint32(O.length);                                                                                // 891\n        var i = 0;                                                                                                    // 892\n        while (i < arguments.length) {                                                                                // 893\n            O[n + i] = arguments[i];                                                                                  // 894\n            i += 1;                                                                                                   // 895\n        }                                                                                                             // 896\n        O.length = n + i;                                                                                             // 897\n        return n + i;                                                                                                 // 898\n    };                                                                                                                // 899\n                                                                                                                      // 900\n    var pushIsNotGeneric = (function () {                                                                             // 901\n        var obj = {};                                                                                                 // 902\n        var result = Array.prototype.push.call(obj, undefined);                                                       // 903\n        return result !== 1 || obj.length !== 1 || typeof obj[0] !== 'undefined' || !owns(obj, 0);                    // 904\n    }());                                                                                                             // 905\n    defineProperties(ArrayPrototype, {                                                                                // 906\n        push: function push(item) {                                                                                   // 907\n            if (isArray(this)) {                                                                                      // 908\n                return array_push.apply(this, arguments);                                                             // 909\n            }                                                                                                         // 910\n            return pushShim.apply(this, arguments);                                                                   // 911\n        }                                                                                                             // 912\n    }, pushIsNotGeneric);                                                                                             // 913\n                                                                                                                      // 914\n    // This fixes a very weird bug in Opera 10.6 when pushing `undefined                                              // 915\n    var pushUndefinedIsWeird = (function () {                                                                         // 916\n        var arr = [];                                                                                                 // 917\n        var result = arr.push(undefined);                                                                             // 918\n        return result !== 1 || arr.length !== 1 || typeof arr[0] !== 'undefined' || !owns(arr, 0);                    // 919\n    }());                                                                                                             // 920\n    defineProperties(ArrayPrototype, { push: pushShim }, pushUndefinedIsWeird);                                       // 921\n                                                                                                                      // 922\n    // ES5 15.2.3.14                                                                                                  // 923\n    // http://es5.github.io/#x15.4.4.10                                                                               // 924\n    // Fix boxed string bug                                                                                           // 925\n    defineProperties(ArrayPrototype, {                                                                                // 926\n        slice: function (start, end) {                                                                                // 927\n            var arr = isString(this) ? strSplit(this, '') : this;                                                     // 928\n            return arraySliceApply(arr, arguments);                                                                   // 929\n        }                                                                                                             // 930\n    }, splitString);                                                                                                  // 931\n                                                                                                                      // 932\n    var sortIgnoresNonFunctions = (function () {                                                                      // 933\n        try {                                                                                                         // 934\n            [1, 2].sort(null);                                                                                        // 935\n            [1, 2].sort({});                                                                                          // 936\n            return true;                                                                                              // 937\n        } catch (e) {}                                                                                                // 938\n        return false;                                                                                                 // 939\n    }());                                                                                                             // 940\n    var sortThrowsOnRegex = (function () {                                                                            // 941\n        // this is a problem in Firefox 4, in which `typeof /a/ === 'function'`                                       // 942\n        try {                                                                                                         // 943\n            [1, 2].sort(/a/);                                                                                         // 944\n            return false;                                                                                             // 945\n        } catch (e) {}                                                                                                // 946\n        return true;                                                                                                  // 947\n    }());                                                                                                             // 948\n    var sortIgnoresUndefined = (function () {                                                                         // 949\n        // applies in IE 8, for one.                                                                                  // 950\n        try {                                                                                                         // 951\n            [1, 2].sort(undefined);                                                                                   // 952\n            return true;                                                                                              // 953\n        } catch (e) {}                                                                                                // 954\n        return false;                                                                                                 // 955\n    }());                                                                                                             // 956\n    defineProperties(ArrayPrototype, {                                                                                // 957\n        sort: function sort(compareFn) {                                                                              // 958\n            if (typeof compareFn === 'undefined') {                                                                   // 959\n                return arraySort(this);                                                                               // 960\n            }                                                                                                         // 961\n            if (!isCallable(compareFn)) {                                                                             // 962\n                throw new TypeError('Array.prototype.sort callback must be a function');                              // 963\n            }                                                                                                         // 964\n            return arraySort(this, compareFn);                                                                        // 965\n        }                                                                                                             // 966\n    }, sortIgnoresNonFunctions || !sortIgnoresUndefined || !sortThrowsOnRegex);                                       // 967\n                                                                                                                      // 968\n    //                                                                                                                // 969\n    // Object                                                                                                         // 970\n    // ======                                                                                                         // 971\n    //                                                                                                                // 972\n                                                                                                                      // 973\n    // ES5 15.2.3.14                                                                                                  // 974\n    // http://es5.github.com/#x15.2.3.14                                                                              // 975\n                                                                                                                      // 976\n    // http://whattheheadsaid.com/2010/10/a-safer-object-keys-compatibility-implementation                            // 977\n    var hasDontEnumBug = !isEnum({ 'toString': null }, 'toString');                                                   // 978\n    var hasProtoEnumBug = isEnum(function () {}, 'prototype');                                                        // 979\n    var hasStringEnumBug = !owns('x', '0');                                                                           // 980\n    var equalsConstructorPrototype = function (o) {                                                                   // 981\n        var ctor = o.constructor;                                                                                     // 982\n        return ctor && ctor.prototype === o;                                                                          // 983\n    };                                                                                                                // 984\n    var blacklistedKeys = {                                                                                           // 985\n        $window: true,                                                                                                // 986\n        $console: true,                                                                                               // 987\n        $parent: true,                                                                                                // 988\n        $self: true,                                                                                                  // 989\n        $frame: true,                                                                                                 // 990\n        $frames: true,                                                                                                // 991\n        $frameElement: true,                                                                                          // 992\n        $webkitIndexedDB: true,                                                                                       // 993\n        $webkitStorageInfo: true,                                                                                     // 994\n        $external: true                                                                                               // 995\n    };                                                                                                                // 996\n    var hasAutomationEqualityBug = (function () {                                                                     // 997\n        /* globals window */                                                                                          // 998\n        if (typeof window === 'undefined') {                                                                          // 999\n            return false;                                                                                             // 1000\n        }                                                                                                             // 1001\n        for (var k in window) {                                                                                       // 1002\n            try {                                                                                                     // 1003\n                if (!blacklistedKeys['$' + k] && owns(window, k) && window[k] !== null && typeof window[k] === 'object') {\n                    equalsConstructorPrototype(window[k]);                                                            // 1005\n                }                                                                                                     // 1006\n            } catch (e) {                                                                                             // 1007\n                return true;                                                                                          // 1008\n            }                                                                                                         // 1009\n        }                                                                                                             // 1010\n        return false;                                                                                                 // 1011\n    }());                                                                                                             // 1012\n    var equalsConstructorPrototypeIfNotBuggy = function (object) {                                                    // 1013\n        if (typeof window === 'undefined' || !hasAutomationEqualityBug) {                                             // 1014\n            return equalsConstructorPrototype(object);                                                                // 1015\n        }                                                                                                             // 1016\n        try {                                                                                                         // 1017\n            return equalsConstructorPrototype(object);                                                                // 1018\n        } catch (e) {                                                                                                 // 1019\n            return false;                                                                                             // 1020\n        }                                                                                                             // 1021\n    };                                                                                                                // 1022\n    var dontEnums = [                                                                                                 // 1023\n        'toString',                                                                                                   // 1024\n        'toLocaleString',                                                                                             // 1025\n        'valueOf',                                                                                                    // 1026\n        'hasOwnProperty',                                                                                             // 1027\n        'isPrototypeOf',                                                                                              // 1028\n        'propertyIsEnumerable',                                                                                       // 1029\n        'constructor'                                                                                                 // 1030\n    ];                                                                                                                // 1031\n    var dontEnumsLength = dontEnums.length;                                                                           // 1032\n                                                                                                                      // 1033\n    // taken directly from https://github.com/ljharb/is-arguments/blob/master/index.js                                // 1034\n    // can be replaced with require('is-arguments') if we ever use a build process instead                            // 1035\n    var isStandardArguments = function isArguments(value) {                                                           // 1036\n        return toStr(value) === '[object Arguments]';                                                                 // 1037\n    };                                                                                                                // 1038\n    var isLegacyArguments = function isArguments(value) {                                                             // 1039\n        return value !== null &&                                                                                      // 1040\n            typeof value === 'object' &&                                                                              // 1041\n            typeof value.length === 'number' &&                                                                       // 1042\n            value.length >= 0 &&                                                                                      // 1043\n            !isArray(value) &&                                                                                        // 1044\n            isCallable(value.callee);                                                                                 // 1045\n    };                                                                                                                // 1046\n    var isArguments = isStandardArguments(arguments) ? isStandardArguments : isLegacyArguments;                       // 1047\n                                                                                                                      // 1048\n    defineProperties($Object, {                                                                                       // 1049\n        keys: function keys(object) {                                                                                 // 1050\n            var isFn = isCallable(object);                                                                            // 1051\n            var isArgs = isArguments(object);                                                                         // 1052\n            var isObject = object !== null && typeof object === 'object';                                             // 1053\n            var isStr = isObject && isString(object);                                                                 // 1054\n                                                                                                                      // 1055\n            if (!isObject && !isFn && !isArgs) {                                                                      // 1056\n                throw new TypeError('Object.keys called on a non-object');                                            // 1057\n            }                                                                                                         // 1058\n                                                                                                                      // 1059\n            var theKeys = [];                                                                                         // 1060\n            var skipProto = hasProtoEnumBug && isFn;                                                                  // 1061\n            if ((isStr && hasStringEnumBug) || isArgs) {                                                              // 1062\n                for (var i = 0; i < object.length; ++i) {                                                             // 1063\n                    pushCall(theKeys, $String(i));                                                                    // 1064\n                }                                                                                                     // 1065\n            }                                                                                                         // 1066\n                                                                                                                      // 1067\n            if (!isArgs) {                                                                                            // 1068\n                for (var name in object) {                                                                            // 1069\n                    if (!(skipProto && name === 'prototype') && owns(object, name)) {                                 // 1070\n                        pushCall(theKeys, $String(name));                                                             // 1071\n                    }                                                                                                 // 1072\n                }                                                                                                     // 1073\n            }                                                                                                         // 1074\n                                                                                                                      // 1075\n            if (hasDontEnumBug) {                                                                                     // 1076\n                var skipConstructor = equalsConstructorPrototypeIfNotBuggy(object);                                   // 1077\n                for (var j = 0; j < dontEnumsLength; j++) {                                                           // 1078\n                    var dontEnum = dontEnums[j];                                                                      // 1079\n                    if (!(skipConstructor && dontEnum === 'constructor') && owns(object, dontEnum)) {                 // 1080\n                        pushCall(theKeys, dontEnum);                                                                  // 1081\n                    }                                                                                                 // 1082\n                }                                                                                                     // 1083\n            }                                                                                                         // 1084\n            return theKeys;                                                                                           // 1085\n        }                                                                                                             // 1086\n    });                                                                                                               // 1087\n                                                                                                                      // 1088\n    var keysWorksWithArguments = $Object.keys && (function () {                                                       // 1089\n        // Safari 5.0 bug                                                                                             // 1090\n        return $Object.keys(arguments).length === 2;                                                                  // 1091\n    }(1, 2));                                                                                                         // 1092\n    var keysHasArgumentsLengthBug = $Object.keys && (function () {                                                    // 1093\n        var argKeys = $Object.keys(arguments);                                                                        // 1094\n        return arguments.length !== 1 || argKeys.length !== 1 || argKeys[0] !== 1;                                    // 1095\n    }(1));                                                                                                            // 1096\n    var originalKeys = $Object.keys;                                                                                  // 1097\n    defineProperties($Object, {                                                                                       // 1098\n        keys: function keys(object) {                                                                                 // 1099\n            if (isArguments(object)) {                                                                                // 1100\n                return originalKeys(arraySlice(object));                                                              // 1101\n            } else {                                                                                                  // 1102\n                return originalKeys(object);                                                                          // 1103\n            }                                                                                                         // 1104\n        }                                                                                                             // 1105\n    }, !keysWorksWithArguments || keysHasArgumentsLengthBug);                                                         // 1106\n                                                                                                                      // 1107\n    //                                                                                                                // 1108\n    // Date                                                                                                           // 1109\n    // ====                                                                                                           // 1110\n    //                                                                                                                // 1111\n                                                                                                                      // 1112\n    var hasNegativeMonthYearBug = new Date(-3509827329600292).getUTCMonth() !== 0;                                    // 1113\n    var aNegativeTestDate = new Date(-1509842289600292);                                                              // 1114\n    var aPositiveTestDate = new Date(1449662400000);                                                                  // 1115\n    var hasToUTCStringFormatBug = aNegativeTestDate.toUTCString() !== 'Mon, 01 Jan -45875 11:59:59 GMT';              // 1116\n    var hasToDateStringFormatBug;                                                                                     // 1117\n    var hasToStringFormatBug;                                                                                         // 1118\n    var timeZoneOffset = aNegativeTestDate.getTimezoneOffset();                                                       // 1119\n    if (timeZoneOffset < -720) {                                                                                      // 1120\n        hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Tue Jan 02 -45875';                          // 1121\n        hasToStringFormatBug = !(/^Thu Dec 10 2015 \\d\\d:\\d\\d:\\d\\d GMT[-\\+]\\d\\d\\d\\d(?: |$)/).test(aPositiveTestDate.toString());\n    } else {                                                                                                          // 1123\n        hasToDateStringFormatBug = aNegativeTestDate.toDateString() !== 'Mon Jan 01 -45875';                          // 1124\n        hasToStringFormatBug = !(/^Wed Dec 09 2015 \\d\\d:\\d\\d:\\d\\d GMT[-\\+]\\d\\d\\d\\d(?: |$)/).test(aPositiveTestDate.toString());\n    }                                                                                                                 // 1126\n                                                                                                                      // 1127\n    var originalGetFullYear = call.bind(Date.prototype.getFullYear);                                                  // 1128\n    var originalGetMonth = call.bind(Date.prototype.getMonth);                                                        // 1129\n    var originalGetDate = call.bind(Date.prototype.getDate);                                                          // 1130\n    var originalGetUTCFullYear = call.bind(Date.prototype.getUTCFullYear);                                            // 1131\n    var originalGetUTCMonth = call.bind(Date.prototype.getUTCMonth);                                                  // 1132\n    var originalGetUTCDate = call.bind(Date.prototype.getUTCDate);                                                    // 1133\n    var originalGetUTCDay = call.bind(Date.prototype.getUTCDay);                                                      // 1134\n    var originalGetUTCHours = call.bind(Date.prototype.getUTCHours);                                                  // 1135\n    var originalGetUTCMinutes = call.bind(Date.prototype.getUTCMinutes);                                              // 1136\n    var originalGetUTCSeconds = call.bind(Date.prototype.getUTCSeconds);                                              // 1137\n    var originalGetUTCMilliseconds = call.bind(Date.prototype.getUTCMilliseconds);                                    // 1138\n    var dayName = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];                                                  // 1139\n    var monthName = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];             // 1140\n    var daysInMonth = function daysInMonth(month, year) {                                                             // 1141\n        return originalGetDate(new Date(year, month, 0));                                                             // 1142\n    };                                                                                                                // 1143\n                                                                                                                      // 1144\n    defineProperties(Date.prototype, {                                                                                // 1145\n        getFullYear: function getFullYear() {                                                                         // 1146\n            if (!this || !(this instanceof Date)) {                                                                   // 1147\n                throw new TypeError('this is not a Date object.');                                                    // 1148\n            }                                                                                                         // 1149\n            var year = originalGetFullYear(this);                                                                     // 1150\n            if (year < 0 && originalGetMonth(this) > 11) {                                                            // 1151\n                return year + 1;                                                                                      // 1152\n            }                                                                                                         // 1153\n            return year;                                                                                              // 1154\n        },                                                                                                            // 1155\n        getMonth: function getMonth() {                                                                               // 1156\n            if (!this || !(this instanceof Date)) {                                                                   // 1157\n                throw new TypeError('this is not a Date object.');                                                    // 1158\n            }                                                                                                         // 1159\n            var year = originalGetFullYear(this);                                                                     // 1160\n            var month = originalGetMonth(this);                                                                       // 1161\n            if (year < 0 && month > 11) {                                                                             // 1162\n                return 0;                                                                                             // 1163\n            }                                                                                                         // 1164\n            return month;                                                                                             // 1165\n        },                                                                                                            // 1166\n        getDate: function getDate() {                                                                                 // 1167\n            if (!this || !(this instanceof Date)) {                                                                   // 1168\n                throw new TypeError('this is not a Date object.');                                                    // 1169\n            }                                                                                                         // 1170\n            var year = originalGetFullYear(this);                                                                     // 1171\n            var month = originalGetMonth(this);                                                                       // 1172\n            var date = originalGetDate(this);                                                                         // 1173\n            if (year < 0 && month > 11) {                                                                             // 1174\n                if (month === 12) {                                                                                   // 1175\n                    return date;                                                                                      // 1176\n                }                                                                                                     // 1177\n                var days = daysInMonth(0, year + 1);                                                                  // 1178\n                return (days - date) + 1;                                                                             // 1179\n            }                                                                                                         // 1180\n            return date;                                                                                              // 1181\n        },                                                                                                            // 1182\n        getUTCFullYear: function getUTCFullYear() {                                                                   // 1183\n            if (!this || !(this instanceof Date)) {                                                                   // 1184\n                throw new TypeError('this is not a Date object.');                                                    // 1185\n            }                                                                                                         // 1186\n            var year = originalGetUTCFullYear(this);                                                                  // 1187\n            if (year < 0 && originalGetUTCMonth(this) > 11) {                                                         // 1188\n                return year + 1;                                                                                      // 1189\n            }                                                                                                         // 1190\n            return year;                                                                                              // 1191\n        },                                                                                                            // 1192\n        getUTCMonth: function getUTCMonth() {                                                                         // 1193\n            if (!this || !(this instanceof Date)) {                                                                   // 1194\n                throw new TypeError('this is not a Date object.');                                                    // 1195\n            }                                                                                                         // 1196\n            var year = originalGetUTCFullYear(this);                                                                  // 1197\n            var month = originalGetUTCMonth(this);                                                                    // 1198\n            if (year < 0 && month > 11) {                                                                             // 1199\n                return 0;                                                                                             // 1200\n            }                                                                                                         // 1201\n            return month;                                                                                             // 1202\n        },                                                                                                            // 1203\n        getUTCDate: function getUTCDate() {                                                                           // 1204\n            if (!this || !(this instanceof Date)) {                                                                   // 1205\n                throw new TypeError('this is not a Date object.');                                                    // 1206\n            }                                                                                                         // 1207\n            var year = originalGetUTCFullYear(this);                                                                  // 1208\n            var month = originalGetUTCMonth(this);                                                                    // 1209\n            var date = originalGetUTCDate(this);                                                                      // 1210\n            if (year < 0 && month > 11) {                                                                             // 1211\n                if (month === 12) {                                                                                   // 1212\n                    return date;                                                                                      // 1213\n                }                                                                                                     // 1214\n                var days = daysInMonth(0, year + 1);                                                                  // 1215\n                return (days - date) + 1;                                                                             // 1216\n            }                                                                                                         // 1217\n            return date;                                                                                              // 1218\n        }                                                                                                             // 1219\n    }, hasNegativeMonthYearBug);                                                                                      // 1220\n                                                                                                                      // 1221\n    defineProperties(Date.prototype, {                                                                                // 1222\n        toUTCString: function toUTCString() {                                                                         // 1223\n            if (!this || !(this instanceof Date)) {                                                                   // 1224\n                throw new TypeError('this is not a Date object.');                                                    // 1225\n            }                                                                                                         // 1226\n            var day = originalGetUTCDay(this);                                                                        // 1227\n            var date = originalGetUTCDate(this);                                                                      // 1228\n            var month = originalGetUTCMonth(this);                                                                    // 1229\n            var year = originalGetUTCFullYear(this);                                                                  // 1230\n            var hour = originalGetUTCHours(this);                                                                     // 1231\n            var minute = originalGetUTCMinutes(this);                                                                 // 1232\n            var second = originalGetUTCSeconds(this);                                                                 // 1233\n            return dayName[day] + ', ' +                                                                              // 1234\n                (date < 10 ? '0' + date : date) + ' ' +                                                               // 1235\n                monthName[month] + ' ' +                                                                              // 1236\n                year + ' ' +                                                                                          // 1237\n                (hour < 10 ? '0' + hour : hour) + ':' +                                                               // 1238\n                (minute < 10 ? '0' + minute : minute) + ':' +                                                         // 1239\n                (second < 10 ? '0' + second : second) + ' GMT';                                                       // 1240\n        }                                                                                                             // 1241\n    }, hasNegativeMonthYearBug || hasToUTCStringFormatBug);                                                           // 1242\n                                                                                                                      // 1243\n    // Opera 12 has `,`                                                                                               // 1244\n    defineProperties(Date.prototype, {                                                                                // 1245\n        toDateString: function toDateString() {                                                                       // 1246\n            if (!this || !(this instanceof Date)) {                                                                   // 1247\n                throw new TypeError('this is not a Date object.');                                                    // 1248\n            }                                                                                                         // 1249\n            var day = this.getDay();                                                                                  // 1250\n            var date = this.getDate();                                                                                // 1251\n            var month = this.getMonth();                                                                              // 1252\n            var year = this.getFullYear();                                                                            // 1253\n            return dayName[day] + ' ' +                                                                               // 1254\n                monthName[month] + ' ' +                                                                              // 1255\n                (date < 10 ? '0' + date : date) + ' ' +                                                               // 1256\n                year;                                                                                                 // 1257\n        }                                                                                                             // 1258\n    }, hasNegativeMonthYearBug || hasToDateStringFormatBug);                                                          // 1259\n                                                                                                                      // 1260\n    // can't use defineProperties here because of toString enumeration issue in IE <= 8                               // 1261\n    if (hasNegativeMonthYearBug || hasToStringFormatBug) {                                                            // 1262\n        Date.prototype.toString = function toString() {                                                               // 1263\n            if (!this || !(this instanceof Date)) {                                                                   // 1264\n                throw new TypeError('this is not a Date object.');                                                    // 1265\n            }                                                                                                         // 1266\n            var day = this.getDay();                                                                                  // 1267\n            var date = this.getDate();                                                                                // 1268\n            var month = this.getMonth();                                                                              // 1269\n            var year = this.getFullYear();                                                                            // 1270\n            var hour = this.getHours();                                                                               // 1271\n            var minute = this.getMinutes();                                                                           // 1272\n            var second = this.getSeconds();                                                                           // 1273\n            var timezoneOffset = this.getTimezoneOffset();                                                            // 1274\n            var hoursOffset = Math.floor(Math.abs(timezoneOffset) / 60);                                              // 1275\n            var minutesOffset = Math.floor(Math.abs(timezoneOffset) % 60);                                            // 1276\n            return dayName[day] + ' ' +                                                                               // 1277\n                monthName[month] + ' ' +                                                                              // 1278\n                (date < 10 ? '0' + date : date) + ' ' +                                                               // 1279\n                year + ' ' +                                                                                          // 1280\n                (hour < 10 ? '0' + hour : hour) + ':' +                                                               // 1281\n                (minute < 10 ? '0' + minute : minute) + ':' +                                                         // 1282\n                (second < 10 ? '0' + second : second) + ' GMT' +                                                      // 1283\n                (timezoneOffset > 0 ? '-' : '+') +                                                                    // 1284\n                (hoursOffset < 10 ? '0' + hoursOffset : hoursOffset) +                                                // 1285\n                (minutesOffset < 10 ? '0' + minutesOffset : minutesOffset);                                           // 1286\n        };                                                                                                            // 1287\n        if (supportsDescriptors) {                                                                                    // 1288\n            $Object.defineProperty(Date.prototype, 'toString', {                                                      // 1289\n                configurable: true,                                                                                   // 1290\n                enumerable: false,                                                                                    // 1291\n                writable: true                                                                                        // 1292\n            });                                                                                                       // 1293\n        }                                                                                                             // 1294\n    }                                                                                                                 // 1295\n                                                                                                                      // 1296\n    // ES5 15.9.5.43                                                                                                  // 1297\n    // http://es5.github.com/#x15.9.5.43                                                                              // 1298\n    // This function returns a String value represent the instance in time                                            // 1299\n    // represented by this Date object. The format of the String is the Date Time                                     // 1300\n    // string format defined in 15.9.1.15. All fields are present in the String.                                      // 1301\n    // The time zone is always UTC, denoted by the suffix Z. If the time value of                                     // 1302\n    // this object is not a finite Number a RangeError exception is thrown.                                           // 1303\n    var negativeDate = -62198755200000;                                                                               // 1304\n    var negativeYearString = '-000001';                                                                               // 1305\n    var hasNegativeDateBug = Date.prototype.toISOString && new Date(negativeDate).toISOString().indexOf(negativeYearString) === -1;\n    var hasSafari51DateBug = Date.prototype.toISOString && new Date(-1).toISOString() !== '1969-12-31T23:59:59.999Z';\n                                                                                                                      // 1308\n    var getTime = call.bind(Date.prototype.getTime);                                                                  // 1309\n                                                                                                                      // 1310\n    defineProperties(Date.prototype, {                                                                                // 1311\n        toISOString: function toISOString() {                                                                         // 1312\n            if (!isFinite(this) || !isFinite(getTime(this))) {                                                        // 1313\n                // Adope Photoshop requires the second check.                                                         // 1314\n                throw new RangeError('Date.prototype.toISOString called on non-finite value.');                       // 1315\n            }                                                                                                         // 1316\n                                                                                                                      // 1317\n            var year = originalGetUTCFullYear(this);                                                                  // 1318\n                                                                                                                      // 1319\n            var month = originalGetUTCMonth(this);                                                                    // 1320\n            // see https://github.com/es-shims/es5-shim/issues/111                                                    // 1321\n            year += Math.floor(month / 12);                                                                           // 1322\n            month = (month % 12 + 12) % 12;                                                                           // 1323\n                                                                                                                      // 1324\n            // the date time string format is specified in 15.9.1.15.                                                 // 1325\n            var result = [month + 1, originalGetUTCDate(this), originalGetUTCHours(this), originalGetUTCMinutes(this), originalGetUTCSeconds(this)];\n            year = (                                                                                                  // 1327\n                (year < 0 ? '-' : (year > 9999 ? '+' : '')) +                                                         // 1328\n                strSlice('00000' + Math.abs(year), (0 <= year && year <= 9999) ? -4 : -6)                             // 1329\n            );                                                                                                        // 1330\n                                                                                                                      // 1331\n            for (var i = 0; i < result.length; ++i) {                                                                 // 1332\n                // pad months, days, hours, minutes, and seconds to have two digits.                                  // 1333\n                result[i] = strSlice('00' + result[i], -2);                                                           // 1334\n            }                                                                                                         // 1335\n            // pad milliseconds to have three digits.                                                                 // 1336\n            return (                                                                                                  // 1337\n                year + '-' + arraySlice(result, 0, 2).join('-') +                                                     // 1338\n                'T' + arraySlice(result, 2).join(':') + '.' +                                                         // 1339\n                strSlice('000' + originalGetUTCMilliseconds(this), -3) + 'Z'                                          // 1340\n            );                                                                                                        // 1341\n        }                                                                                                             // 1342\n    }, hasNegativeDateBug || hasSafari51DateBug);                                                                     // 1343\n                                                                                                                      // 1344\n    // ES5 15.9.5.44                                                                                                  // 1345\n    // http://es5.github.com/#x15.9.5.44                                                                              // 1346\n    // This function provides a String representation of a Date object for use by                                     // 1347\n    // JSON.stringify (15.12.3).                                                                                      // 1348\n    var dateToJSONIsSupported = (function () {                                                                        // 1349\n        try {                                                                                                         // 1350\n            return Date.prototype.toJSON &&                                                                           // 1351\n                new Date(NaN).toJSON() === null &&                                                                    // 1352\n                new Date(negativeDate).toJSON().indexOf(negativeYearString) !== -1 &&                                 // 1353\n                Date.prototype.toJSON.call({ // generic                                                               // 1354\n                    toISOString: function () { return true; }                                                         // 1355\n                });                                                                                                   // 1356\n        } catch (e) {                                                                                                 // 1357\n            return false;                                                                                             // 1358\n        }                                                                                                             // 1359\n    }());                                                                                                             // 1360\n    if (!dateToJSONIsSupported) {                                                                                     // 1361\n        Date.prototype.toJSON = function toJSON(key) {                                                                // 1362\n            // When the toJSON method is called with argument key, the following                                      // 1363\n            // steps are taken:                                                                                       // 1364\n                                                                                                                      // 1365\n            // 1.  Let O be the result of calling ToObject, giving it the this                                        // 1366\n            // value as its argument.                                                                                 // 1367\n            // 2. Let tv be ES.ToPrimitive(O, hint Number).                                                           // 1368\n            var O = $Object(this);                                                                                    // 1369\n            var tv = ES.ToPrimitive(O);                                                                               // 1370\n            // 3. If tv is a Number and is not finite, return null.                                                   // 1371\n            if (typeof tv === 'number' && !isFinite(tv)) {                                                            // 1372\n                return null;                                                                                          // 1373\n            }                                                                                                         // 1374\n            // 4. Let toISO be the result of calling the [[Get]] internal method of                                   // 1375\n            // O with argument \"toISOString\".                                                                         // 1376\n            var toISO = O.toISOString;                                                                                // 1377\n            // 5. If IsCallable(toISO) is false, throw a TypeError exception.                                         // 1378\n            if (!isCallable(toISO)) {                                                                                 // 1379\n                throw new TypeError('toISOString property is not callable');                                          // 1380\n            }                                                                                                         // 1381\n            // 6. Return the result of calling the [[Call]] internal method of                                        // 1382\n            //  toISO with O as the this value and an empty argument list.                                            // 1383\n            return toISO.call(O);                                                                                     // 1384\n                                                                                                                      // 1385\n            // NOTE 1 The argument is ignored.                                                                        // 1386\n                                                                                                                      // 1387\n            // NOTE 2 The toJSON function is intentionally generic; it does not                                       // 1388\n            // require that its this value be a Date object. Therefore, it can be                                     // 1389\n            // transferred to other kinds of objects for use as a method. However,                                    // 1390\n            // it does require that any such object have a toISOString method. An                                     // 1391\n            // object is free to use the argument key to filter its                                                   // 1392\n            // stringification.                                                                                       // 1393\n        };                                                                                                            // 1394\n    }                                                                                                                 // 1395\n                                                                                                                      // 1396\n    // ES5 15.9.4.2                                                                                                   // 1397\n    // http://es5.github.com/#x15.9.4.2                                                                               // 1398\n    // based on work shared by Daniel Friesen (dantman)                                                               // 1399\n    // http://gist.github.com/303249                                                                                  // 1400\n    var supportsExtendedYears = Date.parse('+033658-09-27T01:46:40.000Z') === 1e15;                                   // 1401\n    var acceptsInvalidDates = !isNaN(Date.parse('2012-04-04T24:00:00.500Z')) || !isNaN(Date.parse('2012-11-31T23:59:59.000Z')) || !isNaN(Date.parse('2012-12-31T23:59:60.000Z'));\n    var doesNotParseY2KNewYear = isNaN(Date.parse('2000-01-01T00:00:00.000Z'));                                       // 1403\n    if (doesNotParseY2KNewYear || acceptsInvalidDates || !supportsExtendedYears) {                                    // 1404\n        // XXX global assignment won't work in embeddings that use                                                    // 1405\n        // an alternate object for the context.                                                                       // 1406\n        /* global Date: true */                                                                                       // 1407\n        /* eslint-disable no-undef */                                                                                 // 1408\n        var maxSafeUnsigned32Bit = Math.pow(2, 31) - 1;                                                               // 1409\n        var hasSafariSignedIntBug = isActualNaN(new Date(1970, 0, 1, 0, 0, 0, maxSafeUnsigned32Bit + 1).getTime());   // 1410\n        /* eslint-disable no-implicit-globals */                                                                      // 1411\n        Date = (function (NativeDate) {                                                                               // 1412\n        /* eslint-enable no-implicit-globals */                                                                       // 1413\n        /* eslint-enable no-undef */                                                                                  // 1414\n            // Date.length === 7                                                                                      // 1415\n            var DateShim = function Date(Y, M, D, h, m, s, ms) {                                                      // 1416\n                var length = arguments.length;                                                                        // 1417\n                var date;                                                                                             // 1418\n                if (this instanceof NativeDate) {                                                                     // 1419\n                    var seconds = s;                                                                                  // 1420\n                    var millis = ms;                                                                                  // 1421\n                    if (hasSafariSignedIntBug && length >= 7 && ms > maxSafeUnsigned32Bit) {                          // 1422\n                        // work around a Safari 8/9 bug where it treats the seconds as signed                         // 1423\n                        var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;                 // 1424\n                        var sToShift = Math.floor(msToShift / 1e3);                                                   // 1425\n                        seconds += sToShift;                                                                          // 1426\n                        millis -= sToShift * 1e3;                                                                     // 1427\n                    }                                                                                                 // 1428\n                    date = length === 1 && $String(Y) === Y ? // isString(Y)                                          // 1429\n                        // We explicitly pass it through parse:                                                       // 1430\n                        new NativeDate(DateShim.parse(Y)) :                                                           // 1431\n                        // We have to manually make calls depending on argument                                       // 1432\n                        // length here                                                                                // 1433\n                        length >= 7 ? new NativeDate(Y, M, D, h, m, seconds, millis) :                                // 1434\n                        length >= 6 ? new NativeDate(Y, M, D, h, m, seconds) :                                        // 1435\n                        length >= 5 ? new NativeDate(Y, M, D, h, m) :                                                 // 1436\n                        length >= 4 ? new NativeDate(Y, M, D, h) :                                                    // 1437\n                        length >= 3 ? new NativeDate(Y, M, D) :                                                       // 1438\n                        length >= 2 ? new NativeDate(Y, M) :                                                          // 1439\n                        length >= 1 ? new NativeDate(Y instanceof NativeDate ? +Y : Y) :                              // 1440\n                                      new NativeDate();                                                               // 1441\n                } else {                                                                                              // 1442\n                    date = NativeDate.apply(this, arguments);                                                         // 1443\n                }                                                                                                     // 1444\n                if (!isPrimitive(date)) {                                                                             // 1445\n                    // Prevent mixups with unfixed Date object                                                        // 1446\n                    defineProperties(date, { constructor: DateShim }, true);                                          // 1447\n                }                                                                                                     // 1448\n                return date;                                                                                          // 1449\n            };                                                                                                        // 1450\n                                                                                                                      // 1451\n            // 15.9.1.15 Date Time String Format.                                                                     // 1452\n            var isoDateExpression = new RegExp('^' +                                                                  // 1453\n                '(\\\\d{4}|[+-]\\\\d{6})' + // four-digit year capture or sign +                                          // 1454\n                                          // 6-digit extended year                                                    // 1455\n                '(?:-(\\\\d{2})' + // optional month capture                                                            // 1456\n                '(?:-(\\\\d{2})' + // optional day capture                                                              // 1457\n                '(?:' + // capture hours:minutes:seconds.milliseconds                                                 // 1458\n                    'T(\\\\d{2})' + // hours capture                                                                    // 1459\n                    ':(\\\\d{2})' + // minutes capture                                                                  // 1460\n                    '(?:' + // optional :seconds.milliseconds                                                         // 1461\n                        ':(\\\\d{2})' + // seconds capture                                                              // 1462\n                        '(?:(\\\\.\\\\d{1,}))?' + // milliseconds capture                                                 // 1463\n                    ')?' +                                                                                            // 1464\n                '(' + // capture UTC offset component                                                                 // 1465\n                    'Z|' + // UTC capture                                                                             // 1466\n                    '(?:' + // offset specifier +/-hours:minutes                                                      // 1467\n                        '([-+])' + // sign capture                                                                    // 1468\n                        '(\\\\d{2})' + // hours offset capture                                                          // 1469\n                        ':(\\\\d{2})' + // minutes offset capture                                                       // 1470\n                    ')' +                                                                                             // 1471\n                ')?)?)?)?' +                                                                                          // 1472\n            '$');                                                                                                     // 1473\n                                                                                                                      // 1474\n            var months = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334, 365];                                // 1475\n                                                                                                                      // 1476\n            var dayFromMonth = function dayFromMonth(year, month) {                                                   // 1477\n                var t = month > 1 ? 1 : 0;                                                                            // 1478\n                return (                                                                                              // 1479\n                    months[month] +                                                                                   // 1480\n                    Math.floor((year - 1969 + t) / 4) -                                                               // 1481\n                    Math.floor((year - 1901 + t) / 100) +                                                             // 1482\n                    Math.floor((year - 1601 + t) / 400) +                                                             // 1483\n                    365 * (year - 1970)                                                                               // 1484\n                );                                                                                                    // 1485\n            };                                                                                                        // 1486\n                                                                                                                      // 1487\n            var toUTC = function toUTC(t) {                                                                           // 1488\n                var s = 0;                                                                                            // 1489\n                var ms = t;                                                                                           // 1490\n                if (hasSafariSignedIntBug && ms > maxSafeUnsigned32Bit) {                                             // 1491\n                    // work around a Safari 8/9 bug where it treats the seconds as signed                             // 1492\n                    var msToShift = Math.floor(ms / maxSafeUnsigned32Bit) * maxSafeUnsigned32Bit;                     // 1493\n                    var sToShift = Math.floor(msToShift / 1e3);                                                       // 1494\n                    s += sToShift;                                                                                    // 1495\n                    ms -= sToShift * 1e3;                                                                             // 1496\n                }                                                                                                     // 1497\n                return $Number(new NativeDate(1970, 0, 1, 0, 0, s, ms));                                              // 1498\n            };                                                                                                        // 1499\n                                                                                                                      // 1500\n            // Copy any custom methods a 3rd party library may have added                                             // 1501\n            for (var key in NativeDate) {                                                                             // 1502\n                if (owns(NativeDate, key)) {                                                                          // 1503\n                    DateShim[key] = NativeDate[key];                                                                  // 1504\n                }                                                                                                     // 1505\n            }                                                                                                         // 1506\n                                                                                                                      // 1507\n            // Copy \"native\" methods explicitly; they may be non-enumerable                                           // 1508\n            defineProperties(DateShim, {                                                                              // 1509\n                now: NativeDate.now,                                                                                  // 1510\n                UTC: NativeDate.UTC                                                                                   // 1511\n            }, true);                                                                                                 // 1512\n            DateShim.prototype = NativeDate.prototype;                                                                // 1513\n            defineProperties(DateShim.prototype, {                                                                    // 1514\n                constructor: DateShim                                                                                 // 1515\n            }, true);                                                                                                 // 1516\n                                                                                                                      // 1517\n            // Upgrade Date.parse to handle simplified ISO 8601 strings                                               // 1518\n            var parseShim = function parse(string) {                                                                  // 1519\n                var match = isoDateExpression.exec(string);                                                           // 1520\n                if (match) {                                                                                          // 1521\n                    // parse months, days, hours, minutes, seconds, and milliseconds                                  // 1522\n                    // provide default values if necessary                                                            // 1523\n                    // parse the UTC offset component                                                                 // 1524\n                    var year = $Number(match[1]),                                                                     // 1525\n                        month = $Number(match[2] || 1) - 1,                                                           // 1526\n                        day = $Number(match[3] || 1) - 1,                                                             // 1527\n                        hour = $Number(match[4] || 0),                                                                // 1528\n                        minute = $Number(match[5] || 0),                                                              // 1529\n                        second = $Number(match[6] || 0),                                                              // 1530\n                        millisecond = Math.floor($Number(match[7] || 0) * 1000),                                      // 1531\n                        // When time zone is missed, local offset should be used                                      // 1532\n                        // (ES 5.1 bug)                                                                               // 1533\n                        // see https://bugs.ecmascript.org/show_bug.cgi?id=112                                        // 1534\n                        isLocalTime = Boolean(match[4] && !match[8]),                                                 // 1535\n                        signOffset = match[9] === '-' ? 1 : -1,                                                       // 1536\n                        hourOffset = $Number(match[10] || 0),                                                         // 1537\n                        minuteOffset = $Number(match[11] || 0),                                                       // 1538\n                        result;                                                                                       // 1539\n                    var hasMinutesOrSecondsOrMilliseconds = minute > 0 || second > 0 || millisecond > 0;              // 1540\n                    if (                                                                                              // 1541\n                        hour < (hasMinutesOrSecondsOrMilliseconds ? 24 : 25) &&                                       // 1542\n                        minute < 60 && second < 60 && millisecond < 1000 &&                                           // 1543\n                        month > -1 && month < 12 && hourOffset < 24 &&                                                // 1544\n                        minuteOffset < 60 && // detect invalid offsets                                                // 1545\n                        day > -1 &&                                                                                   // 1546\n                        day < (dayFromMonth(year, month + 1) - dayFromMonth(year, month))                             // 1547\n                    ) {                                                                                               // 1548\n                        result = (                                                                                    // 1549\n                            (dayFromMonth(year, month) + day) * 24 +                                                  // 1550\n                            hour +                                                                                    // 1551\n                            hourOffset * signOffset                                                                   // 1552\n                        ) * 60;                                                                                       // 1553\n                        result = (                                                                                    // 1554\n                            (result + minute + minuteOffset * signOffset) * 60 +                                      // 1555\n                            second                                                                                    // 1556\n                        ) * 1000 + millisecond;                                                                       // 1557\n                        if (isLocalTime) {                                                                            // 1558\n                            result = toUTC(result);                                                                   // 1559\n                        }                                                                                             // 1560\n                        if (-8.64e15 <= result && result <= 8.64e15) {                                                // 1561\n                            return result;                                                                            // 1562\n                        }                                                                                             // 1563\n                    }                                                                                                 // 1564\n                    return NaN;                                                                                       // 1565\n                }                                                                                                     // 1566\n                return NativeDate.parse.apply(this, arguments);                                                       // 1567\n            };                                                                                                        // 1568\n            defineProperties(DateShim, { parse: parseShim });                                                         // 1569\n                                                                                                                      // 1570\n            return DateShim;                                                                                          // 1571\n        }(Date));                                                                                                     // 1572\n        /* global Date: false */                                                                                      // 1573\n    }                                                                                                                 // 1574\n                                                                                                                      // 1575\n    // ES5 15.9.4.4                                                                                                   // 1576\n    // http://es5.github.com/#x15.9.4.4                                                                               // 1577\n    if (!Date.now) {                                                                                                  // 1578\n        Date.now = function now() {                                                                                   // 1579\n            return new Date().getTime();                                                                              // 1580\n        };                                                                                                            // 1581\n    }                                                                                                                 // 1582\n                                                                                                                      // 1583\n    //                                                                                                                // 1584\n    // Number                                                                                                         // 1585\n    // ======                                                                                                         // 1586\n    //                                                                                                                // 1587\n                                                                                                                      // 1588\n    // ES5.1 15.7.4.5                                                                                                 // 1589\n    // http://es5.github.com/#x15.7.4.5                                                                               // 1590\n    var hasToFixedBugs = NumberPrototype.toFixed && (                                                                 // 1591\n      (0.00008).toFixed(3) !== '0.000' ||                                                                             // 1592\n      (0.9).toFixed(0) !== '1' ||                                                                                     // 1593\n      (1.255).toFixed(2) !== '1.25' ||                                                                                // 1594\n      (1000000000000000128).toFixed(0) !== '1000000000000000128'                                                      // 1595\n    );                                                                                                                // 1596\n                                                                                                                      // 1597\n    var toFixedHelpers = {                                                                                            // 1598\n        base: 1e7,                                                                                                    // 1599\n        size: 6,                                                                                                      // 1600\n        data: [0, 0, 0, 0, 0, 0],                                                                                     // 1601\n        multiply: function multiply(n, c) {                                                                           // 1602\n            var i = -1;                                                                                               // 1603\n            var c2 = c;                                                                                               // 1604\n            while (++i < toFixedHelpers.size) {                                                                       // 1605\n                c2 += n * toFixedHelpers.data[i];                                                                     // 1606\n                toFixedHelpers.data[i] = c2 % toFixedHelpers.base;                                                    // 1607\n                c2 = Math.floor(c2 / toFixedHelpers.base);                                                            // 1608\n            }                                                                                                         // 1609\n        },                                                                                                            // 1610\n        divide: function divide(n) {                                                                                  // 1611\n            var i = toFixedHelpers.size;                                                                              // 1612\n            var c = 0;                                                                                                // 1613\n            while (--i >= 0) {                                                                                        // 1614\n                c += toFixedHelpers.data[i];                                                                          // 1615\n                toFixedHelpers.data[i] = Math.floor(c / n);                                                           // 1616\n                c = (c % n) * toFixedHelpers.base;                                                                    // 1617\n            }                                                                                                         // 1618\n        },                                                                                                            // 1619\n        numToString: function numToString() {                                                                         // 1620\n            var i = toFixedHelpers.size;                                                                              // 1621\n            var s = '';                                                                                               // 1622\n            while (--i >= 0) {                                                                                        // 1623\n                if (s !== '' || i === 0 || toFixedHelpers.data[i] !== 0) {                                            // 1624\n                    var t = $String(toFixedHelpers.data[i]);                                                          // 1625\n                    if (s === '') {                                                                                   // 1626\n                        s = t;                                                                                        // 1627\n                    } else {                                                                                          // 1628\n                        s += strSlice('0000000', 0, 7 - t.length) + t;                                                // 1629\n                    }                                                                                                 // 1630\n                }                                                                                                     // 1631\n            }                                                                                                         // 1632\n            return s;                                                                                                 // 1633\n        },                                                                                                            // 1634\n        pow: function pow(x, n, acc) {                                                                                // 1635\n            return (n === 0 ? acc : (n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc)));                 // 1636\n        },                                                                                                            // 1637\n        log: function log(x) {                                                                                        // 1638\n            var n = 0;                                                                                                // 1639\n            var x2 = x;                                                                                               // 1640\n            while (x2 >= 4096) {                                                                                      // 1641\n                n += 12;                                                                                              // 1642\n                x2 /= 4096;                                                                                           // 1643\n            }                                                                                                         // 1644\n            while (x2 >= 2) {                                                                                         // 1645\n                n += 1;                                                                                               // 1646\n                x2 /= 2;                                                                                              // 1647\n            }                                                                                                         // 1648\n            return n;                                                                                                 // 1649\n        }                                                                                                             // 1650\n    };                                                                                                                // 1651\n                                                                                                                      // 1652\n    var toFixedShim = function toFixed(fractionDigits) {                                                              // 1653\n        var f, x, s, m, e, z, j, k;                                                                                   // 1654\n                                                                                                                      // 1655\n        // Test for NaN and round fractionDigits down                                                                 // 1656\n        f = $Number(fractionDigits);                                                                                  // 1657\n        f = isActualNaN(f) ? 0 : Math.floor(f);                                                                       // 1658\n                                                                                                                      // 1659\n        if (f < 0 || f > 20) {                                                                                        // 1660\n            throw new RangeError('Number.toFixed called with invalid number of decimals');                            // 1661\n        }                                                                                                             // 1662\n                                                                                                                      // 1663\n        x = $Number(this);                                                                                            // 1664\n                                                                                                                      // 1665\n        if (isActualNaN(x)) {                                                                                         // 1666\n            return 'NaN';                                                                                             // 1667\n        }                                                                                                             // 1668\n                                                                                                                      // 1669\n        // If it is too big or small, return the string value of the number                                           // 1670\n        if (x <= -1e21 || x >= 1e21) {                                                                                // 1671\n            return $String(x);                                                                                        // 1672\n        }                                                                                                             // 1673\n                                                                                                                      // 1674\n        s = '';                                                                                                       // 1675\n                                                                                                                      // 1676\n        if (x < 0) {                                                                                                  // 1677\n            s = '-';                                                                                                  // 1678\n            x = -x;                                                                                                   // 1679\n        }                                                                                                             // 1680\n                                                                                                                      // 1681\n        m = '0';                                                                                                      // 1682\n                                                                                                                      // 1683\n        if (x > 1e-21) {                                                                                              // 1684\n            // 1e-21 < x < 1e21                                                                                       // 1685\n            // -70 < log2(x) < 70                                                                                     // 1686\n            e = toFixedHelpers.log(x * toFixedHelpers.pow(2, 69, 1)) - 69;                                            // 1687\n            z = (e < 0 ? x * toFixedHelpers.pow(2, -e, 1) : x / toFixedHelpers.pow(2, e, 1));                         // 1688\n            z *= 0x10000000000000; // Math.pow(2, 52);                                                                // 1689\n            e = 52 - e;                                                                                               // 1690\n                                                                                                                      // 1691\n            // -18 < e < 122                                                                                          // 1692\n            // x = z / 2 ^ e                                                                                          // 1693\n            if (e > 0) {                                                                                              // 1694\n                toFixedHelpers.multiply(0, z);                                                                        // 1695\n                j = f;                                                                                                // 1696\n                                                                                                                      // 1697\n                while (j >= 7) {                                                                                      // 1698\n                    toFixedHelpers.multiply(1e7, 0);                                                                  // 1699\n                    j -= 7;                                                                                           // 1700\n                }                                                                                                     // 1701\n                                                                                                                      // 1702\n                toFixedHelpers.multiply(toFixedHelpers.pow(10, j, 1), 0);                                             // 1703\n                j = e - 1;                                                                                            // 1704\n                                                                                                                      // 1705\n                while (j >= 23) {                                                                                     // 1706\n                    toFixedHelpers.divide(1 << 23);                                                                   // 1707\n                    j -= 23;                                                                                          // 1708\n                }                                                                                                     // 1709\n                                                                                                                      // 1710\n                toFixedHelpers.divide(1 << j);                                                                        // 1711\n                toFixedHelpers.multiply(1, 1);                                                                        // 1712\n                toFixedHelpers.divide(2);                                                                             // 1713\n                m = toFixedHelpers.numToString();                                                                     // 1714\n            } else {                                                                                                  // 1715\n                toFixedHelpers.multiply(0, z);                                                                        // 1716\n                toFixedHelpers.multiply(1 << (-e), 0);                                                                // 1717\n                m = toFixedHelpers.numToString() + strSlice('0.00000000000000000000', 2, 2 + f);                      // 1718\n            }                                                                                                         // 1719\n        }                                                                                                             // 1720\n                                                                                                                      // 1721\n        if (f > 0) {                                                                                                  // 1722\n            k = m.length;                                                                                             // 1723\n                                                                                                                      // 1724\n            if (k <= f) {                                                                                             // 1725\n                m = s + strSlice('0.0000000000000000000', 0, f - k + 2) + m;                                          // 1726\n            } else {                                                                                                  // 1727\n                m = s + strSlice(m, 0, k - f) + '.' + strSlice(m, k - f);                                             // 1728\n            }                                                                                                         // 1729\n        } else {                                                                                                      // 1730\n            m = s + m;                                                                                                // 1731\n        }                                                                                                             // 1732\n                                                                                                                      // 1733\n        return m;                                                                                                     // 1734\n    };                                                                                                                // 1735\n    defineProperties(NumberPrototype, { toFixed: toFixedShim }, hasToFixedBugs);                                      // 1736\n                                                                                                                      // 1737\n    var hasToPrecisionUndefinedBug = (function () {                                                                   // 1738\n        try {                                                                                                         // 1739\n            return 1.0.toPrecision(undefined) === '1';                                                                // 1740\n        } catch (e) {                                                                                                 // 1741\n            return true;                                                                                              // 1742\n        }                                                                                                             // 1743\n    }());                                                                                                             // 1744\n    var originalToPrecision = NumberPrototype.toPrecision;                                                            // 1745\n    defineProperties(NumberPrototype, {                                                                               // 1746\n        toPrecision: function toPrecision(precision) {                                                                // 1747\n            return typeof precision === 'undefined' ? originalToPrecision.call(this) : originalToPrecision.call(this, precision);\n        }                                                                                                             // 1749\n    }, hasToPrecisionUndefinedBug);                                                                                   // 1750\n                                                                                                                      // 1751\n    //                                                                                                                // 1752\n    // String                                                                                                         // 1753\n    // ======                                                                                                         // 1754\n    //                                                                                                                // 1755\n                                                                                                                      // 1756\n    // ES5 15.5.4.14                                                                                                  // 1757\n    // http://es5.github.com/#x15.5.4.14                                                                              // 1758\n                                                                                                                      // 1759\n    // [bugfix, IE lt 9, firefox 4, Konqueror, Opera, obscure browsers]                                               // 1760\n    // Many browsers do not split properly with regular expressions or they                                           // 1761\n    // do not perform the split correctly under obscure conditions.                                                   // 1762\n    // See http://blog.stevenlevithan.com/archives/cross-browser-split                                                // 1763\n    // I've tested in many browsers and this seems to cover the deviant ones:                                         // 1764\n    //    'ab'.split(/(?:ab)*/) should be [\"\", \"\"], not [\"\"]                                                          // 1765\n    //    '.'.split(/(.?)(.?)/) should be [\"\", \".\", \"\", \"\"], not [\"\", \"\"]                                             // 1766\n    //    'tesst'.split(/(s)*/) should be [\"t\", undefined, \"e\", \"s\", \"t\"], not                                        // 1767\n    //       [undefined, \"t\", undefined, \"e\", ...]                                                                    // 1768\n    //    ''.split(/.?/) should be [], not [\"\"]                                                                       // 1769\n    //    '.'.split(/()()/) should be [\".\"], not [\"\", \"\", \".\"]                                                        // 1770\n                                                                                                                      // 1771\n    if (                                                                                                              // 1772\n        'ab'.split(/(?:ab)*/).length !== 2 ||                                                                         // 1773\n        '.'.split(/(.?)(.?)/).length !== 4 ||                                                                         // 1774\n        'tesst'.split(/(s)*/)[1] === 't' ||                                                                           // 1775\n        'test'.split(/(?:)/, -1).length !== 4 ||                                                                      // 1776\n        ''.split(/.?/).length ||                                                                                      // 1777\n        '.'.split(/()()/).length > 1                                                                                  // 1778\n    ) {                                                                                                               // 1779\n        (function () {                                                                                                // 1780\n            var compliantExecNpcg = typeof (/()??/).exec('')[1] === 'undefined'; // NPCG: nonparticipating capturing group\n            var maxSafe32BitInt = Math.pow(2, 32) - 1;                                                                // 1782\n                                                                                                                      // 1783\n            StringPrototype.split = function (separator, limit) {                                                     // 1784\n                var string = String(this);                                                                            // 1785\n                if (typeof separator === 'undefined' && limit === 0) {                                                // 1786\n                    return [];                                                                                        // 1787\n                }                                                                                                     // 1788\n                                                                                                                      // 1789\n                // If `separator` is not a regex, use native split                                                    // 1790\n                if (!isRegex(separator)) {                                                                            // 1791\n                    return strSplit(this, separator, limit);                                                          // 1792\n                }                                                                                                     // 1793\n                                                                                                                      // 1794\n                var output = [];                                                                                      // 1795\n                var flags = (separator.ignoreCase ? 'i' : '') +                                                       // 1796\n                            (separator.multiline ? 'm' : '') +                                                        // 1797\n                            (separator.unicode ? 'u' : '') + // in ES6                                                // 1798\n                            (separator.sticky ? 'y' : ''), // Firefox 3+ and ES6                                      // 1799\n                    lastLastIndex = 0,                                                                                // 1800\n                    // Make `global` and avoid `lastIndex` issues by working with a copy                              // 1801\n                    separator2, match, lastIndex, lastLength;                                                         // 1802\n                var separatorCopy = new RegExp(separator.source, flags + 'g');                                        // 1803\n                if (!compliantExecNpcg) {                                                                             // 1804\n                    // Doesn't need flags gy, but they don't hurt                                                     // 1805\n                    separator2 = new RegExp('^' + separatorCopy.source + '$(?!\\\\s)', flags);                          // 1806\n                }                                                                                                     // 1807\n                /* Values for `limit`, per the spec:                                                                  // 1808\n                 * If undefined: 4294967295 // maxSafe32BitInt                                                        // 1809\n                 * If 0, Infinity, or NaN: 0                                                                          // 1810\n                 * If positive number: limit = Math.floor(limit); if (limit > 4294967295) limit -= 4294967296;        // 1811\n                 * If negative number: 4294967296 - Math.floor(Math.abs(limit))                                       // 1812\n                 * If other: Type-convert, then use the above rules                                                   // 1813\n                 */                                                                                                   // 1814\n                var splitLimit = typeof limit === 'undefined' ? maxSafe32BitInt : ES.ToUint32(limit);                 // 1815\n                match = separatorCopy.exec(string);                                                                   // 1816\n                while (match) {                                                                                       // 1817\n                    // `separatorCopy.lastIndex` is not reliable cross-browser                                        // 1818\n                    lastIndex = match.index + match[0].length;                                                        // 1819\n                    if (lastIndex > lastLastIndex) {                                                                  // 1820\n                        pushCall(output, strSlice(string, lastLastIndex, match.index));                               // 1821\n                        // Fix browsers whose `exec` methods don't consistently return `undefined` for                // 1822\n                        // nonparticipating capturing groups                                                          // 1823\n                        if (!compliantExecNpcg && match.length > 1) {                                                 // 1824\n                            /* eslint-disable no-loop-func */                                                         // 1825\n                            match[0].replace(separator2, function () {                                                // 1826\n                                for (var i = 1; i < arguments.length - 2; i++) {                                      // 1827\n                                    if (typeof arguments[i] === 'undefined') {                                        // 1828\n                                        match[i] = void 0;                                                            // 1829\n                                    }                                                                                 // 1830\n                                }                                                                                     // 1831\n                            });                                                                                       // 1832\n                            /* eslint-enable no-loop-func */                                                          // 1833\n                        }                                                                                             // 1834\n                        if (match.length > 1 && match.index < string.length) {                                        // 1835\n                            array_push.apply(output, arraySlice(match, 1));                                           // 1836\n                        }                                                                                             // 1837\n                        lastLength = match[0].length;                                                                 // 1838\n                        lastLastIndex = lastIndex;                                                                    // 1839\n                        if (output.length >= splitLimit) {                                                            // 1840\n                            break;                                                                                    // 1841\n                        }                                                                                             // 1842\n                    }                                                                                                 // 1843\n                    if (separatorCopy.lastIndex === match.index) {                                                    // 1844\n                        separatorCopy.lastIndex++; // Avoid an infinite loop                                          // 1845\n                    }                                                                                                 // 1846\n                    match = separatorCopy.exec(string);                                                               // 1847\n                }                                                                                                     // 1848\n                if (lastLastIndex === string.length) {                                                                // 1849\n                    if (lastLength || !separatorCopy.test('')) {                                                      // 1850\n                        pushCall(output, '');                                                                         // 1851\n                    }                                                                                                 // 1852\n                } else {                                                                                              // 1853\n                    pushCall(output, strSlice(string, lastLastIndex));                                                // 1854\n                }                                                                                                     // 1855\n                return output.length > splitLimit ? arraySlice(output, 0, splitLimit) : output;                       // 1856\n            };                                                                                                        // 1857\n        }());                                                                                                         // 1858\n                                                                                                                      // 1859\n    // [bugfix, chrome]                                                                                               // 1860\n    // If separator is undefined, then the result array contains just one String,                                     // 1861\n    // which is the this value (converted to a String). If limit is not undefined,                                    // 1862\n    // then the output array is truncated so that it contains no more than limit                                      // 1863\n    // elements.                                                                                                      // 1864\n    // \"0\".split(undefined, 0) -> []                                                                                  // 1865\n    } else if ('0'.split(void 0, 0).length) {                                                                         // 1866\n        StringPrototype.split = function split(separator, limit) {                                                    // 1867\n            if (typeof separator === 'undefined' && limit === 0) {                                                    // 1868\n                return [];                                                                                            // 1869\n            }                                                                                                         // 1870\n            return strSplit(this, separator, limit);                                                                  // 1871\n        };                                                                                                            // 1872\n    }                                                                                                                 // 1873\n                                                                                                                      // 1874\n    var str_replace = StringPrototype.replace;                                                                        // 1875\n    var replaceReportsGroupsCorrectly = (function () {                                                                // 1876\n        var groups = [];                                                                                              // 1877\n        'x'.replace(/x(.)?/g, function (match, group) {                                                               // 1878\n            pushCall(groups, group);                                                                                  // 1879\n        });                                                                                                           // 1880\n        return groups.length === 1 && typeof groups[0] === 'undefined';                                               // 1881\n    }());                                                                                                             // 1882\n                                                                                                                      // 1883\n    if (!replaceReportsGroupsCorrectly) {                                                                             // 1884\n        StringPrototype.replace = function replace(searchValue, replaceValue) {                                       // 1885\n            var isFn = isCallable(replaceValue);                                                                      // 1886\n            var hasCapturingGroups = isRegex(searchValue) && (/\\)[*?]/).test(searchValue.source);                     // 1887\n            if (!isFn || !hasCapturingGroups) {                                                                       // 1888\n                return str_replace.call(this, searchValue, replaceValue);                                             // 1889\n            } else {                                                                                                  // 1890\n                var wrappedReplaceValue = function (match) {                                                          // 1891\n                    var length = arguments.length;                                                                    // 1892\n                    var originalLastIndex = searchValue.lastIndex;                                                    // 1893\n                    searchValue.lastIndex = 0;                                                                        // 1894\n                    var args = searchValue.exec(match) || [];                                                         // 1895\n                    searchValue.lastIndex = originalLastIndex;                                                        // 1896\n                    pushCall(args, arguments[length - 2], arguments[length - 1]);                                     // 1897\n                    return replaceValue.apply(this, args);                                                            // 1898\n                };                                                                                                    // 1899\n                return str_replace.call(this, searchValue, wrappedReplaceValue);                                      // 1900\n            }                                                                                                         // 1901\n        };                                                                                                            // 1902\n    }                                                                                                                 // 1903\n                                                                                                                      // 1904\n    // ECMA-262, 3rd B.2.3                                                                                            // 1905\n    // Not an ECMAScript standard, although ECMAScript 3rd Edition has a                                              // 1906\n    // non-normative section suggesting uniform semantics and it should be                                            // 1907\n    // normalized across all browsers                                                                                 // 1908\n    // [bugfix, IE lt 9] IE < 9 substr() with negative value not working in IE                                        // 1909\n    var string_substr = StringPrototype.substr;                                                                       // 1910\n    var hasNegativeSubstrBug = ''.substr && '0b'.substr(-1) !== 'b';                                                  // 1911\n    defineProperties(StringPrototype, {                                                                               // 1912\n        substr: function substr(start, length) {                                                                      // 1913\n            var normalizedStart = start;                                                                              // 1914\n            if (start < 0) {                                                                                          // 1915\n                normalizedStart = max(this.length + start, 0);                                                        // 1916\n            }                                                                                                         // 1917\n            return string_substr.call(this, normalizedStart, length);                                                 // 1918\n        }                                                                                                             // 1919\n    }, hasNegativeSubstrBug);                                                                                         // 1920\n                                                                                                                      // 1921\n    // ES5 15.5.4.20                                                                                                  // 1922\n    // whitespace from: http://es5.github.io/#x15.5.4.20                                                              // 1923\n    var ws = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +                                     // 1924\n        '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028' +                                        // 1925\n        '\\u2029\\uFEFF';                                                                                               // 1926\n    var zeroWidth = '\\u200b';                                                                                         // 1927\n    var wsRegexChars = '[' + ws + ']';                                                                                // 1928\n    var trimBeginRegexp = new RegExp('^' + wsRegexChars + wsRegexChars + '*');                                        // 1929\n    var trimEndRegexp = new RegExp(wsRegexChars + wsRegexChars + '*$');                                               // 1930\n    var hasTrimWhitespaceBug = StringPrototype.trim && (ws.trim() || !zeroWidth.trim());                              // 1931\n    defineProperties(StringPrototype, {                                                                               // 1932\n        // http://blog.stevenlevithan.com/archives/faster-trim-javascript                                             // 1933\n        // http://perfectionkills.com/whitespace-deviations/                                                          // 1934\n        trim: function trim() {                                                                                       // 1935\n            if (typeof this === 'undefined' || this === null) {                                                       // 1936\n                throw new TypeError(\"can't convert \" + this + ' to object');                                          // 1937\n            }                                                                                                         // 1938\n            return $String(this).replace(trimBeginRegexp, '').replace(trimEndRegexp, '');                             // 1939\n        }                                                                                                             // 1940\n    }, hasTrimWhitespaceBug);                                                                                         // 1941\n    var trim = call.bind(String.prototype.trim);                                                                      // 1942\n                                                                                                                      // 1943\n    var hasLastIndexBug = StringPrototype.lastIndexOf && 'abcあい'.lastIndexOf('あい', 2) !== -1;                         // 1944\n    defineProperties(StringPrototype, {                                                                               // 1945\n        lastIndexOf: function lastIndexOf(searchString) {                                                             // 1946\n            if (typeof this === 'undefined' || this === null) {                                                       // 1947\n                throw new TypeError(\"can't convert \" + this + ' to object');                                          // 1948\n            }                                                                                                         // 1949\n            var S = $String(this);                                                                                    // 1950\n            var searchStr = $String(searchString);                                                                    // 1951\n            var numPos = arguments.length > 1 ? $Number(arguments[1]) : NaN;                                          // 1952\n            var pos = isActualNaN(numPos) ? Infinity : ES.ToInteger(numPos);                                          // 1953\n            var start = min(max(pos, 0), S.length);                                                                   // 1954\n            var searchLen = searchStr.length;                                                                         // 1955\n            var k = start + searchLen;                                                                                // 1956\n            while (k > 0) {                                                                                           // 1957\n                k = max(0, k - searchLen);                                                                            // 1958\n                var index = strIndexOf(strSlice(S, k, start + searchLen), searchStr);                                 // 1959\n                if (index !== -1) {                                                                                   // 1960\n                    return k + index;                                                                                 // 1961\n                }                                                                                                     // 1962\n            }                                                                                                         // 1963\n            return -1;                                                                                                // 1964\n        }                                                                                                             // 1965\n    }, hasLastIndexBug);                                                                                              // 1966\n                                                                                                                      // 1967\n    var originalLastIndexOf = StringPrototype.lastIndexOf;                                                            // 1968\n    defineProperties(StringPrototype, {                                                                               // 1969\n        lastIndexOf: function lastIndexOf(searchString) {                                                             // 1970\n            return originalLastIndexOf.apply(this, arguments);                                                        // 1971\n        }                                                                                                             // 1972\n    }, StringPrototype.lastIndexOf.length !== 1);                                                                     // 1973\n                                                                                                                      // 1974\n    // ES-5 15.1.2.2                                                                                                  // 1975\n    /* eslint-disable radix */                                                                                        // 1976\n    if (parseInt(ws + '08') !== 8 || parseInt(ws + '0x16') !== 22) {                                                  // 1977\n    /* eslint-enable radix */                                                                                         // 1978\n        /* global parseInt: true */                                                                                   // 1979\n        parseInt = (function (origParseInt) {                                                                         // 1980\n            var hexRegex = /^[\\-+]?0[xX]/;                                                                            // 1981\n            return function parseInt(str, radix) {                                                                    // 1982\n                var string = trim(String(str));                                                                       // 1983\n                var defaultedRadix = $Number(radix) || (hexRegex.test(string) ? 16 : 10);                             // 1984\n                return origParseInt(string, defaultedRadix);                                                          // 1985\n            };                                                                                                        // 1986\n        }(parseInt));                                                                                                 // 1987\n    }                                                                                                                 // 1988\n                                                                                                                      // 1989\n    // https://es5.github.io/#x15.1.2.3                                                                               // 1990\n    if (1 / parseFloat('-0') !== -Infinity) {                                                                         // 1991\n        /* global parseFloat: true */                                                                                 // 1992\n        parseFloat = (function (origParseFloat) {                                                                     // 1993\n            return function parseFloat(string) {                                                                      // 1994\n                var inputString = trim(String(string));                                                               // 1995\n                var result = origParseFloat(inputString);                                                             // 1996\n                return result === 0 && strSlice(inputString, 0, 1) === '-' ? -0 : result;                             // 1997\n            };                                                                                                        // 1998\n        }(parseFloat));                                                                                               // 1999\n    }                                                                                                                 // 2000\n                                                                                                                      // 2001\n    if (String(new RangeError('test')) !== 'RangeError: test') {                                                      // 2002\n        var errorToStringShim = function toString() {                                                                 // 2003\n            if (typeof this === 'undefined' || this === null) {                                                       // 2004\n                throw new TypeError(\"can't convert \" + this + ' to object');                                          // 2005\n            }                                                                                                         // 2006\n            var name = this.name;                                                                                     // 2007\n            if (typeof name === 'undefined') {                                                                        // 2008\n                name = 'Error';                                                                                       // 2009\n            } else if (typeof name !== 'string') {                                                                    // 2010\n                name = $String(name);                                                                                 // 2011\n            }                                                                                                         // 2012\n            var msg = this.message;                                                                                   // 2013\n            if (typeof msg === 'undefined') {                                                                         // 2014\n                msg = '';                                                                                             // 2015\n            } else if (typeof msg !== 'string') {                                                                     // 2016\n                msg = $String(msg);                                                                                   // 2017\n            }                                                                                                         // 2018\n            if (!name) {                                                                                              // 2019\n                return msg;                                                                                           // 2020\n            }                                                                                                         // 2021\n            if (!msg) {                                                                                               // 2022\n                return name;                                                                                          // 2023\n            }                                                                                                         // 2024\n            return name + ': ' + msg;                                                                                 // 2025\n        };                                                                                                            // 2026\n        // can't use defineProperties here because of toString enumeration issue in IE <= 8                           // 2027\n        Error.prototype.toString = errorToStringShim;                                                                 // 2028\n    }                                                                                                                 // 2029\n                                                                                                                      // 2030\n    if (supportsDescriptors) {                                                                                        // 2031\n        var ensureNonEnumerable = function (obj, prop) {                                                              // 2032\n            if (isEnum(obj, prop)) {                                                                                  // 2033\n                var desc = Object.getOwnPropertyDescriptor(obj, prop);                                                // 2034\n                if (desc.configurable) {                                                                              // 2035\n                    desc.enumerable = false;                                                                          // 2036\n                    Object.defineProperty(obj, prop, desc);                                                           // 2037\n                }                                                                                                     // 2038\n            }                                                                                                         // 2039\n        };                                                                                                            // 2040\n        ensureNonEnumerable(Error.prototype, 'message');                                                              // 2041\n        if (Error.prototype.message !== '') {                                                                         // 2042\n            Error.prototype.message = '';                                                                             // 2043\n        }                                                                                                             // 2044\n        ensureNonEnumerable(Error.prototype, 'name');                                                                 // 2045\n    }                                                                                                                 // 2046\n                                                                                                                      // 2047\n    if (String(/a/mig) !== '/a/gim') {                                                                                // 2048\n        var regexToString = function toString() {                                                                     // 2049\n            var str = '/' + this.source + '/';                                                                        // 2050\n            if (this.global) {                                                                                        // 2051\n                str += 'g';                                                                                           // 2052\n            }                                                                                                         // 2053\n            if (this.ignoreCase) {                                                                                    // 2054\n                str += 'i';                                                                                           // 2055\n            }                                                                                                         // 2056\n            if (this.multiline) {                                                                                     // 2057\n                str += 'm';                                                                                           // 2058\n            }                                                                                                         // 2059\n            return str;                                                                                               // 2060\n        };                                                                                                            // 2061\n        // can't use defineProperties here because of toString enumeration issue in IE <= 8                           // 2062\n        RegExp.prototype.toString = regexToString;                                                                    // 2063\n    }                                                                                                                 // 2064\n}));                                                                                                                  // 2065\n                                                                                                                      // 2066\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"es5-sham.js\":function(require,exports,module){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// node_modules/meteor/es5-shim/node_modules/es5-shim/es5-sham.js                                                     //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n/*!                                                                                                                   // 1\n * https://github.com/es-shims/es5-shim                                                                               // 2\n * @license es5-shim Copyright 2009-2015 by contributors, MIT License                                                 // 3\n * see https://github.com/es-shims/es5-shim/blob/master/LICENSE                                                       // 4\n */                                                                                                                   // 5\n                                                                                                                      // 6\n// vim: ts=4 sts=4 sw=4 expandtab                                                                                     // 7\n                                                                                                                      // 8\n// Add semicolon to prevent IIFE from being passed as argument to concatenated code.                                  // 9\n;                                                                                                                     // 10\n                                                                                                                      // 11\n// UMD (Universal Module Definition)                                                                                  // 12\n// see https://github.com/umdjs/umd/blob/master/templates/returnExports.js                                            // 13\n(function (root, factory) {                                                                                           // 14\n    'use strict';                                                                                                     // 15\n                                                                                                                      // 16\n    /* global define, exports, module */                                                                              // 17\n    if (typeof define === 'function' && define.amd) {                                                                 // 18\n        // AMD. Register as an anonymous module.                                                                      // 19\n        define(factory);                                                                                              // 20\n    } else if (typeof exports === 'object') {                                                                         // 21\n        // Node. Does not work with strict CommonJS, but                                                              // 22\n        // only CommonJS-like enviroments that support module.exports,                                                // 23\n        // like Node.                                                                                                 // 24\n        module.exports = factory();                                                                                   // 25\n    } else {                                                                                                          // 26\n        // Browser globals (root is window)                                                                           // 27\n        root.returnExports = factory();                                                                               // 28\n    }                                                                                                                 // 29\n}(this, function () {                                                                                                 // 30\n                                                                                                                      // 31\n    var call = Function.call;                                                                                         // 32\n    var prototypeOfObject = Object.prototype;                                                                         // 33\n    var owns = call.bind(prototypeOfObject.hasOwnProperty);                                                           // 34\n    var isEnumerable = call.bind(prototypeOfObject.propertyIsEnumerable);                                             // 35\n    var toStr = call.bind(prototypeOfObject.toString);                                                                // 36\n                                                                                                                      // 37\n    // If JS engine supports accessors creating shortcuts.                                                            // 38\n    var defineGetter;                                                                                                 // 39\n    var defineSetter;                                                                                                 // 40\n    var lookupGetter;                                                                                                 // 41\n    var lookupSetter;                                                                                                 // 42\n    var supportsAccessors = owns(prototypeOfObject, '__defineGetter__');                                              // 43\n    if (supportsAccessors) {                                                                                          // 44\n        /* eslint-disable no-underscore-dangle */                                                                     // 45\n        defineGetter = call.bind(prototypeOfObject.__defineGetter__);                                                 // 46\n        defineSetter = call.bind(prototypeOfObject.__defineSetter__);                                                 // 47\n        lookupGetter = call.bind(prototypeOfObject.__lookupGetter__);                                                 // 48\n        lookupSetter = call.bind(prototypeOfObject.__lookupSetter__);                                                 // 49\n        /* eslint-enable no-underscore-dangle */                                                                      // 50\n    }                                                                                                                 // 51\n                                                                                                                      // 52\n    var isPrimitive = function isPrimitive(o) {                                                                       // 53\n        return o == null || (typeof o !== 'object' && typeof o !== 'function');                                       // 54\n    };                                                                                                                // 55\n                                                                                                                      // 56\n    // ES5 15.2.3.2                                                                                                   // 57\n    // http://es5.github.com/#x15.2.3.2                                                                               // 58\n    if (!Object.getPrototypeOf) {                                                                                     // 59\n        // https://github.com/es-shims/es5-shim/issues#issue/2                                                        // 60\n        // http://ejohn.org/blog/objectgetprototypeof/                                                                // 61\n        // recommended by fschaefer on github                                                                         // 62\n        //                                                                                                            // 63\n        // sure, and webreflection says ^_^                                                                           // 64\n        // ... this will nerever possibly return null                                                                 // 65\n        // ... Opera Mini breaks here with infinite loops                                                             // 66\n        Object.getPrototypeOf = function getPrototypeOf(object) {                                                     // 67\n            /* eslint-disable no-proto */                                                                             // 68\n            var proto = object.__proto__;                                                                             // 69\n            /* eslint-enable no-proto */                                                                              // 70\n            if (proto || proto === null) {                                                                            // 71\n                return proto;                                                                                         // 72\n            } else if (toStr(object.constructor) === '[object Function]') {                                           // 73\n                return object.constructor.prototype;                                                                  // 74\n            } else if (object instanceof Object) {                                                                    // 75\n                return prototypeOfObject;                                                                             // 76\n            } else {                                                                                                  // 77\n                // Correctly return null for Objects created with `Object.create(null)`                               // 78\n                // (shammed or native) or `{ __proto__: null}`.  Also returns null for                                // 79\n                // cross-realm objects on browsers that lack `__proto__` support (like                                // 80\n                // IE <11), but that's the best we can do.                                                            // 81\n                return null;                                                                                          // 82\n            }                                                                                                         // 83\n        };                                                                                                            // 84\n    }                                                                                                                 // 85\n                                                                                                                      // 86\n    // ES5 15.2.3.3                                                                                                   // 87\n    // http://es5.github.com/#x15.2.3.3                                                                               // 88\n                                                                                                                      // 89\n    var doesGetOwnPropertyDescriptorWork = function doesGetOwnPropertyDescriptorWork(object) {                        // 90\n        try {                                                                                                         // 91\n            object.sentinel = 0;                                                                                      // 92\n            return Object.getOwnPropertyDescriptor(object, 'sentinel').value === 0;                                   // 93\n        } catch (exception) {                                                                                         // 94\n            return false;                                                                                             // 95\n        }                                                                                                             // 96\n    };                                                                                                                // 97\n                                                                                                                      // 98\n    // check whether getOwnPropertyDescriptor works if it's given. Otherwise, shim partially.                         // 99\n    if (Object.defineProperty) {                                                                                      // 100\n        var getOwnPropertyDescriptorWorksOnObject = doesGetOwnPropertyDescriptorWork({});                             // 101\n        var getOwnPropertyDescriptorWorksOnDom = typeof document === 'undefined' ||                                   // 102\n        doesGetOwnPropertyDescriptorWork(document.createElement('div'));                                              // 103\n        if (!getOwnPropertyDescriptorWorksOnDom || !getOwnPropertyDescriptorWorksOnObject) {                          // 104\n            var getOwnPropertyDescriptorFallback = Object.getOwnPropertyDescriptor;                                   // 105\n        }                                                                                                             // 106\n    }                                                                                                                 // 107\n                                                                                                                      // 108\n    if (!Object.getOwnPropertyDescriptor || getOwnPropertyDescriptorFallback) {                                       // 109\n        var ERR_NON_OBJECT = 'Object.getOwnPropertyDescriptor called on a non-object: ';                              // 110\n                                                                                                                      // 111\n        /* eslint-disable no-proto */                                                                                 // 112\n        Object.getOwnPropertyDescriptor = function getOwnPropertyDescriptor(object, property) {                       // 113\n            if (isPrimitive(object)) {                                                                                // 114\n                throw new TypeError(ERR_NON_OBJECT + object);                                                         // 115\n            }                                                                                                         // 116\n                                                                                                                      // 117\n            // make a valiant attempt to use the real getOwnPropertyDescriptor                                        // 118\n            // for I8's DOM elements.                                                                                 // 119\n            if (getOwnPropertyDescriptorFallback) {                                                                   // 120\n                try {                                                                                                 // 121\n                    return getOwnPropertyDescriptorFallback.call(Object, object, property);                           // 122\n                } catch (exception) {                                                                                 // 123\n                    // try the shim if the real one doesn't work                                                      // 124\n                }                                                                                                     // 125\n            }                                                                                                         // 126\n                                                                                                                      // 127\n            var descriptor;                                                                                           // 128\n                                                                                                                      // 129\n            // If object does not owns property return undefined immediately.                                         // 130\n            if (!owns(object, property)) {                                                                            // 131\n                return descriptor;                                                                                    // 132\n            }                                                                                                         // 133\n                                                                                                                      // 134\n            // If object has a property then it's for sure `configurable`, and                                        // 135\n            // probably `enumerable`. Detect enumerability though.                                                    // 136\n            descriptor = {                                                                                            // 137\n                enumerable: isEnumerable(object, property),                                                           // 138\n                configurable: true                                                                                    // 139\n            };                                                                                                        // 140\n                                                                                                                      // 141\n            // If JS engine supports accessor properties then property may be a                                       // 142\n            // getter or setter.                                                                                      // 143\n            if (supportsAccessors) {                                                                                  // 144\n                // Unfortunately `__lookupGetter__` will return a getter even                                         // 145\n                // if object has own non getter property along with a same named                                      // 146\n                // inherited getter. To avoid misbehavior we temporary remove                                         // 147\n                // `__proto__` so that `__lookupGetter__` will return getter only                                     // 148\n                // if it's owned by an object.                                                                        // 149\n                var prototype = object.__proto__;                                                                     // 150\n                var notPrototypeOfObject = object !== prototypeOfObject;                                              // 151\n                // avoid recursion problem, breaking in Opera Mini when                                               // 152\n                // Object.getOwnPropertyDescriptor(Object.prototype, 'toString')                                      // 153\n                // or any other Object.prototype accessor                                                             // 154\n                if (notPrototypeOfObject) {                                                                           // 155\n                    object.__proto__ = prototypeOfObject;                                                             // 156\n                }                                                                                                     // 157\n                                                                                                                      // 158\n                var getter = lookupGetter(object, property);                                                          // 159\n                var setter = lookupSetter(object, property);                                                          // 160\n                                                                                                                      // 161\n                if (notPrototypeOfObject) {                                                                           // 162\n                    // Once we have getter and setter we can put values back.                                         // 163\n                    object.__proto__ = prototype;                                                                     // 164\n                }                                                                                                     // 165\n                                                                                                                      // 166\n                if (getter || setter) {                                                                               // 167\n                    if (getter) {                                                                                     // 168\n                        descriptor.get = getter;                                                                      // 169\n                    }                                                                                                 // 170\n                    if (setter) {                                                                                     // 171\n                        descriptor.set = setter;                                                                      // 172\n                    }                                                                                                 // 173\n                    // If it was accessor property we're done and return here                                         // 174\n                    // in order to avoid adding `value` to the descriptor.                                            // 175\n                    return descriptor;                                                                                // 176\n                }                                                                                                     // 177\n            }                                                                                                         // 178\n                                                                                                                      // 179\n            // If we got this far we know that object has an own property that is                                     // 180\n            // not an accessor so we set it as a value and return descriptor.                                         // 181\n            descriptor.value = object[property];                                                                      // 182\n            descriptor.writable = true;                                                                               // 183\n            return descriptor;                                                                                        // 184\n        };                                                                                                            // 185\n        /* eslint-enable no-proto */                                                                                  // 186\n    }                                                                                                                 // 187\n                                                                                                                      // 188\n    // ES5 15.2.3.4                                                                                                   // 189\n    // http://es5.github.com/#x15.2.3.4                                                                               // 190\n    if (!Object.getOwnPropertyNames) {                                                                                // 191\n        Object.getOwnPropertyNames = function getOwnPropertyNames(object) {                                           // 192\n            return Object.keys(object);                                                                               // 193\n        };                                                                                                            // 194\n    }                                                                                                                 // 195\n                                                                                                                      // 196\n    // ES5 15.2.3.5                                                                                                   // 197\n    // http://es5.github.com/#x15.2.3.5                                                                               // 198\n    if (!Object.create) {                                                                                             // 199\n                                                                                                                      // 200\n        // Contributed by Brandon Benvie, October, 2012                                                               // 201\n        var createEmpty;                                                                                              // 202\n        var supportsProto = !({ __proto__: null } instanceof Object);                                                 // 203\n                            // the following produces false positives                                                 // 204\n                            // in Opera Mini => not a reliable check                                                  // 205\n                            // Object.prototype.__proto__ === null                                                    // 206\n                                                                                                                      // 207\n        // Check for document.domain and active x support                                                             // 208\n        // No need to use active x approach when document.domain is not set                                           // 209\n        // see https://github.com/es-shims/es5-shim/issues/150                                                        // 210\n        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346                                 // 211\n        /* global ActiveXObject */                                                                                    // 212\n        var shouldUseActiveX = function shouldUseActiveX() {                                                          // 213\n            // return early if document.domain not set                                                                // 214\n            if (!document.domain) {                                                                                   // 215\n                return false;                                                                                         // 216\n            }                                                                                                         // 217\n                                                                                                                      // 218\n            try {                                                                                                     // 219\n                return !!new ActiveXObject('htmlfile');                                                               // 220\n            } catch (exception) {                                                                                     // 221\n                return false;                                                                                         // 222\n            }                                                                                                         // 223\n        };                                                                                                            // 224\n                                                                                                                      // 225\n        // This supports IE8 when document.domain is used                                                             // 226\n        // see https://github.com/es-shims/es5-shim/issues/150                                                        // 227\n        // variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346                                 // 228\n        var getEmptyViaActiveX = function getEmptyViaActiveX() {                                                      // 229\n            var empty;                                                                                                // 230\n            var xDoc;                                                                                                 // 231\n                                                                                                                      // 232\n            xDoc = new ActiveXObject('htmlfile');                                                                     // 233\n                                                                                                                      // 234\n            var script = 'script';                                                                                    // 235\n            xDoc.write('<' + script + '></' + script + '>');                                                          // 236\n            xDoc.close();                                                                                             // 237\n                                                                                                                      // 238\n            empty = xDoc.parentWindow.Object.prototype;                                                               // 239\n            xDoc = null;                                                                                              // 240\n                                                                                                                      // 241\n            return empty;                                                                                             // 242\n        };                                                                                                            // 243\n                                                                                                                      // 244\n        // The original implementation using an iframe                                                                // 245\n        // before the activex approach was added                                                                      // 246\n        // see https://github.com/es-shims/es5-shim/issues/150                                                        // 247\n        var getEmptyViaIFrame = function getEmptyViaIFrame() {                                                        // 248\n            var iframe = document.createElement('iframe');                                                            // 249\n            var parent = document.body || document.documentElement;                                                   // 250\n            var empty;                                                                                                // 251\n                                                                                                                      // 252\n            iframe.style.display = 'none';                                                                            // 253\n            parent.appendChild(iframe);                                                                               // 254\n            /* eslint-disable no-script-url */                                                                        // 255\n            iframe.src = 'javascript:';                                                                               // 256\n            /* eslint-enable no-script-url */                                                                         // 257\n                                                                                                                      // 258\n            empty = iframe.contentWindow.Object.prototype;                                                            // 259\n            parent.removeChild(iframe);                                                                               // 260\n            iframe = null;                                                                                            // 261\n                                                                                                                      // 262\n            return empty;                                                                                             // 263\n        };                                                                                                            // 264\n                                                                                                                      // 265\n        /* global document */                                                                                         // 266\n        if (supportsProto || typeof document === 'undefined') {                                                       // 267\n            createEmpty = function () {                                                                               // 268\n                return { __proto__: null };                                                                           // 269\n            };                                                                                                        // 270\n        } else {                                                                                                      // 271\n            // In old IE __proto__ can't be used to manually set `null`, nor does                                     // 272\n            // any other method exist to make an object that inherits from nothing,                                   // 273\n            // aside from Object.prototype itself. Instead, create a new global                                       // 274\n            // object and *steal* its Object.prototype and strip it bare. This is                                     // 275\n            // used as the prototype to create nullary objects.                                                       // 276\n            createEmpty = function () {                                                                               // 277\n                // Determine which approach to use                                                                    // 278\n                // see https://github.com/es-shims/es5-shim/issues/150                                                // 279\n                var empty = shouldUseActiveX() ? getEmptyViaActiveX() : getEmptyViaIFrame();                          // 280\n                                                                                                                      // 281\n                delete empty.constructor;                                                                             // 282\n                delete empty.hasOwnProperty;                                                                          // 283\n                delete empty.propertyIsEnumerable;                                                                    // 284\n                delete empty.isPrototypeOf;                                                                           // 285\n                delete empty.toLocaleString;                                                                          // 286\n                delete empty.toString;                                                                                // 287\n                delete empty.valueOf;                                                                                 // 288\n                                                                                                                      // 289\n                var Empty = function Empty() {};                                                                      // 290\n                Empty.prototype = empty;                                                                              // 291\n                // short-circuit future calls                                                                         // 292\n                createEmpty = function () {                                                                           // 293\n                    return new Empty();                                                                               // 294\n                };                                                                                                    // 295\n                return new Empty();                                                                                   // 296\n            };                                                                                                        // 297\n        }                                                                                                             // 298\n                                                                                                                      // 299\n        Object.create = function create(prototype, properties) {                                                      // 300\n                                                                                                                      // 301\n            var object;                                                                                               // 302\n            var Type = function Type() {}; // An empty constructor.                                                   // 303\n                                                                                                                      // 304\n            if (prototype === null) {                                                                                 // 305\n                object = createEmpty();                                                                               // 306\n            } else {                                                                                                  // 307\n                if (prototype !== null && isPrimitive(prototype)) {                                                   // 308\n                    // In the native implementation `parent` can be `null`                                            // 309\n                    // OR *any* `instanceof Object`  (Object|Function|Array|RegExp|etc)                               // 310\n                    // Use `typeof` tho, b/c in old IE, DOM elements are not `instanceof Object`                      // 311\n                    // like they are in modern browsers. Using `Object.create` on DOM elements                        // 312\n                    // is...err...probably inappropriate, but the native version allows for it.                       // 313\n                    throw new TypeError('Object prototype may only be an Object or null'); // same msg as Chrome      // 314\n                }                                                                                                     // 315\n                Type.prototype = prototype;                                                                           // 316\n                object = new Type();                                                                                  // 317\n                // IE has no built-in implementation of `Object.getPrototypeOf`                                       // 318\n                // neither `__proto__`, but this manually setting `__proto__` will                                    // 319\n                // guarantee that `Object.getPrototypeOf` will work as expected with                                  // 320\n                // objects created using `Object.create`                                                              // 321\n                /* eslint-disable no-proto */                                                                         // 322\n                object.__proto__ = prototype;                                                                         // 323\n                /* eslint-enable no-proto */                                                                          // 324\n            }                                                                                                         // 325\n                                                                                                                      // 326\n            if (properties !== void 0) {                                                                              // 327\n                Object.defineProperties(object, properties);                                                          // 328\n            }                                                                                                         // 329\n                                                                                                                      // 330\n            return object;                                                                                            // 331\n        };                                                                                                            // 332\n    }                                                                                                                 // 333\n                                                                                                                      // 334\n    // ES5 15.2.3.6                                                                                                   // 335\n    // http://es5.github.com/#x15.2.3.6                                                                               // 336\n                                                                                                                      // 337\n    // Patch for WebKit and IE8 standard mode                                                                         // 338\n    // Designed by hax <hax.github.com>                                                                               // 339\n    // related issue: https://github.com/es-shims/es5-shim/issues#issue/5                                             // 340\n    // IE8 Reference:                                                                                                 // 341\n    //     http://msdn.microsoft.com/en-us/library/dd282900.aspx                                                      // 342\n    //     http://msdn.microsoft.com/en-us/library/dd229916.aspx                                                      // 343\n    // WebKit Bugs:                                                                                                   // 344\n    //     https://bugs.webkit.org/show_bug.cgi?id=36423                                                              // 345\n                                                                                                                      // 346\n    var doesDefinePropertyWork = function doesDefinePropertyWork(object) {                                            // 347\n        try {                                                                                                         // 348\n            Object.defineProperty(object, 'sentinel', {});                                                            // 349\n            return 'sentinel' in object;                                                                              // 350\n        } catch (exception) {                                                                                         // 351\n            return false;                                                                                             // 352\n        }                                                                                                             // 353\n    };                                                                                                                // 354\n                                                                                                                      // 355\n    // check whether defineProperty works if it's given. Otherwise,                                                   // 356\n    // shim partially.                                                                                                // 357\n    if (Object.defineProperty) {                                                                                      // 358\n        var definePropertyWorksOnObject = doesDefinePropertyWork({});                                                 // 359\n        var definePropertyWorksOnDom = typeof document === 'undefined' ||                                             // 360\n            doesDefinePropertyWork(document.createElement('div'));                                                    // 361\n        if (!definePropertyWorksOnObject || !definePropertyWorksOnDom) {                                              // 362\n            var definePropertyFallback = Object.defineProperty,                                                       // 363\n                definePropertiesFallback = Object.defineProperties;                                                   // 364\n        }                                                                                                             // 365\n    }                                                                                                                 // 366\n                                                                                                                      // 367\n    if (!Object.defineProperty || definePropertyFallback) {                                                           // 368\n        var ERR_NON_OBJECT_DESCRIPTOR = 'Property description must be an object: ';                                   // 369\n        var ERR_NON_OBJECT_TARGET = 'Object.defineProperty called on non-object: ';                                   // 370\n        var ERR_ACCESSORS_NOT_SUPPORTED = 'getters & setters can not be defined on this javascript engine';           // 371\n                                                                                                                      // 372\n        Object.defineProperty = function defineProperty(object, property, descriptor) {                               // 373\n            if (isPrimitive(object)) {                                                                                // 374\n                throw new TypeError(ERR_NON_OBJECT_TARGET + object);                                                  // 375\n            }                                                                                                         // 376\n            if (isPrimitive(descriptor)) {                                                                            // 377\n                throw new TypeError(ERR_NON_OBJECT_DESCRIPTOR + descriptor);                                          // 378\n            }                                                                                                         // 379\n            // make a valiant attempt to use the real defineProperty                                                  // 380\n            // for I8's DOM elements.                                                                                 // 381\n            if (definePropertyFallback) {                                                                             // 382\n                try {                                                                                                 // 383\n                    return definePropertyFallback.call(Object, object, property, descriptor);                         // 384\n                } catch (exception) {                                                                                 // 385\n                    // try the shim if the real one doesn't work                                                      // 386\n                }                                                                                                     // 387\n            }                                                                                                         // 388\n                                                                                                                      // 389\n            // If it's a data property.                                                                               // 390\n            if ('value' in descriptor) {                                                                              // 391\n                // fail silently if 'writable', 'enumerable', or 'configurable'                                       // 392\n                // are requested but not supported                                                                    // 393\n                /*                                                                                                    // 394\n                // alternate approach:                                                                                // 395\n                if ( // can't implement these features; allow false but not true                                      // 396\n                    ('writable' in descriptor && !descriptor.writable) ||                                             // 397\n                    ('enumerable' in descriptor && !descriptor.enumerable) ||                                         // 398\n                    ('configurable' in descriptor && !descriptor.configurable)                                        // 399\n                ))                                                                                                    // 400\n                    throw new RangeError(                                                                             // 401\n                        'This implementation of Object.defineProperty does not support configurable, enumerable, or writable.'\n                    );                                                                                                // 403\n                */                                                                                                    // 404\n                                                                                                                      // 405\n                if (supportsAccessors && (lookupGetter(object, property) || lookupSetter(object, property))) {        // 406\n                    // As accessors are supported only on engines implementing                                        // 407\n                    // `__proto__` we can safely override `__proto__` while defining                                  // 408\n                    // a property to make sure that we don't hit an inherited                                         // 409\n                    // accessor.                                                                                      // 410\n                    /* eslint-disable no-proto */                                                                     // 411\n                    var prototype = object.__proto__;                                                                 // 412\n                    object.__proto__ = prototypeOfObject;                                                             // 413\n                    // Deleting a property anyway since getter / setter may be                                        // 414\n                    // defined on object itself.                                                                      // 415\n                    delete object[property];                                                                          // 416\n                    object[property] = descriptor.value;                                                              // 417\n                    // Setting original `__proto__` back now.                                                         // 418\n                    object.__proto__ = prototype;                                                                     // 419\n                    /* eslint-enable no-proto */                                                                      // 420\n                } else {                                                                                              // 421\n                    object[property] = descriptor.value;                                                              // 422\n                }                                                                                                     // 423\n            } else {                                                                                                  // 424\n                var hasGetter = 'get' in descriptor;                                                                  // 425\n                var hasSetter = 'set' in descriptor;                                                                  // 426\n                if (!supportsAccessors && (hasGetter || hasSetter)) {                                                 // 427\n                    throw new TypeError(ERR_ACCESSORS_NOT_SUPPORTED);                                                 // 428\n                }                                                                                                     // 429\n                // If we got that far then getters and setters can be defined !!                                      // 430\n                if (hasGetter) {                                                                                      // 431\n                    defineGetter(object, property, descriptor.get);                                                   // 432\n                }                                                                                                     // 433\n                if (hasSetter) {                                                                                      // 434\n                    defineSetter(object, property, descriptor.set);                                                   // 435\n                }                                                                                                     // 436\n            }                                                                                                         // 437\n            return object;                                                                                            // 438\n        };                                                                                                            // 439\n    }                                                                                                                 // 440\n                                                                                                                      // 441\n    // ES5 15.2.3.7                                                                                                   // 442\n    // http://es5.github.com/#x15.2.3.7                                                                               // 443\n    if (!Object.defineProperties || definePropertiesFallback) {                                                       // 444\n        Object.defineProperties = function defineProperties(object, properties) {                                     // 445\n            // make a valiant attempt to use the real defineProperties                                                // 446\n            if (definePropertiesFallback) {                                                                           // 447\n                try {                                                                                                 // 448\n                    return definePropertiesFallback.call(Object, object, properties);                                 // 449\n                } catch (exception) {                                                                                 // 450\n                    // try the shim if the real one doesn't work                                                      // 451\n                }                                                                                                     // 452\n            }                                                                                                         // 453\n                                                                                                                      // 454\n            Object.keys(properties).forEach(function (property) {                                                     // 455\n                if (property !== '__proto__') {                                                                       // 456\n                    Object.defineProperty(object, property, properties[property]);                                    // 457\n                }                                                                                                     // 458\n            });                                                                                                       // 459\n            return object;                                                                                            // 460\n        };                                                                                                            // 461\n    }                                                                                                                 // 462\n                                                                                                                      // 463\n    // ES5 15.2.3.8                                                                                                   // 464\n    // http://es5.github.com/#x15.2.3.8                                                                               // 465\n    if (!Object.seal) {                                                                                               // 466\n        Object.seal = function seal(object) {                                                                         // 467\n            if (Object(object) !== object) {                                                                          // 468\n                throw new TypeError('Object.seal can only be called on Objects.');                                    // 469\n            }                                                                                                         // 470\n            // this is misleading and breaks feature-detection, but                                                   // 471\n            // allows \"securable\" code to \"gracefully\" degrade to working                                             // 472\n            // but insecure code.                                                                                     // 473\n            return object;                                                                                            // 474\n        };                                                                                                            // 475\n    }                                                                                                                 // 476\n                                                                                                                      // 477\n    // ES5 15.2.3.9                                                                                                   // 478\n    // http://es5.github.com/#x15.2.3.9                                                                               // 479\n    if (!Object.freeze) {                                                                                             // 480\n        Object.freeze = function freeze(object) {                                                                     // 481\n            if (Object(object) !== object) {                                                                          // 482\n                throw new TypeError('Object.freeze can only be called on Objects.');                                  // 483\n            }                                                                                                         // 484\n            // this is misleading and breaks feature-detection, but                                                   // 485\n            // allows \"securable\" code to \"gracefully\" degrade to working                                             // 486\n            // but insecure code.                                                                                     // 487\n            return object;                                                                                            // 488\n        };                                                                                                            // 489\n    }                                                                                                                 // 490\n                                                                                                                      // 491\n    // detect a Rhino bug and patch it                                                                                // 492\n    try {                                                                                                             // 493\n        Object.freeze(function () {});                                                                                // 494\n    } catch (exception) {                                                                                             // 495\n        Object.freeze = (function (freezeObject) {                                                                    // 496\n            return function freeze(object) {                                                                          // 497\n                if (typeof object === 'function') {                                                                   // 498\n                    return object;                                                                                    // 499\n                } else {                                                                                              // 500\n                    return freezeObject(object);                                                                      // 501\n                }                                                                                                     // 502\n            };                                                                                                        // 503\n        }(Object.freeze));                                                                                            // 504\n    }                                                                                                                 // 505\n                                                                                                                      // 506\n    // ES5 15.2.3.10                                                                                                  // 507\n    // http://es5.github.com/#x15.2.3.10                                                                              // 508\n    if (!Object.preventExtensions) {                                                                                  // 509\n        Object.preventExtensions = function preventExtensions(object) {                                               // 510\n            if (Object(object) !== object) {                                                                          // 511\n                throw new TypeError('Object.preventExtensions can only be called on Objects.');                       // 512\n            }                                                                                                         // 513\n            // this is misleading and breaks feature-detection, but                                                   // 514\n            // allows \"securable\" code to \"gracefully\" degrade to working                                             // 515\n            // but insecure code.                                                                                     // 516\n            return object;                                                                                            // 517\n        };                                                                                                            // 518\n    }                                                                                                                 // 519\n                                                                                                                      // 520\n    // ES5 15.2.3.11                                                                                                  // 521\n    // http://es5.github.com/#x15.2.3.11                                                                              // 522\n    if (!Object.isSealed) {                                                                                           // 523\n        Object.isSealed = function isSealed(object) {                                                                 // 524\n            if (Object(object) !== object) {                                                                          // 525\n                throw new TypeError('Object.isSealed can only be called on Objects.');                                // 526\n            }                                                                                                         // 527\n            return false;                                                                                             // 528\n        };                                                                                                            // 529\n    }                                                                                                                 // 530\n                                                                                                                      // 531\n    // ES5 15.2.3.12                                                                                                  // 532\n    // http://es5.github.com/#x15.2.3.12                                                                              // 533\n    if (!Object.isFrozen) {                                                                                           // 534\n        Object.isFrozen = function isFrozen(object) {                                                                 // 535\n            if (Object(object) !== object) {                                                                          // 536\n                throw new TypeError('Object.isFrozen can only be called on Objects.');                                // 537\n            }                                                                                                         // 538\n            return false;                                                                                             // 539\n        };                                                                                                            // 540\n    }                                                                                                                 // 541\n                                                                                                                      // 542\n    // ES5 15.2.3.13                                                                                                  // 543\n    // http://es5.github.com/#x15.2.3.13                                                                              // 544\n    if (!Object.isExtensible) {                                                                                       // 545\n        Object.isExtensible = function isExtensible(object) {                                                         // 546\n            // 1. If Type(O) is not Object throw a TypeError exception.                                               // 547\n            if (Object(object) !== object) {                                                                          // 548\n                throw new TypeError('Object.isExtensible can only be called on Objects.');                            // 549\n            }                                                                                                         // 550\n            // 2. Return the Boolean value of the [[Extensible]] internal property of O.                              // 551\n            var name = '';                                                                                            // 552\n            while (owns(object, name)) {                                                                              // 553\n                name += '?';                                                                                          // 554\n            }                                                                                                         // 555\n            object[name] = true;                                                                                      // 556\n            var returnValue = owns(object, name);                                                                     // 557\n            delete object[name];                                                                                      // 558\n            return returnValue;                                                                                       // 559\n        };                                                                                                            // 560\n    }                                                                                                                 // 561\n                                                                                                                      // 562\n}));                                                                                                                  // 563\n                                                                                                                      // 564\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/es5-shim/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['es5-shim'] = exports;\n\n})();\n","servePath":"/packages/es5-shim.js"}]