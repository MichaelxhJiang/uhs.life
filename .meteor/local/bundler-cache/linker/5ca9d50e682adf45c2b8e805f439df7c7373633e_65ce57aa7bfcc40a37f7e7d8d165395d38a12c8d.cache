[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar FS = Package['cfs:base-package'].FS;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar EJSON = Package.ejson.EJSON;\nvar HTTP = Package['cfs:http-methods'].HTTP;\n\n/* Package-scope variables */\nvar rootUrlPathPrefix, baseUrl;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/cfs_access-point/packages/cfs_access-point.js            //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {                                                       // 1\n                                                                     // 2\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cfs:access-point/access-point-common.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nrootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\";                                             // 1\n// Adjust the rootUrlPathPrefix if necessary                                                                          // 2\nif (rootUrlPathPrefix.length > 0) {                                                                                   // 3\n  if (rootUrlPathPrefix.slice(0, 1) !== '/') {                                                                        // 4\n    rootUrlPathPrefix = '/' + rootUrlPathPrefix;                                                                      // 5\n  }                                                                                                                   // 6\n  if (rootUrlPathPrefix.slice(-1) === '/') {                                                                          // 7\n    rootUrlPathPrefix = rootUrlPathPrefix.slice(0, -1);                                                               // 8\n  }                                                                                                                   // 9\n}                                                                                                                     // 10\n                                                                                                                      // 11\n// prepend ROOT_URL when isCordova                                                                                    // 12\nif (Meteor.isCordova) {                                                                                               // 13\n  rootUrlPathPrefix = Meteor.absoluteUrl(rootUrlPathPrefix.replace(/^\\/+/, '')).replace(/\\/+$/, '');                  // 14\n}                                                                                                                     // 15\n                                                                                                                      // 16\nbaseUrl = '/cfs';                                                                                                     // 17\nFS.HTTP = FS.HTTP || {};                                                                                              // 18\n                                                                                                                      // 19\n// Note the upload URL so that client uploader packages know what it is                                               // 20\nFS.HTTP.uploadUrl = rootUrlPathPrefix + baseUrl + '/files';                                                           // 21\n                                                                                                                      // 22\n/**                                                                                                                   // 23\n * @method FS.HTTP.setBaseUrl                                                                                         // 24\n * @public                                                                                                            // 25\n * @param {String} newBaseUrl - Change the base URL for the HTTP GET and DELETE endpoints.                            // 26\n * @returns {undefined}                                                                                               // 27\n */                                                                                                                   // 28\nFS.HTTP.setBaseUrl = function setBaseUrl(newBaseUrl) {                                                                // 29\n                                                                                                                      // 30\n  // Adjust the baseUrl if necessary                                                                                  // 31\n  if (newBaseUrl.slice(0, 1) !== '/') {                                                                               // 32\n    newBaseUrl = '/' + newBaseUrl;                                                                                    // 33\n  }                                                                                                                   // 34\n  if (newBaseUrl.slice(-1) === '/') {                                                                                 // 35\n    newBaseUrl = newBaseUrl.slice(0, -1);                                                                             // 36\n  }                                                                                                                   // 37\n                                                                                                                      // 38\n  // Update the base URL                                                                                              // 39\n  baseUrl = newBaseUrl;                                                                                               // 40\n                                                                                                                      // 41\n  // Change the upload URL so that client uploader packages know what it is                                           // 42\n  FS.HTTP.uploadUrl = rootUrlPathPrefix + baseUrl + '/files';                                                         // 43\n                                                                                                                      // 44\n  // Remount URLs with the new baseUrl, unmounting the old, on the server only.                                       // 45\n  // If existingMountPoints is empty, then we haven't run the server startup                                          // 46\n  // code yet, so this new URL will be used at that point for the initial mount.                                      // 47\n  if (Meteor.isServer && !FS.Utility.isEmpty(_existingMountPoints)) {                                                 // 48\n    mountUrls();                                                                                                      // 49\n  }                                                                                                                   // 50\n};                                                                                                                    // 51\n                                                                                                                      // 52\n/*                                                                                                                    // 53\n * FS.File extensions                                                                                                 // 54\n */                                                                                                                   // 55\n                                                                                                                      // 56\n/**                                                                                                                   // 57\n * @method FS.File.prototype.url Construct the file url                                                               // 58\n * @public                                                                                                            // 59\n * @param {Object} [options]                                                                                          // 60\n * @param {String} [options.store] Name of the store to get from. If not defined, the first store defined in `options.stores` for the collection on the client is used.\n * @param {Boolean} [options.auth=null] Add authentication token to the URL query string? By default, a token for the current logged in user is added on the client. Set this to `false` to omit the token. Set this to a string to provide your own token. Set this to a number to specify an expiration time for the token in seconds.\n * @param {Boolean} [options.download=false] Should headers be set to force a download? Typically this means that clicking the link with this URL will download the file to the user's Downloads folder instead of displaying the file in the browser.\n * @param {Boolean} [options.brokenIsFine=false] Return the URL even if we know it's currently a broken link because the file hasn't been saved in the requested store yet.\n * @param {Boolean} [options.metadata=false] Return the URL for the file metadata access point rather than the file itself.\n * @param {String} [options.uploading=null] A URL to return while the file is being uploaded.                         // 66\n * @param {String} [options.storing=null] A URL to return while the file is being stored.                             // 67\n * @param {String} [options.filename=null] Override the filename that should appear at the end of the URL. By default it is the name of the file in the requested store.\n *                                                                                                                    // 69\n * Returns the HTTP URL for getting the file or its metadata.                                                         // 70\n */                                                                                                                   // 71\nFS.File.prototype.url = function(options) {                                                                           // 72\n  var self = this;                                                                                                    // 73\n  options = options || {};                                                                                            // 74\n  options = FS.Utility.extend({                                                                                       // 75\n    store: null,                                                                                                      // 76\n    auth: null,                                                                                                       // 77\n    download: false,                                                                                                  // 78\n    metadata: false,                                                                                                  // 79\n    brokenIsFine: false,                                                                                              // 80\n    uploading: null, // return this URL while uploading                                                               // 81\n    storing: null, // return this URL while storing                                                                   // 82\n    filename: null // override the filename that is shown to the user                                                 // 83\n  }, options.hash || options); // check for \"hash\" prop if called as helper                                           // 84\n                                                                                                                      // 85\n  // Primarily useful for displaying a temporary image while uploading an image                                       // 86\n  if (options.uploading && !self.isUploaded()) {                                                                      // 87\n    return options.uploading;                                                                                         // 88\n  }                                                                                                                   // 89\n                                                                                                                      // 90\n  if (self.isMounted()) {                                                                                             // 91\n    // See if we've stored in the requested store yet                                                                 // 92\n    var storeName = options.store || self.collection.primaryStore.name;                                               // 93\n    if (!self.hasStored(storeName)) {                                                                                 // 94\n      if (options.storing) {                                                                                          // 95\n        return options.storing;                                                                                       // 96\n      } else if (!options.brokenIsFine) {                                                                             // 97\n        // We want to return null if we know the URL will be a broken                                                 // 98\n        // link because then we can avoid rendering broken links, broken                                              // 99\n        // images, etc.                                                                                               // 100\n        return null;                                                                                                  // 101\n      }                                                                                                               // 102\n    }                                                                                                                 // 103\n                                                                                                                      // 104\n    // Add filename to end of URL if we can determine one                                                             // 105\n    var filename = options.filename || self.name({store: storeName});                                                 // 106\n    if (typeof filename === \"string\" && filename.length) {                                                            // 107\n      filename = '/' + filename;                                                                                      // 108\n    } else {                                                                                                          // 109\n      filename = '';                                                                                                  // 110\n    }                                                                                                                 // 111\n                                                                                                                      // 112\n    // TODO: Could we somehow figure out if the collection requires login?                                            // 113\n    var authToken = '';                                                                                               // 114\n    if (Meteor.isClient && typeof Accounts !== \"undefined\" && typeof Accounts._storedLoginToken === \"function\") {     // 115\n      if (options.auth !== false) {                                                                                   // 116\n        // Add reactive deps on the user                                                                              // 117\n        Meteor.userId();                                                                                              // 118\n                                                                                                                      // 119\n        var authObject = {                                                                                            // 120\n          authToken: Accounts._storedLoginToken() || ''                                                               // 121\n        };                                                                                                            // 122\n                                                                                                                      // 123\n        // If it's a number, we use that as the expiration time (in seconds)                                          // 124\n        if (options.auth === +options.auth) {                                                                         // 125\n          authObject.expiration = FS.HTTP.now() + options.auth * 1000;                                                // 126\n        }                                                                                                             // 127\n                                                                                                                      // 128\n        // Set the authToken                                                                                          // 129\n        var authString = JSON.stringify(authObject);                                                                  // 130\n        authToken = FS.Utility.btoa(authString);                                                                      // 131\n      }                                                                                                               // 132\n    } else if (typeof options.auth === \"string\") {                                                                    // 133\n      // If the user supplies auth token the user will be responsible for                                             // 134\n      // updating                                                                                                     // 135\n      authToken = options.auth;                                                                                       // 136\n    }                                                                                                                 // 137\n                                                                                                                      // 138\n    // Construct query string                                                                                         // 139\n    var params = {};                                                                                                  // 140\n    if (authToken !== '') {                                                                                           // 141\n      params.token = authToken;                                                                                       // 142\n    }                                                                                                                 // 143\n    if (options.download) {                                                                                           // 144\n      params.download = true;                                                                                         // 145\n    }                                                                                                                 // 146\n    if (options.store) {                                                                                              // 147\n      // We use options.store here instead of storeName because we want to omit the queryString                       // 148\n      // whenever possible, allowing users to have \"clean\" URLs if they want. The server will                         // 149\n      // assume the first store defined on the server, which means that we are assuming that                          // 150\n      // the first on the client is also the first on the server. If that's not the case, the                         // 151\n      // store option should be supplied.                                                                             // 152\n      params.store = options.store;                                                                                   // 153\n    }                                                                                                                 // 154\n    var queryString = FS.Utility.encodeParams(params);                                                                // 155\n    if (queryString.length) {                                                                                         // 156\n      queryString = '?' + queryString;                                                                                // 157\n    }                                                                                                                 // 158\n                                                                                                                      // 159\n    // Determine which URL to use                                                                                     // 160\n    var area;                                                                                                         // 161\n    if (options.metadata) {                                                                                           // 162\n      area = '/record';                                                                                               // 163\n    } else {                                                                                                          // 164\n      area = '/files';                                                                                                // 165\n    }                                                                                                                 // 166\n                                                                                                                      // 167\n    // Construct and return the http method url                                                                       // 168\n    return rootUrlPathPrefix + baseUrl + area + '/' + self.collection.name + '/' + self._id + filename + queryString; // 169\n  }                                                                                                                   // 170\n                                                                                                                      // 171\n};                                                                                                                    // 172\n                                                                                                                      // 173\n                                                                                                                      // 174\n                                                                                                                      // 175\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 185\n}).call(this);                                                       // 186\n                                                                     // 187\n                                                                     // 188\n                                                                     // 189\n                                                                     // 190\n                                                                     // 191\n                                                                     // 192\n(function () {                                                       // 193\n                                                                     // 194\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cfs:access-point/access-point-client.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nFS.HTTP.setHeadersForGet = function setHeadersForGet() {                                                              // 1\n  // Client Stub                                                                                                      // 2\n};                                                                                                                    // 3\n                                                                                                                      // 4\nFS.HTTP.now = function() {                                                                                            // 5\n  return new Date(new Date() + FS.HTTP._serverTimeDiff);                                                              // 6\n};                                                                                                                    // 7\n                                                                                                                      // 8\n// Returns the localstorage if its found and working                                                                  // 9\n// TODO: check if this works in IE                                                                                    // 10\n// could use Meteor._localStorage - just needs a rewrite                                                              // 11\nFS.HTTP._storage = function() {                                                                                       // 12\n  var storage,                                                                                                        // 13\n      fail,                                                                                                           // 14\n      uid;                                                                                                            // 15\n  try {                                                                                                               // 16\n    uid = \"test\";                                                                                                     // 17\n    (storage = window.localStorage).setItem(uid, uid);                                                                // 18\n    fail = (storage.getItem(uid) !== uid);                                                                            // 19\n    storage.removeItem(uid);                                                                                          // 20\n    if (fail) {                                                                                                       // 21\n      storage = false;                                                                                                // 22\n    }                                                                                                                 // 23\n  } catch(e) {                                                                                                        // 24\n    console.log(\"Error initializing storage for FS.HTTP\");                                                            // 25\n    console.log(e);                                                                                                   // 26\n  }                                                                                                                   // 27\n                                                                                                                      // 28\n  return storage;                                                                                                     // 29\n};                                                                                                                    // 30\n                                                                                                                      // 31\n// get our storage if found                                                                                           // 32\nFS.HTTP.storage = FS.HTTP._storage();                                                                                 // 33\n                                                                                                                      // 34\nFS.HTTP._prefix = 'fsHTTP.';                                                                                          // 35\n                                                                                                                      // 36\nFS.HTTP._serverTimeDiff = 0; // Time difference in ms                                                                 // 37\n                                                                                                                      // 38\nif (FS.HTTP.storage) {                                                                                                // 39\n  // Initialize the FS.HTTP._serverTimeDiff                                                                           // 40\n  FS.HTTP._serverTimeDiff = (1*FS.HTTP.storage.getItem(FS.HTTP._prefix+'timeDiff')) || 0;                             // 41\n  // At client startup we figure out the time difference between server and                                           // 42\n  // client time - this includes lag and timezone                                                                     // 43\n  Meteor.startup(function() {                                                                                         // 44\n    // Call the server method an get server time                                                                      // 45\n    HTTP.get(rootUrlPathPrefix + '/cfs/servertime', function(error, result) {                                         // 46\n      if (!error) {                                                                                                   // 47\n        // Update our server time diff                                                                                // 48\n        var dateNew = new Date(+result.content);                                                                      // 49\n        FS.HTTP._serverTimeDiff = dateNew - new Date();// - lag or/and timezone                                       // 50\n        // Update the localstorage                                                                                    // 51\n        FS.HTTP.storage.setItem(FS.HTTP._prefix + 'timeDiff', FS.HTTP._serverTimeDiff);                               // 52\n      } else {                                                                                                        // 53\n      \tconsole.log(error.message);                                                                                    // 54\n      }                                                                                                               // 55\n    }); // EO Server call                                                                                             // 56\n  });                                                                                                                 // 57\n}                                                                                                                     // 58\n                                                                                                                      // 59\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                     // 261\n}).call(this);                                                       // 262\n                                                                     // 263\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['cfs:access-point'] = {};\n\n})();\n","servePath":"/packages/cfs_access-point.js"}]