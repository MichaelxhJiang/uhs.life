[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar Retry = Package.retry.Retry;\nvar MongoID = Package['mongo-id'].MongoID;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar DDPCommon = Package['ddp-common'].DDPCommon;\nvar DDP = Package['ddp-client'].DDP;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar RoutePolicy = Package.routepolicy.RoutePolicy;\nvar Hook = Package['callback-hook'].Hook;\nvar LocalCollection = Package.minimongo.LocalCollection;\nvar Minimongo = Package.minimongo.Minimongo;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-server'].Symbol;\nvar Map = Package['ecmascript-runtime-server'].Map;\nvar Set = Package['ecmascript-runtime-server'].Set;\n\n/* Package-scope variables */\nvar StreamServer, DDPServer, Server;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"ddp-server\":{\"stream_server.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ddp-server/stream_server.js                                                                               //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar url = Npm.require('url'); // By default, we use the permessage-deflate extension with default                     // 1\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid                                      // 4\n// JSON. If it represents a falsey value, then we do not use permessage-deflate                                       // 5\n// at all; otherwise, the JSON value is used as an argument to deflate's                                              // 6\n// configure method; see                                                                                              // 7\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md                                              // 8\n//                                                                                                                    // 9\n// (We do this in an _.once instead of at startup, because we don't want to                                           // 10\n// crash the tool during isopacket load if your JSON doesn't parse. This is only                                      // 11\n// a problem because the tool has to load the DDP server code just in order to                                        // 12\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)                                               // 13\n                                                                                                                      //\n                                                                                                                      //\nvar websocketExtensions = _.once(function () {                                                                        // 14\n  var extensions = [];                                                                                                // 15\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n                                                                                                                      //\n  if (websocketCompressionConfig) {                                                                                   // 19\n    extensions.push(Npm.require('permessage-deflate').configure(websocketCompressionConfig));                         // 20\n  }                                                                                                                   // 23\n                                                                                                                      //\n  return extensions;                                                                                                  // 25\n});                                                                                                                   // 26\n                                                                                                                      //\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\";                                                // 28\n                                                                                                                      //\nStreamServer = function () {                                                                                          // 30\n  var self = this;                                                                                                    // 31\n  self.registration_callbacks = [];                                                                                   // 32\n  self.open_sockets = []; // Because we are installing directly onto WebApp.httpServer instead of using               // 33\n  // WebApp.app, we have to process the path prefix ourselves.                                                        // 36\n                                                                                                                      //\n  self.prefix = pathPrefix + '/sockjs';                                                                               // 37\n  RoutePolicy.declare(self.prefix + '/', 'network'); // set up sockjs                                                 // 38\n                                                                                                                      //\n  var sockjs = Npm.require('sockjs');                                                                                 // 41\n                                                                                                                      //\n  var serverOptions = {                                                                                               // 42\n    prefix: self.prefix,                                                                                              // 43\n    log: function () {},                                                                                              // 44\n    // this is the default, but we code it explicitly because we depend                                               // 45\n    // on it in stream_client:HEARTBEAT_TIMEOUT                                                                       // 46\n    heartbeat_delay: 45000,                                                                                           // 47\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU                                       // 48\n    // bound for that much time, SockJS might not notice that the user has                                            // 49\n    // reconnected because the timer (of disconnect_delay ms) can fire before                                         // 50\n    // SockJS processes the new connection. Eventually we'll fix this by not                                          // 51\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which                                       // 52\n    // converts to Unix sockets) but for now, raise the delay.                                                        // 53\n    disconnect_delay: 60 * 1000,                                                                                      // 54\n    // Set the USE_JSESSIONID environment variable to enable setting the                                              // 55\n    // JSESSIONID cookie. This is useful for setting up proxies with                                                  // 56\n    // session affinity.                                                                                              // 57\n    jsessionid: !!process.env.USE_JSESSIONID                                                                          // 58\n  }; // If you know your server environment (eg, proxies) will prevent websockets                                     // 42\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,                                               // 62\n  // browsers) will not waste time attempting to use them.                                                            // 63\n  // (Your server will still have a /websocket endpoint.)                                                             // 64\n                                                                                                                      //\n  if (process.env.DISABLE_WEBSOCKETS) {                                                                               // 65\n    serverOptions.websocket = false;                                                                                  // 66\n  } else {                                                                                                            // 67\n    serverOptions.faye_server_options = {                                                                             // 68\n      extensions: websocketExtensions()                                                                               // 69\n    };                                                                                                                // 68\n  }                                                                                                                   // 71\n                                                                                                                      //\n  self.server = sockjs.createServer(serverOptions); // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding                                          // 76\n  // request.  This compensates for the fact that sockjs removes all listeners                                        // 77\n  // for \"request\" to add its own.                                                                                    // 78\n                                                                                                                      //\n  WebApp.httpServer.removeListener('request', WebApp._timeoutAdjustmentRequestCallback);                              // 79\n  self.server.installHandlers(WebApp.httpServer);                                                                     // 81\n  WebApp.httpServer.addListener('request', WebApp._timeoutAdjustmentRequestCallback); // Support the /websocket endpoint\n                                                                                                                      //\n  self._redirectWebsocketEndpoint();                                                                                  // 86\n                                                                                                                      //\n  self.server.on('connection', function (socket) {                                                                    // 88\n    // We want to make sure that if a client connects to us and does the initial                                      // 89\n    // Websocket handshake but never gets to the DDP handshake, that we                                               // 90\n    // eventually kill the socket.  Once the DDP handshake happens, DDP                                               // 91\n    // heartbeating will work. And before the Websocket handshake, the timeouts                                       // 92\n    // we set at the server level in webapp_server.js will work. But                                                  // 93\n    // faye-websocket calls setTimeout(0) on any socket it takes over, so there                                       // 94\n    // is an \"in between\" state where this doesn't happen.  We work around this                                       // 95\n    // by explicitly setting the socket timeout to a relatively large time here,                                      // 96\n    // and setting it back to zero when we set up the heartbeat in                                                    // 97\n    // livedata_server.js.                                                                                            // 98\n    socket.setWebsocketTimeout = function (timeout) {                                                                 // 99\n      if ((socket.protocol === 'websocket' || socket.protocol === 'websocket-raw') && socket._session.recv) {         // 100\n        socket._session.recv.connection.setTimeout(timeout);                                                          // 103\n      }                                                                                                               // 104\n    };                                                                                                                // 105\n                                                                                                                      //\n    socket.setWebsocketTimeout(45 * 1000);                                                                            // 106\n                                                                                                                      //\n    socket.send = function (data) {                                                                                   // 108\n      socket.write(data);                                                                                             // 109\n    };                                                                                                                // 110\n                                                                                                                      //\n    socket.on('close', function () {                                                                                  // 111\n      self.open_sockets = _.without(self.open_sockets, socket);                                                       // 112\n    });                                                                                                               // 113\n    self.open_sockets.push(socket); // XXX COMPAT WITH 0.6.6. Send the old style welcome message, which               // 114\n    // will force old clients to reload. Remove this once we're not                                                   // 117\n    // concerned about people upgrading from a pre-0.7.0 release. Also,                                               // 118\n    // remove the clause in the client that ignores the welcome message                                               // 119\n    // (livedata_connection.js)                                                                                       // 120\n                                                                                                                      //\n    socket.send(JSON.stringify({                                                                                      // 121\n      server_id: \"0\"                                                                                                  // 121\n    })); // call all our callbacks when we get a new socket. they will do the                                         // 121\n    // work of setting up handlers and such for specific messages.                                                    // 124\n                                                                                                                      //\n    _.each(self.registration_callbacks, function (callback) {                                                         // 125\n      callback(socket);                                                                                               // 126\n    });                                                                                                               // 127\n  });                                                                                                                 // 128\n};                                                                                                                    // 130\n                                                                                                                      //\n_.extend(StreamServer.prototype, {                                                                                    // 132\n  // call my callback when a new socket connects.                                                                     // 133\n  // also call it for all current connections.                                                                        // 134\n  register: function (callback) {                                                                                     // 135\n    var self = this;                                                                                                  // 136\n    self.registration_callbacks.push(callback);                                                                       // 137\n                                                                                                                      //\n    _.each(self.all_sockets(), function (socket) {                                                                    // 138\n      callback(socket);                                                                                               // 139\n    });                                                                                                               // 140\n  },                                                                                                                  // 141\n  // get a list of all sockets                                                                                        // 143\n  all_sockets: function () {                                                                                          // 144\n    var self = this;                                                                                                  // 145\n    return _.values(self.open_sockets);                                                                               // 146\n  },                                                                                                                  // 147\n  // Redirect /websocket to /sockjs/websocket in order to not expose                                                  // 149\n  // sockjs to clients that want to use raw websockets                                                                // 150\n  _redirectWebsocketEndpoint: function () {                                                                           // 151\n    var self = this; // Unfortunately we can't use a connect middleware here since                                    // 152\n    // sockjs installs itself prior to all existing listeners                                                         // 154\n    // (meaning prior to any connect middlewares) so we need to take                                                  // 155\n    // an approach similar to overshadowListeners in                                                                  // 156\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee           // 157\n                                                                                                                      //\n    _.each(['request', 'upgrade'], function (event) {                                                                 // 158\n      var httpServer = WebApp.httpServer;                                                                             // 159\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);                                              // 160\n      httpServer.removeAllListeners(event); // request and upgrade have different arguments passed but                // 161\n      // we only care about the first one which is always request                                                     // 164\n                                                                                                                      //\n      var newListener = function (request /*, moreArguments */) {                                                     // 165\n        // Store arguments for use within the closure below                                                           // 166\n        var args = arguments; // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while                   // 167\n        // preserving query string.                                                                                   // 170\n                                                                                                                      //\n        var parsedUrl = url.parse(request.url);                                                                       // 171\n                                                                                                                      //\n        if (parsedUrl.pathname === pathPrefix + '/websocket' || parsedUrl.pathname === pathPrefix + '/websocket/') {  // 172\n          parsedUrl.pathname = self.prefix + '/websocket';                                                            // 174\n          request.url = url.format(parsedUrl);                                                                        // 175\n        }                                                                                                             // 176\n                                                                                                                      //\n        _.each(oldHttpServerListeners, function (oldListener) {                                                       // 177\n          oldListener.apply(httpServer, args);                                                                        // 178\n        });                                                                                                           // 179\n      };                                                                                                              // 180\n                                                                                                                      //\n      httpServer.addListener(event, newListener);                                                                     // 181\n    });                                                                                                               // 182\n  }                                                                                                                   // 183\n});                                                                                                                   // 132\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"livedata_server.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ddp-server/livedata_server.js                                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                               //\n                                                                                                                      //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                      //\n                                                                                                                      //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                     //\n                                                                                                                      //\nDDPServer = {};                                                                                                       // 1\n                                                                                                                      //\nvar Fiber = Npm.require('fibers'); // This file contains classes:                                                     // 3\n// * Session - The server's connection to a single DDP client                                                         // 6\n// * Subscription - A single subscription for a single client                                                         // 7\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.                                           // 8\n//                                                                                                                    // 9\n// Session and Subscription are file scope. For now, until we freeze                                                  // 10\n// the interface, Server is package scope (in the future it should be                                                 // 11\n// exported.)                                                                                                         // 12\n// Represents a single document in a SessionCollectionView                                                            // 14\n                                                                                                                      //\n                                                                                                                      //\nvar SessionDocumentView = function () {                                                                               // 15\n  var self = this;                                                                                                    // 16\n  self.existsIn = {}; // set of subscriptionHandle                                                                    // 17\n                                                                                                                      //\n  self.dataByKey = {}; // key-> [ {subscriptionHandle, value} by precedence]                                          // 18\n};                                                                                                                    // 19\n                                                                                                                      //\nDDPServer._SessionDocumentView = SessionDocumentView;                                                                 // 21\n                                                                                                                      //\n_.extend(SessionDocumentView.prototype, {                                                                             // 24\n  getFields: function () {                                                                                            // 26\n    var self = this;                                                                                                  // 27\n    var ret = {};                                                                                                     // 28\n                                                                                                                      //\n    _.each(self.dataByKey, function (precedenceList, key) {                                                           // 29\n      ret[key] = precedenceList[0].value;                                                                             // 30\n    });                                                                                                               // 31\n                                                                                                                      //\n    return ret;                                                                                                       // 32\n  },                                                                                                                  // 33\n  clearField: function (subscriptionHandle, key, changeCollector) {                                                   // 35\n    var self = this; // Publish API ignores _id if present in fields                                                  // 36\n                                                                                                                      //\n    if (key === \"_id\") return;                                                                                        // 38\n    var precedenceList = self.dataByKey[key]; // It's okay to clear fields that didn't exist. No need to throw        // 40\n    // an error.                                                                                                      // 43\n                                                                                                                      //\n    if (!precedenceList) return;                                                                                      // 44\n    var removedValue = undefined;                                                                                     // 47\n                                                                                                                      //\n    for (var i = 0; i < precedenceList.length; i++) {                                                                 // 48\n      var precedence = precedenceList[i];                                                                             // 49\n                                                                                                                      //\n      if (precedence.subscriptionHandle === subscriptionHandle) {                                                     // 50\n        // The view's value can only change if this subscription is the one that                                      // 51\n        // used to have precedence.                                                                                   // 52\n        if (i === 0) removedValue = precedence.value;                                                                 // 53\n        precedenceList.splice(i, 1);                                                                                  // 55\n        break;                                                                                                        // 56\n      }                                                                                                               // 57\n    }                                                                                                                 // 58\n                                                                                                                      //\n    if (_.isEmpty(precedenceList)) {                                                                                  // 59\n      delete self.dataByKey[key];                                                                                     // 60\n      changeCollector[key] = undefined;                                                                               // 61\n    } else if (removedValue !== undefined && !EJSON.equals(removedValue, precedenceList[0].value)) {                  // 62\n      changeCollector[key] = precedenceList[0].value;                                                                 // 64\n    }                                                                                                                 // 65\n  },                                                                                                                  // 66\n  changeField: function (subscriptionHandle, key, value, changeCollector, isAdd) {                                    // 68\n    var self = this; // Publish API ignores _id if present in fields                                                  // 70\n                                                                                                                      //\n    if (key === \"_id\") return; // Don't share state with the data passed in by the user.                              // 72\n                                                                                                                      //\n    value = EJSON.clone(value);                                                                                       // 76\n                                                                                                                      //\n    if (!_.has(self.dataByKey, key)) {                                                                                // 78\n      self.dataByKey[key] = [{                                                                                        // 79\n        subscriptionHandle: subscriptionHandle,                                                                       // 79\n        value: value                                                                                                  // 80\n      }];                                                                                                             // 79\n      changeCollector[key] = value;                                                                                   // 81\n      return;                                                                                                         // 82\n    }                                                                                                                 // 83\n                                                                                                                      //\n    var precedenceList = self.dataByKey[key];                                                                         // 84\n    var elt;                                                                                                          // 85\n                                                                                                                      //\n    if (!isAdd) {                                                                                                     // 86\n      elt = _.find(precedenceList, function (precedence) {                                                            // 87\n        return precedence.subscriptionHandle === subscriptionHandle;                                                  // 88\n      });                                                                                                             // 89\n    }                                                                                                                 // 90\n                                                                                                                      //\n    if (elt) {                                                                                                        // 92\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {                                             // 93\n        // this subscription is changing the value of this field.                                                     // 94\n        changeCollector[key] = value;                                                                                 // 95\n      }                                                                                                               // 96\n                                                                                                                      //\n      elt.value = value;                                                                                              // 97\n    } else {                                                                                                          // 98\n      // this subscription is newly caring about this field                                                           // 99\n      precedenceList.push({                                                                                           // 100\n        subscriptionHandle: subscriptionHandle,                                                                       // 100\n        value: value                                                                                                  // 100\n      });                                                                                                             // 100\n    }                                                                                                                 // 101\n  }                                                                                                                   // 103\n}); /**                                                                                                               // 24\n     * Represents a client's view of a single collection                                                              //\n     * @param {String} collectionName Name of the collection it represents                                            //\n     * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed                  //\n     * @class SessionCollectionView                                                                                   //\n     */                                                                                                               //\n                                                                                                                      //\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {                                             // 112\n  var self = this;                                                                                                    // 113\n  self.collectionName = collectionName;                                                                               // 114\n  self.documents = {};                                                                                                // 115\n  self.callbacks = sessionCallbacks;                                                                                  // 116\n};                                                                                                                    // 117\n                                                                                                                      //\nDDPServer._SessionCollectionView = SessionCollectionView;                                                             // 119\n                                                                                                                      //\n_.extend(SessionCollectionView.prototype, {                                                                           // 122\n  isEmpty: function () {                                                                                              // 124\n    var self = this;                                                                                                  // 125\n    return _.isEmpty(self.documents);                                                                                 // 126\n  },                                                                                                                  // 127\n  diff: function (previous) {                                                                                         // 129\n    var self = this;                                                                                                  // 130\n    DiffSequence.diffObjects(previous.documents, self.documents, {                                                    // 131\n      both: _.bind(self.diffDocument, self),                                                                          // 132\n      rightOnly: function (id, nowDV) {                                                                               // 134\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());                                             // 135\n      },                                                                                                              // 136\n      leftOnly: function (id, prevDV) {                                                                               // 138\n        self.callbacks.removed(self.collectionName, id);                                                              // 139\n      }                                                                                                               // 140\n    });                                                                                                               // 131\n  },                                                                                                                  // 142\n  diffDocument: function (id, prevDV, nowDV) {                                                                        // 144\n    var self = this;                                                                                                  // 145\n    var fields = {};                                                                                                  // 146\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {                                                 // 147\n      both: function (key, prev, now) {                                                                               // 148\n        if (!EJSON.equals(prev, now)) fields[key] = now;                                                              // 149\n      },                                                                                                              // 151\n      rightOnly: function (key, now) {                                                                                // 152\n        fields[key] = now;                                                                                            // 153\n      },                                                                                                              // 154\n      leftOnly: function (key, prev) {                                                                                // 155\n        fields[key] = undefined;                                                                                      // 156\n      }                                                                                                               // 157\n    });                                                                                                               // 147\n    self.callbacks.changed(self.collectionName, id, fields);                                                          // 159\n  },                                                                                                                  // 160\n  added: function (subscriptionHandle, id, fields) {                                                                  // 162\n    var self = this;                                                                                                  // 163\n    var docView = self.documents[id];                                                                                 // 164\n    var added = false;                                                                                                // 165\n                                                                                                                      //\n    if (!docView) {                                                                                                   // 166\n      added = true;                                                                                                   // 167\n      docView = new SessionDocumentView();                                                                            // 168\n      self.documents[id] = docView;                                                                                   // 169\n    }                                                                                                                 // 170\n                                                                                                                      //\n    docView.existsIn[subscriptionHandle] = true;                                                                      // 171\n    var changeCollector = {};                                                                                         // 172\n                                                                                                                      //\n    _.each(fields, function (value, key) {                                                                            // 173\n      docView.changeField(subscriptionHandle, key, value, changeCollector, true);                                     // 174\n    });                                                                                                               // 176\n                                                                                                                      //\n    if (added) self.callbacks.added(self.collectionName, id, changeCollector);else self.callbacks.changed(self.collectionName, id, changeCollector);\n  },                                                                                                                  // 181\n  changed: function (subscriptionHandle, id, changed) {                                                               // 183\n    var self = this;                                                                                                  // 184\n    var changedResult = {};                                                                                           // 185\n    var docView = self.documents[id];                                                                                 // 186\n    if (!docView) throw new Error(\"Could not find element with id \" + id + \" to change\");                             // 187\n                                                                                                                      //\n    _.each(changed, function (value, key) {                                                                           // 189\n      if (value === undefined) docView.clearField(subscriptionHandle, key, changedResult);else docView.changeField(subscriptionHandle, key, value, changedResult);\n    });                                                                                                               // 194\n                                                                                                                      //\n    self.callbacks.changed(self.collectionName, id, changedResult);                                                   // 195\n  },                                                                                                                  // 196\n  removed: function (subscriptionHandle, id) {                                                                        // 198\n    var self = this;                                                                                                  // 199\n    var docView = self.documents[id];                                                                                 // 200\n                                                                                                                      //\n    if (!docView) {                                                                                                   // 201\n      var err = new Error(\"Removed nonexistent document \" + id);                                                      // 202\n      throw err;                                                                                                      // 203\n    }                                                                                                                 // 204\n                                                                                                                      //\n    delete docView.existsIn[subscriptionHandle];                                                                      // 205\n                                                                                                                      //\n    if (_.isEmpty(docView.existsIn)) {                                                                                // 206\n      // it is gone from everyone                                                                                     // 207\n      self.callbacks.removed(self.collectionName, id);                                                                // 208\n      delete self.documents[id];                                                                                      // 209\n    } else {                                                                                                          // 210\n      var changed = {}; // remove this subscription from every precedence list                                        // 211\n      // and record the changes                                                                                       // 213\n                                                                                                                      //\n      _.each(docView.dataByKey, function (precedenceList, key) {                                                      // 214\n        docView.clearField(subscriptionHandle, key, changed);                                                         // 215\n      });                                                                                                             // 216\n                                                                                                                      //\n      self.callbacks.changed(self.collectionName, id, changed);                                                       // 218\n    }                                                                                                                 // 219\n  }                                                                                                                   // 220\n}); /******************************************************************************/ /* Session                                                                    */ /******************************************************************************/\n                                                                                                                      //\nvar Session = function (server, version, socket, options) {                                                           // 227\n  var self = this;                                                                                                    // 228\n  self.id = Random.id();                                                                                              // 229\n  self.server = server;                                                                                               // 231\n  self.version = version;                                                                                             // 232\n  self.initialized = false;                                                                                           // 234\n  self.socket = socket; // set to null when the session is destroyed. multiple places below                           // 235\n  // use this to determine if the session is alive or not.                                                            // 238\n                                                                                                                      //\n  self.inQueue = new Meteor._DoubleEndedQueue();                                                                      // 239\n  self.blocked = false;                                                                                               // 241\n  self.workerRunning = false; // Sub objects for active subscriptions                                                 // 242\n                                                                                                                      //\n  self._namedSubs = {};                                                                                               // 245\n  self._universalSubs = [];                                                                                           // 246\n  self.userId = null;                                                                                                 // 248\n  self.collectionViews = {}; // Set this to false to not send messages when collectionViews are                       // 250\n  // modified. This is done when rerunning subs in _setUserId and those messages                                      // 253\n  // are calculated via a diff instead.                                                                               // 254\n                                                                                                                      //\n  self._isSending = true; // If this is true, don't start a newly-created universal publisher on this                 // 255\n  // session. The session will take care of starting it when appropriate.                                             // 258\n                                                                                                                      //\n  self._dontStartNewUniversalSubs = false; // when we are rerunning subscriptions, any ready messages                 // 259\n  // we want to buffer up for when we are done rerunning subscriptions                                                // 262\n                                                                                                                      //\n  self._pendingReady = []; // List of callbacks to call when this connection is closed.                               // 263\n                                                                                                                      //\n  self._closeCallbacks = []; // XXX HACK: If a sockjs connection, save off the URL. This is                           // 266\n  // temporary and will go away in the near future.                                                                   // 270\n                                                                                                                      //\n  self._socketUrl = socket.url; // Allow tests to disable responding to pings.                                        // 271\n                                                                                                                      //\n  self._respondToPings = options.respondToPings; // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it                                                // 277\n  // a `connectionHandle` to avoid ambiguity.                                                                         // 278\n                                                                                                                      //\n  self.connectionHandle = {                                                                                           // 279\n    id: self.id,                                                                                                      // 280\n    close: function () {                                                                                              // 281\n      self.close();                                                                                                   // 282\n    },                                                                                                                // 283\n    onClose: function (fn) {                                                                                          // 284\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");                                             // 285\n                                                                                                                      //\n      if (self.inQueue) {                                                                                             // 286\n        self._closeCallbacks.push(cb);                                                                                // 287\n      } else {                                                                                                        // 288\n        // if we're already closed, call the callback.                                                                // 289\n        Meteor.defer(cb);                                                                                             // 290\n      }                                                                                                               // 291\n    },                                                                                                                // 292\n    clientAddress: self._clientAddress(),                                                                             // 293\n    httpHeaders: self.socket.headers                                                                                  // 294\n  };                                                                                                                  // 279\n  self.send({                                                                                                         // 297\n    msg: 'connected',                                                                                                 // 297\n    session: self.id                                                                                                  // 297\n  }); // On initial connect, spin up all the universal publishers.                                                    // 297\n                                                                                                                      //\n  Fiber(function () {                                                                                                 // 300\n    self.startUniversalSubs();                                                                                        // 301\n  }).run();                                                                                                           // 302\n                                                                                                                      //\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {                                                        // 304\n    // We no longer need the low level timeout because we have heartbeating.                                          // 305\n    socket.setWebsocketTimeout(0);                                                                                    // 306\n    self.heartbeat = new DDPCommon.Heartbeat({                                                                        // 308\n      heartbeatInterval: options.heartbeatInterval,                                                                   // 309\n      heartbeatTimeout: options.heartbeatTimeout,                                                                     // 310\n      onTimeout: function () {                                                                                        // 311\n        self.close();                                                                                                 // 312\n      },                                                                                                              // 313\n      sendPing: function () {                                                                                         // 314\n        self.send({                                                                                                   // 315\n          msg: 'ping'                                                                                                 // 315\n        });                                                                                                           // 315\n      }                                                                                                               // 316\n    });                                                                                                               // 308\n    self.heartbeat.start();                                                                                           // 318\n  }                                                                                                                   // 319\n                                                                                                                      //\n  Package.facts && Package.facts.Facts.incrementServerFact(\"livedata\", \"sessions\", 1);                                // 321\n};                                                                                                                    // 323\n                                                                                                                      //\n_.extend(Session.prototype, {                                                                                         // 325\n  sendReady: function (subscriptionIds) {                                                                             // 327\n    var self = this;                                                                                                  // 328\n    if (self._isSending) self.send({                                                                                  // 329\n      msg: \"ready\",                                                                                                   // 330\n      subs: subscriptionIds                                                                                           // 330\n    });else {                                                                                                         // 330\n      _.each(subscriptionIds, function (subscriptionId) {                                                             // 332\n        self._pendingReady.push(subscriptionId);                                                                      // 333\n      });                                                                                                             // 334\n    }                                                                                                                 // 335\n  },                                                                                                                  // 336\n  sendAdded: function (collectionName, id, fields) {                                                                  // 338\n    var self = this;                                                                                                  // 339\n    if (self._isSending) self.send({                                                                                  // 340\n      msg: \"added\",                                                                                                   // 341\n      collection: collectionName,                                                                                     // 341\n      id: id,                                                                                                         // 341\n      fields: fields                                                                                                  // 341\n    });                                                                                                               // 341\n  },                                                                                                                  // 342\n  sendChanged: function (collectionName, id, fields) {                                                                // 344\n    var self = this;                                                                                                  // 345\n    if (_.isEmpty(fields)) return;                                                                                    // 346\n                                                                                                                      //\n    if (self._isSending) {                                                                                            // 349\n      self.send({                                                                                                     // 350\n        msg: \"changed\",                                                                                               // 351\n        collection: collectionName,                                                                                   // 352\n        id: id,                                                                                                       // 353\n        fields: fields                                                                                                // 354\n      });                                                                                                             // 350\n    }                                                                                                                 // 356\n  },                                                                                                                  // 357\n  sendRemoved: function (collectionName, id) {                                                                        // 359\n    var self = this;                                                                                                  // 360\n    if (self._isSending) self.send({                                                                                  // 361\n      msg: \"removed\",                                                                                                 // 362\n      collection: collectionName,                                                                                     // 362\n      id: id                                                                                                          // 362\n    });                                                                                                               // 362\n  },                                                                                                                  // 363\n  getSendCallbacks: function () {                                                                                     // 365\n    var self = this;                                                                                                  // 366\n    return {                                                                                                          // 367\n      added: _.bind(self.sendAdded, self),                                                                            // 368\n      changed: _.bind(self.sendChanged, self),                                                                        // 369\n      removed: _.bind(self.sendRemoved, self)                                                                         // 370\n    };                                                                                                                // 367\n  },                                                                                                                  // 372\n  getCollectionView: function (collectionName) {                                                                      // 374\n    var self = this;                                                                                                  // 375\n                                                                                                                      //\n    if (_.has(self.collectionViews, collectionName)) {                                                                // 376\n      return self.collectionViews[collectionName];                                                                    // 377\n    }                                                                                                                 // 378\n                                                                                                                      //\n    var ret = new SessionCollectionView(collectionName, self.getSendCallbacks());                                     // 379\n    self.collectionViews[collectionName] = ret;                                                                       // 381\n    return ret;                                                                                                       // 382\n  },                                                                                                                  // 383\n  added: function (subscriptionHandle, collectionName, id, fields) {                                                  // 385\n    var self = this;                                                                                                  // 386\n    var view = self.getCollectionView(collectionName);                                                                // 387\n    view.added(subscriptionHandle, id, fields);                                                                       // 388\n  },                                                                                                                  // 389\n  removed: function (subscriptionHandle, collectionName, id) {                                                        // 391\n    var self = this;                                                                                                  // 392\n    var view = self.getCollectionView(collectionName);                                                                // 393\n    view.removed(subscriptionHandle, id);                                                                             // 394\n                                                                                                                      //\n    if (view.isEmpty()) {                                                                                             // 395\n      delete self.collectionViews[collectionName];                                                                    // 396\n    }                                                                                                                 // 397\n  },                                                                                                                  // 398\n  changed: function (subscriptionHandle, collectionName, id, fields) {                                                // 400\n    var self = this;                                                                                                  // 401\n    var view = self.getCollectionView(collectionName);                                                                // 402\n    view.changed(subscriptionHandle, id, fields);                                                                     // 403\n  },                                                                                                                  // 404\n  startUniversalSubs: function () {                                                                                   // 406\n    var self = this; // Make a shallow copy of the set of universal handlers and start them. If                       // 407\n    // additional universal publishers start while we're running them (due to                                         // 409\n    // yielding), they will run separately as part of Server.publish.                                                 // 410\n                                                                                                                      //\n    var handlers = _.clone(self.server.universal_publish_handlers);                                                   // 411\n                                                                                                                      //\n    _.each(handlers, function (handler) {                                                                             // 412\n      self._startSubscription(handler);                                                                               // 413\n    });                                                                                                               // 414\n  },                                                                                                                  // 415\n  // Destroy this session and unregister it at the server.                                                            // 417\n  close: function () {                                                                                                // 418\n    var self = this; // Destroy this session, even if it's not registered at the                                      // 419\n    // server. Stop all processing and tear everything down. If a socket                                              // 422\n    // was attached, close it.                                                                                        // 423\n    // Already destroyed.                                                                                             // 425\n                                                                                                                      //\n    if (!self.inQueue) return; // Drop the merge box data immediately.                                                // 426\n                                                                                                                      //\n    self.inQueue = null;                                                                                              // 430\n    self.collectionViews = {};                                                                                        // 431\n                                                                                                                      //\n    if (self.heartbeat) {                                                                                             // 433\n      self.heartbeat.stop();                                                                                          // 434\n      self.heartbeat = null;                                                                                          // 435\n    }                                                                                                                 // 436\n                                                                                                                      //\n    if (self.socket) {                                                                                                // 438\n      self.socket.close();                                                                                            // 439\n      self.socket._meteorSession = null;                                                                              // 440\n    }                                                                                                                 // 441\n                                                                                                                      //\n    Package.facts && Package.facts.Facts.incrementServerFact(\"livedata\", \"sessions\", -1);                             // 443\n    Meteor.defer(function () {                                                                                        // 446\n      // stop callbacks can yield, so we defer this on close.                                                         // 447\n      // sub._isDeactivated() detects that we set inQueue to null and                                                 // 448\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).                                      // 449\n      self._deactivateAllSubscriptions(); // Defer calling the close callbacks, so that the caller closing            // 450\n      // the session isn't waiting for all the callbacks to complete.                                                 // 453\n                                                                                                                      //\n                                                                                                                      //\n      _.each(self._closeCallbacks, function (callback) {                                                              // 454\n        callback();                                                                                                   // 455\n      });                                                                                                             // 456\n    }); // Unregister the session.                                                                                    // 457\n                                                                                                                      //\n    self.server._removeSession(self);                                                                                 // 460\n  },                                                                                                                  // 461\n  // Send a message (doing nothing if no socket is connected right now.)                                              // 463\n  // It should be a JSON object (it will be stringified.)                                                             // 464\n  send: function (msg) {                                                                                              // 465\n    var self = this;                                                                                                  // 466\n                                                                                                                      //\n    if (self.socket) {                                                                                                // 467\n      if (Meteor._printSentDDP) Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));                               // 468\n      self.socket.send(DDPCommon.stringifyDDP(msg));                                                                  // 470\n    }                                                                                                                 // 471\n  },                                                                                                                  // 472\n  // Send a connection error.                                                                                         // 474\n  sendError: function (reason, offendingMessage) {                                                                    // 475\n    var self = this;                                                                                                  // 476\n    var msg = {                                                                                                       // 477\n      msg: 'error',                                                                                                   // 477\n      reason: reason                                                                                                  // 477\n    };                                                                                                                // 477\n    if (offendingMessage) msg.offendingMessage = offendingMessage;                                                    // 478\n    self.send(msg);                                                                                                   // 480\n  },                                                                                                                  // 481\n  // Process 'msg' as an incoming message. (But as a guard against                                                    // 483\n  // race conditions during reconnection, ignore the message if                                                       // 484\n  // 'socket' is not the currently connected socket.)                                                                 // 485\n  //                                                                                                                  // 486\n  // We run the messages from the client one at a time, in the order                                                  // 487\n  // given by the client. The message handler is passed an idempotent                                                 // 488\n  // function 'unblock' which it may call to allow other messages to                                                  // 489\n  // begin running in parallel in another fiber (for example, a method                                                // 490\n  // that wants to yield.) Otherwise, it is automatically unblocked                                                   // 491\n  // when it returns.                                                                                                 // 492\n  //                                                                                                                  // 493\n  // Actually, we don't have to 'totally order' the messages in this                                                  // 494\n  // way, but it's the easiest thing that's correct. (unsub needs to                                                  // 495\n  // be ordered against sub, methods need to be ordered against each                                                  // 496\n  // other.)                                                                                                          // 497\n  processMessage: function (msg_in) {                                                                                 // 498\n    var self = this;                                                                                                  // 499\n    if (!self.inQueue) // we have been destroyed.                                                                     // 500\n      return; // Respond to ping and pong messages immediately without queuing.                                       // 501\n    // If the negotiated DDP version is \"pre1\" which didn't support                                                   // 504\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad                                                  // 505\n    // request\" for the unknown messages.                                                                             // 506\n    //                                                                                                                // 507\n    // Fibers are needed because heartbeat uses Meteor.setTimeout, which                                              // 508\n    // needs a Fiber. We could actually use regular setTimeout and avoid                                              // 509\n    // these new fibers, but it is easier to just make everything use                                                 // 510\n    // Meteor.setTimeout and not think too hard.                                                                      // 511\n    //                                                                                                                // 512\n    // Any message counts as receiving a pong, as it demonstrates that                                                // 513\n    // the client is still alive.                                                                                     // 514\n                                                                                                                      //\n    if (self.heartbeat) {                                                                                             // 515\n      Fiber(function () {                                                                                             // 516\n        self.heartbeat.messageReceived();                                                                             // 517\n      }).run();                                                                                                       // 518\n    }                                                                                                                 // 519\n                                                                                                                      //\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {                                                           // 521\n      if (self._respondToPings) self.send({                                                                           // 522\n        msg: \"pong\",                                                                                                  // 523\n        id: msg_in.id                                                                                                 // 523\n      });                                                                                                             // 523\n      return;                                                                                                         // 524\n    }                                                                                                                 // 525\n                                                                                                                      //\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {                                                           // 526\n      // Since everything is a pong, nothing to do                                                                    // 527\n      return;                                                                                                         // 528\n    }                                                                                                                 // 529\n                                                                                                                      //\n    self.inQueue.push(msg_in);                                                                                        // 531\n    if (self.workerRunning) return;                                                                                   // 532\n    self.workerRunning = true;                                                                                        // 534\n                                                                                                                      //\n    var processNext = function () {                                                                                   // 536\n      var msg = self.inQueue && self.inQueue.shift();                                                                 // 537\n                                                                                                                      //\n      if (!msg) {                                                                                                     // 538\n        self.workerRunning = false;                                                                                   // 539\n        return;                                                                                                       // 540\n      }                                                                                                               // 541\n                                                                                                                      //\n      Fiber(function () {                                                                                             // 543\n        var blocked = true;                                                                                           // 544\n                                                                                                                      //\n        var unblock = function () {                                                                                   // 546\n          if (!blocked) return; // idempotent                                                                         // 547\n                                                                                                                      //\n          blocked = false;                                                                                            // 549\n          processNext();                                                                                              // 550\n        };                                                                                                            // 551\n                                                                                                                      //\n        self.server.onMessageHook.each(function (callback) {                                                          // 553\n          callback(msg, self);                                                                                        // 554\n          return true;                                                                                                // 555\n        });                                                                                                           // 556\n        if (_.has(self.protocol_handlers, msg.msg)) self.protocol_handlers[msg.msg].call(self, msg, unblock);else self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it                                                        // 562\n      }).run();                                                                                                       // 563\n    };                                                                                                                // 564\n                                                                                                                      //\n    processNext();                                                                                                    // 566\n  },                                                                                                                  // 567\n  protocol_handlers: {                                                                                                // 569\n    sub: function (msg) {                                                                                             // 570\n      var self = this; // reject malformed messages                                                                   // 571\n                                                                                                                      //\n      if (typeof msg.id !== \"string\" || typeof msg.name !== \"string\" || 'params' in msg && !(msg.params instanceof Array)) {\n        self.sendError(\"Malformed subscription\", msg);                                                                // 577\n        return;                                                                                                       // 578\n      }                                                                                                               // 579\n                                                                                                                      //\n      if (!self.server.publish_handlers[msg.name]) {                                                                  // 581\n        self.send({                                                                                                   // 582\n          msg: 'nosub',                                                                                               // 583\n          id: msg.id,                                                                                                 // 583\n          error: new Meteor.Error(404, \"Subscription '\" + msg.name + \"' not found\")                                   // 584\n        });                                                                                                           // 582\n        return;                                                                                                       // 585\n      }                                                                                                               // 586\n                                                                                                                      //\n      if (_.has(self._namedSubs, msg.id)) // subs are idempotent, or rather, they are ignored if a sub                // 588\n        // with that id already exists. this is important during                                                      // 590\n        // reconnect.                                                                                                 // 591\n        return; // XXX It'd be much better if we had generic hooks where any package can                              // 592\n      // hook into subscription handling, but in the mean while we special case                                       // 595\n      // ddp-rate-limiter package. This is also done for weak requirements to                                         // 596\n      // add the ddp-rate-limiter package in case we don't have Accounts. A                                           // 597\n      // user trying to use the ddp-rate-limiter must explicitly require it.                                          // 598\n                                                                                                                      //\n      if (Package['ddp-rate-limiter']) {                                                                              // 599\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;                                              // 600\n        var rateLimiterInput = {                                                                                      // 601\n          userId: self.userId,                                                                                        // 602\n          clientAddress: self.connectionHandle.clientAddress,                                                         // 603\n          type: \"subscription\",                                                                                       // 604\n          name: msg.name,                                                                                             // 605\n          connectionId: self.id                                                                                       // 606\n        };                                                                                                            // 601\n                                                                                                                      //\n        DDPRateLimiter._increment(rateLimiterInput);                                                                  // 609\n                                                                                                                      //\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);                                                // 610\n                                                                                                                      //\n        if (!rateLimitResult.allowed) {                                                                               // 611\n          self.send({                                                                                                 // 612\n            msg: 'nosub',                                                                                             // 613\n            id: msg.id,                                                                                               // 613\n            error: new Meteor.Error('too-many-requests', DDPRateLimiter.getErrorMessage(rateLimitResult), {           // 614\n              timeToReset: rateLimitResult.timeToReset                                                                // 617\n            })                                                                                                        // 617\n          });                                                                                                         // 612\n          return;                                                                                                     // 619\n        }                                                                                                             // 620\n      }                                                                                                               // 621\n                                                                                                                      //\n      var handler = self.server.publish_handlers[msg.name];                                                           // 623\n                                                                                                                      //\n      self._startSubscription(handler, msg.id, msg.params, msg.name);                                                 // 625\n    },                                                                                                                // 627\n    unsub: function (msg) {                                                                                           // 629\n      var self = this;                                                                                                // 630\n                                                                                                                      //\n      self._stopSubscription(msg.id);                                                                                 // 632\n    },                                                                                                                // 633\n    method: function (msg, unblock) {                                                                                 // 635\n      var self = this; // reject malformed messages                                                                   // 636\n      // For now, we silently ignore unknown attributes,                                                              // 639\n      // for forwards compatibility.                                                                                  // 640\n                                                                                                                      //\n      if (typeof msg.id !== \"string\" || typeof msg.method !== \"string\" || 'params' in msg && !(msg.params instanceof Array) || 'randomSeed' in msg && typeof msg.randomSeed !== \"string\") {\n        self.sendError(\"Malformed method invocation\", msg);                                                           // 645\n        return;                                                                                                       // 646\n      }                                                                                                               // 647\n                                                                                                                      //\n      var randomSeed = msg.randomSeed || null; // set up to mark the method as satisfied once all observers           // 649\n      // (and subscriptions) have reacted to any writes that were                                                     // 652\n      // done.                                                                                                        // 653\n                                                                                                                      //\n      var fence = new DDPServer._WriteFence();                                                                        // 654\n      fence.onAllCommitted(function () {                                                                              // 655\n        // Retire the fence so that future writes are allowed.                                                        // 656\n        // This means that callbacks like timers are free to use                                                      // 657\n        // the fence, and if they fire before it's armed (for                                                         // 658\n        // example, because the method waits for them) their                                                          // 659\n        // writes will be included in the fence.                                                                      // 660\n        fence.retire();                                                                                               // 661\n        self.send({                                                                                                   // 662\n          msg: 'updated',                                                                                             // 663\n          methods: [msg.id]                                                                                           // 663\n        });                                                                                                           // 662\n      }); // find the handler                                                                                         // 664\n                                                                                                                      //\n      var handler = self.server.method_handlers[msg.method];                                                          // 667\n                                                                                                                      //\n      if (!handler) {                                                                                                 // 668\n        self.send({                                                                                                   // 669\n          msg: 'result',                                                                                              // 670\n          id: msg.id,                                                                                                 // 670\n          error: new Meteor.Error(404, \"Method '\" + msg.method + \"' not found\")                                       // 671\n        });                                                                                                           // 669\n        fence.arm();                                                                                                  // 672\n        return;                                                                                                       // 673\n      }                                                                                                               // 674\n                                                                                                                      //\n      var setUserId = function (userId) {                                                                             // 676\n        self._setUserId(userId);                                                                                      // 677\n      };                                                                                                              // 678\n                                                                                                                      //\n      var invocation = new DDPCommon.MethodInvocation({                                                               // 680\n        isSimulation: false,                                                                                          // 681\n        userId: self.userId,                                                                                          // 682\n        setUserId: setUserId,                                                                                         // 683\n        unblock: unblock,                                                                                             // 684\n        connection: self.connectionHandle,                                                                            // 685\n        randomSeed: randomSeed                                                                                        // 686\n      });                                                                                                             // 680\n      var promise = new Promise(function (resolve, reject) {                                                          // 689\n        // XXX It'd be better if we could hook into method handlers better but                                        // 690\n        // for now, we need to check if the ddp-rate-limiter exists since we                                          // 691\n        // have a weak requirement for the ddp-rate-limiter package to be added                                       // 692\n        // to our application.                                                                                        // 693\n        if (Package['ddp-rate-limiter']) {                                                                            // 694\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;                                            // 695\n          var rateLimiterInput = {                                                                                    // 696\n            userId: self.userId,                                                                                      // 697\n            clientAddress: self.connectionHandle.clientAddress,                                                       // 698\n            type: \"method\",                                                                                           // 699\n            name: msg.method,                                                                                         // 700\n            connectionId: self.id                                                                                     // 701\n          };                                                                                                          // 696\n                                                                                                                      //\n          DDPRateLimiter._increment(rateLimiterInput);                                                                // 703\n                                                                                                                      //\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);                                              // 704\n                                                                                                                      //\n          if (!rateLimitResult.allowed) {                                                                             // 705\n            reject(new Meteor.Error(\"too-many-requests\", DDPRateLimiter.getErrorMessage(rateLimitResult), {           // 706\n              timeToReset: rateLimitResult.timeToReset                                                                // 709\n            }));                                                                                                      // 709\n            return;                                                                                                   // 711\n          }                                                                                                           // 712\n        }                                                                                                             // 713\n                                                                                                                      //\n        resolve(DDPServer._CurrentWriteFence.withValue(fence, function () {                                           // 715\n          return DDP._CurrentMethodInvocation.withValue(invocation, function () {                                     // 717\n            return maybeAuditArgumentChecks(handler, invocation, msg.params, \"call to '\" + msg.method + \"'\");         // 719\n          });                                                                                                         // 719\n        }));                                                                                                          // 717\n      });                                                                                                             // 725\n                                                                                                                      //\n      function finish() {                                                                                             // 727\n        fence.arm();                                                                                                  // 728\n        unblock();                                                                                                    // 729\n      }                                                                                                               // 730\n                                                                                                                      //\n      var payload = {                                                                                                 // 732\n        msg: \"result\",                                                                                                // 733\n        id: msg.id                                                                                                    // 734\n      };                                                                                                              // 732\n      promise.then(function (result) {                                                                                // 737\n        finish();                                                                                                     // 738\n                                                                                                                      //\n        if (result !== undefined) {                                                                                   // 739\n          payload.result = result;                                                                                    // 740\n        }                                                                                                             // 741\n                                                                                                                      //\n        self.send(payload);                                                                                           // 742\n      }, function (exception) {                                                                                       // 743\n        finish();                                                                                                     // 744\n        payload.error = wrapInternalException(exception, \"while invoking method '\" + msg.method + \"'\");               // 745\n        self.send(payload);                                                                                           // 749\n      });                                                                                                             // 750\n    }                                                                                                                 // 751\n  },                                                                                                                  // 569\n  _eachSub: function (f) {                                                                                            // 754\n    var self = this;                                                                                                  // 755\n                                                                                                                      //\n    _.each(self._namedSubs, f);                                                                                       // 756\n                                                                                                                      //\n    _.each(self._universalSubs, f);                                                                                   // 757\n  },                                                                                                                  // 758\n  _diffCollectionViews: function (beforeCVs) {                                                                        // 760\n    var self = this;                                                                                                  // 761\n    DiffSequence.diffObjects(beforeCVs, self.collectionViews, {                                                       // 762\n      both: function (collectionName, leftValue, rightValue) {                                                        // 763\n        rightValue.diff(leftValue);                                                                                   // 764\n      },                                                                                                              // 765\n      rightOnly: function (collectionName, rightValue) {                                                              // 766\n        _.each(rightValue.documents, function (docView, id) {                                                         // 767\n          self.sendAdded(collectionName, id, docView.getFields());                                                    // 768\n        });                                                                                                           // 769\n      },                                                                                                              // 770\n      leftOnly: function (collectionName, leftValue) {                                                                // 771\n        _.each(leftValue.documents, function (doc, id) {                                                              // 772\n          self.sendRemoved(collectionName, id);                                                                       // 773\n        });                                                                                                           // 774\n      }                                                                                                               // 775\n    });                                                                                                               // 762\n  },                                                                                                                  // 777\n  // Sets the current user id in all appropriate contexts and reruns                                                  // 779\n  // all subscriptions                                                                                                // 780\n  _setUserId: function (userId) {                                                                                     // 781\n    var self = this;                                                                                                  // 782\n    if (userId !== null && typeof userId !== \"string\") throw new Error(\"setUserId must be called on string or null, not \" + (typeof userId === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(userId))); // Prevent newly-created universal subscriptions from being added to our\n    // session; they will be found below when we call startUniversalSubs.                                             // 789\n    //                                                                                                                // 790\n    // (We don't have to worry about named subscriptions, because we only add                                         // 791\n    // them when we process a 'sub' message. We are currently processing a                                            // 792\n    // 'method' message, and the method did not unblock, because it is illegal                                        // 793\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a                                       // 794\n    // new named subscription.)                                                                                       // 795\n                                                                                                                      //\n    self._dontStartNewUniversalSubs = true; // Prevent current subs from updating our collectionViews and call their  // 796\n    // stop callbacks. This may yield.                                                                                // 799\n                                                                                                                      //\n    self._eachSub(function (sub) {                                                                                    // 800\n      sub._deactivate();                                                                                              // 801\n    }); // All subs should now be deactivated. Stop sending messages to the client,                                   // 802\n    // save the state of the published collections, reset to an empty view, and                                       // 805\n    // update the userId.                                                                                             // 806\n                                                                                                                      //\n                                                                                                                      //\n    self._isSending = false;                                                                                          // 807\n    var beforeCVs = self.collectionViews;                                                                             // 808\n    self.collectionViews = {};                                                                                        // 809\n    self.userId = userId; // _setUserId is normally called from a Meteor method with                                  // 810\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not                                      // 813\n    // expected to be set inside a publish function, so we temporary unset it.                                        // 814\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.                                            // 815\n                                                                                                                      //\n    DDP._CurrentMethodInvocation.withValue(undefined, function () {                                                   // 816\n      // Save the old named subs, and reset to having no subscriptions.                                               // 817\n      var oldNamedSubs = self._namedSubs;                                                                             // 818\n      self._namedSubs = {};                                                                                           // 819\n      self._universalSubs = [];                                                                                       // 820\n                                                                                                                      //\n      _.each(oldNamedSubs, function (sub, subscriptionId) {                                                           // 822\n        self._namedSubs[subscriptionId] = sub._recreate(); // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.                                                          // 825\n                                                                                                                      //\n        self._namedSubs[subscriptionId]._runHandler();                                                                // 826\n      }); // Allow newly-created universal subs to be started on our connection in                                    // 827\n      // parallel with the ones we're spinning up here, and spin up universal                                         // 830\n      // subs.                                                                                                        // 831\n                                                                                                                      //\n                                                                                                                      //\n      self._dontStartNewUniversalSubs = false;                                                                        // 832\n      self.startUniversalSubs();                                                                                      // 833\n    }); // Start sending messages again, beginning with the diff from the previous                                    // 834\n    // state of the world to the current state. No yields are allowed during                                          // 837\n    // this diff, so that other changes cannot interleave.                                                            // 838\n                                                                                                                      //\n                                                                                                                      //\n    Meteor._noYieldsAllowed(function () {                                                                             // 839\n      self._isSending = true;                                                                                         // 840\n                                                                                                                      //\n      self._diffCollectionViews(beforeCVs);                                                                           // 841\n                                                                                                                      //\n      if (!_.isEmpty(self._pendingReady)) {                                                                           // 842\n        self.sendReady(self._pendingReady);                                                                           // 843\n        self._pendingReady = [];                                                                                      // 844\n      }                                                                                                               // 845\n    });                                                                                                               // 846\n  },                                                                                                                  // 847\n  _startSubscription: function (handler, subId, params, name) {                                                       // 849\n    var self = this;                                                                                                  // 850\n    var sub = new Subscription(self, handler, subId, params, name);                                                   // 852\n    if (subId) self._namedSubs[subId] = sub;else self._universalSubs.push(sub);                                       // 854\n                                                                                                                      //\n    sub._runHandler();                                                                                                // 859\n  },                                                                                                                  // 860\n  // tear down specified subscription                                                                                 // 862\n  _stopSubscription: function (subId, error) {                                                                        // 863\n    var self = this;                                                                                                  // 864\n    var subName = null;                                                                                               // 866\n                                                                                                                      //\n    if (subId && self._namedSubs[subId]) {                                                                            // 868\n      subName = self._namedSubs[subId]._name;                                                                         // 869\n                                                                                                                      //\n      self._namedSubs[subId]._removeAllDocuments();                                                                   // 870\n                                                                                                                      //\n      self._namedSubs[subId]._deactivate();                                                                           // 871\n                                                                                                                      //\n      delete self._namedSubs[subId];                                                                                  // 872\n    }                                                                                                                 // 873\n                                                                                                                      //\n    var response = {                                                                                                  // 875\n      msg: 'nosub',                                                                                                   // 875\n      id: subId                                                                                                       // 875\n    };                                                                                                                // 875\n                                                                                                                      //\n    if (error) {                                                                                                      // 877\n      response.error = wrapInternalException(error, subName ? \"from sub \" + subName + \" id \" + subId : \"from sub id \" + subId);\n    }                                                                                                                 // 882\n                                                                                                                      //\n    self.send(response);                                                                                              // 884\n  },                                                                                                                  // 885\n  // tear down all subscriptions. Note that this does NOT send removed or nosub                                       // 887\n  // messages, since we assume the client is gone.                                                                    // 888\n  _deactivateAllSubscriptions: function () {                                                                          // 889\n    var self = this;                                                                                                  // 890\n                                                                                                                      //\n    _.each(self._namedSubs, function (sub, id) {                                                                      // 892\n      sub._deactivate();                                                                                              // 893\n    });                                                                                                               // 894\n                                                                                                                      //\n    self._namedSubs = {};                                                                                             // 895\n                                                                                                                      //\n    _.each(self._universalSubs, function (sub) {                                                                      // 897\n      sub._deactivate();                                                                                              // 898\n    });                                                                                                               // 899\n                                                                                                                      //\n    self._universalSubs = [];                                                                                         // 900\n  },                                                                                                                  // 901\n  // Determine the remote client's IP address, based on the                                                           // 903\n  // HTTP_FORWARDED_COUNT environment variable representing how many                                                  // 904\n  // proxies the server is behind.                                                                                    // 905\n  _clientAddress: function () {                                                                                       // 906\n    var self = this; // For the reported client address for a connection to be correct,                               // 907\n    // the developer must set the HTTP_FORWARDED_COUNT environment                                                    // 910\n    // variable to an integer representing the number of hops they                                                    // 911\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the                                                // 912\n    // server is behind one proxy.                                                                                    // 913\n    //                                                                                                                // 914\n    // This could be computed once at startup instead of every time.                                                  // 915\n                                                                                                                      //\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;                                      // 916\n    if (httpForwardedCount === 0) return self.socket.remoteAddress;                                                   // 918\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];                                                        // 921\n    if (!_.isString(forwardedFor)) return null;                                                                       // 922\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/); // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first                                                  // 927\n    // proxy.  However, the end user can easily spoof the header, in                                                  // 928\n    // which case the first value(s) will be the fake IP address from                                                 // 929\n    // the user pretending to be a proxy reporting the original IP                                                    // 930\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the                                                 // 931\n    // end of the list, we ensure that we get the IP address being                                                    // 932\n    // reported by *our* first proxy.                                                                                 // 933\n                                                                                                                      //\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length) return null;                              // 935\n    return forwardedFor[forwardedFor.length - httpForwardedCount];                                                    // 938\n  }                                                                                                                   // 939\n}); /******************************************************************************/ /* Subscription                                                               */ /******************************************************************************/ // ctor for a sub handle: the input to each publish function\n// Instance name is this because it's usually referred to as this inside a                                            // 948\n// publish                                                                                                            // 949\n/**                                                                                                                   // 950\n * @summary The server's side of a subscription                                                                       //\n * @class Subscription                                                                                                //\n * @instanceName this                                                                                                 //\n * @showInstanceName true                                                                                             //\n */                                                                                                                   //\n                                                                                                                      //\nvar Subscription = function (session, handler, subscriptionId, params, name) {                                        // 956\n  var self = this;                                                                                                    // 958\n  self._session = session; // type is Session                                                                         // 959\n  /**                                                                                                                 // 961\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server                                                                                                    //\n   * @name  connection                                                                                                //\n   * @memberOf Subscription                                                                                           //\n   * @instance                                                                                                        //\n   */                                                                                                                 //\n  self.connection = session.connectionHandle; // public API object                                                    // 968\n                                                                                                                      //\n  self._handler = handler; // my subscription ID (generated by client, undefined for universal subs).                 // 970\n                                                                                                                      //\n  self._subscriptionId = subscriptionId; // undefined for universal subs                                              // 973\n                                                                                                                      //\n  self._name = name;                                                                                                  // 975\n  self._params = params || []; // Only named subscriptions have IDs, but we need some sort of string                  // 977\n  // internally to keep track of all subscriptions inside                                                             // 980\n  // SessionDocumentViews. We use this subscriptionHandle for that.                                                   // 981\n                                                                                                                      //\n  if (self._subscriptionId) {                                                                                         // 982\n    self._subscriptionHandle = 'N' + self._subscriptionId;                                                            // 983\n  } else {                                                                                                            // 984\n    self._subscriptionHandle = 'U' + Random.id();                                                                     // 985\n  } // has _deactivate been called?                                                                                   // 986\n                                                                                                                      //\n                                                                                                                      //\n  self._deactivated = false; // stop callbacks to g/c this sub.  called w/ zero arguments.                            // 989\n                                                                                                                      //\n  self._stopCallbacks = []; // the set of (collection, documentid) that this subscription has                         // 992\n  // an opinion about                                                                                                 // 995\n                                                                                                                      //\n  self._documents = {}; // remember if we are ready.                                                                  // 996\n                                                                                                                      //\n  self._ready = false; // Part of the public API: the user of this sub.                                               // 999\n  /**                                                                                                                 // 1003\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.    //\n   * @locus Server                                                                                                    //\n   * @memberOf Subscription                                                                                           //\n   * @name  userId                                                                                                    //\n   * @instance                                                                                                        //\n   */                                                                                                                 //\n  self.userId = session.userId; // For now, the id filter is going to default to                                      // 1010\n  // the to/from DDP methods on MongoID, to                                                                           // 1013\n  // specifically deal with mongo/minimongo ObjectIds.                                                                // 1014\n  // Later, you will be able to make this be \"raw\"                                                                    // 1016\n  // if you want to publish a collection that you know                                                                // 1017\n  // just has strings for keys and no funny business, to                                                              // 1018\n  // a ddp consumer that isn't minimongo                                                                              // 1019\n                                                                                                                      //\n  self._idFilter = {                                                                                                  // 1021\n    idStringify: MongoID.idStringify,                                                                                 // 1022\n    idParse: MongoID.idParse                                                                                          // 1023\n  };                                                                                                                  // 1021\n  Package.facts && Package.facts.Facts.incrementServerFact(\"livedata\", \"subscriptions\", 1);                           // 1026\n};                                                                                                                    // 1028\n                                                                                                                      //\n_.extend(Subscription.prototype, {                                                                                    // 1030\n  _runHandler: function () {                                                                                          // 1031\n    // XXX should we unblock() here? Either before running the publish                                                // 1032\n    // function, or before running _publishCursor.                                                                    // 1033\n    //                                                                                                                // 1034\n    // Right now, each publish function blocks all future publishes and                                               // 1035\n    // methods waiting on data from Mongo (or whatever else the function                                              // 1036\n    // blocks on). This probably slows page load in common cases.                                                     // 1037\n    var self = this;                                                                                                  // 1039\n                                                                                                                      //\n    try {                                                                                                             // 1040\n      var res = DDP._CurrentPublicationInvocation.withValue(self, function () {                                       // 1041\n        return maybeAuditArgumentChecks(self._handler, self, EJSON.clone(self._params), // It's OK that this would look weird for universal subscriptions,\n        // because they have no arguments so there can never be an                                                    // 1046\n        // audit-argument-checks failure.                                                                             // 1047\n        \"publisher '\" + self._name + \"'\");                                                                            // 1048\n      });                                                                                                             // 1043\n    } catch (e) {                                                                                                     // 1051\n      self.error(e);                                                                                                  // 1052\n      return;                                                                                                         // 1053\n    } // Did the handler call this.error or this.stop?                                                                // 1054\n                                                                                                                      //\n                                                                                                                      //\n    if (self._isDeactivated()) return;                                                                                // 1057\n                                                                                                                      //\n    self._publishHandlerResult(res);                                                                                  // 1060\n  },                                                                                                                  // 1061\n  _publishHandlerResult: function (res) {                                                                             // 1063\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke                                               // 1064\n    // this.added/changed/ready/etc, the user can just return a collection                                            // 1065\n    // cursor or array of cursors from the publish function; we call their                                            // 1066\n    // _publishCursor method which starts observing the cursor and publishes the                                      // 1067\n    // results. Note that _publishCursor does NOT call ready().                                                       // 1068\n    //                                                                                                                // 1069\n    // XXX This uses an undocumented interface which only the Mongo cursor                                            // 1070\n    // interface publishes. Should we make this interface public and encourage                                        // 1071\n    // users to implement it themselves? Arguably, it's unnecessary; users can                                        // 1072\n    // already write their own functions like                                                                         // 1073\n    //   var publishMyReactiveThingy = function (name, handler) {                                                     // 1074\n    //     Meteor.publish(name, function () {                                                                         // 1075\n    //       var reactiveThingy = handler();                                                                          // 1076\n    //       reactiveThingy.publishMe();                                                                              // 1077\n    //     });                                                                                                        // 1078\n    //   };                                                                                                           // 1079\n    var self = this;                                                                                                  // 1081\n                                                                                                                      //\n    var isCursor = function (c) {                                                                                     // 1082\n      return c && c._publishCursor;                                                                                   // 1083\n    };                                                                                                                // 1084\n                                                                                                                      //\n    if (isCursor(res)) {                                                                                              // 1085\n      try {                                                                                                           // 1086\n        res._publishCursor(self);                                                                                     // 1087\n      } catch (e) {                                                                                                   // 1088\n        self.error(e);                                                                                                // 1089\n        return;                                                                                                       // 1090\n      } // _publishCursor only returns after the initial added callbacks have run.                                    // 1091\n      // mark subscription as ready.                                                                                  // 1093\n                                                                                                                      //\n                                                                                                                      //\n      self.ready();                                                                                                   // 1094\n    } else if (_.isArray(res)) {                                                                                      // 1095\n      // check all the elements are cursors                                                                           // 1096\n      if (!_.all(res, isCursor)) {                                                                                    // 1097\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));                                   // 1098\n        return;                                                                                                       // 1099\n      } // find duplicate collection names                                                                            // 1100\n      // XXX we should support overlapping cursors, but that would require the                                        // 1102\n      // merge box to allow overlap within a subscription                                                             // 1103\n                                                                                                                      //\n                                                                                                                      //\n      var collectionNames = {};                                                                                       // 1104\n                                                                                                                      //\n      for (var i = 0; i < res.length; ++i) {                                                                          // 1105\n        var collectionName = res[i]._getCollectionName();                                                             // 1106\n                                                                                                                      //\n        if (_.has(collectionNames, collectionName)) {                                                                 // 1107\n          self.error(new Error(\"Publish function returned multiple cursors for collection \" + collectionName));       // 1108\n          return;                                                                                                     // 1111\n        }                                                                                                             // 1112\n                                                                                                                      //\n        collectionNames[collectionName] = true;                                                                       // 1113\n      }                                                                                                               // 1114\n                                                                                                                      //\n      ;                                                                                                               // 1114\n                                                                                                                      //\n      try {                                                                                                           // 1116\n        _.each(res, function (cur) {                                                                                  // 1117\n          cur._publishCursor(self);                                                                                   // 1118\n        });                                                                                                           // 1119\n      } catch (e) {                                                                                                   // 1120\n        self.error(e);                                                                                                // 1121\n        return;                                                                                                       // 1122\n      }                                                                                                               // 1123\n                                                                                                                      //\n      self.ready();                                                                                                   // 1124\n    } else if (res) {                                                                                                 // 1125\n      // truthy values other than cursors or arrays are probably a                                                    // 1126\n      // user mistake (possible returning a Mongo document via, say,                                                  // 1127\n      // `coll.findOne()`).                                                                                           // 1128\n      self.error(new Error(\"Publish function can only return a Cursor or \" + \"an array of Cursors\"));                 // 1129\n    }                                                                                                                 // 1131\n  },                                                                                                                  // 1132\n  // This calls all stop callbacks and prevents the handler from updating any                                         // 1134\n  // SessionCollectionViews further. It's used when the user unsubscribes or                                          // 1135\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send                                             // 1136\n  // removed messages for the published objects; if that is necessary, call                                           // 1137\n  // _removeAllDocuments first.                                                                                       // 1138\n  _deactivate: function () {                                                                                          // 1139\n    var self = this;                                                                                                  // 1140\n    if (self._deactivated) return;                                                                                    // 1141\n    self._deactivated = true;                                                                                         // 1143\n                                                                                                                      //\n    self._callStopCallbacks();                                                                                        // 1144\n                                                                                                                      //\n    Package.facts && Package.facts.Facts.incrementServerFact(\"livedata\", \"subscriptions\", -1);                        // 1145\n  },                                                                                                                  // 1147\n  _callStopCallbacks: function () {                                                                                   // 1149\n    var self = this; // tell listeners, so they can clean up                                                          // 1150\n                                                                                                                      //\n    var callbacks = self._stopCallbacks;                                                                              // 1152\n    self._stopCallbacks = [];                                                                                         // 1153\n                                                                                                                      //\n    _.each(callbacks, function (callback) {                                                                           // 1154\n      callback();                                                                                                     // 1155\n    });                                                                                                               // 1156\n  },                                                                                                                  // 1157\n  // Send remove messages for every document.                                                                         // 1159\n  _removeAllDocuments: function () {                                                                                  // 1160\n    var self = this;                                                                                                  // 1161\n                                                                                                                      //\n    Meteor._noYieldsAllowed(function () {                                                                             // 1162\n      _.each(self._documents, function (collectionDocs, collectionName) {                                             // 1163\n        // Iterate over _.keys instead of the dictionary itself, since we'll be                                       // 1164\n        // mutating it.                                                                                               // 1165\n        _.each(_.keys(collectionDocs), function (strId) {                                                             // 1166\n          self.removed(collectionName, self._idFilter.idParse(strId));                                                // 1167\n        });                                                                                                           // 1168\n      });                                                                                                             // 1169\n    });                                                                                                               // 1170\n  },                                                                                                                  // 1171\n  // Returns a new Subscription for the same session with the same                                                    // 1173\n  // initial creation parameters. This isn't a clone: it doesn't have                                                 // 1174\n  // the same _documents cache, stopped state or callbacks; may have a                                                // 1175\n  // different _subscriptionHandle, and gets its userId from the                                                      // 1176\n  // session, not from this object.                                                                                   // 1177\n  _recreate: function () {                                                                                            // 1178\n    var self = this;                                                                                                  // 1179\n    return new Subscription(self._session, self._handler, self._subscriptionId, self._params, self._name);            // 1180\n  },                                                                                                                  // 1183\n  /**                                                                                                                 // 1185\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server                                                                                                    //\n   * @param {Error} error The error to pass to the client.                                                            //\n   * @instance                                                                                                        //\n   * @memberOf Subscription                                                                                           //\n   */error: function (error) {                                                                                        //\n    var self = this;                                                                                                  // 1193\n    if (self._isDeactivated()) return;                                                                                // 1194\n                                                                                                                      //\n    self._session._stopSubscription(self._subscriptionId, error);                                                     // 1196\n  },                                                                                                                  // 1197\n  // Note that while our DDP client will notice that you've called stop() on the                                      // 1199\n  // server (and clean up its _subscriptions table) we don't actually provide a                                       // 1200\n  // mechanism for an app to notice this (the subscribe onError callback only                                         // 1201\n  // triggers if there is an error).                                                                                  // 1202\n  /**                                                                                                                 // 1204\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server                                                                                                    //\n   * @instance                                                                                                        //\n   * @memberOf Subscription                                                                                           //\n   */stop: function () {                                                                                              //\n    var self = this;                                                                                                  // 1211\n    if (self._isDeactivated()) return;                                                                                // 1212\n                                                                                                                      //\n    self._session._stopSubscription(self._subscriptionId);                                                            // 1214\n  },                                                                                                                  // 1215\n  /**                                                                                                                 // 1217\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server                                                                                                    //\n   * @memberOf Subscription                                                                                           //\n   * @instance                                                                                                        //\n   * @param {Function} func The callback function                                                                     //\n   */onStop: function (callback) {                                                                                    //\n    var self = this;                                                                                                  // 1225\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);                                             // 1226\n    if (self._isDeactivated()) callback();else self._stopCallbacks.push(callback);                                    // 1227\n  },                                                                                                                  // 1231\n  // This returns true if the sub has been deactivated, *OR* if the session was                                       // 1233\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't                                            // 1234\n  // happened yet.                                                                                                    // 1235\n  _isDeactivated: function () {                                                                                       // 1236\n    var self = this;                                                                                                  // 1237\n    return self._deactivated || self._session.inQueue === null;                                                       // 1238\n  },                                                                                                                  // 1239\n  /**                                                                                                                 // 1241\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server                                                                                                    //\n   * @memberOf Subscription                                                                                           //\n   * @instance                                                                                                        //\n   * @param {String} collection The name of the collection that contains the new document.                            //\n   * @param {String} id The new document's ID.                                                                        //\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.                       //\n   */added: function (collectionName, id, fields) {                                                                   //\n    var self = this;                                                                                                  // 1251\n    if (self._isDeactivated()) return;                                                                                // 1252\n    id = self._idFilter.idStringify(id);                                                                              // 1254\n    Meteor._ensure(self._documents, collectionName)[id] = true;                                                       // 1255\n                                                                                                                      //\n    self._session.added(self._subscriptionHandle, collectionName, id, fields);                                        // 1256\n  },                                                                                                                  // 1257\n  /**                                                                                                                 // 1259\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server                                                                                                    //\n   * @memberOf Subscription                                                                                           //\n   * @instance                                                                                                        //\n   * @param {String} collection The name of the collection that contains the changed document.                        //\n   * @param {String} id The changed document's ID.                                                                    //\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */changed: function (collectionName, id, fields) {                                                                 //\n    var self = this;                                                                                                  // 1269\n    if (self._isDeactivated()) return;                                                                                // 1270\n    id = self._idFilter.idStringify(id);                                                                              // 1272\n                                                                                                                      //\n    self._session.changed(self._subscriptionHandle, collectionName, id, fields);                                      // 1273\n  },                                                                                                                  // 1274\n  /**                                                                                                                 // 1276\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server                                                                                                    //\n   * @memberOf Subscription                                                                                           //\n   * @instance                                                                                                        //\n   * @param {String} collection The name of the collection that the document has been removed from.                   //\n   * @param {String} id The ID of the document that has been removed.                                                 //\n   */removed: function (collectionName, id) {                                                                         //\n    var self = this;                                                                                                  // 1285\n    if (self._isDeactivated()) return;                                                                                // 1286\n    id = self._idFilter.idStringify(id); // We don't bother to delete sets of things in a collection if the           // 1288\n    // collection is empty.  It could break _removeAllDocuments.                                                      // 1290\n                                                                                                                      //\n    delete self._documents[collectionName][id];                                                                       // 1291\n                                                                                                                      //\n    self._session.removed(self._subscriptionHandle, collectionName, id);                                              // 1292\n  },                                                                                                                  // 1293\n  /**                                                                                                                 // 1295\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server                                                                                                    //\n   * @memberOf Subscription                                                                                           //\n   * @instance                                                                                                        //\n   */ready: function () {                                                                                             //\n    var self = this;                                                                                                  // 1302\n    if (self._isDeactivated()) return;                                                                                // 1303\n    if (!self._subscriptionId) return; // unnecessary but ignored for universal sub                                   // 1305\n                                                                                                                      //\n    if (!self._ready) {                                                                                               // 1307\n      self._session.sendReady([self._subscriptionId]);                                                                // 1308\n                                                                                                                      //\n      self._ready = true;                                                                                             // 1309\n    }                                                                                                                 // 1310\n  }                                                                                                                   // 1311\n}); /******************************************************************************/ /* Server                                                                     */ /******************************************************************************/\n                                                                                                                      //\nServer = function (options) {                                                                                         // 1318\n  var self = this; // The default heartbeat interval is 30 seconds on the server and 35                               // 1319\n  // seconds on the client.  Since the client doesn't need to send a                                                  // 1322\n  // ping as long as it is receiving pings, this means that pings                                                     // 1323\n  // normally go from the server to the client.                                                                       // 1324\n  //                                                                                                                  // 1325\n  // Note: Troposphere depends on the ability to mutate                                                               // 1326\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.                                           // 1327\n                                                                                                                      //\n  self.options = _.defaults(options || {}, {                                                                          // 1328\n    heartbeatInterval: 15000,                                                                                         // 1329\n    heartbeatTimeout: 15000,                                                                                          // 1330\n    // For testing, allow responding to pings to be disabled.                                                         // 1331\n    respondToPings: true                                                                                              // 1332\n  }); // Map of callbacks to call when a new connection comes in to the                                               // 1328\n  // server and completes DDP version negotiation. Use an object instead                                              // 1336\n  // of an array so we can safely remove one from the list while                                                      // 1337\n  // iterating over it.                                                                                               // 1338\n                                                                                                                      //\n  self.onConnectionHook = new Hook({                                                                                  // 1339\n    debugPrintExceptions: \"onConnection callback\"                                                                     // 1340\n  }); // Map of callbacks to call when a new message comes in.                                                        // 1339\n                                                                                                                      //\n  self.onMessageHook = new Hook({                                                                                     // 1344\n    debugPrintExceptions: \"onMessage callback\"                                                                        // 1345\n  });                                                                                                                 // 1344\n  self.publish_handlers = {};                                                                                         // 1348\n  self.universal_publish_handlers = [];                                                                               // 1349\n  self.method_handlers = {};                                                                                          // 1351\n  self.sessions = {}; // map from id to session                                                                       // 1353\n                                                                                                                      //\n  self.stream_server = new StreamServer();                                                                            // 1355\n  self.stream_server.register(function (socket) {                                                                     // 1357\n    // socket implements the SockJSConnection interface                                                               // 1358\n    socket._meteorSession = null;                                                                                     // 1359\n                                                                                                                      //\n    var sendError = function (reason, offendingMessage) {                                                             // 1361\n      var msg = {                                                                                                     // 1362\n        msg: 'error',                                                                                                 // 1362\n        reason: reason                                                                                                // 1362\n      };                                                                                                              // 1362\n      if (offendingMessage) msg.offendingMessage = offendingMessage;                                                  // 1363\n      socket.send(DDPCommon.stringifyDDP(msg));                                                                       // 1365\n    };                                                                                                                // 1366\n                                                                                                                      //\n    socket.on('data', function (raw_msg) {                                                                            // 1368\n      if (Meteor._printReceivedDDP) {                                                                                 // 1369\n        Meteor._debug(\"Received DDP\", raw_msg);                                                                       // 1370\n      }                                                                                                               // 1371\n                                                                                                                      //\n      try {                                                                                                           // 1372\n        try {                                                                                                         // 1373\n          var msg = DDPCommon.parseDDP(raw_msg);                                                                      // 1374\n        } catch (err) {                                                                                               // 1375\n          sendError('Parse error');                                                                                   // 1376\n          return;                                                                                                     // 1377\n        }                                                                                                             // 1378\n                                                                                                                      //\n        if (msg === null || !msg.msg) {                                                                               // 1379\n          sendError('Bad request', msg);                                                                              // 1380\n          return;                                                                                                     // 1381\n        }                                                                                                             // 1382\n                                                                                                                      //\n        if (msg.msg === 'connect') {                                                                                  // 1384\n          if (socket._meteorSession) {                                                                                // 1385\n            sendError(\"Already connected\", msg);                                                                      // 1386\n            return;                                                                                                   // 1387\n          }                                                                                                           // 1388\n                                                                                                                      //\n          Fiber(function () {                                                                                         // 1389\n            self._handleConnect(socket, msg);                                                                         // 1390\n          }).run();                                                                                                   // 1391\n          return;                                                                                                     // 1392\n        }                                                                                                             // 1393\n                                                                                                                      //\n        if (!socket._meteorSession) {                                                                                 // 1395\n          sendError('Must connect first', msg);                                                                       // 1396\n          return;                                                                                                     // 1397\n        }                                                                                                             // 1398\n                                                                                                                      //\n        socket._meteorSession.processMessage(msg);                                                                    // 1399\n      } catch (e) {                                                                                                   // 1400\n        // XXX print stack nicely                                                                                     // 1401\n        Meteor._debug(\"Internal exception while processing message\", msg, e.message, e.stack);                        // 1402\n      }                                                                                                               // 1404\n    });                                                                                                               // 1405\n    socket.on('close', function () {                                                                                  // 1407\n      if (socket._meteorSession) {                                                                                    // 1408\n        Fiber(function () {                                                                                           // 1409\n          socket._meteorSession.close();                                                                              // 1410\n        }).run();                                                                                                     // 1411\n      }                                                                                                               // 1412\n    });                                                                                                               // 1413\n  });                                                                                                                 // 1414\n};                                                                                                                    // 1415\n                                                                                                                      //\n_.extend(Server.prototype, {                                                                                          // 1417\n  /**                                                                                                                 // 1419\n   * @summary Register a callback to be called when a new DDP connection is made to the server.                       //\n   * @locus Server                                                                                                    //\n   * @param {function} callback The function to call when a new DDP connection is established.                        //\n   * @memberOf Meteor                                                                                                 //\n   * @importFromPackage meteor                                                                                        //\n   */onConnection: function (fn) {                                                                                    //\n    var self = this;                                                                                                  // 1427\n    return self.onConnectionHook.register(fn);                                                                        // 1428\n  },                                                                                                                  // 1429\n  /**                                                                                                                 // 1431\n   * @summary Register a callback to be called when a new DDP message is received.                                    //\n   * @locus Server                                                                                                    //\n   * @param {function} callback The function to call when a new DDP message is received.                              //\n   * @memberOf Meteor                                                                                                 //\n   * @importFromPackage meteor                                                                                        //\n   */onMessage: function (fn) {                                                                                       //\n    var self = this;                                                                                                  // 1439\n    return self.onMessageHook.register(fn);                                                                           // 1440\n  },                                                                                                                  // 1441\n  _handleConnect: function (socket, msg) {                                                                            // 1443\n    var self = this; // The connect message must specify a version and an array of supported                          // 1444\n    // versions, and it must claim to support what it is proposing.                                                   // 1447\n                                                                                                                      //\n    if (!(typeof msg.version === 'string' && _.isArray(msg.support) && _.all(msg.support, _.isString) && _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({                                                                            // 1452\n        msg: 'failed',                                                                                                // 1452\n        version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]                                                                  // 1453\n      }));                                                                                                            // 1452\n      socket.close();                                                                                                 // 1454\n      return;                                                                                                         // 1455\n    } // In the future, handle session resumption: something like:                                                    // 1456\n    //  socket._meteorSession = self.sessions[msg.session]                                                            // 1459\n                                                                                                                      //\n                                                                                                                      //\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);                                    // 1460\n                                                                                                                      //\n    if (msg.version !== version) {                                                                                    // 1462\n      // The best version to use (according to the client's stated preferences)                                       // 1463\n      // is not the one the client is trying to use. Inform them about the best                                       // 1464\n      // version to use.                                                                                              // 1465\n      socket.send(DDPCommon.stringifyDDP({                                                                            // 1466\n        msg: 'failed',                                                                                                // 1466\n        version: version                                                                                              // 1466\n      }));                                                                                                            // 1466\n      socket.close();                                                                                                 // 1467\n      return;                                                                                                         // 1468\n    } // Yay, version matches! Create a new session.                                                                  // 1469\n    // Note: Troposphere depends on the ability to mutate                                                             // 1472\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.                                         // 1473\n                                                                                                                      //\n                                                                                                                      //\n    socket._meteorSession = new Session(self, version, socket, self.options);                                         // 1474\n    self.sessions[socket._meteorSession.id] = socket._meteorSession;                                                  // 1475\n    self.onConnectionHook.each(function (callback) {                                                                  // 1476\n      if (socket._meteorSession) callback(socket._meteorSession.connectionHandle);                                    // 1477\n      return true;                                                                                                    // 1479\n    });                                                                                                               // 1480\n  },                                                                                                                  // 1481\n  /**                                                                                                                 // 1482\n   * Register a publish handler function.                                                                             //\n   *                                                                                                                  //\n   * @param name {String} identifier for query                                                                        //\n   * @param handler {Function} publish handler                                                                        //\n   * @param options {Object}                                                                                          //\n   *                                                                                                                  //\n   * Server will call handler function on each new subscription,                                                      //\n   * either when receiving DDP sub message for a named subscription, or on                                            //\n   * DDP connect for a universal subscription.                                                                        //\n   *                                                                                                                  //\n   * If name is null, this will be a subscription that is                                                             //\n   * automatically established and permanently on for all connected                                                   //\n   * client, instead of a subscription that can be turned on and off                                                  //\n   * with subscribe().                                                                                                //\n   *                                                                                                                  //\n   * options to contain:                                                                                              //\n   *  - (mostly internal) is_auto: true if generated automatically                                                    //\n   *    from an autopublish hook. this is for cosmetic purposes only                                                  //\n   *    (it lets us determine whether to print a warning suggesting                                                   //\n   *    that you turn off autopublish.)                                                                               //\n   */ /**                                                                                                             //\n       * @summary Publish a record set.                                                                               //\n       * @memberOf Meteor                                                                                             //\n       * @importFromPackage meteor                                                                                    //\n       * @locus Server                                                                                                //\n       * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n       * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n       */publish: function (name, handler, options) {                                                                 //\n    var self = this;                                                                                                  // 1514\n                                                                                                                      //\n    if (!_.isObject(name)) {                                                                                          // 1516\n      options = options || {};                                                                                        // 1517\n                                                                                                                      //\n      if (name && name in self.publish_handlers) {                                                                    // 1519\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");                                             // 1520\n                                                                                                                      //\n        return;                                                                                                       // 1521\n      }                                                                                                               // 1522\n                                                                                                                      //\n      if (Package.autopublish && !options.is_auto) {                                                                  // 1524\n        // They have autopublish on, yet they're trying to manually                                                   // 1525\n        // picking stuff to publish. They probably should turn off                                                    // 1526\n        // autopublish. (This check isn't perfect -- if you create a                                                  // 1527\n        // publish before you turn on autopublish, it won't catch                                                     // 1528\n        // it. But this will definitely handle the simple case where                                                  // 1529\n        // you've added the autopublish package to your app, and are                                                  // 1530\n        // calling publish from your app code.)                                                                       // 1531\n        if (!self.warned_about_autopublish) {                                                                         // 1532\n          self.warned_about_autopublish = true;                                                                       // 1533\n                                                                                                                      //\n          Meteor._debug(\"** You've set up some data subscriptions with Meteor.publish(), but\\n\" + \"** you still have autopublish turned on. Because autopublish is still\\n\" + \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" + \"** will still be sent to all clients.\\n\" + \"**\\n\" + \"** Turn off autopublish by removing the autopublish package:\\n\" + \"**\\n\" + \"**   $ meteor remove autopublish\\n\" + \"**\\n\" + \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" + \"** for each collection that you want clients to see.\\n\");\n        }                                                                                                             // 1546\n      }                                                                                                               // 1547\n                                                                                                                      //\n      if (name) self.publish_handlers[name] = handler;else {                                                          // 1549\n        self.universal_publish_handlers.push(handler); // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for                                       // 1554\n        // self.sessions to change while we're running this loop.                                                     // 1555\n                                                                                                                      //\n        _.each(self.sessions, function (session) {                                                                    // 1556\n          if (!session._dontStartNewUniversalSubs) {                                                                  // 1557\n            Fiber(function () {                                                                                       // 1558\n              session._startSubscription(handler);                                                                    // 1559\n            }).run();                                                                                                 // 1560\n          }                                                                                                           // 1561\n        });                                                                                                           // 1562\n      }                                                                                                               // 1563\n    } else {                                                                                                          // 1564\n      _.each(name, function (value, key) {                                                                            // 1566\n        self.publish(key, value, {});                                                                                 // 1567\n      });                                                                                                             // 1568\n    }                                                                                                                 // 1569\n  },                                                                                                                  // 1570\n  _removeSession: function (session) {                                                                                // 1572\n    var self = this;                                                                                                  // 1573\n                                                                                                                      //\n    if (self.sessions[session.id]) {                                                                                  // 1574\n      delete self.sessions[session.id];                                                                               // 1575\n    }                                                                                                                 // 1576\n  },                                                                                                                  // 1577\n  /**                                                                                                                 // 1579\n   * @summary Defines functions that can be invoked over the network by clients.                                      //\n   * @locus Anywhere                                                                                                  //\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.                         //\n   * @memberOf Meteor                                                                                                 //\n   * @importFromPackage meteor                                                                                        //\n   */methods: function (methods) {                                                                                    //\n    var self = this;                                                                                                  // 1587\n                                                                                                                      //\n    _.each(methods, function (func, name) {                                                                           // 1588\n      if (typeof func !== 'function') throw new Error(\"Method '\" + name + \"' must be a function\");                    // 1589\n      if (self.method_handlers[name]) throw new Error(\"A method named '\" + name + \"' is already defined\");            // 1591\n      self.method_handlers[name] = func;                                                                              // 1593\n    });                                                                                                               // 1594\n  },                                                                                                                  // 1595\n  call: function (name) {                                                                                             // 1597\n    for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {         // 1597\n      args[_key - 1] = arguments[_key];                                                                               // 1597\n    }                                                                                                                 // 1597\n                                                                                                                      //\n    if (args.length && typeof args[args.length - 1] === \"function\") {                                                 // 1598\n      // If it's a function, the last argument is the result callback, not                                            // 1599\n      // a parameter to the remote method.                                                                            // 1600\n      var callback = args.pop();                                                                                      // 1601\n    }                                                                                                                 // 1602\n                                                                                                                      //\n    return this.apply(name, args, callback);                                                                          // 1604\n  },                                                                                                                  // 1605\n  // A version of the call method that always returns a Promise.                                                      // 1607\n  callAsync: function (name) {                                                                                        // 1608\n    for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {  // 1608\n      args[_key2 - 1] = arguments[_key2];                                                                             // 1608\n    }                                                                                                                 // 1608\n                                                                                                                      //\n    return this.applyAsync(name, args);                                                                               // 1609\n  },                                                                                                                  // 1610\n  apply: function (name, args, options, callback) {                                                                   // 1612\n    // We were passed 3 arguments. They may be either (name, args, options)                                           // 1613\n    // or (name, args, callback)                                                                                      // 1614\n    if (!callback && typeof options === 'function') {                                                                 // 1615\n      callback = options;                                                                                             // 1616\n      options = {};                                                                                                   // 1617\n    } else {                                                                                                          // 1618\n      options = options || {};                                                                                        // 1619\n    }                                                                                                                 // 1620\n                                                                                                                      //\n    var promise = this.applyAsync(name, args, options); // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client                                          // 1625\n    // blocks on the relevant data being visible, so you are NOT guaranteed that                                      // 1626\n    // cursor observe callbacks have fired when your callback is invoked. (We                                         // 1627\n    // can change this if there's a real use case.)                                                                   // 1628\n                                                                                                                      //\n    if (callback) {                                                                                                   // 1629\n      promise.then(function (result) {                                                                                // 1630\n        return callback(undefined, result);                                                                           // 1631\n      }, function (exception) {                                                                                       // 1631\n        return callback(exception);                                                                                   // 1632\n      });                                                                                                             // 1632\n    } else {                                                                                                          // 1634\n      return promise.await();                                                                                         // 1635\n    }                                                                                                                 // 1636\n  },                                                                                                                  // 1637\n  // @param options {Optional Object}                                                                                 // 1639\n  applyAsync: function (name, args, options) {                                                                        // 1640\n    // Run the handler                                                                                                // 1641\n    var handler = this.method_handlers[name];                                                                         // 1642\n                                                                                                                      //\n    if (!handler) {                                                                                                   // 1643\n      return Promise.reject(new Meteor.Error(404, \"Method '\" + name + \"' not found\"));                                // 1644\n    } // If this is a method call from within another method or publish function,                                     // 1647\n    // get the user state from the outer method or publish function, otherwise                                        // 1650\n    // don't allow setUserId to be called                                                                             // 1651\n                                                                                                                      //\n                                                                                                                      //\n    var userId = null;                                                                                                // 1652\n                                                                                                                      //\n    var setUserId = function () {                                                                                     // 1653\n      throw new Error(\"Can't call setUserId on a server initiated method call\");                                      // 1654\n    };                                                                                                                // 1655\n                                                                                                                      //\n    var connection = null;                                                                                            // 1656\n                                                                                                                      //\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();                                                 // 1657\n                                                                                                                      //\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();                                       // 1658\n                                                                                                                      //\n    var randomSeed = null;                                                                                            // 1659\n                                                                                                                      //\n    if (currentMethodInvocation) {                                                                                    // 1660\n      userId = currentMethodInvocation.userId;                                                                        // 1661\n                                                                                                                      //\n      setUserId = function (userId) {                                                                                 // 1662\n        currentMethodInvocation.setUserId(userId);                                                                    // 1663\n      };                                                                                                              // 1664\n                                                                                                                      //\n      connection = currentMethodInvocation.connection;                                                                // 1665\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);                                              // 1666\n    } else if (currentPublicationInvocation) {                                                                        // 1667\n      userId = currentPublicationInvocation.userId;                                                                   // 1668\n                                                                                                                      //\n      setUserId = function (userId) {                                                                                 // 1669\n        currentPublicationInvocation._session._setUserId(userId);                                                     // 1670\n      };                                                                                                              // 1671\n                                                                                                                      //\n      connection = currentPublicationInvocation.connection;                                                           // 1672\n    }                                                                                                                 // 1673\n                                                                                                                      //\n    var invocation = new DDPCommon.MethodInvocation({                                                                 // 1675\n      isSimulation: false,                                                                                            // 1676\n      userId: userId,                                                                                                 // 1677\n      setUserId: setUserId,                                                                                           // 1678\n      connection: connection,                                                                                         // 1679\n      randomSeed: randomSeed                                                                                          // 1680\n    });                                                                                                               // 1675\n    return new Promise(function (resolve) {                                                                           // 1683\n      return resolve(DDP._CurrentMethodInvocation.withValue(invocation, function () {                                 // 1683\n        return maybeAuditArgumentChecks(handler, invocation, EJSON.clone(args), \"internal call to '\" + name + \"'\");   // 1686\n      }));                                                                                                            // 1686\n    }).then(EJSON.clone);                                                                                             // 1683\n  },                                                                                                                  // 1692\n  _urlForSession: function (sessionId) {                                                                              // 1694\n    var self = this;                                                                                                  // 1695\n    var session = self.sessions[sessionId];                                                                           // 1696\n    if (session) return session._socketUrl;else return null;                                                          // 1697\n  }                                                                                                                   // 1701\n});                                                                                                                   // 1417\n                                                                                                                      //\nvar calculateVersion = function (clientSupportedVersions, serverSupportedVersions) {                                  // 1704\n  var correctVersion = _.find(clientSupportedVersions, function (version) {                                           // 1706\n    return _.contains(serverSupportedVersions, version);                                                              // 1707\n  });                                                                                                                 // 1708\n                                                                                                                      //\n  if (!correctVersion) {                                                                                              // 1709\n    correctVersion = serverSupportedVersions[0];                                                                      // 1710\n  }                                                                                                                   // 1711\n                                                                                                                      //\n  return correctVersion;                                                                                              // 1712\n};                                                                                                                    // 1713\n                                                                                                                      //\nDDPServer._calculateVersion = calculateVersion; // \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client                                                                                               // 1719\n                                                                                                                      //\nvar wrapInternalException = function (exception, context) {                                                           // 1720\n  if (!exception) return exception; // To allow packages to throw errors intended for the client but not have to      // 1721\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any                                       // 1724\n  // error before it is thrown.                                                                                       // 1725\n                                                                                                                      //\n  if (exception.isClientSafe) {                                                                                       // 1726\n    if (!(exception instanceof Meteor.Error)) {                                                                       // 1727\n      var originalMessage = exception.message;                                                                        // 1728\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);                             // 1729\n      exception.message = originalMessage;                                                                            // 1730\n    }                                                                                                                 // 1731\n                                                                                                                      //\n    return exception;                                                                                                 // 1732\n  } // tests can set the 'expected' flag on an exception so it won't go to the                                        // 1733\n  // server log                                                                                                       // 1736\n                                                                                                                      //\n                                                                                                                      //\n  if (!exception.expected) {                                                                                          // 1737\n    Meteor._debug(\"Exception \" + context, exception.stack);                                                           // 1738\n                                                                                                                      //\n    if (exception.sanitizedError) {                                                                                   // 1739\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError.message);                    // 1740\n                                                                                                                      //\n      Meteor._debug();                                                                                                // 1741\n    }                                                                                                                 // 1742\n  } // Did the error contain more details that could have been useful if caught in                                    // 1743\n  // server code (or if thrown from non-client-originated code), but also                                             // 1746\n  // provided a \"sanitized\" version with more context than 500 Internal server                                        // 1747\n  // error? Use that.                                                                                                 // 1748\n                                                                                                                      //\n                                                                                                                      //\n  if (exception.sanitizedError) {                                                                                     // 1749\n    if (exception.sanitizedError.isClientSafe) return exception.sanitizedError;                                       // 1750\n                                                                                                                      //\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" + \"does not have isClientSafe property set; ignoring\");\n  }                                                                                                                   // 1754\n                                                                                                                      //\n  return new Meteor.Error(500, \"Internal server error\");                                                              // 1756\n}; // Audit argument checks, if the audit-argument-checks package exists (it is a                                     // 1757\n// weak dependency of this package).                                                                                  // 1761\n                                                                                                                      //\n                                                                                                                      //\nvar maybeAuditArgumentChecks = function (f, context, args, description) {                                             // 1762\n  args = args || [];                                                                                                  // 1763\n                                                                                                                      //\n  if (Package['audit-argument-checks']) {                                                                             // 1764\n    return Match._failIfArgumentsAreNotAllChecked(f, context, args, description);                                     // 1765\n  }                                                                                                                   // 1767\n                                                                                                                      //\n  return f.apply(context, args);                                                                                      // 1768\n};                                                                                                                    // 1769\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"writefence.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ddp-server/writefence.js                                                                                  //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar Future = Npm.require('fibers/future'); // A write fence collects a group of writes, and provides a callback       // 1\n// when all of the writes are fully committed and propagated (all                                                     // 4\n// observers have been notified of the write and acknowledged it.)                                                    // 5\n//                                                                                                                    // 6\n                                                                                                                      //\n                                                                                                                      //\nDDPServer._WriteFence = function () {                                                                                 // 7\n  var self = this;                                                                                                    // 8\n  self.armed = false;                                                                                                 // 10\n  self.fired = false;                                                                                                 // 11\n  self.retired = false;                                                                                               // 12\n  self.outstanding_writes = 0;                                                                                        // 13\n  self.before_fire_callbacks = [];                                                                                    // 14\n  self.completion_callbacks = [];                                                                                     // 15\n}; // The current write fence. When there is a current write fence, code                                              // 16\n// that writes to databases should register their writes with it using                                                // 19\n// beginWrite().                                                                                                      // 20\n//                                                                                                                    // 21\n                                                                                                                      //\n                                                                                                                      //\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable();                                                      // 22\n                                                                                                                      //\n_.extend(DDPServer._WriteFence.prototype, {                                                                           // 24\n  // Start tracking a write, and return an object to represent it. The                                                // 25\n  // object has a single method, committed(). This method should be                                                   // 26\n  // called when the write is fully committed and propagated. You can                                                 // 27\n  // continue to add writes to the WriteFence up until it is triggered                                                // 28\n  // (calls its callbacks because all writes have committed.)                                                         // 29\n  beginWrite: function () {                                                                                           // 30\n    var self = this;                                                                                                  // 31\n    if (self.retired) return {                                                                                        // 33\n      committed: function () {}                                                                                       // 34\n    };                                                                                                                // 34\n    if (self.fired) throw new Error(\"fence has already activated -- too late to add writes\");                         // 36\n    self.outstanding_writes++;                                                                                        // 39\n    var committed = false;                                                                                            // 40\n    return {                                                                                                          // 41\n      committed: function () {                                                                                        // 42\n        if (committed) throw new Error(\"committed called twice on the same write\");                                   // 43\n        committed = true;                                                                                             // 45\n        self.outstanding_writes--;                                                                                    // 46\n                                                                                                                      //\n        self._maybeFire();                                                                                            // 47\n      }                                                                                                               // 48\n    };                                                                                                                // 41\n  },                                                                                                                  // 50\n  // Arm the fence. Once the fence is armed, and there are no more                                                    // 52\n  // uncommitted writes, it will activate.                                                                            // 53\n  arm: function () {                                                                                                  // 54\n    var self = this;                                                                                                  // 55\n    if (self === DDPServer._CurrentWriteFence.get()) throw Error(\"Can't arm the current fence\");                      // 56\n    self.armed = true;                                                                                                // 58\n                                                                                                                      //\n    self._maybeFire();                                                                                                // 59\n  },                                                                                                                  // 60\n  // Register a function to be called once before firing the fence.                                                   // 62\n  // Callback function can add new writes to the fence, in which case                                                 // 63\n  // it won't fire until those writes are done as well.                                                               // 64\n  onBeforeFire: function (func) {                                                                                     // 65\n    var self = this;                                                                                                  // 66\n    if (self.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");                // 67\n    self.before_fire_callbacks.push(func);                                                                            // 70\n  },                                                                                                                  // 71\n  // Register a function to be called when the fence fires.                                                           // 73\n  onAllCommitted: function (func) {                                                                                   // 74\n    var self = this;                                                                                                  // 75\n    if (self.fired) throw new Error(\"fence has already activated -- too late to \" + \"add a callback\");                // 76\n    self.completion_callbacks.push(func);                                                                             // 79\n  },                                                                                                                  // 80\n  // Convenience function. Arms the fence, then blocks until it fires.                                                // 82\n  armAndWait: function () {                                                                                           // 83\n    var self = this;                                                                                                  // 84\n    var future = new Future();                                                                                        // 85\n    self.onAllCommitted(function () {                                                                                 // 86\n      future['return']();                                                                                             // 87\n    });                                                                                                               // 88\n    self.arm();                                                                                                       // 89\n    future.wait();                                                                                                    // 90\n  },                                                                                                                  // 91\n  _maybeFire: function () {                                                                                           // 93\n    var self = this;                                                                                                  // 94\n    if (self.fired) throw new Error(\"write fence already activated?\");                                                // 95\n                                                                                                                      //\n    if (self.armed && !self.outstanding_writes) {                                                                     // 97\n      var invokeCallback = function (func) {                                                                          // 97\n        try {                                                                                                         // 99\n          func(self);                                                                                                 // 100\n        } catch (err) {                                                                                               // 101\n          Meteor._debug(\"exception in write fence callback:\", err);                                                   // 102\n        }                                                                                                             // 103\n      };                                                                                                              // 104\n                                                                                                                      //\n      self.outstanding_writes++;                                                                                      // 106\n                                                                                                                      //\n      while (self.before_fire_callbacks.length > 0) {                                                                 // 107\n        var callbacks = self.before_fire_callbacks;                                                                   // 108\n        self.before_fire_callbacks = [];                                                                              // 109\n                                                                                                                      //\n        _.each(callbacks, invokeCallback);                                                                            // 110\n      }                                                                                                               // 111\n                                                                                                                      //\n      self.outstanding_writes--;                                                                                      // 112\n                                                                                                                      //\n      if (!self.outstanding_writes) {                                                                                 // 114\n        self.fired = true;                                                                                            // 115\n        var callbacks = self.completion_callbacks;                                                                    // 116\n        self.completion_callbacks = [];                                                                               // 117\n                                                                                                                      //\n        _.each(callbacks, invokeCallback);                                                                            // 118\n      }                                                                                                               // 119\n    }                                                                                                                 // 120\n  },                                                                                                                  // 121\n  // Deactivate this fence so that adding more writes has no effect.                                                  // 123\n  // The fence must have already fired.                                                                               // 124\n  retire: function () {                                                                                               // 125\n    var self = this;                                                                                                  // 126\n    if (!self.fired) throw new Error(\"Can't retire a fence that hasn't fired.\");                                      // 127\n    self.retired = true;                                                                                              // 129\n  }                                                                                                                   // 130\n});                                                                                                                   // 24\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"crossbar.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ddp-server/crossbar.js                                                                                    //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n// A \"crossbar\" is a class that provides structured notification registration.                                        // 1\n// See _match for the definition of how a notification matches a trigger.                                             // 2\n// All notifications and triggers must have a string key named 'collection'.                                          // 3\nDDPServer._Crossbar = function (options) {                                                                            // 5\n  var self = this;                                                                                                    // 6\n  options = options || {};                                                                                            // 7\n  self.nextId = 1; // map from collection name (string) -> listener id -> object. each object has                     // 9\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no                                               // 11\n  // collection\".                                                                                                     // 12\n                                                                                                                      //\n  self.listenersByCollection = {};                                                                                    // 13\n  self.factPackage = options.factPackage || \"livedata\";                                                               // 14\n  self.factName = options.factName || null;                                                                           // 15\n};                                                                                                                    // 16\n                                                                                                                      //\n_.extend(DDPServer._Crossbar.prototype, {                                                                             // 18\n  // msg is a trigger or a notification                                                                               // 19\n  _collectionForMessage: function (msg) {                                                                             // 20\n    var self = this;                                                                                                  // 21\n                                                                                                                      //\n    if (!_.has(msg, 'collection')) {                                                                                  // 22\n      return '';                                                                                                      // 23\n    } else if (typeof msg.collection === 'string') {                                                                  // 24\n      if (msg.collection === '') throw Error(\"Message has empty collection!\");                                        // 25\n      return msg.collection;                                                                                          // 27\n    } else {                                                                                                          // 28\n      throw Error(\"Message has non-string collection!\");                                                              // 29\n    }                                                                                                                 // 30\n  },                                                                                                                  // 31\n  // Listen for notification that match 'trigger'. A notification                                                     // 33\n  // matches if it has the key-value pairs in trigger as a                                                            // 34\n  // subset. When a notification matches, call 'callback', passing                                                    // 35\n  // the actual notification.                                                                                         // 36\n  //                                                                                                                  // 37\n  // Returns a listen handle, which is an object with a method                                                        // 38\n  // stop(). Call stop() to stop listening.                                                                           // 39\n  //                                                                                                                  // 40\n  // XXX It should be legal to call fire() from inside a listen()                                                     // 41\n  // callback?                                                                                                        // 42\n  listen: function (trigger, callback) {                                                                              // 43\n    var self = this;                                                                                                  // 44\n    var id = self.nextId++;                                                                                           // 45\n                                                                                                                      //\n    var collection = self._collectionForMessage(trigger);                                                             // 47\n                                                                                                                      //\n    var record = {                                                                                                    // 48\n      trigger: EJSON.clone(trigger),                                                                                  // 48\n      callback: callback                                                                                              // 48\n    };                                                                                                                // 48\n                                                                                                                      //\n    if (!_.has(self.listenersByCollection, collection)) {                                                             // 49\n      self.listenersByCollection[collection] = {};                                                                    // 50\n    }                                                                                                                 // 51\n                                                                                                                      //\n    self.listenersByCollection[collection][id] = record;                                                              // 52\n                                                                                                                      //\n    if (self.factName && Package.facts) {                                                                             // 54\n      Package.facts.Facts.incrementServerFact(self.factPackage, self.factName, 1);                                    // 55\n    }                                                                                                                 // 57\n                                                                                                                      //\n    return {                                                                                                          // 59\n      stop: function () {                                                                                             // 60\n        if (self.factName && Package.facts) {                                                                         // 61\n          Package.facts.Facts.incrementServerFact(self.factPackage, self.factName, -1);                               // 62\n        }                                                                                                             // 64\n                                                                                                                      //\n        delete self.listenersByCollection[collection][id];                                                            // 65\n                                                                                                                      //\n        if (_.isEmpty(self.listenersByCollection[collection])) {                                                      // 66\n          delete self.listenersByCollection[collection];                                                              // 67\n        }                                                                                                             // 68\n      }                                                                                                               // 69\n    };                                                                                                                // 59\n  },                                                                                                                  // 71\n  // Fire the provided 'notification' (an object whose attribute                                                      // 73\n  // values are all JSON-compatibile) -- inform all matching listeners                                                // 74\n  // (registered with listen()).                                                                                      // 75\n  //                                                                                                                  // 76\n  // If fire() is called inside a write fence, then each of the                                                       // 77\n  // listener callbacks will be called inside the write fence as well.                                                // 78\n  //                                                                                                                  // 79\n  // The listeners may be invoked in parallel, rather than serially.                                                  // 80\n  fire: function (notification) {                                                                                     // 81\n    var self = this;                                                                                                  // 82\n                                                                                                                      //\n    var collection = self._collectionForMessage(notification);                                                        // 84\n                                                                                                                      //\n    if (!_.has(self.listenersByCollection, collection)) {                                                             // 86\n      return;                                                                                                         // 87\n    }                                                                                                                 // 88\n                                                                                                                      //\n    var listenersForCollection = self.listenersByCollection[collection];                                              // 90\n    var callbackIds = [];                                                                                             // 91\n                                                                                                                      //\n    _.each(listenersForCollection, function (l, id) {                                                                 // 92\n      if (self._matches(notification, l.trigger)) {                                                                   // 93\n        callbackIds.push(id);                                                                                         // 94\n      }                                                                                                               // 95\n    }); // Listener callbacks can yield, so we need to first find all the ones that                                   // 96\n    // match in a single iteration over self.listenersByCollection (which can't                                       // 99\n    // be mutated during this iteration), and then invoke the matching                                                // 100\n    // callbacks, checking before each call to ensure they haven't stopped.                                           // 101\n    // Note that we don't have to check that                                                                          // 102\n    // self.listenersByCollection[collection] still === listenersForCollection,                                       // 103\n    // because the only way that stops being true is if listenersForCollection                                        // 104\n    // first gets reduced down to the empty object (and then never gets                                               // 105\n    // increased again).                                                                                              // 106\n                                                                                                                      //\n                                                                                                                      //\n    _.each(callbackIds, function (id) {                                                                               // 107\n      if (_.has(listenersForCollection, id)) {                                                                        // 108\n        listenersForCollection[id].callback(notification);                                                            // 109\n      }                                                                                                               // 110\n    });                                                                                                               // 111\n  },                                                                                                                  // 112\n  // A notification matches a trigger if all keys that exist in both are equal.                                       // 114\n  //                                                                                                                  // 115\n  // Examples:                                                                                                        // 116\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}                                                                 // 117\n  //    (a non-targeted write to a collection matches a                                                               // 118\n  //     non-targeted query)                                                                                          // 119\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}                                                        // 120\n  //    (a targeted write to a collection matches a non-targeted query)                                               // 121\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}                                                        // 122\n  //    (a non-targeted write to a collection matches a                                                               // 123\n  //     targeted query)                                                                                              // 124\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}                                               // 125\n  //    (a targeted write to a collection matches a targeted query targeted                                           // 126\n  //     at the same document)                                                                                        // 127\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}                                        // 128\n  //    (a targeted write to a collection does not match a targeted query                                             // 129\n  //     targeted at a different document)                                                                            // 130\n  _matches: function (notification, trigger) {                                                                        // 131\n    // Most notifications that use the crossbar have a string `collection` and                                        // 132\n    // maybe an `id` that is a string or ObjectID. We're already dividing up                                          // 133\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and                                         // 134\n    // avoid the overly generic EJSON.equals). This makes a noticeable                                                // 135\n    // performance difference; see https://github.com/meteor/meteor/pull/3697                                         // 136\n    if (typeof notification.id === 'string' && typeof trigger.id === 'string' && notification.id !== trigger.id) {    // 137\n      return false;                                                                                                   // 140\n    }                                                                                                                 // 141\n                                                                                                                      //\n    if (notification.id instanceof MongoID.ObjectID && trigger.id instanceof MongoID.ObjectID && !notification.id.equals(trigger.id)) {\n      return false;                                                                                                   // 145\n    }                                                                                                                 // 146\n                                                                                                                      //\n    return _.all(trigger, function (triggerValue, key) {                                                              // 148\n      return !_.has(notification, key) || EJSON.equals(triggerValue, notification[key]);                              // 149\n    });                                                                                                               // 151\n  }                                                                                                                   // 152\n}); // The \"invalidation crossbar\" is a specific instance used by the DDP server to                                   // 18\n// implement write fence notifications. Listener callbacks on this crossbar                                           // 156\n// should call beginWrite on the current write fence before they return, if they                                      // 157\n// want to delay the write fence from firing (ie, the DDP method-data-updated                                         // 158\n// message from being sent).                                                                                          // 159\n                                                                                                                      //\n                                                                                                                      //\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({                                                           // 160\n  factName: \"invalidation-crossbar-listeners\"                                                                         // 161\n});                                                                                                                   // 160\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"server_convenience.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/ddp-server/server_convenience.js                                                                          //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nif (process.env.DDP_DEFAULT_CONNECTION_URL) {                                                                         // 1\n  __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL = process.env.DDP_DEFAULT_CONNECTION_URL;                      // 2\n}                                                                                                                     // 4\n                                                                                                                      //\nMeteor.server = new Server();                                                                                         // 6\n                                                                                                                      //\nMeteor.refresh = function (notification) {                                                                            // 8\n  DDPServer._InvalidationCrossbar.fire(notification);                                                                 // 9\n}; // Proxy the public methods of Meteor.server so they can                                                           // 10\n// be called directly on Meteor.                                                                                      // 13\n                                                                                                                      //\n                                                                                                                      //\n_.each(['publish', 'methods', 'call', 'apply', 'onConnection', 'onMessage'], function (name) {                        // 14\n  Meteor[name] = _.bind(Meteor.server[name], Meteor.server);                                                          // 16\n}); // Meteor.server used to be called Meteor.default_server. Provide                                                 // 17\n// backcompat as a courtesy even though it was never documented.                                                      // 20\n// XXX COMPAT WITH 0.6.4                                                                                              // 21\n                                                                                                                      //\n                                                                                                                      //\nMeteor.default_server = Meteor.server;                                                                                // 22\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./node_modules/meteor/ddp-server/stream_server.js\");\nrequire(\"./node_modules/meteor/ddp-server/livedata_server.js\");\nrequire(\"./node_modules/meteor/ddp-server/writefence.js\");\nrequire(\"./node_modules/meteor/ddp-server/crossbar.js\");\nrequire(\"./node_modules/meteor/ddp-server/server_convenience.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['ddp-server'] = {}, {\n  DDPServer: DDPServer\n});\n\n})();\n","servePath":"/packages/ddp-server.js","sourceMap":{"version":3,"sources":["packages/ddp-server/stream_server.js","packages/ddp-server/livedata_server.js","packages/ddp-server/writefence.js","packages/ddp-server/crossbar.js","packages/ddp-server/server_convenience.js"],"names":["url","Npm","require","websocketExtensions","_","once","extensions","websocketCompressionConfig","process","env","SERVER_WEBSOCKET_COMPRESSION","JSON","parse","push","configure","pathPrefix","__meteor_runtime_config__","ROOT_URL_PATH_PREFIX","StreamServer","self","registration_callbacks","open_sockets","prefix","RoutePolicy","declare","sockjs","serverOptions","log","heartbeat_delay","disconnect_delay","jsessionid","USE_JSESSIONID","DISABLE_WEBSOCKETS","websocket","faye_server_options","server","createServer","WebApp","httpServer","removeListener","_timeoutAdjustmentRequestCallback","installHandlers","addListener","_redirectWebsocketEndpoint","on","socket","setWebsocketTimeout","timeout","protocol","_session","recv","connection","setTimeout","send","data","write","without","stringify","server_id","each","callback","extend","prototype","register","all_sockets","values","event","oldHttpServerListeners","listeners","slice","removeAllListeners","newListener","request","args","arguments","parsedUrl","pathname","format","oldListener","apply","DDPServer","Fiber","SessionDocumentView","existsIn","dataByKey","_SessionDocumentView","getFields","ret","precedenceList","key","value","clearField","subscriptionHandle","changeCollector","removedValue","undefined","i","length","precedence","splice","isEmpty","EJSON","equals","changeField","isAdd","clone","has","elt","find","SessionCollectionView","collectionName","sessionCallbacks","documents","callbacks","_SessionCollectionView","diff","previous","DiffSequence","diffObjects","both","bind","diffDocument","rightOnly","id","nowDV","added","leftOnly","prevDV","removed","fields","prev","now","changed","docView","changedResult","Error","err","Session","version","options","Random","initialized","inQueue","Meteor","_DoubleEndedQueue","blocked","workerRunning","_namedSubs","_universalSubs","userId","collectionViews","_isSending","_dontStartNewUniversalSubs","_pendingReady","_closeCallbacks","_socketUrl","_respondToPings","respondToPings","connectionHandle","close","onClose","fn","cb","bindEnvironment","defer","clientAddress","_clientAddress","httpHeaders","headers","msg","session","startUniversalSubs","run","heartbeatInterval","heartbeat","DDPCommon","Heartbeat","heartbeatTimeout","onTimeout","sendPing","start","Package","facts","Facts","incrementServerFact","sendReady","subscriptionIds","subs","subscriptionId","sendAdded","collection","sendChanged","sendRemoved","getSendCallbacks","getCollectionView","view","handlers","universal_publish_handlers","handler","_startSubscription","stop","_meteorSession","_deactivateAllSubscriptions","_removeSession","_printSentDDP","_debug","stringifyDDP","sendError","reason","offendingMessage","processMessage","msg_in","messageReceived","processNext","shift","unblock","onMessageHook","protocol_handlers","call","sub","name","params","Array","publish_handlers","error","DDPRateLimiter","rateLimiterInput","type","connectionId","_increment","rateLimitResult","_check","allowed","getErrorMessage","timeToReset","unsub","_stopSubscription","method","randomSeed","fence","_WriteFence","onAllCommitted","retire","methods","method_handlers","arm","setUserId","_setUserId","invocation","MethodInvocation","isSimulation","promise","Promise","resolve","reject","_CurrentWriteFence","withValue","DDP","_CurrentMethodInvocation","maybeAuditArgumentChecks","finish","payload","then","result","exception","wrapInternalException","_eachSub","f","_diffCollectionViews","beforeCVs","leftValue","rightValue","doc","_deactivate","oldNamedSubs","_recreate","_runHandler","_noYieldsAllowed","subId","Subscription","subName","_name","_removeAllDocuments","response","httpForwardedCount","parseInt","remoteAddress","forwardedFor","isString","trim","split","_handler","_subscriptionId","_params","_subscriptionHandle","_deactivated","_stopCallbacks","_documents","_ready","_idFilter","idStringify","MongoID","idParse","res","_CurrentPublicationInvocation","e","_isDeactivated","_publishHandlerResult","isCursor","c","_publishCursor","ready","isArray","all","collectionNames","_getCollectionName","cur","_callStopCallbacks","collectionDocs","keys","strId","onStop","_ensure","Server","defaults","onConnectionHook","Hook","debugPrintExceptions","sessions","stream_server","raw_msg","_printReceivedDDP","parseDDP","_handleConnect","message","stack","onConnection","onMessage","support","contains","SUPPORTED_DDP_VERSIONS","calculateVersion","publish","isObject","autopublish","is_auto","warned_about_autopublish","func","pop","callAsync","applyAsync","await","currentMethodInvocation","get","currentPublicationInvocation","makeRpcSeed","_urlForSession","sessionId","clientSupportedVersions","serverSupportedVersions","correctVersion","_calculateVersion","context","isClientSafe","originalMessage","details","expected","sanitizedError","description","Match","_failIfArgumentsAreNotAllChecked","Future","armed","fired","retired","outstanding_writes","before_fire_callbacks","completion_callbacks","EnvironmentVariable","beginWrite","committed","_maybeFire","onBeforeFire","armAndWait","future","wait","invokeCallback","_Crossbar","nextId","listenersByCollection","factPackage","factName","_collectionForMessage","listen","trigger","record","fire","notification","listenersForCollection","callbackIds","l","_matches","ObjectID","triggerValue","_InvalidationCrossbar","DDP_DEFAULT_CONNECTION_URL","refresh","default_server"],"mappings":"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","file":"/packages/ddp-server.js","sourcesContent":["var url = Npm.require('url');\n\n// By default, we use the permessage-deflate extension with default\n// configuration. If $SERVER_WEBSOCKET_COMPRESSION is set, then it must be valid\n// JSON. If it represents a falsey value, then we do not use permessage-deflate\n// at all; otherwise, the JSON value is used as an argument to deflate's\n// configure method; see\n// https://github.com/faye/permessage-deflate-node/blob/master/README.md\n//\n// (We do this in an _.once instead of at startup, because we don't want to\n// crash the tool during isopacket load if your JSON doesn't parse. This is only\n// a problem because the tool has to load the DDP server code just in order to\n// be a DDP client; see https://github.com/meteor/meteor/issues/3452 .)\nvar websocketExtensions = _.once(function () {\n  var extensions = [];\n\n  var websocketCompressionConfig = process.env.SERVER_WEBSOCKET_COMPRESSION\n        ? JSON.parse(process.env.SERVER_WEBSOCKET_COMPRESSION) : {};\n  if (websocketCompressionConfig) {\n    extensions.push(Npm.require('permessage-deflate').configure(\n      websocketCompressionConfig\n    ));\n  }\n\n  return extensions;\n});\n\nvar pathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX ||  \"\";\n\nStreamServer = function () {\n  var self = this;\n  self.registration_callbacks = [];\n  self.open_sockets = [];\n\n  // Because we are installing directly onto WebApp.httpServer instead of using\n  // WebApp.app, we have to process the path prefix ourselves.\n  self.prefix = pathPrefix + '/sockjs';\n  RoutePolicy.declare(self.prefix + '/', 'network');\n\n  // set up sockjs\n  var sockjs = Npm.require('sockjs');\n  var serverOptions = {\n    prefix: self.prefix,\n    log: function() {},\n    // this is the default, but we code it explicitly because we depend\n    // on it in stream_client:HEARTBEAT_TIMEOUT\n    heartbeat_delay: 45000,\n    // The default disconnect_delay is 5 seconds, but if the server ends up CPU\n    // bound for that much time, SockJS might not notice that the user has\n    // reconnected because the timer (of disconnect_delay ms) can fire before\n    // SockJS processes the new connection. Eventually we'll fix this by not\n    // combining CPU-heavy processing with SockJS termination (eg a proxy which\n    // converts to Unix sockets) but for now, raise the delay.\n    disconnect_delay: 60 * 1000,\n    // Set the USE_JSESSIONID environment variable to enable setting the\n    // JSESSIONID cookie. This is useful for setting up proxies with\n    // session affinity.\n    jsessionid: !!process.env.USE_JSESSIONID\n  };\n\n  // If you know your server environment (eg, proxies) will prevent websockets\n  // from ever working, set $DISABLE_WEBSOCKETS and SockJS clients (ie,\n  // browsers) will not waste time attempting to use them.\n  // (Your server will still have a /websocket endpoint.)\n  if (process.env.DISABLE_WEBSOCKETS) {\n    serverOptions.websocket = false;\n  } else {\n    serverOptions.faye_server_options = {\n      extensions: websocketExtensions()\n    };\n  }\n\n  self.server = sockjs.createServer(serverOptions);\n\n  // Install the sockjs handlers, but we want to keep around our own particular\n  // request handler that adjusts idle timeouts while we have an outstanding\n  // request.  This compensates for the fact that sockjs removes all listeners\n  // for \"request\" to add its own.\n  WebApp.httpServer.removeListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n  self.server.installHandlers(WebApp.httpServer);\n  WebApp.httpServer.addListener(\n    'request', WebApp._timeoutAdjustmentRequestCallback);\n\n  // Support the /websocket endpoint\n  self._redirectWebsocketEndpoint();\n\n  self.server.on('connection', function (socket) {\n    // We want to make sure that if a client connects to us and does the initial\n    // Websocket handshake but never gets to the DDP handshake, that we\n    // eventually kill the socket.  Once the DDP handshake happens, DDP\n    // heartbeating will work. And before the Websocket handshake, the timeouts\n    // we set at the server level in webapp_server.js will work. But\n    // faye-websocket calls setTimeout(0) on any socket it takes over, so there\n    // is an \"in between\" state where this doesn't happen.  We work around this\n    // by explicitly setting the socket timeout to a relatively large time here,\n    // and setting it back to zero when we set up the heartbeat in\n    // livedata_server.js.\n    socket.setWebsocketTimeout = function (timeout) {\n      if ((socket.protocol === 'websocket' ||\n           socket.protocol === 'websocket-raw')\n          && socket._session.recv) {\n        socket._session.recv.connection.setTimeout(timeout);\n      }\n    };\n    socket.setWebsocketTimeout(45 * 1000);\n\n    socket.send = function (data) {\n      socket.write(data);\n    };\n    socket.on('close', function () {\n      self.open_sockets = _.without(self.open_sockets, socket);\n    });\n    self.open_sockets.push(socket);\n\n    // XXX COMPAT WITH 0.6.6. Send the old style welcome message, which\n    // will force old clients to reload. Remove this once we're not\n    // concerned about people upgrading from a pre-0.7.0 release. Also,\n    // remove the clause in the client that ignores the welcome message\n    // (livedata_connection.js)\n    socket.send(JSON.stringify({server_id: \"0\"}));\n\n    // call all our callbacks when we get a new socket. they will do the\n    // work of setting up handlers and such for specific messages.\n    _.each(self.registration_callbacks, function (callback) {\n      callback(socket);\n    });\n  });\n\n};\n\n_.extend(StreamServer.prototype, {\n  // call my callback when a new socket connects.\n  // also call it for all current connections.\n  register: function (callback) {\n    var self = this;\n    self.registration_callbacks.push(callback);\n    _.each(self.all_sockets(), function (socket) {\n      callback(socket);\n    });\n  },\n\n  // get a list of all sockets\n  all_sockets: function () {\n    var self = this;\n    return _.values(self.open_sockets);\n  },\n\n  // Redirect /websocket to /sockjs/websocket in order to not expose\n  // sockjs to clients that want to use raw websockets\n  _redirectWebsocketEndpoint: function() {\n    var self = this;\n    // Unfortunately we can't use a connect middleware here since\n    // sockjs installs itself prior to all existing listeners\n    // (meaning prior to any connect middlewares) so we need to take\n    // an approach similar to overshadowListeners in\n    // https://github.com/sockjs/sockjs-node/blob/cf820c55af6a9953e16558555a31decea554f70e/src/utils.coffee\n    _.each(['request', 'upgrade'], function(event) {\n      var httpServer = WebApp.httpServer;\n      var oldHttpServerListeners = httpServer.listeners(event).slice(0);\n      httpServer.removeAllListeners(event);\n\n      // request and upgrade have different arguments passed but\n      // we only care about the first one which is always request\n      var newListener = function(request /*, moreArguments */) {\n        // Store arguments for use within the closure below\n        var args = arguments;\n\n        // Rewrite /websocket and /websocket/ urls to /sockjs/websocket while\n        // preserving query string.\n        var parsedUrl = url.parse(request.url);\n        if (parsedUrl.pathname === pathPrefix + '/websocket' ||\n            parsedUrl.pathname === pathPrefix + '/websocket/') {\n          parsedUrl.pathname = self.prefix + '/websocket';\n          request.url = url.format(parsedUrl);\n        }\n        _.each(oldHttpServerListeners, function(oldListener) {\n          oldListener.apply(httpServer, args);\n        });\n      };\n      httpServer.addListener(event, newListener);\n    });\n  }\n});\n","DDPServer = {};\n\nvar Fiber = Npm.require('fibers');\n\n// This file contains classes:\n// * Session - The server's connection to a single DDP client\n// * Subscription - A single subscription for a single client\n// * Server - An entire server that may talk to > 1 client. A DDP endpoint.\n//\n// Session and Subscription are file scope. For now, until we freeze\n// the interface, Server is package scope (in the future it should be\n// exported.)\n\n// Represents a single document in a SessionCollectionView\nvar SessionDocumentView = function () {\n  var self = this;\n  self.existsIn = {}; // set of subscriptionHandle\n  self.dataByKey = {}; // key-> [ {subscriptionHandle, value} by precedence]\n};\n\nDDPServer._SessionDocumentView = SessionDocumentView;\n\n\n_.extend(SessionDocumentView.prototype, {\n\n  getFields: function () {\n    var self = this;\n    var ret = {};\n    _.each(self.dataByKey, function (precedenceList, key) {\n      ret[key] = precedenceList[0].value;\n    });\n    return ret;\n  },\n\n  clearField: function (subscriptionHandle, key, changeCollector) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n    var precedenceList = self.dataByKey[key];\n\n    // It's okay to clear fields that didn't exist. No need to throw\n    // an error.\n    if (!precedenceList)\n      return;\n\n    var removedValue = undefined;\n    for (var i = 0; i < precedenceList.length; i++) {\n      var precedence = precedenceList[i];\n      if (precedence.subscriptionHandle === subscriptionHandle) {\n        // The view's value can only change if this subscription is the one that\n        // used to have precedence.\n        if (i === 0)\n          removedValue = precedence.value;\n        precedenceList.splice(i, 1);\n        break;\n      }\n    }\n    if (_.isEmpty(precedenceList)) {\n      delete self.dataByKey[key];\n      changeCollector[key] = undefined;\n    } else if (removedValue !== undefined &&\n               !EJSON.equals(removedValue, precedenceList[0].value)) {\n      changeCollector[key] = precedenceList[0].value;\n    }\n  },\n\n  changeField: function (subscriptionHandle, key, value,\n                         changeCollector, isAdd) {\n    var self = this;\n    // Publish API ignores _id if present in fields\n    if (key === \"_id\")\n      return;\n\n    // Don't share state with the data passed in by the user.\n    value = EJSON.clone(value);\n\n    if (!_.has(self.dataByKey, key)) {\n      self.dataByKey[key] = [{subscriptionHandle: subscriptionHandle,\n                              value: value}];\n      changeCollector[key] = value;\n      return;\n    }\n    var precedenceList = self.dataByKey[key];\n    var elt;\n    if (!isAdd) {\n      elt = _.find(precedenceList, function (precedence) {\n        return precedence.subscriptionHandle === subscriptionHandle;\n      });\n    }\n\n    if (elt) {\n      if (elt === precedenceList[0] && !EJSON.equals(value, elt.value)) {\n        // this subscription is changing the value of this field.\n        changeCollector[key] = value;\n      }\n      elt.value = value;\n    } else {\n      // this subscription is newly caring about this field\n      precedenceList.push({subscriptionHandle: subscriptionHandle, value: value});\n    }\n\n  }\n});\n\n/**\n * Represents a client's view of a single collection\n * @param {String} collectionName Name of the collection it represents\n * @param {Object.<String, Function>} sessionCallbacks The callbacks for added, changed, removed\n * @class SessionCollectionView\n */\nvar SessionCollectionView = function (collectionName, sessionCallbacks) {\n  var self = this;\n  self.collectionName = collectionName;\n  self.documents = {};\n  self.callbacks = sessionCallbacks;\n};\n\nDDPServer._SessionCollectionView = SessionCollectionView;\n\n\n_.extend(SessionCollectionView.prototype, {\n\n  isEmpty: function () {\n    var self = this;\n    return _.isEmpty(self.documents);\n  },\n\n  diff: function (previous) {\n    var self = this;\n    DiffSequence.diffObjects(previous.documents, self.documents, {\n      both: _.bind(self.diffDocument, self),\n\n      rightOnly: function (id, nowDV) {\n        self.callbacks.added(self.collectionName, id, nowDV.getFields());\n      },\n\n      leftOnly: function (id, prevDV) {\n        self.callbacks.removed(self.collectionName, id);\n      }\n    });\n  },\n\n  diffDocument: function (id, prevDV, nowDV) {\n    var self = this;\n    var fields = {};\n    DiffSequence.diffObjects(prevDV.getFields(), nowDV.getFields(), {\n      both: function (key, prev, now) {\n        if (!EJSON.equals(prev, now))\n          fields[key] = now;\n      },\n      rightOnly: function (key, now) {\n        fields[key] = now;\n      },\n      leftOnly: function(key, prev) {\n        fields[key] = undefined;\n      }\n    });\n    self.callbacks.changed(self.collectionName, id, fields);\n  },\n\n  added: function (subscriptionHandle, id, fields) {\n    var self = this;\n    var docView = self.documents[id];\n    var added = false;\n    if (!docView) {\n      added = true;\n      docView = new SessionDocumentView();\n      self.documents[id] = docView;\n    }\n    docView.existsIn[subscriptionHandle] = true;\n    var changeCollector = {};\n    _.each(fields, function (value, key) {\n      docView.changeField(\n        subscriptionHandle, key, value, changeCollector, true);\n    });\n    if (added)\n      self.callbacks.added(self.collectionName, id, changeCollector);\n    else\n      self.callbacks.changed(self.collectionName, id, changeCollector);\n  },\n\n  changed: function (subscriptionHandle, id, changed) {\n    var self = this;\n    var changedResult = {};\n    var docView = self.documents[id];\n    if (!docView)\n      throw new Error(\"Could not find element with id \" + id + \" to change\");\n    _.each(changed, function (value, key) {\n      if (value === undefined)\n        docView.clearField(subscriptionHandle, key, changedResult);\n      else\n        docView.changeField(subscriptionHandle, key, value, changedResult);\n    });\n    self.callbacks.changed(self.collectionName, id, changedResult);\n  },\n\n  removed: function (subscriptionHandle, id) {\n    var self = this;\n    var docView = self.documents[id];\n    if (!docView) {\n      var err = new Error(\"Removed nonexistent document \" + id);\n      throw err;\n    }\n    delete docView.existsIn[subscriptionHandle];\n    if (_.isEmpty(docView.existsIn)) {\n      // it is gone from everyone\n      self.callbacks.removed(self.collectionName, id);\n      delete self.documents[id];\n    } else {\n      var changed = {};\n      // remove this subscription from every precedence list\n      // and record the changes\n      _.each(docView.dataByKey, function (precedenceList, key) {\n        docView.clearField(subscriptionHandle, key, changed);\n      });\n\n      self.callbacks.changed(self.collectionName, id, changed);\n    }\n  }\n});\n\n/******************************************************************************/\n/* Session                                                                    */\n/******************************************************************************/\n\nvar Session = function (server, version, socket, options) {\n  var self = this;\n  self.id = Random.id();\n\n  self.server = server;\n  self.version = version;\n\n  self.initialized = false;\n  self.socket = socket;\n\n  // set to null when the session is destroyed. multiple places below\n  // use this to determine if the session is alive or not.\n  self.inQueue = new Meteor._DoubleEndedQueue();\n\n  self.blocked = false;\n  self.workerRunning = false;\n\n  // Sub objects for active subscriptions\n  self._namedSubs = {};\n  self._universalSubs = [];\n\n  self.userId = null;\n\n  self.collectionViews = {};\n\n  // Set this to false to not send messages when collectionViews are\n  // modified. This is done when rerunning subs in _setUserId and those messages\n  // are calculated via a diff instead.\n  self._isSending = true;\n\n  // If this is true, don't start a newly-created universal publisher on this\n  // session. The session will take care of starting it when appropriate.\n  self._dontStartNewUniversalSubs = false;\n\n  // when we are rerunning subscriptions, any ready messages\n  // we want to buffer up for when we are done rerunning subscriptions\n  self._pendingReady = [];\n\n  // List of callbacks to call when this connection is closed.\n  self._closeCallbacks = [];\n\n\n  // XXX HACK: If a sockjs connection, save off the URL. This is\n  // temporary and will go away in the near future.\n  self._socketUrl = socket.url;\n\n  // Allow tests to disable responding to pings.\n  self._respondToPings = options.respondToPings;\n\n  // This object is the public interface to the session. In the public\n  // API, it is called the `connection` object.  Internally we call it\n  // a `connectionHandle` to avoid ambiguity.\n  self.connectionHandle = {\n    id: self.id,\n    close: function () {\n      self.close();\n    },\n    onClose: function (fn) {\n      var cb = Meteor.bindEnvironment(fn, \"connection onClose callback\");\n      if (self.inQueue) {\n        self._closeCallbacks.push(cb);\n      } else {\n        // if we're already closed, call the callback.\n        Meteor.defer(cb);\n      }\n    },\n    clientAddress: self._clientAddress(),\n    httpHeaders: self.socket.headers\n  };\n\n  self.send({ msg: 'connected', session: self.id });\n\n  // On initial connect, spin up all the universal publishers.\n  Fiber(function () {\n    self.startUniversalSubs();\n  }).run();\n\n  if (version !== 'pre1' && options.heartbeatInterval !== 0) {\n    // We no longer need the low level timeout because we have heartbeating.\n    socket.setWebsocketTimeout(0);\n\n    self.heartbeat = new DDPCommon.Heartbeat({\n      heartbeatInterval: options.heartbeatInterval,\n      heartbeatTimeout: options.heartbeatTimeout,\n      onTimeout: function () {\n        self.close();\n      },\n      sendPing: function () {\n        self.send({msg: 'ping'});\n      }\n    });\n    self.heartbeat.start();\n  }\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"livedata\", \"sessions\", 1);\n};\n\n_.extend(Session.prototype, {\n\n  sendReady: function (subscriptionIds) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"ready\", subs: subscriptionIds});\n    else {\n      _.each(subscriptionIds, function (subscriptionId) {\n        self._pendingReady.push(subscriptionId);\n      });\n    }\n  },\n\n  sendAdded: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"added\", collection: collectionName, id: id, fields: fields});\n  },\n\n  sendChanged: function (collectionName, id, fields) {\n    var self = this;\n    if (_.isEmpty(fields))\n      return;\n\n    if (self._isSending) {\n      self.send({\n        msg: \"changed\",\n        collection: collectionName,\n        id: id,\n        fields: fields\n      });\n    }\n  },\n\n  sendRemoved: function (collectionName, id) {\n    var self = this;\n    if (self._isSending)\n      self.send({msg: \"removed\", collection: collectionName, id: id});\n  },\n\n  getSendCallbacks: function () {\n    var self = this;\n    return {\n      added: _.bind(self.sendAdded, self),\n      changed: _.bind(self.sendChanged, self),\n      removed: _.bind(self.sendRemoved, self)\n    };\n  },\n\n  getCollectionView: function (collectionName) {\n    var self = this;\n    if (_.has(self.collectionViews, collectionName)) {\n      return self.collectionViews[collectionName];\n    }\n    var ret = new SessionCollectionView(collectionName,\n                                        self.getSendCallbacks());\n    self.collectionViews[collectionName] = ret;\n    return ret;\n  },\n\n  added: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.added(subscriptionHandle, id, fields);\n  },\n\n  removed: function (subscriptionHandle, collectionName, id) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.removed(subscriptionHandle, id);\n    if (view.isEmpty()) {\n      delete self.collectionViews[collectionName];\n    }\n  },\n\n  changed: function (subscriptionHandle, collectionName, id, fields) {\n    var self = this;\n    var view = self.getCollectionView(collectionName);\n    view.changed(subscriptionHandle, id, fields);\n  },\n\n  startUniversalSubs: function () {\n    var self = this;\n    // Make a shallow copy of the set of universal handlers and start them. If\n    // additional universal publishers start while we're running them (due to\n    // yielding), they will run separately as part of Server.publish.\n    var handlers = _.clone(self.server.universal_publish_handlers);\n    _.each(handlers, function (handler) {\n      self._startSubscription(handler);\n    });\n  },\n\n  // Destroy this session and unregister it at the server.\n  close: function () {\n    var self = this;\n\n    // Destroy this session, even if it's not registered at the\n    // server. Stop all processing and tear everything down. If a socket\n    // was attached, close it.\n\n    // Already destroyed.\n    if (! self.inQueue)\n      return;\n\n    // Drop the merge box data immediately.\n    self.inQueue = null;\n    self.collectionViews = {};\n\n    if (self.heartbeat) {\n      self.heartbeat.stop();\n      self.heartbeat = null;\n    }\n\n    if (self.socket) {\n      self.socket.close();\n      self.socket._meteorSession = null;\n    }\n\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"livedata\", \"sessions\", -1);\n\n    Meteor.defer(function () {\n      // stop callbacks can yield, so we defer this on close.\n      // sub._isDeactivated() detects that we set inQueue to null and\n      // treats it as semi-deactivated (it will ignore incoming callbacks, etc).\n      self._deactivateAllSubscriptions();\n\n      // Defer calling the close callbacks, so that the caller closing\n      // the session isn't waiting for all the callbacks to complete.\n      _.each(self._closeCallbacks, function (callback) {\n        callback();\n      });\n    });\n\n    // Unregister the session.\n    self.server._removeSession(self);\n  },\n\n  // Send a message (doing nothing if no socket is connected right now.)\n  // It should be a JSON object (it will be stringified.)\n  send: function (msg) {\n    var self = this;\n    if (self.socket) {\n      if (Meteor._printSentDDP)\n        Meteor._debug(\"Sent DDP\", DDPCommon.stringifyDDP(msg));\n      self.socket.send(DDPCommon.stringifyDDP(msg));\n    }\n  },\n\n  // Send a connection error.\n  sendError: function (reason, offendingMessage) {\n    var self = this;\n    var msg = {msg: 'error', reason: reason};\n    if (offendingMessage)\n      msg.offendingMessage = offendingMessage;\n    self.send(msg);\n  },\n\n  // Process 'msg' as an incoming message. (But as a guard against\n  // race conditions during reconnection, ignore the message if\n  // 'socket' is not the currently connected socket.)\n  //\n  // We run the messages from the client one at a time, in the order\n  // given by the client. The message handler is passed an idempotent\n  // function 'unblock' which it may call to allow other messages to\n  // begin running in parallel in another fiber (for example, a method\n  // that wants to yield.) Otherwise, it is automatically unblocked\n  // when it returns.\n  //\n  // Actually, we don't have to 'totally order' the messages in this\n  // way, but it's the easiest thing that's correct. (unsub needs to\n  // be ordered against sub, methods need to be ordered against each\n  // other.)\n  processMessage: function (msg_in) {\n    var self = this;\n    if (!self.inQueue) // we have been destroyed.\n      return;\n\n    // Respond to ping and pong messages immediately without queuing.\n    // If the negotiated DDP version is \"pre1\" which didn't support\n    // pings, preserve the \"pre1\" behavior of responding with a \"bad\n    // request\" for the unknown messages.\n    //\n    // Fibers are needed because heartbeat uses Meteor.setTimeout, which\n    // needs a Fiber. We could actually use regular setTimeout and avoid\n    // these new fibers, but it is easier to just make everything use\n    // Meteor.setTimeout and not think too hard.\n    //\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the client is still alive.\n    if (self.heartbeat) {\n      Fiber(function () {\n        self.heartbeat.messageReceived();\n      }).run();\n    }\n\n    if (self.version !== 'pre1' && msg_in.msg === 'ping') {\n      if (self._respondToPings)\n        self.send({msg: \"pong\", id: msg_in.id});\n      return;\n    }\n    if (self.version !== 'pre1' && msg_in.msg === 'pong') {\n      // Since everything is a pong, nothing to do\n      return;\n    }\n\n    self.inQueue.push(msg_in);\n    if (self.workerRunning)\n      return;\n    self.workerRunning = true;\n\n    var processNext = function () {\n      var msg = self.inQueue && self.inQueue.shift();\n      if (!msg) {\n        self.workerRunning = false;\n        return;\n      }\n\n      Fiber(function () {\n        var blocked = true;\n\n        var unblock = function () {\n          if (!blocked)\n            return; // idempotent\n          blocked = false;\n          processNext();\n        };\n\n        self.server.onMessageHook.each(function (callback) {\n          callback(msg, self);\n          return true;\n        });\n\n        if (_.has(self.protocol_handlers, msg.msg))\n          self.protocol_handlers[msg.msg].call(self, msg, unblock);\n        else\n          self.sendError('Bad request', msg);\n        unblock(); // in case the handler didn't already do it\n      }).run();\n    };\n\n    processNext();\n  },\n\n  protocol_handlers: {\n    sub: function (msg) {\n      var self = this;\n\n      // reject malformed messages\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.name) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array))) {\n        self.sendError(\"Malformed subscription\", msg);\n        return;\n      }\n\n      if (!self.server.publish_handlers[msg.name]) {\n        self.send({\n          msg: 'nosub', id: msg.id,\n          error: new Meteor.Error(404, `Subscription '${msg.name}' not found`)});\n        return;\n      }\n\n      if (_.has(self._namedSubs, msg.id))\n        // subs are idempotent, or rather, they are ignored if a sub\n        // with that id already exists. this is important during\n        // reconnect.\n        return;\n\n      // XXX It'd be much better if we had generic hooks where any package can\n      // hook into subscription handling, but in the mean while we special case\n      // ddp-rate-limiter package. This is also done for weak requirements to\n      // add the ddp-rate-limiter package in case we don't have Accounts. A\n      // user trying to use the ddp-rate-limiter must explicitly require it.\n      if (Package['ddp-rate-limiter']) {\n        var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n        var rateLimiterInput = {\n          userId: self.userId,\n          clientAddress: self.connectionHandle.clientAddress,\n          type: \"subscription\",\n          name: msg.name,\n          connectionId: self.id\n        };\n\n        DDPRateLimiter._increment(rateLimiterInput);\n        var rateLimitResult = DDPRateLimiter._check(rateLimiterInput);\n        if (!rateLimitResult.allowed) {\n          self.send({\n            msg: 'nosub', id: msg.id,\n            error: new Meteor.Error(\n              'too-many-requests',\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset})\n          });\n          return;\n        }\n      }\n\n      var handler = self.server.publish_handlers[msg.name];\n\n      self._startSubscription(handler, msg.id, msg.params, msg.name);\n\n    },\n\n    unsub: function (msg) {\n      var self = this;\n\n      self._stopSubscription(msg.id);\n    },\n\n    method: function (msg, unblock) {\n      var self = this;\n\n      // reject malformed messages\n      // For now, we silently ignore unknown attributes,\n      // for forwards compatibility.\n      if (typeof (msg.id) !== \"string\" ||\n          typeof (msg.method) !== \"string\" ||\n          (('params' in msg) && !(msg.params instanceof Array)) ||\n          (('randomSeed' in msg) && (typeof msg.randomSeed !== \"string\"))) {\n        self.sendError(\"Malformed method invocation\", msg);\n        return;\n      }\n\n      var randomSeed = msg.randomSeed || null;\n\n      // set up to mark the method as satisfied once all observers\n      // (and subscriptions) have reacted to any writes that were\n      // done.\n      var fence = new DDPServer._WriteFence;\n      fence.onAllCommitted(function () {\n        // Retire the fence so that future writes are allowed.\n        // This means that callbacks like timers are free to use\n        // the fence, and if they fire before it's armed (for\n        // example, because the method waits for them) their\n        // writes will be included in the fence.\n        fence.retire();\n        self.send({\n          msg: 'updated', methods: [msg.id]});\n      });\n\n      // find the handler\n      var handler = self.server.method_handlers[msg.method];\n      if (!handler) {\n        self.send({\n          msg: 'result', id: msg.id,\n          error: new Meteor.Error(404, `Method '${msg.method}' not found`)});\n        fence.arm();\n        return;\n      }\n\n      var setUserId = function(userId) {\n        self._setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: false,\n        userId: self.userId,\n        setUserId: setUserId,\n        unblock: unblock,\n        connection: self.connectionHandle,\n        randomSeed: randomSeed\n      });\n\n      const promise = new Promise((resolve, reject) => {\n        // XXX It'd be better if we could hook into method handlers better but\n        // for now, we need to check if the ddp-rate-limiter exists since we\n        // have a weak requirement for the ddp-rate-limiter package to be added\n        // to our application.\n        if (Package['ddp-rate-limiter']) {\n          var DDPRateLimiter = Package['ddp-rate-limiter'].DDPRateLimiter;\n          var rateLimiterInput = {\n            userId: self.userId,\n            clientAddress: self.connectionHandle.clientAddress,\n            type: \"method\",\n            name: msg.method,\n            connectionId: self.id\n          };\n          DDPRateLimiter._increment(rateLimiterInput);\n          var rateLimitResult = DDPRateLimiter._check(rateLimiterInput)\n          if (!rateLimitResult.allowed) {\n            reject(new Meteor.Error(\n              \"too-many-requests\",\n              DDPRateLimiter.getErrorMessage(rateLimitResult),\n              {timeToReset: rateLimitResult.timeToReset}\n            ));\n            return;\n          }\n        }\n\n        resolve(DDPServer._CurrentWriteFence.withValue(\n          fence,\n          () => DDP._CurrentMethodInvocation.withValue(\n            invocation,\n            () => maybeAuditArgumentChecks(\n              handler, invocation, msg.params,\n              \"call to '\" + msg.method + \"'\"\n            )\n          )\n        ));\n      });\n\n      function finish() {\n        fence.arm();\n        unblock();\n      }\n\n      const payload = {\n        msg: \"result\",\n        id: msg.id\n      };\n\n      promise.then((result) => {\n        finish();\n        if (result !== undefined) {\n          payload.result = result;\n        }\n        self.send(payload);\n      }, (exception) => {\n        finish();\n        payload.error = wrapInternalException(\n          exception,\n          `while invoking method '${msg.method}'`\n        );\n        self.send(payload);\n      });\n    }\n  },\n\n  _eachSub: function (f) {\n    var self = this;\n    _.each(self._namedSubs, f);\n    _.each(self._universalSubs, f);\n  },\n\n  _diffCollectionViews: function (beforeCVs) {\n    var self = this;\n    DiffSequence.diffObjects(beforeCVs, self.collectionViews, {\n      both: function (collectionName, leftValue, rightValue) {\n        rightValue.diff(leftValue);\n      },\n      rightOnly: function (collectionName, rightValue) {\n        _.each(rightValue.documents, function (docView, id) {\n          self.sendAdded(collectionName, id, docView.getFields());\n        });\n      },\n      leftOnly: function (collectionName, leftValue) {\n        _.each(leftValue.documents, function (doc, id) {\n          self.sendRemoved(collectionName, id);\n        });\n      }\n    });\n  },\n\n  // Sets the current user id in all appropriate contexts and reruns\n  // all subscriptions\n  _setUserId: function(userId) {\n    var self = this;\n\n    if (userId !== null && typeof userId !== \"string\")\n      throw new Error(\"setUserId must be called on string or null, not \" +\n                      typeof userId);\n\n    // Prevent newly-created universal subscriptions from being added to our\n    // session; they will be found below when we call startUniversalSubs.\n    //\n    // (We don't have to worry about named subscriptions, because we only add\n    // them when we process a 'sub' message. We are currently processing a\n    // 'method' message, and the method did not unblock, because it is illegal\n    // to call setUserId after unblock. Thus we cannot be concurrently adding a\n    // new named subscription.)\n    self._dontStartNewUniversalSubs = true;\n\n    // Prevent current subs from updating our collectionViews and call their\n    // stop callbacks. This may yield.\n    self._eachSub(function (sub) {\n      sub._deactivate();\n    });\n\n    // All subs should now be deactivated. Stop sending messages to the client,\n    // save the state of the published collections, reset to an empty view, and\n    // update the userId.\n    self._isSending = false;\n    var beforeCVs = self.collectionViews;\n    self.collectionViews = {};\n    self.userId = userId;\n\n    // _setUserId is normally called from a Meteor method with\n    // DDP._CurrentMethodInvocation set. But DDP._CurrentMethodInvocation is not\n    // expected to be set inside a publish function, so we temporary unset it.\n    // Inside a publish function DDP._CurrentPublicationInvocation is set.\n    DDP._CurrentMethodInvocation.withValue(undefined, function () {\n      // Save the old named subs, and reset to having no subscriptions.\n      var oldNamedSubs = self._namedSubs;\n      self._namedSubs = {};\n      self._universalSubs = [];\n\n      _.each(oldNamedSubs, function (sub, subscriptionId) {\n        self._namedSubs[subscriptionId] = sub._recreate();\n        // nb: if the handler throws or calls this.error(), it will in fact\n        // immediately send its 'nosub'. This is OK, though.\n        self._namedSubs[subscriptionId]._runHandler();\n      });\n\n      // Allow newly-created universal subs to be started on our connection in\n      // parallel with the ones we're spinning up here, and spin up universal\n      // subs.\n      self._dontStartNewUniversalSubs = false;\n      self.startUniversalSubs();\n    });\n\n    // Start sending messages again, beginning with the diff from the previous\n    // state of the world to the current state. No yields are allowed during\n    // this diff, so that other changes cannot interleave.\n    Meteor._noYieldsAllowed(function () {\n      self._isSending = true;\n      self._diffCollectionViews(beforeCVs);\n      if (!_.isEmpty(self._pendingReady)) {\n        self.sendReady(self._pendingReady);\n        self._pendingReady = [];\n      }\n    });\n  },\n\n  _startSubscription: function (handler, subId, params, name) {\n    var self = this;\n\n    var sub = new Subscription(\n      self, handler, subId, params, name);\n    if (subId)\n      self._namedSubs[subId] = sub;\n    else\n      self._universalSubs.push(sub);\n\n    sub._runHandler();\n  },\n\n  // tear down specified subscription\n  _stopSubscription: function (subId, error) {\n    var self = this;\n\n    var subName = null;\n\n    if (subId && self._namedSubs[subId]) {\n      subName = self._namedSubs[subId]._name;\n      self._namedSubs[subId]._removeAllDocuments();\n      self._namedSubs[subId]._deactivate();\n      delete self._namedSubs[subId];\n    }\n\n    var response = {msg: 'nosub', id: subId};\n\n    if (error) {\n      response.error = wrapInternalException(\n        error,\n        subName ? (\"from sub \" + subName + \" id \" + subId)\n          : (\"from sub id \" + subId));\n    }\n\n    self.send(response);\n  },\n\n  // tear down all subscriptions. Note that this does NOT send removed or nosub\n  // messages, since we assume the client is gone.\n  _deactivateAllSubscriptions: function () {\n    var self = this;\n\n    _.each(self._namedSubs, function (sub, id) {\n      sub._deactivate();\n    });\n    self._namedSubs = {};\n\n    _.each(self._universalSubs, function (sub) {\n      sub._deactivate();\n    });\n    self._universalSubs = [];\n  },\n\n  // Determine the remote client's IP address, based on the\n  // HTTP_FORWARDED_COUNT environment variable representing how many\n  // proxies the server is behind.\n  _clientAddress: function () {\n    var self = this;\n\n    // For the reported client address for a connection to be correct,\n    // the developer must set the HTTP_FORWARDED_COUNT environment\n    // variable to an integer representing the number of hops they\n    // expect in the `x-forwarded-for` header. E.g., set to \"1\" if the\n    // server is behind one proxy.\n    //\n    // This could be computed once at startup instead of every time.\n    var httpForwardedCount = parseInt(process.env['HTTP_FORWARDED_COUNT']) || 0;\n\n    if (httpForwardedCount === 0)\n      return self.socket.remoteAddress;\n\n    var forwardedFor = self.socket.headers[\"x-forwarded-for\"];\n    if (! _.isString(forwardedFor))\n      return null;\n    forwardedFor = forwardedFor.trim().split(/\\s*,\\s*/);\n\n    // Typically the first value in the `x-forwarded-for` header is\n    // the original IP address of the client connecting to the first\n    // proxy.  However, the end user can easily spoof the header, in\n    // which case the first value(s) will be the fake IP address from\n    // the user pretending to be a proxy reporting the original IP\n    // address value.  By counting HTTP_FORWARDED_COUNT back from the\n    // end of the list, we ensure that we get the IP address being\n    // reported by *our* first proxy.\n\n    if (httpForwardedCount < 0 || httpForwardedCount > forwardedFor.length)\n      return null;\n\n    return forwardedFor[forwardedFor.length - httpForwardedCount];\n  }\n});\n\n/******************************************************************************/\n/* Subscription                                                               */\n/******************************************************************************/\n\n// ctor for a sub handle: the input to each publish function\n\n// Instance name is this because it's usually referred to as this inside a\n// publish\n/**\n * @summary The server's side of a subscription\n * @class Subscription\n * @instanceName this\n * @showInstanceName true\n */\nvar Subscription = function (\n    session, handler, subscriptionId, params, name) {\n  var self = this;\n  self._session = session; // type is Session\n\n  /**\n   * @summary Access inside the publish function. The incoming [connection](#meteor_onconnection) for this subscription.\n   * @locus Server\n   * @name  connection\n   * @memberOf Subscription\n   * @instance\n   */\n  self.connection = session.connectionHandle; // public API object\n\n  self._handler = handler;\n\n  // my subscription ID (generated by client, undefined for universal subs).\n  self._subscriptionId = subscriptionId;\n  // undefined for universal subs\n  self._name = name;\n\n  self._params = params || [];\n\n  // Only named subscriptions have IDs, but we need some sort of string\n  // internally to keep track of all subscriptions inside\n  // SessionDocumentViews. We use this subscriptionHandle for that.\n  if (self._subscriptionId) {\n    self._subscriptionHandle = 'N' + self._subscriptionId;\n  } else {\n    self._subscriptionHandle = 'U' + Random.id();\n  }\n\n  // has _deactivate been called?\n  self._deactivated = false;\n\n  // stop callbacks to g/c this sub.  called w/ zero arguments.\n  self._stopCallbacks = [];\n\n  // the set of (collection, documentid) that this subscription has\n  // an opinion about\n  self._documents = {};\n\n  // remember if we are ready.\n  self._ready = false;\n\n  // Part of the public API: the user of this sub.\n\n  /**\n   * @summary Access inside the publish function. The id of the logged-in user, or `null` if no user is logged in.\n   * @locus Server\n   * @memberOf Subscription\n   * @name  userId\n   * @instance\n   */\n  self.userId = session.userId;\n\n  // For now, the id filter is going to default to\n  // the to/from DDP methods on MongoID, to\n  // specifically deal with mongo/minimongo ObjectIds.\n\n  // Later, you will be able to make this be \"raw\"\n  // if you want to publish a collection that you know\n  // just has strings for keys and no funny business, to\n  // a ddp consumer that isn't minimongo\n\n  self._idFilter = {\n    idStringify: MongoID.idStringify,\n    idParse: MongoID.idParse\n  };\n\n  Package.facts && Package.facts.Facts.incrementServerFact(\n    \"livedata\", \"subscriptions\", 1);\n};\n\n_.extend(Subscription.prototype, {\n  _runHandler: function () {\n    // XXX should we unblock() here? Either before running the publish\n    // function, or before running _publishCursor.\n    //\n    // Right now, each publish function blocks all future publishes and\n    // methods waiting on data from Mongo (or whatever else the function\n    // blocks on). This probably slows page load in common cases.\n\n    var self = this;\n    try {\n      var res = DDP._CurrentPublicationInvocation.withValue(\n        self,\n        () => maybeAuditArgumentChecks(\n          self._handler, self, EJSON.clone(self._params),\n          // It's OK that this would look weird for universal subscriptions,\n          // because they have no arguments so there can never be an\n          // audit-argument-checks failure.\n          \"publisher '\" + self._name + \"'\"\n        )\n      );\n    } catch (e) {\n      self.error(e);\n      return;\n    }\n\n    // Did the handler call this.error or this.stop?\n    if (self._isDeactivated())\n      return;\n\n    self._publishHandlerResult(res);\n  },\n\n  _publishHandlerResult: function (res) {\n    // SPECIAL CASE: Instead of writing their own callbacks that invoke\n    // this.added/changed/ready/etc, the user can just return a collection\n    // cursor or array of cursors from the publish function; we call their\n    // _publishCursor method which starts observing the cursor and publishes the\n    // results. Note that _publishCursor does NOT call ready().\n    //\n    // XXX This uses an undocumented interface which only the Mongo cursor\n    // interface publishes. Should we make this interface public and encourage\n    // users to implement it themselves? Arguably, it's unnecessary; users can\n    // already write their own functions like\n    //   var publishMyReactiveThingy = function (name, handler) {\n    //     Meteor.publish(name, function () {\n    //       var reactiveThingy = handler();\n    //       reactiveThingy.publishMe();\n    //     });\n    //   };\n\n    var self = this;\n    var isCursor = function (c) {\n      return c && c._publishCursor;\n    };\n    if (isCursor(res)) {\n      try {\n        res._publishCursor(self);\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      // _publishCursor only returns after the initial added callbacks have run.\n      // mark subscription as ready.\n      self.ready();\n    } else if (_.isArray(res)) {\n      // check all the elements are cursors\n      if (! _.all(res, isCursor)) {\n        self.error(new Error(\"Publish function returned an array of non-Cursors\"));\n        return;\n      }\n      // find duplicate collection names\n      // XXX we should support overlapping cursors, but that would require the\n      // merge box to allow overlap within a subscription\n      var collectionNames = {};\n      for (var i = 0; i < res.length; ++i) {\n        var collectionName = res[i]._getCollectionName();\n        if (_.has(collectionNames, collectionName)) {\n          self.error(new Error(\n            \"Publish function returned multiple cursors for collection \" +\n              collectionName));\n          return;\n        }\n        collectionNames[collectionName] = true;\n      };\n\n      try {\n        _.each(res, function (cur) {\n          cur._publishCursor(self);\n        });\n      } catch (e) {\n        self.error(e);\n        return;\n      }\n      self.ready();\n    } else if (res) {\n      // truthy values other than cursors or arrays are probably a\n      // user mistake (possible returning a Mongo document via, say,\n      // `coll.findOne()`).\n      self.error(new Error(\"Publish function can only return a Cursor or \"\n                           + \"an array of Cursors\"));\n    }\n  },\n\n  // This calls all stop callbacks and prevents the handler from updating any\n  // SessionCollectionViews further. It's used when the user unsubscribes or\n  // disconnects, as well as during setUserId re-runs. It does *NOT* send\n  // removed messages for the published objects; if that is necessary, call\n  // _removeAllDocuments first.\n  _deactivate: function() {\n    var self = this;\n    if (self._deactivated)\n      return;\n    self._deactivated = true;\n    self._callStopCallbacks();\n    Package.facts && Package.facts.Facts.incrementServerFact(\n      \"livedata\", \"subscriptions\", -1);\n  },\n\n  _callStopCallbacks: function () {\n    var self = this;\n    // tell listeners, so they can clean up\n    var callbacks = self._stopCallbacks;\n    self._stopCallbacks = [];\n    _.each(callbacks, function (callback) {\n      callback();\n    });\n  },\n\n  // Send remove messages for every document.\n  _removeAllDocuments: function () {\n    var self = this;\n    Meteor._noYieldsAllowed(function () {\n      _.each(self._documents, function(collectionDocs, collectionName) {\n        // Iterate over _.keys instead of the dictionary itself, since we'll be\n        // mutating it.\n        _.each(_.keys(collectionDocs), function (strId) {\n          self.removed(collectionName, self._idFilter.idParse(strId));\n        });\n      });\n    });\n  },\n\n  // Returns a new Subscription for the same session with the same\n  // initial creation parameters. This isn't a clone: it doesn't have\n  // the same _documents cache, stopped state or callbacks; may have a\n  // different _subscriptionHandle, and gets its userId from the\n  // session, not from this object.\n  _recreate: function () {\n    var self = this;\n    return new Subscription(\n      self._session, self._handler, self._subscriptionId, self._params,\n      self._name);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription, triggering a call on the client to the `onStop` callback passed to [`Meteor.subscribe`](#meteor_subscribe), if any. If `error` is not a [`Meteor.Error`](#meteor_error), it will be [sanitized](#meteor_error).\n   * @locus Server\n   * @param {Error} error The error to pass to the client.\n   * @instance\n   * @memberOf Subscription\n   */\n  error: function (error) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId, error);\n  },\n\n  // Note that while our DDP client will notice that you've called stop() on the\n  // server (and clean up its _subscriptions table) we don't actually provide a\n  // mechanism for an app to notice this (the subscribe onError callback only\n  // triggers if there is an error).\n\n  /**\n   * @summary Call inside the publish function.  Stops this client's subscription and invokes the client's `onStop` callback with no error.\n   * @locus Server\n   * @instance\n   * @memberOf Subscription\n   */\n  stop: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    self._session._stopSubscription(self._subscriptionId);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Registers a callback function to run when the subscription is stopped.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {Function} func The callback function\n   */\n  onStop: function (callback) {\n    var self = this;\n    callback = Meteor.bindEnvironment(callback, 'onStop callback', self);\n    if (self._isDeactivated())\n      callback();\n    else\n      self._stopCallbacks.push(callback);\n  },\n\n  // This returns true if the sub has been deactivated, *OR* if the session was\n  // destroyed but the deferred call to _deactivateAllSubscriptions hasn't\n  // happened yet.\n  _isDeactivated: function () {\n    var self = this;\n    return self._deactivated || self._session.inQueue === null;\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been added to the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the new document.\n   * @param {String} id The new document's ID.\n   * @param {Object} fields The fields in the new document.  If `_id` is present it is ignored.\n   */\n  added: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    Meteor._ensure(self._documents, collectionName)[id] = true;\n    self._session.added(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document in the record set has been modified.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that contains the changed document.\n   * @param {String} id The changed document's ID.\n   * @param {Object} fields The fields in the document that have changed, together with their new values.  If a field is not present in `fields` it was left unchanged; if it is present in `fields` and has a value of `undefined` it was removed from the document.  If `_id` is present it is ignored.\n   */\n  changed: function (collectionName, id, fields) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    self._session.changed(self._subscriptionHandle, collectionName, id, fields);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that a document has been removed from the record set.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   * @param {String} collection The name of the collection that the document has been removed from.\n   * @param {String} id The ID of the document that has been removed.\n   */\n  removed: function (collectionName, id) {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    id = self._idFilter.idStringify(id);\n    // We don't bother to delete sets of things in a collection if the\n    // collection is empty.  It could break _removeAllDocuments.\n    delete self._documents[collectionName][id];\n    self._session.removed(self._subscriptionHandle, collectionName, id);\n  },\n\n  /**\n   * @summary Call inside the publish function.  Informs the subscriber that an initial, complete snapshot of the record set has been sent.  This will trigger a call on the client to the `onReady` callback passed to  [`Meteor.subscribe`](#meteor_subscribe), if any.\n   * @locus Server\n   * @memberOf Subscription\n   * @instance\n   */\n  ready: function () {\n    var self = this;\n    if (self._isDeactivated())\n      return;\n    if (!self._subscriptionId)\n      return;  // unnecessary but ignored for universal sub\n    if (!self._ready) {\n      self._session.sendReady([self._subscriptionId]);\n      self._ready = true;\n    }\n  }\n});\n\n/******************************************************************************/\n/* Server                                                                     */\n/******************************************************************************/\n\nServer = function (options) {\n  var self = this;\n\n  // The default heartbeat interval is 30 seconds on the server and 35\n  // seconds on the client.  Since the client doesn't need to send a\n  // ping as long as it is receiving pings, this means that pings\n  // normally go from the server to the client.\n  //\n  // Note: Troposphere depends on the ability to mutate\n  // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n  self.options = _.defaults(options || {}, {\n    heartbeatInterval: 15000,\n    heartbeatTimeout: 15000,\n    // For testing, allow responding to pings to be disabled.\n    respondToPings: true\n  });\n\n  // Map of callbacks to call when a new connection comes in to the\n  // server and completes DDP version negotiation. Use an object instead\n  // of an array so we can safely remove one from the list while\n  // iterating over it.\n  self.onConnectionHook = new Hook({\n    debugPrintExceptions: \"onConnection callback\"\n  });\n\n  // Map of callbacks to call when a new message comes in.\n  self.onMessageHook = new Hook({\n    debugPrintExceptions: \"onMessage callback\"\n  });\n\n  self.publish_handlers = {};\n  self.universal_publish_handlers = [];\n\n  self.method_handlers = {};\n\n  self.sessions = {}; // map from id to session\n\n  self.stream_server = new StreamServer;\n\n  self.stream_server.register(function (socket) {\n    // socket implements the SockJSConnection interface\n    socket._meteorSession = null;\n\n    var sendError = function (reason, offendingMessage) {\n      var msg = {msg: 'error', reason: reason};\n      if (offendingMessage)\n        msg.offendingMessage = offendingMessage;\n      socket.send(DDPCommon.stringifyDDP(msg));\n    };\n\n    socket.on('data', function (raw_msg) {\n      if (Meteor._printReceivedDDP) {\n        Meteor._debug(\"Received DDP\", raw_msg);\n      }\n      try {\n        try {\n          var msg = DDPCommon.parseDDP(raw_msg);\n        } catch (err) {\n          sendError('Parse error');\n          return;\n        }\n        if (msg === null || !msg.msg) {\n          sendError('Bad request', msg);\n          return;\n        }\n\n        if (msg.msg === 'connect') {\n          if (socket._meteorSession) {\n            sendError(\"Already connected\", msg);\n            return;\n          }\n          Fiber(function () {\n            self._handleConnect(socket, msg);\n          }).run();\n          return;\n        }\n\n        if (!socket._meteorSession) {\n          sendError('Must connect first', msg);\n          return;\n        }\n        socket._meteorSession.processMessage(msg);\n      } catch (e) {\n        // XXX print stack nicely\n        Meteor._debug(\"Internal exception while processing message\", msg,\n                      e.message, e.stack);\n      }\n    });\n\n    socket.on('close', function () {\n      if (socket._meteorSession) {\n        Fiber(function () {\n          socket._meteorSession.close();\n        }).run();\n      }\n    });\n  });\n};\n\n_.extend(Server.prototype, {\n\n  /**\n   * @summary Register a callback to be called when a new DDP connection is made to the server.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP connection is established.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onConnection: function (fn) {\n    var self = this;\n    return self.onConnectionHook.register(fn);\n  },\n\n  /**\n   * @summary Register a callback to be called when a new DDP message is received.\n   * @locus Server\n   * @param {function} callback The function to call when a new DDP message is received.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  onMessage: function (fn) {\n    var self = this;\n    return self.onMessageHook.register(fn);\n  },\n\n  _handleConnect: function (socket, msg) {\n    var self = this;\n\n    // The connect message must specify a version and an array of supported\n    // versions, and it must claim to support what it is proposing.\n    if (!(typeof (msg.version) === 'string' &&\n          _.isArray(msg.support) &&\n          _.all(msg.support, _.isString) &&\n          _.contains(msg.support, msg.version))) {\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed',\n                                version: DDPCommon.SUPPORTED_DDP_VERSIONS[0]}));\n      socket.close();\n      return;\n    }\n\n    // In the future, handle session resumption: something like:\n    //  socket._meteorSession = self.sessions[msg.session]\n    var version = calculateVersion(msg.support, DDPCommon.SUPPORTED_DDP_VERSIONS);\n\n    if (msg.version !== version) {\n      // The best version to use (according to the client's stated preferences)\n      // is not the one the client is trying to use. Inform them about the best\n      // version to use.\n      socket.send(DDPCommon.stringifyDDP({msg: 'failed', version: version}));\n      socket.close();\n      return;\n    }\n\n    // Yay, version matches! Create a new session.\n    // Note: Troposphere depends on the ability to mutate\n    // Meteor.server.options.heartbeatTimeout! This is a hack, but it's life.\n    socket._meteorSession = new Session(self, version, socket, self.options);\n    self.sessions[socket._meteorSession.id] = socket._meteorSession;\n    self.onConnectionHook.each(function (callback) {\n      if (socket._meteorSession)\n        callback(socket._meteorSession.connectionHandle);\n      return true;\n    });\n  },\n  /**\n   * Register a publish handler function.\n   *\n   * @param name {String} identifier for query\n   * @param handler {Function} publish handler\n   * @param options {Object}\n   *\n   * Server will call handler function on each new subscription,\n   * either when receiving DDP sub message for a named subscription, or on\n   * DDP connect for a universal subscription.\n   *\n   * If name is null, this will be a subscription that is\n   * automatically established and permanently on for all connected\n   * client, instead of a subscription that can be turned on and off\n   * with subscribe().\n   *\n   * options to contain:\n   *  - (mostly internal) is_auto: true if generated automatically\n   *    from an autopublish hook. this is for cosmetic purposes only\n   *    (it lets us determine whether to print a warning suggesting\n   *    that you turn off autopublish.)\n   */\n\n  /**\n   * @summary Publish a record set.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @locus Server\n   * @param {String|Object} name If String, name of the record set.  If Object, publications Dictionary of publish functions by name.  If `null`, the set has no name, and the record set is automatically sent to all connected clients.\n   * @param {Function} func Function called on the server each time a client subscribes.  Inside the function, `this` is the publish handler object, described below.  If the client passed arguments to `subscribe`, the function is called with the same arguments.\n   */\n  publish: function (name, handler, options) {\n    var self = this;\n\n    if (! _.isObject(name)) {\n      options = options || {};\n\n      if (name && name in self.publish_handlers) {\n        Meteor._debug(\"Ignoring duplicate publish named '\" + name + \"'\");\n        return;\n      }\n\n      if (Package.autopublish && !options.is_auto) {\n        // They have autopublish on, yet they're trying to manually\n        // picking stuff to publish. They probably should turn off\n        // autopublish. (This check isn't perfect -- if you create a\n        // publish before you turn on autopublish, it won't catch\n        // it. But this will definitely handle the simple case where\n        // you've added the autopublish package to your app, and are\n        // calling publish from your app code.)\n        if (!self.warned_about_autopublish) {\n          self.warned_about_autopublish = true;\n          Meteor._debug(\n    \"** You've set up some data subscriptions with Meteor.publish(), but\\n\" +\n    \"** you still have autopublish turned on. Because autopublish is still\\n\" +\n    \"** on, your Meteor.publish() calls won't have much effect. All data\\n\" +\n    \"** will still be sent to all clients.\\n\" +\n    \"**\\n\" +\n    \"** Turn off autopublish by removing the autopublish package:\\n\" +\n    \"**\\n\" +\n    \"**   $ meteor remove autopublish\\n\" +\n    \"**\\n\" +\n    \"** .. and make sure you have Meteor.publish() and Meteor.subscribe() calls\\n\" +\n    \"** for each collection that you want clients to see.\\n\");\n        }\n      }\n\n      if (name)\n        self.publish_handlers[name] = handler;\n      else {\n        self.universal_publish_handlers.push(handler);\n        // Spin up the new publisher on any existing session too. Run each\n        // session's subscription in a new Fiber, so that there's no change for\n        // self.sessions to change while we're running this loop.\n        _.each(self.sessions, function (session) {\n          if (!session._dontStartNewUniversalSubs) {\n            Fiber(function() {\n              session._startSubscription(handler);\n            }).run();\n          }\n        });\n      }\n    }\n    else{\n      _.each(name, function(value, key) {\n        self.publish(key, value, {});\n      });\n    }\n  },\n\n  _removeSession: function (session) {\n    var self = this;\n    if (self.sessions[session.id]) {\n      delete self.sessions[session.id];\n    }\n  },\n\n  /**\n   * @summary Defines functions that can be invoked over the network by clients.\n   * @locus Anywhere\n   * @param {Object} methods Dictionary whose keys are method names and values are functions.\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self.method_handlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self.method_handlers[name] = func;\n    });\n  },\n\n  call: function (name, ...args) {\n    if (args.length && typeof args[args.length - 1] === \"function\") {\n      // If it's a function, the last argument is the result callback, not\n      // a parameter to the remote method.\n      var callback = args.pop();\n    }\n\n    return this.apply(name, args, callback);\n  },\n\n  // A version of the call method that always returns a Promise.\n  callAsync: function (name, ...args) {\n    return this.applyAsync(name, args);\n  },\n\n  apply: function (name, args, options, callback) {\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (! callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    } else {\n      options = options || {};\n    }\n\n    const promise = this.applyAsync(name, args, options);\n\n    // Return the result in whichever way the caller asked for it. Note that we\n    // do NOT block on the write fence in an analogous way to how the client\n    // blocks on the relevant data being visible, so you are NOT guaranteed that\n    // cursor observe callbacks have fired when your callback is invoked. (We\n    // can change this if there's a real use case.)\n    if (callback) {\n      promise.then(\n        result => callback(undefined, result),\n        exception => callback(exception)\n      );\n    } else {\n      return promise.await();\n    }\n  },\n\n  // @param options {Optional Object}\n  applyAsync: function (name, args, options) {\n    // Run the handler\n    var handler = this.method_handlers[name];\n    if (! handler) {\n      return Promise.reject(\n        new Meteor.Error(404, `Method '${name}' not found`)\n      );\n    }\n\n    // If this is a method call from within another method or publish function,\n    // get the user state from the outer method or publish function, otherwise\n    // don't allow setUserId to be called\n    var userId = null;\n    var setUserId = function() {\n      throw new Error(\"Can't call setUserId on a server initiated method call\");\n    };\n    var connection = null;\n    var currentMethodInvocation = DDP._CurrentMethodInvocation.get();\n    var currentPublicationInvocation = DDP._CurrentPublicationInvocation.get();\n    var randomSeed = null;\n    if (currentMethodInvocation) {\n      userId = currentMethodInvocation.userId;\n      setUserId = function(userId) {\n        currentMethodInvocation.setUserId(userId);\n      };\n      connection = currentMethodInvocation.connection;\n      randomSeed = DDPCommon.makeRpcSeed(currentMethodInvocation, name);\n    } else if (currentPublicationInvocation) {\n      userId = currentPublicationInvocation.userId;\n      setUserId = function(userId) {\n        currentPublicationInvocation._session._setUserId(userId);\n      };\n      connection = currentPublicationInvocation.connection;\n    }\n\n    var invocation = new DDPCommon.MethodInvocation({\n      isSimulation: false,\n      userId,\n      setUserId,\n      connection,\n      randomSeed\n    });\n\n    return new Promise(resolve => resolve(\n      DDP._CurrentMethodInvocation.withValue(\n        invocation,\n        () => maybeAuditArgumentChecks(\n          handler, invocation, EJSON.clone(args),\n          \"internal call to '\" + name + \"'\"\n        )\n      )\n    )).then(EJSON.clone);\n  },\n\n  _urlForSession: function (sessionId) {\n    var self = this;\n    var session = self.sessions[sessionId];\n    if (session)\n      return session._socketUrl;\n    else\n      return null;\n  }\n});\n\nvar calculateVersion = function (clientSupportedVersions,\n                                 serverSupportedVersions) {\n  var correctVersion = _.find(clientSupportedVersions, function (version) {\n    return _.contains(serverSupportedVersions, version);\n  });\n  if (!correctVersion) {\n    correctVersion = serverSupportedVersions[0];\n  }\n  return correctVersion;\n};\n\nDDPServer._calculateVersion = calculateVersion;\n\n\n// \"blind\" exceptions other than those that were deliberately thrown to signal\n// errors to the client\nvar wrapInternalException = function (exception, context) {\n  if (!exception) return exception;\n\n  // To allow packages to throw errors intended for the client but not have to\n  // depend on the Meteor.Error class, `isClientSafe` can be set to true on any\n  // error before it is thrown.\n  if (exception.isClientSafe) {\n    if (!(exception instanceof Meteor.Error)) {\n      const originalMessage = exception.message;\n      exception = new Meteor.Error(exception.error, exception.reason, exception.details);\n      exception.message = originalMessage;\n    }\n    return exception;\n  }\n\n  // tests can set the 'expected' flag on an exception so it won't go to the\n  // server log\n  if (!exception.expected) {\n    Meteor._debug(\"Exception \" + context, exception.stack);\n    if (exception.sanitizedError) {\n      Meteor._debug(\"Sanitized and reported to the client as:\", exception.sanitizedError.message);\n      Meteor._debug();\n    }\n  }\n\n  // Did the error contain more details that could have been useful if caught in\n  // server code (or if thrown from non-client-originated code), but also\n  // provided a \"sanitized\" version with more context than 500 Internal server\n  // error? Use that.\n  if (exception.sanitizedError) {\n    if (exception.sanitizedError.isClientSafe)\n      return exception.sanitizedError;\n    Meteor._debug(\"Exception \" + context + \" provides a sanitizedError that \" +\n                  \"does not have isClientSafe property set; ignoring\");\n  }\n\n  return new Meteor.Error(500, \"Internal server error\");\n};\n\n\n// Audit argument checks, if the audit-argument-checks package exists (it is a\n// weak dependency of this package).\nvar maybeAuditArgumentChecks = function (f, context, args, description) {\n  args = args || [];\n  if (Package['audit-argument-checks']) {\n    return Match._failIfArgumentsAreNotAllChecked(\n      f, context, args, description);\n  }\n  return f.apply(context, args);\n};\n","var Future = Npm.require('fibers/future');\n\n// A write fence collects a group of writes, and provides a callback\n// when all of the writes are fully committed and propagated (all\n// observers have been notified of the write and acknowledged it.)\n//\nDDPServer._WriteFence = function () {\n  var self = this;\n\n  self.armed = false;\n  self.fired = false;\n  self.retired = false;\n  self.outstanding_writes = 0;\n  self.before_fire_callbacks = [];\n  self.completion_callbacks = [];\n};\n\n// The current write fence. When there is a current write fence, code\n// that writes to databases should register their writes with it using\n// beginWrite().\n//\nDDPServer._CurrentWriteFence = new Meteor.EnvironmentVariable;\n\n_.extend(DDPServer._WriteFence.prototype, {\n  // Start tracking a write, and return an object to represent it. The\n  // object has a single method, committed(). This method should be\n  // called when the write is fully committed and propagated. You can\n  // continue to add writes to the WriteFence up until it is triggered\n  // (calls its callbacks because all writes have committed.)\n  beginWrite: function () {\n    var self = this;\n\n    if (self.retired)\n      return { committed: function () {} };\n\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to add writes\");\n\n    self.outstanding_writes++;\n    var committed = false;\n    return {\n      committed: function () {\n        if (committed)\n          throw new Error(\"committed called twice on the same write\");\n        committed = true;\n        self.outstanding_writes--;\n        self._maybeFire();\n      }\n    };\n  },\n\n  // Arm the fence. Once the fence is armed, and there are no more\n  // uncommitted writes, it will activate.\n  arm: function () {\n    var self = this;\n    if (self === DDPServer._CurrentWriteFence.get())\n      throw Error(\"Can't arm the current fence\");\n    self.armed = true;\n    self._maybeFire();\n  },\n\n  // Register a function to be called once before firing the fence.\n  // Callback function can add new writes to the fence, in which case\n  // it won't fire until those writes are done as well.\n  onBeforeFire: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.before_fire_callbacks.push(func);\n  },\n\n  // Register a function to be called when the fence fires.\n  onAllCommitted: function (func) {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"fence has already activated -- too late to \" +\n                      \"add a callback\");\n    self.completion_callbacks.push(func);\n  },\n\n  // Convenience function. Arms the fence, then blocks until it fires.\n  armAndWait: function () {\n    var self = this;\n    var future = new Future;\n    self.onAllCommitted(function () {\n      future['return']();\n    });\n    self.arm();\n    future.wait();\n  },\n\n  _maybeFire: function () {\n    var self = this;\n    if (self.fired)\n      throw new Error(\"write fence already activated?\");\n    if (self.armed && !self.outstanding_writes) {\n      function invokeCallback (func) {\n        try {\n          func(self);\n        } catch (err) {\n          Meteor._debug(\"exception in write fence callback:\", err);\n        }\n      }\n\n      self.outstanding_writes++;\n      while (self.before_fire_callbacks.length > 0) {\n        var callbacks = self.before_fire_callbacks;\n        self.before_fire_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n      self.outstanding_writes--;\n\n      if (!self.outstanding_writes) {\n        self.fired = true;\n        var callbacks = self.completion_callbacks;\n        self.completion_callbacks = [];\n        _.each(callbacks, invokeCallback);\n      }\n    }\n  },\n\n  // Deactivate this fence so that adding more writes has no effect.\n  // The fence must have already fired.\n  retire: function () {\n    var self = this;\n    if (! self.fired)\n      throw new Error(\"Can't retire a fence that hasn't fired.\");\n    self.retired = true;\n  }\n});\n","// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\n_.extend(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (! _.has(msg, 'collection')) {\n      return '';\n    } else if (typeof(msg.collection) === 'string') {\n      if (msg.collection === '')\n        throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = {trigger: EJSON.clone(trigger), callback: callback};\n    if (! _.has(self.listenersByCollection, collection)) {\n      self.listenersByCollection[collection] = {};\n    }\n    self.listenersByCollection[collection][id] = record;\n\n    if (self.factName && Package.facts) {\n      Package.facts.Facts.incrementServerFact(\n        self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package.facts) {\n          Package.facts.Facts.incrementServerFact(\n            self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        if (_.isEmpty(self.listenersByCollection[collection])) {\n          delete self.listenersByCollection[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (! _.has(self.listenersByCollection, collection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    _.each(listenersForCollection, function (l, id) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    _.each(callbackIds, function (id) {\n      if (_.has(listenersForCollection, id)) {\n        listenersForCollection[id].callback(notification);\n      }\n    });\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof(notification.id) === 'string' &&\n        typeof(trigger.id) === 'string' &&\n        notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID &&\n        trigger.id instanceof MongoID.ObjectID &&\n        ! notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return _.all(trigger, function (triggerValue, key) {\n      return !_.has(notification, key) ||\n        EJSON.equals(triggerValue, notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});\n","if (process.env.DDP_DEFAULT_CONNECTION_URL) {\n  __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL =\n    process.env.DDP_DEFAULT_CONNECTION_URL;\n}\n\nMeteor.server = new Server;\n\nMeteor.refresh = function (notification) {\n  DDPServer._InvalidationCrossbar.fire(notification);\n};\n\n// Proxy the public methods of Meteor.server so they can\n// be called directly on Meteor.\n_.each(['publish', 'methods', 'call', 'apply', 'onConnection', 'onMessage'],\n       function (name) {\n         Meteor[name] = _.bind(Meteor.server[name], Meteor.server);\n       });\n\n// Meteor.server used to be called Meteor.default_server. Provide\n// backcompat as a courtesy even though it was never documented.\n// XXX COMPAT WITH 0.6.4\nMeteor.default_server = Meteor.server;\n"]}}]