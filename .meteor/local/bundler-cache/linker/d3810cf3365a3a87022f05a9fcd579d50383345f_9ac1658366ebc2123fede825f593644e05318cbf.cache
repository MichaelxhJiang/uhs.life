[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar moment;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/momentjs_moment/moment.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n//! moment.js                                                                                                        // 1\n//! version : 2.19.1                                                                                                 // 2\n//! authors : Tim Wood, Iskren Chernev, Moment.js contributors                                                       // 3\n//! license : MIT                                                                                                    // 4\n//! momentjs.com                                                                                                     // 5\n                                                                                                                     // 6\n;(function (global, factory) {                                                                                       // 7\n    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :                      // 8\n    typeof define === 'function' && define.amd ? define(factory) :                                                   // 9\n    global.moment = factory()                                                                                        // 10\n}(this, (function () { 'use strict';                                                                                 // 11\n                                                                                                                     // 12\nvar hookCallback;                                                                                                    // 13\n                                                                                                                     // 14\nfunction hooks () {                                                                                                  // 15\n    return hookCallback.apply(null, arguments);                                                                      // 16\n}                                                                                                                    // 17\n                                                                                                                     // 18\n// This is done to register the method called with moment()                                                          // 19\n// without creating circular dependencies.                                                                           // 20\nfunction setHookCallback (callback) {                                                                                // 21\n    hookCallback = callback;                                                                                         // 22\n}                                                                                                                    // 23\n                                                                                                                     // 24\nfunction isArray(input) {                                                                                            // 25\n    return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';                     // 26\n}                                                                                                                    // 27\n                                                                                                                     // 28\nfunction isObject(input) {                                                                                           // 29\n    // IE8 will treat undefined and null as object if it wasn't for                                                  // 30\n    // input != null                                                                                                 // 31\n    return input != null && Object.prototype.toString.call(input) === '[object Object]';                             // 32\n}                                                                                                                    // 33\n                                                                                                                     // 34\nfunction isObjectEmpty(obj) {                                                                                        // 35\n    if (Object.getOwnPropertyNames) {                                                                                // 36\n        return (Object.getOwnPropertyNames(obj).length === 0);                                                       // 37\n    } else {                                                                                                         // 38\n        var k;                                                                                                       // 39\n        for (k in obj) {                                                                                             // 40\n            if (obj.hasOwnProperty(k)) {                                                                             // 41\n                return false;                                                                                        // 42\n            }                                                                                                        // 43\n        }                                                                                                            // 44\n        return true;                                                                                                 // 45\n    }                                                                                                                // 46\n}                                                                                                                    // 47\n                                                                                                                     // 48\nfunction isUndefined(input) {                                                                                        // 49\n    return input === void 0;                                                                                         // 50\n}                                                                                                                    // 51\n                                                                                                                     // 52\nfunction isNumber(input) {                                                                                           // 53\n    return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';                 // 54\n}                                                                                                                    // 55\n                                                                                                                     // 56\nfunction isDate(input) {                                                                                             // 57\n    return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';                       // 58\n}                                                                                                                    // 59\n                                                                                                                     // 60\nfunction map(arr, fn) {                                                                                              // 61\n    var res = [], i;                                                                                                 // 62\n    for (i = 0; i < arr.length; ++i) {                                                                               // 63\n        res.push(fn(arr[i], i));                                                                                     // 64\n    }                                                                                                                // 65\n    return res;                                                                                                      // 66\n}                                                                                                                    // 67\n                                                                                                                     // 68\nfunction hasOwnProp(a, b) {                                                                                          // 69\n    return Object.prototype.hasOwnProperty.call(a, b);                                                               // 70\n}                                                                                                                    // 71\n                                                                                                                     // 72\nfunction extend(a, b) {                                                                                              // 73\n    for (var i in b) {                                                                                               // 74\n        if (hasOwnProp(b, i)) {                                                                                      // 75\n            a[i] = b[i];                                                                                             // 76\n        }                                                                                                            // 77\n    }                                                                                                                // 78\n                                                                                                                     // 79\n    if (hasOwnProp(b, 'toString')) {                                                                                 // 80\n        a.toString = b.toString;                                                                                     // 81\n    }                                                                                                                // 82\n                                                                                                                     // 83\n    if (hasOwnProp(b, 'valueOf')) {                                                                                  // 84\n        a.valueOf = b.valueOf;                                                                                       // 85\n    }                                                                                                                // 86\n                                                                                                                     // 87\n    return a;                                                                                                        // 88\n}                                                                                                                    // 89\n                                                                                                                     // 90\nfunction createUTC (input, format, locale, strict) {                                                                 // 91\n    return createLocalOrUTC(input, format, locale, strict, true).utc();                                              // 92\n}                                                                                                                    // 93\n                                                                                                                     // 94\nfunction defaultParsingFlags() {                                                                                     // 95\n    // We need to deep clone this object.                                                                            // 96\n    return {                                                                                                         // 97\n        empty           : false,                                                                                     // 98\n        unusedTokens    : [],                                                                                        // 99\n        unusedInput     : [],                                                                                        // 100\n        overflow        : -2,                                                                                        // 101\n        charsLeftOver   : 0,                                                                                         // 102\n        nullInput       : false,                                                                                     // 103\n        invalidMonth    : null,                                                                                      // 104\n        invalidFormat   : false,                                                                                     // 105\n        userInvalidated : false,                                                                                     // 106\n        iso             : false,                                                                                     // 107\n        parsedDateParts : [],                                                                                        // 108\n        meridiem        : null,                                                                                      // 109\n        rfc2822         : false,                                                                                     // 110\n        weekdayMismatch : false                                                                                      // 111\n    };                                                                                                               // 112\n}                                                                                                                    // 113\n                                                                                                                     // 114\nfunction getParsingFlags(m) {                                                                                        // 115\n    if (m._pf == null) {                                                                                             // 116\n        m._pf = defaultParsingFlags();                                                                               // 117\n    }                                                                                                                // 118\n    return m._pf;                                                                                                    // 119\n}                                                                                                                    // 120\n                                                                                                                     // 121\nvar some;                                                                                                            // 122\nif (Array.prototype.some) {                                                                                          // 123\n    some = Array.prototype.some;                                                                                     // 124\n} else {                                                                                                             // 125\n    some = function (fun) {                                                                                          // 126\n        var t = Object(this);                                                                                        // 127\n        var len = t.length >>> 0;                                                                                    // 128\n                                                                                                                     // 129\n        for (var i = 0; i < len; i++) {                                                                              // 130\n            if (i in t && fun.call(this, t[i], i, t)) {                                                              // 131\n                return true;                                                                                         // 132\n            }                                                                                                        // 133\n        }                                                                                                            // 134\n                                                                                                                     // 135\n        return false;                                                                                                // 136\n    };                                                                                                               // 137\n}                                                                                                                    // 138\n                                                                                                                     // 139\nfunction isValid(m) {                                                                                                // 140\n    if (m._isValid == null) {                                                                                        // 141\n        var flags = getParsingFlags(m);                                                                              // 142\n        var parsedParts = some.call(flags.parsedDateParts, function (i) {                                            // 143\n            return i != null;                                                                                        // 144\n        });                                                                                                          // 145\n        var isNowValid = !isNaN(m._d.getTime()) &&                                                                   // 146\n            flags.overflow < 0 &&                                                                                    // 147\n            !flags.empty &&                                                                                          // 148\n            !flags.invalidMonth &&                                                                                   // 149\n            !flags.invalidWeekday &&                                                                                 // 150\n            !flags.weekdayMismatch &&                                                                                // 151\n            !flags.nullInput &&                                                                                      // 152\n            !flags.invalidFormat &&                                                                                  // 153\n            !flags.userInvalidated &&                                                                                // 154\n            (!flags.meridiem || (flags.meridiem && parsedParts));                                                    // 155\n                                                                                                                     // 156\n        if (m._strict) {                                                                                             // 157\n            isNowValid = isNowValid &&                                                                               // 158\n                flags.charsLeftOver === 0 &&                                                                         // 159\n                flags.unusedTokens.length === 0 &&                                                                   // 160\n                flags.bigHour === undefined;                                                                         // 161\n        }                                                                                                            // 162\n                                                                                                                     // 163\n        if (Object.isFrozen == null || !Object.isFrozen(m)) {                                                        // 164\n            m._isValid = isNowValid;                                                                                 // 165\n        }                                                                                                            // 166\n        else {                                                                                                       // 167\n            return isNowValid;                                                                                       // 168\n        }                                                                                                            // 169\n    }                                                                                                                // 170\n    return m._isValid;                                                                                               // 171\n}                                                                                                                    // 172\n                                                                                                                     // 173\nfunction createInvalid (flags) {                                                                                     // 174\n    var m = createUTC(NaN);                                                                                          // 175\n    if (flags != null) {                                                                                             // 176\n        extend(getParsingFlags(m), flags);                                                                           // 177\n    }                                                                                                                // 178\n    else {                                                                                                           // 179\n        getParsingFlags(m).userInvalidated = true;                                                                   // 180\n    }                                                                                                                // 181\n                                                                                                                     // 182\n    return m;                                                                                                        // 183\n}                                                                                                                    // 184\n                                                                                                                     // 185\n// Plugins that add properties should also add the key here (null value),                                            // 186\n// so we can properly clone ourselves.                                                                               // 187\nvar momentProperties = hooks.momentProperties = [];                                                                  // 188\n                                                                                                                     // 189\nfunction copyConfig(to, from) {                                                                                      // 190\n    var i, prop, val;                                                                                                // 191\n                                                                                                                     // 192\n    if (!isUndefined(from._isAMomentObject)) {                                                                       // 193\n        to._isAMomentObject = from._isAMomentObject;                                                                 // 194\n    }                                                                                                                // 195\n    if (!isUndefined(from._i)) {                                                                                     // 196\n        to._i = from._i;                                                                                             // 197\n    }                                                                                                                // 198\n    if (!isUndefined(from._f)) {                                                                                     // 199\n        to._f = from._f;                                                                                             // 200\n    }                                                                                                                // 201\n    if (!isUndefined(from._l)) {                                                                                     // 202\n        to._l = from._l;                                                                                             // 203\n    }                                                                                                                // 204\n    if (!isUndefined(from._strict)) {                                                                                // 205\n        to._strict = from._strict;                                                                                   // 206\n    }                                                                                                                // 207\n    if (!isUndefined(from._tzm)) {                                                                                   // 208\n        to._tzm = from._tzm;                                                                                         // 209\n    }                                                                                                                // 210\n    if (!isUndefined(from._isUTC)) {                                                                                 // 211\n        to._isUTC = from._isUTC;                                                                                     // 212\n    }                                                                                                                // 213\n    if (!isUndefined(from._offset)) {                                                                                // 214\n        to._offset = from._offset;                                                                                   // 215\n    }                                                                                                                // 216\n    if (!isUndefined(from._pf)) {                                                                                    // 217\n        to._pf = getParsingFlags(from);                                                                              // 218\n    }                                                                                                                // 219\n    if (!isUndefined(from._locale)) {                                                                                // 220\n        to._locale = from._locale;                                                                                   // 221\n    }                                                                                                                // 222\n                                                                                                                     // 223\n    if (momentProperties.length > 0) {                                                                               // 224\n        for (i = 0; i < momentProperties.length; i++) {                                                              // 225\n            prop = momentProperties[i];                                                                              // 226\n            val = from[prop];                                                                                        // 227\n            if (!isUndefined(val)) {                                                                                 // 228\n                to[prop] = val;                                                                                      // 229\n            }                                                                                                        // 230\n        }                                                                                                            // 231\n    }                                                                                                                // 232\n                                                                                                                     // 233\n    return to;                                                                                                       // 234\n}                                                                                                                    // 235\n                                                                                                                     // 236\nvar updateInProgress = false;                                                                                        // 237\n                                                                                                                     // 238\n// Moment prototype object                                                                                           // 239\nfunction Moment(config) {                                                                                            // 240\n    copyConfig(this, config);                                                                                        // 241\n    this._d = new Date(config._d != null ? config._d.getTime() : NaN);                                               // 242\n    if (!this.isValid()) {                                                                                           // 243\n        this._d = new Date(NaN);                                                                                     // 244\n    }                                                                                                                // 245\n    // Prevent infinite loop in case updateOffset creates new moment                                                 // 246\n    // objects.                                                                                                      // 247\n    if (updateInProgress === false) {                                                                                // 248\n        updateInProgress = true;                                                                                     // 249\n        hooks.updateOffset(this);                                                                                    // 250\n        updateInProgress = false;                                                                                    // 251\n    }                                                                                                                // 252\n}                                                                                                                    // 253\n                                                                                                                     // 254\nfunction isMoment (obj) {                                                                                            // 255\n    return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);                                   // 256\n}                                                                                                                    // 257\n                                                                                                                     // 258\nfunction absFloor (number) {                                                                                         // 259\n    if (number < 0) {                                                                                                // 260\n        // -0 -> 0                                                                                                   // 261\n        return Math.ceil(number) || 0;                                                                               // 262\n    } else {                                                                                                         // 263\n        return Math.floor(number);                                                                                   // 264\n    }                                                                                                                // 265\n}                                                                                                                    // 266\n                                                                                                                     // 267\nfunction toInt(argumentForCoercion) {                                                                                // 268\n    var coercedNumber = +argumentForCoercion,                                                                        // 269\n        value = 0;                                                                                                   // 270\n                                                                                                                     // 271\n    if (coercedNumber !== 0 && isFinite(coercedNumber)) {                                                            // 272\n        value = absFloor(coercedNumber);                                                                             // 273\n    }                                                                                                                // 274\n                                                                                                                     // 275\n    return value;                                                                                                    // 276\n}                                                                                                                    // 277\n                                                                                                                     // 278\n// compare two arrays, return the number of differences                                                              // 279\nfunction compareArrays(array1, array2, dontConvert) {                                                                // 280\n    var len = Math.min(array1.length, array2.length),                                                                // 281\n        lengthDiff = Math.abs(array1.length - array2.length),                                                        // 282\n        diffs = 0,                                                                                                   // 283\n        i;                                                                                                           // 284\n    for (i = 0; i < len; i++) {                                                                                      // 285\n        if ((dontConvert && array1[i] !== array2[i]) ||                                                              // 286\n            (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {                                               // 287\n            diffs++;                                                                                                 // 288\n        }                                                                                                            // 289\n    }                                                                                                                // 290\n    return diffs + lengthDiff;                                                                                       // 291\n}                                                                                                                    // 292\n                                                                                                                     // 293\nfunction warn(msg) {                                                                                                 // 294\n    if (hooks.suppressDeprecationWarnings === false &&                                                               // 295\n            (typeof console !==  'undefined') && console.warn) {                                                     // 296\n        console.warn('Deprecation warning: ' + msg);                                                                 // 297\n    }                                                                                                                // 298\n}                                                                                                                    // 299\n                                                                                                                     // 300\nfunction deprecate(msg, fn) {                                                                                        // 301\n    var firstTime = true;                                                                                            // 302\n                                                                                                                     // 303\n    return extend(function () {                                                                                      // 304\n        if (hooks.deprecationHandler != null) {                                                                      // 305\n            hooks.deprecationHandler(null, msg);                                                                     // 306\n        }                                                                                                            // 307\n        if (firstTime) {                                                                                             // 308\n            var args = [];                                                                                           // 309\n            var arg;                                                                                                 // 310\n            for (var i = 0; i < arguments.length; i++) {                                                             // 311\n                arg = '';                                                                                            // 312\n                if (typeof arguments[i] === 'object') {                                                              // 313\n                    arg += '\\n[' + i + '] ';                                                                         // 314\n                    for (var key in arguments[0]) {                                                                  // 315\n                        arg += key + ': ' + arguments[0][key] + ', ';                                                // 316\n                    }                                                                                                // 317\n                    arg = arg.slice(0, -2); // Remove trailing comma and space                                       // 318\n                } else {                                                                                             // 319\n                    arg = arguments[i];                                                                              // 320\n                }                                                                                                    // 321\n                args.push(arg);                                                                                      // 322\n            }                                                                                                        // 323\n            warn(msg + '\\nArguments: ' + Array.prototype.slice.call(args).join('') + '\\n' + (new Error()).stack);    // 324\n            firstTime = false;                                                                                       // 325\n        }                                                                                                            // 326\n        return fn.apply(this, arguments);                                                                            // 327\n    }, fn);                                                                                                          // 328\n}                                                                                                                    // 329\n                                                                                                                     // 330\nvar deprecations = {};                                                                                               // 331\n                                                                                                                     // 332\nfunction deprecateSimple(name, msg) {                                                                                // 333\n    if (hooks.deprecationHandler != null) {                                                                          // 334\n        hooks.deprecationHandler(name, msg);                                                                         // 335\n    }                                                                                                                // 336\n    if (!deprecations[name]) {                                                                                       // 337\n        warn(msg);                                                                                                   // 338\n        deprecations[name] = true;                                                                                   // 339\n    }                                                                                                                // 340\n}                                                                                                                    // 341\n                                                                                                                     // 342\nhooks.suppressDeprecationWarnings = false;                                                                           // 343\nhooks.deprecationHandler = null;                                                                                     // 344\n                                                                                                                     // 345\nfunction isFunction(input) {                                                                                         // 346\n    return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';               // 347\n}                                                                                                                    // 348\n                                                                                                                     // 349\nfunction set (config) {                                                                                              // 350\n    var prop, i;                                                                                                     // 351\n    for (i in config) {                                                                                              // 352\n        prop = config[i];                                                                                            // 353\n        if (isFunction(prop)) {                                                                                      // 354\n            this[i] = prop;                                                                                          // 355\n        } else {                                                                                                     // 356\n            this['_' + i] = prop;                                                                                    // 357\n        }                                                                                                            // 358\n    }                                                                                                                // 359\n    this._config = config;                                                                                           // 360\n    // Lenient ordinal parsing accepts just a number in addition to                                                  // 361\n    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.                                                // 362\n    // TODO: Remove \"ordinalParse\" fallback in next major release.                                                   // 363\n    this._dayOfMonthOrdinalParseLenient = new RegExp(                                                                // 364\n        (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +                                         // 365\n            '|' + (/\\d{1,2}/).source);                                                                               // 366\n}                                                                                                                    // 367\n                                                                                                                     // 368\nfunction mergeConfigs(parentConfig, childConfig) {                                                                   // 369\n    var res = extend({}, parentConfig), prop;                                                                        // 370\n    for (prop in childConfig) {                                                                                      // 371\n        if (hasOwnProp(childConfig, prop)) {                                                                         // 372\n            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {                                       // 373\n                res[prop] = {};                                                                                      // 374\n                extend(res[prop], parentConfig[prop]);                                                               // 375\n                extend(res[prop], childConfig[prop]);                                                                // 376\n            } else if (childConfig[prop] != null) {                                                                  // 377\n                res[prop] = childConfig[prop];                                                                       // 378\n            } else {                                                                                                 // 379\n                delete res[prop];                                                                                    // 380\n            }                                                                                                        // 381\n        }                                                                                                            // 382\n    }                                                                                                                // 383\n    for (prop in parentConfig) {                                                                                     // 384\n        if (hasOwnProp(parentConfig, prop) &&                                                                        // 385\n                !hasOwnProp(childConfig, prop) &&                                                                    // 386\n                isObject(parentConfig[prop])) {                                                                      // 387\n            // make sure changes to properties don't modify parent config                                            // 388\n            res[prop] = extend({}, res[prop]);                                                                       // 389\n        }                                                                                                            // 390\n    }                                                                                                                // 391\n    return res;                                                                                                      // 392\n}                                                                                                                    // 393\n                                                                                                                     // 394\nfunction Locale(config) {                                                                                            // 395\n    if (config != null) {                                                                                            // 396\n        this.set(config);                                                                                            // 397\n    }                                                                                                                // 398\n}                                                                                                                    // 399\n                                                                                                                     // 400\nvar keys;                                                                                                            // 401\n                                                                                                                     // 402\nif (Object.keys) {                                                                                                   // 403\n    keys = Object.keys;                                                                                              // 404\n} else {                                                                                                             // 405\n    keys = function (obj) {                                                                                          // 406\n        var i, res = [];                                                                                             // 407\n        for (i in obj) {                                                                                             // 408\n            if (hasOwnProp(obj, i)) {                                                                                // 409\n                res.push(i);                                                                                         // 410\n            }                                                                                                        // 411\n        }                                                                                                            // 412\n        return res;                                                                                                  // 413\n    };                                                                                                               // 414\n}                                                                                                                    // 415\n                                                                                                                     // 416\nvar defaultCalendar = {                                                                                              // 417\n    sameDay : '[Today at] LT',                                                                                       // 418\n    nextDay : '[Tomorrow at] LT',                                                                                    // 419\n    nextWeek : 'dddd [at] LT',                                                                                       // 420\n    lastDay : '[Yesterday at] LT',                                                                                   // 421\n    lastWeek : '[Last] dddd [at] LT',                                                                                // 422\n    sameElse : 'L'                                                                                                   // 423\n};                                                                                                                   // 424\n                                                                                                                     // 425\nfunction calendar (key, mom, now) {                                                                                  // 426\n    var output = this._calendar[key] || this._calendar['sameElse'];                                                  // 427\n    return isFunction(output) ? output.call(mom, now) : output;                                                      // 428\n}                                                                                                                    // 429\n                                                                                                                     // 430\nvar defaultLongDateFormat = {                                                                                        // 431\n    LTS  : 'h:mm:ss A',                                                                                              // 432\n    LT   : 'h:mm A',                                                                                                 // 433\n    L    : 'MM/DD/YYYY',                                                                                             // 434\n    LL   : 'MMMM D, YYYY',                                                                                           // 435\n    LLL  : 'MMMM D, YYYY h:mm A',                                                                                    // 436\n    LLLL : 'dddd, MMMM D, YYYY h:mm A'                                                                               // 437\n};                                                                                                                   // 438\n                                                                                                                     // 439\nfunction longDateFormat (key) {                                                                                      // 440\n    var format = this._longDateFormat[key],                                                                          // 441\n        formatUpper = this._longDateFormat[key.toUpperCase()];                                                       // 442\n                                                                                                                     // 443\n    if (format || !formatUpper) {                                                                                    // 444\n        return format;                                                                                               // 445\n    }                                                                                                                // 446\n                                                                                                                     // 447\n    this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {                             // 448\n        return val.slice(1);                                                                                         // 449\n    });                                                                                                              // 450\n                                                                                                                     // 451\n    return this._longDateFormat[key];                                                                                // 452\n}                                                                                                                    // 453\n                                                                                                                     // 454\nvar defaultInvalidDate = 'Invalid date';                                                                             // 455\n                                                                                                                     // 456\nfunction invalidDate () {                                                                                            // 457\n    return this._invalidDate;                                                                                        // 458\n}                                                                                                                    // 459\n                                                                                                                     // 460\nvar defaultOrdinal = '%d';                                                                                           // 461\nvar defaultDayOfMonthOrdinalParse = /\\d{1,2}/;                                                                       // 462\n                                                                                                                     // 463\nfunction ordinal (number) {                                                                                          // 464\n    return this._ordinal.replace('%d', number);                                                                      // 465\n}                                                                                                                    // 466\n                                                                                                                     // 467\nvar defaultRelativeTime = {                                                                                          // 468\n    future : 'in %s',                                                                                                // 469\n    past   : '%s ago',                                                                                               // 470\n    s  : 'a few seconds',                                                                                            // 471\n    ss : '%d seconds',                                                                                               // 472\n    m  : 'a minute',                                                                                                 // 473\n    mm : '%d minutes',                                                                                               // 474\n    h  : 'an hour',                                                                                                  // 475\n    hh : '%d hours',                                                                                                 // 476\n    d  : 'a day',                                                                                                    // 477\n    dd : '%d days',                                                                                                  // 478\n    M  : 'a month',                                                                                                  // 479\n    MM : '%d months',                                                                                                // 480\n    y  : 'a year',                                                                                                   // 481\n    yy : '%d years'                                                                                                  // 482\n};                                                                                                                   // 483\n                                                                                                                     // 484\nfunction relativeTime (number, withoutSuffix, string, isFuture) {                                                    // 485\n    var output = this._relativeTime[string];                                                                         // 486\n    return (isFunction(output)) ?                                                                                    // 487\n        output(number, withoutSuffix, string, isFuture) :                                                            // 488\n        output.replace(/%d/i, number);                                                                               // 489\n}                                                                                                                    // 490\n                                                                                                                     // 491\nfunction pastFuture (diff, output) {                                                                                 // 492\n    var format = this._relativeTime[diff > 0 ? 'future' : 'past'];                                                   // 493\n    return isFunction(format) ? format(output) : format.replace(/%s/i, output);                                      // 494\n}                                                                                                                    // 495\n                                                                                                                     // 496\nvar aliases = {};                                                                                                    // 497\n                                                                                                                     // 498\nfunction addUnitAlias (unit, shorthand) {                                                                            // 499\n    var lowerCase = unit.toLowerCase();                                                                              // 500\n    aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;                                       // 501\n}                                                                                                                    // 502\n                                                                                                                     // 503\nfunction normalizeUnits(units) {                                                                                     // 504\n    return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;                   // 505\n}                                                                                                                    // 506\n                                                                                                                     // 507\nfunction normalizeObjectUnits(inputObject) {                                                                         // 508\n    var normalizedInput = {},                                                                                        // 509\n        normalizedProp,                                                                                              // 510\n        prop;                                                                                                        // 511\n                                                                                                                     // 512\n    for (prop in inputObject) {                                                                                      // 513\n        if (hasOwnProp(inputObject, prop)) {                                                                         // 514\n            normalizedProp = normalizeUnits(prop);                                                                   // 515\n            if (normalizedProp) {                                                                                    // 516\n                normalizedInput[normalizedProp] = inputObject[prop];                                                 // 517\n            }                                                                                                        // 518\n        }                                                                                                            // 519\n    }                                                                                                                // 520\n                                                                                                                     // 521\n    return normalizedInput;                                                                                          // 522\n}                                                                                                                    // 523\n                                                                                                                     // 524\nvar priorities = {};                                                                                                 // 525\n                                                                                                                     // 526\nfunction addUnitPriority(unit, priority) {                                                                           // 527\n    priorities[unit] = priority;                                                                                     // 528\n}                                                                                                                    // 529\n                                                                                                                     // 530\nfunction getPrioritizedUnits(unitsObj) {                                                                             // 531\n    var units = [];                                                                                                  // 532\n    for (var u in unitsObj) {                                                                                        // 533\n        units.push({unit: u, priority: priorities[u]});                                                              // 534\n    }                                                                                                                // 535\n    units.sort(function (a, b) {                                                                                     // 536\n        return a.priority - b.priority;                                                                              // 537\n    });                                                                                                              // 538\n    return units;                                                                                                    // 539\n}                                                                                                                    // 540\n                                                                                                                     // 541\nfunction zeroFill(number, targetLength, forceSign) {                                                                 // 542\n    var absNumber = '' + Math.abs(number),                                                                           // 543\n        zerosToFill = targetLength - absNumber.length,                                                               // 544\n        sign = number >= 0;                                                                                          // 545\n    return (sign ? (forceSign ? '+' : '') : '-') +                                                                   // 546\n        Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;                                     // 547\n}                                                                                                                    // 548\n                                                                                                                     // 549\nvar formattingTokens = /(\\[[^\\[]*\\])|(\\\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;\n                                                                                                                     // 551\nvar localFormattingTokens = /(\\[[^\\[]*\\])|(\\\\)?(LTS|LT|LL?L?L?|l{1,4})/g;                                            // 552\n                                                                                                                     // 553\nvar formatFunctions = {};                                                                                            // 554\n                                                                                                                     // 555\nvar formatTokenFunctions = {};                                                                                       // 556\n                                                                                                                     // 557\n// token:    'M'                                                                                                     // 558\n// padded:   ['MM', 2]                                                                                               // 559\n// ordinal:  'Mo'                                                                                                    // 560\n// callback: function () { this.month() + 1 }                                                                        // 561\nfunction addFormatToken (token, padded, ordinal, callback) {                                                         // 562\n    var func = callback;                                                                                             // 563\n    if (typeof callback === 'string') {                                                                              // 564\n        func = function () {                                                                                         // 565\n            return this[callback]();                                                                                 // 566\n        };                                                                                                           // 567\n    }                                                                                                                // 568\n    if (token) {                                                                                                     // 569\n        formatTokenFunctions[token] = func;                                                                          // 570\n    }                                                                                                                // 571\n    if (padded) {                                                                                                    // 572\n        formatTokenFunctions[padded[0]] = function () {                                                              // 573\n            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);                                      // 574\n        };                                                                                                           // 575\n    }                                                                                                                // 576\n    if (ordinal) {                                                                                                   // 577\n        formatTokenFunctions[ordinal] = function () {                                                                // 578\n            return this.localeData().ordinal(func.apply(this, arguments), token);                                    // 579\n        };                                                                                                           // 580\n    }                                                                                                                // 581\n}                                                                                                                    // 582\n                                                                                                                     // 583\nfunction removeFormattingTokens(input) {                                                                             // 584\n    if (input.match(/\\[[\\s\\S]/)) {                                                                                   // 585\n        return input.replace(/^\\[|\\]$/g, '');                                                                        // 586\n    }                                                                                                                // 587\n    return input.replace(/\\\\/g, '');                                                                                 // 588\n}                                                                                                                    // 589\n                                                                                                                     // 590\nfunction makeFormatFunction(format) {                                                                                // 591\n    var array = format.match(formattingTokens), i, length;                                                           // 592\n                                                                                                                     // 593\n    for (i = 0, length = array.length; i < length; i++) {                                                            // 594\n        if (formatTokenFunctions[array[i]]) {                                                                        // 595\n            array[i] = formatTokenFunctions[array[i]];                                                               // 596\n        } else {                                                                                                     // 597\n            array[i] = removeFormattingTokens(array[i]);                                                             // 598\n        }                                                                                                            // 599\n    }                                                                                                                // 600\n                                                                                                                     // 601\n    return function (mom) {                                                                                          // 602\n        var output = '', i;                                                                                          // 603\n        for (i = 0; i < length; i++) {                                                                               // 604\n            output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];                                  // 605\n        }                                                                                                            // 606\n        return output;                                                                                               // 607\n    };                                                                                                               // 608\n}                                                                                                                    // 609\n                                                                                                                     // 610\n// format date using native date object                                                                              // 611\nfunction formatMoment(m, format) {                                                                                   // 612\n    if (!m.isValid()) {                                                                                              // 613\n        return m.localeData().invalidDate();                                                                         // 614\n    }                                                                                                                // 615\n                                                                                                                     // 616\n    format = expandFormat(format, m.localeData());                                                                   // 617\n    formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);                                 // 618\n                                                                                                                     // 619\n    return formatFunctions[format](m);                                                                               // 620\n}                                                                                                                    // 621\n                                                                                                                     // 622\nfunction expandFormat(format, locale) {                                                                              // 623\n    var i = 5;                                                                                                       // 624\n                                                                                                                     // 625\n    function replaceLongDateFormatTokens(input) {                                                                    // 626\n        return locale.longDateFormat(input) || input;                                                                // 627\n    }                                                                                                                // 628\n                                                                                                                     // 629\n    localFormattingTokens.lastIndex = 0;                                                                             // 630\n    while (i >= 0 && localFormattingTokens.test(format)) {                                                           // 631\n        format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);                                 // 632\n        localFormattingTokens.lastIndex = 0;                                                                         // 633\n        i -= 1;                                                                                                      // 634\n    }                                                                                                                // 635\n                                                                                                                     // 636\n    return format;                                                                                                   // 637\n}                                                                                                                    // 638\n                                                                                                                     // 639\nvar match1         = /\\d/;            //       0 - 9                                                                 // 640\nvar match2         = /\\d\\d/;          //      00 - 99                                                                // 641\nvar match3         = /\\d{3}/;         //     000 - 999                                                               // 642\nvar match4         = /\\d{4}/;         //    0000 - 9999                                                              // 643\nvar match6         = /[+-]?\\d{6}/;    // -999999 - 999999                                                            // 644\nvar match1to2      = /\\d\\d?/;         //       0 - 99                                                                // 645\nvar match3to4      = /\\d\\d\\d\\d?/;     //     999 - 9999                                                              // 646\nvar match5to6      = /\\d\\d\\d\\d\\d\\d?/; //   99999 - 999999                                                            // 647\nvar match1to3      = /\\d{1,3}/;       //       0 - 999                                                               // 648\nvar match1to4      = /\\d{1,4}/;       //       0 - 9999                                                              // 649\nvar match1to6      = /[+-]?\\d{1,6}/;  // -999999 - 999999                                                            // 650\n                                                                                                                     // 651\nvar matchUnsigned  = /\\d+/;           //       0 - inf                                                               // 652\nvar matchSigned    = /[+-]?\\d+/;      //    -inf - inf                                                               // 653\n                                                                                                                     // 654\nvar matchOffset    = /Z|[+-]\\d\\d:?\\d\\d/gi; // +00:00 -00:00 +0000 -0000 or Z                                         // 655\nvar matchShortOffset = /Z|[+-]\\d\\d(?::?\\d\\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z                          // 656\n                                                                                                                     // 657\nvar matchTimestamp = /[+-]?\\d+(\\.\\d{1,3})?/; // 123456789 123456789.123                                              // 658\n                                                                                                                     // 659\n// any word (or two) characters or numbers including two/three word month in arabic.                                 // 660\n// includes scottish gaelic two word and hyphenated months                                                           // 661\nvar matchWord = /[0-9]*['a-z\\u00A0-\\u05FF\\u0700-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]+|[\\u0600-\\u06FF\\/]+(\\s*?[\\u0600-\\u06FF]+){1,2}/i;\n                                                                                                                     // 663\n                                                                                                                     // 664\nvar regexes = {};                                                                                                    // 665\n                                                                                                                     // 666\nfunction addRegexToken (token, regex, strictRegex) {                                                                 // 667\n    regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {                                   // 668\n        return (isStrict && strictRegex) ? strictRegex : regex;                                                      // 669\n    };                                                                                                               // 670\n}                                                                                                                    // 671\n                                                                                                                     // 672\nfunction getParseRegexForToken (token, config) {                                                                     // 673\n    if (!hasOwnProp(regexes, token)) {                                                                               // 674\n        return new RegExp(unescapeFormat(token));                                                                    // 675\n    }                                                                                                                // 676\n                                                                                                                     // 677\n    return regexes[token](config._strict, config._locale);                                                           // 678\n}                                                                                                                    // 679\n                                                                                                                     // 680\n// Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript              // 681\nfunction unescapeFormat(s) {                                                                                         // 682\n    return regexEscape(s.replace('\\\\', '').replace(/\\\\(\\[)|\\\\(\\])|\\[([^\\]\\[]*)\\]|\\\\(.)/g, function (matched, p1, p2, p3, p4) {\n        return p1 || p2 || p3 || p4;                                                                                 // 684\n    }));                                                                                                             // 685\n}                                                                                                                    // 686\n                                                                                                                     // 687\nfunction regexEscape(s) {                                                                                            // 688\n    return s.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&');                                                              // 689\n}                                                                                                                    // 690\n                                                                                                                     // 691\nvar tokens = {};                                                                                                     // 692\n                                                                                                                     // 693\nfunction addParseToken (token, callback) {                                                                           // 694\n    var i, func = callback;                                                                                          // 695\n    if (typeof token === 'string') {                                                                                 // 696\n        token = [token];                                                                                             // 697\n    }                                                                                                                // 698\n    if (isNumber(callback)) {                                                                                        // 699\n        func = function (input, array) {                                                                             // 700\n            array[callback] = toInt(input);                                                                          // 701\n        };                                                                                                           // 702\n    }                                                                                                                // 703\n    for (i = 0; i < token.length; i++) {                                                                             // 704\n        tokens[token[i]] = func;                                                                                     // 705\n    }                                                                                                                // 706\n}                                                                                                                    // 707\n                                                                                                                     // 708\nfunction addWeekParseToken (token, callback) {                                                                       // 709\n    addParseToken(token, function (input, array, config, token) {                                                    // 710\n        config._w = config._w || {};                                                                                 // 711\n        callback(input, config._w, config, token);                                                                   // 712\n    });                                                                                                              // 713\n}                                                                                                                    // 714\n                                                                                                                     // 715\nfunction addTimeToArrayFromToken(token, input, config) {                                                             // 716\n    if (input != null && hasOwnProp(tokens, token)) {                                                                // 717\n        tokens[token](input, config._a, config, token);                                                              // 718\n    }                                                                                                                // 719\n}                                                                                                                    // 720\n                                                                                                                     // 721\nvar YEAR = 0;                                                                                                        // 722\nvar MONTH = 1;                                                                                                       // 723\nvar DATE = 2;                                                                                                        // 724\nvar HOUR = 3;                                                                                                        // 725\nvar MINUTE = 4;                                                                                                      // 726\nvar SECOND = 5;                                                                                                      // 727\nvar MILLISECOND = 6;                                                                                                 // 728\nvar WEEK = 7;                                                                                                        // 729\nvar WEEKDAY = 8;                                                                                                     // 730\n                                                                                                                     // 731\n// FORMATTING                                                                                                        // 732\n                                                                                                                     // 733\naddFormatToken('Y', 0, 0, function () {                                                                              // 734\n    var y = this.year();                                                                                             // 735\n    return y <= 9999 ? '' + y : '+' + y;                                                                             // 736\n});                                                                                                                  // 737\n                                                                                                                     // 738\naddFormatToken(0, ['YY', 2], 0, function () {                                                                        // 739\n    return this.year() % 100;                                                                                        // 740\n});                                                                                                                  // 741\n                                                                                                                     // 742\naddFormatToken(0, ['YYYY',   4],       0, 'year');                                                                   // 743\naddFormatToken(0, ['YYYYY',  5],       0, 'year');                                                                   // 744\naddFormatToken(0, ['YYYYYY', 6, true], 0, 'year');                                                                   // 745\n                                                                                                                     // 746\n// ALIASES                                                                                                           // 747\n                                                                                                                     // 748\naddUnitAlias('year', 'y');                                                                                           // 749\n                                                                                                                     // 750\n// PRIORITIES                                                                                                        // 751\n                                                                                                                     // 752\naddUnitPriority('year', 1);                                                                                          // 753\n                                                                                                                     // 754\n// PARSING                                                                                                           // 755\n                                                                                                                     // 756\naddRegexToken('Y',      matchSigned);                                                                                // 757\naddRegexToken('YY',     match1to2, match2);                                                                          // 758\naddRegexToken('YYYY',   match1to4, match4);                                                                          // 759\naddRegexToken('YYYYY',  match1to6, match6);                                                                          // 760\naddRegexToken('YYYYYY', match1to6, match6);                                                                          // 761\n                                                                                                                     // 762\naddParseToken(['YYYYY', 'YYYYYY'], YEAR);                                                                            // 763\naddParseToken('YYYY', function (input, array) {                                                                      // 764\n    array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);                                // 765\n});                                                                                                                  // 766\naddParseToken('YY', function (input, array) {                                                                        // 767\n    array[YEAR] = hooks.parseTwoDigitYear(input);                                                                    // 768\n});                                                                                                                  // 769\naddParseToken('Y', function (input, array) {                                                                         // 770\n    array[YEAR] = parseInt(input, 10);                                                                               // 771\n});                                                                                                                  // 772\n                                                                                                                     // 773\n// HELPERS                                                                                                           // 774\n                                                                                                                     // 775\nfunction daysInYear(year) {                                                                                          // 776\n    return isLeapYear(year) ? 366 : 365;                                                                             // 777\n}                                                                                                                    // 778\n                                                                                                                     // 779\nfunction isLeapYear(year) {                                                                                          // 780\n    return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;                                                 // 781\n}                                                                                                                    // 782\n                                                                                                                     // 783\n// HOOKS                                                                                                             // 784\n                                                                                                                     // 785\nhooks.parseTwoDigitYear = function (input) {                                                                         // 786\n    return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);                                                         // 787\n};                                                                                                                   // 788\n                                                                                                                     // 789\n// MOMENTS                                                                                                           // 790\n                                                                                                                     // 791\nvar getSetYear = makeGetSet('FullYear', true);                                                                       // 792\n                                                                                                                     // 793\nfunction getIsLeapYear () {                                                                                          // 794\n    return isLeapYear(this.year());                                                                                  // 795\n}                                                                                                                    // 796\n                                                                                                                     // 797\nfunction makeGetSet (unit, keepTime) {                                                                               // 798\n    return function (value) {                                                                                        // 799\n        if (value != null) {                                                                                         // 800\n            set$1(this, unit, value);                                                                                // 801\n            hooks.updateOffset(this, keepTime);                                                                      // 802\n            return this;                                                                                             // 803\n        } else {                                                                                                     // 804\n            return get(this, unit);                                                                                  // 805\n        }                                                                                                            // 806\n    };                                                                                                               // 807\n}                                                                                                                    // 808\n                                                                                                                     // 809\nfunction get (mom, unit) {                                                                                           // 810\n    return mom.isValid() ?                                                                                           // 811\n        mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;                                                    // 812\n}                                                                                                                    // 813\n                                                                                                                     // 814\nfunction set$1 (mom, unit, value) {                                                                                  // 815\n    if (mom.isValid() && !isNaN(value)) {                                                                            // 816\n        if (unit === 'FullYear' && isLeapYear(mom.year())) {                                                         // 817\n            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));   // 818\n        }                                                                                                            // 819\n        else {                                                                                                       // 820\n            mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);                                                 // 821\n        }                                                                                                            // 822\n    }                                                                                                                // 823\n}                                                                                                                    // 824\n                                                                                                                     // 825\n// MOMENTS                                                                                                           // 826\n                                                                                                                     // 827\nfunction stringGet (units) {                                                                                         // 828\n    units = normalizeUnits(units);                                                                                   // 829\n    if (isFunction(this[units])) {                                                                                   // 830\n        return this[units]();                                                                                        // 831\n    }                                                                                                                // 832\n    return this;                                                                                                     // 833\n}                                                                                                                    // 834\n                                                                                                                     // 835\n                                                                                                                     // 836\nfunction stringSet (units, value) {                                                                                  // 837\n    if (typeof units === 'object') {                                                                                 // 838\n        units = normalizeObjectUnits(units);                                                                         // 839\n        var prioritized = getPrioritizedUnits(units);                                                                // 840\n        for (var i = 0; i < prioritized.length; i++) {                                                               // 841\n            this[prioritized[i].unit](units[prioritized[i].unit]);                                                   // 842\n        }                                                                                                            // 843\n    } else {                                                                                                         // 844\n        units = normalizeUnits(units);                                                                               // 845\n        if (isFunction(this[units])) {                                                                               // 846\n            return this[units](value);                                                                               // 847\n        }                                                                                                            // 848\n    }                                                                                                                // 849\n    return this;                                                                                                     // 850\n}                                                                                                                    // 851\n                                                                                                                     // 852\nfunction mod(n, x) {                                                                                                 // 853\n    return ((n % x) + x) % x;                                                                                        // 854\n}                                                                                                                    // 855\n                                                                                                                     // 856\nvar indexOf;                                                                                                         // 857\n                                                                                                                     // 858\nif (Array.prototype.indexOf) {                                                                                       // 859\n    indexOf = Array.prototype.indexOf;                                                                               // 860\n} else {                                                                                                             // 861\n    indexOf = function (o) {                                                                                         // 862\n        // I know                                                                                                    // 863\n        var i;                                                                                                       // 864\n        for (i = 0; i < this.length; ++i) {                                                                          // 865\n            if (this[i] === o) {                                                                                     // 866\n                return i;                                                                                            // 867\n            }                                                                                                        // 868\n        }                                                                                                            // 869\n        return -1;                                                                                                   // 870\n    };                                                                                                               // 871\n}                                                                                                                    // 872\n                                                                                                                     // 873\nfunction daysInMonth(year, month) {                                                                                  // 874\n    if (isNaN(year) || isNaN(month)) {                                                                               // 875\n        return NaN;                                                                                                  // 876\n    }                                                                                                                // 877\n    var modMonth = mod(month, 12);                                                                                   // 878\n    year += (month - modMonth) / 12;                                                                                 // 879\n    return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);                                  // 880\n}                                                                                                                    // 881\n                                                                                                                     // 882\n// FORMATTING                                                                                                        // 883\n                                                                                                                     // 884\naddFormatToken('M', ['MM', 2], 'Mo', function () {                                                                   // 885\n    return this.month() + 1;                                                                                         // 886\n});                                                                                                                  // 887\n                                                                                                                     // 888\naddFormatToken('MMM', 0, 0, function (format) {                                                                      // 889\n    return this.localeData().monthsShort(this, format);                                                              // 890\n});                                                                                                                  // 891\n                                                                                                                     // 892\naddFormatToken('MMMM', 0, 0, function (format) {                                                                     // 893\n    return this.localeData().months(this, format);                                                                   // 894\n});                                                                                                                  // 895\n                                                                                                                     // 896\n// ALIASES                                                                                                           // 897\n                                                                                                                     // 898\naddUnitAlias('month', 'M');                                                                                          // 899\n                                                                                                                     // 900\n// PRIORITY                                                                                                          // 901\n                                                                                                                     // 902\naddUnitPriority('month', 8);                                                                                         // 903\n                                                                                                                     // 904\n// PARSING                                                                                                           // 905\n                                                                                                                     // 906\naddRegexToken('M',    match1to2);                                                                                    // 907\naddRegexToken('MM',   match1to2, match2);                                                                            // 908\naddRegexToken('MMM',  function (isStrict, locale) {                                                                  // 909\n    return locale.monthsShortRegex(isStrict);                                                                        // 910\n});                                                                                                                  // 911\naddRegexToken('MMMM', function (isStrict, locale) {                                                                  // 912\n    return locale.monthsRegex(isStrict);                                                                             // 913\n});                                                                                                                  // 914\n                                                                                                                     // 915\naddParseToken(['M', 'MM'], function (input, array) {                                                                 // 916\n    array[MONTH] = toInt(input) - 1;                                                                                 // 917\n});                                                                                                                  // 918\n                                                                                                                     // 919\naddParseToken(['MMM', 'MMMM'], function (input, array, config, token) {                                              // 920\n    var month = config._locale.monthsParse(input, token, config._strict);                                            // 921\n    // if we didn't find a month name, mark the date as invalid.                                                     // 922\n    if (month != null) {                                                                                             // 923\n        array[MONTH] = month;                                                                                        // 924\n    } else {                                                                                                         // 925\n        getParsingFlags(config).invalidMonth = input;                                                                // 926\n    }                                                                                                                // 927\n});                                                                                                                  // 928\n                                                                                                                     // 929\n// LOCALES                                                                                                           // 930\n                                                                                                                     // 931\nvar MONTHS_IN_FORMAT = /D[oD]?(\\[[^\\[\\]]*\\]|\\s)+MMMM?/;                                                              // 932\nvar defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');\nfunction localeMonths (m, format) {                                                                                  // 934\n    if (!m) {                                                                                                        // 935\n        return isArray(this._months) ? this._months :                                                                // 936\n            this._months['standalone'];                                                                              // 937\n    }                                                                                                                // 938\n    return isArray(this._months) ? this._months[m.month()] :                                                         // 939\n        this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];\n}                                                                                                                    // 941\n                                                                                                                     // 942\nvar defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');                         // 943\nfunction localeMonthsShort (m, format) {                                                                             // 944\n    if (!m) {                                                                                                        // 945\n        return isArray(this._monthsShort) ? this._monthsShort :                                                      // 946\n            this._monthsShort['standalone'];                                                                         // 947\n    }                                                                                                                // 948\n    return isArray(this._monthsShort) ? this._monthsShort[m.month()] :                                               // 949\n        this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];                       // 950\n}                                                                                                                    // 951\n                                                                                                                     // 952\nfunction handleStrictParse(monthName, format, strict) {                                                              // 953\n    var i, ii, mom, llc = monthName.toLocaleLowerCase();                                                             // 954\n    if (!this._monthsParse) {                                                                                        // 955\n        // this is not used                                                                                          // 956\n        this._monthsParse = [];                                                                                      // 957\n        this._longMonthsParse = [];                                                                                  // 958\n        this._shortMonthsParse = [];                                                                                 // 959\n        for (i = 0; i < 12; ++i) {                                                                                   // 960\n            mom = createUTC([2000, i]);                                                                              // 961\n            this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();                               // 962\n            this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();                                     // 963\n        }                                                                                                            // 964\n    }                                                                                                                // 965\n                                                                                                                     // 966\n    if (strict) {                                                                                                    // 967\n        if (format === 'MMM') {                                                                                      // 968\n            ii = indexOf.call(this._shortMonthsParse, llc);                                                          // 969\n            return ii !== -1 ? ii : null;                                                                            // 970\n        } else {                                                                                                     // 971\n            ii = indexOf.call(this._longMonthsParse, llc);                                                           // 972\n            return ii !== -1 ? ii : null;                                                                            // 973\n        }                                                                                                            // 974\n    } else {                                                                                                         // 975\n        if (format === 'MMM') {                                                                                      // 976\n            ii = indexOf.call(this._shortMonthsParse, llc);                                                          // 977\n            if (ii !== -1) {                                                                                         // 978\n                return ii;                                                                                           // 979\n            }                                                                                                        // 980\n            ii = indexOf.call(this._longMonthsParse, llc);                                                           // 981\n            return ii !== -1 ? ii : null;                                                                            // 982\n        } else {                                                                                                     // 983\n            ii = indexOf.call(this._longMonthsParse, llc);                                                           // 984\n            if (ii !== -1) {                                                                                         // 985\n                return ii;                                                                                           // 986\n            }                                                                                                        // 987\n            ii = indexOf.call(this._shortMonthsParse, llc);                                                          // 988\n            return ii !== -1 ? ii : null;                                                                            // 989\n        }                                                                                                            // 990\n    }                                                                                                                // 991\n}                                                                                                                    // 992\n                                                                                                                     // 993\nfunction localeMonthsParse (monthName, format, strict) {                                                             // 994\n    var i, mom, regex;                                                                                               // 995\n                                                                                                                     // 996\n    if (this._monthsParseExact) {                                                                                    // 997\n        return handleStrictParse.call(this, monthName, format, strict);                                              // 998\n    }                                                                                                                // 999\n                                                                                                                     // 1000\n    if (!this._monthsParse) {                                                                                        // 1001\n        this._monthsParse = [];                                                                                      // 1002\n        this._longMonthsParse = [];                                                                                  // 1003\n        this._shortMonthsParse = [];                                                                                 // 1004\n    }                                                                                                                // 1005\n                                                                                                                     // 1006\n    // TODO: add sorting                                                                                             // 1007\n    // Sorting makes sure if one month (or abbr) is a prefix of another                                              // 1008\n    // see sorting in computeMonthsParse                                                                             // 1009\n    for (i = 0; i < 12; i++) {                                                                                       // 1010\n        // make the regex if we don't have it already                                                                // 1011\n        mom = createUTC([2000, i]);                                                                                  // 1012\n        if (strict && !this._longMonthsParse[i]) {                                                                   // 1013\n            this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');           // 1014\n            this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');     // 1015\n        }                                                                                                            // 1016\n        if (!strict && !this._monthsParse[i]) {                                                                      // 1017\n            regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');                                   // 1018\n            this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');                                          // 1019\n        }                                                                                                            // 1020\n        // test the regex                                                                                            // 1021\n        if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {                               // 1022\n            return i;                                                                                                // 1023\n        } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {                        // 1024\n            return i;                                                                                                // 1025\n        } else if (!strict && this._monthsParse[i].test(monthName)) {                                                // 1026\n            return i;                                                                                                // 1027\n        }                                                                                                            // 1028\n    }                                                                                                                // 1029\n}                                                                                                                    // 1030\n                                                                                                                     // 1031\n// MOMENTS                                                                                                           // 1032\n                                                                                                                     // 1033\nfunction setMonth (mom, value) {                                                                                     // 1034\n    var dayOfMonth;                                                                                                  // 1035\n                                                                                                                     // 1036\n    if (!mom.isValid()) {                                                                                            // 1037\n        // No op                                                                                                     // 1038\n        return mom;                                                                                                  // 1039\n    }                                                                                                                // 1040\n                                                                                                                     // 1041\n    if (typeof value === 'string') {                                                                                 // 1042\n        if (/^\\d+$/.test(value)) {                                                                                   // 1043\n            value = toInt(value);                                                                                    // 1044\n        } else {                                                                                                     // 1045\n            value = mom.localeData().monthsParse(value);                                                             // 1046\n            // TODO: Another silent failure?                                                                         // 1047\n            if (!isNumber(value)) {                                                                                  // 1048\n                return mom;                                                                                          // 1049\n            }                                                                                                        // 1050\n        }                                                                                                            // 1051\n    }                                                                                                                // 1052\n                                                                                                                     // 1053\n    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));                                               // 1054\n    mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);                                          // 1055\n    return mom;                                                                                                      // 1056\n}                                                                                                                    // 1057\n                                                                                                                     // 1058\nfunction getSetMonth (value) {                                                                                       // 1059\n    if (value != null) {                                                                                             // 1060\n        setMonth(this, value);                                                                                       // 1061\n        hooks.updateOffset(this, true);                                                                              // 1062\n        return this;                                                                                                 // 1063\n    } else {                                                                                                         // 1064\n        return get(this, 'Month');                                                                                   // 1065\n    }                                                                                                                // 1066\n}                                                                                                                    // 1067\n                                                                                                                     // 1068\nfunction getDaysInMonth () {                                                                                         // 1069\n    return daysInMonth(this.year(), this.month());                                                                   // 1070\n}                                                                                                                    // 1071\n                                                                                                                     // 1072\nvar defaultMonthsShortRegex = matchWord;                                                                             // 1073\nfunction monthsShortRegex (isStrict) {                                                                               // 1074\n    if (this._monthsParseExact) {                                                                                    // 1075\n        if (!hasOwnProp(this, '_monthsRegex')) {                                                                     // 1076\n            computeMonthsParse.call(this);                                                                           // 1077\n        }                                                                                                            // 1078\n        if (isStrict) {                                                                                              // 1079\n            return this._monthsShortStrictRegex;                                                                     // 1080\n        } else {                                                                                                     // 1081\n            return this._monthsShortRegex;                                                                           // 1082\n        }                                                                                                            // 1083\n    } else {                                                                                                         // 1084\n        if (!hasOwnProp(this, '_monthsShortRegex')) {                                                                // 1085\n            this._monthsShortRegex = defaultMonthsShortRegex;                                                        // 1086\n        }                                                                                                            // 1087\n        return this._monthsShortStrictRegex && isStrict ?                                                            // 1088\n            this._monthsShortStrictRegex : this._monthsShortRegex;                                                   // 1089\n    }                                                                                                                // 1090\n}                                                                                                                    // 1091\n                                                                                                                     // 1092\nvar defaultMonthsRegex = matchWord;                                                                                  // 1093\nfunction monthsRegex (isStrict) {                                                                                    // 1094\n    if (this._monthsParseExact) {                                                                                    // 1095\n        if (!hasOwnProp(this, '_monthsRegex')) {                                                                     // 1096\n            computeMonthsParse.call(this);                                                                           // 1097\n        }                                                                                                            // 1098\n        if (isStrict) {                                                                                              // 1099\n            return this._monthsStrictRegex;                                                                          // 1100\n        } else {                                                                                                     // 1101\n            return this._monthsRegex;                                                                                // 1102\n        }                                                                                                            // 1103\n    } else {                                                                                                         // 1104\n        if (!hasOwnProp(this, '_monthsRegex')) {                                                                     // 1105\n            this._monthsRegex = defaultMonthsRegex;                                                                  // 1106\n        }                                                                                                            // 1107\n        return this._monthsStrictRegex && isStrict ?                                                                 // 1108\n            this._monthsStrictRegex : this._monthsRegex;                                                             // 1109\n    }                                                                                                                // 1110\n}                                                                                                                    // 1111\n                                                                                                                     // 1112\nfunction computeMonthsParse () {                                                                                     // 1113\n    function cmpLenRev(a, b) {                                                                                       // 1114\n        return b.length - a.length;                                                                                  // 1115\n    }                                                                                                                // 1116\n                                                                                                                     // 1117\n    var shortPieces = [], longPieces = [], mixedPieces = [],                                                         // 1118\n        i, mom;                                                                                                      // 1119\n    for (i = 0; i < 12; i++) {                                                                                       // 1120\n        // make the regex if we don't have it already                                                                // 1121\n        mom = createUTC([2000, i]);                                                                                  // 1122\n        shortPieces.push(this.monthsShort(mom, ''));                                                                 // 1123\n        longPieces.push(this.months(mom, ''));                                                                       // 1124\n        mixedPieces.push(this.months(mom, ''));                                                                      // 1125\n        mixedPieces.push(this.monthsShort(mom, ''));                                                                 // 1126\n    }                                                                                                                // 1127\n    // Sorting makes sure if one month (or abbr) is a prefix of another it                                           // 1128\n    // will match the longer piece.                                                                                  // 1129\n    shortPieces.sort(cmpLenRev);                                                                                     // 1130\n    longPieces.sort(cmpLenRev);                                                                                      // 1131\n    mixedPieces.sort(cmpLenRev);                                                                                     // 1132\n    for (i = 0; i < 12; i++) {                                                                                       // 1133\n        shortPieces[i] = regexEscape(shortPieces[i]);                                                                // 1134\n        longPieces[i] = regexEscape(longPieces[i]);                                                                  // 1135\n    }                                                                                                                // 1136\n    for (i = 0; i < 24; i++) {                                                                                       // 1137\n        mixedPieces[i] = regexEscape(mixedPieces[i]);                                                                // 1138\n    }                                                                                                                // 1139\n                                                                                                                     // 1140\n    this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');                                         // 1141\n    this._monthsShortRegex = this._monthsRegex;                                                                      // 1142\n    this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');                                    // 1143\n    this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');                              // 1144\n}                                                                                                                    // 1145\n                                                                                                                     // 1146\nfunction createDate (y, m, d, h, M, s, ms) {                                                                         // 1147\n    // can't just apply() to create a date:                                                                          // 1148\n    // https://stackoverflow.com/q/181348                                                                            // 1149\n    var date = new Date(y, m, d, h, M, s, ms);                                                                       // 1150\n                                                                                                                     // 1151\n    // the date constructor remaps years 0-99 to 1900-1999                                                           // 1152\n    if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {                                                         // 1153\n        date.setFullYear(y);                                                                                         // 1154\n    }                                                                                                                // 1155\n    return date;                                                                                                     // 1156\n}                                                                                                                    // 1157\n                                                                                                                     // 1158\nfunction createUTCDate (y) {                                                                                         // 1159\n    var date = new Date(Date.UTC.apply(null, arguments));                                                            // 1160\n                                                                                                                     // 1161\n    // the Date.UTC function remaps years 0-99 to 1900-1999                                                          // 1162\n    if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {                                                      // 1163\n        date.setUTCFullYear(y);                                                                                      // 1164\n    }                                                                                                                // 1165\n    return date;                                                                                                     // 1166\n}                                                                                                                    // 1167\n                                                                                                                     // 1168\n// start-of-first-week - start-of-year                                                                               // 1169\nfunction firstWeekOffset(year, dow, doy) {                                                                           // 1170\n    var // first-week day -- which january is always in the first week (4 for iso, 1 for other)                      // 1171\n        fwd = 7 + dow - doy,                                                                                         // 1172\n        // first-week day local weekday -- which local weekday is fwd                                                // 1173\n        fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;                                             // 1174\n                                                                                                                     // 1175\n    return -fwdlw + fwd - 1;                                                                                         // 1176\n}                                                                                                                    // 1177\n                                                                                                                     // 1178\n// https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday          // 1179\nfunction dayOfYearFromWeeks(year, week, weekday, dow, doy) {                                                         // 1180\n    var localWeekday = (7 + weekday - dow) % 7,                                                                      // 1181\n        weekOffset = firstWeekOffset(year, dow, doy),                                                                // 1182\n        dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,                                                  // 1183\n        resYear, resDayOfYear;                                                                                       // 1184\n                                                                                                                     // 1185\n    if (dayOfYear <= 0) {                                                                                            // 1186\n        resYear = year - 1;                                                                                          // 1187\n        resDayOfYear = daysInYear(resYear) + dayOfYear;                                                              // 1188\n    } else if (dayOfYear > daysInYear(year)) {                                                                       // 1189\n        resYear = year + 1;                                                                                          // 1190\n        resDayOfYear = dayOfYear - daysInYear(year);                                                                 // 1191\n    } else {                                                                                                         // 1192\n        resYear = year;                                                                                              // 1193\n        resDayOfYear = dayOfYear;                                                                                    // 1194\n    }                                                                                                                // 1195\n                                                                                                                     // 1196\n    return {                                                                                                         // 1197\n        year: resYear,                                                                                               // 1198\n        dayOfYear: resDayOfYear                                                                                      // 1199\n    };                                                                                                               // 1200\n}                                                                                                                    // 1201\n                                                                                                                     // 1202\nfunction weekOfYear(mom, dow, doy) {                                                                                 // 1203\n    var weekOffset = firstWeekOffset(mom.year(), dow, doy),                                                          // 1204\n        week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,                                               // 1205\n        resWeek, resYear;                                                                                            // 1206\n                                                                                                                     // 1207\n    if (week < 1) {                                                                                                  // 1208\n        resYear = mom.year() - 1;                                                                                    // 1209\n        resWeek = week + weeksInYear(resYear, dow, doy);                                                             // 1210\n    } else if (week > weeksInYear(mom.year(), dow, doy)) {                                                           // 1211\n        resWeek = week - weeksInYear(mom.year(), dow, doy);                                                          // 1212\n        resYear = mom.year() + 1;                                                                                    // 1213\n    } else {                                                                                                         // 1214\n        resYear = mom.year();                                                                                        // 1215\n        resWeek = week;                                                                                              // 1216\n    }                                                                                                                // 1217\n                                                                                                                     // 1218\n    return {                                                                                                         // 1219\n        week: resWeek,                                                                                               // 1220\n        year: resYear                                                                                                // 1221\n    };                                                                                                               // 1222\n}                                                                                                                    // 1223\n                                                                                                                     // 1224\nfunction weeksInYear(year, dow, doy) {                                                                               // 1225\n    var weekOffset = firstWeekOffset(year, dow, doy),                                                                // 1226\n        weekOffsetNext = firstWeekOffset(year + 1, dow, doy);                                                        // 1227\n    return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;                                                     // 1228\n}                                                                                                                    // 1229\n                                                                                                                     // 1230\n// FORMATTING                                                                                                        // 1231\n                                                                                                                     // 1232\naddFormatToken('w', ['ww', 2], 'wo', 'week');                                                                        // 1233\naddFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');                                                                     // 1234\n                                                                                                                     // 1235\n// ALIASES                                                                                                           // 1236\n                                                                                                                     // 1237\naddUnitAlias('week', 'w');                                                                                           // 1238\naddUnitAlias('isoWeek', 'W');                                                                                        // 1239\n                                                                                                                     // 1240\n// PRIORITIES                                                                                                        // 1241\n                                                                                                                     // 1242\naddUnitPriority('week', 5);                                                                                          // 1243\naddUnitPriority('isoWeek', 5);                                                                                       // 1244\n                                                                                                                     // 1245\n// PARSING                                                                                                           // 1246\n                                                                                                                     // 1247\naddRegexToken('w',  match1to2);                                                                                      // 1248\naddRegexToken('ww', match1to2, match2);                                                                              // 1249\naddRegexToken('W',  match1to2);                                                                                      // 1250\naddRegexToken('WW', match1to2, match2);                                                                              // 1251\n                                                                                                                     // 1252\naddWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {                                    // 1253\n    week[token.substr(0, 1)] = toInt(input);                                                                         // 1254\n});                                                                                                                  // 1255\n                                                                                                                     // 1256\n// HELPERS                                                                                                           // 1257\n                                                                                                                     // 1258\n// LOCALES                                                                                                           // 1259\n                                                                                                                     // 1260\nfunction localeWeek (mom) {                                                                                          // 1261\n    return weekOfYear(mom, this._week.dow, this._week.doy).week;                                                     // 1262\n}                                                                                                                    // 1263\n                                                                                                                     // 1264\nvar defaultLocaleWeek = {                                                                                            // 1265\n    dow : 0, // Sunday is the first day of the week.                                                                 // 1266\n    doy : 6  // The week that contains Jan 1st is the first week of the year.                                        // 1267\n};                                                                                                                   // 1268\n                                                                                                                     // 1269\nfunction localeFirstDayOfWeek () {                                                                                   // 1270\n    return this._week.dow;                                                                                           // 1271\n}                                                                                                                    // 1272\n                                                                                                                     // 1273\nfunction localeFirstDayOfYear () {                                                                                   // 1274\n    return this._week.doy;                                                                                           // 1275\n}                                                                                                                    // 1276\n                                                                                                                     // 1277\n// MOMENTS                                                                                                           // 1278\n                                                                                                                     // 1279\nfunction getSetWeek (input) {                                                                                        // 1280\n    var week = this.localeData().week(this);                                                                         // 1281\n    return input == null ? week : this.add((input - week) * 7, 'd');                                                 // 1282\n}                                                                                                                    // 1283\n                                                                                                                     // 1284\nfunction getSetISOWeek (input) {                                                                                     // 1285\n    var week = weekOfYear(this, 1, 4).week;                                                                          // 1286\n    return input == null ? week : this.add((input - week) * 7, 'd');                                                 // 1287\n}                                                                                                                    // 1288\n                                                                                                                     // 1289\n// FORMATTING                                                                                                        // 1290\n                                                                                                                     // 1291\naddFormatToken('d', 0, 'do', 'day');                                                                                 // 1292\n                                                                                                                     // 1293\naddFormatToken('dd', 0, 0, function (format) {                                                                       // 1294\n    return this.localeData().weekdaysMin(this, format);                                                              // 1295\n});                                                                                                                  // 1296\n                                                                                                                     // 1297\naddFormatToken('ddd', 0, 0, function (format) {                                                                      // 1298\n    return this.localeData().weekdaysShort(this, format);                                                            // 1299\n});                                                                                                                  // 1300\n                                                                                                                     // 1301\naddFormatToken('dddd', 0, 0, function (format) {                                                                     // 1302\n    return this.localeData().weekdays(this, format);                                                                 // 1303\n});                                                                                                                  // 1304\n                                                                                                                     // 1305\naddFormatToken('e', 0, 0, 'weekday');                                                                                // 1306\naddFormatToken('E', 0, 0, 'isoWeekday');                                                                             // 1307\n                                                                                                                     // 1308\n// ALIASES                                                                                                           // 1309\n                                                                                                                     // 1310\naddUnitAlias('day', 'd');                                                                                            // 1311\naddUnitAlias('weekday', 'e');                                                                                        // 1312\naddUnitAlias('isoWeekday', 'E');                                                                                     // 1313\n                                                                                                                     // 1314\n// PRIORITY                                                                                                          // 1315\naddUnitPriority('day', 11);                                                                                          // 1316\naddUnitPriority('weekday', 11);                                                                                      // 1317\naddUnitPriority('isoWeekday', 11);                                                                                   // 1318\n                                                                                                                     // 1319\n// PARSING                                                                                                           // 1320\n                                                                                                                     // 1321\naddRegexToken('d',    match1to2);                                                                                    // 1322\naddRegexToken('e',    match1to2);                                                                                    // 1323\naddRegexToken('E',    match1to2);                                                                                    // 1324\naddRegexToken('dd',   function (isStrict, locale) {                                                                  // 1325\n    return locale.weekdaysMinRegex(isStrict);                                                                        // 1326\n});                                                                                                                  // 1327\naddRegexToken('ddd',   function (isStrict, locale) {                                                                 // 1328\n    return locale.weekdaysShortRegex(isStrict);                                                                      // 1329\n});                                                                                                                  // 1330\naddRegexToken('dddd',   function (isStrict, locale) {                                                                // 1331\n    return locale.weekdaysRegex(isStrict);                                                                           // 1332\n});                                                                                                                  // 1333\n                                                                                                                     // 1334\naddWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {                                     // 1335\n    var weekday = config._locale.weekdaysParse(input, token, config._strict);                                        // 1336\n    // if we didn't get a weekday name, mark the date as invalid                                                     // 1337\n    if (weekday != null) {                                                                                           // 1338\n        week.d = weekday;                                                                                            // 1339\n    } else {                                                                                                         // 1340\n        getParsingFlags(config).invalidWeekday = input;                                                              // 1341\n    }                                                                                                                // 1342\n});                                                                                                                  // 1343\n                                                                                                                     // 1344\naddWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {                                           // 1345\n    week[token] = toInt(input);                                                                                      // 1346\n});                                                                                                                  // 1347\n                                                                                                                     // 1348\n// HELPERS                                                                                                           // 1349\n                                                                                                                     // 1350\nfunction parseWeekday(input, locale) {                                                                               // 1351\n    if (typeof input !== 'string') {                                                                                 // 1352\n        return input;                                                                                                // 1353\n    }                                                                                                                // 1354\n                                                                                                                     // 1355\n    if (!isNaN(input)) {                                                                                             // 1356\n        return parseInt(input, 10);                                                                                  // 1357\n    }                                                                                                                // 1358\n                                                                                                                     // 1359\n    input = locale.weekdaysParse(input);                                                                             // 1360\n    if (typeof input === 'number') {                                                                                 // 1361\n        return input;                                                                                                // 1362\n    }                                                                                                                // 1363\n                                                                                                                     // 1364\n    return null;                                                                                                     // 1365\n}                                                                                                                    // 1366\n                                                                                                                     // 1367\nfunction parseIsoWeekday(input, locale) {                                                                            // 1368\n    if (typeof input === 'string') {                                                                                 // 1369\n        return locale.weekdaysParse(input) % 7 || 7;                                                                 // 1370\n    }                                                                                                                // 1371\n    return isNaN(input) ? null : input;                                                                              // 1372\n}                                                                                                                    // 1373\n                                                                                                                     // 1374\n// LOCALES                                                                                                           // 1375\n                                                                                                                     // 1376\nvar defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');                   // 1377\nfunction localeWeekdays (m, format) {                                                                                // 1378\n    if (!m) {                                                                                                        // 1379\n        return isArray(this._weekdays) ? this._weekdays :                                                            // 1380\n            this._weekdays['standalone'];                                                                            // 1381\n    }                                                                                                                // 1382\n    return isArray(this._weekdays) ? this._weekdays[m.day()] :                                                       // 1383\n        this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];                     // 1384\n}                                                                                                                    // 1385\n                                                                                                                     // 1386\nvar defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');                                           // 1387\nfunction localeWeekdaysShort (m) {                                                                                   // 1388\n    return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;                                                 // 1389\n}                                                                                                                    // 1390\n                                                                                                                     // 1391\nvar defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');                                                    // 1392\nfunction localeWeekdaysMin (m) {                                                                                     // 1393\n    return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;                                                     // 1394\n}                                                                                                                    // 1395\n                                                                                                                     // 1396\nfunction handleStrictParse$1(weekdayName, format, strict) {                                                          // 1397\n    var i, ii, mom, llc = weekdayName.toLocaleLowerCase();                                                           // 1398\n    if (!this._weekdaysParse) {                                                                                      // 1399\n        this._weekdaysParse = [];                                                                                    // 1400\n        this._shortWeekdaysParse = [];                                                                               // 1401\n        this._minWeekdaysParse = [];                                                                                 // 1402\n                                                                                                                     // 1403\n        for (i = 0; i < 7; ++i) {                                                                                    // 1404\n            mom = createUTC([2000, 1]).day(i);                                                                       // 1405\n            this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();                               // 1406\n            this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();                           // 1407\n            this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();                                     // 1408\n        }                                                                                                            // 1409\n    }                                                                                                                // 1410\n                                                                                                                     // 1411\n    if (strict) {                                                                                                    // 1412\n        if (format === 'dddd') {                                                                                     // 1413\n            ii = indexOf.call(this._weekdaysParse, llc);                                                             // 1414\n            return ii !== -1 ? ii : null;                                                                            // 1415\n        } else if (format === 'ddd') {                                                                               // 1416\n            ii = indexOf.call(this._shortWeekdaysParse, llc);                                                        // 1417\n            return ii !== -1 ? ii : null;                                                                            // 1418\n        } else {                                                                                                     // 1419\n            ii = indexOf.call(this._minWeekdaysParse, llc);                                                          // 1420\n            return ii !== -1 ? ii : null;                                                                            // 1421\n        }                                                                                                            // 1422\n    } else {                                                                                                         // 1423\n        if (format === 'dddd') {                                                                                     // 1424\n            ii = indexOf.call(this._weekdaysParse, llc);                                                             // 1425\n            if (ii !== -1) {                                                                                         // 1426\n                return ii;                                                                                           // 1427\n            }                                                                                                        // 1428\n            ii = indexOf.call(this._shortWeekdaysParse, llc);                                                        // 1429\n            if (ii !== -1) {                                                                                         // 1430\n                return ii;                                                                                           // 1431\n            }                                                                                                        // 1432\n            ii = indexOf.call(this._minWeekdaysParse, llc);                                                          // 1433\n            return ii !== -1 ? ii : null;                                                                            // 1434\n        } else if (format === 'ddd') {                                                                               // 1435\n            ii = indexOf.call(this._shortWeekdaysParse, llc);                                                        // 1436\n            if (ii !== -1) {                                                                                         // 1437\n                return ii;                                                                                           // 1438\n            }                                                                                                        // 1439\n            ii = indexOf.call(this._weekdaysParse, llc);                                                             // 1440\n            if (ii !== -1) {                                                                                         // 1441\n                return ii;                                                                                           // 1442\n            }                                                                                                        // 1443\n            ii = indexOf.call(this._minWeekdaysParse, llc);                                                          // 1444\n            return ii !== -1 ? ii : null;                                                                            // 1445\n        } else {                                                                                                     // 1446\n            ii = indexOf.call(this._minWeekdaysParse, llc);                                                          // 1447\n            if (ii !== -1) {                                                                                         // 1448\n                return ii;                                                                                           // 1449\n            }                                                                                                        // 1450\n            ii = indexOf.call(this._weekdaysParse, llc);                                                             // 1451\n            if (ii !== -1) {                                                                                         // 1452\n                return ii;                                                                                           // 1453\n            }                                                                                                        // 1454\n            ii = indexOf.call(this._shortWeekdaysParse, llc);                                                        // 1455\n            return ii !== -1 ? ii : null;                                                                            // 1456\n        }                                                                                                            // 1457\n    }                                                                                                                // 1458\n}                                                                                                                    // 1459\n                                                                                                                     // 1460\nfunction localeWeekdaysParse (weekdayName, format, strict) {                                                         // 1461\n    var i, mom, regex;                                                                                               // 1462\n                                                                                                                     // 1463\n    if (this._weekdaysParseExact) {                                                                                  // 1464\n        return handleStrictParse$1.call(this, weekdayName, format, strict);                                          // 1465\n    }                                                                                                                // 1466\n                                                                                                                     // 1467\n    if (!this._weekdaysParse) {                                                                                      // 1468\n        this._weekdaysParse = [];                                                                                    // 1469\n        this._minWeekdaysParse = [];                                                                                 // 1470\n        this._shortWeekdaysParse = [];                                                                               // 1471\n        this._fullWeekdaysParse = [];                                                                                // 1472\n    }                                                                                                                // 1473\n                                                                                                                     // 1474\n    for (i = 0; i < 7; i++) {                                                                                        // 1475\n        // make the regex if we don't have it already                                                                // 1476\n                                                                                                                     // 1477\n        mom = createUTC([2000, 1]).day(i);                                                                           // 1478\n        if (strict && !this._fullWeekdaysParse[i]) {                                                                 // 1479\n            this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');    // 1480\n            this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');\n            this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');  // 1482\n        }                                                                                                            // 1483\n        if (!this._weekdaysParse[i]) {                                                                               // 1484\n            regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');\n            this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');                                        // 1486\n        }                                                                                                            // 1487\n        // test the regex                                                                                            // 1488\n        if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {                           // 1489\n            return i;                                                                                                // 1490\n        } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {                    // 1491\n            return i;                                                                                                // 1492\n        } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {                       // 1493\n            return i;                                                                                                // 1494\n        } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {                                            // 1495\n            return i;                                                                                                // 1496\n        }                                                                                                            // 1497\n    }                                                                                                                // 1498\n}                                                                                                                    // 1499\n                                                                                                                     // 1500\n// MOMENTS                                                                                                           // 1501\n                                                                                                                     // 1502\nfunction getSetDayOfWeek (input) {                                                                                   // 1503\n    if (!this.isValid()) {                                                                                           // 1504\n        return input != null ? this : NaN;                                                                           // 1505\n    }                                                                                                                // 1506\n    var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();                                                  // 1507\n    if (input != null) {                                                                                             // 1508\n        input = parseWeekday(input, this.localeData());                                                              // 1509\n        return this.add(input - day, 'd');                                                                           // 1510\n    } else {                                                                                                         // 1511\n        return day;                                                                                                  // 1512\n    }                                                                                                                // 1513\n}                                                                                                                    // 1514\n                                                                                                                     // 1515\nfunction getSetLocaleDayOfWeek (input) {                                                                             // 1516\n    if (!this.isValid()) {                                                                                           // 1517\n        return input != null ? this : NaN;                                                                           // 1518\n    }                                                                                                                // 1519\n    var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;                                                // 1520\n    return input == null ? weekday : this.add(input - weekday, 'd');                                                 // 1521\n}                                                                                                                    // 1522\n                                                                                                                     // 1523\nfunction getSetISODayOfWeek (input) {                                                                                // 1524\n    if (!this.isValid()) {                                                                                           // 1525\n        return input != null ? this : NaN;                                                                           // 1526\n    }                                                                                                                // 1527\n                                                                                                                     // 1528\n    // behaves the same as moment#day except                                                                         // 1529\n    // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)                                                // 1530\n    // as a setter, sunday should belong to the previous week.                                                       // 1531\n                                                                                                                     // 1532\n    if (input != null) {                                                                                             // 1533\n        var weekday = parseIsoWeekday(input, this.localeData());                                                     // 1534\n        return this.day(this.day() % 7 ? weekday : weekday - 7);                                                     // 1535\n    } else {                                                                                                         // 1536\n        return this.day() || 7;                                                                                      // 1537\n    }                                                                                                                // 1538\n}                                                                                                                    // 1539\n                                                                                                                     // 1540\nvar defaultWeekdaysRegex = matchWord;                                                                                // 1541\nfunction weekdaysRegex (isStrict) {                                                                                  // 1542\n    if (this._weekdaysParseExact) {                                                                                  // 1543\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1544\n            computeWeekdaysParse.call(this);                                                                         // 1545\n        }                                                                                                            // 1546\n        if (isStrict) {                                                                                              // 1547\n            return this._weekdaysStrictRegex;                                                                        // 1548\n        } else {                                                                                                     // 1549\n            return this._weekdaysRegex;                                                                              // 1550\n        }                                                                                                            // 1551\n    } else {                                                                                                         // 1552\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1553\n            this._weekdaysRegex = defaultWeekdaysRegex;                                                              // 1554\n        }                                                                                                            // 1555\n        return this._weekdaysStrictRegex && isStrict ?                                                               // 1556\n            this._weekdaysStrictRegex : this._weekdaysRegex;                                                         // 1557\n    }                                                                                                                // 1558\n}                                                                                                                    // 1559\n                                                                                                                     // 1560\nvar defaultWeekdaysShortRegex = matchWord;                                                                           // 1561\nfunction weekdaysShortRegex (isStrict) {                                                                             // 1562\n    if (this._weekdaysParseExact) {                                                                                  // 1563\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1564\n            computeWeekdaysParse.call(this);                                                                         // 1565\n        }                                                                                                            // 1566\n        if (isStrict) {                                                                                              // 1567\n            return this._weekdaysShortStrictRegex;                                                                   // 1568\n        } else {                                                                                                     // 1569\n            return this._weekdaysShortRegex;                                                                         // 1570\n        }                                                                                                            // 1571\n    } else {                                                                                                         // 1572\n        if (!hasOwnProp(this, '_weekdaysShortRegex')) {                                                              // 1573\n            this._weekdaysShortRegex = defaultWeekdaysShortRegex;                                                    // 1574\n        }                                                                                                            // 1575\n        return this._weekdaysShortStrictRegex && isStrict ?                                                          // 1576\n            this._weekdaysShortStrictRegex : this._weekdaysShortRegex;                                               // 1577\n    }                                                                                                                // 1578\n}                                                                                                                    // 1579\n                                                                                                                     // 1580\nvar defaultWeekdaysMinRegex = matchWord;                                                                             // 1581\nfunction weekdaysMinRegex (isStrict) {                                                                               // 1582\n    if (this._weekdaysParseExact) {                                                                                  // 1583\n        if (!hasOwnProp(this, '_weekdaysRegex')) {                                                                   // 1584\n            computeWeekdaysParse.call(this);                                                                         // 1585\n        }                                                                                                            // 1586\n        if (isStrict) {                                                                                              // 1587\n            return this._weekdaysMinStrictRegex;                                                                     // 1588\n        } else {                                                                                                     // 1589\n            return this._weekdaysMinRegex;                                                                           // 1590\n        }                                                                                                            // 1591\n    } else {                                                                                                         // 1592\n        if (!hasOwnProp(this, '_weekdaysMinRegex')) {                                                                // 1593\n            this._weekdaysMinRegex = defaultWeekdaysMinRegex;                                                        // 1594\n        }                                                                                                            // 1595\n        return this._weekdaysMinStrictRegex && isStrict ?                                                            // 1596\n            this._weekdaysMinStrictRegex : this._weekdaysMinRegex;                                                   // 1597\n    }                                                                                                                // 1598\n}                                                                                                                    // 1599\n                                                                                                                     // 1600\n                                                                                                                     // 1601\nfunction computeWeekdaysParse () {                                                                                   // 1602\n    function cmpLenRev(a, b) {                                                                                       // 1603\n        return b.length - a.length;                                                                                  // 1604\n    }                                                                                                                // 1605\n                                                                                                                     // 1606\n    var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],                                         // 1607\n        i, mom, minp, shortp, longp;                                                                                 // 1608\n    for (i = 0; i < 7; i++) {                                                                                        // 1609\n        // make the regex if we don't have it already                                                                // 1610\n        mom = createUTC([2000, 1]).day(i);                                                                           // 1611\n        minp = this.weekdaysMin(mom, '');                                                                            // 1612\n        shortp = this.weekdaysShort(mom, '');                                                                        // 1613\n        longp = this.weekdays(mom, '');                                                                              // 1614\n        minPieces.push(minp);                                                                                        // 1615\n        shortPieces.push(shortp);                                                                                    // 1616\n        longPieces.push(longp);                                                                                      // 1617\n        mixedPieces.push(minp);                                                                                      // 1618\n        mixedPieces.push(shortp);                                                                                    // 1619\n        mixedPieces.push(longp);                                                                                     // 1620\n    }                                                                                                                // 1621\n    // Sorting makes sure if one weekday (or abbr) is a prefix of another it                                         // 1622\n    // will match the longer piece.                                                                                  // 1623\n    minPieces.sort(cmpLenRev);                                                                                       // 1624\n    shortPieces.sort(cmpLenRev);                                                                                     // 1625\n    longPieces.sort(cmpLenRev);                                                                                      // 1626\n    mixedPieces.sort(cmpLenRev);                                                                                     // 1627\n    for (i = 0; i < 7; i++) {                                                                                        // 1628\n        shortPieces[i] = regexEscape(shortPieces[i]);                                                                // 1629\n        longPieces[i] = regexEscape(longPieces[i]);                                                                  // 1630\n        mixedPieces[i] = regexEscape(mixedPieces[i]);                                                                // 1631\n    }                                                                                                                // 1632\n                                                                                                                     // 1633\n    this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');                                       // 1634\n    this._weekdaysShortRegex = this._weekdaysRegex;                                                                  // 1635\n    this._weekdaysMinRegex = this._weekdaysRegex;                                                                    // 1636\n                                                                                                                     // 1637\n    this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');                                  // 1638\n    this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');                            // 1639\n    this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');                                // 1640\n}                                                                                                                    // 1641\n                                                                                                                     // 1642\n// FORMATTING                                                                                                        // 1643\n                                                                                                                     // 1644\nfunction hFormat() {                                                                                                 // 1645\n    return this.hours() % 12 || 12;                                                                                  // 1646\n}                                                                                                                    // 1647\n                                                                                                                     // 1648\nfunction kFormat() {                                                                                                 // 1649\n    return this.hours() || 24;                                                                                       // 1650\n}                                                                                                                    // 1651\n                                                                                                                     // 1652\naddFormatToken('H', ['HH', 2], 0, 'hour');                                                                           // 1653\naddFormatToken('h', ['hh', 2], 0, hFormat);                                                                          // 1654\naddFormatToken('k', ['kk', 2], 0, kFormat);                                                                          // 1655\n                                                                                                                     // 1656\naddFormatToken('hmm', 0, 0, function () {                                                                            // 1657\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);                                                   // 1658\n});                                                                                                                  // 1659\n                                                                                                                     // 1660\naddFormatToken('hmmss', 0, 0, function () {                                                                          // 1661\n    return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +                                                  // 1662\n        zeroFill(this.seconds(), 2);                                                                                 // 1663\n});                                                                                                                  // 1664\n                                                                                                                     // 1665\naddFormatToken('Hmm', 0, 0, function () {                                                                            // 1666\n    return '' + this.hours() + zeroFill(this.minutes(), 2);                                                          // 1667\n});                                                                                                                  // 1668\n                                                                                                                     // 1669\naddFormatToken('Hmmss', 0, 0, function () {                                                                          // 1670\n    return '' + this.hours() + zeroFill(this.minutes(), 2) +                                                         // 1671\n        zeroFill(this.seconds(), 2);                                                                                 // 1672\n});                                                                                                                  // 1673\n                                                                                                                     // 1674\nfunction meridiem (token, lowercase) {                                                                               // 1675\n    addFormatToken(token, 0, 0, function () {                                                                        // 1676\n        return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);                                  // 1677\n    });                                                                                                              // 1678\n}                                                                                                                    // 1679\n                                                                                                                     // 1680\nmeridiem('a', true);                                                                                                 // 1681\nmeridiem('A', false);                                                                                                // 1682\n                                                                                                                     // 1683\n// ALIASES                                                                                                           // 1684\n                                                                                                                     // 1685\naddUnitAlias('hour', 'h');                                                                                           // 1686\n                                                                                                                     // 1687\n// PRIORITY                                                                                                          // 1688\naddUnitPriority('hour', 13);                                                                                         // 1689\n                                                                                                                     // 1690\n// PARSING                                                                                                           // 1691\n                                                                                                                     // 1692\nfunction matchMeridiem (isStrict, locale) {                                                                          // 1693\n    return locale._meridiemParse;                                                                                    // 1694\n}                                                                                                                    // 1695\n                                                                                                                     // 1696\naddRegexToken('a',  matchMeridiem);                                                                                  // 1697\naddRegexToken('A',  matchMeridiem);                                                                                  // 1698\naddRegexToken('H',  match1to2);                                                                                      // 1699\naddRegexToken('h',  match1to2);                                                                                      // 1700\naddRegexToken('k',  match1to2);                                                                                      // 1701\naddRegexToken('HH', match1to2, match2);                                                                              // 1702\naddRegexToken('hh', match1to2, match2);                                                                              // 1703\naddRegexToken('kk', match1to2, match2);                                                                              // 1704\n                                                                                                                     // 1705\naddRegexToken('hmm', match3to4);                                                                                     // 1706\naddRegexToken('hmmss', match5to6);                                                                                   // 1707\naddRegexToken('Hmm', match3to4);                                                                                     // 1708\naddRegexToken('Hmmss', match5to6);                                                                                   // 1709\n                                                                                                                     // 1710\naddParseToken(['H', 'HH'], HOUR);                                                                                    // 1711\naddParseToken(['k', 'kk'], function (input, array, config) {                                                         // 1712\n    var kInput = toInt(input);                                                                                       // 1713\n    array[HOUR] = kInput === 24 ? 0 : kInput;                                                                        // 1714\n});                                                                                                                  // 1715\naddParseToken(['a', 'A'], function (input, array, config) {                                                          // 1716\n    config._isPm = config._locale.isPM(input);                                                                       // 1717\n    config._meridiem = input;                                                                                        // 1718\n});                                                                                                                  // 1719\naddParseToken(['h', 'hh'], function (input, array, config) {                                                         // 1720\n    array[HOUR] = toInt(input);                                                                                      // 1721\n    getParsingFlags(config).bigHour = true;                                                                          // 1722\n});                                                                                                                  // 1723\naddParseToken('hmm', function (input, array, config) {                                                               // 1724\n    var pos = input.length - 2;                                                                                      // 1725\n    array[HOUR] = toInt(input.substr(0, pos));                                                                       // 1726\n    array[MINUTE] = toInt(input.substr(pos));                                                                        // 1727\n    getParsingFlags(config).bigHour = true;                                                                          // 1728\n});                                                                                                                  // 1729\naddParseToken('hmmss', function (input, array, config) {                                                             // 1730\n    var pos1 = input.length - 4;                                                                                     // 1731\n    var pos2 = input.length - 2;                                                                                     // 1732\n    array[HOUR] = toInt(input.substr(0, pos1));                                                                      // 1733\n    array[MINUTE] = toInt(input.substr(pos1, 2));                                                                    // 1734\n    array[SECOND] = toInt(input.substr(pos2));                                                                       // 1735\n    getParsingFlags(config).bigHour = true;                                                                          // 1736\n});                                                                                                                  // 1737\naddParseToken('Hmm', function (input, array, config) {                                                               // 1738\n    var pos = input.length - 2;                                                                                      // 1739\n    array[HOUR] = toInt(input.substr(0, pos));                                                                       // 1740\n    array[MINUTE] = toInt(input.substr(pos));                                                                        // 1741\n});                                                                                                                  // 1742\naddParseToken('Hmmss', function (input, array, config) {                                                             // 1743\n    var pos1 = input.length - 4;                                                                                     // 1744\n    var pos2 = input.length - 2;                                                                                     // 1745\n    array[HOUR] = toInt(input.substr(0, pos1));                                                                      // 1746\n    array[MINUTE] = toInt(input.substr(pos1, 2));                                                                    // 1747\n    array[SECOND] = toInt(input.substr(pos2));                                                                       // 1748\n});                                                                                                                  // 1749\n                                                                                                                     // 1750\n// LOCALES                                                                                                           // 1751\n                                                                                                                     // 1752\nfunction localeIsPM (input) {                                                                                        // 1753\n    // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays                               // 1754\n    // Using charAt should be more compatible.                                                                       // 1755\n    return ((input + '').toLowerCase().charAt(0) === 'p');                                                           // 1756\n}                                                                                                                    // 1757\n                                                                                                                     // 1758\nvar defaultLocaleMeridiemParse = /[ap]\\.?m?\\.?/i;                                                                    // 1759\nfunction localeMeridiem (hours, minutes, isLower) {                                                                  // 1760\n    if (hours > 11) {                                                                                                // 1761\n        return isLower ? 'pm' : 'PM';                                                                                // 1762\n    } else {                                                                                                         // 1763\n        return isLower ? 'am' : 'AM';                                                                                // 1764\n    }                                                                                                                // 1765\n}                                                                                                                    // 1766\n                                                                                                                     // 1767\n                                                                                                                     // 1768\n// MOMENTS                                                                                                           // 1769\n                                                                                                                     // 1770\n// Setting the hour should keep the time, because the user explicitly                                                // 1771\n// specified which hour he wants. So trying to maintain the same hour (in                                            // 1772\n// a new timezone) makes sense. Adding/subtracting hours does not follow                                             // 1773\n// this rule.                                                                                                        // 1774\nvar getSetHour = makeGetSet('Hours', true);                                                                          // 1775\n                                                                                                                     // 1776\n// months                                                                                                            // 1777\n// week                                                                                                              // 1778\n// weekdays                                                                                                          // 1779\n// meridiem                                                                                                          // 1780\nvar baseConfig = {                                                                                                   // 1781\n    calendar: defaultCalendar,                                                                                       // 1782\n    longDateFormat: defaultLongDateFormat,                                                                           // 1783\n    invalidDate: defaultInvalidDate,                                                                                 // 1784\n    ordinal: defaultOrdinal,                                                                                         // 1785\n    dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,                                                           // 1786\n    relativeTime: defaultRelativeTime,                                                                               // 1787\n                                                                                                                     // 1788\n    months: defaultLocaleMonths,                                                                                     // 1789\n    monthsShort: defaultLocaleMonthsShort,                                                                           // 1790\n                                                                                                                     // 1791\n    week: defaultLocaleWeek,                                                                                         // 1792\n                                                                                                                     // 1793\n    weekdays: defaultLocaleWeekdays,                                                                                 // 1794\n    weekdaysMin: defaultLocaleWeekdaysMin,                                                                           // 1795\n    weekdaysShort: defaultLocaleWeekdaysShort,                                                                       // 1796\n                                                                                                                     // 1797\n    meridiemParse: defaultLocaleMeridiemParse                                                                        // 1798\n};                                                                                                                   // 1799\n                                                                                                                     // 1800\n// internal storage for locale config files                                                                          // 1801\nvar locales = {};                                                                                                    // 1802\nvar localeFamilies = {};                                                                                             // 1803\nvar globalLocale;                                                                                                    // 1804\n                                                                                                                     // 1805\nfunction normalizeLocale(key) {                                                                                      // 1806\n    return key ? key.toLowerCase().replace('_', '-') : key;                                                          // 1807\n}                                                                                                                    // 1808\n                                                                                                                     // 1809\n// pick the locale from the array                                                                                    // 1810\n// try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each                         // 1811\n// substring from most specific to least, but move to the next array item if it's a more specific variant than the current root\nfunction chooseLocale(names) {                                                                                       // 1813\n    var i = 0, j, next, locale, split;                                                                               // 1814\n                                                                                                                     // 1815\n    while (i < names.length) {                                                                                       // 1816\n        split = normalizeLocale(names[i]).split('-');                                                                // 1817\n        j = split.length;                                                                                            // 1818\n        next = normalizeLocale(names[i + 1]);                                                                        // 1819\n        next = next ? next.split('-') : null;                                                                        // 1820\n        while (j > 0) {                                                                                              // 1821\n            locale = loadLocale(split.slice(0, j).join('-'));                                                        // 1822\n            if (locale) {                                                                                            // 1823\n                return locale;                                                                                       // 1824\n            }                                                                                                        // 1825\n            if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {                             // 1826\n                //the next array item is better than a shallower substring of this one                               // 1827\n                break;                                                                                               // 1828\n            }                                                                                                        // 1829\n            j--;                                                                                                     // 1830\n        }                                                                                                            // 1831\n        i++;                                                                                                         // 1832\n    }                                                                                                                // 1833\n    return null;                                                                                                     // 1834\n}                                                                                                                    // 1835\n                                                                                                                     // 1836\nfunction loadLocale(name) {                                                                                          // 1837\n    var oldLocale = null;                                                                                            // 1838\n    // TODO: Find a better way to register and load all the locales in Node                                          // 1839\n    if (!locales[name] && (typeof module !== 'undefined') &&                                                         // 1840\n            module && module.exports) {                                                                              // 1841\n        try {                                                                                                        // 1842\n            oldLocale = globalLocale._abbr;                                                                          // 1843\n            var aliasedRequire = require;                                                                            // 1844\n            aliasedRequire('./locale/' + name);                                                                      // 1845\n            getSetGlobalLocale(oldLocale);                                                                           // 1846\n        } catch (e) {}                                                                                               // 1847\n    }                                                                                                                // 1848\n    return locales[name];                                                                                            // 1849\n}                                                                                                                    // 1850\n                                                                                                                     // 1851\n// This function will load locale and then set the global locale.  If                                                // 1852\n// no arguments are passed in, it will simply return the current global                                              // 1853\n// locale key.                                                                                                       // 1854\nfunction getSetGlobalLocale (key, values) {                                                                          // 1855\n    var data;                                                                                                        // 1856\n    if (key) {                                                                                                       // 1857\n        if (isUndefined(values)) {                                                                                   // 1858\n            data = getLocale(key);                                                                                   // 1859\n        }                                                                                                            // 1860\n        else {                                                                                                       // 1861\n            data = defineLocale(key, values);                                                                        // 1862\n        }                                                                                                            // 1863\n                                                                                                                     // 1864\n        if (data) {                                                                                                  // 1865\n            // moment.duration._locale = moment._locale = data;                                                      // 1866\n            globalLocale = data;                                                                                     // 1867\n        }                                                                                                            // 1868\n    }                                                                                                                // 1869\n                                                                                                                     // 1870\n    return globalLocale._abbr;                                                                                       // 1871\n}                                                                                                                    // 1872\n                                                                                                                     // 1873\nfunction defineLocale (name, config) {                                                                               // 1874\n    if (config !== null) {                                                                                           // 1875\n        var parentConfig = baseConfig;                                                                               // 1876\n        config.abbr = name;                                                                                          // 1877\n        if (locales[name] != null) {                                                                                 // 1878\n            deprecateSimple('defineLocaleOverride',                                                                  // 1879\n                    'use moment.updateLocale(localeName, config) to change ' +                                       // 1880\n                    'an existing locale. moment.defineLocale(localeName, ' +                                         // 1881\n                    'config) should only be used for creating a new locale ' +                                       // 1882\n                    'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');                      // 1883\n            parentConfig = locales[name]._config;                                                                    // 1884\n        } else if (config.parentLocale != null) {                                                                    // 1885\n            if (locales[config.parentLocale] != null) {                                                              // 1886\n                parentConfig = locales[config.parentLocale]._config;                                                 // 1887\n            } else {                                                                                                 // 1888\n                if (!localeFamilies[config.parentLocale]) {                                                          // 1889\n                    localeFamilies[config.parentLocale] = [];                                                        // 1890\n                }                                                                                                    // 1891\n                localeFamilies[config.parentLocale].push({                                                           // 1892\n                    name: name,                                                                                      // 1893\n                    config: config                                                                                   // 1894\n                });                                                                                                  // 1895\n                return null;                                                                                         // 1896\n            }                                                                                                        // 1897\n        }                                                                                                            // 1898\n        locales[name] = new Locale(mergeConfigs(parentConfig, config));                                              // 1899\n                                                                                                                     // 1900\n        if (localeFamilies[name]) {                                                                                  // 1901\n            localeFamilies[name].forEach(function (x) {                                                              // 1902\n                defineLocale(x.name, x.config);                                                                      // 1903\n            });                                                                                                      // 1904\n        }                                                                                                            // 1905\n                                                                                                                     // 1906\n        // backwards compat for now: also set the locale                                                             // 1907\n        // make sure we set the locale AFTER all child locales have been                                             // 1908\n        // created, so we won't end up with the child locale set.                                                    // 1909\n        getSetGlobalLocale(name);                                                                                    // 1910\n                                                                                                                     // 1911\n                                                                                                                     // 1912\n        return locales[name];                                                                                        // 1913\n    } else {                                                                                                         // 1914\n        // useful for testing                                                                                        // 1915\n        delete locales[name];                                                                                        // 1916\n        return null;                                                                                                 // 1917\n    }                                                                                                                // 1918\n}                                                                                                                    // 1919\n                                                                                                                     // 1920\nfunction updateLocale(name, config) {                                                                                // 1921\n    if (config != null) {                                                                                            // 1922\n        var locale, parentConfig = baseConfig;                                                                       // 1923\n        // MERGE                                                                                                     // 1924\n        if (locales[name] != null) {                                                                                 // 1925\n            parentConfig = locales[name]._config;                                                                    // 1926\n        }                                                                                                            // 1927\n        config = mergeConfigs(parentConfig, config);                                                                 // 1928\n        locale = new Locale(config);                                                                                 // 1929\n        locale.parentLocale = locales[name];                                                                         // 1930\n        locales[name] = locale;                                                                                      // 1931\n                                                                                                                     // 1932\n        // backwards compat for now: also set the locale                                                             // 1933\n        getSetGlobalLocale(name);                                                                                    // 1934\n    } else {                                                                                                         // 1935\n        // pass null for config to unupdate, useful for tests                                                        // 1936\n        if (locales[name] != null) {                                                                                 // 1937\n            if (locales[name].parentLocale != null) {                                                                // 1938\n                locales[name] = locales[name].parentLocale;                                                          // 1939\n            } else if (locales[name] != null) {                                                                      // 1940\n                delete locales[name];                                                                                // 1941\n            }                                                                                                        // 1942\n        }                                                                                                            // 1943\n    }                                                                                                                // 1944\n    return locales[name];                                                                                            // 1945\n}                                                                                                                    // 1946\n                                                                                                                     // 1947\n// returns locale data                                                                                               // 1948\nfunction getLocale (key) {                                                                                           // 1949\n    var locale;                                                                                                      // 1950\n                                                                                                                     // 1951\n    if (key && key._locale && key._locale._abbr) {                                                                   // 1952\n        key = key._locale._abbr;                                                                                     // 1953\n    }                                                                                                                // 1954\n                                                                                                                     // 1955\n    if (!key) {                                                                                                      // 1956\n        return globalLocale;                                                                                         // 1957\n    }                                                                                                                // 1958\n                                                                                                                     // 1959\n    if (!isArray(key)) {                                                                                             // 1960\n        //short-circuit everything else                                                                              // 1961\n        locale = loadLocale(key);                                                                                    // 1962\n        if (locale) {                                                                                                // 1963\n            return locale;                                                                                           // 1964\n        }                                                                                                            // 1965\n        key = [key];                                                                                                 // 1966\n    }                                                                                                                // 1967\n                                                                                                                     // 1968\n    return chooseLocale(key);                                                                                        // 1969\n}                                                                                                                    // 1970\n                                                                                                                     // 1971\nfunction listLocales() {                                                                                             // 1972\n    return keys(locales);                                                                                            // 1973\n}                                                                                                                    // 1974\n                                                                                                                     // 1975\nfunction checkOverflow (m) {                                                                                         // 1976\n    var overflow;                                                                                                    // 1977\n    var a = m._a;                                                                                                    // 1978\n                                                                                                                     // 1979\n    if (a && getParsingFlags(m).overflow === -2) {                                                                   // 1980\n        overflow =                                                                                                   // 1981\n            a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :                                                     // 1982\n            a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :                           // 1983\n            a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :\n            a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :                                                    // 1985\n            a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :                                                    // 1986\n            a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :                                               // 1987\n            -1;                                                                                                      // 1988\n                                                                                                                     // 1989\n        if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {                         // 1990\n            overflow = DATE;                                                                                         // 1991\n        }                                                                                                            // 1992\n        if (getParsingFlags(m)._overflowWeeks && overflow === -1) {                                                  // 1993\n            overflow = WEEK;                                                                                         // 1994\n        }                                                                                                            // 1995\n        if (getParsingFlags(m)._overflowWeekday && overflow === -1) {                                                // 1996\n            overflow = WEEKDAY;                                                                                      // 1997\n        }                                                                                                            // 1998\n                                                                                                                     // 1999\n        getParsingFlags(m).overflow = overflow;                                                                      // 2000\n    }                                                                                                                // 2001\n                                                                                                                     // 2002\n    return m;                                                                                                        // 2003\n}                                                                                                                    // 2004\n                                                                                                                     // 2005\n// Pick the first defined of two or three arguments.                                                                 // 2006\nfunction defaults(a, b, c) {                                                                                         // 2007\n    if (a != null) {                                                                                                 // 2008\n        return a;                                                                                                    // 2009\n    }                                                                                                                // 2010\n    if (b != null) {                                                                                                 // 2011\n        return b;                                                                                                    // 2012\n    }                                                                                                                // 2013\n    return c;                                                                                                        // 2014\n}                                                                                                                    // 2015\n                                                                                                                     // 2016\nfunction currentDateArray(config) {                                                                                  // 2017\n    // hooks is actually the exported moment object                                                                  // 2018\n    var nowValue = new Date(hooks.now());                                                                            // 2019\n    if (config._useUTC) {                                                                                            // 2020\n        return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];                           // 2021\n    }                                                                                                                // 2022\n    return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];                                        // 2023\n}                                                                                                                    // 2024\n                                                                                                                     // 2025\n// convert an array to a date.                                                                                       // 2026\n// the array should mirror the parameters below                                                                      // 2027\n// note: all values past the year are optional and will default to the lowest possible value.                        // 2028\n// [year, month, day , hour, minute, second, millisecond]                                                            // 2029\nfunction configFromArray (config) {                                                                                  // 2030\n    var i, date, input = [], currentDate, yearToUse;                                                                 // 2031\n                                                                                                                     // 2032\n    if (config._d) {                                                                                                 // 2033\n        return;                                                                                                      // 2034\n    }                                                                                                                // 2035\n                                                                                                                     // 2036\n    currentDate = currentDateArray(config);                                                                          // 2037\n                                                                                                                     // 2038\n    //compute day of the year from weeks and weekdays                                                                // 2039\n    if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {                                          // 2040\n        dayOfYearFromWeekInfo(config);                                                                               // 2041\n    }                                                                                                                // 2042\n                                                                                                                     // 2043\n    //if the day of the year is set, figure out what it is                                                           // 2044\n    if (config._dayOfYear != null) {                                                                                 // 2045\n        yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);                                                    // 2046\n                                                                                                                     // 2047\n        if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {                                  // 2048\n            getParsingFlags(config)._overflowDayOfYear = true;                                                       // 2049\n        }                                                                                                            // 2050\n                                                                                                                     // 2051\n        date = createUTCDate(yearToUse, 0, config._dayOfYear);                                                       // 2052\n        config._a[MONTH] = date.getUTCMonth();                                                                       // 2053\n        config._a[DATE] = date.getUTCDate();                                                                         // 2054\n    }                                                                                                                // 2055\n                                                                                                                     // 2056\n    // Default to current date.                                                                                      // 2057\n    // * if no year, month, day of month are given, default to today                                                 // 2058\n    // * if day of month is given, default month and year                                                            // 2059\n    // * if month is given, default only year                                                                        // 2060\n    // * if year is given, don't default anything                                                                    // 2061\n    for (i = 0; i < 3 && config._a[i] == null; ++i) {                                                                // 2062\n        config._a[i] = input[i] = currentDate[i];                                                                    // 2063\n    }                                                                                                                // 2064\n                                                                                                                     // 2065\n    // Zero out whatever was not defaulted, including time                                                           // 2066\n    for (; i < 7; i++) {                                                                                             // 2067\n        config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];                         // 2068\n    }                                                                                                                // 2069\n                                                                                                                     // 2070\n    // Check for 24:00:00.000                                                                                        // 2071\n    if (config._a[HOUR] === 24 &&                                                                                    // 2072\n            config._a[MINUTE] === 0 &&                                                                               // 2073\n            config._a[SECOND] === 0 &&                                                                               // 2074\n            config._a[MILLISECOND] === 0) {                                                                          // 2075\n        config._nextDay = true;                                                                                      // 2076\n        config._a[HOUR] = 0;                                                                                         // 2077\n    }                                                                                                                // 2078\n                                                                                                                     // 2079\n    config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);                                    // 2080\n    // Apply timezone offset from input. The actual utcOffset can be changed                                         // 2081\n    // with parseZone.                                                                                               // 2082\n    if (config._tzm != null) {                                                                                       // 2083\n        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);                                            // 2084\n    }                                                                                                                // 2085\n                                                                                                                     // 2086\n    if (config._nextDay) {                                                                                           // 2087\n        config._a[HOUR] = 24;                                                                                        // 2088\n    }                                                                                                                // 2089\n                                                                                                                     // 2090\n    // check for mismatching day of week                                                                             // 2091\n    if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== config._d.getDay()) {                     // 2092\n        getParsingFlags(config).weekdayMismatch = true;                                                              // 2093\n    }                                                                                                                // 2094\n}                                                                                                                    // 2095\n                                                                                                                     // 2096\nfunction dayOfYearFromWeekInfo(config) {                                                                             // 2097\n    var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;                                                 // 2098\n                                                                                                                     // 2099\n    w = config._w;                                                                                                   // 2100\n    if (w.GG != null || w.W != null || w.E != null) {                                                                // 2101\n        dow = 1;                                                                                                     // 2102\n        doy = 4;                                                                                                     // 2103\n                                                                                                                     // 2104\n        // TODO: We need to take the current isoWeekYear, but that depends on                                        // 2105\n        // how we interpret now (local, utc, fixed offset). So create                                                // 2106\n        // a now version of current config (take local/utc/offset flags, and                                         // 2107\n        // create now).                                                                                              // 2108\n        weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);                            // 2109\n        week = defaults(w.W, 1);                                                                                     // 2110\n        weekday = defaults(w.E, 1);                                                                                  // 2111\n        if (weekday < 1 || weekday > 7) {                                                                            // 2112\n            weekdayOverflow = true;                                                                                  // 2113\n        }                                                                                                            // 2114\n    } else {                                                                                                         // 2115\n        dow = config._locale._week.dow;                                                                              // 2116\n        doy = config._locale._week.doy;                                                                              // 2117\n                                                                                                                     // 2118\n        var curWeek = weekOfYear(createLocal(), dow, doy);                                                           // 2119\n                                                                                                                     // 2120\n        weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);                                                    // 2121\n                                                                                                                     // 2122\n        // Default to current week.                                                                                  // 2123\n        week = defaults(w.w, curWeek.week);                                                                          // 2124\n                                                                                                                     // 2125\n        if (w.d != null) {                                                                                           // 2126\n            // weekday -- low day numbers are considered next week                                                   // 2127\n            weekday = w.d;                                                                                           // 2128\n            if (weekday < 0 || weekday > 6) {                                                                        // 2129\n                weekdayOverflow = true;                                                                              // 2130\n            }                                                                                                        // 2131\n        } else if (w.e != null) {                                                                                    // 2132\n            // local weekday -- counting starts from begining of week                                                // 2133\n            weekday = w.e + dow;                                                                                     // 2134\n            if (w.e < 0 || w.e > 6) {                                                                                // 2135\n                weekdayOverflow = true;                                                                              // 2136\n            }                                                                                                        // 2137\n        } else {                                                                                                     // 2138\n            // default to begining of week                                                                           // 2139\n            weekday = dow;                                                                                           // 2140\n        }                                                                                                            // 2141\n    }                                                                                                                // 2142\n    if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {                                                        // 2143\n        getParsingFlags(config)._overflowWeeks = true;                                                               // 2144\n    } else if (weekdayOverflow != null) {                                                                            // 2145\n        getParsingFlags(config)._overflowWeekday = true;                                                             // 2146\n    } else {                                                                                                         // 2147\n        temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);                                                // 2148\n        config._a[YEAR] = temp.year;                                                                                 // 2149\n        config._dayOfYear = temp.dayOfYear;                                                                          // 2150\n    }                                                                                                                // 2151\n}                                                                                                                    // 2152\n                                                                                                                     // 2153\n// iso 8601 regex                                                                                                    // 2154\n// 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)         // 2155\nvar extendedIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})-(?:\\d\\d-\\d\\d|W\\d\\d-\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?::\\d\\d(?::\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\nvar basicIsoRegex = /^\\s*((?:[+-]\\d{6}|\\d{4})(?:\\d\\d\\d\\d|W\\d\\d\\d|W\\d\\d|\\d\\d\\d|\\d\\d))(?:(T| )(\\d\\d(?:\\d\\d(?:\\d\\d(?:[.,]\\d+)?)?)?)([\\+\\-]\\d\\d(?::?\\d\\d)?|\\s*Z)?)?$/;\n                                                                                                                     // 2158\nvar tzRegex = /Z|[+-]\\d\\d(?::?\\d\\d)?/;                                                                               // 2159\n                                                                                                                     // 2160\nvar isoDates = [                                                                                                     // 2161\n    ['YYYYYY-MM-DD', /[+-]\\d{6}-\\d\\d-\\d\\d/],                                                                         // 2162\n    ['YYYY-MM-DD', /\\d{4}-\\d\\d-\\d\\d/],                                                                               // 2163\n    ['GGGG-[W]WW-E', /\\d{4}-W\\d\\d-\\d/],                                                                              // 2164\n    ['GGGG-[W]WW', /\\d{4}-W\\d\\d/, false],                                                                            // 2165\n    ['YYYY-DDD', /\\d{4}-\\d{3}/],                                                                                     // 2166\n    ['YYYY-MM', /\\d{4}-\\d\\d/, false],                                                                                // 2167\n    ['YYYYYYMMDD', /[+-]\\d{10}/],                                                                                    // 2168\n    ['YYYYMMDD', /\\d{8}/],                                                                                           // 2169\n    // YYYYMM is NOT allowed by the standard                                                                         // 2170\n    ['GGGG[W]WWE', /\\d{4}W\\d{3}/],                                                                                   // 2171\n    ['GGGG[W]WW', /\\d{4}W\\d{2}/, false],                                                                             // 2172\n    ['YYYYDDD', /\\d{7}/]                                                                                             // 2173\n];                                                                                                                   // 2174\n                                                                                                                     // 2175\n// iso time formats and regexes                                                                                      // 2176\nvar isoTimes = [                                                                                                     // 2177\n    ['HH:mm:ss.SSSS', /\\d\\d:\\d\\d:\\d\\d\\.\\d+/],                                                                        // 2178\n    ['HH:mm:ss,SSSS', /\\d\\d:\\d\\d:\\d\\d,\\d+/],                                                                         // 2179\n    ['HH:mm:ss', /\\d\\d:\\d\\d:\\d\\d/],                                                                                  // 2180\n    ['HH:mm', /\\d\\d:\\d\\d/],                                                                                          // 2181\n    ['HHmmss.SSSS', /\\d\\d\\d\\d\\d\\d\\.\\d+/],                                                                            // 2182\n    ['HHmmss,SSSS', /\\d\\d\\d\\d\\d\\d,\\d+/],                                                                             // 2183\n    ['HHmmss', /\\d\\d\\d\\d\\d\\d/],                                                                                      // 2184\n    ['HHmm', /\\d\\d\\d\\d/],                                                                                            // 2185\n    ['HH', /\\d\\d/]                                                                                                   // 2186\n];                                                                                                                   // 2187\n                                                                                                                     // 2188\nvar aspNetJsonRegex = /^\\/?Date\\((\\-?\\d+)/i;                                                                         // 2189\n                                                                                                                     // 2190\n// date from iso format                                                                                              // 2191\nfunction configFromISO(config) {                                                                                     // 2192\n    var i, l,                                                                                                        // 2193\n        string = config._i,                                                                                          // 2194\n        match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),                                         // 2195\n        allowTime, dateFormat, timeFormat, tzFormat;                                                                 // 2196\n                                                                                                                     // 2197\n    if (match) {                                                                                                     // 2198\n        getParsingFlags(config).iso = true;                                                                          // 2199\n                                                                                                                     // 2200\n        for (i = 0, l = isoDates.length; i < l; i++) {                                                               // 2201\n            if (isoDates[i][1].exec(match[1])) {                                                                     // 2202\n                dateFormat = isoDates[i][0];                                                                         // 2203\n                allowTime = isoDates[i][2] !== false;                                                                // 2204\n                break;                                                                                               // 2205\n            }                                                                                                        // 2206\n        }                                                                                                            // 2207\n        if (dateFormat == null) {                                                                                    // 2208\n            config._isValid = false;                                                                                 // 2209\n            return;                                                                                                  // 2210\n        }                                                                                                            // 2211\n        if (match[3]) {                                                                                              // 2212\n            for (i = 0, l = isoTimes.length; i < l; i++) {                                                           // 2213\n                if (isoTimes[i][1].exec(match[3])) {                                                                 // 2214\n                    // match[2] should be 'T' or space                                                               // 2215\n                    timeFormat = (match[2] || ' ') + isoTimes[i][0];                                                 // 2216\n                    break;                                                                                           // 2217\n                }                                                                                                    // 2218\n            }                                                                                                        // 2219\n            if (timeFormat == null) {                                                                                // 2220\n                config._isValid = false;                                                                             // 2221\n                return;                                                                                              // 2222\n            }                                                                                                        // 2223\n        }                                                                                                            // 2224\n        if (!allowTime && timeFormat != null) {                                                                      // 2225\n            config._isValid = false;                                                                                 // 2226\n            return;                                                                                                  // 2227\n        }                                                                                                            // 2228\n        if (match[4]) {                                                                                              // 2229\n            if (tzRegex.exec(match[4])) {                                                                            // 2230\n                tzFormat = 'Z';                                                                                      // 2231\n            } else {                                                                                                 // 2232\n                config._isValid = false;                                                                             // 2233\n                return;                                                                                              // 2234\n            }                                                                                                        // 2235\n        }                                                                                                            // 2236\n        config._f = dateFormat + (timeFormat || '') + (tzFormat || '');                                              // 2237\n        configFromStringAndFormat(config);                                                                           // 2238\n    } else {                                                                                                         // 2239\n        config._isValid = false;                                                                                     // 2240\n    }                                                                                                                // 2241\n}                                                                                                                    // 2242\n                                                                                                                     // 2243\n// RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3                                   // 2244\nvar rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\\d{4}))$/;\n                                                                                                                     // 2246\nfunction extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {                       // 2247\n    var result = [                                                                                                   // 2248\n        untruncateYear(yearStr),                                                                                     // 2249\n        defaultLocaleMonthsShort.indexOf(monthStr),                                                                  // 2250\n        parseInt(dayStr, 10),                                                                                        // 2251\n        parseInt(hourStr, 10),                                                                                       // 2252\n        parseInt(minuteStr, 10)                                                                                      // 2253\n    ];                                                                                                               // 2254\n                                                                                                                     // 2255\n    if (secondStr) {                                                                                                 // 2256\n        result.push(parseInt(secondStr, 10));                                                                        // 2257\n    }                                                                                                                // 2258\n                                                                                                                     // 2259\n    return result;                                                                                                   // 2260\n}                                                                                                                    // 2261\n                                                                                                                     // 2262\nfunction untruncateYear(yearStr) {                                                                                   // 2263\n    var year = parseInt(yearStr, 10);                                                                                // 2264\n    if (year <= 49) {                                                                                                // 2265\n        return 2000 + year;                                                                                          // 2266\n    } else if (year <= 999) {                                                                                        // 2267\n        return 1900 + year;                                                                                          // 2268\n    }                                                                                                                // 2269\n    return year;                                                                                                     // 2270\n}                                                                                                                    // 2271\n                                                                                                                     // 2272\nfunction preprocessRFC2822(s) {                                                                                      // 2273\n    // Remove comments and folding whitespace and replace multiple-spaces with a single space                        // 2274\n    return s.replace(/\\([^)]*\\)|[\\n\\t]/g, ' ').replace(/(\\s\\s+)/g, ' ').trim();                                      // 2275\n}                                                                                                                    // 2276\n                                                                                                                     // 2277\nfunction checkWeekday(weekdayStr, parsedInput, config) {                                                             // 2278\n    if (weekdayStr) {                                                                                                // 2279\n        // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.                           // 2280\n        var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),                                        // 2281\n            weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();                       // 2282\n        if (weekdayProvided !== weekdayActual) {                                                                     // 2283\n            getParsingFlags(config).weekdayMismatch = true;                                                          // 2284\n            config._isValid = false;                                                                                 // 2285\n            return false;                                                                                            // 2286\n        }                                                                                                            // 2287\n    }                                                                                                                // 2288\n    return true;                                                                                                     // 2289\n}                                                                                                                    // 2290\n                                                                                                                     // 2291\nvar obsOffsets = {                                                                                                   // 2292\n    UT: 0,                                                                                                           // 2293\n    GMT: 0,                                                                                                          // 2294\n    EDT: -4 * 60,                                                                                                    // 2295\n    EST: -5 * 60,                                                                                                    // 2296\n    CDT: -5 * 60,                                                                                                    // 2297\n    CST: -6 * 60,                                                                                                    // 2298\n    MDT: -6 * 60,                                                                                                    // 2299\n    MST: -7 * 60,                                                                                                    // 2300\n    PDT: -7 * 60,                                                                                                    // 2301\n    PST: -8 * 60                                                                                                     // 2302\n};                                                                                                                   // 2303\n                                                                                                                     // 2304\nfunction calculateOffset(obsOffset, militaryOffset, numOffset) {                                                     // 2305\n    if (obsOffset) {                                                                                                 // 2306\n        return obsOffsets[obsOffset];                                                                                // 2307\n    } else if (militaryOffset) {                                                                                     // 2308\n        // the only allowed military tz is Z                                                                         // 2309\n        return 0;                                                                                                    // 2310\n    } else {                                                                                                         // 2311\n        var hm = parseInt(numOffset, 10);                                                                            // 2312\n        var m = hm % 100, h = (hm - m) / 100;                                                                        // 2313\n        return h * 60 + m;                                                                                           // 2314\n    }                                                                                                                // 2315\n}                                                                                                                    // 2316\n                                                                                                                     // 2317\n// date and time from ref 2822 format                                                                                // 2318\nfunction configFromRFC2822(config) {                                                                                 // 2319\n    var match = rfc2822.exec(preprocessRFC2822(config._i));                                                          // 2320\n    if (match) {                                                                                                     // 2321\n        var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);     // 2322\n        if (!checkWeekday(match[1], parsedArray, config)) {                                                          // 2323\n            return;                                                                                                  // 2324\n        }                                                                                                            // 2325\n                                                                                                                     // 2326\n        config._a = parsedArray;                                                                                     // 2327\n        config._tzm = calculateOffset(match[8], match[9], match[10]);                                                // 2328\n                                                                                                                     // 2329\n        config._d = createUTCDate.apply(null, config._a);                                                            // 2330\n        config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);                                            // 2331\n                                                                                                                     // 2332\n        getParsingFlags(config).rfc2822 = true;                                                                      // 2333\n    } else {                                                                                                         // 2334\n        config._isValid = false;                                                                                     // 2335\n    }                                                                                                                // 2336\n}                                                                                                                    // 2337\n                                                                                                                     // 2338\n// date from iso format or fallback                                                                                  // 2339\nfunction configFromString(config) {                                                                                  // 2340\n    var matched = aspNetJsonRegex.exec(config._i);                                                                   // 2341\n                                                                                                                     // 2342\n    if (matched !== null) {                                                                                          // 2343\n        config._d = new Date(+matched[1]);                                                                           // 2344\n        return;                                                                                                      // 2345\n    }                                                                                                                // 2346\n                                                                                                                     // 2347\n    configFromISO(config);                                                                                           // 2348\n    if (config._isValid === false) {                                                                                 // 2349\n        delete config._isValid;                                                                                      // 2350\n    } else {                                                                                                         // 2351\n        return;                                                                                                      // 2352\n    }                                                                                                                // 2353\n                                                                                                                     // 2354\n    configFromRFC2822(config);                                                                                       // 2355\n    if (config._isValid === false) {                                                                                 // 2356\n        delete config._isValid;                                                                                      // 2357\n    } else {                                                                                                         // 2358\n        return;                                                                                                      // 2359\n    }                                                                                                                // 2360\n                                                                                                                     // 2361\n    // Final attempt, use Input Fallback                                                                             // 2362\n    hooks.createFromInputFallback(config);                                                                           // 2363\n}                                                                                                                    // 2364\n                                                                                                                     // 2365\nhooks.createFromInputFallback = deprecate(                                                                           // 2366\n    'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +   // 2367\n    'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +                    // 2368\n    'discouraged and will be removed in an upcoming major release. Please refer to ' +                               // 2369\n    'http://momentjs.com/guides/#/warnings/js-date/ for more info.',                                                 // 2370\n    function (config) {                                                                                              // 2371\n        config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));                                            // 2372\n    }                                                                                                                // 2373\n);                                                                                                                   // 2374\n                                                                                                                     // 2375\n// constant that refers to the ISO standard                                                                          // 2376\nhooks.ISO_8601 = function () {};                                                                                     // 2377\n                                                                                                                     // 2378\n// constant that refers to the RFC 2822 form                                                                         // 2379\nhooks.RFC_2822 = function () {};                                                                                     // 2380\n                                                                                                                     // 2381\n// date from string and format string                                                                                // 2382\nfunction configFromStringAndFormat(config) {                                                                         // 2383\n    // TODO: Move this to another part of the creation flow to prevent circular deps                                 // 2384\n    if (config._f === hooks.ISO_8601) {                                                                              // 2385\n        configFromISO(config);                                                                                       // 2386\n        return;                                                                                                      // 2387\n    }                                                                                                                // 2388\n    if (config._f === hooks.RFC_2822) {                                                                              // 2389\n        configFromRFC2822(config);                                                                                   // 2390\n        return;                                                                                                      // 2391\n    }                                                                                                                // 2392\n    config._a = [];                                                                                                  // 2393\n    getParsingFlags(config).empty = true;                                                                            // 2394\n                                                                                                                     // 2395\n    // This array is used to make a Date, either with `new Date` or `Date.UTC`                                       // 2396\n    var string = '' + config._i,                                                                                     // 2397\n        i, parsedInput, tokens, token, skipped,                                                                      // 2398\n        stringLength = string.length,                                                                                // 2399\n        totalParsedInputLength = 0;                                                                                  // 2400\n                                                                                                                     // 2401\n    tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];                                  // 2402\n                                                                                                                     // 2403\n    for (i = 0; i < tokens.length; i++) {                                                                            // 2404\n        token = tokens[i];                                                                                           // 2405\n        parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];                                 // 2406\n        // console.log('token', token, 'parsedInput', parsedInput,                                                   // 2407\n        //         'regex', getParseRegexForToken(token, config));                                                   // 2408\n        if (parsedInput) {                                                                                           // 2409\n            skipped = string.substr(0, string.indexOf(parsedInput));                                                 // 2410\n            if (skipped.length > 0) {                                                                                // 2411\n                getParsingFlags(config).unusedInput.push(skipped);                                                   // 2412\n            }                                                                                                        // 2413\n            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);                                 // 2414\n            totalParsedInputLength += parsedInput.length;                                                            // 2415\n        }                                                                                                            // 2416\n        // don't parse if it's not a known token                                                                     // 2417\n        if (formatTokenFunctions[token]) {                                                                           // 2418\n            if (parsedInput) {                                                                                       // 2419\n                getParsingFlags(config).empty = false;                                                               // 2420\n            }                                                                                                        // 2421\n            else {                                                                                                   // 2422\n                getParsingFlags(config).unusedTokens.push(token);                                                    // 2423\n            }                                                                                                        // 2424\n            addTimeToArrayFromToken(token, parsedInput, config);                                                     // 2425\n        }                                                                                                            // 2426\n        else if (config._strict && !parsedInput) {                                                                   // 2427\n            getParsingFlags(config).unusedTokens.push(token);                                                        // 2428\n        }                                                                                                            // 2429\n    }                                                                                                                // 2430\n                                                                                                                     // 2431\n    // add remaining unparsed input length to the string                                                             // 2432\n    getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;                                   // 2433\n    if (string.length > 0) {                                                                                         // 2434\n        getParsingFlags(config).unusedInput.push(string);                                                            // 2435\n    }                                                                                                                // 2436\n                                                                                                                     // 2437\n    // clear _12h flag if hour is <= 12                                                                              // 2438\n    if (config._a[HOUR] <= 12 &&                                                                                     // 2439\n        getParsingFlags(config).bigHour === true &&                                                                  // 2440\n        config._a[HOUR] > 0) {                                                                                       // 2441\n        getParsingFlags(config).bigHour = undefined;                                                                 // 2442\n    }                                                                                                                // 2443\n                                                                                                                     // 2444\n    getParsingFlags(config).parsedDateParts = config._a.slice(0);                                                    // 2445\n    getParsingFlags(config).meridiem = config._meridiem;                                                             // 2446\n    // handle meridiem                                                                                               // 2447\n    config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);                            // 2448\n                                                                                                                     // 2449\n    configFromArray(config);                                                                                         // 2450\n    checkOverflow(config);                                                                                           // 2451\n}                                                                                                                    // 2452\n                                                                                                                     // 2453\n                                                                                                                     // 2454\nfunction meridiemFixWrap (locale, hour, meridiem) {                                                                  // 2455\n    var isPm;                                                                                                        // 2456\n                                                                                                                     // 2457\n    if (meridiem == null) {                                                                                          // 2458\n        // nothing to do                                                                                             // 2459\n        return hour;                                                                                                 // 2460\n    }                                                                                                                // 2461\n    if (locale.meridiemHour != null) {                                                                               // 2462\n        return locale.meridiemHour(hour, meridiem);                                                                  // 2463\n    } else if (locale.isPM != null) {                                                                                // 2464\n        // Fallback                                                                                                  // 2465\n        isPm = locale.isPM(meridiem);                                                                                // 2466\n        if (isPm && hour < 12) {                                                                                     // 2467\n            hour += 12;                                                                                              // 2468\n        }                                                                                                            // 2469\n        if (!isPm && hour === 12) {                                                                                  // 2470\n            hour = 0;                                                                                                // 2471\n        }                                                                                                            // 2472\n        return hour;                                                                                                 // 2473\n    } else {                                                                                                         // 2474\n        // this is not supposed to happen                                                                            // 2475\n        return hour;                                                                                                 // 2476\n    }                                                                                                                // 2477\n}                                                                                                                    // 2478\n                                                                                                                     // 2479\n// date from string and array of format strings                                                                      // 2480\nfunction configFromStringAndArray(config) {                                                                          // 2481\n    var tempConfig,                                                                                                  // 2482\n        bestMoment,                                                                                                  // 2483\n                                                                                                                     // 2484\n        scoreToBeat,                                                                                                 // 2485\n        i,                                                                                                           // 2486\n        currentScore;                                                                                                // 2487\n                                                                                                                     // 2488\n    if (config._f.length === 0) {                                                                                    // 2489\n        getParsingFlags(config).invalidFormat = true;                                                                // 2490\n        config._d = new Date(NaN);                                                                                   // 2491\n        return;                                                                                                      // 2492\n    }                                                                                                                // 2493\n                                                                                                                     // 2494\n    for (i = 0; i < config._f.length; i++) {                                                                         // 2495\n        currentScore = 0;                                                                                            // 2496\n        tempConfig = copyConfig({}, config);                                                                         // 2497\n        if (config._useUTC != null) {                                                                                // 2498\n            tempConfig._useUTC = config._useUTC;                                                                     // 2499\n        }                                                                                                            // 2500\n        tempConfig._f = config._f[i];                                                                                // 2501\n        configFromStringAndFormat(tempConfig);                                                                       // 2502\n                                                                                                                     // 2503\n        if (!isValid(tempConfig)) {                                                                                  // 2504\n            continue;                                                                                                // 2505\n        }                                                                                                            // 2506\n                                                                                                                     // 2507\n        // if there is any input that was not parsed add a penalty for that format                                   // 2508\n        currentScore += getParsingFlags(tempConfig).charsLeftOver;                                                   // 2509\n                                                                                                                     // 2510\n        //or tokens                                                                                                  // 2511\n        currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;                                        // 2512\n                                                                                                                     // 2513\n        getParsingFlags(tempConfig).score = currentScore;                                                            // 2514\n                                                                                                                     // 2515\n        if (scoreToBeat == null || currentScore < scoreToBeat) {                                                     // 2516\n            scoreToBeat = currentScore;                                                                              // 2517\n            bestMoment = tempConfig;                                                                                 // 2518\n        }                                                                                                            // 2519\n    }                                                                                                                // 2520\n                                                                                                                     // 2521\n    extend(config, bestMoment || tempConfig);                                                                        // 2522\n}                                                                                                                    // 2523\n                                                                                                                     // 2524\nfunction configFromObject(config) {                                                                                  // 2525\n    if (config._d) {                                                                                                 // 2526\n        return;                                                                                                      // 2527\n    }                                                                                                                // 2528\n                                                                                                                     // 2529\n    var i = normalizeObjectUnits(config._i);                                                                         // 2530\n    config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {  // 2531\n        return obj && parseInt(obj, 10);                                                                             // 2532\n    });                                                                                                              // 2533\n                                                                                                                     // 2534\n    configFromArray(config);                                                                                         // 2535\n}                                                                                                                    // 2536\n                                                                                                                     // 2537\nfunction createFromConfig (config) {                                                                                 // 2538\n    var res = new Moment(checkOverflow(prepareConfig(config)));                                                      // 2539\n    if (res._nextDay) {                                                                                              // 2540\n        // Adding is smart enough around DST                                                                         // 2541\n        res.add(1, 'd');                                                                                             // 2542\n        res._nextDay = undefined;                                                                                    // 2543\n    }                                                                                                                // 2544\n                                                                                                                     // 2545\n    return res;                                                                                                      // 2546\n}                                                                                                                    // 2547\n                                                                                                                     // 2548\nfunction prepareConfig (config) {                                                                                    // 2549\n    var input = config._i,                                                                                           // 2550\n        format = config._f;                                                                                          // 2551\n                                                                                                                     // 2552\n    config._locale = config._locale || getLocale(config._l);                                                         // 2553\n                                                                                                                     // 2554\n    if (input === null || (format === undefined && input === '')) {                                                  // 2555\n        return createInvalid({nullInput: true});                                                                     // 2556\n    }                                                                                                                // 2557\n                                                                                                                     // 2558\n    if (typeof input === 'string') {                                                                                 // 2559\n        config._i = input = config._locale.preparse(input);                                                          // 2560\n    }                                                                                                                // 2561\n                                                                                                                     // 2562\n    if (isMoment(input)) {                                                                                           // 2563\n        return new Moment(checkOverflow(input));                                                                     // 2564\n    } else if (isDate(input)) {                                                                                      // 2565\n        config._d = input;                                                                                           // 2566\n    } else if (isArray(format)) {                                                                                    // 2567\n        configFromStringAndArray(config);                                                                            // 2568\n    } else if (format) {                                                                                             // 2569\n        configFromStringAndFormat(config);                                                                           // 2570\n    }  else {                                                                                                        // 2571\n        configFromInput(config);                                                                                     // 2572\n    }                                                                                                                // 2573\n                                                                                                                     // 2574\n    if (!isValid(config)) {                                                                                          // 2575\n        config._d = null;                                                                                            // 2576\n    }                                                                                                                // 2577\n                                                                                                                     // 2578\n    return config;                                                                                                   // 2579\n}                                                                                                                    // 2580\n                                                                                                                     // 2581\nfunction configFromInput(config) {                                                                                   // 2582\n    var input = config._i;                                                                                           // 2583\n    if (isUndefined(input)) {                                                                                        // 2584\n        config._d = new Date(hooks.now());                                                                           // 2585\n    } else if (isDate(input)) {                                                                                      // 2586\n        config._d = new Date(input.valueOf());                                                                       // 2587\n    } else if (typeof input === 'string') {                                                                          // 2588\n        configFromString(config);                                                                                    // 2589\n    } else if (isArray(input)) {                                                                                     // 2590\n        config._a = map(input.slice(0), function (obj) {                                                             // 2591\n            return parseInt(obj, 10);                                                                                // 2592\n        });                                                                                                          // 2593\n        configFromArray(config);                                                                                     // 2594\n    } else if (isObject(input)) {                                                                                    // 2595\n        configFromObject(config);                                                                                    // 2596\n    } else if (isNumber(input)) {                                                                                    // 2597\n        // from milliseconds                                                                                         // 2598\n        config._d = new Date(input);                                                                                 // 2599\n    } else {                                                                                                         // 2600\n        hooks.createFromInputFallback(config);                                                                       // 2601\n    }                                                                                                                // 2602\n}                                                                                                                    // 2603\n                                                                                                                     // 2604\nfunction createLocalOrUTC (input, format, locale, strict, isUTC) {                                                   // 2605\n    var c = {};                                                                                                      // 2606\n                                                                                                                     // 2607\n    if (locale === true || locale === false) {                                                                       // 2608\n        strict = locale;                                                                                             // 2609\n        locale = undefined;                                                                                          // 2610\n    }                                                                                                                // 2611\n                                                                                                                     // 2612\n    if ((isObject(input) && isObjectEmpty(input)) ||                                                                 // 2613\n            (isArray(input) && input.length === 0)) {                                                                // 2614\n        input = undefined;                                                                                           // 2615\n    }                                                                                                                // 2616\n    // object construction must be done this way.                                                                    // 2617\n    // https://github.com/moment/moment/issues/1423                                                                  // 2618\n    c._isAMomentObject = true;                                                                                       // 2619\n    c._useUTC = c._isUTC = isUTC;                                                                                    // 2620\n    c._l = locale;                                                                                                   // 2621\n    c._i = input;                                                                                                    // 2622\n    c._f = format;                                                                                                   // 2623\n    c._strict = strict;                                                                                              // 2624\n                                                                                                                     // 2625\n    return createFromConfig(c);                                                                                      // 2626\n}                                                                                                                    // 2627\n                                                                                                                     // 2628\nfunction createLocal (input, format, locale, strict) {                                                               // 2629\n    return createLocalOrUTC(input, format, locale, strict, false);                                                   // 2630\n}                                                                                                                    // 2631\n                                                                                                                     // 2632\nvar prototypeMin = deprecate(                                                                                        // 2633\n    'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',            // 2634\n    function () {                                                                                                    // 2635\n        var other = createLocal.apply(null, arguments);                                                              // 2636\n        if (this.isValid() && other.isValid()) {                                                                     // 2637\n            return other < this ? this : other;                                                                      // 2638\n        } else {                                                                                                     // 2639\n            return createInvalid();                                                                                  // 2640\n        }                                                                                                            // 2641\n    }                                                                                                                // 2642\n);                                                                                                                   // 2643\n                                                                                                                     // 2644\nvar prototypeMax = deprecate(                                                                                        // 2645\n    'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',            // 2646\n    function () {                                                                                                    // 2647\n        var other = createLocal.apply(null, arguments);                                                              // 2648\n        if (this.isValid() && other.isValid()) {                                                                     // 2649\n            return other > this ? this : other;                                                                      // 2650\n        } else {                                                                                                     // 2651\n            return createInvalid();                                                                                  // 2652\n        }                                                                                                            // 2653\n    }                                                                                                                // 2654\n);                                                                                                                   // 2655\n                                                                                                                     // 2656\n// Pick a moment m from moments so that m[fn](other) is true for all                                                 // 2657\n// other. This relies on the function fn to be transitive.                                                           // 2658\n//                                                                                                                   // 2659\n// moments should either be an array of moment objects or an array, whose                                            // 2660\n// first element is an array of moment objects.                                                                      // 2661\nfunction pickBy(fn, moments) {                                                                                       // 2662\n    var res, i;                                                                                                      // 2663\n    if (moments.length === 1 && isArray(moments[0])) {                                                               // 2664\n        moments = moments[0];                                                                                        // 2665\n    }                                                                                                                // 2666\n    if (!moments.length) {                                                                                           // 2667\n        return createLocal();                                                                                        // 2668\n    }                                                                                                                // 2669\n    res = moments[0];                                                                                                // 2670\n    for (i = 1; i < moments.length; ++i) {                                                                           // 2671\n        if (!moments[i].isValid() || moments[i][fn](res)) {                                                          // 2672\n            res = moments[i];                                                                                        // 2673\n        }                                                                                                            // 2674\n    }                                                                                                                // 2675\n    return res;                                                                                                      // 2676\n}                                                                                                                    // 2677\n                                                                                                                     // 2678\n// TODO: Use [].sort instead?                                                                                        // 2679\nfunction min () {                                                                                                    // 2680\n    var args = [].slice.call(arguments, 0);                                                                          // 2681\n                                                                                                                     // 2682\n    return pickBy('isBefore', args);                                                                                 // 2683\n}                                                                                                                    // 2684\n                                                                                                                     // 2685\nfunction max () {                                                                                                    // 2686\n    var args = [].slice.call(arguments, 0);                                                                          // 2687\n                                                                                                                     // 2688\n    return pickBy('isAfter', args);                                                                                  // 2689\n}                                                                                                                    // 2690\n                                                                                                                     // 2691\nvar now = function () {                                                                                              // 2692\n    return Date.now ? Date.now() : +(new Date());                                                                    // 2693\n};                                                                                                                   // 2694\n                                                                                                                     // 2695\nvar ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];               // 2696\n                                                                                                                     // 2697\nfunction isDurationValid(m) {                                                                                        // 2698\n    for (var key in m) {                                                                                             // 2699\n        if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {                           // 2700\n            return false;                                                                                            // 2701\n        }                                                                                                            // 2702\n    }                                                                                                                // 2703\n                                                                                                                     // 2704\n    var unitHasDecimal = false;                                                                                      // 2705\n    for (var i = 0; i < ordering.length; ++i) {                                                                      // 2706\n        if (m[ordering[i]]) {                                                                                        // 2707\n            if (unitHasDecimal) {                                                                                    // 2708\n                return false; // only allow non-integers for smallest unit                                           // 2709\n            }                                                                                                        // 2710\n            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {                                              // 2711\n                unitHasDecimal = true;                                                                               // 2712\n            }                                                                                                        // 2713\n        }                                                                                                            // 2714\n    }                                                                                                                // 2715\n                                                                                                                     // 2716\n    return true;                                                                                                     // 2717\n}                                                                                                                    // 2718\n                                                                                                                     // 2719\nfunction isValid$1() {                                                                                               // 2720\n    return this._isValid;                                                                                            // 2721\n}                                                                                                                    // 2722\n                                                                                                                     // 2723\nfunction createInvalid$1() {                                                                                         // 2724\n    return createDuration(NaN);                                                                                      // 2725\n}                                                                                                                    // 2726\n                                                                                                                     // 2727\nfunction Duration (duration) {                                                                                       // 2728\n    var normalizedInput = normalizeObjectUnits(duration),                                                            // 2729\n        years = normalizedInput.year || 0,                                                                           // 2730\n        quarters = normalizedInput.quarter || 0,                                                                     // 2731\n        months = normalizedInput.month || 0,                                                                         // 2732\n        weeks = normalizedInput.week || 0,                                                                           // 2733\n        days = normalizedInput.day || 0,                                                                             // 2734\n        hours = normalizedInput.hour || 0,                                                                           // 2735\n        minutes = normalizedInput.minute || 0,                                                                       // 2736\n        seconds = normalizedInput.second || 0,                                                                       // 2737\n        milliseconds = normalizedInput.millisecond || 0;                                                             // 2738\n                                                                                                                     // 2739\n    this._isValid = isDurationValid(normalizedInput);                                                                // 2740\n                                                                                                                     // 2741\n    // representation for dateAddRemove                                                                              // 2742\n    this._milliseconds = +milliseconds +                                                                             // 2743\n        seconds * 1e3 + // 1000                                                                                      // 2744\n        minutes * 6e4 + // 1000 * 60                                                                                 // 2745\n        hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978\n    // Because of dateAddRemove treats 24 hours as different from a                                                  // 2747\n    // day when working around DST, we need to store them separately                                                 // 2748\n    this._days = +days +                                                                                             // 2749\n        weeks * 7;                                                                                                   // 2750\n    // It is impossible to translate months into days without knowing                                                // 2751\n    // which months you are are talking about, so we have to store                                                   // 2752\n    // it separately.                                                                                                // 2753\n    this._months = +months +                                                                                         // 2754\n        quarters * 3 +                                                                                               // 2755\n        years * 12;                                                                                                  // 2756\n                                                                                                                     // 2757\n    this._data = {};                                                                                                 // 2758\n                                                                                                                     // 2759\n    this._locale = getLocale();                                                                                      // 2760\n                                                                                                                     // 2761\n    this._bubble();                                                                                                  // 2762\n}                                                                                                                    // 2763\n                                                                                                                     // 2764\nfunction isDuration (obj) {                                                                                          // 2765\n    return obj instanceof Duration;                                                                                  // 2766\n}                                                                                                                    // 2767\n                                                                                                                     // 2768\nfunction absRound (number) {                                                                                         // 2769\n    if (number < 0) {                                                                                                // 2770\n        return Math.round(-1 * number) * -1;                                                                         // 2771\n    } else {                                                                                                         // 2772\n        return Math.round(number);                                                                                   // 2773\n    }                                                                                                                // 2774\n}                                                                                                                    // 2775\n                                                                                                                     // 2776\n// FORMATTING                                                                                                        // 2777\n                                                                                                                     // 2778\nfunction offset (token, separator) {                                                                                 // 2779\n    addFormatToken(token, 0, 0, function () {                                                                        // 2780\n        var offset = this.utcOffset();                                                                               // 2781\n        var sign = '+';                                                                                              // 2782\n        if (offset < 0) {                                                                                            // 2783\n            offset = -offset;                                                                                        // 2784\n            sign = '-';                                                                                              // 2785\n        }                                                                                                            // 2786\n        return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);                       // 2787\n    });                                                                                                              // 2788\n}                                                                                                                    // 2789\n                                                                                                                     // 2790\noffset('Z', ':');                                                                                                    // 2791\noffset('ZZ', '');                                                                                                    // 2792\n                                                                                                                     // 2793\n// PARSING                                                                                                           // 2794\n                                                                                                                     // 2795\naddRegexToken('Z',  matchShortOffset);                                                                               // 2796\naddRegexToken('ZZ', matchShortOffset);                                                                               // 2797\naddParseToken(['Z', 'ZZ'], function (input, array, config) {                                                         // 2798\n    config._useUTC = true;                                                                                           // 2799\n    config._tzm = offsetFromString(matchShortOffset, input);                                                         // 2800\n});                                                                                                                  // 2801\n                                                                                                                     // 2802\n// HELPERS                                                                                                           // 2803\n                                                                                                                     // 2804\n// timezone chunker                                                                                                  // 2805\n// '+10:00' > ['10',  '00']                                                                                          // 2806\n// '-1530'  > ['-15', '30']                                                                                          // 2807\nvar chunkOffset = /([\\+\\-]|\\d\\d)/gi;                                                                                 // 2808\n                                                                                                                     // 2809\nfunction offsetFromString(matcher, string) {                                                                         // 2810\n    var matches = (string || '').match(matcher);                                                                     // 2811\n                                                                                                                     // 2812\n    if (matches === null) {                                                                                          // 2813\n        return null;                                                                                                 // 2814\n    }                                                                                                                // 2815\n                                                                                                                     // 2816\n    var chunk   = matches[matches.length - 1] || [];                                                                 // 2817\n    var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];                                                    // 2818\n    var minutes = +(parts[1] * 60) + toInt(parts[2]);                                                                // 2819\n                                                                                                                     // 2820\n    return minutes === 0 ?                                                                                           // 2821\n      0 :                                                                                                            // 2822\n      parts[0] === '+' ? minutes : -minutes;                                                                         // 2823\n}                                                                                                                    // 2824\n                                                                                                                     // 2825\n// Return a moment from input, that is local/utc/zone equivalent to model.                                           // 2826\nfunction cloneWithOffset(input, model) {                                                                             // 2827\n    var res, diff;                                                                                                   // 2828\n    if (model._isUTC) {                                                                                              // 2829\n        res = model.clone();                                                                                         // 2830\n        diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();  // 2831\n        // Use low-level api, because this fn is low-level api.                                                      // 2832\n        res._d.setTime(res._d.valueOf() + diff);                                                                     // 2833\n        hooks.updateOffset(res, false);                                                                              // 2834\n        return res;                                                                                                  // 2835\n    } else {                                                                                                         // 2836\n        return createLocal(input).local();                                                                           // 2837\n    }                                                                                                                // 2838\n}                                                                                                                    // 2839\n                                                                                                                     // 2840\nfunction getDateOffset (m) {                                                                                         // 2841\n    // On Firefox.24 Date#getTimezoneOffset returns a floating point.                                                // 2842\n    // https://github.com/moment/moment/pull/1871                                                                    // 2843\n    return -Math.round(m._d.getTimezoneOffset() / 15) * 15;                                                          // 2844\n}                                                                                                                    // 2845\n                                                                                                                     // 2846\n// HOOKS                                                                                                             // 2847\n                                                                                                                     // 2848\n// This function will be called whenever a moment is mutated.                                                        // 2849\n// It is intended to keep the offset in sync with the timezone.                                                      // 2850\nhooks.updateOffset = function () {};                                                                                 // 2851\n                                                                                                                     // 2852\n// MOMENTS                                                                                                           // 2853\n                                                                                                                     // 2854\n// keepLocalTime = true means only change the timezone, without                                                      // 2855\n// affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->                                              // 2856\n// 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset                                               // 2857\n// +0200, so we adjust the time as needed, to be valid.                                                              // 2858\n//                                                                                                                   // 2859\n// Keeping the time actually adds/subtracts (one hour)                                                               // 2860\n// from the actual represented time. That is why we call updateOffset                                                // 2861\n// a second time. In case it wants us to change the offset again                                                     // 2862\n// _changeInProgress == true case, then we have to adjust, because                                                   // 2863\n// there is no such time in the given timezone.                                                                      // 2864\nfunction getSetOffset (input, keepLocalTime, keepMinutes) {                                                          // 2865\n    var offset = this._offset || 0,                                                                                  // 2866\n        localAdjust;                                                                                                 // 2867\n    if (!this.isValid()) {                                                                                           // 2868\n        return input != null ? this : NaN;                                                                           // 2869\n    }                                                                                                                // 2870\n    if (input != null) {                                                                                             // 2871\n        if (typeof input === 'string') {                                                                             // 2872\n            input = offsetFromString(matchShortOffset, input);                                                       // 2873\n            if (input === null) {                                                                                    // 2874\n                return this;                                                                                         // 2875\n            }                                                                                                        // 2876\n        } else if (Math.abs(input) < 16 && !keepMinutes) {                                                           // 2877\n            input = input * 60;                                                                                      // 2878\n        }                                                                                                            // 2879\n        if (!this._isUTC && keepLocalTime) {                                                                         // 2880\n            localAdjust = getDateOffset(this);                                                                       // 2881\n        }                                                                                                            // 2882\n        this._offset = input;                                                                                        // 2883\n        this._isUTC = true;                                                                                          // 2884\n        if (localAdjust != null) {                                                                                   // 2885\n            this.add(localAdjust, 'm');                                                                              // 2886\n        }                                                                                                            // 2887\n        if (offset !== input) {                                                                                      // 2888\n            if (!keepLocalTime || this._changeInProgress) {                                                          // 2889\n                addSubtract(this, createDuration(input - offset, 'm'), 1, false);                                    // 2890\n            } else if (!this._changeInProgress) {                                                                    // 2891\n                this._changeInProgress = true;                                                                       // 2892\n                hooks.updateOffset(this, true);                                                                      // 2893\n                this._changeInProgress = null;                                                                       // 2894\n            }                                                                                                        // 2895\n        }                                                                                                            // 2896\n        return this;                                                                                                 // 2897\n    } else {                                                                                                         // 2898\n        return this._isUTC ? offset : getDateOffset(this);                                                           // 2899\n    }                                                                                                                // 2900\n}                                                                                                                    // 2901\n                                                                                                                     // 2902\nfunction getSetZone (input, keepLocalTime) {                                                                         // 2903\n    if (input != null) {                                                                                             // 2904\n        if (typeof input !== 'string') {                                                                             // 2905\n            input = -input;                                                                                          // 2906\n        }                                                                                                            // 2907\n                                                                                                                     // 2908\n        this.utcOffset(input, keepLocalTime);                                                                        // 2909\n                                                                                                                     // 2910\n        return this;                                                                                                 // 2911\n    } else {                                                                                                         // 2912\n        return -this.utcOffset();                                                                                    // 2913\n    }                                                                                                                // 2914\n}                                                                                                                    // 2915\n                                                                                                                     // 2916\nfunction setOffsetToUTC (keepLocalTime) {                                                                            // 2917\n    return this.utcOffset(0, keepLocalTime);                                                                         // 2918\n}                                                                                                                    // 2919\n                                                                                                                     // 2920\nfunction setOffsetToLocal (keepLocalTime) {                                                                          // 2921\n    if (this._isUTC) {                                                                                               // 2922\n        this.utcOffset(0, keepLocalTime);                                                                            // 2923\n        this._isUTC = false;                                                                                         // 2924\n                                                                                                                     // 2925\n        if (keepLocalTime) {                                                                                         // 2926\n            this.subtract(getDateOffset(this), 'm');                                                                 // 2927\n        }                                                                                                            // 2928\n    }                                                                                                                // 2929\n    return this;                                                                                                     // 2930\n}                                                                                                                    // 2931\n                                                                                                                     // 2932\nfunction setOffsetToParsedOffset () {                                                                                // 2933\n    if (this._tzm != null) {                                                                                         // 2934\n        this.utcOffset(this._tzm, false, true);                                                                      // 2935\n    } else if (typeof this._i === 'string') {                                                                        // 2936\n        var tZone = offsetFromString(matchOffset, this._i);                                                          // 2937\n        if (tZone != null) {                                                                                         // 2938\n            this.utcOffset(tZone);                                                                                   // 2939\n        }                                                                                                            // 2940\n        else {                                                                                                       // 2941\n            this.utcOffset(0, true);                                                                                 // 2942\n        }                                                                                                            // 2943\n    }                                                                                                                // 2944\n    return this;                                                                                                     // 2945\n}                                                                                                                    // 2946\n                                                                                                                     // 2947\nfunction hasAlignedHourOffset (input) {                                                                              // 2948\n    if (!this.isValid()) {                                                                                           // 2949\n        return false;                                                                                                // 2950\n    }                                                                                                                // 2951\n    input = input ? createLocal(input).utcOffset() : 0;                                                              // 2952\n                                                                                                                     // 2953\n    return (this.utcOffset() - input) % 60 === 0;                                                                    // 2954\n}                                                                                                                    // 2955\n                                                                                                                     // 2956\nfunction isDaylightSavingTime () {                                                                                   // 2957\n    return (                                                                                                         // 2958\n        this.utcOffset() > this.clone().month(0).utcOffset() ||                                                      // 2959\n        this.utcOffset() > this.clone().month(5).utcOffset()                                                         // 2960\n    );                                                                                                               // 2961\n}                                                                                                                    // 2962\n                                                                                                                     // 2963\nfunction isDaylightSavingTimeShifted () {                                                                            // 2964\n    if (!isUndefined(this._isDSTShifted)) {                                                                          // 2965\n        return this._isDSTShifted;                                                                                   // 2966\n    }                                                                                                                // 2967\n                                                                                                                     // 2968\n    var c = {};                                                                                                      // 2969\n                                                                                                                     // 2970\n    copyConfig(c, this);                                                                                             // 2971\n    c = prepareConfig(c);                                                                                            // 2972\n                                                                                                                     // 2973\n    if (c._a) {                                                                                                      // 2974\n        var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);                                                  // 2975\n        this._isDSTShifted = this.isValid() &&                                                                       // 2976\n            compareArrays(c._a, other.toArray()) > 0;                                                                // 2977\n    } else {                                                                                                         // 2978\n        this._isDSTShifted = false;                                                                                  // 2979\n    }                                                                                                                // 2980\n                                                                                                                     // 2981\n    return this._isDSTShifted;                                                                                       // 2982\n}                                                                                                                    // 2983\n                                                                                                                     // 2984\nfunction isLocal () {                                                                                                // 2985\n    return this.isValid() ? !this._isUTC : false;                                                                    // 2986\n}                                                                                                                    // 2987\n                                                                                                                     // 2988\nfunction isUtcOffset () {                                                                                            // 2989\n    return this.isValid() ? this._isUTC : false;                                                                     // 2990\n}                                                                                                                    // 2991\n                                                                                                                     // 2992\nfunction isUtc () {                                                                                                  // 2993\n    return this.isValid() ? this._isUTC && this._offset === 0 : false;                                               // 2994\n}                                                                                                                    // 2995\n                                                                                                                     // 2996\n// ASP.NET json date format regex                                                                                    // 2997\nvar aspNetRegex = /^(\\-|\\+)?(?:(\\d*)[. ])?(\\d+)\\:(\\d+)(?:\\:(\\d+)(\\.\\d*)?)?$/;                                        // 2998\n                                                                                                                     // 2999\n// from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html                         // 3000\n// somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere                                         // 3001\n// and further modified to allow for strings containing both week and day                                            // 3002\nvar isoRegex = /^(-|\\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;\n                                                                                                                     // 3004\nfunction createDuration (input, key) {                                                                               // 3005\n    var duration = input,                                                                                            // 3006\n        // matching against regexp is expensive, do it on demand                                                     // 3007\n        match = null,                                                                                                // 3008\n        sign,                                                                                                        // 3009\n        ret,                                                                                                         // 3010\n        diffRes;                                                                                                     // 3011\n                                                                                                                     // 3012\n    if (isDuration(input)) {                                                                                         // 3013\n        duration = {                                                                                                 // 3014\n            ms : input._milliseconds,                                                                                // 3015\n            d  : input._days,                                                                                        // 3016\n            M  : input._months                                                                                       // 3017\n        };                                                                                                           // 3018\n    } else if (isNumber(input)) {                                                                                    // 3019\n        duration = {};                                                                                               // 3020\n        if (key) {                                                                                                   // 3021\n            duration[key] = input;                                                                                   // 3022\n        } else {                                                                                                     // 3023\n            duration.milliseconds = input;                                                                           // 3024\n        }                                                                                                            // 3025\n    } else if (!!(match = aspNetRegex.exec(input))) {                                                                // 3026\n        sign = (match[1] === '-') ? -1 : 1;                                                                          // 3027\n        duration = {                                                                                                 // 3028\n            y  : 0,                                                                                                  // 3029\n            d  : toInt(match[DATE])                         * sign,                                                  // 3030\n            h  : toInt(match[HOUR])                         * sign,                                                  // 3031\n            m  : toInt(match[MINUTE])                       * sign,                                                  // 3032\n            s  : toInt(match[SECOND])                       * sign,                                                  // 3033\n            ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match\n        };                                                                                                           // 3035\n    } else if (!!(match = isoRegex.exec(input))) {                                                                   // 3036\n        sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;                                                 // 3037\n        duration = {                                                                                                 // 3038\n            y : parseIso(match[2], sign),                                                                            // 3039\n            M : parseIso(match[3], sign),                                                                            // 3040\n            w : parseIso(match[4], sign),                                                                            // 3041\n            d : parseIso(match[5], sign),                                                                            // 3042\n            h : parseIso(match[6], sign),                                                                            // 3043\n            m : parseIso(match[7], sign),                                                                            // 3044\n            s : parseIso(match[8], sign)                                                                             // 3045\n        };                                                                                                           // 3046\n    } else if (duration == null) {// checks for null or undefined                                                    // 3047\n        duration = {};                                                                                               // 3048\n    } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {                           // 3049\n        diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));                           // 3050\n                                                                                                                     // 3051\n        duration = {};                                                                                               // 3052\n        duration.ms = diffRes.milliseconds;                                                                          // 3053\n        duration.M = diffRes.months;                                                                                 // 3054\n    }                                                                                                                // 3055\n                                                                                                                     // 3056\n    ret = new Duration(duration);                                                                                    // 3057\n                                                                                                                     // 3058\n    if (isDuration(input) && hasOwnProp(input, '_locale')) {                                                         // 3059\n        ret._locale = input._locale;                                                                                 // 3060\n    }                                                                                                                // 3061\n                                                                                                                     // 3062\n    return ret;                                                                                                      // 3063\n}                                                                                                                    // 3064\n                                                                                                                     // 3065\ncreateDuration.fn = Duration.prototype;                                                                              // 3066\ncreateDuration.invalid = createInvalid$1;                                                                            // 3067\n                                                                                                                     // 3068\nfunction parseIso (inp, sign) {                                                                                      // 3069\n    // We'd normally use ~~inp for this, but unfortunately it also                                                   // 3070\n    // converts floats to ints.                                                                                      // 3071\n    // inp may be undefined, so careful calling replace on it.                                                       // 3072\n    var res = inp && parseFloat(inp.replace(',', '.'));                                                              // 3073\n    // apply sign while we're at it                                                                                  // 3074\n    return (isNaN(res) ? 0 : res) * sign;                                                                            // 3075\n}                                                                                                                    // 3076\n                                                                                                                     // 3077\nfunction positiveMomentsDifference(base, other) {                                                                    // 3078\n    var res = {milliseconds: 0, months: 0};                                                                          // 3079\n                                                                                                                     // 3080\n    res.months = other.month() - base.month() +                                                                      // 3081\n        (other.year() - base.year()) * 12;                                                                           // 3082\n    if (base.clone().add(res.months, 'M').isAfter(other)) {                                                          // 3083\n        --res.months;                                                                                                // 3084\n    }                                                                                                                // 3085\n                                                                                                                     // 3086\n    res.milliseconds = +other - +(base.clone().add(res.months, 'M'));                                                // 3087\n                                                                                                                     // 3088\n    return res;                                                                                                      // 3089\n}                                                                                                                    // 3090\n                                                                                                                     // 3091\nfunction momentsDifference(base, other) {                                                                            // 3092\n    var res;                                                                                                         // 3093\n    if (!(base.isValid() && other.isValid())) {                                                                      // 3094\n        return {milliseconds: 0, months: 0};                                                                         // 3095\n    }                                                                                                                // 3096\n                                                                                                                     // 3097\n    other = cloneWithOffset(other, base);                                                                            // 3098\n    if (base.isBefore(other)) {                                                                                      // 3099\n        res = positiveMomentsDifference(base, other);                                                                // 3100\n    } else {                                                                                                         // 3101\n        res = positiveMomentsDifference(other, base);                                                                // 3102\n        res.milliseconds = -res.milliseconds;                                                                        // 3103\n        res.months = -res.months;                                                                                    // 3104\n    }                                                                                                                // 3105\n                                                                                                                     // 3106\n    return res;                                                                                                      // 3107\n}                                                                                                                    // 3108\n                                                                                                                     // 3109\n// TODO: remove 'name' arg after deprecation is removed                                                              // 3110\nfunction createAdder(direction, name) {                                                                              // 3111\n    return function (val, period) {                                                                                  // 3112\n        var dur, tmp;                                                                                                // 3113\n        //invert the arguments, but complain about it                                                                // 3114\n        if (period !== null && !isNaN(+period)) {                                                                    // 3115\n            deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +\n            'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');                         // 3117\n            tmp = val; val = period; period = tmp;                                                                   // 3118\n        }                                                                                                            // 3119\n                                                                                                                     // 3120\n        val = typeof val === 'string' ? +val : val;                                                                  // 3121\n        dur = createDuration(val, period);                                                                           // 3122\n        addSubtract(this, dur, direction);                                                                           // 3123\n        return this;                                                                                                 // 3124\n    };                                                                                                               // 3125\n}                                                                                                                    // 3126\n                                                                                                                     // 3127\nfunction addSubtract (mom, duration, isAdding, updateOffset) {                                                       // 3128\n    var milliseconds = duration._milliseconds,                                                                       // 3129\n        days = absRound(duration._days),                                                                             // 3130\n        months = absRound(duration._months);                                                                         // 3131\n                                                                                                                     // 3132\n    if (!mom.isValid()) {                                                                                            // 3133\n        // No op                                                                                                     // 3134\n        return;                                                                                                      // 3135\n    }                                                                                                                // 3136\n                                                                                                                     // 3137\n    updateOffset = updateOffset == null ? true : updateOffset;                                                       // 3138\n                                                                                                                     // 3139\n    if (months) {                                                                                                    // 3140\n        setMonth(mom, get(mom, 'Month') + months * isAdding);                                                        // 3141\n    }                                                                                                                // 3142\n    if (days) {                                                                                                      // 3143\n        set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);                                                      // 3144\n    }                                                                                                                // 3145\n    if (milliseconds) {                                                                                              // 3146\n        mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);                                                  // 3147\n    }                                                                                                                // 3148\n    if (updateOffset) {                                                                                              // 3149\n        hooks.updateOffset(mom, days || months);                                                                     // 3150\n    }                                                                                                                // 3151\n}                                                                                                                    // 3152\n                                                                                                                     // 3153\nvar add      = createAdder(1, 'add');                                                                                // 3154\nvar subtract = createAdder(-1, 'subtract');                                                                          // 3155\n                                                                                                                     // 3156\nfunction getCalendarFormat(myMoment, now) {                                                                          // 3157\n    var diff = myMoment.diff(now, 'days', true);                                                                     // 3158\n    return diff < -6 ? 'sameElse' :                                                                                  // 3159\n            diff < -1 ? 'lastWeek' :                                                                                 // 3160\n            diff < 0 ? 'lastDay' :                                                                                   // 3161\n            diff < 1 ? 'sameDay' :                                                                                   // 3162\n            diff < 2 ? 'nextDay' :                                                                                   // 3163\n            diff < 7 ? 'nextWeek' : 'sameElse';                                                                      // 3164\n}                                                                                                                    // 3165\n                                                                                                                     // 3166\nfunction calendar$1 (time, formats) {                                                                                // 3167\n    // We want to compare the start of today, vs this.                                                               // 3168\n    // Getting start-of-today depends on whether we're local/utc/offset or not.                                      // 3169\n    var now = time || createLocal(),                                                                                 // 3170\n        sod = cloneWithOffset(now, this).startOf('day'),                                                             // 3171\n        format = hooks.calendarFormat(this, sod) || 'sameElse';                                                      // 3172\n                                                                                                                     // 3173\n    var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);       // 3174\n                                                                                                                     // 3175\n    return this.format(output || this.localeData().calendar(format, this, createLocal(now)));                        // 3176\n}                                                                                                                    // 3177\n                                                                                                                     // 3178\nfunction clone () {                                                                                                  // 3179\n    return new Moment(this);                                                                                         // 3180\n}                                                                                                                    // 3181\n                                                                                                                     // 3182\nfunction isAfter (input, units) {                                                                                    // 3183\n    var localInput = isMoment(input) ? input : createLocal(input);                                                   // 3184\n    if (!(this.isValid() && localInput.isValid())) {                                                                 // 3185\n        return false;                                                                                                // 3186\n    }                                                                                                                // 3187\n    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                             // 3188\n    if (units === 'millisecond') {                                                                                   // 3189\n        return this.valueOf() > localInput.valueOf();                                                                // 3190\n    } else {                                                                                                         // 3191\n        return localInput.valueOf() < this.clone().startOf(units).valueOf();                                         // 3192\n    }                                                                                                                // 3193\n}                                                                                                                    // 3194\n                                                                                                                     // 3195\nfunction isBefore (input, units) {                                                                                   // 3196\n    var localInput = isMoment(input) ? input : createLocal(input);                                                   // 3197\n    if (!(this.isValid() && localInput.isValid())) {                                                                 // 3198\n        return false;                                                                                                // 3199\n    }                                                                                                                // 3200\n    units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');                                             // 3201\n    if (units === 'millisecond') {                                                                                   // 3202\n        return this.valueOf() < localInput.valueOf();                                                                // 3203\n    } else {                                                                                                         // 3204\n        return this.clone().endOf(units).valueOf() < localInput.valueOf();                                           // 3205\n    }                                                                                                                // 3206\n}                                                                                                                    // 3207\n                                                                                                                     // 3208\nfunction isBetween (from, to, units, inclusivity) {                                                                  // 3209\n    inclusivity = inclusivity || '()';                                                                               // 3210\n    return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&                     // 3211\n        (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));                              // 3212\n}                                                                                                                    // 3213\n                                                                                                                     // 3214\nfunction isSame (input, units) {                                                                                     // 3215\n    var localInput = isMoment(input) ? input : createLocal(input),                                                   // 3216\n        inputMs;                                                                                                     // 3217\n    if (!(this.isValid() && localInput.isValid())) {                                                                 // 3218\n        return false;                                                                                                // 3219\n    }                                                                                                                // 3220\n    units = normalizeUnits(units || 'millisecond');                                                                  // 3221\n    if (units === 'millisecond') {                                                                                   // 3222\n        return this.valueOf() === localInput.valueOf();                                                              // 3223\n    } else {                                                                                                         // 3224\n        inputMs = localInput.valueOf();                                                                              // 3225\n        return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();   // 3226\n    }                                                                                                                // 3227\n}                                                                                                                    // 3228\n                                                                                                                     // 3229\nfunction isSameOrAfter (input, units) {                                                                              // 3230\n    return this.isSame(input, units) || this.isAfter(input,units);                                                   // 3231\n}                                                                                                                    // 3232\n                                                                                                                     // 3233\nfunction isSameOrBefore (input, units) {                                                                             // 3234\n    return this.isSame(input, units) || this.isBefore(input,units);                                                  // 3235\n}                                                                                                                    // 3236\n                                                                                                                     // 3237\nfunction diff (input, units, asFloat) {                                                                              // 3238\n    var that,                                                                                                        // 3239\n        zoneDelta,                                                                                                   // 3240\n        delta, output;                                                                                               // 3241\n                                                                                                                     // 3242\n    if (!this.isValid()) {                                                                                           // 3243\n        return NaN;                                                                                                  // 3244\n    }                                                                                                                // 3245\n                                                                                                                     // 3246\n    that = cloneWithOffset(input, this);                                                                             // 3247\n                                                                                                                     // 3248\n    if (!that.isValid()) {                                                                                           // 3249\n        return NaN;                                                                                                  // 3250\n    }                                                                                                                // 3251\n                                                                                                                     // 3252\n    zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;                                                         // 3253\n                                                                                                                     // 3254\n    units = normalizeUnits(units);                                                                                   // 3255\n                                                                                                                     // 3256\n    switch (units) {                                                                                                 // 3257\n        case 'year': output = monthDiff(this, that) / 12; break;                                                     // 3258\n        case 'month': output = monthDiff(this, that); break;                                                         // 3259\n        case 'quarter': output = monthDiff(this, that) / 3; break;                                                   // 3260\n        case 'second': output = (this - that) / 1e3; break; // 1000                                                  // 3261\n        case 'minute': output = (this - that) / 6e4; break; // 1000 * 60                                             // 3262\n        case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60                                         // 3263\n        case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst            // 3264\n        case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst      // 3265\n        default: output = this - that;                                                                               // 3266\n    }                                                                                                                // 3267\n                                                                                                                     // 3268\n    return asFloat ? output : absFloor(output);                                                                      // 3269\n}                                                                                                                    // 3270\n                                                                                                                     // 3271\nfunction monthDiff (a, b) {                                                                                          // 3272\n    // difference in months                                                                                          // 3273\n    var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),                                     // 3274\n        // b is in (anchor - 1 month, anchor + 1 month)                                                              // 3275\n        anchor = a.clone().add(wholeMonthDiff, 'months'),                                                            // 3276\n        anchor2, adjust;                                                                                             // 3277\n                                                                                                                     // 3278\n    if (b - anchor < 0) {                                                                                            // 3279\n        anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');                                                       // 3280\n        // linear across the month                                                                                   // 3281\n        adjust = (b - anchor) / (anchor - anchor2);                                                                  // 3282\n    } else {                                                                                                         // 3283\n        anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');                                                       // 3284\n        // linear across the month                                                                                   // 3285\n        adjust = (b - anchor) / (anchor2 - anchor);                                                                  // 3286\n    }                                                                                                                // 3287\n                                                                                                                     // 3288\n    //check for negative zero, return zero if negative zero                                                          // 3289\n    return -(wholeMonthDiff + adjust) || 0;                                                                          // 3290\n}                                                                                                                    // 3291\n                                                                                                                     // 3292\nhooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';                                                                        // 3293\nhooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';                                                                   // 3294\n                                                                                                                     // 3295\nfunction toString () {                                                                                               // 3296\n    return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');                                     // 3297\n}                                                                                                                    // 3298\n                                                                                                                     // 3299\nfunction toISOString() {                                                                                             // 3300\n    if (!this.isValid()) {                                                                                           // 3301\n        return null;                                                                                                 // 3302\n    }                                                                                                                // 3303\n    var m = this.clone().utc();                                                                                      // 3304\n    if (m.year() < 0 || m.year() > 9999) {                                                                           // 3305\n        return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                    // 3306\n    }                                                                                                                // 3307\n    if (isFunction(Date.prototype.toISOString)) {                                                                    // 3308\n        // native implementation is ~50x faster, use it when we can                                                  // 3309\n        return this.toDate().toISOString();                                                                          // 3310\n    }                                                                                                                // 3311\n    return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');                                                          // 3312\n}                                                                                                                    // 3313\n                                                                                                                     // 3314\n/**                                                                                                                  // 3315\n * Return a human readable representation of a moment that can                                                       // 3316\n * also be evaluated to get a new moment which is the same                                                           // 3317\n *                                                                                                                   // 3318\n * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects                   // 3319\n */                                                                                                                  // 3320\nfunction inspect () {                                                                                                // 3321\n    if (!this.isValid()) {                                                                                           // 3322\n        return 'moment.invalid(/* ' + this._i + ' */)';                                                              // 3323\n    }                                                                                                                // 3324\n    var func = 'moment';                                                                                             // 3325\n    var zone = '';                                                                                                   // 3326\n    if (!this.isLocal()) {                                                                                           // 3327\n        func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';                                           // 3328\n        zone = 'Z';                                                                                                  // 3329\n    }                                                                                                                // 3330\n    var prefix = '[' + func + '(\"]';                                                                                 // 3331\n    var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';                                        // 3332\n    var datetime = '-MM-DD[T]HH:mm:ss.SSS';                                                                          // 3333\n    var suffix = zone + '[\")]';                                                                                      // 3334\n                                                                                                                     // 3335\n    return this.format(prefix + year + datetime + suffix);                                                           // 3336\n}                                                                                                                    // 3337\n                                                                                                                     // 3338\nfunction format (inputString) {                                                                                      // 3339\n    if (!inputString) {                                                                                              // 3340\n        inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;                                   // 3341\n    }                                                                                                                // 3342\n    var output = formatMoment(this, inputString);                                                                    // 3343\n    return this.localeData().postformat(output);                                                                     // 3344\n}                                                                                                                    // 3345\n                                                                                                                     // 3346\nfunction from (time, withoutSuffix) {                                                                                // 3347\n    if (this.isValid() &&                                                                                            // 3348\n            ((isMoment(time) && time.isValid()) ||                                                                   // 3349\n             createLocal(time).isValid())) {                                                                         // 3350\n        return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);                // 3351\n    } else {                                                                                                         // 3352\n        return this.localeData().invalidDate();                                                                      // 3353\n    }                                                                                                                // 3354\n}                                                                                                                    // 3355\n                                                                                                                     // 3356\nfunction fromNow (withoutSuffix) {                                                                                   // 3357\n    return this.from(createLocal(), withoutSuffix);                                                                  // 3358\n}                                                                                                                    // 3359\n                                                                                                                     // 3360\nfunction to (time, withoutSuffix) {                                                                                  // 3361\n    if (this.isValid() &&                                                                                            // 3362\n            ((isMoment(time) && time.isValid()) ||                                                                   // 3363\n             createLocal(time).isValid())) {                                                                         // 3364\n        return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);                // 3365\n    } else {                                                                                                         // 3366\n        return this.localeData().invalidDate();                                                                      // 3367\n    }                                                                                                                // 3368\n}                                                                                                                    // 3369\n                                                                                                                     // 3370\nfunction toNow (withoutSuffix) {                                                                                     // 3371\n    return this.to(createLocal(), withoutSuffix);                                                                    // 3372\n}                                                                                                                    // 3373\n                                                                                                                     // 3374\n// If passed a locale key, it will set the locale for this                                                           // 3375\n// instance.  Otherwise, it will return the locale configuration                                                     // 3376\n// variables for this instance.                                                                                      // 3377\nfunction locale (key) {                                                                                              // 3378\n    var newLocaleData;                                                                                               // 3379\n                                                                                                                     // 3380\n    if (key === undefined) {                                                                                         // 3381\n        return this._locale._abbr;                                                                                   // 3382\n    } else {                                                                                                         // 3383\n        newLocaleData = getLocale(key);                                                                              // 3384\n        if (newLocaleData != null) {                                                                                 // 3385\n            this._locale = newLocaleData;                                                                            // 3386\n        }                                                                                                            // 3387\n        return this;                                                                                                 // 3388\n    }                                                                                                                // 3389\n}                                                                                                                    // 3390\n                                                                                                                     // 3391\nvar lang = deprecate(                                                                                                // 3392\n    'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',\n    function (key) {                                                                                                 // 3394\n        if (key === undefined) {                                                                                     // 3395\n            return this.localeData();                                                                                // 3396\n        } else {                                                                                                     // 3397\n            return this.locale(key);                                                                                 // 3398\n        }                                                                                                            // 3399\n    }                                                                                                                // 3400\n);                                                                                                                   // 3401\n                                                                                                                     // 3402\nfunction localeData () {                                                                                             // 3403\n    return this._locale;                                                                                             // 3404\n}                                                                                                                    // 3405\n                                                                                                                     // 3406\nfunction startOf (units) {                                                                                           // 3407\n    units = normalizeUnits(units);                                                                                   // 3408\n    // the following switch intentionally omits break keywords                                                       // 3409\n    // to utilize falling through the cases.                                                                         // 3410\n    switch (units) {                                                                                                 // 3411\n        case 'year':                                                                                                 // 3412\n            this.month(0);                                                                                           // 3413\n            /* falls through */                                                                                      // 3414\n        case 'quarter':                                                                                              // 3415\n        case 'month':                                                                                                // 3416\n            this.date(1);                                                                                            // 3417\n            /* falls through */                                                                                      // 3418\n        case 'week':                                                                                                 // 3419\n        case 'isoWeek':                                                                                              // 3420\n        case 'day':                                                                                                  // 3421\n        case 'date':                                                                                                 // 3422\n            this.hours(0);                                                                                           // 3423\n            /* falls through */                                                                                      // 3424\n        case 'hour':                                                                                                 // 3425\n            this.minutes(0);                                                                                         // 3426\n            /* falls through */                                                                                      // 3427\n        case 'minute':                                                                                               // 3428\n            this.seconds(0);                                                                                         // 3429\n            /* falls through */                                                                                      // 3430\n        case 'second':                                                                                               // 3431\n            this.milliseconds(0);                                                                                    // 3432\n    }                                                                                                                // 3433\n                                                                                                                     // 3434\n    // weeks are a special case                                                                                      // 3435\n    if (units === 'week') {                                                                                          // 3436\n        this.weekday(0);                                                                                             // 3437\n    }                                                                                                                // 3438\n    if (units === 'isoWeek') {                                                                                       // 3439\n        this.isoWeekday(1);                                                                                          // 3440\n    }                                                                                                                // 3441\n                                                                                                                     // 3442\n    // quarters are also special                                                                                     // 3443\n    if (units === 'quarter') {                                                                                       // 3444\n        this.month(Math.floor(this.month() / 3) * 3);                                                                // 3445\n    }                                                                                                                // 3446\n                                                                                                                     // 3447\n    return this;                                                                                                     // 3448\n}                                                                                                                    // 3449\n                                                                                                                     // 3450\nfunction endOf (units) {                                                                                             // 3451\n    units = normalizeUnits(units);                                                                                   // 3452\n    if (units === undefined || units === 'millisecond') {                                                            // 3453\n        return this;                                                                                                 // 3454\n    }                                                                                                                // 3455\n                                                                                                                     // 3456\n    // 'date' is an alias for 'day', so it should be considered as such.                                             // 3457\n    if (units === 'date') {                                                                                          // 3458\n        units = 'day';                                                                                               // 3459\n    }                                                                                                                // 3460\n                                                                                                                     // 3461\n    return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');                     // 3462\n}                                                                                                                    // 3463\n                                                                                                                     // 3464\nfunction valueOf () {                                                                                                // 3465\n    return this._d.valueOf() - ((this._offset || 0) * 60000);                                                        // 3466\n}                                                                                                                    // 3467\n                                                                                                                     // 3468\nfunction unix () {                                                                                                   // 3469\n    return Math.floor(this.valueOf() / 1000);                                                                        // 3470\n}                                                                                                                    // 3471\n                                                                                                                     // 3472\nfunction toDate () {                                                                                                 // 3473\n    return new Date(this.valueOf());                                                                                 // 3474\n}                                                                                                                    // 3475\n                                                                                                                     // 3476\nfunction toArray () {                                                                                                // 3477\n    var m = this;                                                                                                    // 3478\n    return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];                       // 3479\n}                                                                                                                    // 3480\n                                                                                                                     // 3481\nfunction toObject () {                                                                                               // 3482\n    var m = this;                                                                                                    // 3483\n    return {                                                                                                         // 3484\n        years: m.year(),                                                                                             // 3485\n        months: m.month(),                                                                                           // 3486\n        date: m.date(),                                                                                              // 3487\n        hours: m.hours(),                                                                                            // 3488\n        minutes: m.minutes(),                                                                                        // 3489\n        seconds: m.seconds(),                                                                                        // 3490\n        milliseconds: m.milliseconds()                                                                               // 3491\n    };                                                                                                               // 3492\n}                                                                                                                    // 3493\n                                                                                                                     // 3494\nfunction toJSON () {                                                                                                 // 3495\n    // new Date(NaN).toJSON() === null                                                                               // 3496\n    return this.isValid() ? this.toISOString() : null;                                                               // 3497\n}                                                                                                                    // 3498\n                                                                                                                     // 3499\nfunction isValid$2 () {                                                                                              // 3500\n    return isValid(this);                                                                                            // 3501\n}                                                                                                                    // 3502\n                                                                                                                     // 3503\nfunction parsingFlags () {                                                                                           // 3504\n    return extend({}, getParsingFlags(this));                                                                        // 3505\n}                                                                                                                    // 3506\n                                                                                                                     // 3507\nfunction invalidAt () {                                                                                              // 3508\n    return getParsingFlags(this).overflow;                                                                           // 3509\n}                                                                                                                    // 3510\n                                                                                                                     // 3511\nfunction creationData() {                                                                                            // 3512\n    return {                                                                                                         // 3513\n        input: this._i,                                                                                              // 3514\n        format: this._f,                                                                                             // 3515\n        locale: this._locale,                                                                                        // 3516\n        isUTC: this._isUTC,                                                                                          // 3517\n        strict: this._strict                                                                                         // 3518\n    };                                                                                                               // 3519\n}                                                                                                                    // 3520\n                                                                                                                     // 3521\n// FORMATTING                                                                                                        // 3522\n                                                                                                                     // 3523\naddFormatToken(0, ['gg', 2], 0, function () {                                                                        // 3524\n    return this.weekYear() % 100;                                                                                    // 3525\n});                                                                                                                  // 3526\n                                                                                                                     // 3527\naddFormatToken(0, ['GG', 2], 0, function () {                                                                        // 3528\n    return this.isoWeekYear() % 100;                                                                                 // 3529\n});                                                                                                                  // 3530\n                                                                                                                     // 3531\nfunction addWeekYearFormatToken (token, getter) {                                                                    // 3532\n    addFormatToken(0, [token, token.length], 0, getter);                                                             // 3533\n}                                                                                                                    // 3534\n                                                                                                                     // 3535\naddWeekYearFormatToken('gggg',     'weekYear');                                                                      // 3536\naddWeekYearFormatToken('ggggg',    'weekYear');                                                                      // 3537\naddWeekYearFormatToken('GGGG',  'isoWeekYear');                                                                      // 3538\naddWeekYearFormatToken('GGGGG', 'isoWeekYear');                                                                      // 3539\n                                                                                                                     // 3540\n// ALIASES                                                                                                           // 3541\n                                                                                                                     // 3542\naddUnitAlias('weekYear', 'gg');                                                                                      // 3543\naddUnitAlias('isoWeekYear', 'GG');                                                                                   // 3544\n                                                                                                                     // 3545\n// PRIORITY                                                                                                          // 3546\n                                                                                                                     // 3547\naddUnitPriority('weekYear', 1);                                                                                      // 3548\naddUnitPriority('isoWeekYear', 1);                                                                                   // 3549\n                                                                                                                     // 3550\n                                                                                                                     // 3551\n// PARSING                                                                                                           // 3552\n                                                                                                                     // 3553\naddRegexToken('G',      matchSigned);                                                                                // 3554\naddRegexToken('g',      matchSigned);                                                                                // 3555\naddRegexToken('GG',     match1to2, match2);                                                                          // 3556\naddRegexToken('gg',     match1to2, match2);                                                                          // 3557\naddRegexToken('GGGG',   match1to4, match4);                                                                          // 3558\naddRegexToken('gggg',   match1to4, match4);                                                                          // 3559\naddRegexToken('GGGGG',  match1to6, match6);                                                                          // 3560\naddRegexToken('ggggg',  match1to6, match6);                                                                          // 3561\n                                                                                                                     // 3562\naddWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {                        // 3563\n    week[token.substr(0, 2)] = toInt(input);                                                                         // 3564\n});                                                                                                                  // 3565\n                                                                                                                     // 3566\naddWeekParseToken(['gg', 'GG'], function (input, week, config, token) {                                              // 3567\n    week[token] = hooks.parseTwoDigitYear(input);                                                                    // 3568\n});                                                                                                                  // 3569\n                                                                                                                     // 3570\n// MOMENTS                                                                                                           // 3571\n                                                                                                                     // 3572\nfunction getSetWeekYear (input) {                                                                                    // 3573\n    return getSetWeekYearHelper.call(this,                                                                           // 3574\n            input,                                                                                                   // 3575\n            this.week(),                                                                                             // 3576\n            this.weekday(),                                                                                          // 3577\n            this.localeData()._week.dow,                                                                             // 3578\n            this.localeData()._week.doy);                                                                            // 3579\n}                                                                                                                    // 3580\n                                                                                                                     // 3581\nfunction getSetISOWeekYear (input) {                                                                                 // 3582\n    return getSetWeekYearHelper.call(this,                                                                           // 3583\n            input, this.isoWeek(), this.isoWeekday(), 1, 4);                                                         // 3584\n}                                                                                                                    // 3585\n                                                                                                                     // 3586\nfunction getISOWeeksInYear () {                                                                                      // 3587\n    return weeksInYear(this.year(), 1, 4);                                                                           // 3588\n}                                                                                                                    // 3589\n                                                                                                                     // 3590\nfunction getWeeksInYear () {                                                                                         // 3591\n    var weekInfo = this.localeData()._week;                                                                          // 3592\n    return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);                                                     // 3593\n}                                                                                                                    // 3594\n                                                                                                                     // 3595\nfunction getSetWeekYearHelper(input, week, weekday, dow, doy) {                                                      // 3596\n    var weeksTarget;                                                                                                 // 3597\n    if (input == null) {                                                                                             // 3598\n        return weekOfYear(this, dow, doy).year;                                                                      // 3599\n    } else {                                                                                                         // 3600\n        weeksTarget = weeksInYear(input, dow, doy);                                                                  // 3601\n        if (week > weeksTarget) {                                                                                    // 3602\n            week = weeksTarget;                                                                                      // 3603\n        }                                                                                                            // 3604\n        return setWeekAll.call(this, input, week, weekday, dow, doy);                                                // 3605\n    }                                                                                                                // 3606\n}                                                                                                                    // 3607\n                                                                                                                     // 3608\nfunction setWeekAll(weekYear, week, weekday, dow, doy) {                                                             // 3609\n    var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),                                       // 3610\n        date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);                                        // 3611\n                                                                                                                     // 3612\n    this.year(date.getUTCFullYear());                                                                                // 3613\n    this.month(date.getUTCMonth());                                                                                  // 3614\n    this.date(date.getUTCDate());                                                                                    // 3615\n    return this;                                                                                                     // 3616\n}                                                                                                                    // 3617\n                                                                                                                     // 3618\n// FORMATTING                                                                                                        // 3619\n                                                                                                                     // 3620\naddFormatToken('Q', 0, 'Qo', 'quarter');                                                                             // 3621\n                                                                                                                     // 3622\n// ALIASES                                                                                                           // 3623\n                                                                                                                     // 3624\naddUnitAlias('quarter', 'Q');                                                                                        // 3625\n                                                                                                                     // 3626\n// PRIORITY                                                                                                          // 3627\n                                                                                                                     // 3628\naddUnitPriority('quarter', 7);                                                                                       // 3629\n                                                                                                                     // 3630\n// PARSING                                                                                                           // 3631\n                                                                                                                     // 3632\naddRegexToken('Q', match1);                                                                                          // 3633\naddParseToken('Q', function (input, array) {                                                                         // 3634\n    array[MONTH] = (toInt(input) - 1) * 3;                                                                           // 3635\n});                                                                                                                  // 3636\n                                                                                                                     // 3637\n// MOMENTS                                                                                                           // 3638\n                                                                                                                     // 3639\nfunction getSetQuarter (input) {                                                                                     // 3640\n    return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);       // 3641\n}                                                                                                                    // 3642\n                                                                                                                     // 3643\n// FORMATTING                                                                                                        // 3644\n                                                                                                                     // 3645\naddFormatToken('D', ['DD', 2], 'Do', 'date');                                                                        // 3646\n                                                                                                                     // 3647\n// ALIASES                                                                                                           // 3648\n                                                                                                                     // 3649\naddUnitAlias('date', 'D');                                                                                           // 3650\n                                                                                                                     // 3651\n// PRIOROITY                                                                                                         // 3652\naddUnitPriority('date', 9);                                                                                          // 3653\n                                                                                                                     // 3654\n// PARSING                                                                                                           // 3655\n                                                                                                                     // 3656\naddRegexToken('D',  match1to2);                                                                                      // 3657\naddRegexToken('DD', match1to2, match2);                                                                              // 3658\naddRegexToken('Do', function (isStrict, locale) {                                                                    // 3659\n    // TODO: Remove \"ordinalParse\" fallback in next major release.                                                   // 3660\n    return isStrict ?                                                                                                // 3661\n      (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :                                                     // 3662\n      locale._dayOfMonthOrdinalParseLenient;                                                                         // 3663\n});                                                                                                                  // 3664\n                                                                                                                     // 3665\naddParseToken(['D', 'DD'], DATE);                                                                                    // 3666\naddParseToken('Do', function (input, array) {                                                                        // 3667\n    array[DATE] = toInt(input.match(match1to2)[0], 10);                                                              // 3668\n});                                                                                                                  // 3669\n                                                                                                                     // 3670\n// MOMENTS                                                                                                           // 3671\n                                                                                                                     // 3672\nvar getSetDayOfMonth = makeGetSet('Date', true);                                                                     // 3673\n                                                                                                                     // 3674\n// FORMATTING                                                                                                        // 3675\n                                                                                                                     // 3676\naddFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');                                                             // 3677\n                                                                                                                     // 3678\n// ALIASES                                                                                                           // 3679\n                                                                                                                     // 3680\naddUnitAlias('dayOfYear', 'DDD');                                                                                    // 3681\n                                                                                                                     // 3682\n// PRIORITY                                                                                                          // 3683\naddUnitPriority('dayOfYear', 4);                                                                                     // 3684\n                                                                                                                     // 3685\n// PARSING                                                                                                           // 3686\n                                                                                                                     // 3687\naddRegexToken('DDD',  match1to3);                                                                                    // 3688\naddRegexToken('DDDD', match3);                                                                                       // 3689\naddParseToken(['DDD', 'DDDD'], function (input, array, config) {                                                     // 3690\n    config._dayOfYear = toInt(input);                                                                                // 3691\n});                                                                                                                  // 3692\n                                                                                                                     // 3693\n// HELPERS                                                                                                           // 3694\n                                                                                                                     // 3695\n// MOMENTS                                                                                                           // 3696\n                                                                                                                     // 3697\nfunction getSetDayOfYear (input) {                                                                                   // 3698\n    var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;            // 3699\n    return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');                                           // 3700\n}                                                                                                                    // 3701\n                                                                                                                     // 3702\n// FORMATTING                                                                                                        // 3703\n                                                                                                                     // 3704\naddFormatToken('m', ['mm', 2], 0, 'minute');                                                                         // 3705\n                                                                                                                     // 3706\n// ALIASES                                                                                                           // 3707\n                                                                                                                     // 3708\naddUnitAlias('minute', 'm');                                                                                         // 3709\n                                                                                                                     // 3710\n// PRIORITY                                                                                                          // 3711\n                                                                                                                     // 3712\naddUnitPriority('minute', 14);                                                                                       // 3713\n                                                                                                                     // 3714\n// PARSING                                                                                                           // 3715\n                                                                                                                     // 3716\naddRegexToken('m',  match1to2);                                                                                      // 3717\naddRegexToken('mm', match1to2, match2);                                                                              // 3718\naddParseToken(['m', 'mm'], MINUTE);                                                                                  // 3719\n                                                                                                                     // 3720\n// MOMENTS                                                                                                           // 3721\n                                                                                                                     // 3722\nvar getSetMinute = makeGetSet('Minutes', false);                                                                     // 3723\n                                                                                                                     // 3724\n// FORMATTING                                                                                                        // 3725\n                                                                                                                     // 3726\naddFormatToken('s', ['ss', 2], 0, 'second');                                                                         // 3727\n                                                                                                                     // 3728\n// ALIASES                                                                                                           // 3729\n                                                                                                                     // 3730\naddUnitAlias('second', 's');                                                                                         // 3731\n                                                                                                                     // 3732\n// PRIORITY                                                                                                          // 3733\n                                                                                                                     // 3734\naddUnitPriority('second', 15);                                                                                       // 3735\n                                                                                                                     // 3736\n// PARSING                                                                                                           // 3737\n                                                                                                                     // 3738\naddRegexToken('s',  match1to2);                                                                                      // 3739\naddRegexToken('ss', match1to2, match2);                                                                              // 3740\naddParseToken(['s', 'ss'], SECOND);                                                                                  // 3741\n                                                                                                                     // 3742\n// MOMENTS                                                                                                           // 3743\n                                                                                                                     // 3744\nvar getSetSecond = makeGetSet('Seconds', false);                                                                     // 3745\n                                                                                                                     // 3746\n// FORMATTING                                                                                                        // 3747\n                                                                                                                     // 3748\naddFormatToken('S', 0, 0, function () {                                                                              // 3749\n    return ~~(this.millisecond() / 100);                                                                             // 3750\n});                                                                                                                  // 3751\n                                                                                                                     // 3752\naddFormatToken(0, ['SS', 2], 0, function () {                                                                        // 3753\n    return ~~(this.millisecond() / 10);                                                                              // 3754\n});                                                                                                                  // 3755\n                                                                                                                     // 3756\naddFormatToken(0, ['SSS', 3], 0, 'millisecond');                                                                     // 3757\naddFormatToken(0, ['SSSS', 4], 0, function () {                                                                      // 3758\n    return this.millisecond() * 10;                                                                                  // 3759\n});                                                                                                                  // 3760\naddFormatToken(0, ['SSSSS', 5], 0, function () {                                                                     // 3761\n    return this.millisecond() * 100;                                                                                 // 3762\n});                                                                                                                  // 3763\naddFormatToken(0, ['SSSSSS', 6], 0, function () {                                                                    // 3764\n    return this.millisecond() * 1000;                                                                                // 3765\n});                                                                                                                  // 3766\naddFormatToken(0, ['SSSSSSS', 7], 0, function () {                                                                   // 3767\n    return this.millisecond() * 10000;                                                                               // 3768\n});                                                                                                                  // 3769\naddFormatToken(0, ['SSSSSSSS', 8], 0, function () {                                                                  // 3770\n    return this.millisecond() * 100000;                                                                              // 3771\n});                                                                                                                  // 3772\naddFormatToken(0, ['SSSSSSSSS', 9], 0, function () {                                                                 // 3773\n    return this.millisecond() * 1000000;                                                                             // 3774\n});                                                                                                                  // 3775\n                                                                                                                     // 3776\n                                                                                                                     // 3777\n// ALIASES                                                                                                           // 3778\n                                                                                                                     // 3779\naddUnitAlias('millisecond', 'ms');                                                                                   // 3780\n                                                                                                                     // 3781\n// PRIORITY                                                                                                          // 3782\n                                                                                                                     // 3783\naddUnitPriority('millisecond', 16);                                                                                  // 3784\n                                                                                                                     // 3785\n// PARSING                                                                                                           // 3786\n                                                                                                                     // 3787\naddRegexToken('S',    match1to3, match1);                                                                            // 3788\naddRegexToken('SS',   match1to3, match2);                                                                            // 3789\naddRegexToken('SSS',  match1to3, match3);                                                                            // 3790\n                                                                                                                     // 3791\nvar token;                                                                                                           // 3792\nfor (token = 'SSSS'; token.length <= 9; token += 'S') {                                                              // 3793\n    addRegexToken(token, matchUnsigned);                                                                             // 3794\n}                                                                                                                    // 3795\n                                                                                                                     // 3796\nfunction parseMs(input, array) {                                                                                     // 3797\n    array[MILLISECOND] = toInt(('0.' + input) * 1000);                                                               // 3798\n}                                                                                                                    // 3799\n                                                                                                                     // 3800\nfor (token = 'S'; token.length <= 9; token += 'S') {                                                                 // 3801\n    addParseToken(token, parseMs);                                                                                   // 3802\n}                                                                                                                    // 3803\n// MOMENTS                                                                                                           // 3804\n                                                                                                                     // 3805\nvar getSetMillisecond = makeGetSet('Milliseconds', false);                                                           // 3806\n                                                                                                                     // 3807\n// FORMATTING                                                                                                        // 3808\n                                                                                                                     // 3809\naddFormatToken('z',  0, 0, 'zoneAbbr');                                                                              // 3810\naddFormatToken('zz', 0, 0, 'zoneName');                                                                              // 3811\n                                                                                                                     // 3812\n// MOMENTS                                                                                                           // 3813\n                                                                                                                     // 3814\nfunction getZoneAbbr () {                                                                                            // 3815\n    return this._isUTC ? 'UTC' : '';                                                                                 // 3816\n}                                                                                                                    // 3817\n                                                                                                                     // 3818\nfunction getZoneName () {                                                                                            // 3819\n    return this._isUTC ? 'Coordinated Universal Time' : '';                                                          // 3820\n}                                                                                                                    // 3821\n                                                                                                                     // 3822\nvar proto = Moment.prototype;                                                                                        // 3823\n                                                                                                                     // 3824\nproto.add               = add;                                                                                       // 3825\nproto.calendar          = calendar$1;                                                                                // 3826\nproto.clone             = clone;                                                                                     // 3827\nproto.diff              = diff;                                                                                      // 3828\nproto.endOf             = endOf;                                                                                     // 3829\nproto.format            = format;                                                                                    // 3830\nproto.from              = from;                                                                                      // 3831\nproto.fromNow           = fromNow;                                                                                   // 3832\nproto.to                = to;                                                                                        // 3833\nproto.toNow             = toNow;                                                                                     // 3834\nproto.get               = stringGet;                                                                                 // 3835\nproto.invalidAt         = invalidAt;                                                                                 // 3836\nproto.isAfter           = isAfter;                                                                                   // 3837\nproto.isBefore          = isBefore;                                                                                  // 3838\nproto.isBetween         = isBetween;                                                                                 // 3839\nproto.isSame            = isSame;                                                                                    // 3840\nproto.isSameOrAfter     = isSameOrAfter;                                                                             // 3841\nproto.isSameOrBefore    = isSameOrBefore;                                                                            // 3842\nproto.isValid           = isValid$2;                                                                                 // 3843\nproto.lang              = lang;                                                                                      // 3844\nproto.locale            = locale;                                                                                    // 3845\nproto.localeData        = localeData;                                                                                // 3846\nproto.max               = prototypeMax;                                                                              // 3847\nproto.min               = prototypeMin;                                                                              // 3848\nproto.parsingFlags      = parsingFlags;                                                                              // 3849\nproto.set               = stringSet;                                                                                 // 3850\nproto.startOf           = startOf;                                                                                   // 3851\nproto.subtract          = subtract;                                                                                  // 3852\nproto.toArray           = toArray;                                                                                   // 3853\nproto.toObject          = toObject;                                                                                  // 3854\nproto.toDate            = toDate;                                                                                    // 3855\nproto.toISOString       = toISOString;                                                                               // 3856\nproto.inspect           = inspect;                                                                                   // 3857\nproto.toJSON            = toJSON;                                                                                    // 3858\nproto.toString          = toString;                                                                                  // 3859\nproto.unix              = unix;                                                                                      // 3860\nproto.valueOf           = valueOf;                                                                                   // 3861\nproto.creationData      = creationData;                                                                              // 3862\n                                                                                                                     // 3863\n// Year                                                                                                              // 3864\nproto.year       = getSetYear;                                                                                       // 3865\nproto.isLeapYear = getIsLeapYear;                                                                                    // 3866\n                                                                                                                     // 3867\n// Week Year                                                                                                         // 3868\nproto.weekYear    = getSetWeekYear;                                                                                  // 3869\nproto.isoWeekYear = getSetISOWeekYear;                                                                               // 3870\n                                                                                                                     // 3871\n// Quarter                                                                                                           // 3872\nproto.quarter = proto.quarters = getSetQuarter;                                                                      // 3873\n                                                                                                                     // 3874\n// Month                                                                                                             // 3875\nproto.month       = getSetMonth;                                                                                     // 3876\nproto.daysInMonth = getDaysInMonth;                                                                                  // 3877\n                                                                                                                     // 3878\n// Week                                                                                                              // 3879\nproto.week           = proto.weeks        = getSetWeek;                                                              // 3880\nproto.isoWeek        = proto.isoWeeks     = getSetISOWeek;                                                           // 3881\nproto.weeksInYear    = getWeeksInYear;                                                                               // 3882\nproto.isoWeeksInYear = getISOWeeksInYear;                                                                            // 3883\n                                                                                                                     // 3884\n// Day                                                                                                               // 3885\nproto.date       = getSetDayOfMonth;                                                                                 // 3886\nproto.day        = proto.days             = getSetDayOfWeek;                                                         // 3887\nproto.weekday    = getSetLocaleDayOfWeek;                                                                            // 3888\nproto.isoWeekday = getSetISODayOfWeek;                                                                               // 3889\nproto.dayOfYear  = getSetDayOfYear;                                                                                  // 3890\n                                                                                                                     // 3891\n// Hour                                                                                                              // 3892\nproto.hour = proto.hours = getSetHour;                                                                               // 3893\n                                                                                                                     // 3894\n// Minute                                                                                                            // 3895\nproto.minute = proto.minutes = getSetMinute;                                                                         // 3896\n                                                                                                                     // 3897\n// Second                                                                                                            // 3898\nproto.second = proto.seconds = getSetSecond;                                                                         // 3899\n                                                                                                                     // 3900\n// Millisecond                                                                                                       // 3901\nproto.millisecond = proto.milliseconds = getSetMillisecond;                                                          // 3902\n                                                                                                                     // 3903\n// Offset                                                                                                            // 3904\nproto.utcOffset            = getSetOffset;                                                                           // 3905\nproto.utc                  = setOffsetToUTC;                                                                         // 3906\nproto.local                = setOffsetToLocal;                                                                       // 3907\nproto.parseZone            = setOffsetToParsedOffset;                                                                // 3908\nproto.hasAlignedHourOffset = hasAlignedHourOffset;                                                                   // 3909\nproto.isDST                = isDaylightSavingTime;                                                                   // 3910\nproto.isLocal              = isLocal;                                                                                // 3911\nproto.isUtcOffset          = isUtcOffset;                                                                            // 3912\nproto.isUtc                = isUtc;                                                                                  // 3913\nproto.isUTC                = isUtc;                                                                                  // 3914\n                                                                                                                     // 3915\n// Timezone                                                                                                          // 3916\nproto.zoneAbbr = getZoneAbbr;                                                                                        // 3917\nproto.zoneName = getZoneName;                                                                                        // 3918\n                                                                                                                     // 3919\n// Deprecations                                                                                                      // 3920\nproto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);                       // 3921\nproto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);                           // 3922\nproto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);                              // 3923\nproto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);\nproto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);\n                                                                                                                     // 3926\nfunction createUnix (input) {                                                                                        // 3927\n    return createLocal(input * 1000);                                                                                // 3928\n}                                                                                                                    // 3929\n                                                                                                                     // 3930\nfunction createInZone () {                                                                                           // 3931\n    return createLocal.apply(null, arguments).parseZone();                                                           // 3932\n}                                                                                                                    // 3933\n                                                                                                                     // 3934\nfunction preParsePostFormat (string) {                                                                               // 3935\n    return string;                                                                                                   // 3936\n}                                                                                                                    // 3937\n                                                                                                                     // 3938\nvar proto$1 = Locale.prototype;                                                                                      // 3939\n                                                                                                                     // 3940\nproto$1.calendar        = calendar;                                                                                  // 3941\nproto$1.longDateFormat  = longDateFormat;                                                                            // 3942\nproto$1.invalidDate     = invalidDate;                                                                               // 3943\nproto$1.ordinal         = ordinal;                                                                                   // 3944\nproto$1.preparse        = preParsePostFormat;                                                                        // 3945\nproto$1.postformat      = preParsePostFormat;                                                                        // 3946\nproto$1.relativeTime    = relativeTime;                                                                              // 3947\nproto$1.pastFuture      = pastFuture;                                                                                // 3948\nproto$1.set             = set;                                                                                       // 3949\n                                                                                                                     // 3950\n// Month                                                                                                             // 3951\nproto$1.months            =        localeMonths;                                                                     // 3952\nproto$1.monthsShort       =        localeMonthsShort;                                                                // 3953\nproto$1.monthsParse       =        localeMonthsParse;                                                                // 3954\nproto$1.monthsRegex       = monthsRegex;                                                                             // 3955\nproto$1.monthsShortRegex  = monthsShortRegex;                                                                        // 3956\n                                                                                                                     // 3957\n// Week                                                                                                              // 3958\nproto$1.week = localeWeek;                                                                                           // 3959\nproto$1.firstDayOfYear = localeFirstDayOfYear;                                                                       // 3960\nproto$1.firstDayOfWeek = localeFirstDayOfWeek;                                                                       // 3961\n                                                                                                                     // 3962\n// Day of Week                                                                                                       // 3963\nproto$1.weekdays       =        localeWeekdays;                                                                      // 3964\nproto$1.weekdaysMin    =        localeWeekdaysMin;                                                                   // 3965\nproto$1.weekdaysShort  =        localeWeekdaysShort;                                                                 // 3966\nproto$1.weekdaysParse  =        localeWeekdaysParse;                                                                 // 3967\n                                                                                                                     // 3968\nproto$1.weekdaysRegex       =        weekdaysRegex;                                                                  // 3969\nproto$1.weekdaysShortRegex  =        weekdaysShortRegex;                                                             // 3970\nproto$1.weekdaysMinRegex    =        weekdaysMinRegex;                                                               // 3971\n                                                                                                                     // 3972\n// Hours                                                                                                             // 3973\nproto$1.isPM = localeIsPM;                                                                                           // 3974\nproto$1.meridiem = localeMeridiem;                                                                                   // 3975\n                                                                                                                     // 3976\nfunction get$1 (format, index, field, setter) {                                                                      // 3977\n    var locale = getLocale();                                                                                        // 3978\n    var utc = createUTC().set(setter, index);                                                                        // 3979\n    return locale[field](utc, format);                                                                               // 3980\n}                                                                                                                    // 3981\n                                                                                                                     // 3982\nfunction listMonthsImpl (format, index, field) {                                                                     // 3983\n    if (isNumber(format)) {                                                                                          // 3984\n        index = format;                                                                                              // 3985\n        format = undefined;                                                                                          // 3986\n    }                                                                                                                // 3987\n                                                                                                                     // 3988\n    format = format || '';                                                                                           // 3989\n                                                                                                                     // 3990\n    if (index != null) {                                                                                             // 3991\n        return get$1(format, index, field, 'month');                                                                 // 3992\n    }                                                                                                                // 3993\n                                                                                                                     // 3994\n    var i;                                                                                                           // 3995\n    var out = [];                                                                                                    // 3996\n    for (i = 0; i < 12; i++) {                                                                                       // 3997\n        out[i] = get$1(format, i, field, 'month');                                                                   // 3998\n    }                                                                                                                // 3999\n    return out;                                                                                                      // 4000\n}                                                                                                                    // 4001\n                                                                                                                     // 4002\n// ()                                                                                                                // 4003\n// (5)                                                                                                               // 4004\n// (fmt, 5)                                                                                                          // 4005\n// (fmt)                                                                                                             // 4006\n// (true)                                                                                                            // 4007\n// (true, 5)                                                                                                         // 4008\n// (true, fmt, 5)                                                                                                    // 4009\n// (true, fmt)                                                                                                       // 4010\nfunction listWeekdaysImpl (localeSorted, format, index, field) {                                                     // 4011\n    if (typeof localeSorted === 'boolean') {                                                                         // 4012\n        if (isNumber(format)) {                                                                                      // 4013\n            index = format;                                                                                          // 4014\n            format = undefined;                                                                                      // 4015\n        }                                                                                                            // 4016\n                                                                                                                     // 4017\n        format = format || '';                                                                                       // 4018\n    } else {                                                                                                         // 4019\n        format = localeSorted;                                                                                       // 4020\n        index = format;                                                                                              // 4021\n        localeSorted = false;                                                                                        // 4022\n                                                                                                                     // 4023\n        if (isNumber(format)) {                                                                                      // 4024\n            index = format;                                                                                          // 4025\n            format = undefined;                                                                                      // 4026\n        }                                                                                                            // 4027\n                                                                                                                     // 4028\n        format = format || '';                                                                                       // 4029\n    }                                                                                                                // 4030\n                                                                                                                     // 4031\n    var locale = getLocale(),                                                                                        // 4032\n        shift = localeSorted ? locale._week.dow : 0;                                                                 // 4033\n                                                                                                                     // 4034\n    if (index != null) {                                                                                             // 4035\n        return get$1(format, (index + shift) % 7, field, 'day');                                                     // 4036\n    }                                                                                                                // 4037\n                                                                                                                     // 4038\n    var i;                                                                                                           // 4039\n    var out = [];                                                                                                    // 4040\n    for (i = 0; i < 7; i++) {                                                                                        // 4041\n        out[i] = get$1(format, (i + shift) % 7, field, 'day');                                                       // 4042\n    }                                                                                                                // 4043\n    return out;                                                                                                      // 4044\n}                                                                                                                    // 4045\n                                                                                                                     // 4046\nfunction listMonths (format, index) {                                                                                // 4047\n    return listMonthsImpl(format, index, 'months');                                                                  // 4048\n}                                                                                                                    // 4049\n                                                                                                                     // 4050\nfunction listMonthsShort (format, index) {                                                                           // 4051\n    return listMonthsImpl(format, index, 'monthsShort');                                                             // 4052\n}                                                                                                                    // 4053\n                                                                                                                     // 4054\nfunction listWeekdays (localeSorted, format, index) {                                                                // 4055\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdays');                                                // 4056\n}                                                                                                                    // 4057\n                                                                                                                     // 4058\nfunction listWeekdaysShort (localeSorted, format, index) {                                                           // 4059\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');                                           // 4060\n}                                                                                                                    // 4061\n                                                                                                                     // 4062\nfunction listWeekdaysMin (localeSorted, format, index) {                                                             // 4063\n    return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');                                             // 4064\n}                                                                                                                    // 4065\n                                                                                                                     // 4066\ngetSetGlobalLocale('en', {                                                                                           // 4067\n    dayOfMonthOrdinalParse: /\\d{1,2}(th|st|nd|rd)/,                                                                  // 4068\n    ordinal : function (number) {                                                                                    // 4069\n        var b = number % 10,                                                                                         // 4070\n            output = (toInt(number % 100 / 10) === 1) ? 'th' :                                                       // 4071\n            (b === 1) ? 'st' :                                                                                       // 4072\n            (b === 2) ? 'nd' :                                                                                       // 4073\n            (b === 3) ? 'rd' : 'th';                                                                                 // 4074\n        return number + output;                                                                                      // 4075\n    }                                                                                                                // 4076\n});                                                                                                                  // 4077\n                                                                                                                     // 4078\n// Side effect imports                                                                                               // 4079\nhooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);                 // 4080\nhooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);              // 4081\n                                                                                                                     // 4082\nvar mathAbs = Math.abs;                                                                                              // 4083\n                                                                                                                     // 4084\nfunction abs () {                                                                                                    // 4085\n    var data           = this._data;                                                                                 // 4086\n                                                                                                                     // 4087\n    this._milliseconds = mathAbs(this._milliseconds);                                                                // 4088\n    this._days         = mathAbs(this._days);                                                                        // 4089\n    this._months       = mathAbs(this._months);                                                                      // 4090\n                                                                                                                     // 4091\n    data.milliseconds  = mathAbs(data.milliseconds);                                                                 // 4092\n    data.seconds       = mathAbs(data.seconds);                                                                      // 4093\n    data.minutes       = mathAbs(data.minutes);                                                                      // 4094\n    data.hours         = mathAbs(data.hours);                                                                        // 4095\n    data.months        = mathAbs(data.months);                                                                       // 4096\n    data.years         = mathAbs(data.years);                                                                        // 4097\n                                                                                                                     // 4098\n    return this;                                                                                                     // 4099\n}                                                                                                                    // 4100\n                                                                                                                     // 4101\nfunction addSubtract$1 (duration, input, value, direction) {                                                         // 4102\n    var other = createDuration(input, value);                                                                        // 4103\n                                                                                                                     // 4104\n    duration._milliseconds += direction * other._milliseconds;                                                       // 4105\n    duration._days         += direction * other._days;                                                               // 4106\n    duration._months       += direction * other._months;                                                             // 4107\n                                                                                                                     // 4108\n    return duration._bubble();                                                                                       // 4109\n}                                                                                                                    // 4110\n                                                                                                                     // 4111\n// supports only 2.0-style add(1, 's') or add(duration)                                                              // 4112\nfunction add$1 (input, value) {                                                                                      // 4113\n    return addSubtract$1(this, input, value, 1);                                                                     // 4114\n}                                                                                                                    // 4115\n                                                                                                                     // 4116\n// supports only 2.0-style subtract(1, 's') or subtract(duration)                                                    // 4117\nfunction subtract$1 (input, value) {                                                                                 // 4118\n    return addSubtract$1(this, input, value, -1);                                                                    // 4119\n}                                                                                                                    // 4120\n                                                                                                                     // 4121\nfunction absCeil (number) {                                                                                          // 4122\n    if (number < 0) {                                                                                                // 4123\n        return Math.floor(number);                                                                                   // 4124\n    } else {                                                                                                         // 4125\n        return Math.ceil(number);                                                                                    // 4126\n    }                                                                                                                // 4127\n}                                                                                                                    // 4128\n                                                                                                                     // 4129\nfunction bubble () {                                                                                                 // 4130\n    var milliseconds = this._milliseconds;                                                                           // 4131\n    var days         = this._days;                                                                                   // 4132\n    var months       = this._months;                                                                                 // 4133\n    var data         = this._data;                                                                                   // 4134\n    var seconds, minutes, hours, years, monthsFromDays;                                                              // 4135\n                                                                                                                     // 4136\n    // if we have a mix of positive and negative values, bubble down first                                           // 4137\n    // check: https://github.com/moment/moment/issues/2166                                                           // 4138\n    if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||                                                         // 4139\n            (milliseconds <= 0 && days <= 0 && months <= 0))) {                                                      // 4140\n        milliseconds += absCeil(monthsToDays(months) + days) * 864e5;                                                // 4141\n        days = 0;                                                                                                    // 4142\n        months = 0;                                                                                                  // 4143\n    }                                                                                                                // 4144\n                                                                                                                     // 4145\n    // The following code bubbles up values, see the tests for                                                       // 4146\n    // examples of what that means.                                                                                  // 4147\n    data.milliseconds = milliseconds % 1000;                                                                         // 4148\n                                                                                                                     // 4149\n    seconds           = absFloor(milliseconds / 1000);                                                               // 4150\n    data.seconds      = seconds % 60;                                                                                // 4151\n                                                                                                                     // 4152\n    minutes           = absFloor(seconds / 60);                                                                      // 4153\n    data.minutes      = minutes % 60;                                                                                // 4154\n                                                                                                                     // 4155\n    hours             = absFloor(minutes / 60);                                                                      // 4156\n    data.hours        = hours % 24;                                                                                  // 4157\n                                                                                                                     // 4158\n    days += absFloor(hours / 24);                                                                                    // 4159\n                                                                                                                     // 4160\n    // convert days to months                                                                                        // 4161\n    monthsFromDays = absFloor(daysToMonths(days));                                                                   // 4162\n    months += monthsFromDays;                                                                                        // 4163\n    days -= absCeil(monthsToDays(monthsFromDays));                                                                   // 4164\n                                                                                                                     // 4165\n    // 12 months -> 1 year                                                                                           // 4166\n    years = absFloor(months / 12);                                                                                   // 4167\n    months %= 12;                                                                                                    // 4168\n                                                                                                                     // 4169\n    data.days   = days;                                                                                              // 4170\n    data.months = months;                                                                                            // 4171\n    data.years  = years;                                                                                             // 4172\n                                                                                                                     // 4173\n    return this;                                                                                                     // 4174\n}                                                                                                                    // 4175\n                                                                                                                     // 4176\nfunction daysToMonths (days) {                                                                                       // 4177\n    // 400 years have 146097 days (taking into account leap year rules)                                              // 4178\n    // 400 years have 12 months === 4800                                                                             // 4179\n    return days * 4800 / 146097;                                                                                     // 4180\n}                                                                                                                    // 4181\n                                                                                                                     // 4182\nfunction monthsToDays (months) {                                                                                     // 4183\n    // the reverse of daysToMonths                                                                                   // 4184\n    return months * 146097 / 4800;                                                                                   // 4185\n}                                                                                                                    // 4186\n                                                                                                                     // 4187\nfunction as (units) {                                                                                                // 4188\n    if (!this.isValid()) {                                                                                           // 4189\n        return NaN;                                                                                                  // 4190\n    }                                                                                                                // 4191\n    var days;                                                                                                        // 4192\n    var months;                                                                                                      // 4193\n    var milliseconds = this._milliseconds;                                                                           // 4194\n                                                                                                                     // 4195\n    units = normalizeUnits(units);                                                                                   // 4196\n                                                                                                                     // 4197\n    if (units === 'month' || units === 'year') {                                                                     // 4198\n        days   = this._days   + milliseconds / 864e5;                                                                // 4199\n        months = this._months + daysToMonths(days);                                                                  // 4200\n        return units === 'month' ? months : months / 12;                                                             // 4201\n    } else {                                                                                                         // 4202\n        // handle milliseconds separately because of floating point math errors (issue #1867)                        // 4203\n        days = this._days + Math.round(monthsToDays(this._months));                                                  // 4204\n        switch (units) {                                                                                             // 4205\n            case 'week'   : return days / 7     + milliseconds / 6048e5;                                             // 4206\n            case 'day'    : return days         + milliseconds / 864e5;                                              // 4207\n            case 'hour'   : return days * 24    + milliseconds / 36e5;                                               // 4208\n            case 'minute' : return days * 1440  + milliseconds / 6e4;                                                // 4209\n            case 'second' : return days * 86400 + milliseconds / 1000;                                               // 4210\n            // Math.floor prevents floating point math errors here                                                   // 4211\n            case 'millisecond': return Math.floor(days * 864e5) + milliseconds;                                      // 4212\n            default: throw new Error('Unknown unit ' + units);                                                       // 4213\n        }                                                                                                            // 4214\n    }                                                                                                                // 4215\n}                                                                                                                    // 4216\n                                                                                                                     // 4217\n// TODO: Use this.as('ms')?                                                                                          // 4218\nfunction valueOf$1 () {                                                                                              // 4219\n    if (!this.isValid()) {                                                                                           // 4220\n        return NaN;                                                                                                  // 4221\n    }                                                                                                                // 4222\n    return (                                                                                                         // 4223\n        this._milliseconds +                                                                                         // 4224\n        this._days * 864e5 +                                                                                         // 4225\n        (this._months % 12) * 2592e6 +                                                                               // 4226\n        toInt(this._months / 12) * 31536e6                                                                           // 4227\n    );                                                                                                               // 4228\n}                                                                                                                    // 4229\n                                                                                                                     // 4230\nfunction makeAs (alias) {                                                                                            // 4231\n    return function () {                                                                                             // 4232\n        return this.as(alias);                                                                                       // 4233\n    };                                                                                                               // 4234\n}                                                                                                                    // 4235\n                                                                                                                     // 4236\nvar asMilliseconds = makeAs('ms');                                                                                   // 4237\nvar asSeconds      = makeAs('s');                                                                                    // 4238\nvar asMinutes      = makeAs('m');                                                                                    // 4239\nvar asHours        = makeAs('h');                                                                                    // 4240\nvar asDays         = makeAs('d');                                                                                    // 4241\nvar asWeeks        = makeAs('w');                                                                                    // 4242\nvar asMonths       = makeAs('M');                                                                                    // 4243\nvar asYears        = makeAs('y');                                                                                    // 4244\n                                                                                                                     // 4245\nfunction clone$1 () {                                                                                                // 4246\n    return createDuration(this);                                                                                     // 4247\n}                                                                                                                    // 4248\n                                                                                                                     // 4249\nfunction get$2 (units) {                                                                                             // 4250\n    units = normalizeUnits(units);                                                                                   // 4251\n    return this.isValid() ? this[units + 's']() : NaN;                                                               // 4252\n}                                                                                                                    // 4253\n                                                                                                                     // 4254\nfunction makeGetter(name) {                                                                                          // 4255\n    return function () {                                                                                             // 4256\n        return this.isValid() ? this._data[name] : NaN;                                                              // 4257\n    };                                                                                                               // 4258\n}                                                                                                                    // 4259\n                                                                                                                     // 4260\nvar milliseconds = makeGetter('milliseconds');                                                                       // 4261\nvar seconds      = makeGetter('seconds');                                                                            // 4262\nvar minutes      = makeGetter('minutes');                                                                            // 4263\nvar hours        = makeGetter('hours');                                                                              // 4264\nvar days         = makeGetter('days');                                                                               // 4265\nvar months       = makeGetter('months');                                                                             // 4266\nvar years        = makeGetter('years');                                                                              // 4267\n                                                                                                                     // 4268\nfunction weeks () {                                                                                                  // 4269\n    return absFloor(this.days() / 7);                                                                                // 4270\n}                                                                                                                    // 4271\n                                                                                                                     // 4272\nvar round = Math.round;                                                                                              // 4273\nvar thresholds = {                                                                                                   // 4274\n    ss: 44,         // a few seconds to seconds                                                                      // 4275\n    s : 45,         // seconds to minute                                                                             // 4276\n    m : 45,         // minutes to hour                                                                               // 4277\n    h : 22,         // hours to day                                                                                  // 4278\n    d : 26,         // days to month                                                                                 // 4279\n    M : 11          // months to year                                                                                // 4280\n};                                                                                                                   // 4281\n                                                                                                                     // 4282\n// helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize                            // 4283\nfunction substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {                                        // 4284\n    return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);                                      // 4285\n}                                                                                                                    // 4286\n                                                                                                                     // 4287\nfunction relativeTime$1 (posNegDuration, withoutSuffix, locale) {                                                    // 4288\n    var duration = createDuration(posNegDuration).abs();                                                             // 4289\n    var seconds  = round(duration.as('s'));                                                                          // 4290\n    var minutes  = round(duration.as('m'));                                                                          // 4291\n    var hours    = round(duration.as('h'));                                                                          // 4292\n    var days     = round(duration.as('d'));                                                                          // 4293\n    var months   = round(duration.as('M'));                                                                          // 4294\n    var years    = round(duration.as('y'));                                                                          // 4295\n                                                                                                                     // 4296\n    var a = seconds <= thresholds.ss && ['s', seconds]  ||                                                           // 4297\n            seconds < thresholds.s   && ['ss', seconds] ||                                                           // 4298\n            minutes <= 1             && ['m']           ||                                                           // 4299\n            minutes < thresholds.m   && ['mm', minutes] ||                                                           // 4300\n            hours   <= 1             && ['h']           ||                                                           // 4301\n            hours   < thresholds.h   && ['hh', hours]   ||                                                           // 4302\n            days    <= 1             && ['d']           ||                                                           // 4303\n            days    < thresholds.d   && ['dd', days]    ||                                                           // 4304\n            months  <= 1             && ['M']           ||                                                           // 4305\n            months  < thresholds.M   && ['MM', months]  ||                                                           // 4306\n            years   <= 1             && ['y']           || ['yy', years];                                            // 4307\n                                                                                                                     // 4308\n    a[2] = withoutSuffix;                                                                                            // 4309\n    a[3] = +posNegDuration > 0;                                                                                      // 4310\n    a[4] = locale;                                                                                                   // 4311\n    return substituteTimeAgo.apply(null, a);                                                                         // 4312\n}                                                                                                                    // 4313\n                                                                                                                     // 4314\n// This function allows you to set the rounding function for relative time strings                                   // 4315\nfunction getSetRelativeTimeRounding (roundingFunction) {                                                             // 4316\n    if (roundingFunction === undefined) {                                                                            // 4317\n        return round;                                                                                                // 4318\n    }                                                                                                                // 4319\n    if (typeof(roundingFunction) === 'function') {                                                                   // 4320\n        round = roundingFunction;                                                                                    // 4321\n        return true;                                                                                                 // 4322\n    }                                                                                                                // 4323\n    return false;                                                                                                    // 4324\n}                                                                                                                    // 4325\n                                                                                                                     // 4326\n// This function allows you to set a threshold for relative time strings                                             // 4327\nfunction getSetRelativeTimeThreshold (threshold, limit) {                                                            // 4328\n    if (thresholds[threshold] === undefined) {                                                                       // 4329\n        return false;                                                                                                // 4330\n    }                                                                                                                // 4331\n    if (limit === undefined) {                                                                                       // 4332\n        return thresholds[threshold];                                                                                // 4333\n    }                                                                                                                // 4334\n    thresholds[threshold] = limit;                                                                                   // 4335\n    if (threshold === 's') {                                                                                         // 4336\n        thresholds.ss = limit - 1;                                                                                   // 4337\n    }                                                                                                                // 4338\n    return true;                                                                                                     // 4339\n}                                                                                                                    // 4340\n                                                                                                                     // 4341\nfunction humanize (withSuffix) {                                                                                     // 4342\n    if (!this.isValid()) {                                                                                           // 4343\n        return this.localeData().invalidDate();                                                                      // 4344\n    }                                                                                                                // 4345\n                                                                                                                     // 4346\n    var locale = this.localeData();                                                                                  // 4347\n    var output = relativeTime$1(this, !withSuffix, locale);                                                          // 4348\n                                                                                                                     // 4349\n    if (withSuffix) {                                                                                                // 4350\n        output = locale.pastFuture(+this, output);                                                                   // 4351\n    }                                                                                                                // 4352\n                                                                                                                     // 4353\n    return locale.postformat(output);                                                                                // 4354\n}                                                                                                                    // 4355\n                                                                                                                     // 4356\nvar abs$1 = Math.abs;                                                                                                // 4357\n                                                                                                                     // 4358\nfunction sign(x) {                                                                                                   // 4359\n    return ((x > 0) - (x < 0)) || +x;                                                                                // 4360\n}                                                                                                                    // 4361\n                                                                                                                     // 4362\nfunction toISOString$1() {                                                                                           // 4363\n    // for ISO strings we do not use the normal bubbling rules:                                                      // 4364\n    //  * milliseconds bubble up until they become hours                                                             // 4365\n    //  * days do not bubble at all                                                                                  // 4366\n    //  * months bubble up until they become years                                                                   // 4367\n    // This is because there is no context-free conversion between hours and days                                    // 4368\n    // (think of clock changes)                                                                                      // 4369\n    // and also not between days and months (28-31 days per month)                                                   // 4370\n    if (!this.isValid()) {                                                                                           // 4371\n        return this.localeData().invalidDate();                                                                      // 4372\n    }                                                                                                                // 4373\n                                                                                                                     // 4374\n    var seconds = abs$1(this._milliseconds) / 1000;                                                                  // 4375\n    var days         = abs$1(this._days);                                                                            // 4376\n    var months       = abs$1(this._months);                                                                          // 4377\n    var minutes, hours, years;                                                                                       // 4378\n                                                                                                                     // 4379\n    // 3600 seconds -> 60 minutes -> 1 hour                                                                          // 4380\n    minutes           = absFloor(seconds / 60);                                                                      // 4381\n    hours             = absFloor(minutes / 60);                                                                      // 4382\n    seconds %= 60;                                                                                                   // 4383\n    minutes %= 60;                                                                                                   // 4384\n                                                                                                                     // 4385\n    // 12 months -> 1 year                                                                                           // 4386\n    years  = absFloor(months / 12);                                                                                  // 4387\n    months %= 12;                                                                                                    // 4388\n                                                                                                                     // 4389\n                                                                                                                     // 4390\n    // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js                  // 4391\n    var Y = years;                                                                                                   // 4392\n    var M = months;                                                                                                  // 4393\n    var D = days;                                                                                                    // 4394\n    var h = hours;                                                                                                   // 4395\n    var m = minutes;                                                                                                 // 4396\n    var s = seconds ? seconds.toFixed(3).replace(/\\.?0+$/, '') : '';                                                 // 4397\n    var total = this.asSeconds();                                                                                    // 4398\n                                                                                                                     // 4399\n    if (!total) {                                                                                                    // 4400\n        // this is the same as C#'s (Noda) and python (isodate)...                                                   // 4401\n        // but not other JS (goog.date)                                                                              // 4402\n        return 'P0D';                                                                                                // 4403\n    }                                                                                                                // 4404\n                                                                                                                     // 4405\n    var totalSign = total < 0 ? '-' : '';                                                                            // 4406\n    var ymSign = sign(this._months) !== sign(total) ? '-' : '';                                                      // 4407\n    var daysSign = sign(this._days) !== sign(total) ? '-' : '';                                                      // 4408\n    var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';                                               // 4409\n                                                                                                                     // 4410\n    return totalSign + 'P' +                                                                                         // 4411\n        (Y ? ymSign + Y + 'Y' : '') +                                                                                // 4412\n        (M ? ymSign + M + 'M' : '') +                                                                                // 4413\n        (D ? daysSign + D + 'D' : '') +                                                                              // 4414\n        ((h || m || s) ? 'T' : '') +                                                                                 // 4415\n        (h ? hmsSign + h + 'H' : '') +                                                                               // 4416\n        (m ? hmsSign + m + 'M' : '') +                                                                               // 4417\n        (s ? hmsSign + s + 'S' : '');                                                                                // 4418\n}                                                                                                                    // 4419\n                                                                                                                     // 4420\nvar proto$2 = Duration.prototype;                                                                                    // 4421\n                                                                                                                     // 4422\nproto$2.isValid        = isValid$1;                                                                                  // 4423\nproto$2.abs            = abs;                                                                                        // 4424\nproto$2.add            = add$1;                                                                                      // 4425\nproto$2.subtract       = subtract$1;                                                                                 // 4426\nproto$2.as             = as;                                                                                         // 4427\nproto$2.asMilliseconds = asMilliseconds;                                                                             // 4428\nproto$2.asSeconds      = asSeconds;                                                                                  // 4429\nproto$2.asMinutes      = asMinutes;                                                                                  // 4430\nproto$2.asHours        = asHours;                                                                                    // 4431\nproto$2.asDays         = asDays;                                                                                     // 4432\nproto$2.asWeeks        = asWeeks;                                                                                    // 4433\nproto$2.asMonths       = asMonths;                                                                                   // 4434\nproto$2.asYears        = asYears;                                                                                    // 4435\nproto$2.valueOf        = valueOf$1;                                                                                  // 4436\nproto$2._bubble        = bubble;                                                                                     // 4437\nproto$2.clone          = clone$1;                                                                                    // 4438\nproto$2.get            = get$2;                                                                                      // 4439\nproto$2.milliseconds   = milliseconds;                                                                               // 4440\nproto$2.seconds        = seconds;                                                                                    // 4441\nproto$2.minutes        = minutes;                                                                                    // 4442\nproto$2.hours          = hours;                                                                                      // 4443\nproto$2.days           = days;                                                                                       // 4444\nproto$2.weeks          = weeks;                                                                                      // 4445\nproto$2.months         = months;                                                                                     // 4446\nproto$2.years          = years;                                                                                      // 4447\nproto$2.humanize       = humanize;                                                                                   // 4448\nproto$2.toISOString    = toISOString$1;                                                                              // 4449\nproto$2.toString       = toISOString$1;                                                                              // 4450\nproto$2.toJSON         = toISOString$1;                                                                              // 4451\nproto$2.locale         = locale;                                                                                     // 4452\nproto$2.localeData     = localeData;                                                                                 // 4453\n                                                                                                                     // 4454\n// Deprecations                                                                                                      // 4455\nproto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);\nproto$2.lang = lang;                                                                                                 // 4457\n                                                                                                                     // 4458\n// Side effect imports                                                                                               // 4459\n                                                                                                                     // 4460\n// FORMATTING                                                                                                        // 4461\n                                                                                                                     // 4462\naddFormatToken('X', 0, 0, 'unix');                                                                                   // 4463\naddFormatToken('x', 0, 0, 'valueOf');                                                                                // 4464\n                                                                                                                     // 4465\n// PARSING                                                                                                           // 4466\n                                                                                                                     // 4467\naddRegexToken('x', matchSigned);                                                                                     // 4468\naddRegexToken('X', matchTimestamp);                                                                                  // 4469\naddParseToken('X', function (input, array, config) {                                                                 // 4470\n    config._d = new Date(parseFloat(input, 10) * 1000);                                                              // 4471\n});                                                                                                                  // 4472\naddParseToken('x', function (input, array, config) {                                                                 // 4473\n    config._d = new Date(toInt(input));                                                                              // 4474\n});                                                                                                                  // 4475\n                                                                                                                     // 4476\n// Side effect imports                                                                                               // 4477\n                                                                                                                     // 4478\n                                                                                                                     // 4479\nhooks.version = '2.19.1';                                                                                            // 4480\n                                                                                                                     // 4481\nsetHookCallback(createLocal);                                                                                        // 4482\n                                                                                                                     // 4483\nhooks.fn                    = proto;                                                                                 // 4484\nhooks.min                   = min;                                                                                   // 4485\nhooks.max                   = max;                                                                                   // 4486\nhooks.now                   = now;                                                                                   // 4487\nhooks.utc                   = createUTC;                                                                             // 4488\nhooks.unix                  = createUnix;                                                                            // 4489\nhooks.months                = listMonths;                                                                            // 4490\nhooks.isDate                = isDate;                                                                                // 4491\nhooks.locale                = getSetGlobalLocale;                                                                    // 4492\nhooks.invalid               = createInvalid;                                                                         // 4493\nhooks.duration              = createDuration;                                                                        // 4494\nhooks.isMoment              = isMoment;                                                                              // 4495\nhooks.weekdays              = listWeekdays;                                                                          // 4496\nhooks.parseZone             = createInZone;                                                                          // 4497\nhooks.localeData            = getLocale;                                                                             // 4498\nhooks.isDuration            = isDuration;                                                                            // 4499\nhooks.monthsShort           = listMonthsShort;                                                                       // 4500\nhooks.weekdaysMin           = listWeekdaysMin;                                                                       // 4501\nhooks.defineLocale          = defineLocale;                                                                          // 4502\nhooks.updateLocale          = updateLocale;                                                                          // 4503\nhooks.locales               = listLocales;                                                                           // 4504\nhooks.weekdaysShort         = listWeekdaysShort;                                                                     // 4505\nhooks.normalizeUnits        = normalizeUnits;                                                                        // 4506\nhooks.relativeTimeRounding  = getSetRelativeTimeRounding;                                                            // 4507\nhooks.relativeTimeThreshold = getSetRelativeTimeThreshold;                                                           // 4508\nhooks.calendarFormat        = getCalendarFormat;                                                                     // 4509\nhooks.prototype             = proto;                                                                                 // 4510\n                                                                                                                     // 4511\nreturn hooks;                                                                                                        // 4512\n                                                                                                                     // 4513\n})));                                                                                                                // 4514\n                                                                                                                     // 4515\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                   //\n// packages/momentjs_moment/export.js                                                                                //\n//                                                                                                                   //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                     //\n// moment.js makes `moment` global on the window (or global) object, while Meteor expects a file-scoped global variable\nmoment = this.moment;                                                                                                // 2\ntry {                                                                                                                // 3\n    delete this.moment;                                                                                              // 4\n} catch (e) {                                                                                                        // 5\n}                                                                                                                    // 6\n                                                                                                                     // 7\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['momentjs:moment'] = {}, {\n  moment: moment\n});\n\n})();\n","servePath":"/packages/momentjs_moment.js"}]