[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar makeInstaller, makeInstallerOptions, meteorInstall;\n\n///////////////////////////////////////////////////////////////////////////////\n//                                                                           //\n// packages/modules-runtime/.npm/package/node_modules/install/install.js     //\n// This file is in bare mode and is not in its own closure.                  //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n                                                                             //\nmakeInstaller = function (options) {                                         // 1\n  \"use strict\";                                                              // 2\n                                                                             // 3\n  options = options || {};                                                   // 4\n                                                                             // 5\n  // These file extensions will be appended to required module identifiers   // 6\n  // if they do not exactly match an installed module.                       // 7\n  var defaultExtensions = options.extensions || [\".js\", \".json\"];            // 8\n                                                                             // 9\n  // If defined, the options.onInstall function will be called any time      // 10\n  // new modules are installed.                                              // 11\n  var onInstall = options.onInstall;                                         // 12\n                                                                             // 13\n  // If defined, each module-specific require function will be passed to     // 14\n  // this function, along with the module object of the parent module, and   // 15\n  // the result will be used in place of the original require function.      // 16\n  var wrapRequire = options.wrapRequire;                                     // 17\n                                                                             // 18\n  // If defined, the options.override function will be called before         // 19\n  // looking up any top-level package identifiers in node_modules            // 20\n  // directories. It can either return a string to provide an alternate      // 21\n  // package identifier, or a non-string value to prevent the lookup from    // 22\n  // proceeding.                                                             // 23\n  var override = options.override;                                           // 24\n                                                                             // 25\n  // If defined, the options.fallback function will be called when no        // 26\n  // installed module is found for a required module identifier. Often       // 27\n  // options.fallback will be implemented in terms of the native Node        // 28\n  // require function, which has the ability to load binary modules.         // 29\n  var fallback = options.fallback;                                           // 30\n                                                                             // 31\n  // List of fields to look for in package.json files to determine the       // 32\n  // main entry module of the package. The first field listed here whose     // 33\n  // value is a string will be used to resolve the entry module.             // 34\n  var mainFields = options.mainFields ||                                     // 35\n    // If options.mainFields is absent and options.browser is truthy,        // 36\n    // package resolution will prefer the \"browser\" field of package.json    // 37\n    // files to the \"main\" field. Note that this only supports               // 38\n    // string-valued \"browser\" fields for now, though in the future it       // 39\n    // might make sense to support the object version, a la browserify.      // 40\n    (options.browser ? [\"browser\", \"main\"] : [\"main\"]);                      // 41\n                                                                             // 42\n  // Called below as hasOwn.call(obj, key).                                  // 43\n  var hasOwn = {}.hasOwnProperty;                                            // 44\n                                                                             // 45\n  // Cache for looking up File objects given absolute module identifiers.    // 46\n  // Invariants:                                                             // 47\n  //   filesByModuleId[module.id] === fileAppendId(root, module.id)          // 48\n  //   filesByModuleId[module.id].module === module                          // 49\n  var filesByModuleId = {};                                                  // 50\n                                                                             // 51\n  // The file object representing the root directory of the installed        // 52\n  // module tree.                                                            // 53\n  var root = new File(\"/\", new File(\"/..\"));                                 // 54\n  var rootRequire = makeRequire(root);                                       // 55\n                                                                             // 56\n  // Merges the given tree of directories and module factory functions       // 57\n  // into the tree of installed modules and returns a require function       // 58\n  // that behaves as if called from a module in the root directory.          // 59\n  function install(tree, options) {                                          // 60\n    if (isObject(tree)) {                                                    // 61\n      fileMergeContents(root, tree, options);                                // 62\n      if (isFunction(onInstall)) {                                           // 63\n        onInstall(rootRequire);                                              // 64\n      }                                                                      // 65\n    }                                                                        // 66\n    return rootRequire;                                                      // 67\n  }                                                                          // 68\n                                                                             // 69\n  // Replace this function to enable Module.prototype.prefetch.              // 70\n  install.fetch = function (ids) {                                           // 71\n    throw new Error(\"fetch not implemented\");                                // 72\n  };                                                                         // 73\n                                                                             // 74\n  // This constructor will be used to instantiate the module objects         // 75\n  // passed to module factory functions (i.e. the third argument after       // 76\n  // require and exports), and is exposed as install.Module in case the      // 77\n  // caller of makeInstaller wishes to modify Module.prototype.              // 78\n  function Module(id) {                                                      // 79\n    this.id = id;                                                            // 80\n                                                                             // 81\n    // The Node implementation of module.children unfortunately includes     // 82\n    // only those child modules that were imported for the first time by     // 83\n    // this parent module (i.e., child.parent === this).                     // 84\n    this.children = [];                                                      // 85\n                                                                             // 86\n    // This object is an install.js extension that includes all child        // 87\n    // modules imported by this module, even if this module is not the       // 88\n    // first to import them.                                                 // 89\n    this.childrenById = {};                                                  // 90\n  }                                                                          // 91\n                                                                             // 92\n  Module.prototype.resolve = function (id) {                                 // 93\n    return this.require.resolve(id);                                         // 94\n  };                                                                         // 95\n                                                                             // 96\n  var resolvedPromise;                                                       // 97\n  var lastPrefetchPromise;                                                   // 98\n                                                                             // 99\n  Module.prototype.prefetch = function (id) {                                // 100\n    var module = this;                                                       // 101\n    var parentFile = getOwn(filesByModuleId, module.id);                     // 102\n    var missing; // Initialized to {} only if necessary.                     // 103\n                                                                             // 104\n    resolvedPromise = resolvedPromise || Promise.resolve();                  // 105\n    lastPrefetchPromise = lastPrefetchPromise || resolvedPromise;            // 106\n    var previousPromise = lastPrefetchPromise;                               // 107\n                                                                             // 108\n    function walk(module) {                                                  // 109\n      var file = getOwn(filesByModuleId, module.id);                         // 110\n      if (fileIsDynamic(file) && ! file.pending) {                           // 111\n        file.pending = true;                                                 // 112\n        missing = missing || {};                                             // 113\n                                                                             // 114\n        // These are the data that will be exposed to the install.fetch      // 115\n        // callback, so it's worth documenting each item with a comment.     // 116\n        missing[module.id] = {                                               // 117\n          // The CommonJS module object that will be exposed to this         // 118\n          // dynamic module when it is evaluated. Note that install.fetch    // 119\n          // could decide to populate module.exports directly, instead of    // 120\n          // fetching anything. In that case, install.fetch should omit      // 121\n          // this module from the tree that it produces.                     // 122\n          module: file.module,                                               // 123\n          // List of module identifier strings imported by this module.      // 124\n          // Note that the missing object already contains all available     // 125\n          // dependencies (including transitive dependencies), so            // 126\n          // install.fetch should not need to traverse these dependencies    // 127\n          // in most cases; however, they may be useful for other reasons.   // 128\n          // Though the strings are unique, note that two different          // 129\n          // strings could resolve to the same module.                       // 130\n          deps: Object.keys(file.deps),                                      // 131\n          // The options (if any) that were passed as the second argument    // 132\n          // to the install(tree, options) function when this stub was       // 133\n          // first registered. Typically contains options.extensions, but    // 134\n          // could contain any information appropriate for the entire tree   // 135\n          // as originally installed. These options will be automatically    // 136\n          // inherited by the newly fetched modules, so install.fetch        // 137\n          // should not need to modify them.                                 // 138\n          options: file.options,                                             // 139\n          // Any stub data included in the array notation from the           // 140\n          // original entry for this dynamic module. Typically contains      // 141\n          // \"main\" and/or \"browser\" fields for package.json files, and is   // 142\n          // otherwise undefined.                                            // 143\n          stub: file.stub                                                    // 144\n        };                                                                   // 145\n                                                                             // 146\n        each(file.deps, function (parentId, id) {                            // 147\n          fileResolve(file, id);                                             // 148\n        });                                                                  // 149\n                                                                             // 150\n        each(module.childrenById, walk);                                     // 151\n      }                                                                      // 152\n    }                                                                        // 153\n                                                                             // 154\n    return lastPrefetchPromise = resolvedPromise.then(function () {          // 155\n      var absChildId = module.resolve(id);                                   // 156\n      each(module.childrenById, walk);                                       // 157\n                                                                             // 158\n      return Promise.resolve(                                                // 159\n        // The install.fetch function takes an object mapping missing        // 160\n        // dynamic module identifiers to options objects, and should         // 161\n        // return a Promise that resolves to a module tree that can be       // 162\n        // installed. As an optimization, if there were no missing dynamic   // 163\n        // modules, then we can skip calling install.fetch entirely.         // 164\n        missing && install.fetch(missing)                                    // 165\n                                                                             // 166\n      ).then(function (tree) {                                               // 167\n        function both() {                                                    // 168\n          if (tree) install(tree);                                           // 169\n          return absChildId;                                                 // 170\n        }                                                                    // 171\n                                                                             // 172\n        // Although we want multiple install.fetch calls to run in           // 173\n        // parallel, it is important that the promises returned by           // 174\n        // module.prefetch are resolved in the same order as the original    // 175\n        // calls to module.prefetch, because previous fetches may include    // 176\n        // modules assumed to exist by more recent module.prefetch calls.    // 177\n        // Whether previousPromise was resolved or rejected, carry on with   // 178\n        // the installation regardless.                                      // 179\n        return previousPromise.then(both, both);                             // 180\n      });                                                                    // 181\n    });                                                                      // 182\n  };                                                                         // 183\n                                                                             // 184\n  install.Module = Module;                                                   // 185\n                                                                             // 186\n  function getOwn(obj, key) {                                                // 187\n    return hasOwn.call(obj, key) && obj[key];                                // 188\n  }                                                                          // 189\n                                                                             // 190\n  function isObject(value) {                                                 // 191\n    return typeof value === \"object\" && value !== null;                      // 192\n  }                                                                          // 193\n                                                                             // 194\n  function isFunction(value) {                                               // 195\n    return typeof value === \"function\";                                      // 196\n  }                                                                          // 197\n                                                                             // 198\n  function isString(value) {                                                 // 199\n    return typeof value === \"string\";                                        // 200\n  }                                                                          // 201\n                                                                             // 202\n  function makeMissingError(id) {                                            // 203\n    return new Error(\"Cannot find module '\" + id + \"'\");                     // 204\n  }                                                                          // 205\n                                                                             // 206\n  function makeRequire(file) {                                               // 207\n    function require(id) {                                                   // 208\n      var result = fileResolve(file, id);                                    // 209\n      if (result) {                                                          // 210\n        return fileEvaluate(result, file.module);                            // 211\n      }                                                                      // 212\n                                                                             // 213\n      var error = makeMissingError(id);                                      // 214\n                                                                             // 215\n      if (isFunction(fallback)) {                                            // 216\n        return fallback(                                                     // 217\n          id, // The missing module identifier.                              // 218\n          file.module.id, // The path of the requiring file.                 // 219\n          error // The error we would have thrown.                           // 220\n        );                                                                   // 221\n      }                                                                      // 222\n                                                                             // 223\n      throw error;                                                           // 224\n    }                                                                        // 225\n                                                                             // 226\n    if (isFunction(wrapRequire)) {                                           // 227\n      require = wrapRequire(require, file.module);                           // 228\n    }                                                                        // 229\n                                                                             // 230\n    require.extensions = fileGetExtensions(file).slice(0);                   // 231\n                                                                             // 232\n    require.resolve = function (id) {                                        // 233\n      var f = fileResolve(file, id);                                         // 234\n      if (f) return f.module.id;                                             // 235\n      var error = makeMissingError(id);                                      // 236\n      if (fallback && isFunction(fallback.resolve)) {                        // 237\n        return fallback.resolve(id, file.module.id, error);                  // 238\n      }                                                                      // 239\n      throw error;                                                           // 240\n    };                                                                       // 241\n                                                                             // 242\n    return require;                                                          // 243\n  }                                                                          // 244\n                                                                             // 245\n  // File objects represent either directories or modules that have been     // 246\n  // installed. When a `File` respresents a directory, its `.contents`       // 247\n  // property is an object containing the names of the files (or             // 248\n  // directories) that it contains. When a `File` represents a module, its   // 249\n  // `.contents` property is a function that can be invoked with the         // 250\n  // appropriate `(require, exports, module)` arguments to evaluate the      // 251\n  // module. If the `.contents` property is a string, that string will be    // 252\n  // resolved as a module identifier, and the exports of the resulting       // 253\n  // module will provide the exports of the original file. The `.parent`     // 254\n  // property of a File is either a directory `File` or `null`. Note that    // 255\n  // a child may claim another `File` as its parent even if the parent       // 256\n  // does not have an entry for that child in its `.contents` object.        // 257\n  // This is important for implementing anonymous files, and preventing      // 258\n  // child modules from using `../relative/identifier` syntax to examine     // 259\n  // unrelated modules.                                                      // 260\n  function File(moduleId, parent) {                                          // 261\n    var file = this;                                                         // 262\n                                                                             // 263\n    // Link to the parent file.                                              // 264\n    file.parent = parent = parent || null;                                   // 265\n                                                                             // 266\n    // The module object for this File, which will eventually boast an       // 267\n    // .exports property when/if the file is evaluated.                      // 268\n    file.module = new Module(moduleId);                                      // 269\n    filesByModuleId[moduleId] = file;                                        // 270\n                                                                             // 271\n    // The .contents of the file can be either (1) an object, if the file    // 272\n    // represents a directory containing other files; (2) a factory          // 273\n    // function, if the file represents a module that can be imported; (3)   // 274\n    // a string, if the file is an alias for another file; or (4) null, if   // 275\n    // the file's contents are not (yet) available.                          // 276\n    file.contents = null;                                                    // 277\n                                                                             // 278\n    // Set of module identifiers imported by this module. Note that this     // 279\n    // set is not necessarily complete, so don't rely on it unless you       // 280\n    // know what you're doing.                                               // 281\n    file.deps = {};                                                          // 282\n  }                                                                          // 283\n                                                                             // 284\n  function fileEvaluate(file, parentModule) {                                // 285\n    var module = file.module;                                                // 286\n    if (! hasOwn.call(module, \"exports\")) {                                  // 287\n      var contents = file.contents;                                          // 288\n      if (! contents) {                                                      // 289\n        // If this file was installed with array notation, and the array     // 290\n        // contained one or more objects but no functions, then the combined\n        // properties of the objects are treated as a temporary stub for     // 292\n        // file.module.exports. This is particularly important for partial   // 293\n        // package.json modules, so that the resolution logic can know the   // 294\n        // value of the \"main\" and/or \"browser\" fields, at least, even if    // 295\n        // the rest of the package.json file is not (yet) available.         // 296\n        if (file.stub) {                                                     // 297\n          return file.stub;                                                  // 298\n        }                                                                    // 299\n                                                                             // 300\n        throw makeMissingError(module.id);                                   // 301\n      }                                                                      // 302\n                                                                             // 303\n      if (parentModule) {                                                    // 304\n        module.parent = parentModule;                                        // 305\n        var children = parentModule.children;                                // 306\n        if (Array.isArray(children)) {                                       // 307\n          children.push(module);                                             // 308\n        }                                                                    // 309\n      }                                                                      // 310\n                                                                             // 311\n      // If a Module.prototype.useNode method is defined, give it a chance   // 312\n      // to define module.exports based on module.id using Node.             // 313\n      if (! isFunction(module.useNode) ||                                    // 314\n          ! module.useNode()) {                                              // 315\n        contents(                                                            // 316\n          module.require = module.require || makeRequire(file),              // 317\n          // If the file had a .stub, reuse the same object for exports.     // 318\n          module.exports = file.stub || {},                                  // 319\n          module,                                                            // 320\n          file.module.id,                                                    // 321\n          file.parent.module.id                                              // 322\n        );                                                                   // 323\n      }                                                                      // 324\n                                                                             // 325\n      module.loaded = true;                                                  // 326\n    }                                                                        // 327\n                                                                             // 328\n    // The module.runModuleSetters method will be deprecated in favor of     // 329\n    // just module.runSetters: https://github.com/benjamn/reify/pull/160     // 330\n    var runSetters = module.runSetters || module.runModuleSetters;           // 331\n    if (isFunction(runSetters)) {                                            // 332\n      runSetters.call(module);                                               // 333\n    }                                                                        // 334\n                                                                             // 335\n    return module.exports;                                                   // 336\n  }                                                                          // 337\n                                                                             // 338\n  function fileIsDirectory(file) {                                           // 339\n    return file && isObject(file.contents);                                  // 340\n  }                                                                          // 341\n                                                                             // 342\n  function fileIsDynamic(file) {                                             // 343\n    return file && file.contents === null;                                   // 344\n  }                                                                          // 345\n                                                                             // 346\n  function fileMergeContents(file, contents, options) {                      // 347\n    if (Array.isArray(contents)) {                                           // 348\n      contents.forEach(function (item) {                                     // 349\n        if (isString(item)) {                                                // 350\n          file.deps[item] = file.module.id;                                  // 351\n        } else if (isFunction(item)) {                                       // 352\n          contents = item;                                                   // 353\n        } else if (isObject(item)) {                                         // 354\n          file.stub = file.stub || {};                                       // 355\n          each(item, function (value, key) {                                 // 356\n            file.stub[key] = value;                                          // 357\n          });                                                                // 358\n        }                                                                    // 359\n      });                                                                    // 360\n                                                                             // 361\n      if (! isFunction(contents)) {                                          // 362\n        // If the array did not contain a function, merge nothing.           // 363\n        contents = null;                                                     // 364\n      }                                                                      // 365\n                                                                             // 366\n    } else if (! isFunction(contents) &&                                     // 367\n               ! isString(contents) &&                                       // 368\n               ! isObject(contents)) {                                       // 369\n      // If contents is neither an array nor a function nor a string nor     // 370\n      // an object, just give up and merge nothing.                          // 371\n      contents = null;                                                       // 372\n    }                                                                        // 373\n                                                                             // 374\n    if (contents) {                                                          // 375\n      file.contents = file.contents || (isObject(contents) ? {} : contents);\n      if (isObject(contents) && fileIsDirectory(file)) {                     // 377\n        each(contents, function (value, key) {                               // 378\n          if (key === \"..\") {                                                // 379\n            child = file.parent;                                             // 380\n                                                                             // 381\n          } else {                                                           // 382\n            var child = getOwn(file.contents, key);                          // 383\n                                                                             // 384\n            if (! child) {                                                   // 385\n              child = file.contents[key] = new File(                         // 386\n                file.module.id.replace(/\\/*$/, \"/\") + key,                   // 387\n                file                                                         // 388\n              );                                                             // 389\n                                                                             // 390\n              child.options = options;                                       // 391\n            }                                                                // 392\n          }                                                                  // 393\n                                                                             // 394\n          fileMergeContents(child, value, options);                          // 395\n        });                                                                  // 396\n      }                                                                      // 397\n    }                                                                        // 398\n  }                                                                          // 399\n                                                                             // 400\n  function each(obj, callback, context) {                                    // 401\n    Object.keys(obj).forEach(function (key) {                                // 402\n      callback.call(this, obj[key], key);                                    // 403\n    }, context);                                                             // 404\n  }                                                                          // 405\n                                                                             // 406\n  function fileGetExtensions(file) {                                         // 407\n    return file.options                                                      // 408\n      && file.options.extensions                                             // 409\n      || defaultExtensions;                                                  // 410\n  }                                                                          // 411\n                                                                             // 412\n  function fileAppendIdPart(file, part, extensions) {                        // 413\n    // Always append relative to a directory.                                // 414\n    while (file && ! fileIsDirectory(file)) {                                // 415\n      file = file.parent;                                                    // 416\n    }                                                                        // 417\n                                                                             // 418\n    if (! file || ! part || part === \".\") {                                  // 419\n      return file;                                                           // 420\n    }                                                                        // 421\n                                                                             // 422\n    if (part === \"..\") {                                                     // 423\n      return file.parent;                                                    // 424\n    }                                                                        // 425\n                                                                             // 426\n    var exactChild = getOwn(file.contents, part);                            // 427\n                                                                             // 428\n    // Only consider multiple file extensions if this part is the last       // 429\n    // part of a module identifier and not equal to `.` or `..`, and there   // 430\n    // was no exact match or the exact match was a directory.                // 431\n    if (extensions && (! exactChild || fileIsDirectory(exactChild))) {       // 432\n      for (var e = 0; e < extensions.length; ++e) {                          // 433\n        var child = getOwn(file.contents, part + extensions[e]);             // 434\n        if (child && ! fileIsDirectory(child)) {                             // 435\n          return child;                                                      // 436\n        }                                                                    // 437\n      }                                                                      // 438\n    }                                                                        // 439\n                                                                             // 440\n    return exactChild;                                                       // 441\n  }                                                                          // 442\n                                                                             // 443\n  function fileAppendId(file, id, extensions) {                              // 444\n    var parts = id.split(\"/\");                                               // 445\n                                                                             // 446\n    // Use `Array.prototype.every` to terminate iteration early if           // 447\n    // `fileAppendIdPart` returns a falsy value.                             // 448\n    parts.every(function (part, i) {                                         // 449\n      return file = i < parts.length - 1                                     // 450\n        ? fileAppendIdPart(file, part)                                       // 451\n        : fileAppendIdPart(file, part, extensions);                          // 452\n    });                                                                      // 453\n                                                                             // 454\n    return file;                                                             // 455\n  }                                                                          // 456\n                                                                             // 457\n  function recordChild(parentModule, childFile) {                            // 458\n    var childModule = childFile && childFile.module;                         // 459\n    if (parentModule && childModule) {                                       // 460\n      parentModule.childrenById[childModule.id] = childModule;               // 461\n    }                                                                        // 462\n  }                                                                          // 463\n                                                                             // 464\n  function fileResolve(file, id, parentModule, seenDirFiles) {               // 465\n    var parentModule = parentModule || file.module;                          // 466\n    var extensions = fileGetExtensions(file);                                // 467\n                                                                             // 468\n    file =                                                                   // 469\n      // Absolute module identifiers (i.e. those that begin with a `/`       // 470\n      // character) are interpreted relative to the root directory, which    // 471\n      // is a slight deviation from Node, which has access to the entire     // 472\n      // file system.                                                        // 473\n      id.charAt(0) === \"/\" ? fileAppendId(root, id, extensions) :            // 474\n      // Relative module identifiers are interpreted relative to the         // 475\n      // current file, naturally.                                            // 476\n      id.charAt(0) === \".\" ? fileAppendId(file, id, extensions) :            // 477\n      // Top-level module identifiers are interpreted as referring to        // 478\n      // packages in `node_modules` directories.                             // 479\n      nodeModulesLookup(file, id, extensions);                               // 480\n                                                                             // 481\n    // If the identifier resolves to a directory, we use the same logic as   // 482\n    // Node to find an `index.js` or `package.json` file to evaluate.        // 483\n    while (fileIsDirectory(file)) {                                          // 484\n      seenDirFiles = seenDirFiles || [];                                     // 485\n                                                                             // 486\n      // If the \"main\" field of a `package.json` file resolves to a          // 487\n      // directory we've already considered, then we should not attempt to   // 488\n      // read the same `package.json` file again. Using an array as a set    // 489\n      // is acceptable here because the number of directories to consider    // 490\n      // is rarely greater than 1 or 2. Also, using indexOf allows us to     // 491\n      // store File objects instead of strings.                              // 492\n      if (seenDirFiles.indexOf(file) < 0) {                                  // 493\n        seenDirFiles.push(file);                                             // 494\n                                                                             // 495\n        var pkgJsonFile = fileAppendIdPart(file, \"package.json\"), main;      // 496\n        var pkg = pkgJsonFile && fileEvaluate(pkgJsonFile, parentModule);    // 497\n        if (pkg &&                                                           // 498\n            mainFields.some(function (name) {                                // 499\n              return isString(main = pkg[name]);                             // 500\n            })) {                                                            // 501\n          recordChild(parentModule, pkgJsonFile);                            // 502\n                                                                             // 503\n          // The \"main\" field of package.json does not have to begin with    // 504\n          // ./ to be considered relative, so first we try simply            // 505\n          // appending it to the directory path before falling back to a     // 506\n          // full fileResolve, which might return a package from a           // 507\n          // node_modules directory.                                         // 508\n          file = fileAppendId(file, main, extensions) ||                     // 509\n            fileResolve(file, main, parentModule, seenDirFiles);             // 510\n                                                                             // 511\n          if (file) {                                                        // 512\n            // The fileAppendId call above may have returned a directory,    // 513\n            // so continue the loop to make sure we resolve it to a          // 514\n            // non-directory file.                                           // 515\n            continue;                                                        // 516\n          }                                                                  // 517\n        }                                                                    // 518\n      }                                                                      // 519\n                                                                             // 520\n      // If we didn't find a `package.json` file, or it didn't have a        // 521\n      // resolvable `.main` property, the only possibility left to           // 522\n      // consider is that this directory contains an `index.js` module.      // 523\n      // This assignment almost always terminates the while loop, because    // 524\n      // there's very little chance `fileIsDirectory(file)` will be true     // 525\n      // for the result of `fileAppendIdPart(file, \"index.js\")`. However,    // 526\n      // in principle it is remotely possible that a file called             // 527\n      // `index.js` could be a directory instead of a file.                  // 528\n      file = fileAppendIdPart(file, \"index.js\");                             // 529\n    }                                                                        // 530\n                                                                             // 531\n    if (file && isString(file.contents)) {                                   // 532\n      file = fileResolve(file, file.contents, parentModule, seenDirFiles);   // 533\n    }                                                                        // 534\n                                                                             // 535\n    recordChild(parentModule, file);                                         // 536\n                                                                             // 537\n    return file;                                                             // 538\n  };                                                                         // 539\n                                                                             // 540\n  function nodeModulesLookup(file, id, extensions) {                         // 541\n    if (isFunction(override)) {                                              // 542\n      id = override(id, file.module.id);                                     // 543\n    }                                                                        // 544\n                                                                             // 545\n    if (isString(id)) {                                                      // 546\n      for (var resolved; file && ! resolved; file = file.parent) {           // 547\n        resolved = fileIsDirectory(file) &&                                  // 548\n          fileAppendId(file, \"node_modules/\" + id, extensions);              // 549\n      }                                                                      // 550\n                                                                             // 551\n      return resolved;                                                       // 552\n    }                                                                        // 553\n  }                                                                          // 554\n                                                                             // 555\n  return install;                                                            // 556\n};                                                                           // 557\n                                                                             // 558\nif (typeof exports === \"object\") {                                           // 559\n  exports.makeInstaller = makeInstaller;                                     // 560\n}                                                                            // 561\n                                                                             // 562\n///////////////////////////////////////////////////////////////////////////////\n\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////\n//                                                                           //\n// packages/modules-runtime/options.js                                       //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n                                                                             //\nmakeInstallerOptions = {};                                                   // 1\n                                                                             // 2\nif (typeof Profile === \"function\" &&                                         // 3\n    process.env.METEOR_PROFILE) {                                            // 4\n  makeInstallerOptions.wrapRequire = function (require) {                    // 5\n    return Profile(function (id) {                                           // 6\n      return \"require(\" + JSON.stringify(id) + \")\";                          // 7\n    }, require);                                                             // 8\n  };                                                                         // 9\n}                                                                            // 10\n                                                                             // 11\n///////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////////////\n//                                                                           //\n// packages/modules-runtime/client.js                                        //\n//                                                                           //\n///////////////////////////////////////////////////////////////////////////////\n                                                                             //\n// On the client, make package resolution prefer the \"browser\" field of      // 1\n// package.json files to the \"main\" field.                                   // 2\nmakeInstallerOptions.browser = true;                                         // 3\n                                                                             // 4\nmeteorInstall = makeInstaller(makeInstallerOptions);                         // 5\n                                                                             // 6\n///////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['modules-runtime'] = {}, {\n  meteorInstall: meteorInstall\n});\n\n})();\n","servePath":"/packages/modules-runtime.js"}]