[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar Isotope;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/isotope_isotope/packages/isotope_isotope.js              //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/isotope:isotope/dist/isotope.pkgd.js                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*!                                                                                                                    // 1\n * Isotope PACKAGED v2.1.0                                                                                             // 2\n * Filter & sort magical layouts                                                                                       // 3\n * http://isotope.metafizzy.co                                                                                         // 4\n */                                                                                                                    // 5\n                                                                                                                       // 6\n/**                                                                                                                    // 7\n * Bridget makes jQuery widgets                                                                                        // 8\n * v1.1.0                                                                                                              // 9\n * MIT license                                                                                                         // 10\n */                                                                                                                    // 11\n                                                                                                                       // 12\n( function( window ) {                                                                                                 // 13\n                                                                                                                       // 14\n                                                                                                                       // 15\n                                                                                                                       // 16\n// -------------------------- utils -------------------------- //                                                      // 17\n                                                                                                                       // 18\nvar slice = Array.prototype.slice;                                                                                     // 19\n                                                                                                                       // 20\nfunction noop() {}                                                                                                     // 21\n                                                                                                                       // 22\n// -------------------------- definition -------------------------- //                                                 // 23\n                                                                                                                       // 24\nfunction defineBridget( $ ) {                                                                                          // 25\n                                                                                                                       // 26\n// bail if no jQuery                                                                                                   // 27\nif ( !$ ) {                                                                                                            // 28\n  return;                                                                                                              // 29\n}                                                                                                                      // 30\n                                                                                                                       // 31\n// -------------------------- addOptionMethod -------------------------- //                                            // 32\n                                                                                                                       // 33\n/**                                                                                                                    // 34\n * adds option method -> $().plugin('option', {...})                                                                   // 35\n * @param {Function} PluginClass - constructor class                                                                   // 36\n */                                                                                                                    // 37\nfunction addOptionMethod( PluginClass ) {                                                                              // 38\n  // don't overwrite original option method                                                                            // 39\n  if ( PluginClass.prototype.option ) {                                                                                // 40\n    return;                                                                                                            // 41\n  }                                                                                                                    // 42\n                                                                                                                       // 43\n  // option setter                                                                                                     // 44\n  PluginClass.prototype.option = function( opts ) {                                                                    // 45\n    // bail out if not an object                                                                                       // 46\n    if ( !$.isPlainObject( opts ) ){                                                                                   // 47\n      return;                                                                                                          // 48\n    }                                                                                                                  // 49\n    this.options = $.extend( true, this.options, opts );                                                               // 50\n  };                                                                                                                   // 51\n}                                                                                                                      // 52\n                                                                                                                       // 53\n// -------------------------- plugin bridge -------------------------- //                                              // 54\n                                                                                                                       // 55\n// helper function for logging errors                                                                                  // 56\n// $.error breaks jQuery chaining                                                                                      // 57\nvar logError = typeof console === 'undefined' ? noop :                                                                 // 58\n  function( message ) {                                                                                                // 59\n    console.error( message );                                                                                          // 60\n  };                                                                                                                   // 61\n                                                                                                                       // 62\n/**                                                                                                                    // 63\n * jQuery plugin bridge, access methods like $elem.plugin('method')                                                    // 64\n * @param {String} namespace - plugin name                                                                             // 65\n * @param {Function} PluginClass - constructor class                                                                   // 66\n */                                                                                                                    // 67\nfunction bridge( namespace, PluginClass ) {                                                                            // 68\n  // add to jQuery fn namespace                                                                                        // 69\n  $.fn[ namespace ] = function( options ) {                                                                            // 70\n    if ( typeof options === 'string' ) {                                                                               // 71\n      // call plugin method when first argument is a string                                                            // 72\n      // get arguments for method                                                                                      // 73\n      var args = slice.call( arguments, 1 );                                                                           // 74\n                                                                                                                       // 75\n      for ( var i=0, len = this.length; i < len; i++ ) {                                                               // 76\n        var elem = this[i];                                                                                            // 77\n        var instance = $.data( elem, namespace );                                                                      // 78\n        if ( !instance ) {                                                                                             // 79\n          logError( \"cannot call methods on \" + namespace + \" prior to initialization; \" +                             // 80\n            \"attempted to call '\" + options + \"'\" );                                                                   // 81\n          continue;                                                                                                    // 82\n        }                                                                                                              // 83\n        if ( !$.isFunction( instance[options] ) || options.charAt(0) === '_' ) {                                       // 84\n          logError( \"no such method '\" + options + \"' for \" + namespace + \" instance\" );                               // 85\n          continue;                                                                                                    // 86\n        }                                                                                                              // 87\n                                                                                                                       // 88\n        // trigger method with arguments                                                                               // 89\n        var returnValue = instance[ options ].apply( instance, args );                                                 // 90\n                                                                                                                       // 91\n        // break look and return first value if provided                                                               // 92\n        if ( returnValue !== undefined ) {                                                                             // 93\n          return returnValue;                                                                                          // 94\n        }                                                                                                              // 95\n      }                                                                                                                // 96\n      // return this if no return value                                                                                // 97\n      return this;                                                                                                     // 98\n    } else {                                                                                                           // 99\n      return this.each( function() {                                                                                   // 100\n        var instance = $.data( this, namespace );                                                                      // 101\n        if ( instance ) {                                                                                              // 102\n          // apply options & init                                                                                      // 103\n          instance.option( options );                                                                                  // 104\n          instance._init();                                                                                            // 105\n        } else {                                                                                                       // 106\n          // initialize new instance                                                                                   // 107\n          instance = new PluginClass( this, options );                                                                 // 108\n          $.data( this, namespace, instance );                                                                         // 109\n        }                                                                                                              // 110\n      });                                                                                                              // 111\n    }                                                                                                                  // 112\n  };                                                                                                                   // 113\n                                                                                                                       // 114\n}                                                                                                                      // 115\n                                                                                                                       // 116\n// -------------------------- bridget -------------------------- //                                                    // 117\n                                                                                                                       // 118\n/**                                                                                                                    // 119\n * converts a Prototypical class into a proper jQuery plugin                                                           // 120\n *   the class must have a ._init method                                                                               // 121\n * @param {String} namespace - plugin name, used in $().pluginName                                                     // 122\n * @param {Function} PluginClass - constructor class                                                                   // 123\n */                                                                                                                    // 124\n$.bridget = function( namespace, PluginClass ) {                                                                       // 125\n  addOptionMethod( PluginClass );                                                                                      // 126\n  bridge( namespace, PluginClass );                                                                                    // 127\n};                                                                                                                     // 128\n                                                                                                                       // 129\nreturn $.bridget;                                                                                                      // 130\n                                                                                                                       // 131\n}                                                                                                                      // 132\n                                                                                                                       // 133\n// transport                                                                                                           // 134\nif ( typeof define === 'function' && define.amd ) {                                                                    // 135\n  // AMD                                                                                                               // 136\n  define( 'jquery-bridget/jquery.bridget',[ 'jquery' ], defineBridget );                                               // 137\n} else if ( typeof exports === 'object' ) {                                                                            // 138\n  defineBridget( require('jquery') );                                                                                  // 139\n} else {                                                                                                               // 140\n  // get jquery from browser global                                                                                    // 141\n  defineBridget( window.jQuery );                                                                                      // 142\n}                                                                                                                      // 143\n                                                                                                                       // 144\n})( window );                                                                                                          // 145\n                                                                                                                       // 146\n/*!                                                                                                                    // 147\n * eventie v1.0.5                                                                                                      // 148\n * event binding helper                                                                                                // 149\n *   eventie.bind( elem, 'click', myFn )                                                                               // 150\n *   eventie.unbind( elem, 'click', myFn )                                                                             // 151\n * MIT license                                                                                                         // 152\n */                                                                                                                    // 153\n                                                                                                                       // 154\n/*jshint browser: true, undef: true, unused: true */                                                                   // 155\n/*global define: false, module: false */                                                                               // 156\n                                                                                                                       // 157\n( function( window ) {                                                                                                 // 158\n                                                                                                                       // 159\n                                                                                                                       // 160\n                                                                                                                       // 161\nvar docElem = document.documentElement;                                                                                // 162\n                                                                                                                       // 163\nvar bind = function() {};                                                                                              // 164\n                                                                                                                       // 165\nfunction getIEEvent( obj ) {                                                                                           // 166\n  var event = window.event;                                                                                            // 167\n  // add event.target                                                                                                  // 168\n  event.target = event.target || event.srcElement || obj;                                                              // 169\n  return event;                                                                                                        // 170\n}                                                                                                                      // 171\n                                                                                                                       // 172\nif ( docElem.addEventListener ) {                                                                                      // 173\n  bind = function( obj, type, fn ) {                                                                                   // 174\n    obj.addEventListener( type, fn, false );                                                                           // 175\n  };                                                                                                                   // 176\n} else if ( docElem.attachEvent ) {                                                                                    // 177\n  bind = function( obj, type, fn ) {                                                                                   // 178\n    obj[ type + fn ] = fn.handleEvent ?                                                                                // 179\n      function() {                                                                                                     // 180\n        var event = getIEEvent( obj );                                                                                 // 181\n        fn.handleEvent.call( fn, event );                                                                              // 182\n      } :                                                                                                              // 183\n      function() {                                                                                                     // 184\n        var event = getIEEvent( obj );                                                                                 // 185\n        fn.call( obj, event );                                                                                         // 186\n      };                                                                                                               // 187\n    obj.attachEvent( \"on\" + type, obj[ type + fn ] );                                                                  // 188\n  };                                                                                                                   // 189\n}                                                                                                                      // 190\n                                                                                                                       // 191\nvar unbind = function() {};                                                                                            // 192\n                                                                                                                       // 193\nif ( docElem.removeEventListener ) {                                                                                   // 194\n  unbind = function( obj, type, fn ) {                                                                                 // 195\n    obj.removeEventListener( type, fn, false );                                                                        // 196\n  };                                                                                                                   // 197\n} else if ( docElem.detachEvent ) {                                                                                    // 198\n  unbind = function( obj, type, fn ) {                                                                                 // 199\n    obj.detachEvent( \"on\" + type, obj[ type + fn ] );                                                                  // 200\n    try {                                                                                                              // 201\n      delete obj[ type + fn ];                                                                                         // 202\n    } catch ( err ) {                                                                                                  // 203\n      // can't delete window object properties                                                                         // 204\n      obj[ type + fn ] = undefined;                                                                                    // 205\n    }                                                                                                                  // 206\n  };                                                                                                                   // 207\n}                                                                                                                      // 208\n                                                                                                                       // 209\nvar eventie = {                                                                                                        // 210\n  bind: bind,                                                                                                          // 211\n  unbind: unbind                                                                                                       // 212\n};                                                                                                                     // 213\n                                                                                                                       // 214\n// ----- module definition ----- //                                                                                    // 215\n                                                                                                                       // 216\nif ( typeof define === 'function' && define.amd ) {                                                                    // 217\n  // AMD                                                                                                               // 218\n  define( 'eventie/eventie',eventie );                                                                                 // 219\n} else if ( typeof exports === 'object' ) {                                                                            // 220\n  // CommonJS                                                                                                          // 221\n  module.exports = eventie;                                                                                            // 222\n} else {                                                                                                               // 223\n  // browser global                                                                                                    // 224\n  window.eventie = eventie;                                                                                            // 225\n}                                                                                                                      // 226\n                                                                                                                       // 227\n})( this );                                                                                                            // 228\n                                                                                                                       // 229\n/*!                                                                                                                    // 230\n * docReady v1.0.4                                                                                                     // 231\n * Cross browser DOMContentLoaded event emitter                                                                        // 232\n * MIT license                                                                                                         // 233\n */                                                                                                                    // 234\n                                                                                                                       // 235\n/*jshint browser: true, strict: true, undef: true, unused: true*/                                                      // 236\n/*global define: false, require: false, module: false */                                                               // 237\n                                                                                                                       // 238\n( function( window ) {                                                                                                 // 239\n                                                                                                                       // 240\n                                                                                                                       // 241\n                                                                                                                       // 242\nvar document = window.document;                                                                                        // 243\n// collection of functions to be triggered on ready                                                                    // 244\nvar queue = [];                                                                                                        // 245\n                                                                                                                       // 246\nfunction docReady( fn ) {                                                                                              // 247\n  // throw out non-functions                                                                                           // 248\n  if ( typeof fn !== 'function' ) {                                                                                    // 249\n    return;                                                                                                            // 250\n  }                                                                                                                    // 251\n                                                                                                                       // 252\n  if ( docReady.isReady ) {                                                                                            // 253\n    // ready now, hit it                                                                                               // 254\n    fn();                                                                                                              // 255\n  } else {                                                                                                             // 256\n    // queue function when ready                                                                                       // 257\n    queue.push( fn );                                                                                                  // 258\n  }                                                                                                                    // 259\n}                                                                                                                      // 260\n                                                                                                                       // 261\ndocReady.isReady = false;                                                                                              // 262\n                                                                                                                       // 263\n// triggered on various doc ready events                                                                               // 264\nfunction onReady( event ) {                                                                                            // 265\n  // bail if already triggered or IE8 document is not ready just yet                                                   // 266\n  var isIE8NotReady = event.type === 'readystatechange' && document.readyState !== 'complete';                         // 267\n  if ( docReady.isReady || isIE8NotReady ) {                                                                           // 268\n    return;                                                                                                            // 269\n  }                                                                                                                    // 270\n                                                                                                                       // 271\n  trigger();                                                                                                           // 272\n}                                                                                                                      // 273\n                                                                                                                       // 274\nfunction trigger() {                                                                                                   // 275\n  docReady.isReady = true;                                                                                             // 276\n  // process queue                                                                                                     // 277\n  for ( var i=0, len = queue.length; i < len; i++ ) {                                                                  // 278\n    var fn = queue[i];                                                                                                 // 279\n    fn();                                                                                                              // 280\n  }                                                                                                                    // 281\n}                                                                                                                      // 282\n                                                                                                                       // 283\nfunction defineDocReady( eventie ) {                                                                                   // 284\n  // trigger ready if page is ready                                                                                    // 285\n  if ( document.readyState === 'complete' ) {                                                                          // 286\n    trigger();                                                                                                         // 287\n  } else {                                                                                                             // 288\n    // listen for events                                                                                               // 289\n    eventie.bind( document, 'DOMContentLoaded', onReady );                                                             // 290\n    eventie.bind( document, 'readystatechange', onReady );                                                             // 291\n    eventie.bind( window, 'load', onReady );                                                                           // 292\n  }                                                                                                                    // 293\n                                                                                                                       // 294\n  return docReady;                                                                                                     // 295\n}                                                                                                                      // 296\n                                                                                                                       // 297\n// transport                                                                                                           // 298\nif ( typeof define === 'function' && define.amd ) {                                                                    // 299\n  // AMD                                                                                                               // 300\n  define( 'doc-ready/doc-ready',[ 'eventie/eventie' ], defineDocReady );                                               // 301\n} else if ( typeof exports === 'object' ) {                                                                            // 302\n  module.exports = defineDocReady( require('eventie') );                                                               // 303\n} else {                                                                                                               // 304\n  // browser global                                                                                                    // 305\n  window.docReady = defineDocReady( window.eventie );                                                                  // 306\n}                                                                                                                      // 307\n                                                                                                                       // 308\n})( window );                                                                                                          // 309\n                                                                                                                       // 310\n/*!                                                                                                                    // 311\n * EventEmitter v4.2.9 - git.io/ee                                                                                     // 312\n * Oliver Caldwell                                                                                                     // 313\n * MIT license                                                                                                         // 314\n * @preserve                                                                                                           // 315\n */                                                                                                                    // 316\n                                                                                                                       // 317\n(function () {                                                                                                         // 318\n                                                                                                                       // 319\n                                                                                                                       // 320\n    /**                                                                                                                // 321\n     * Class for managing events.                                                                                      // 322\n     * Can be extended to provide event functionality in other classes.                                                // 323\n     *                                                                                                                 // 324\n     * @class EventEmitter Manages event registering and emitting.                                                     // 325\n     */                                                                                                                // 326\n    function EventEmitter() {}                                                                                         // 327\n                                                                                                                       // 328\n    // Shortcuts to improve speed and size                                                                             // 329\n    var proto = EventEmitter.prototype;                                                                                // 330\n    var exports = this;                                                                                                // 331\n    var originalGlobalValue = exports.EventEmitter;                                                                    // 332\n                                                                                                                       // 333\n    /**                                                                                                                // 334\n     * Finds the index of the listener for the event in its storage array.                                             // 335\n     *                                                                                                                 // 336\n     * @param {Function[]} listeners Array of listeners to search through.                                             // 337\n     * @param {Function} listener Method to look for.                                                                  // 338\n     * @return {Number} Index of the specified listener, -1 if not found                                               // 339\n     * @api private                                                                                                    // 340\n     */                                                                                                                // 341\n    function indexOfListener(listeners, listener) {                                                                    // 342\n        var i = listeners.length;                                                                                      // 343\n        while (i--) {                                                                                                  // 344\n            if (listeners[i].listener === listener) {                                                                  // 345\n                return i;                                                                                              // 346\n            }                                                                                                          // 347\n        }                                                                                                              // 348\n                                                                                                                       // 349\n        return -1;                                                                                                     // 350\n    }                                                                                                                  // 351\n                                                                                                                       // 352\n    /**                                                                                                                // 353\n     * Alias a method while keeping the context correct, to allow for overwriting of target method.                    // 354\n     *                                                                                                                 // 355\n     * @param {String} name The name of the target method.                                                             // 356\n     * @return {Function} The aliased method                                                                           // 357\n     * @api private                                                                                                    // 358\n     */                                                                                                                // 359\n    function alias(name) {                                                                                             // 360\n        return function aliasClosure() {                                                                               // 361\n            return this[name].apply(this, arguments);                                                                  // 362\n        };                                                                                                             // 363\n    }                                                                                                                  // 364\n                                                                                                                       // 365\n    /**                                                                                                                // 366\n     * Returns the listener array for the specified event.                                                             // 367\n     * Will initialise the event object and listener arrays if required.                                               // 368\n     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.\n     * Each property in the object response is an array of listener functions.                                         // 370\n     *                                                                                                                 // 371\n     * @param {String|RegExp} evt Name of the event to return the listeners from.                                      // 372\n     * @return {Function[]|Object} All listener functions for the event.                                               // 373\n     */                                                                                                                // 374\n    proto.getListeners = function getListeners(evt) {                                                                  // 375\n        var events = this._getEvents();                                                                                // 376\n        var response;                                                                                                  // 377\n        var key;                                                                                                       // 378\n                                                                                                                       // 379\n        // Return a concatenated array of all matching events if                                                       // 380\n        // the selector is a regular expression.                                                                       // 381\n        if (evt instanceof RegExp) {                                                                                   // 382\n            response = {};                                                                                             // 383\n            for (key in events) {                                                                                      // 384\n                if (events.hasOwnProperty(key) && evt.test(key)) {                                                     // 385\n                    response[key] = events[key];                                                                       // 386\n                }                                                                                                      // 387\n            }                                                                                                          // 388\n        }                                                                                                              // 389\n        else {                                                                                                         // 390\n            response = events[evt] || (events[evt] = []);                                                              // 391\n        }                                                                                                              // 392\n                                                                                                                       // 393\n        return response;                                                                                               // 394\n    };                                                                                                                 // 395\n                                                                                                                       // 396\n    /**                                                                                                                // 397\n     * Takes a list of listener objects and flattens it into a list of listener functions.                             // 398\n     *                                                                                                                 // 399\n     * @param {Object[]} listeners Raw listener objects.                                                               // 400\n     * @return {Function[]} Just the listener functions.                                                               // 401\n     */                                                                                                                // 402\n    proto.flattenListeners = function flattenListeners(listeners) {                                                    // 403\n        var flatListeners = [];                                                                                        // 404\n        var i;                                                                                                         // 405\n                                                                                                                       // 406\n        for (i = 0; i < listeners.length; i += 1) {                                                                    // 407\n            flatListeners.push(listeners[i].listener);                                                                 // 408\n        }                                                                                                              // 409\n                                                                                                                       // 410\n        return flatListeners;                                                                                          // 411\n    };                                                                                                                 // 412\n                                                                                                                       // 413\n    /**                                                                                                                // 414\n     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.\n     *                                                                                                                 // 416\n     * @param {String|RegExp} evt Name of the event to return the listeners from.                                      // 417\n     * @return {Object} All listener functions for an event in an object.                                              // 418\n     */                                                                                                                // 419\n    proto.getListenersAsObject = function getListenersAsObject(evt) {                                                  // 420\n        var listeners = this.getListeners(evt);                                                                        // 421\n        var response;                                                                                                  // 422\n                                                                                                                       // 423\n        if (listeners instanceof Array) {                                                                              // 424\n            response = {};                                                                                             // 425\n            response[evt] = listeners;                                                                                 // 426\n        }                                                                                                              // 427\n                                                                                                                       // 428\n        return response || listeners;                                                                                  // 429\n    };                                                                                                                 // 430\n                                                                                                                       // 431\n    /**                                                                                                                // 432\n     * Adds a listener function to the specified event.                                                                // 433\n     * The listener will not be added if it is a duplicate.                                                            // 434\n     * If the listener returns true then it will be removed after it is called.                                        // 435\n     * If you pass a regular expression as the event name then the listener will be added to all events that match it. // 436\n     *                                                                                                                 // 437\n     * @param {String|RegExp} evt Name of the event to attach the listener to.                                         // 438\n     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 440\n     */                                                                                                                // 441\n    proto.addListener = function addListener(evt, listener) {                                                          // 442\n        var listeners = this.getListenersAsObject(evt);                                                                // 443\n        var listenerIsWrapped = typeof listener === 'object';                                                          // 444\n        var key;                                                                                                       // 445\n                                                                                                                       // 446\n        for (key in listeners) {                                                                                       // 447\n            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {                   // 448\n                listeners[key].push(listenerIsWrapped ? listener : {                                                   // 449\n                    listener: listener,                                                                                // 450\n                    once: false                                                                                        // 451\n                });                                                                                                    // 452\n            }                                                                                                          // 453\n        }                                                                                                              // 454\n                                                                                                                       // 455\n        return this;                                                                                                   // 456\n    };                                                                                                                 // 457\n                                                                                                                       // 458\n    /**                                                                                                                // 459\n     * Alias of addListener                                                                                            // 460\n     */                                                                                                                // 461\n    proto.on = alias('addListener');                                                                                   // 462\n                                                                                                                       // 463\n    /**                                                                                                                // 464\n     * Semi-alias of addListener. It will add a listener that will be                                                  // 465\n     * automatically removed after its first execution.                                                                // 466\n     *                                                                                                                 // 467\n     * @param {String|RegExp} evt Name of the event to attach the listener to.                                         // 468\n     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 470\n     */                                                                                                                // 471\n    proto.addOnceListener = function addOnceListener(evt, listener) {                                                  // 472\n        return this.addListener(evt, {                                                                                 // 473\n            listener: listener,                                                                                        // 474\n            once: true                                                                                                 // 475\n        });                                                                                                            // 476\n    };                                                                                                                 // 477\n                                                                                                                       // 478\n    /**                                                                                                                // 479\n     * Alias of addOnceListener.                                                                                       // 480\n     */                                                                                                                // 481\n    proto.once = alias('addOnceListener');                                                                             // 482\n                                                                                                                       // 483\n    /**                                                                                                                // 484\n     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.\n     * You need to tell it what event names should be matched by a regex.                                              // 486\n     *                                                                                                                 // 487\n     * @param {String} evt Name of the event to create.                                                                // 488\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 489\n     */                                                                                                                // 490\n    proto.defineEvent = function defineEvent(evt) {                                                                    // 491\n        this.getListeners(evt);                                                                                        // 492\n        return this;                                                                                                   // 493\n    };                                                                                                                 // 494\n                                                                                                                       // 495\n    /**                                                                                                                // 496\n     * Uses defineEvent to define multiple events.                                                                     // 497\n     *                                                                                                                 // 498\n     * @param {String[]} evts An array of event names to define.                                                       // 499\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 500\n     */                                                                                                                // 501\n    proto.defineEvents = function defineEvents(evts) {                                                                 // 502\n        for (var i = 0; i < evts.length; i += 1) {                                                                     // 503\n            this.defineEvent(evts[i]);                                                                                 // 504\n        }                                                                                                              // 505\n        return this;                                                                                                   // 506\n    };                                                                                                                 // 507\n                                                                                                                       // 508\n    /**                                                                                                                // 509\n     * Removes a listener function from the specified event.                                                           // 510\n     * When passed a regular expression as the event name, it will remove the listener from all events that match it.  // 511\n     *                                                                                                                 // 512\n     * @param {String|RegExp} evt Name of the event to remove the listener from.                                       // 513\n     * @param {Function} listener Method to remove from the event.                                                     // 514\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 515\n     */                                                                                                                // 516\n    proto.removeListener = function removeListener(evt, listener) {                                                    // 517\n        var listeners = this.getListenersAsObject(evt);                                                                // 518\n        var index;                                                                                                     // 519\n        var key;                                                                                                       // 520\n                                                                                                                       // 521\n        for (key in listeners) {                                                                                       // 522\n            if (listeners.hasOwnProperty(key)) {                                                                       // 523\n                index = indexOfListener(listeners[key], listener);                                                     // 524\n                                                                                                                       // 525\n                if (index !== -1) {                                                                                    // 526\n                    listeners[key].splice(index, 1);                                                                   // 527\n                }                                                                                                      // 528\n            }                                                                                                          // 529\n        }                                                                                                              // 530\n                                                                                                                       // 531\n        return this;                                                                                                   // 532\n    };                                                                                                                 // 533\n                                                                                                                       // 534\n    /**                                                                                                                // 535\n     * Alias of removeListener                                                                                         // 536\n     */                                                                                                                // 537\n    proto.off = alias('removeListener');                                                                               // 538\n                                                                                                                       // 539\n    /**                                                                                                                // 540\n     * Adds listeners in bulk using the manipulateListeners method.                                                    // 541\n     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.\n     * You can also pass it a regular expression to add the array of listeners to all events that match it.            // 543\n     * Yeah, this function does quite a bit. That's probably a bad thing.                                              // 544\n     *                                                                                                                 // 545\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to add.                                 // 547\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 548\n     */                                                                                                                // 549\n    proto.addListeners = function addListeners(evt, listeners) {                                                       // 550\n        // Pass through to manipulateListeners                                                                         // 551\n        return this.manipulateListeners(false, evt, listeners);                                                        // 552\n    };                                                                                                                 // 553\n                                                                                                                       // 554\n    /**                                                                                                                // 555\n     * Removes listeners in bulk using the manipulateListeners method.                                                 // 556\n     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n     * You can also pass it an event name and an array of listeners to be removed.                                     // 558\n     * You can also pass it a regular expression to remove the listeners from all events that match it.                // 559\n     *                                                                                                                 // 560\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to remove.                              // 562\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 563\n     */                                                                                                                // 564\n    proto.removeListeners = function removeListeners(evt, listeners) {                                                 // 565\n        // Pass through to manipulateListeners                                                                         // 566\n        return this.manipulateListeners(true, evt, listeners);                                                         // 567\n    };                                                                                                                 // 568\n                                                                                                                       // 569\n    /**                                                                                                                // 570\n     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.\n     * The first argument will determine if the listeners are removed (true) or added (false).                         // 572\n     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.\n     * You can also pass it an event name and an array of listeners to be added/removed.                               // 574\n     * You can also pass it a regular expression to manipulate the listeners of all events that match it.              // 575\n     *                                                                                                                 // 576\n     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.                         // 577\n     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.\n     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.                          // 579\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 580\n     */                                                                                                                // 581\n    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {                                 // 582\n        var i;                                                                                                         // 583\n        var value;                                                                                                     // 584\n        var single = remove ? this.removeListener : this.addListener;                                                  // 585\n        var multiple = remove ? this.removeListeners : this.addListeners;                                              // 586\n                                                                                                                       // 587\n        // If evt is an object then pass each of its properties to this method                                         // 588\n        if (typeof evt === 'object' && !(evt instanceof RegExp)) {                                                     // 589\n            for (i in evt) {                                                                                           // 590\n                if (evt.hasOwnProperty(i) && (value = evt[i])) {                                                       // 591\n                    // Pass the single listener straight through to the singular method                                // 592\n                    if (typeof value === 'function') {                                                                 // 593\n                        single.call(this, i, value);                                                                   // 594\n                    }                                                                                                  // 595\n                    else {                                                                                             // 596\n                        // Otherwise pass back to the multiple function                                                // 597\n                        multiple.call(this, i, value);                                                                 // 598\n                    }                                                                                                  // 599\n                }                                                                                                      // 600\n            }                                                                                                          // 601\n        }                                                                                                              // 602\n        else {                                                                                                         // 603\n            // So evt must be a string                                                                                 // 604\n            // And listeners must be an array of listeners                                                             // 605\n            // Loop over it and pass each one to the multiple method                                                   // 606\n            i = listeners.length;                                                                                      // 607\n            while (i--) {                                                                                              // 608\n                single.call(this, evt, listeners[i]);                                                                  // 609\n            }                                                                                                          // 610\n        }                                                                                                              // 611\n                                                                                                                       // 612\n        return this;                                                                                                   // 613\n    };                                                                                                                 // 614\n                                                                                                                       // 615\n    /**                                                                                                                // 616\n     * Removes all listeners from a specified event.                                                                   // 617\n     * If you do not specify an event then all listeners will be removed.                                              // 618\n     * That means every event will be emptied.                                                                         // 619\n     * You can also pass a regex to remove all events that match it.                                                   // 620\n     *                                                                                                                 // 621\n     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 623\n     */                                                                                                                // 624\n    proto.removeEvent = function removeEvent(evt) {                                                                    // 625\n        var type = typeof evt;                                                                                         // 626\n        var events = this._getEvents();                                                                                // 627\n        var key;                                                                                                       // 628\n                                                                                                                       // 629\n        // Remove different things depending on the state of evt                                                       // 630\n        if (type === 'string') {                                                                                       // 631\n            // Remove all listeners for the specified event                                                            // 632\n            delete events[evt];                                                                                        // 633\n        }                                                                                                              // 634\n        else if (evt instanceof RegExp) {                                                                              // 635\n            // Remove all events matching the regex.                                                                   // 636\n            for (key in events) {                                                                                      // 637\n                if (events.hasOwnProperty(key) && evt.test(key)) {                                                     // 638\n                    delete events[key];                                                                                // 639\n                }                                                                                                      // 640\n            }                                                                                                          // 641\n        }                                                                                                              // 642\n        else {                                                                                                         // 643\n            // Remove all listeners in all events                                                                      // 644\n            delete this._events;                                                                                       // 645\n        }                                                                                                              // 646\n                                                                                                                       // 647\n        return this;                                                                                                   // 648\n    };                                                                                                                 // 649\n                                                                                                                       // 650\n    /**                                                                                                                // 651\n     * Alias of removeEvent.                                                                                           // 652\n     *                                                                                                                 // 653\n     * Added to mirror the node API.                                                                                   // 654\n     */                                                                                                                // 655\n    proto.removeAllListeners = alias('removeEvent');                                                                   // 656\n                                                                                                                       // 657\n    /**                                                                                                                // 658\n     * Emits an event of your choice.                                                                                  // 659\n     * When emitted, every listener attached to that event will be executed.                                           // 660\n     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.   // 661\n     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.            // 662\n     * So they will not arrive within the array on the other side, they will be separate.                              // 663\n     * You can also pass a regular expression to emit to all events that match it.                                     // 664\n     *                                                                                                                 // 665\n     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.                                 // 666\n     * @param {Array} [args] Optional array of arguments to be passed to each listener.                                // 667\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 668\n     */                                                                                                                // 669\n    proto.emitEvent = function emitEvent(evt, args) {                                                                  // 670\n        var listeners = this.getListenersAsObject(evt);                                                                // 671\n        var listener;                                                                                                  // 672\n        var i;                                                                                                         // 673\n        var key;                                                                                                       // 674\n        var response;                                                                                                  // 675\n                                                                                                                       // 676\n        for (key in listeners) {                                                                                       // 677\n            if (listeners.hasOwnProperty(key)) {                                                                       // 678\n                i = listeners[key].length;                                                                             // 679\n                                                                                                                       // 680\n                while (i--) {                                                                                          // 681\n                    // If the listener returns true then it shall be removed from the event                            // 682\n                    // The function is executed either with a basic call or an apply if there is an args array         // 683\n                    listener = listeners[key][i];                                                                      // 684\n                                                                                                                       // 685\n                    if (listener.once === true) {                                                                      // 686\n                        this.removeListener(evt, listener.listener);                                                   // 687\n                    }                                                                                                  // 688\n                                                                                                                       // 689\n                    response = listener.listener.apply(this, args || []);                                              // 690\n                                                                                                                       // 691\n                    if (response === this._getOnceReturnValue()) {                                                     // 692\n                        this.removeListener(evt, listener.listener);                                                   // 693\n                    }                                                                                                  // 694\n                }                                                                                                      // 695\n            }                                                                                                          // 696\n        }                                                                                                              // 697\n                                                                                                                       // 698\n        return this;                                                                                                   // 699\n    };                                                                                                                 // 700\n                                                                                                                       // 701\n    /**                                                                                                                // 702\n     * Alias of emitEvent                                                                                              // 703\n     */                                                                                                                // 704\n    proto.trigger = alias('emitEvent');                                                                                // 705\n                                                                                                                       // 706\n    /**                                                                                                                // 707\n     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.\n     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.         // 709\n     *                                                                                                                 // 710\n     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.                                 // 711\n     * @param {...*} Optional additional arguments to be passed to each listener.                                      // 712\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 713\n     */                                                                                                                // 714\n    proto.emit = function emit(evt) {                                                                                  // 715\n        var args = Array.prototype.slice.call(arguments, 1);                                                           // 716\n        return this.emitEvent(evt, args);                                                                              // 717\n    };                                                                                                                 // 718\n                                                                                                                       // 719\n    /**                                                                                                                // 720\n     * Sets the current value to check against when executing listeners. If a                                          // 721\n     * listeners return value matches the one set here then it will be removed                                         // 722\n     * after execution. This value defaults to true.                                                                   // 723\n     *                                                                                                                 // 724\n     * @param {*} value The new value to check for when executing listeners.                                           // 725\n     * @return {Object} Current instance of EventEmitter for chaining.                                                 // 726\n     */                                                                                                                // 727\n    proto.setOnceReturnValue = function setOnceReturnValue(value) {                                                    // 728\n        this._onceReturnValue = value;                                                                                 // 729\n        return this;                                                                                                   // 730\n    };                                                                                                                 // 731\n                                                                                                                       // 732\n    /**                                                                                                                // 733\n     * Fetches the current value to check against when executing listeners. If                                         // 734\n     * the listeners return value matches this one then it should be removed                                           // 735\n     * automatically. It will return true by default.                                                                  // 736\n     *                                                                                                                 // 737\n     * @return {*|Boolean} The current value to check for or the default, true.                                        // 738\n     * @api private                                                                                                    // 739\n     */                                                                                                                // 740\n    proto._getOnceReturnValue = function _getOnceReturnValue() {                                                       // 741\n        if (this.hasOwnProperty('_onceReturnValue')) {                                                                 // 742\n            return this._onceReturnValue;                                                                              // 743\n        }                                                                                                              // 744\n        else {                                                                                                         // 745\n            return true;                                                                                               // 746\n        }                                                                                                              // 747\n    };                                                                                                                 // 748\n                                                                                                                       // 749\n    /**                                                                                                                // 750\n     * Fetches the events object and creates one if required.                                                          // 751\n     *                                                                                                                 // 752\n     * @return {Object} The events storage object.                                                                     // 753\n     * @api private                                                                                                    // 754\n     */                                                                                                                // 755\n    proto._getEvents = function _getEvents() {                                                                         // 756\n        return this._events || (this._events = {});                                                                    // 757\n    };                                                                                                                 // 758\n                                                                                                                       // 759\n    /**                                                                                                                // 760\n     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.          // 761\n     *                                                                                                                 // 762\n     * @return {Function} Non conflicting EventEmitter class.                                                          // 763\n     */                                                                                                                // 764\n    EventEmitter.noConflict = function noConflict() {                                                                  // 765\n        exports.EventEmitter = originalGlobalValue;                                                                    // 766\n        return EventEmitter;                                                                                           // 767\n    };                                                                                                                 // 768\n                                                                                                                       // 769\n    // Expose the class either via AMD, CommonJS or the global object                                                  // 770\n    if (typeof define === 'function' && define.amd) {                                                                  // 771\n        define('eventEmitter/EventEmitter',[],function () {                                                            // 772\n            return EventEmitter;                                                                                       // 773\n        });                                                                                                            // 774\n    }                                                                                                                  // 775\n    else if (typeof module === 'object' && module.exports){                                                            // 776\n        module.exports = EventEmitter;                                                                                 // 777\n    }                                                                                                                  // 778\n    else {                                                                                                             // 779\n        exports.EventEmitter = EventEmitter;                                                                           // 780\n    }                                                                                                                  // 781\n}.call(this));                                                                                                         // 782\n                                                                                                                       // 783\n/*!                                                                                                                    // 784\n * getStyleProperty v1.0.4                                                                                             // 785\n * original by kangax                                                                                                  // 786\n * http://perfectionkills.com/feature-testing-css-properties/                                                          // 787\n * MIT license                                                                                                         // 788\n */                                                                                                                    // 789\n                                                                                                                       // 790\n/*jshint browser: true, strict: true, undef: true */                                                                   // 791\n/*global define: false, exports: false, module: false */                                                               // 792\n                                                                                                                       // 793\n( function( window ) {                                                                                                 // 794\n                                                                                                                       // 795\n                                                                                                                       // 796\n                                                                                                                       // 797\nvar prefixes = 'Webkit Moz ms Ms O'.split(' ');                                                                        // 798\nvar docElemStyle = document.documentElement.style;                                                                     // 799\n                                                                                                                       // 800\nfunction getStyleProperty( propName ) {                                                                                // 801\n  if ( !propName ) {                                                                                                   // 802\n    return;                                                                                                            // 803\n  }                                                                                                                    // 804\n                                                                                                                       // 805\n  // test standard property first                                                                                      // 806\n  if ( typeof docElemStyle[ propName ] === 'string' ) {                                                                // 807\n    return propName;                                                                                                   // 808\n  }                                                                                                                    // 809\n                                                                                                                       // 810\n  // capitalize                                                                                                        // 811\n  propName = propName.charAt(0).toUpperCase() + propName.slice(1);                                                     // 812\n                                                                                                                       // 813\n  // test vendor specific properties                                                                                   // 814\n  var prefixed;                                                                                                        // 815\n  for ( var i=0, len = prefixes.length; i < len; i++ ) {                                                               // 816\n    prefixed = prefixes[i] + propName;                                                                                 // 817\n    if ( typeof docElemStyle[ prefixed ] === 'string' ) {                                                              // 818\n      return prefixed;                                                                                                 // 819\n    }                                                                                                                  // 820\n  }                                                                                                                    // 821\n}                                                                                                                      // 822\n                                                                                                                       // 823\n// transport                                                                                                           // 824\nif ( typeof define === 'function' && define.amd ) {                                                                    // 825\n  // AMD                                                                                                               // 826\n  define( 'get-style-property/get-style-property',[],function() {                                                      // 827\n    return getStyleProperty;                                                                                           // 828\n  });                                                                                                                  // 829\n} else if ( typeof exports === 'object' ) {                                                                            // 830\n  // CommonJS for Component                                                                                            // 831\n  module.exports = getStyleProperty;                                                                                   // 832\n} else {                                                                                                               // 833\n  // browser global                                                                                                    // 834\n  window.getStyleProperty = getStyleProperty;                                                                          // 835\n}                                                                                                                      // 836\n                                                                                                                       // 837\n})( window );                                                                                                          // 838\n                                                                                                                       // 839\n/*!                                                                                                                    // 840\n * getSize v1.2.2                                                                                                      // 841\n * measure size of elements                                                                                            // 842\n * MIT license                                                                                                         // 843\n */                                                                                                                    // 844\n                                                                                                                       // 845\n/*jshint browser: true, strict: true, undef: true, unused: true */                                                     // 846\n/*global define: false, exports: false, require: false, module: false, console: false */                               // 847\n                                                                                                                       // 848\n( function( window, undefined ) {                                                                                      // 849\n                                                                                                                       // 850\n                                                                                                                       // 851\n                                                                                                                       // 852\n// -------------------------- helpers -------------------------- //                                                    // 853\n                                                                                                                       // 854\n// get a number from a string, not a percentage                                                                        // 855\nfunction getStyleSize( value ) {                                                                                       // 856\n  var num = parseFloat( value );                                                                                       // 857\n  // not a percent like '100%', and a number                                                                           // 858\n  var isValid = value.indexOf('%') === -1 && !isNaN( num );                                                            // 859\n  return isValid && num;                                                                                               // 860\n}                                                                                                                      // 861\n                                                                                                                       // 862\nfunction noop() {}                                                                                                     // 863\n                                                                                                                       // 864\nvar logError = typeof console === 'undefined' ? noop :                                                                 // 865\n  function( message ) {                                                                                                // 866\n    console.error( message );                                                                                          // 867\n  };                                                                                                                   // 868\n                                                                                                                       // 869\n// -------------------------- measurements -------------------------- //                                               // 870\n                                                                                                                       // 871\nvar measurements = [                                                                                                   // 872\n  'paddingLeft',                                                                                                       // 873\n  'paddingRight',                                                                                                      // 874\n  'paddingTop',                                                                                                        // 875\n  'paddingBottom',                                                                                                     // 876\n  'marginLeft',                                                                                                        // 877\n  'marginRight',                                                                                                       // 878\n  'marginTop',                                                                                                         // 879\n  'marginBottom',                                                                                                      // 880\n  'borderLeftWidth',                                                                                                   // 881\n  'borderRightWidth',                                                                                                  // 882\n  'borderTopWidth',                                                                                                    // 883\n  'borderBottomWidth'                                                                                                  // 884\n];                                                                                                                     // 885\n                                                                                                                       // 886\nfunction getZeroSize() {                                                                                               // 887\n  var size = {                                                                                                         // 888\n    width: 0,                                                                                                          // 889\n    height: 0,                                                                                                         // 890\n    innerWidth: 0,                                                                                                     // 891\n    innerHeight: 0,                                                                                                    // 892\n    outerWidth: 0,                                                                                                     // 893\n    outerHeight: 0                                                                                                     // 894\n  };                                                                                                                   // 895\n  for ( var i=0, len = measurements.length; i < len; i++ ) {                                                           // 896\n    var measurement = measurements[i];                                                                                 // 897\n    size[ measurement ] = 0;                                                                                           // 898\n  }                                                                                                                    // 899\n  return size;                                                                                                         // 900\n}                                                                                                                      // 901\n                                                                                                                       // 902\n                                                                                                                       // 903\n                                                                                                                       // 904\nfunction defineGetSize( getStyleProperty ) {                                                                           // 905\n                                                                                                                       // 906\n// -------------------------- setup -------------------------- //                                                      // 907\n                                                                                                                       // 908\nvar isSetup = false;                                                                                                   // 909\n                                                                                                                       // 910\nvar getStyle, boxSizingProp, isBoxSizeOuter;                                                                           // 911\n                                                                                                                       // 912\n/**                                                                                                                    // 913\n * setup vars and functions                                                                                            // 914\n * do it on initial getSize(), rather than on script load                                                              // 915\n * For Firefox bug https://bugzilla.mozilla.org/show_bug.cgi?id=548397                                                 // 916\n */                                                                                                                    // 917\nfunction setup() {                                                                                                     // 918\n  // setup once                                                                                                        // 919\n  if ( isSetup ) {                                                                                                     // 920\n    return;                                                                                                            // 921\n  }                                                                                                                    // 922\n  isSetup = true;                                                                                                      // 923\n                                                                                                                       // 924\n  var getComputedStyle = window.getComputedStyle;                                                                      // 925\n  getStyle = ( function() {                                                                                            // 926\n    var getStyleFn = getComputedStyle ?                                                                                // 927\n      function( elem ) {                                                                                               // 928\n        return getComputedStyle( elem, null );                                                                         // 929\n      } :                                                                                                              // 930\n      function( elem ) {                                                                                               // 931\n        return elem.currentStyle;                                                                                      // 932\n      };                                                                                                               // 933\n                                                                                                                       // 934\n      return function getStyle( elem ) {                                                                               // 935\n        var style = getStyleFn( elem );                                                                                // 936\n        if ( !style ) {                                                                                                // 937\n          logError( 'Style returned ' + style +                                                                        // 938\n            '. Are you running this code in a hidden iframe on Firefox? ' +                                            // 939\n            'See http://bit.ly/getsizebug1' );                                                                         // 940\n        }                                                                                                              // 941\n        return style;                                                                                                  // 942\n      };                                                                                                               // 943\n  })();                                                                                                                // 944\n                                                                                                                       // 945\n  // -------------------------- box sizing -------------------------- //                                               // 946\n                                                                                                                       // 947\n  boxSizingProp = getStyleProperty('boxSizing');                                                                       // 948\n                                                                                                                       // 949\n  /**                                                                                                                  // 950\n   * WebKit measures the outer-width on style.width on border-box elems                                                // 951\n   * IE & Firefox measures the inner-width                                                                             // 952\n   */                                                                                                                  // 953\n  if ( boxSizingProp ) {                                                                                               // 954\n    var div = document.createElement('div');                                                                           // 955\n    div.style.width = '200px';                                                                                         // 956\n    div.style.padding = '1px 2px 3px 4px';                                                                             // 957\n    div.style.borderStyle = 'solid';                                                                                   // 958\n    div.style.borderWidth = '1px 2px 3px 4px';                                                                         // 959\n    div.style[ boxSizingProp ] = 'border-box';                                                                         // 960\n                                                                                                                       // 961\n    var body = document.body || document.documentElement;                                                              // 962\n    body.appendChild( div );                                                                                           // 963\n    var style = getStyle( div );                                                                                       // 964\n                                                                                                                       // 965\n    isBoxSizeOuter = getStyleSize( style.width ) === 200;                                                              // 966\n    body.removeChild( div );                                                                                           // 967\n  }                                                                                                                    // 968\n                                                                                                                       // 969\n}                                                                                                                      // 970\n                                                                                                                       // 971\n// -------------------------- getSize -------------------------- //                                                    // 972\n                                                                                                                       // 973\nfunction getSize( elem ) {                                                                                             // 974\n  setup();                                                                                                             // 975\n                                                                                                                       // 976\n  // use querySeletor if elem is string                                                                                // 977\n  if ( typeof elem === 'string' ) {                                                                                    // 978\n    elem = document.querySelector( elem );                                                                             // 979\n  }                                                                                                                    // 980\n                                                                                                                       // 981\n  // do not proceed on non-objects                                                                                     // 982\n  if ( !elem || typeof elem !== 'object' || !elem.nodeType ) {                                                         // 983\n    return;                                                                                                            // 984\n  }                                                                                                                    // 985\n                                                                                                                       // 986\n  var style = getStyle( elem );                                                                                        // 987\n                                                                                                                       // 988\n  // if hidden, everything is 0                                                                                        // 989\n  if ( style.display === 'none' ) {                                                                                    // 990\n    return getZeroSize();                                                                                              // 991\n  }                                                                                                                    // 992\n                                                                                                                       // 993\n  var size = {};                                                                                                       // 994\n  size.width = elem.offsetWidth;                                                                                       // 995\n  size.height = elem.offsetHeight;                                                                                     // 996\n                                                                                                                       // 997\n  var isBorderBox = size.isBorderBox = !!( boxSizingProp &&                                                            // 998\n    style[ boxSizingProp ] && style[ boxSizingProp ] === 'border-box' );                                               // 999\n                                                                                                                       // 1000\n  // get all measurements                                                                                              // 1001\n  for ( var i=0, len = measurements.length; i < len; i++ ) {                                                           // 1002\n    var measurement = measurements[i];                                                                                 // 1003\n    var value = style[ measurement ];                                                                                  // 1004\n    value = mungeNonPixel( elem, value );                                                                              // 1005\n    var num = parseFloat( value );                                                                                     // 1006\n    // any 'auto', 'medium' value will be 0                                                                            // 1007\n    size[ measurement ] = !isNaN( num ) ? num : 0;                                                                     // 1008\n  }                                                                                                                    // 1009\n                                                                                                                       // 1010\n  var paddingWidth = size.paddingLeft + size.paddingRight;                                                             // 1011\n  var paddingHeight = size.paddingTop + size.paddingBottom;                                                            // 1012\n  var marginWidth = size.marginLeft + size.marginRight;                                                                // 1013\n  var marginHeight = size.marginTop + size.marginBottom;                                                               // 1014\n  var borderWidth = size.borderLeftWidth + size.borderRightWidth;                                                      // 1015\n  var borderHeight = size.borderTopWidth + size.borderBottomWidth;                                                     // 1016\n                                                                                                                       // 1017\n  var isBorderBoxSizeOuter = isBorderBox && isBoxSizeOuter;                                                            // 1018\n                                                                                                                       // 1019\n  // overwrite width and height if we can get it from style                                                            // 1020\n  var styleWidth = getStyleSize( style.width );                                                                        // 1021\n  if ( styleWidth !== false ) {                                                                                        // 1022\n    size.width = styleWidth +                                                                                          // 1023\n      // add padding and border unless it's already including it                                                       // 1024\n      ( isBorderBoxSizeOuter ? 0 : paddingWidth + borderWidth );                                                       // 1025\n  }                                                                                                                    // 1026\n                                                                                                                       // 1027\n  var styleHeight = getStyleSize( style.height );                                                                      // 1028\n  if ( styleHeight !== false ) {                                                                                       // 1029\n    size.height = styleHeight +                                                                                        // 1030\n      // add padding and border unless it's already including it                                                       // 1031\n      ( isBorderBoxSizeOuter ? 0 : paddingHeight + borderHeight );                                                     // 1032\n  }                                                                                                                    // 1033\n                                                                                                                       // 1034\n  size.innerWidth = size.width - ( paddingWidth + borderWidth );                                                       // 1035\n  size.innerHeight = size.height - ( paddingHeight + borderHeight );                                                   // 1036\n                                                                                                                       // 1037\n  size.outerWidth = size.width + marginWidth;                                                                          // 1038\n  size.outerHeight = size.height + marginHeight;                                                                       // 1039\n                                                                                                                       // 1040\n  return size;                                                                                                         // 1041\n}                                                                                                                      // 1042\n                                                                                                                       // 1043\n// IE8 returns percent values, not pixels                                                                              // 1044\n// taken from jQuery's curCSS                                                                                          // 1045\nfunction mungeNonPixel( elem, value ) {                                                                                // 1046\n  // IE8 and has percent value                                                                                         // 1047\n  if ( window.getComputedStyle || value.indexOf('%') === -1 ) {                                                        // 1048\n    return value;                                                                                                      // 1049\n  }                                                                                                                    // 1050\n  var style = elem.style;                                                                                              // 1051\n  // Remember the original values                                                                                      // 1052\n  var left = style.left;                                                                                               // 1053\n  var rs = elem.runtimeStyle;                                                                                          // 1054\n  var rsLeft = rs && rs.left;                                                                                          // 1055\n                                                                                                                       // 1056\n  // Put in the new values to get a computed value out                                                                 // 1057\n  if ( rsLeft ) {                                                                                                      // 1058\n    rs.left = elem.currentStyle.left;                                                                                  // 1059\n  }                                                                                                                    // 1060\n  style.left = value;                                                                                                  // 1061\n  value = style.pixelLeft;                                                                                             // 1062\n                                                                                                                       // 1063\n  // Revert the changed values                                                                                         // 1064\n  style.left = left;                                                                                                   // 1065\n  if ( rsLeft ) {                                                                                                      // 1066\n    rs.left = rsLeft;                                                                                                  // 1067\n  }                                                                                                                    // 1068\n                                                                                                                       // 1069\n  return value;                                                                                                        // 1070\n}                                                                                                                      // 1071\n                                                                                                                       // 1072\nreturn getSize;                                                                                                        // 1073\n                                                                                                                       // 1074\n}                                                                                                                      // 1075\n                                                                                                                       // 1076\n// transport                                                                                                           // 1077\nif ( typeof define === 'function' && define.amd ) {                                                                    // 1078\n  // AMD for RequireJS                                                                                                 // 1079\n  define( 'get-size/get-size',[ 'get-style-property/get-style-property' ], defineGetSize );                            // 1080\n} else if ( typeof exports === 'object' ) {                                                                            // 1081\n  // CommonJS for Component                                                                                            // 1082\n  module.exports = defineGetSize( require('desandro-get-style-property') );                                            // 1083\n} else {                                                                                                               // 1084\n  // browser global                                                                                                    // 1085\n  window.getSize = defineGetSize( window.getStyleProperty );                                                           // 1086\n}                                                                                                                      // 1087\n                                                                                                                       // 1088\n})( window );                                                                                                          // 1089\n                                                                                                                       // 1090\n/**                                                                                                                    // 1091\n * matchesSelector v1.0.2                                                                                              // 1092\n * matchesSelector( element, '.selector' )                                                                             // 1093\n * MIT license                                                                                                         // 1094\n */                                                                                                                    // 1095\n                                                                                                                       // 1096\n/*jshint browser: true, strict: true, undef: true, unused: true */                                                     // 1097\n/*global define: false, module: false */                                                                               // 1098\n                                                                                                                       // 1099\n( function( ElemProto ) {                                                                                              // 1100\n                                                                                                                       // 1101\n                                                                                                                       // 1102\n                                                                                                                       // 1103\n  var matchesMethod = ( function() {                                                                                   // 1104\n    // check un-prefixed                                                                                               // 1105\n    if ( ElemProto.matchesSelector ) {                                                                                 // 1106\n      return 'matchesSelector';                                                                                        // 1107\n    }                                                                                                                  // 1108\n    // check vendor prefixes                                                                                           // 1109\n    var prefixes = [ 'webkit', 'moz', 'ms', 'o' ];                                                                     // 1110\n                                                                                                                       // 1111\n    for ( var i=0, len = prefixes.length; i < len; i++ ) {                                                             // 1112\n      var prefix = prefixes[i];                                                                                        // 1113\n      var method = prefix + 'MatchesSelector';                                                                         // 1114\n      if ( ElemProto[ method ] ) {                                                                                     // 1115\n        return method;                                                                                                 // 1116\n      }                                                                                                                // 1117\n    }                                                                                                                  // 1118\n  })();                                                                                                                // 1119\n                                                                                                                       // 1120\n  // ----- match ----- //                                                                                              // 1121\n                                                                                                                       // 1122\n  function match( elem, selector ) {                                                                                   // 1123\n    return elem[ matchesMethod ]( selector );                                                                          // 1124\n  }                                                                                                                    // 1125\n                                                                                                                       // 1126\n  // ----- appendToFragment ----- //                                                                                   // 1127\n                                                                                                                       // 1128\n  function checkParent( elem ) {                                                                                       // 1129\n    // not needed if already has parent                                                                                // 1130\n    if ( elem.parentNode ) {                                                                                           // 1131\n      return;                                                                                                          // 1132\n    }                                                                                                                  // 1133\n    var fragment = document.createDocumentFragment();                                                                  // 1134\n    fragment.appendChild( elem );                                                                                      // 1135\n  }                                                                                                                    // 1136\n                                                                                                                       // 1137\n  // ----- query ----- //                                                                                              // 1138\n                                                                                                                       // 1139\n  // fall back to using QSA                                                                                            // 1140\n  // thx @jonathantneal https://gist.github.com/3062955                                                                // 1141\n  function query( elem, selector ) {                                                                                   // 1142\n    // append to fragment if no parent                                                                                 // 1143\n    checkParent( elem );                                                                                               // 1144\n                                                                                                                       // 1145\n    // match elem with all selected elems of parent                                                                    // 1146\n    var elems = elem.parentNode.querySelectorAll( selector );                                                          // 1147\n    for ( var i=0, len = elems.length; i < len; i++ ) {                                                                // 1148\n      // return true if match                                                                                          // 1149\n      if ( elems[i] === elem ) {                                                                                       // 1150\n        return true;                                                                                                   // 1151\n      }                                                                                                                // 1152\n    }                                                                                                                  // 1153\n    // otherwise return false                                                                                          // 1154\n    return false;                                                                                                      // 1155\n  }                                                                                                                    // 1156\n                                                                                                                       // 1157\n  // ----- matchChild ----- //                                                                                         // 1158\n                                                                                                                       // 1159\n  function matchChild( elem, selector ) {                                                                              // 1160\n    checkParent( elem );                                                                                               // 1161\n    return match( elem, selector );                                                                                    // 1162\n  }                                                                                                                    // 1163\n                                                                                                                       // 1164\n  // ----- matchesSelector ----- //                                                                                    // 1165\n                                                                                                                       // 1166\n  var matchesSelector;                                                                                                 // 1167\n                                                                                                                       // 1168\n  if ( matchesMethod ) {                                                                                               // 1169\n    // IE9 supports matchesSelector, but doesn't work on orphaned elems                                                // 1170\n    // check for that                                                                                                  // 1171\n    var div = document.createElement('div');                                                                           // 1172\n    var supportsOrphans = match( div, 'div' );                                                                         // 1173\n    matchesSelector = supportsOrphans ? match : matchChild;                                                            // 1174\n  } else {                                                                                                             // 1175\n    matchesSelector = query;                                                                                           // 1176\n  }                                                                                                                    // 1177\n                                                                                                                       // 1178\n  // transport                                                                                                         // 1179\n  if ( typeof define === 'function' && define.amd ) {                                                                  // 1180\n    // AMD                                                                                                             // 1181\n    define( 'matches-selector/matches-selector',[],function() {                                                        // 1182\n      return matchesSelector;                                                                                          // 1183\n    });                                                                                                                // 1184\n  } else if ( typeof exports === 'object' ) {                                                                          // 1185\n    module.exports = matchesSelector;                                                                                  // 1186\n  }                                                                                                                    // 1187\n  else {                                                                                                               // 1188\n    // browser global                                                                                                  // 1189\n    window.matchesSelector = matchesSelector;                                                                          // 1190\n  }                                                                                                                    // 1191\n                                                                                                                       // 1192\n})( Element.prototype );                                                                                               // 1193\n                                                                                                                       // 1194\n/**                                                                                                                    // 1195\n * Outlayer Item                                                                                                       // 1196\n */                                                                                                                    // 1197\n                                                                                                                       // 1198\n( function( window ) {                                                                                                 // 1199\n                                                                                                                       // 1200\n                                                                                                                       // 1201\n                                                                                                                       // 1202\n// ----- get style ----- //                                                                                            // 1203\n                                                                                                                       // 1204\nvar getComputedStyle = window.getComputedStyle;                                                                        // 1205\nvar getStyle = getComputedStyle ?                                                                                      // 1206\n  function( elem ) {                                                                                                   // 1207\n    return getComputedStyle( elem, null );                                                                             // 1208\n  } :                                                                                                                  // 1209\n  function( elem ) {                                                                                                   // 1210\n    return elem.currentStyle;                                                                                          // 1211\n  };                                                                                                                   // 1212\n                                                                                                                       // 1213\n                                                                                                                       // 1214\n// extend objects                                                                                                      // 1215\nfunction extend( a, b ) {                                                                                              // 1216\n  for ( var prop in b ) {                                                                                              // 1217\n    a[ prop ] = b[ prop ];                                                                                             // 1218\n  }                                                                                                                    // 1219\n  return a;                                                                                                            // 1220\n}                                                                                                                      // 1221\n                                                                                                                       // 1222\nfunction isEmptyObj( obj ) {                                                                                           // 1223\n  for ( var prop in obj ) {                                                                                            // 1224\n    return false;                                                                                                      // 1225\n  }                                                                                                                    // 1226\n  prop = null;                                                                                                         // 1227\n  return true;                                                                                                         // 1228\n}                                                                                                                      // 1229\n                                                                                                                       // 1230\n// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/\nfunction toDash( str ) {                                                                                               // 1232\n  return str.replace( /([A-Z])/g, function( $1 ){                                                                      // 1233\n    return '-' + $1.toLowerCase();                                                                                     // 1234\n  });                                                                                                                  // 1235\n}                                                                                                                      // 1236\n                                                                                                                       // 1237\n// -------------------------- Outlayer definition -------------------------- //                                        // 1238\n                                                                                                                       // 1239\nfunction outlayerItemDefinition( EventEmitter, getSize, getStyleProperty ) {                                           // 1240\n                                                                                                                       // 1241\n// -------------------------- CSS3 support -------------------------- //                                               // 1242\n                                                                                                                       // 1243\nvar transitionProperty = getStyleProperty('transition');                                                               // 1244\nvar transformProperty = getStyleProperty('transform');                                                                 // 1245\nvar supportsCSS3 = transitionProperty && transformProperty;                                                            // 1246\nvar is3d = !!getStyleProperty('perspective');                                                                          // 1247\n                                                                                                                       // 1248\nvar transitionEndEvent = {                                                                                             // 1249\n  WebkitTransition: 'webkitTransitionEnd',                                                                             // 1250\n  MozTransition: 'transitionend',                                                                                      // 1251\n  OTransition: 'otransitionend',                                                                                       // 1252\n  transition: 'transitionend'                                                                                          // 1253\n}[ transitionProperty ];                                                                                               // 1254\n                                                                                                                       // 1255\n// properties that could have vendor prefix                                                                            // 1256\nvar prefixableProperties = [                                                                                           // 1257\n  'transform',                                                                                                         // 1258\n  'transition',                                                                                                        // 1259\n  'transitionDuration',                                                                                                // 1260\n  'transitionProperty'                                                                                                 // 1261\n];                                                                                                                     // 1262\n                                                                                                                       // 1263\n// cache all vendor properties                                                                                         // 1264\nvar vendorProperties = ( function() {                                                                                  // 1265\n  var cache = {};                                                                                                      // 1266\n  for ( var i=0, len = prefixableProperties.length; i < len; i++ ) {                                                   // 1267\n    var prop = prefixableProperties[i];                                                                                // 1268\n    var supportedProp = getStyleProperty( prop );                                                                      // 1269\n    if ( supportedProp && supportedProp !== prop ) {                                                                   // 1270\n      cache[ prop ] = supportedProp;                                                                                   // 1271\n    }                                                                                                                  // 1272\n  }                                                                                                                    // 1273\n  return cache;                                                                                                        // 1274\n})();                                                                                                                  // 1275\n                                                                                                                       // 1276\n// -------------------------- Item -------------------------- //                                                       // 1277\n                                                                                                                       // 1278\nfunction Item( element, layout ) {                                                                                     // 1279\n  if ( !element ) {                                                                                                    // 1280\n    return;                                                                                                            // 1281\n  }                                                                                                                    // 1282\n                                                                                                                       // 1283\n  this.element = element;                                                                                              // 1284\n  // parent layout class, i.e. Masonry, Isotope, or Packery                                                            // 1285\n  this.layout = layout;                                                                                                // 1286\n  this.position = {                                                                                                    // 1287\n    x: 0,                                                                                                              // 1288\n    y: 0                                                                                                               // 1289\n  };                                                                                                                   // 1290\n                                                                                                                       // 1291\n  this._create();                                                                                                      // 1292\n}                                                                                                                      // 1293\n                                                                                                                       // 1294\n// inherit EventEmitter                                                                                                // 1295\nextend( Item.prototype, EventEmitter.prototype );                                                                      // 1296\n                                                                                                                       // 1297\nItem.prototype._create = function() {                                                                                  // 1298\n  // transition objects                                                                                                // 1299\n  this._transn = {                                                                                                     // 1300\n    ingProperties: {},                                                                                                 // 1301\n    clean: {},                                                                                                         // 1302\n    onEnd: {}                                                                                                          // 1303\n  };                                                                                                                   // 1304\n                                                                                                                       // 1305\n  this.css({                                                                                                           // 1306\n    position: 'absolute'                                                                                               // 1307\n  });                                                                                                                  // 1308\n};                                                                                                                     // 1309\n                                                                                                                       // 1310\n// trigger specified handler for event type                                                                            // 1311\nItem.prototype.handleEvent = function( event ) {                                                                       // 1312\n  var method = 'on' + event.type;                                                                                      // 1313\n  if ( this[ method ] ) {                                                                                              // 1314\n    this[ method ]( event );                                                                                           // 1315\n  }                                                                                                                    // 1316\n};                                                                                                                     // 1317\n                                                                                                                       // 1318\nItem.prototype.getSize = function() {                                                                                  // 1319\n  this.size = getSize( this.element );                                                                                 // 1320\n};                                                                                                                     // 1321\n                                                                                                                       // 1322\n/**                                                                                                                    // 1323\n * apply CSS styles to element                                                                                         // 1324\n * @param {Object} style                                                                                               // 1325\n */                                                                                                                    // 1326\nItem.prototype.css = function( style ) {                                                                               // 1327\n  var elemStyle = this.element.style;                                                                                  // 1328\n                                                                                                                       // 1329\n  for ( var prop in style ) {                                                                                          // 1330\n    // use vendor property if available                                                                                // 1331\n    var supportedProp = vendorProperties[ prop ] || prop;                                                              // 1332\n    elemStyle[ supportedProp ] = style[ prop ];                                                                        // 1333\n  }                                                                                                                    // 1334\n};                                                                                                                     // 1335\n                                                                                                                       // 1336\n // measure position, and sets it                                                                                      // 1337\nItem.prototype.getPosition = function() {                                                                              // 1338\n  var style = getStyle( this.element );                                                                                // 1339\n  var layoutOptions = this.layout.options;                                                                             // 1340\n  var isOriginLeft = layoutOptions.isOriginLeft;                                                                       // 1341\n  var isOriginTop = layoutOptions.isOriginTop;                                                                         // 1342\n  var x = parseInt( style[ isOriginLeft ? 'left' : 'right' ], 10 );                                                    // 1343\n  var y = parseInt( style[ isOriginTop ? 'top' : 'bottom' ], 10 );                                                     // 1344\n                                                                                                                       // 1345\n  // clean up 'auto' or other non-integer values                                                                       // 1346\n  x = isNaN( x ) ? 0 : x;                                                                                              // 1347\n  y = isNaN( y ) ? 0 : y;                                                                                              // 1348\n  // remove padding from measurement                                                                                   // 1349\n  var layoutSize = this.layout.size;                                                                                   // 1350\n  x -= isOriginLeft ? layoutSize.paddingLeft : layoutSize.paddingRight;                                                // 1351\n  y -= isOriginTop ? layoutSize.paddingTop : layoutSize.paddingBottom;                                                 // 1352\n                                                                                                                       // 1353\n  this.position.x = x;                                                                                                 // 1354\n  this.position.y = y;                                                                                                 // 1355\n};                                                                                                                     // 1356\n                                                                                                                       // 1357\n// set settled position, apply padding                                                                                 // 1358\nItem.prototype.layoutPosition = function() {                                                                           // 1359\n  var layoutSize = this.layout.size;                                                                                   // 1360\n  var layoutOptions = this.layout.options;                                                                             // 1361\n  var style = {};                                                                                                      // 1362\n                                                                                                                       // 1363\n  if ( layoutOptions.isOriginLeft ) {                                                                                  // 1364\n    style.left = ( this.position.x + layoutSize.paddingLeft ) + 'px';                                                  // 1365\n    // reset other property                                                                                            // 1366\n    style.right = '';                                                                                                  // 1367\n  } else {                                                                                                             // 1368\n    style.right = ( this.position.x + layoutSize.paddingRight ) + 'px';                                                // 1369\n    style.left = '';                                                                                                   // 1370\n  }                                                                                                                    // 1371\n                                                                                                                       // 1372\n  if ( layoutOptions.isOriginTop ) {                                                                                   // 1373\n    style.top = ( this.position.y + layoutSize.paddingTop ) + 'px';                                                    // 1374\n    style.bottom = '';                                                                                                 // 1375\n  } else {                                                                                                             // 1376\n    style.bottom = ( this.position.y + layoutSize.paddingBottom ) + 'px';                                              // 1377\n    style.top = '';                                                                                                    // 1378\n  }                                                                                                                    // 1379\n                                                                                                                       // 1380\n  this.css( style );                                                                                                   // 1381\n  this.emitEvent( 'layout', [ this ] );                                                                                // 1382\n};                                                                                                                     // 1383\n                                                                                                                       // 1384\n                                                                                                                       // 1385\n// transform translate function                                                                                        // 1386\nvar translate = is3d ?                                                                                                 // 1387\n  function( x, y ) {                                                                                                   // 1388\n    return 'translate3d(' + x + 'px, ' + y + 'px, 0)';                                                                 // 1389\n  } :                                                                                                                  // 1390\n  function( x, y ) {                                                                                                   // 1391\n    return 'translate(' + x + 'px, ' + y + 'px)';                                                                      // 1392\n  };                                                                                                                   // 1393\n                                                                                                                       // 1394\n                                                                                                                       // 1395\nItem.prototype._transitionTo = function( x, y ) {                                                                      // 1396\n  this.getPosition();                                                                                                  // 1397\n  // get current x & y from top/left                                                                                   // 1398\n  var curX = this.position.x;                                                                                          // 1399\n  var curY = this.position.y;                                                                                          // 1400\n                                                                                                                       // 1401\n  var compareX = parseInt( x, 10 );                                                                                    // 1402\n  var compareY = parseInt( y, 10 );                                                                                    // 1403\n  var didNotMove = compareX === this.position.x && compareY === this.position.y;                                       // 1404\n                                                                                                                       // 1405\n  // save end position                                                                                                 // 1406\n  this.setPosition( x, y );                                                                                            // 1407\n                                                                                                                       // 1408\n  // if did not move and not transitioning, just go to layout                                                          // 1409\n  if ( didNotMove && !this.isTransitioning ) {                                                                         // 1410\n    this.layoutPosition();                                                                                             // 1411\n    return;                                                                                                            // 1412\n  }                                                                                                                    // 1413\n                                                                                                                       // 1414\n  var transX = x - curX;                                                                                               // 1415\n  var transY = y - curY;                                                                                               // 1416\n  var transitionStyle = {};                                                                                            // 1417\n  // flip cooridinates if origin on right or bottom                                                                    // 1418\n  var layoutOptions = this.layout.options;                                                                             // 1419\n  transX = layoutOptions.isOriginLeft ? transX : -transX;                                                              // 1420\n  transY = layoutOptions.isOriginTop ? transY : -transY;                                                               // 1421\n  transitionStyle.transform = translate( transX, transY );                                                             // 1422\n                                                                                                                       // 1423\n  this.transition({                                                                                                    // 1424\n    to: transitionStyle,                                                                                               // 1425\n    onTransitionEnd: {                                                                                                 // 1426\n      transform: this.layoutPosition                                                                                   // 1427\n    },                                                                                                                 // 1428\n    isCleaning: true                                                                                                   // 1429\n  });                                                                                                                  // 1430\n};                                                                                                                     // 1431\n                                                                                                                       // 1432\n// non transition + transform support                                                                                  // 1433\nItem.prototype.goTo = function( x, y ) {                                                                               // 1434\n  this.setPosition( x, y );                                                                                            // 1435\n  this.layoutPosition();                                                                                               // 1436\n};                                                                                                                     // 1437\n                                                                                                                       // 1438\n// use transition and transforms if supported                                                                          // 1439\nItem.prototype.moveTo = supportsCSS3 ?                                                                                 // 1440\n  Item.prototype._transitionTo : Item.prototype.goTo;                                                                  // 1441\n                                                                                                                       // 1442\nItem.prototype.setPosition = function( x, y ) {                                                                        // 1443\n  this.position.x = parseInt( x, 10 );                                                                                 // 1444\n  this.position.y = parseInt( y, 10 );                                                                                 // 1445\n};                                                                                                                     // 1446\n                                                                                                                       // 1447\n// ----- transition ----- //                                                                                           // 1448\n                                                                                                                       // 1449\n/**                                                                                                                    // 1450\n * @param {Object} style - CSS                                                                                         // 1451\n * @param {Function} onTransitionEnd                                                                                   // 1452\n */                                                                                                                    // 1453\n                                                                                                                       // 1454\n// non transition, just trigger callback                                                                               // 1455\nItem.prototype._nonTransition = function( args ) {                                                                     // 1456\n  this.css( args.to );                                                                                                 // 1457\n  if ( args.isCleaning ) {                                                                                             // 1458\n    this._removeStyles( args.to );                                                                                     // 1459\n  }                                                                                                                    // 1460\n  for ( var prop in args.onTransitionEnd ) {                                                                           // 1461\n    args.onTransitionEnd[ prop ].call( this );                                                                         // 1462\n  }                                                                                                                    // 1463\n};                                                                                                                     // 1464\n                                                                                                                       // 1465\n/**                                                                                                                    // 1466\n * proper transition                                                                                                   // 1467\n * @param {Object} args - arguments                                                                                    // 1468\n *   @param {Object} to - style to transition to                                                                       // 1469\n *   @param {Object} from - style to start transition from                                                             // 1470\n *   @param {Boolean} isCleaning - removes transition styles after transition                                          // 1471\n *   @param {Function} onTransitionEnd - callback                                                                      // 1472\n */                                                                                                                    // 1473\nItem.prototype._transition = function( args ) {                                                                        // 1474\n  // redirect to nonTransition if no transition duration                                                               // 1475\n  if ( !parseFloat( this.layout.options.transitionDuration ) ) {                                                       // 1476\n    this._nonTransition( args );                                                                                       // 1477\n    return;                                                                                                            // 1478\n  }                                                                                                                    // 1479\n                                                                                                                       // 1480\n  var _transition = this._transn;                                                                                      // 1481\n  // keep track of onTransitionEnd callback by css property                                                            // 1482\n  for ( var prop in args.onTransitionEnd ) {                                                                           // 1483\n    _transition.onEnd[ prop ] = args.onTransitionEnd[ prop ];                                                          // 1484\n  }                                                                                                                    // 1485\n  // keep track of properties that are transitioning                                                                   // 1486\n  for ( prop in args.to ) {                                                                                            // 1487\n    _transition.ingProperties[ prop ] = true;                                                                          // 1488\n    // keep track of properties to clean up when transition is done                                                    // 1489\n    if ( args.isCleaning ) {                                                                                           // 1490\n      _transition.clean[ prop ] = true;                                                                                // 1491\n    }                                                                                                                  // 1492\n  }                                                                                                                    // 1493\n                                                                                                                       // 1494\n  // set from styles                                                                                                   // 1495\n  if ( args.from ) {                                                                                                   // 1496\n    this.css( args.from );                                                                                             // 1497\n    // force redraw. http://blog.alexmaccaw.com/css-transitions                                                        // 1498\n    var h = this.element.offsetHeight;                                                                                 // 1499\n    // hack for JSHint to hush about unused var                                                                        // 1500\n    h = null;                                                                                                          // 1501\n  }                                                                                                                    // 1502\n  // enable transition                                                                                                 // 1503\n  this.enableTransition( args.to );                                                                                    // 1504\n  // set styles that are transitioning                                                                                 // 1505\n  this.css( args.to );                                                                                                 // 1506\n                                                                                                                       // 1507\n  this.isTransitioning = true;                                                                                         // 1508\n                                                                                                                       // 1509\n};                                                                                                                     // 1510\n                                                                                                                       // 1511\nvar itemTransitionProperties = transformProperty && ( toDash( transformProperty ) +                                    // 1512\n  ',opacity' );                                                                                                        // 1513\n                                                                                                                       // 1514\nItem.prototype.enableTransition = function(/* style */) {                                                              // 1515\n  // only enable if not already transitioning                                                                          // 1516\n  // bug in IE10 were re-setting transition style will prevent                                                         // 1517\n  // transitionend event from triggering                                                                               // 1518\n  if ( this.isTransitioning ) {                                                                                        // 1519\n    return;                                                                                                            // 1520\n  }                                                                                                                    // 1521\n                                                                                                                       // 1522\n  // make transition: foo, bar, baz from style object                                                                  // 1523\n  // TODO uncomment this bit when IE10 bug is resolved                                                                 // 1524\n  // var transitionValue = [];                                                                                         // 1525\n  // for ( var prop in style ) {                                                                                       // 1526\n  //   // dash-ify camelCased properties like WebkitTransition                                                         // 1527\n  //   transitionValue.push( toDash( prop ) );                                                                         // 1528\n  // }                                                                                                                 // 1529\n  // enable transition styles                                                                                          // 1530\n  // HACK always enable transform,opacity for IE10                                                                     // 1531\n  this.css({                                                                                                           // 1532\n    transitionProperty: itemTransitionProperties,                                                                      // 1533\n    transitionDuration: this.layout.options.transitionDuration                                                         // 1534\n  });                                                                                                                  // 1535\n  // listen for transition end event                                                                                   // 1536\n  this.element.addEventListener( transitionEndEvent, this, false );                                                    // 1537\n};                                                                                                                     // 1538\n                                                                                                                       // 1539\nItem.prototype.transition = Item.prototype[ transitionProperty ? '_transition' : '_nonTransition' ];                   // 1540\n                                                                                                                       // 1541\n// ----- events ----- //                                                                                               // 1542\n                                                                                                                       // 1543\nItem.prototype.onwebkitTransitionEnd = function( event ) {                                                             // 1544\n  this.ontransitionend( event );                                                                                       // 1545\n};                                                                                                                     // 1546\n                                                                                                                       // 1547\nItem.prototype.onotransitionend = function( event ) {                                                                  // 1548\n  this.ontransitionend( event );                                                                                       // 1549\n};                                                                                                                     // 1550\n                                                                                                                       // 1551\n// properties that I munge to make my life easier                                                                      // 1552\nvar dashedVendorProperties = {                                                                                         // 1553\n  '-webkit-transform': 'transform',                                                                                    // 1554\n  '-moz-transform': 'transform',                                                                                       // 1555\n  '-o-transform': 'transform'                                                                                          // 1556\n};                                                                                                                     // 1557\n                                                                                                                       // 1558\nItem.prototype.ontransitionend = function( event ) {                                                                   // 1559\n  // disregard bubbled events from children                                                                            // 1560\n  if ( event.target !== this.element ) {                                                                               // 1561\n    return;                                                                                                            // 1562\n  }                                                                                                                    // 1563\n  var _transition = this._transn;                                                                                      // 1564\n  // get property name of transitioned property, convert to prefix-free                                                // 1565\n  var propertyName = dashedVendorProperties[ event.propertyName ] || event.propertyName;                               // 1566\n                                                                                                                       // 1567\n  // remove property that has completed transitioning                                                                  // 1568\n  delete _transition.ingProperties[ propertyName ];                                                                    // 1569\n  // check if any properties are still transitioning                                                                   // 1570\n  if ( isEmptyObj( _transition.ingProperties ) ) {                                                                     // 1571\n    // all properties have completed transitioning                                                                     // 1572\n    this.disableTransition();                                                                                          // 1573\n  }                                                                                                                    // 1574\n  // clean style                                                                                                       // 1575\n  if ( propertyName in _transition.clean ) {                                                                           // 1576\n    // clean up style                                                                                                  // 1577\n    this.element.style[ event.propertyName ] = '';                                                                     // 1578\n    delete _transition.clean[ propertyName ];                                                                          // 1579\n  }                                                                                                                    // 1580\n  // trigger onTransitionEnd callback                                                                                  // 1581\n  if ( propertyName in _transition.onEnd ) {                                                                           // 1582\n    var onTransitionEnd = _transition.onEnd[ propertyName ];                                                           // 1583\n    onTransitionEnd.call( this );                                                                                      // 1584\n    delete _transition.onEnd[ propertyName ];                                                                          // 1585\n  }                                                                                                                    // 1586\n                                                                                                                       // 1587\n  this.emitEvent( 'transitionEnd', [ this ] );                                                                         // 1588\n};                                                                                                                     // 1589\n                                                                                                                       // 1590\nItem.prototype.disableTransition = function() {                                                                        // 1591\n  this.removeTransitionStyles();                                                                                       // 1592\n  this.element.removeEventListener( transitionEndEvent, this, false );                                                 // 1593\n  this.isTransitioning = false;                                                                                        // 1594\n};                                                                                                                     // 1595\n                                                                                                                       // 1596\n/**                                                                                                                    // 1597\n * removes style property from element                                                                                 // 1598\n * @param {Object} style                                                                                               // 1599\n**/                                                                                                                    // 1600\nItem.prototype._removeStyles = function( style ) {                                                                     // 1601\n  // clean up transition styles                                                                                        // 1602\n  var cleanStyle = {};                                                                                                 // 1603\n  for ( var prop in style ) {                                                                                          // 1604\n    cleanStyle[ prop ] = '';                                                                                           // 1605\n  }                                                                                                                    // 1606\n  this.css( cleanStyle );                                                                                              // 1607\n};                                                                                                                     // 1608\n                                                                                                                       // 1609\nvar cleanTransitionStyle = {                                                                                           // 1610\n  transitionProperty: '',                                                                                              // 1611\n  transitionDuration: ''                                                                                               // 1612\n};                                                                                                                     // 1613\n                                                                                                                       // 1614\nItem.prototype.removeTransitionStyles = function() {                                                                   // 1615\n  // remove transition                                                                                                 // 1616\n  this.css( cleanTransitionStyle );                                                                                    // 1617\n};                                                                                                                     // 1618\n                                                                                                                       // 1619\n// ----- show/hide/remove ----- //                                                                                     // 1620\n                                                                                                                       // 1621\n// remove element from DOM                                                                                             // 1622\nItem.prototype.removeElem = function() {                                                                               // 1623\n  this.element.parentNode.removeChild( this.element );                                                                 // 1624\n  this.emitEvent( 'remove', [ this ] );                                                                                // 1625\n};                                                                                                                     // 1626\n                                                                                                                       // 1627\nItem.prototype.remove = function() {                                                                                   // 1628\n  // just remove element if no transition support or no transition                                                     // 1629\n  if ( !transitionProperty || !parseFloat( this.layout.options.transitionDuration ) ) {                                // 1630\n    this.removeElem();                                                                                                 // 1631\n    return;                                                                                                            // 1632\n  }                                                                                                                    // 1633\n                                                                                                                       // 1634\n  // start transition                                                                                                  // 1635\n  var _this = this;                                                                                                    // 1636\n  this.on( 'transitionEnd', function() {                                                                               // 1637\n    _this.removeElem();                                                                                                // 1638\n    return true; // bind once                                                                                          // 1639\n  });                                                                                                                  // 1640\n  this.hide();                                                                                                         // 1641\n};                                                                                                                     // 1642\n                                                                                                                       // 1643\nItem.prototype.reveal = function() {                                                                                   // 1644\n  delete this.isHidden;                                                                                                // 1645\n  // remove display: none                                                                                              // 1646\n  this.css({ display: '' });                                                                                           // 1647\n                                                                                                                       // 1648\n  var options = this.layout.options;                                                                                   // 1649\n  this.transition({                                                                                                    // 1650\n    from: options.hiddenStyle,                                                                                         // 1651\n    to: options.visibleStyle,                                                                                          // 1652\n    isCleaning: true                                                                                                   // 1653\n  });                                                                                                                  // 1654\n};                                                                                                                     // 1655\n                                                                                                                       // 1656\nItem.prototype.hide = function() {                                                                                     // 1657\n  // set flag                                                                                                          // 1658\n  this.isHidden = true;                                                                                                // 1659\n  // remove display: none                                                                                              // 1660\n  this.css({ display: '' });                                                                                           // 1661\n                                                                                                                       // 1662\n  var options = this.layout.options;                                                                                   // 1663\n  this.transition({                                                                                                    // 1664\n    from: options.visibleStyle,                                                                                        // 1665\n    to: options.hiddenStyle,                                                                                           // 1666\n    // keep hidden stuff hidden                                                                                        // 1667\n    isCleaning: true,                                                                                                  // 1668\n    onTransitionEnd: {                                                                                                 // 1669\n      opacity: function() {                                                                                            // 1670\n        // check if still hidden                                                                                       // 1671\n        // during transition, item may have been un-hidden                                                             // 1672\n        if ( this.isHidden ) {                                                                                         // 1673\n          this.css({ display: 'none' });                                                                               // 1674\n        }                                                                                                              // 1675\n      }                                                                                                                // 1676\n    }                                                                                                                  // 1677\n  });                                                                                                                  // 1678\n};                                                                                                                     // 1679\n                                                                                                                       // 1680\nItem.prototype.destroy = function() {                                                                                  // 1681\n  this.css({                                                                                                           // 1682\n    position: '',                                                                                                      // 1683\n    left: '',                                                                                                          // 1684\n    right: '',                                                                                                         // 1685\n    top: '',                                                                                                           // 1686\n    bottom: '',                                                                                                        // 1687\n    transition: '',                                                                                                    // 1688\n    transform: ''                                                                                                      // 1689\n  });                                                                                                                  // 1690\n};                                                                                                                     // 1691\n                                                                                                                       // 1692\nreturn Item;                                                                                                           // 1693\n                                                                                                                       // 1694\n}                                                                                                                      // 1695\n                                                                                                                       // 1696\n// -------------------------- transport -------------------------- //                                                  // 1697\n                                                                                                                       // 1698\nif ( typeof define === 'function' && define.amd ) {                                                                    // 1699\n  // AMD                                                                                                               // 1700\n  define( 'outlayer/item',[                                                                                            // 1701\n      'eventEmitter/EventEmitter',                                                                                     // 1702\n      'get-size/get-size',                                                                                             // 1703\n      'get-style-property/get-style-property'                                                                          // 1704\n    ],                                                                                                                 // 1705\n    outlayerItemDefinition );                                                                                          // 1706\n} else if (typeof exports === 'object') {                                                                              // 1707\n  // CommonJS                                                                                                          // 1708\n  module.exports = outlayerItemDefinition(                                                                             // 1709\n    require('wolfy87-eventemitter'),                                                                                   // 1710\n    require('get-size'),                                                                                               // 1711\n    require('desandro-get-style-property')                                                                             // 1712\n  );                                                                                                                   // 1713\n} else {                                                                                                               // 1714\n  // browser global                                                                                                    // 1715\n  window.Outlayer = {};                                                                                                // 1716\n  window.Outlayer.Item = outlayerItemDefinition(                                                                       // 1717\n    window.EventEmitter,                                                                                               // 1718\n    window.getSize,                                                                                                    // 1719\n    window.getStyleProperty                                                                                            // 1720\n  );                                                                                                                   // 1721\n}                                                                                                                      // 1722\n                                                                                                                       // 1723\n})( window );                                                                                                          // 1724\n                                                                                                                       // 1725\n/*!                                                                                                                    // 1726\n * Outlayer v1.3.0                                                                                                     // 1727\n * the brains and guts of a layout library                                                                             // 1728\n * MIT license                                                                                                         // 1729\n */                                                                                                                    // 1730\n                                                                                                                       // 1731\n( function( window ) {                                                                                                 // 1732\n                                                                                                                       // 1733\n                                                                                                                       // 1734\n                                                                                                                       // 1735\n// ----- vars ----- //                                                                                                 // 1736\n                                                                                                                       // 1737\nvar document = window.document;                                                                                        // 1738\nvar console = window.console;                                                                                          // 1739\nvar jQuery = window.jQuery;                                                                                            // 1740\nvar noop = function() {};                                                                                              // 1741\n                                                                                                                       // 1742\n// -------------------------- helpers -------------------------- //                                                    // 1743\n                                                                                                                       // 1744\n// extend objects                                                                                                      // 1745\nfunction extend( a, b ) {                                                                                              // 1746\n  for ( var prop in b ) {                                                                                              // 1747\n    a[ prop ] = b[ prop ];                                                                                             // 1748\n  }                                                                                                                    // 1749\n  return a;                                                                                                            // 1750\n}                                                                                                                      // 1751\n                                                                                                                       // 1752\n                                                                                                                       // 1753\nvar objToString = Object.prototype.toString;                                                                           // 1754\nfunction isArray( obj ) {                                                                                              // 1755\n  return objToString.call( obj ) === '[object Array]';                                                                 // 1756\n}                                                                                                                      // 1757\n                                                                                                                       // 1758\n// turn element or nodeList into an array                                                                              // 1759\nfunction makeArray( obj ) {                                                                                            // 1760\n  var ary = [];                                                                                                        // 1761\n  if ( isArray( obj ) ) {                                                                                              // 1762\n    // use object if already an array                                                                                  // 1763\n    ary = obj;                                                                                                         // 1764\n  } else if ( obj && typeof obj.length === 'number' ) {                                                                // 1765\n    // convert nodeList to array                                                                                       // 1766\n    for ( var i=0, len = obj.length; i < len; i++ ) {                                                                  // 1767\n      ary.push( obj[i] );                                                                                              // 1768\n    }                                                                                                                  // 1769\n  } else {                                                                                                             // 1770\n    // array of single index                                                                                           // 1771\n    ary.push( obj );                                                                                                   // 1772\n  }                                                                                                                    // 1773\n  return ary;                                                                                                          // 1774\n}                                                                                                                      // 1775\n                                                                                                                       // 1776\n// http://stackoverflow.com/a/384380/182183                                                                            // 1777\nvar isElement = ( typeof HTMLElement === 'function' || typeof HTMLElement === 'object' ) ?                             // 1778\n  function isElementDOM2( obj ) {                                                                                      // 1779\n    return obj instanceof HTMLElement;                                                                                 // 1780\n  } :                                                                                                                  // 1781\n  function isElementQuirky( obj ) {                                                                                    // 1782\n    return obj && typeof obj === 'object' &&                                                                           // 1783\n      obj.nodeType === 1 && typeof obj.nodeName === 'string';                                                          // 1784\n  };                                                                                                                   // 1785\n                                                                                                                       // 1786\n// index of helper cause IE8                                                                                           // 1787\nvar indexOf = Array.prototype.indexOf ? function( ary, obj ) {                                                         // 1788\n    return ary.indexOf( obj );                                                                                         // 1789\n  } : function( ary, obj ) {                                                                                           // 1790\n    for ( var i=0, len = ary.length; i < len; i++ ) {                                                                  // 1791\n      if ( ary[i] === obj ) {                                                                                          // 1792\n        return i;                                                                                                      // 1793\n      }                                                                                                                // 1794\n    }                                                                                                                  // 1795\n    return -1;                                                                                                         // 1796\n  };                                                                                                                   // 1797\n                                                                                                                       // 1798\nfunction removeFrom( obj, ary ) {                                                                                      // 1799\n  var index = indexOf( ary, obj );                                                                                     // 1800\n  if ( index !== -1 ) {                                                                                                // 1801\n    ary.splice( index, 1 );                                                                                            // 1802\n  }                                                                                                                    // 1803\n}                                                                                                                      // 1804\n                                                                                                                       // 1805\n// http://jamesroberts.name/blog/2010/02/22/string-functions-for-javascript-trim-to-camel-case-to-dashed-and-to-underscore/\nfunction toDashed( str ) {                                                                                             // 1807\n  return str.replace( /(.)([A-Z])/g, function( match, $1, $2 ) {                                                       // 1808\n    return $1 + '-' + $2;                                                                                              // 1809\n  }).toLowerCase();                                                                                                    // 1810\n}                                                                                                                      // 1811\n                                                                                                                       // 1812\n                                                                                                                       // 1813\nfunction outlayerDefinition( eventie, docReady, EventEmitter, getSize, matchesSelector, Item ) {                       // 1814\n                                                                                                                       // 1815\n// -------------------------- Outlayer -------------------------- //                                                   // 1816\n                                                                                                                       // 1817\n// globally unique identifiers                                                                                         // 1818\nvar GUID = 0;                                                                                                          // 1819\n// internal store of all Outlayer intances                                                                             // 1820\nvar instances = {};                                                                                                    // 1821\n                                                                                                                       // 1822\n                                                                                                                       // 1823\n/**                                                                                                                    // 1824\n * @param {Element, String} element                                                                                    // 1825\n * @param {Object} options                                                                                             // 1826\n * @constructor                                                                                                        // 1827\n */                                                                                                                    // 1828\nfunction Outlayer( element, options ) {                                                                                // 1829\n  // use element as selector string                                                                                    // 1830\n  if ( typeof element === 'string' ) {                                                                                 // 1831\n    element = document.querySelector( element );                                                                       // 1832\n  }                                                                                                                    // 1833\n                                                                                                                       // 1834\n  // bail out if not proper element                                                                                    // 1835\n  if ( !element || !isElement( element ) ) {                                                                           // 1836\n    if ( console ) {                                                                                                   // 1837\n      console.error( 'Bad ' + this.constructor.namespace + ' element: ' + element );                                   // 1838\n    }                                                                                                                  // 1839\n    return;                                                                                                            // 1840\n  }                                                                                                                    // 1841\n                                                                                                                       // 1842\n  this.element = element;                                                                                              // 1843\n                                                                                                                       // 1844\n  // options                                                                                                           // 1845\n  this.options = extend( {}, this.constructor.defaults );                                                              // 1846\n  this.option( options );                                                                                              // 1847\n                                                                                                                       // 1848\n  // add id for Outlayer.getFromElement                                                                                // 1849\n  var id = ++GUID;                                                                                                     // 1850\n  this.element.outlayerGUID = id; // expando                                                                           // 1851\n  instances[ id ] = this; // associate via id                                                                          // 1852\n                                                                                                                       // 1853\n  // kick it off                                                                                                       // 1854\n  this._create();                                                                                                      // 1855\n                                                                                                                       // 1856\n  if ( this.options.isInitLayout ) {                                                                                   // 1857\n    this.layout();                                                                                                     // 1858\n  }                                                                                                                    // 1859\n}                                                                                                                      // 1860\n                                                                                                                       // 1861\n// settings are for internal use only                                                                                  // 1862\nOutlayer.namespace = 'outlayer';                                                                                       // 1863\nOutlayer.Item = Item;                                                                                                  // 1864\n                                                                                                                       // 1865\n// default options                                                                                                     // 1866\nOutlayer.defaults = {                                                                                                  // 1867\n  containerStyle: {                                                                                                    // 1868\n    position: 'relative'                                                                                               // 1869\n  },                                                                                                                   // 1870\n  isInitLayout: true,                                                                                                  // 1871\n  isOriginLeft: true,                                                                                                  // 1872\n  isOriginTop: true,                                                                                                   // 1873\n  isResizeBound: true,                                                                                                 // 1874\n  isResizingContainer: true,                                                                                           // 1875\n  // item options                                                                                                      // 1876\n  transitionDuration: '0.4s',                                                                                          // 1877\n  hiddenStyle: {                                                                                                       // 1878\n    opacity: 0,                                                                                                        // 1879\n    transform: 'scale(0.001)'                                                                                          // 1880\n  },                                                                                                                   // 1881\n  visibleStyle: {                                                                                                      // 1882\n    opacity: 1,                                                                                                        // 1883\n    transform: 'scale(1)'                                                                                              // 1884\n  }                                                                                                                    // 1885\n};                                                                                                                     // 1886\n                                                                                                                       // 1887\n// inherit EventEmitter                                                                                                // 1888\nextend( Outlayer.prototype, EventEmitter.prototype );                                                                  // 1889\n                                                                                                                       // 1890\n/**                                                                                                                    // 1891\n * set options                                                                                                         // 1892\n * @param {Object} opts                                                                                                // 1893\n */                                                                                                                    // 1894\nOutlayer.prototype.option = function( opts ) {                                                                         // 1895\n  extend( this.options, opts );                                                                                        // 1896\n};                                                                                                                     // 1897\n                                                                                                                       // 1898\nOutlayer.prototype._create = function() {                                                                              // 1899\n  // get items from children                                                                                           // 1900\n  this.reloadItems();                                                                                                  // 1901\n  // elements that affect layout, but are not laid out                                                                 // 1902\n  this.stamps = [];                                                                                                    // 1903\n  this.stamp( this.options.stamp );                                                                                    // 1904\n  // set container style                                                                                               // 1905\n  extend( this.element.style, this.options.containerStyle );                                                           // 1906\n                                                                                                                       // 1907\n  // bind resize method                                                                                                // 1908\n  if ( this.options.isResizeBound ) {                                                                                  // 1909\n    this.bindResize();                                                                                                 // 1910\n  }                                                                                                                    // 1911\n};                                                                                                                     // 1912\n                                                                                                                       // 1913\n// goes through all children again and gets bricks in proper order                                                     // 1914\nOutlayer.prototype.reloadItems = function() {                                                                          // 1915\n  // collection of item elements                                                                                       // 1916\n  this.items = this._itemize( this.element.children );                                                                 // 1917\n};                                                                                                                     // 1918\n                                                                                                                       // 1919\n                                                                                                                       // 1920\n/**                                                                                                                    // 1921\n * turn elements into Outlayer.Items to be used in layout                                                              // 1922\n * @param {Array or NodeList or HTMLElement} elems                                                                     // 1923\n * @returns {Array} items - collection of new Outlayer Items                                                           // 1924\n */                                                                                                                    // 1925\nOutlayer.prototype._itemize = function( elems ) {                                                                      // 1926\n                                                                                                                       // 1927\n  var itemElems = this._filterFindItemElements( elems );                                                               // 1928\n  var Item = this.constructor.Item;                                                                                    // 1929\n                                                                                                                       // 1930\n  // create new Outlayer Items for collection                                                                          // 1931\n  var items = [];                                                                                                      // 1932\n  for ( var i=0, len = itemElems.length; i < len; i++ ) {                                                              // 1933\n    var elem = itemElems[i];                                                                                           // 1934\n    var item = new Item( elem, this );                                                                                 // 1935\n    items.push( item );                                                                                                // 1936\n  }                                                                                                                    // 1937\n                                                                                                                       // 1938\n  return items;                                                                                                        // 1939\n};                                                                                                                     // 1940\n                                                                                                                       // 1941\n/**                                                                                                                    // 1942\n * get item elements to be used in layout                                                                              // 1943\n * @param {Array or NodeList or HTMLElement} elems                                                                     // 1944\n * @returns {Array} items - item elements                                                                              // 1945\n */                                                                                                                    // 1946\nOutlayer.prototype._filterFindItemElements = function( elems ) {                                                       // 1947\n  // make array of elems                                                                                               // 1948\n  elems = makeArray( elems );                                                                                          // 1949\n  var itemSelector = this.options.itemSelector;                                                                        // 1950\n  var itemElems = [];                                                                                                  // 1951\n                                                                                                                       // 1952\n  for ( var i=0, len = elems.length; i < len; i++ ) {                                                                  // 1953\n    var elem = elems[i];                                                                                               // 1954\n    // check that elem is an actual element                                                                            // 1955\n    if ( !isElement( elem ) ) {                                                                                        // 1956\n      continue;                                                                                                        // 1957\n    }                                                                                                                  // 1958\n    // filter & find items if we have an item selector                                                                 // 1959\n    if ( itemSelector ) {                                                                                              // 1960\n      // filter siblings                                                                                               // 1961\n      if ( matchesSelector( elem, itemSelector ) ) {                                                                   // 1962\n        itemElems.push( elem );                                                                                        // 1963\n      }                                                                                                                // 1964\n      // find children                                                                                                 // 1965\n      var childElems = elem.querySelectorAll( itemSelector );                                                          // 1966\n      // concat childElems to filterFound array                                                                        // 1967\n      for ( var j=0, jLen = childElems.length; j < jLen; j++ ) {                                                       // 1968\n        itemElems.push( childElems[j] );                                                                               // 1969\n      }                                                                                                                // 1970\n    } else {                                                                                                           // 1971\n      itemElems.push( elem );                                                                                          // 1972\n    }                                                                                                                  // 1973\n  }                                                                                                                    // 1974\n                                                                                                                       // 1975\n  return itemElems;                                                                                                    // 1976\n};                                                                                                                     // 1977\n                                                                                                                       // 1978\n/**                                                                                                                    // 1979\n * getter method for getting item elements                                                                             // 1980\n * @returns {Array} elems - collection of item elements                                                                // 1981\n */                                                                                                                    // 1982\nOutlayer.prototype.getItemElements = function() {                                                                      // 1983\n  var elems = [];                                                                                                      // 1984\n  for ( var i=0, len = this.items.length; i < len; i++ ) {                                                             // 1985\n    elems.push( this.items[i].element );                                                                               // 1986\n  }                                                                                                                    // 1987\n  return elems;                                                                                                        // 1988\n};                                                                                                                     // 1989\n                                                                                                                       // 1990\n// ----- init & layout ----- //                                                                                        // 1991\n                                                                                                                       // 1992\n/**                                                                                                                    // 1993\n * lays out all items                                                                                                  // 1994\n */                                                                                                                    // 1995\nOutlayer.prototype.layout = function() {                                                                               // 1996\n  this._resetLayout();                                                                                                 // 1997\n  this._manageStamps();                                                                                                // 1998\n                                                                                                                       // 1999\n  // don't animate first layout                                                                                        // 2000\n  var isInstant = this.options.isLayoutInstant !== undefined ?                                                         // 2001\n    this.options.isLayoutInstant : !this._isLayoutInited;                                                              // 2002\n  this.layoutItems( this.items, isInstant );                                                                           // 2003\n                                                                                                                       // 2004\n  // flag for initalized                                                                                               // 2005\n  this._isLayoutInited = true;                                                                                         // 2006\n};                                                                                                                     // 2007\n                                                                                                                       // 2008\n// _init is alias for layout                                                                                           // 2009\nOutlayer.prototype._init = Outlayer.prototype.layout;                                                                  // 2010\n                                                                                                                       // 2011\n/**                                                                                                                    // 2012\n * logic before any new layout                                                                                         // 2013\n */                                                                                                                    // 2014\nOutlayer.prototype._resetLayout = function() {                                                                         // 2015\n  this.getSize();                                                                                                      // 2016\n};                                                                                                                     // 2017\n                                                                                                                       // 2018\n                                                                                                                       // 2019\nOutlayer.prototype.getSize = function() {                                                                              // 2020\n  this.size = getSize( this.element );                                                                                 // 2021\n};                                                                                                                     // 2022\n                                                                                                                       // 2023\n/**                                                                                                                    // 2024\n * get measurement from option, for columnWidth, rowHeight, gutter                                                     // 2025\n * if option is String -> get element from selector string, & get size of element                                      // 2026\n * if option is Element -> get size of element                                                                         // 2027\n * else use option as a number                                                                                         // 2028\n *                                                                                                                     // 2029\n * @param {String} measurement                                                                                         // 2030\n * @param {String} size - width or height                                                                              // 2031\n * @private                                                                                                            // 2032\n */                                                                                                                    // 2033\nOutlayer.prototype._getMeasurement = function( measurement, size ) {                                                   // 2034\n  var option = this.options[ measurement ];                                                                            // 2035\n  var elem;                                                                                                            // 2036\n  if ( !option ) {                                                                                                     // 2037\n    // default to 0                                                                                                    // 2038\n    this[ measurement ] = 0;                                                                                           // 2039\n  } else {                                                                                                             // 2040\n    // use option as an element                                                                                        // 2041\n    if ( typeof option === 'string' ) {                                                                                // 2042\n      elem = this.element.querySelector( option );                                                                     // 2043\n    } else if ( isElement( option ) ) {                                                                                // 2044\n      elem = option;                                                                                                   // 2045\n    }                                                                                                                  // 2046\n    // use size of element, if element                                                                                 // 2047\n    this[ measurement ] = elem ? getSize( elem )[ size ] : option;                                                     // 2048\n  }                                                                                                                    // 2049\n};                                                                                                                     // 2050\n                                                                                                                       // 2051\n/**                                                                                                                    // 2052\n * layout a collection of item elements                                                                                // 2053\n * @api public                                                                                                         // 2054\n */                                                                                                                    // 2055\nOutlayer.prototype.layoutItems = function( items, isInstant ) {                                                        // 2056\n  items = this._getItemsForLayout( items );                                                                            // 2057\n                                                                                                                       // 2058\n  this._layoutItems( items, isInstant );                                                                               // 2059\n                                                                                                                       // 2060\n  this._postLayout();                                                                                                  // 2061\n};                                                                                                                     // 2062\n                                                                                                                       // 2063\n/**                                                                                                                    // 2064\n * get the items to be laid out                                                                                        // 2065\n * you may want to skip over some items                                                                                // 2066\n * @param {Array} items                                                                                                // 2067\n * @returns {Array} items                                                                                              // 2068\n */                                                                                                                    // 2069\nOutlayer.prototype._getItemsForLayout = function( items ) {                                                            // 2070\n  var layoutItems = [];                                                                                                // 2071\n  for ( var i=0, len = items.length; i < len; i++ ) {                                                                  // 2072\n    var item = items[i];                                                                                               // 2073\n    if ( !item.isIgnored ) {                                                                                           // 2074\n      layoutItems.push( item );                                                                                        // 2075\n    }                                                                                                                  // 2076\n  }                                                                                                                    // 2077\n  return layoutItems;                                                                                                  // 2078\n};                                                                                                                     // 2079\n                                                                                                                       // 2080\n/**                                                                                                                    // 2081\n * layout items                                                                                                        // 2082\n * @param {Array} items                                                                                                // 2083\n * @param {Boolean} isInstant                                                                                          // 2084\n */                                                                                                                    // 2085\nOutlayer.prototype._layoutItems = function( items, isInstant ) {                                                       // 2086\n  var _this = this;                                                                                                    // 2087\n  function onItemsLayout() {                                                                                           // 2088\n    _this.emitEvent( 'layoutComplete', [ _this, items ] );                                                             // 2089\n  }                                                                                                                    // 2090\n                                                                                                                       // 2091\n  if ( !items || !items.length ) {                                                                                     // 2092\n    // no items, emit event with empty array                                                                           // 2093\n    onItemsLayout();                                                                                                   // 2094\n    return;                                                                                                            // 2095\n  }                                                                                                                    // 2096\n                                                                                                                       // 2097\n  // emit layoutComplete when done                                                                                     // 2098\n  this._itemsOn( items, 'layout', onItemsLayout );                                                                     // 2099\n                                                                                                                       // 2100\n  var queue = [];                                                                                                      // 2101\n                                                                                                                       // 2102\n  for ( var i=0, len = items.length; i < len; i++ ) {                                                                  // 2103\n    var item = items[i];                                                                                               // 2104\n    // get x/y object from method                                                                                      // 2105\n    var position = this._getItemLayoutPosition( item );                                                                // 2106\n    // enqueue                                                                                                         // 2107\n    position.item = item;                                                                                              // 2108\n    position.isInstant = isInstant || item.isLayoutInstant;                                                            // 2109\n    queue.push( position );                                                                                            // 2110\n  }                                                                                                                    // 2111\n                                                                                                                       // 2112\n  this._processLayoutQueue( queue );                                                                                   // 2113\n};                                                                                                                     // 2114\n                                                                                                                       // 2115\n/**                                                                                                                    // 2116\n * get item layout position                                                                                            // 2117\n * @param {Outlayer.Item} item                                                                                         // 2118\n * @returns {Object} x and y position                                                                                  // 2119\n */                                                                                                                    // 2120\nOutlayer.prototype._getItemLayoutPosition = function( /* item */ ) {                                                   // 2121\n  return {                                                                                                             // 2122\n    x: 0,                                                                                                              // 2123\n    y: 0                                                                                                               // 2124\n  };                                                                                                                   // 2125\n};                                                                                                                     // 2126\n                                                                                                                       // 2127\n/**                                                                                                                    // 2128\n * iterate over array and position each item                                                                           // 2129\n * Reason being - separating this logic prevents 'layout invalidation'                                                 // 2130\n * thx @paul_irish                                                                                                     // 2131\n * @param {Array} queue                                                                                                // 2132\n */                                                                                                                    // 2133\nOutlayer.prototype._processLayoutQueue = function( queue ) {                                                           // 2134\n  for ( var i=0, len = queue.length; i < len; i++ ) {                                                                  // 2135\n    var obj = queue[i];                                                                                                // 2136\n    this._positionItem( obj.item, obj.x, obj.y, obj.isInstant );                                                       // 2137\n  }                                                                                                                    // 2138\n};                                                                                                                     // 2139\n                                                                                                                       // 2140\n/**                                                                                                                    // 2141\n * Sets position of item in DOM                                                                                        // 2142\n * @param {Outlayer.Item} item                                                                                         // 2143\n * @param {Number} x - horizontal position                                                                             // 2144\n * @param {Number} y - vertical position                                                                               // 2145\n * @param {Boolean} isInstant - disables transitions                                                                   // 2146\n */                                                                                                                    // 2147\nOutlayer.prototype._positionItem = function( item, x, y, isInstant ) {                                                 // 2148\n  if ( isInstant ) {                                                                                                   // 2149\n    // if not transition, just set CSS                                                                                 // 2150\n    item.goTo( x, y );                                                                                                 // 2151\n  } else {                                                                                                             // 2152\n    item.moveTo( x, y );                                                                                               // 2153\n  }                                                                                                                    // 2154\n};                                                                                                                     // 2155\n                                                                                                                       // 2156\n/**                                                                                                                    // 2157\n * Any logic you want to do after each layout,                                                                         // 2158\n * i.e. size the container                                                                                             // 2159\n */                                                                                                                    // 2160\nOutlayer.prototype._postLayout = function() {                                                                          // 2161\n  this.resizeContainer();                                                                                              // 2162\n};                                                                                                                     // 2163\n                                                                                                                       // 2164\nOutlayer.prototype.resizeContainer = function() {                                                                      // 2165\n  if ( !this.options.isResizingContainer ) {                                                                           // 2166\n    return;                                                                                                            // 2167\n  }                                                                                                                    // 2168\n  var size = this._getContainerSize();                                                                                 // 2169\n  if ( size ) {                                                                                                        // 2170\n    this._setContainerMeasure( size.width, true );                                                                     // 2171\n    this._setContainerMeasure( size.height, false );                                                                   // 2172\n  }                                                                                                                    // 2173\n};                                                                                                                     // 2174\n                                                                                                                       // 2175\n/**                                                                                                                    // 2176\n * Sets width or height of container if returned                                                                       // 2177\n * @returns {Object} size                                                                                              // 2178\n *   @param {Number} width                                                                                             // 2179\n *   @param {Number} height                                                                                            // 2180\n */                                                                                                                    // 2181\nOutlayer.prototype._getContainerSize = noop;                                                                           // 2182\n                                                                                                                       // 2183\n/**                                                                                                                    // 2184\n * @param {Number} measure - size of width or height                                                                   // 2185\n * @param {Boolean} isWidth                                                                                            // 2186\n */                                                                                                                    // 2187\nOutlayer.prototype._setContainerMeasure = function( measure, isWidth ) {                                               // 2188\n  if ( measure === undefined ) {                                                                                       // 2189\n    return;                                                                                                            // 2190\n  }                                                                                                                    // 2191\n                                                                                                                       // 2192\n  var elemSize = this.size;                                                                                            // 2193\n  // add padding and border width if border box                                                                        // 2194\n  if ( elemSize.isBorderBox ) {                                                                                        // 2195\n    measure += isWidth ? elemSize.paddingLeft + elemSize.paddingRight +                                                // 2196\n      elemSize.borderLeftWidth + elemSize.borderRightWidth :                                                           // 2197\n      elemSize.paddingBottom + elemSize.paddingTop +                                                                   // 2198\n      elemSize.borderTopWidth + elemSize.borderBottomWidth;                                                            // 2199\n  }                                                                                                                    // 2200\n                                                                                                                       // 2201\n  measure = Math.max( measure, 0 );                                                                                    // 2202\n  this.element.style[ isWidth ? 'width' : 'height' ] = measure + 'px';                                                 // 2203\n};                                                                                                                     // 2204\n                                                                                                                       // 2205\n/**                                                                                                                    // 2206\n * trigger a callback for a collection of items events                                                                 // 2207\n * @param {Array} items - Outlayer.Items                                                                               // 2208\n * @param {String} eventName                                                                                           // 2209\n * @param {Function} callback                                                                                          // 2210\n */                                                                                                                    // 2211\nOutlayer.prototype._itemsOn = function( items, eventName, callback ) {                                                 // 2212\n  var doneCount = 0;                                                                                                   // 2213\n  var count = items.length;                                                                                            // 2214\n  // event callback                                                                                                    // 2215\n  var _this = this;                                                                                                    // 2216\n  function tick() {                                                                                                    // 2217\n    doneCount++;                                                                                                       // 2218\n    if ( doneCount === count ) {                                                                                       // 2219\n      callback.call( _this );                                                                                          // 2220\n    }                                                                                                                  // 2221\n    return true; // bind once                                                                                          // 2222\n  }                                                                                                                    // 2223\n  // bind callback                                                                                                     // 2224\n  for ( var i=0, len = items.length; i < len; i++ ) {                                                                  // 2225\n    var item = items[i];                                                                                               // 2226\n    item.on( eventName, tick );                                                                                        // 2227\n  }                                                                                                                    // 2228\n};                                                                                                                     // 2229\n                                                                                                                       // 2230\n// -------------------------- ignore & stamps -------------------------- //                                            // 2231\n                                                                                                                       // 2232\n                                                                                                                       // 2233\n/**                                                                                                                    // 2234\n * keep item in collection, but do not lay it out                                                                      // 2235\n * ignored items do not get skipped in layout                                                                          // 2236\n * @param {Element} elem                                                                                               // 2237\n */                                                                                                                    // 2238\nOutlayer.prototype.ignore = function( elem ) {                                                                         // 2239\n  var item = this.getItem( elem );                                                                                     // 2240\n  if ( item ) {                                                                                                        // 2241\n    item.isIgnored = true;                                                                                             // 2242\n  }                                                                                                                    // 2243\n};                                                                                                                     // 2244\n                                                                                                                       // 2245\n/**                                                                                                                    // 2246\n * return item to layout collection                                                                                    // 2247\n * @param {Element} elem                                                                                               // 2248\n */                                                                                                                    // 2249\nOutlayer.prototype.unignore = function( elem ) {                                                                       // 2250\n  var item = this.getItem( elem );                                                                                     // 2251\n  if ( item ) {                                                                                                        // 2252\n    delete item.isIgnored;                                                                                             // 2253\n  }                                                                                                                    // 2254\n};                                                                                                                     // 2255\n                                                                                                                       // 2256\n/**                                                                                                                    // 2257\n * adds elements to stamps                                                                                             // 2258\n * @param {NodeList, Array, Element, or String} elems                                                                  // 2259\n */                                                                                                                    // 2260\nOutlayer.prototype.stamp = function( elems ) {                                                                         // 2261\n  elems = this._find( elems );                                                                                         // 2262\n  if ( !elems ) {                                                                                                      // 2263\n    return;                                                                                                            // 2264\n  }                                                                                                                    // 2265\n                                                                                                                       // 2266\n  this.stamps = this.stamps.concat( elems );                                                                           // 2267\n  // ignore                                                                                                            // 2268\n  for ( var i=0, len = elems.length; i < len; i++ ) {                                                                  // 2269\n    var elem = elems[i];                                                                                               // 2270\n    this.ignore( elem );                                                                                               // 2271\n  }                                                                                                                    // 2272\n};                                                                                                                     // 2273\n                                                                                                                       // 2274\n/**                                                                                                                    // 2275\n * removes elements to stamps                                                                                          // 2276\n * @param {NodeList, Array, or Element} elems                                                                          // 2277\n */                                                                                                                    // 2278\nOutlayer.prototype.unstamp = function( elems ) {                                                                       // 2279\n  elems = this._find( elems );                                                                                         // 2280\n  if ( !elems ){                                                                                                       // 2281\n    return;                                                                                                            // 2282\n  }                                                                                                                    // 2283\n                                                                                                                       // 2284\n  for ( var i=0, len = elems.length; i < len; i++ ) {                                                                  // 2285\n    var elem = elems[i];                                                                                               // 2286\n    // filter out removed stamp elements                                                                               // 2287\n    removeFrom( elem, this.stamps );                                                                                   // 2288\n    this.unignore( elem );                                                                                             // 2289\n  }                                                                                                                    // 2290\n                                                                                                                       // 2291\n};                                                                                                                     // 2292\n                                                                                                                       // 2293\n/**                                                                                                                    // 2294\n * finds child elements                                                                                                // 2295\n * @param {NodeList, Array, Element, or String} elems                                                                  // 2296\n * @returns {Array} elems                                                                                              // 2297\n */                                                                                                                    // 2298\nOutlayer.prototype._find = function( elems ) {                                                                         // 2299\n  if ( !elems ) {                                                                                                      // 2300\n    return;                                                                                                            // 2301\n  }                                                                                                                    // 2302\n  // if string, use argument as selector string                                                                        // 2303\n  if ( typeof elems === 'string' ) {                                                                                   // 2304\n    elems = this.element.querySelectorAll( elems );                                                                    // 2305\n  }                                                                                                                    // 2306\n  elems = makeArray( elems );                                                                                          // 2307\n  return elems;                                                                                                        // 2308\n};                                                                                                                     // 2309\n                                                                                                                       // 2310\nOutlayer.prototype._manageStamps = function() {                                                                        // 2311\n  if ( !this.stamps || !this.stamps.length ) {                                                                         // 2312\n    return;                                                                                                            // 2313\n  }                                                                                                                    // 2314\n                                                                                                                       // 2315\n  this._getBoundingRect();                                                                                             // 2316\n                                                                                                                       // 2317\n  for ( var i=0, len = this.stamps.length; i < len; i++ ) {                                                            // 2318\n    var stamp = this.stamps[i];                                                                                        // 2319\n    this._manageStamp( stamp );                                                                                        // 2320\n  }                                                                                                                    // 2321\n};                                                                                                                     // 2322\n                                                                                                                       // 2323\n// update boundingLeft / Top                                                                                           // 2324\nOutlayer.prototype._getBoundingRect = function() {                                                                     // 2325\n  // get bounding rect for container element                                                                           // 2326\n  var boundingRect = this.element.getBoundingClientRect();                                                             // 2327\n  var size = this.size;                                                                                                // 2328\n  this._boundingRect = {                                                                                               // 2329\n    left: boundingRect.left + size.paddingLeft + size.borderLeftWidth,                                                 // 2330\n    top: boundingRect.top + size.paddingTop + size.borderTopWidth,                                                     // 2331\n    right: boundingRect.right - ( size.paddingRight + size.borderRightWidth ),                                         // 2332\n    bottom: boundingRect.bottom - ( size.paddingBottom + size.borderBottomWidth )                                      // 2333\n  };                                                                                                                   // 2334\n};                                                                                                                     // 2335\n                                                                                                                       // 2336\n/**                                                                                                                    // 2337\n * @param {Element} stamp                                                                                              // 2338\n**/                                                                                                                    // 2339\nOutlayer.prototype._manageStamp = noop;                                                                                // 2340\n                                                                                                                       // 2341\n/**                                                                                                                    // 2342\n * get x/y position of element relative to container element                                                           // 2343\n * @param {Element} elem                                                                                               // 2344\n * @returns {Object} offset - has left, top, right, bottom                                                             // 2345\n */                                                                                                                    // 2346\nOutlayer.prototype._getElementOffset = function( elem ) {                                                              // 2347\n  var boundingRect = elem.getBoundingClientRect();                                                                     // 2348\n  var thisRect = this._boundingRect;                                                                                   // 2349\n  var size = getSize( elem );                                                                                          // 2350\n  var offset = {                                                                                                       // 2351\n    left: boundingRect.left - thisRect.left - size.marginLeft,                                                         // 2352\n    top: boundingRect.top - thisRect.top - size.marginTop,                                                             // 2353\n    right: thisRect.right - boundingRect.right - size.marginRight,                                                     // 2354\n    bottom: thisRect.bottom - boundingRect.bottom - size.marginBottom                                                  // 2355\n  };                                                                                                                   // 2356\n  return offset;                                                                                                       // 2357\n};                                                                                                                     // 2358\n                                                                                                                       // 2359\n// -------------------------- resize -------------------------- //                                                     // 2360\n                                                                                                                       // 2361\n// enable event handlers for listeners                                                                                 // 2362\n// i.e. resize -> onresize                                                                                             // 2363\nOutlayer.prototype.handleEvent = function( event ) {                                                                   // 2364\n  var method = 'on' + event.type;                                                                                      // 2365\n  if ( this[ method ] ) {                                                                                              // 2366\n    this[ method ]( event );                                                                                           // 2367\n  }                                                                                                                    // 2368\n};                                                                                                                     // 2369\n                                                                                                                       // 2370\n/**                                                                                                                    // 2371\n * Bind layout to window resizing                                                                                      // 2372\n */                                                                                                                    // 2373\nOutlayer.prototype.bindResize = function() {                                                                           // 2374\n  // bind just one listener                                                                                            // 2375\n  if ( this.isResizeBound ) {                                                                                          // 2376\n    return;                                                                                                            // 2377\n  }                                                                                                                    // 2378\n  eventie.bind( window, 'resize', this );                                                                              // 2379\n  this.isResizeBound = true;                                                                                           // 2380\n};                                                                                                                     // 2381\n                                                                                                                       // 2382\n/**                                                                                                                    // 2383\n * Unbind layout to window resizing                                                                                    // 2384\n */                                                                                                                    // 2385\nOutlayer.prototype.unbindResize = function() {                                                                         // 2386\n  if ( this.isResizeBound ) {                                                                                          // 2387\n    eventie.unbind( window, 'resize', this );                                                                          // 2388\n  }                                                                                                                    // 2389\n  this.isResizeBound = false;                                                                                          // 2390\n};                                                                                                                     // 2391\n                                                                                                                       // 2392\n// original debounce by John Hann                                                                                      // 2393\n// http://unscriptable.com/index.php/2009/03/20/debouncing-javascript-methods/                                         // 2394\n                                                                                                                       // 2395\n// this fires every resize                                                                                             // 2396\nOutlayer.prototype.onresize = function() {                                                                             // 2397\n  if ( this.resizeTimeout ) {                                                                                          // 2398\n    clearTimeout( this.resizeTimeout );                                                                                // 2399\n  }                                                                                                                    // 2400\n                                                                                                                       // 2401\n  var _this = this;                                                                                                    // 2402\n  function delayed() {                                                                                                 // 2403\n    _this.resize();                                                                                                    // 2404\n    delete _this.resizeTimeout;                                                                                        // 2405\n  }                                                                                                                    // 2406\n                                                                                                                       // 2407\n  this.resizeTimeout = setTimeout( delayed, 100 );                                                                     // 2408\n};                                                                                                                     // 2409\n                                                                                                                       // 2410\n// debounced, layout on resize                                                                                         // 2411\nOutlayer.prototype.resize = function() {                                                                               // 2412\n  // don't trigger if size did not change                                                                              // 2413\n  // or if resize was unbound. See #9                                                                                  // 2414\n  if ( !this.isResizeBound || !this.needsResizeLayout() ) {                                                            // 2415\n    return;                                                                                                            // 2416\n  }                                                                                                                    // 2417\n                                                                                                                       // 2418\n  this.layout();                                                                                                       // 2419\n};                                                                                                                     // 2420\n                                                                                                                       // 2421\n/**                                                                                                                    // 2422\n * check if layout is needed post layout                                                                               // 2423\n * @returns Boolean                                                                                                    // 2424\n */                                                                                                                    // 2425\nOutlayer.prototype.needsResizeLayout = function() {                                                                    // 2426\n  var size = getSize( this.element );                                                                                  // 2427\n  // check that this.size and size are there                                                                           // 2428\n  // IE8 triggers resize on body size change, so they might not be                                                     // 2429\n  var hasSizes = this.size && size;                                                                                    // 2430\n  return hasSizes && size.innerWidth !== this.size.innerWidth;                                                         // 2431\n};                                                                                                                     // 2432\n                                                                                                                       // 2433\n// -------------------------- methods -------------------------- //                                                    // 2434\n                                                                                                                       // 2435\n/**                                                                                                                    // 2436\n * add items to Outlayer instance                                                                                      // 2437\n * @param {Array or NodeList or Element} elems                                                                         // 2438\n * @returns {Array} items - Outlayer.Items                                                                             // 2439\n**/                                                                                                                    // 2440\nOutlayer.prototype.addItems = function( elems ) {                                                                      // 2441\n  var items = this._itemize( elems );                                                                                  // 2442\n  // add items to collection                                                                                           // 2443\n  if ( items.length ) {                                                                                                // 2444\n    this.items = this.items.concat( items );                                                                           // 2445\n  }                                                                                                                    // 2446\n  return items;                                                                                                        // 2447\n};                                                                                                                     // 2448\n                                                                                                                       // 2449\n/**                                                                                                                    // 2450\n * Layout newly-appended item elements                                                                                 // 2451\n * @param {Array or NodeList or Element} elems                                                                         // 2452\n */                                                                                                                    // 2453\nOutlayer.prototype.appended = function( elems ) {                                                                      // 2454\n  var items = this.addItems( elems );                                                                                  // 2455\n  if ( !items.length ) {                                                                                               // 2456\n    return;                                                                                                            // 2457\n  }                                                                                                                    // 2458\n  // layout and reveal just the new items                                                                              // 2459\n  this.layoutItems( items, true );                                                                                     // 2460\n  this.reveal( items );                                                                                                // 2461\n};                                                                                                                     // 2462\n                                                                                                                       // 2463\n/**                                                                                                                    // 2464\n * Layout prepended elements                                                                                           // 2465\n * @param {Array or NodeList or Element} elems                                                                         // 2466\n */                                                                                                                    // 2467\nOutlayer.prototype.prepended = function( elems ) {                                                                     // 2468\n  var items = this._itemize( elems );                                                                                  // 2469\n  if ( !items.length ) {                                                                                               // 2470\n    return;                                                                                                            // 2471\n  }                                                                                                                    // 2472\n  // add items to beginning of collection                                                                              // 2473\n  var previousItems = this.items.slice(0);                                                                             // 2474\n  this.items = items.concat( previousItems );                                                                          // 2475\n  // start new layout                                                                                                  // 2476\n  this._resetLayout();                                                                                                 // 2477\n  this._manageStamps();                                                                                                // 2478\n  // layout new stuff without transition                                                                               // 2479\n  this.layoutItems( items, true );                                                                                     // 2480\n  this.reveal( items );                                                                                                // 2481\n  // layout previous items                                                                                             // 2482\n  this.layoutItems( previousItems );                                                                                   // 2483\n};                                                                                                                     // 2484\n                                                                                                                       // 2485\n/**                                                                                                                    // 2486\n * reveal a collection of items                                                                                        // 2487\n * @param {Array of Outlayer.Items} items                                                                              // 2488\n */                                                                                                                    // 2489\nOutlayer.prototype.reveal = function( items ) {                                                                        // 2490\n  var len = items && items.length;                                                                                     // 2491\n  if ( !len ) {                                                                                                        // 2492\n    return;                                                                                                            // 2493\n  }                                                                                                                    // 2494\n  for ( var i=0; i < len; i++ ) {                                                                                      // 2495\n    var item = items[i];                                                                                               // 2496\n    item.reveal();                                                                                                     // 2497\n  }                                                                                                                    // 2498\n};                                                                                                                     // 2499\n                                                                                                                       // 2500\n/**                                                                                                                    // 2501\n * hide a collection of items                                                                                          // 2502\n * @param {Array of Outlayer.Items} items                                                                              // 2503\n */                                                                                                                    // 2504\nOutlayer.prototype.hide = function( items ) {                                                                          // 2505\n  var len = items && items.length;                                                                                     // 2506\n  if ( !len ) {                                                                                                        // 2507\n    return;                                                                                                            // 2508\n  }                                                                                                                    // 2509\n  for ( var i=0; i < len; i++ ) {                                                                                      // 2510\n    var item = items[i];                                                                                               // 2511\n    item.hide();                                                                                                       // 2512\n  }                                                                                                                    // 2513\n};                                                                                                                     // 2514\n                                                                                                                       // 2515\n/**                                                                                                                    // 2516\n * get Outlayer.Item, given an Element                                                                                 // 2517\n * @param {Element} elem                                                                                               // 2518\n * @param {Function} callback                                                                                          // 2519\n * @returns {Outlayer.Item} item                                                                                       // 2520\n */                                                                                                                    // 2521\nOutlayer.prototype.getItem = function( elem ) {                                                                        // 2522\n  // loop through items to get the one that matches                                                                    // 2523\n  for ( var i=0, len = this.items.length; i < len; i++ ) {                                                             // 2524\n    var item = this.items[i];                                                                                          // 2525\n    if ( item.element === elem ) {                                                                                     // 2526\n      // return item                                                                                                   // 2527\n      return item;                                                                                                     // 2528\n    }                                                                                                                  // 2529\n  }                                                                                                                    // 2530\n};                                                                                                                     // 2531\n                                                                                                                       // 2532\n/**                                                                                                                    // 2533\n * get collection of Outlayer.Items, given Elements                                                                    // 2534\n * @param {Array} elems                                                                                                // 2535\n * @returns {Array} items - Outlayer.Items                                                                             // 2536\n */                                                                                                                    // 2537\nOutlayer.prototype.getItems = function( elems ) {                                                                      // 2538\n  if ( !elems || !elems.length ) {                                                                                     // 2539\n    return;                                                                                                            // 2540\n  }                                                                                                                    // 2541\n  var items = [];                                                                                                      // 2542\n  for ( var i=0, len = elems.length; i < len; i++ ) {                                                                  // 2543\n    var elem = elems[i];                                                                                               // 2544\n    var item = this.getItem( elem );                                                                                   // 2545\n    if ( item ) {                                                                                                      // 2546\n      items.push( item );                                                                                              // 2547\n    }                                                                                                                  // 2548\n  }                                                                                                                    // 2549\n                                                                                                                       // 2550\n  return items;                                                                                                        // 2551\n};                                                                                                                     // 2552\n                                                                                                                       // 2553\n/**                                                                                                                    // 2554\n * remove element(s) from instance and DOM                                                                             // 2555\n * @param {Array or NodeList or Element} elems                                                                         // 2556\n */                                                                                                                    // 2557\nOutlayer.prototype.remove = function( elems ) {                                                                        // 2558\n  elems = makeArray( elems );                                                                                          // 2559\n                                                                                                                       // 2560\n  var removeItems = this.getItems( elems );                                                                            // 2561\n  // bail if no items to remove                                                                                        // 2562\n  if ( !removeItems || !removeItems.length ) {                                                                         // 2563\n    return;                                                                                                            // 2564\n  }                                                                                                                    // 2565\n                                                                                                                       // 2566\n  this._itemsOn( removeItems, 'remove', function() {                                                                   // 2567\n    this.emitEvent( 'removeComplete', [ this, removeItems ] );                                                         // 2568\n  });                                                                                                                  // 2569\n                                                                                                                       // 2570\n  for ( var i=0, len = removeItems.length; i < len; i++ ) {                                                            // 2571\n    var item = removeItems[i];                                                                                         // 2572\n    item.remove();                                                                                                     // 2573\n    // remove item from collection                                                                                     // 2574\n    removeFrom( item, this.items );                                                                                    // 2575\n  }                                                                                                                    // 2576\n};                                                                                                                     // 2577\n                                                                                                                       // 2578\n// ----- destroy ----- //                                                                                              // 2579\n                                                                                                                       // 2580\n// remove and disable Outlayer instance                                                                                // 2581\nOutlayer.prototype.destroy = function() {                                                                              // 2582\n  // clean up dynamic styles                                                                                           // 2583\n  var style = this.element.style;                                                                                      // 2584\n  style.height = '';                                                                                                   // 2585\n  style.position = '';                                                                                                 // 2586\n  style.width = '';                                                                                                    // 2587\n  // destroy items                                                                                                     // 2588\n  for ( var i=0, len = this.items.length; i < len; i++ ) {                                                             // 2589\n    var item = this.items[i];                                                                                          // 2590\n    item.destroy();                                                                                                    // 2591\n  }                                                                                                                    // 2592\n                                                                                                                       // 2593\n  this.unbindResize();                                                                                                 // 2594\n                                                                                                                       // 2595\n  var id = this.element.outlayerGUID;                                                                                  // 2596\n  delete instances[ id ]; // remove reference to instance by id                                                        // 2597\n  delete this.element.outlayerGUID;                                                                                    // 2598\n  // remove data for jQuery                                                                                            // 2599\n  if ( jQuery ) {                                                                                                      // 2600\n    jQuery.removeData( this.element, this.constructor.namespace );                                                     // 2601\n  }                                                                                                                    // 2602\n                                                                                                                       // 2603\n};                                                                                                                     // 2604\n                                                                                                                       // 2605\n// -------------------------- data -------------------------- //                                                       // 2606\n                                                                                                                       // 2607\n/**                                                                                                                    // 2608\n * get Outlayer instance from element                                                                                  // 2609\n * @param {Element} elem                                                                                               // 2610\n * @returns {Outlayer}                                                                                                 // 2611\n */                                                                                                                    // 2612\nOutlayer.data = function( elem ) {                                                                                     // 2613\n  var id = elem && elem.outlayerGUID;                                                                                  // 2614\n  return id && instances[ id ];                                                                                        // 2615\n};                                                                                                                     // 2616\n                                                                                                                       // 2617\n                                                                                                                       // 2618\n// -------------------------- create Outlayer class -------------------------- //                                      // 2619\n                                                                                                                       // 2620\n/**                                                                                                                    // 2621\n * create a layout class                                                                                               // 2622\n * @param {String} namespace                                                                                           // 2623\n */                                                                                                                    // 2624\nOutlayer.create = function( namespace, options ) {                                                                     // 2625\n  // sub-class Outlayer                                                                                                // 2626\n  function Layout() {                                                                                                  // 2627\n    Outlayer.apply( this, arguments );                                                                                 // 2628\n  }                                                                                                                    // 2629\n  // inherit Outlayer prototype, use Object.create if there                                                            // 2630\n  if ( Object.create ) {                                                                                               // 2631\n    Layout.prototype = Object.create( Outlayer.prototype );                                                            // 2632\n  } else {                                                                                                             // 2633\n    extend( Layout.prototype, Outlayer.prototype );                                                                    // 2634\n  }                                                                                                                    // 2635\n  // set contructor, used for namespace and Item                                                                       // 2636\n  Layout.prototype.constructor = Layout;                                                                               // 2637\n                                                                                                                       // 2638\n  Layout.defaults = extend( {}, Outlayer.defaults );                                                                   // 2639\n  // apply new options                                                                                                 // 2640\n  extend( Layout.defaults, options );                                                                                  // 2641\n  // keep prototype.settings for backwards compatibility (Packery v1.2.0)                                              // 2642\n  Layout.prototype.settings = {};                                                                                      // 2643\n                                                                                                                       // 2644\n  Layout.namespace = namespace;                                                                                        // 2645\n                                                                                                                       // 2646\n  Layout.data = Outlayer.data;                                                                                         // 2647\n                                                                                                                       // 2648\n  // sub-class Item                                                                                                    // 2649\n  Layout.Item = function LayoutItem() {                                                                                // 2650\n    Item.apply( this, arguments );                                                                                     // 2651\n  };                                                                                                                   // 2652\n                                                                                                                       // 2653\n  Layout.Item.prototype = new Item();                                                                                  // 2654\n                                                                                                                       // 2655\n  // -------------------------- declarative -------------------------- //                                              // 2656\n                                                                                                                       // 2657\n  /**                                                                                                                  // 2658\n   * allow user to initialize Outlayer via .js-namespace class                                                         // 2659\n   * options are parsed from data-namespace-option attribute                                                           // 2660\n   */                                                                                                                  // 2661\n  docReady( function() {                                                                                               // 2662\n    var dashedNamespace = toDashed( namespace );                                                                       // 2663\n    var elems = document.querySelectorAll( '.js-' + dashedNamespace );                                                 // 2664\n    var dataAttr = 'data-' + dashedNamespace + '-options';                                                             // 2665\n                                                                                                                       // 2666\n    for ( var i=0, len = elems.length; i < len; i++ ) {                                                                // 2667\n      var elem = elems[i];                                                                                             // 2668\n      var attr = elem.getAttribute( dataAttr );                                                                        // 2669\n      var options;                                                                                                     // 2670\n      try {                                                                                                            // 2671\n        options = attr && JSON.parse( attr );                                                                          // 2672\n      } catch ( error ) {                                                                                              // 2673\n        // log error, do not initialize                                                                                // 2674\n        if ( console ) {                                                                                               // 2675\n          console.error( 'Error parsing ' + dataAttr + ' on ' +                                                        // 2676\n            elem.nodeName.toLowerCase() + ( elem.id ? '#' + elem.id : '' ) + ': ' +                                    // 2677\n            error );                                                                                                   // 2678\n        }                                                                                                              // 2679\n        continue;                                                                                                      // 2680\n      }                                                                                                                // 2681\n      // initialize                                                                                                    // 2682\n      var instance = new Layout( elem, options );                                                                      // 2683\n      // make available via $().data('layoutname')                                                                     // 2684\n      if ( jQuery ) {                                                                                                  // 2685\n        jQuery.data( elem, namespace, instance );                                                                      // 2686\n      }                                                                                                                // 2687\n    }                                                                                                                  // 2688\n  });                                                                                                                  // 2689\n                                                                                                                       // 2690\n  // -------------------------- jQuery bridge -------------------------- //                                            // 2691\n                                                                                                                       // 2692\n  // make into jQuery plugin                                                                                           // 2693\n  if ( jQuery && jQuery.bridget ) {                                                                                    // 2694\n    jQuery.bridget( namespace, Layout );                                                                               // 2695\n  }                                                                                                                    // 2696\n                                                                                                                       // 2697\n  return Layout;                                                                                                       // 2698\n};                                                                                                                     // 2699\n                                                                                                                       // 2700\n// ----- fin ----- //                                                                                                  // 2701\n                                                                                                                       // 2702\n// back in global                                                                                                      // 2703\nOutlayer.Item = Item;                                                                                                  // 2704\n                                                                                                                       // 2705\nreturn Outlayer;                                                                                                       // 2706\n                                                                                                                       // 2707\n}                                                                                                                      // 2708\n                                                                                                                       // 2709\n// -------------------------- transport -------------------------- //                                                  // 2710\n                                                                                                                       // 2711\nif ( typeof define === 'function' && define.amd ) {                                                                    // 2712\n  // AMD                                                                                                               // 2713\n  define( 'outlayer/outlayer',[                                                                                        // 2714\n      'eventie/eventie',                                                                                               // 2715\n      'doc-ready/doc-ready',                                                                                           // 2716\n      'eventEmitter/EventEmitter',                                                                                     // 2717\n      'get-size/get-size',                                                                                             // 2718\n      'matches-selector/matches-selector',                                                                             // 2719\n      './item'                                                                                                         // 2720\n    ],                                                                                                                 // 2721\n    outlayerDefinition );                                                                                              // 2722\n} else if ( typeof exports === 'object' ) {                                                                            // 2723\n  // CommonJS                                                                                                          // 2724\n  module.exports = outlayerDefinition(                                                                                 // 2725\n    require('eventie'),                                                                                                // 2726\n    require('doc-ready'),                                                                                              // 2727\n    require('wolfy87-eventemitter'),                                                                                   // 2728\n    require('get-size'),                                                                                               // 2729\n    require('desandro-matches-selector'),                                                                              // 2730\n    require('./item')                                                                                                  // 2731\n  );                                                                                                                   // 2732\n} else {                                                                                                               // 2733\n  // browser global                                                                                                    // 2734\n  window.Outlayer = outlayerDefinition(                                                                                // 2735\n    window.eventie,                                                                                                    // 2736\n    window.docReady,                                                                                                   // 2737\n    window.EventEmitter,                                                                                               // 2738\n    window.getSize,                                                                                                    // 2739\n    window.matchesSelector,                                                                                            // 2740\n    window.Outlayer.Item                                                                                               // 2741\n  );                                                                                                                   // 2742\n}                                                                                                                      // 2743\n                                                                                                                       // 2744\n})( window );                                                                                                          // 2745\n                                                                                                                       // 2746\n/**                                                                                                                    // 2747\n * Isotope Item                                                                                                        // 2748\n**/                                                                                                                    // 2749\n                                                                                                                       // 2750\n( function( window ) {                                                                                                 // 2751\n                                                                                                                       // 2752\n                                                                                                                       // 2753\n                                                                                                                       // 2754\n// -------------------------- Item -------------------------- //                                                       // 2755\n                                                                                                                       // 2756\nfunction itemDefinition( Outlayer ) {                                                                                  // 2757\n                                                                                                                       // 2758\n// sub-class Outlayer Item                                                                                             // 2759\nfunction Item() {                                                                                                      // 2760\n  Outlayer.Item.apply( this, arguments );                                                                              // 2761\n}                                                                                                                      // 2762\n                                                                                                                       // 2763\nItem.prototype = new Outlayer.Item();                                                                                  // 2764\n                                                                                                                       // 2765\nItem.prototype._create = function() {                                                                                  // 2766\n  // assign id, used for original-order sorting                                                                        // 2767\n  this.id = this.layout.itemGUID++;                                                                                    // 2768\n  Outlayer.Item.prototype._create.call( this );                                                                        // 2769\n  this.sortData = {};                                                                                                  // 2770\n};                                                                                                                     // 2771\n                                                                                                                       // 2772\nItem.prototype.updateSortData = function() {                                                                           // 2773\n  if ( this.isIgnored ) {                                                                                              // 2774\n    return;                                                                                                            // 2775\n  }                                                                                                                    // 2776\n  // default sorters                                                                                                   // 2777\n  this.sortData.id = this.id;                                                                                          // 2778\n  // for backward compatibility                                                                                        // 2779\n  this.sortData['original-order'] = this.id;                                                                           // 2780\n  this.sortData.random = Math.random();                                                                                // 2781\n  // go thru getSortData obj and apply the sorters                                                                     // 2782\n  var getSortData = this.layout.options.getSortData;                                                                   // 2783\n  var sorters = this.layout._sorters;                                                                                  // 2784\n  for ( var key in getSortData ) {                                                                                     // 2785\n    var sorter = sorters[ key ];                                                                                       // 2786\n    this.sortData[ key ] = sorter( this.element, this );                                                               // 2787\n  }                                                                                                                    // 2788\n};                                                                                                                     // 2789\n                                                                                                                       // 2790\nvar _destroy = Item.prototype.destroy;                                                                                 // 2791\nItem.prototype.destroy = function() {                                                                                  // 2792\n  // call super                                                                                                        // 2793\n  _destroy.apply( this, arguments );                                                                                   // 2794\n  // reset display, #741                                                                                               // 2795\n  this.css({                                                                                                           // 2796\n    display: ''                                                                                                        // 2797\n  });                                                                                                                  // 2798\n};                                                                                                                     // 2799\n                                                                                                                       // 2800\nreturn Item;                                                                                                           // 2801\n                                                                                                                       // 2802\n}                                                                                                                      // 2803\n                                                                                                                       // 2804\n// -------------------------- transport -------------------------- //                                                  // 2805\n                                                                                                                       // 2806\nif ( typeof define === 'function' && define.amd ) {                                                                    // 2807\n  // AMD                                                                                                               // 2808\n  define( 'isotope/js/item',[                                                                                          // 2809\n      'outlayer/outlayer'                                                                                              // 2810\n    ],                                                                                                                 // 2811\n    itemDefinition );                                                                                                  // 2812\n} else if ( typeof exports === 'object' ) {                                                                            // 2813\n  // CommonJS                                                                                                          // 2814\n  module.exports = itemDefinition(                                                                                     // 2815\n    require('outlayer')                                                                                                // 2816\n  );                                                                                                                   // 2817\n} else {                                                                                                               // 2818\n  // browser global                                                                                                    // 2819\n  window.Isotope = window.Isotope || {};                                                                               // 2820\n  window.Isotope.Item = itemDefinition(                                                                                // 2821\n    window.Outlayer                                                                                                    // 2822\n  );                                                                                                                   // 2823\n}                                                                                                                      // 2824\n                                                                                                                       // 2825\n})( window );                                                                                                          // 2826\n                                                                                                                       // 2827\n( function( window ) {                                                                                                 // 2828\n                                                                                                                       // 2829\n                                                                                                                       // 2830\n                                                                                                                       // 2831\n// --------------------------  -------------------------- //                                                           // 2832\n                                                                                                                       // 2833\nfunction layoutModeDefinition( getSize, Outlayer ) {                                                                   // 2834\n                                                                                                                       // 2835\n  // layout mode class                                                                                                 // 2836\n  function LayoutMode( isotope ) {                                                                                     // 2837\n    this.isotope = isotope;                                                                                            // 2838\n    // link properties                                                                                                 // 2839\n    if ( isotope ) {                                                                                                   // 2840\n      this.options = isotope.options[ this.namespace ];                                                                // 2841\n      this.element = isotope.element;                                                                                  // 2842\n      this.items = isotope.filteredItems;                                                                              // 2843\n      this.size = isotope.size;                                                                                        // 2844\n    }                                                                                                                  // 2845\n  }                                                                                                                    // 2846\n                                                                                                                       // 2847\n  /**                                                                                                                  // 2848\n   * some methods should just defer to default Outlayer method                                                         // 2849\n   * and reference the Isotope instance as `this`                                                                      // 2850\n  **/                                                                                                                  // 2851\n  ( function() {                                                                                                       // 2852\n    var facadeMethods = [                                                                                              // 2853\n      '_resetLayout',                                                                                                  // 2854\n      '_getItemLayoutPosition',                                                                                        // 2855\n      '_manageStamp',                                                                                                  // 2856\n      '_getContainerSize',                                                                                             // 2857\n      '_getElementOffset',                                                                                             // 2858\n      'needsResizeLayout'                                                                                              // 2859\n    ];                                                                                                                 // 2860\n                                                                                                                       // 2861\n    for ( var i=0, len = facadeMethods.length; i < len; i++ ) {                                                        // 2862\n      var methodName = facadeMethods[i];                                                                               // 2863\n      LayoutMode.prototype[ methodName ] = getOutlayerMethod( methodName );                                            // 2864\n    }                                                                                                                  // 2865\n                                                                                                                       // 2866\n    function getOutlayerMethod( methodName ) {                                                                         // 2867\n      return function() {                                                                                              // 2868\n        return Outlayer.prototype[ methodName ].apply( this.isotope, arguments );                                      // 2869\n      };                                                                                                               // 2870\n    }                                                                                                                  // 2871\n  })();                                                                                                                // 2872\n                                                                                                                       // 2873\n  // -----  ----- //                                                                                                   // 2874\n                                                                                                                       // 2875\n  // for horizontal layout modes, check vertical size                                                                  // 2876\n  LayoutMode.prototype.needsVerticalResizeLayout = function() {                                                        // 2877\n    // don't trigger if size did not change                                                                            // 2878\n    var size = getSize( this.isotope.element );                                                                        // 2879\n    // check that this.size and size are there                                                                         // 2880\n    // IE8 triggers resize on body size change, so they might not be                                                   // 2881\n    var hasSizes = this.isotope.size && size;                                                                          // 2882\n    return hasSizes && size.innerHeight !== this.isotope.size.innerHeight;                                             // 2883\n  };                                                                                                                   // 2884\n                                                                                                                       // 2885\n  // ----- measurements ----- //                                                                                       // 2886\n                                                                                                                       // 2887\n  LayoutMode.prototype._getMeasurement = function() {                                                                  // 2888\n    this.isotope._getMeasurement.apply( this, arguments );                                                             // 2889\n  };                                                                                                                   // 2890\n                                                                                                                       // 2891\n  LayoutMode.prototype.getColumnWidth = function() {                                                                   // 2892\n    this.getSegmentSize( 'column', 'Width' );                                                                          // 2893\n  };                                                                                                                   // 2894\n                                                                                                                       // 2895\n  LayoutMode.prototype.getRowHeight = function() {                                                                     // 2896\n    this.getSegmentSize( 'row', 'Height' );                                                                            // 2897\n  };                                                                                                                   // 2898\n                                                                                                                       // 2899\n  /**                                                                                                                  // 2900\n   * get columnWidth or rowHeight                                                                                      // 2901\n   * segment: 'column' or 'row'                                                                                        // 2902\n   * size 'Width' or 'Height'                                                                                          // 2903\n  **/                                                                                                                  // 2904\n  LayoutMode.prototype.getSegmentSize = function( segment, size ) {                                                    // 2905\n    var segmentName = segment + size;                                                                                  // 2906\n    var outerSize = 'outer' + size;                                                                                    // 2907\n    // columnWidth / outerWidth // rowHeight / outerHeight                                                             // 2908\n    this._getMeasurement( segmentName, outerSize );                                                                    // 2909\n    // got rowHeight or columnWidth, we can chill                                                                      // 2910\n    if ( this[ segmentName ] ) {                                                                                       // 2911\n      return;                                                                                                          // 2912\n    }                                                                                                                  // 2913\n    // fall back to item of first element                                                                              // 2914\n    var firstItemSize = this.getFirstItemSize();                                                                       // 2915\n    this[ segmentName ] = firstItemSize && firstItemSize[ outerSize ] ||                                               // 2916\n      // or size of container                                                                                          // 2917\n      this.isotope.size[ 'inner' + size ];                                                                             // 2918\n  };                                                                                                                   // 2919\n                                                                                                                       // 2920\n  LayoutMode.prototype.getFirstItemSize = function() {                                                                 // 2921\n    var firstItem = this.isotope.filteredItems[0];                                                                     // 2922\n    return firstItem && firstItem.element && getSize( firstItem.element );                                             // 2923\n  };                                                                                                                   // 2924\n                                                                                                                       // 2925\n  // ----- methods that should reference isotope ----- //                                                              // 2926\n                                                                                                                       // 2927\n  LayoutMode.prototype.layout = function() {                                                                           // 2928\n    this.isotope.layout.apply( this.isotope, arguments );                                                              // 2929\n  };                                                                                                                   // 2930\n                                                                                                                       // 2931\n  LayoutMode.prototype.getSize = function() {                                                                          // 2932\n    this.isotope.getSize();                                                                                            // 2933\n    this.size = this.isotope.size;                                                                                     // 2934\n  };                                                                                                                   // 2935\n                                                                                                                       // 2936\n  // -------------------------- create -------------------------- //                                                   // 2937\n                                                                                                                       // 2938\n  LayoutMode.modes = {};                                                                                               // 2939\n                                                                                                                       // 2940\n  LayoutMode.create = function( namespace, options ) {                                                                 // 2941\n                                                                                                                       // 2942\n    function Mode() {                                                                                                  // 2943\n      LayoutMode.apply( this, arguments );                                                                             // 2944\n    }                                                                                                                  // 2945\n                                                                                                                       // 2946\n    Mode.prototype = new LayoutMode();                                                                                 // 2947\n                                                                                                                       // 2948\n    // default options                                                                                                 // 2949\n    if ( options ) {                                                                                                   // 2950\n      Mode.options = options;                                                                                          // 2951\n    }                                                                                                                  // 2952\n                                                                                                                       // 2953\n    Mode.prototype.namespace = namespace;                                                                              // 2954\n    // register in Isotope                                                                                             // 2955\n    LayoutMode.modes[ namespace ] = Mode;                                                                              // 2956\n                                                                                                                       // 2957\n    return Mode;                                                                                                       // 2958\n  };                                                                                                                   // 2959\n                                                                                                                       // 2960\n                                                                                                                       // 2961\n  return LayoutMode;                                                                                                   // 2962\n                                                                                                                       // 2963\n}                                                                                                                      // 2964\n                                                                                                                       // 2965\nif ( typeof define === 'function' && define.amd ) {                                                                    // 2966\n  // AMD                                                                                                               // 2967\n  define( 'isotope/js/layout-mode',[                                                                                   // 2968\n      'get-size/get-size',                                                                                             // 2969\n      'outlayer/outlayer'                                                                                              // 2970\n    ],                                                                                                                 // 2971\n    layoutModeDefinition );                                                                                            // 2972\n} else if ( typeof exports === 'object' ) {                                                                            // 2973\n  // CommonJS                                                                                                          // 2974\n  module.exports = layoutModeDefinition(                                                                               // 2975\n    require('get-size'),                                                                                               // 2976\n    require('outlayer')                                                                                                // 2977\n  );                                                                                                                   // 2978\n} else {                                                                                                               // 2979\n  // browser global                                                                                                    // 2980\n  window.Isotope = window.Isotope || {};                                                                               // 2981\n  window.Isotope.LayoutMode = layoutModeDefinition(                                                                    // 2982\n    window.getSize,                                                                                                    // 2983\n    window.Outlayer                                                                                                    // 2984\n  );                                                                                                                   // 2985\n}                                                                                                                      // 2986\n                                                                                                                       // 2987\n                                                                                                                       // 2988\n})( window );                                                                                                          // 2989\n                                                                                                                       // 2990\n/*!                                                                                                                    // 2991\n * Masonry v3.2.1                                                                                                      // 2992\n * Cascading grid layout library                                                                                       // 2993\n * http://masonry.desandro.com                                                                                         // 2994\n * MIT License                                                                                                         // 2995\n * by David DeSandro                                                                                                   // 2996\n */                                                                                                                    // 2997\n                                                                                                                       // 2998\n( function( window ) {                                                                                                 // 2999\n                                                                                                                       // 3000\n                                                                                                                       // 3001\n                                                                                                                       // 3002\n// -------------------------- helpers -------------------------- //                                                    // 3003\n                                                                                                                       // 3004\nvar indexOf = Array.prototype.indexOf ?                                                                                // 3005\n  function( items, value ) {                                                                                           // 3006\n    return items.indexOf( value );                                                                                     // 3007\n  } :                                                                                                                  // 3008\n  function ( items, value ) {                                                                                          // 3009\n    for ( var i=0, len = items.length; i < len; i++ ) {                                                                // 3010\n      var item = items[i];                                                                                             // 3011\n      if ( item === value ) {                                                                                          // 3012\n        return i;                                                                                                      // 3013\n      }                                                                                                                // 3014\n    }                                                                                                                  // 3015\n    return -1;                                                                                                         // 3016\n  };                                                                                                                   // 3017\n                                                                                                                       // 3018\n// -------------------------- masonryDefinition -------------------------- //                                          // 3019\n                                                                                                                       // 3020\n// used for AMD definition and requires                                                                                // 3021\nfunction masonryDefinition( Outlayer, getSize ) {                                                                      // 3022\n  // create an Outlayer layout class                                                                                   // 3023\n  var Masonry = Outlayer.create('masonry');                                                                            // 3024\n                                                                                                                       // 3025\n  Masonry.prototype._resetLayout = function() {                                                                        // 3026\n    this.getSize();                                                                                                    // 3027\n    this._getMeasurement( 'columnWidth', 'outerWidth' );                                                               // 3028\n    this._getMeasurement( 'gutter', 'outerWidth' );                                                                    // 3029\n    this.measureColumns();                                                                                             // 3030\n                                                                                                                       // 3031\n    // reset column Y                                                                                                  // 3032\n    var i = this.cols;                                                                                                 // 3033\n    this.colYs = [];                                                                                                   // 3034\n    while (i--) {                                                                                                      // 3035\n      this.colYs.push( 0 );                                                                                            // 3036\n    }                                                                                                                  // 3037\n                                                                                                                       // 3038\n    this.maxY = 0;                                                                                                     // 3039\n  };                                                                                                                   // 3040\n                                                                                                                       // 3041\n  Masonry.prototype.measureColumns = function() {                                                                      // 3042\n    this.getContainerWidth();                                                                                          // 3043\n    // if columnWidth is 0, default to outerWidth of first item                                                        // 3044\n    if ( !this.columnWidth ) {                                                                                         // 3045\n      var firstItem = this.items[0];                                                                                   // 3046\n      var firstItemElem = firstItem && firstItem.element;                                                              // 3047\n      // columnWidth fall back to item of first element                                                                // 3048\n      this.columnWidth = firstItemElem && getSize( firstItemElem ).outerWidth ||                                       // 3049\n        // if first elem has no width, default to size of container                                                    // 3050\n        this.containerWidth;                                                                                           // 3051\n    }                                                                                                                  // 3052\n                                                                                                                       // 3053\n    this.columnWidth += this.gutter;                                                                                   // 3054\n                                                                                                                       // 3055\n    this.cols = Math.floor( ( this.containerWidth + this.gutter ) / this.columnWidth );                                // 3056\n    this.cols = Math.max( this.cols, 1 );                                                                              // 3057\n  };                                                                                                                   // 3058\n                                                                                                                       // 3059\n  Masonry.prototype.getContainerWidth = function() {                                                                   // 3060\n    // container is parent if fit width                                                                                // 3061\n    var container = this.options.isFitWidth ? this.element.parentNode : this.element;                                  // 3062\n    // check that this.size and size are there                                                                         // 3063\n    // IE8 triggers resize on body size change, so they might not be                                                   // 3064\n    var size = getSize( container );                                                                                   // 3065\n    this.containerWidth = size && size.innerWidth;                                                                     // 3066\n  };                                                                                                                   // 3067\n                                                                                                                       // 3068\n  Masonry.prototype._getItemLayoutPosition = function( item ) {                                                        // 3069\n    item.getSize();                                                                                                    // 3070\n    // how many columns does this brick span                                                                           // 3071\n    var remainder = item.size.outerWidth % this.columnWidth;                                                           // 3072\n    var mathMethod = remainder && remainder < 1 ? 'round' : 'ceil';                                                    // 3073\n    // round if off by 1 pixel, otherwise use ceil                                                                     // 3074\n    var colSpan = Math[ mathMethod ]( item.size.outerWidth / this.columnWidth );                                       // 3075\n    colSpan = Math.min( colSpan, this.cols );                                                                          // 3076\n                                                                                                                       // 3077\n    var colGroup = this._getColGroup( colSpan );                                                                       // 3078\n    // get the minimum Y value from the columns                                                                        // 3079\n    var minimumY = Math.min.apply( Math, colGroup );                                                                   // 3080\n    var shortColIndex = indexOf( colGroup, minimumY );                                                                 // 3081\n                                                                                                                       // 3082\n    // position the brick                                                                                              // 3083\n    var position = {                                                                                                   // 3084\n      x: this.columnWidth * shortColIndex,                                                                             // 3085\n      y: minimumY                                                                                                      // 3086\n    };                                                                                                                 // 3087\n                                                                                                                       // 3088\n    // apply setHeight to necessary columns                                                                            // 3089\n    var setHeight = minimumY + item.size.outerHeight;                                                                  // 3090\n    var setSpan = this.cols + 1 - colGroup.length;                                                                     // 3091\n    for ( var i = 0; i < setSpan; i++ ) {                                                                              // 3092\n      this.colYs[ shortColIndex + i ] = setHeight;                                                                     // 3093\n    }                                                                                                                  // 3094\n                                                                                                                       // 3095\n    return position;                                                                                                   // 3096\n  };                                                                                                                   // 3097\n                                                                                                                       // 3098\n  /**                                                                                                                  // 3099\n   * @param {Number} colSpan - number of columns the element spans                                                     // 3100\n   * @returns {Array} colGroup                                                                                         // 3101\n   */                                                                                                                  // 3102\n  Masonry.prototype._getColGroup = function( colSpan ) {                                                               // 3103\n    if ( colSpan < 2 ) {                                                                                               // 3104\n      // if brick spans only one column, use all the column Ys                                                         // 3105\n      return this.colYs;                                                                                               // 3106\n    }                                                                                                                  // 3107\n                                                                                                                       // 3108\n    var colGroup = [];                                                                                                 // 3109\n    // how many different places could this brick fit horizontally                                                     // 3110\n    var groupCount = this.cols + 1 - colSpan;                                                                          // 3111\n    // for each group potential horizontal position                                                                    // 3112\n    for ( var i = 0; i < groupCount; i++ ) {                                                                           // 3113\n      // make an array of colY values for that one group                                                               // 3114\n      var groupColYs = this.colYs.slice( i, i + colSpan );                                                             // 3115\n      // and get the max value of the array                                                                            // 3116\n      colGroup[i] = Math.max.apply( Math, groupColYs );                                                                // 3117\n    }                                                                                                                  // 3118\n    return colGroup;                                                                                                   // 3119\n  };                                                                                                                   // 3120\n                                                                                                                       // 3121\n  Masonry.prototype._manageStamp = function( stamp ) {                                                                 // 3122\n    var stampSize = getSize( stamp );                                                                                  // 3123\n    var offset = this._getElementOffset( stamp );                                                                      // 3124\n    // get the columns that this stamp affects                                                                         // 3125\n    var firstX = this.options.isOriginLeft ? offset.left : offset.right;                                               // 3126\n    var lastX = firstX + stampSize.outerWidth;                                                                         // 3127\n    var firstCol = Math.floor( firstX / this.columnWidth );                                                            // 3128\n    firstCol = Math.max( 0, firstCol );                                                                                // 3129\n    var lastCol = Math.floor( lastX / this.columnWidth );                                                              // 3130\n    // lastCol should not go over if multiple of columnWidth #425                                                      // 3131\n    lastCol -= lastX % this.columnWidth ? 0 : 1;                                                                       // 3132\n    lastCol = Math.min( this.cols - 1, lastCol );                                                                      // 3133\n    // set colYs to bottom of the stamp                                                                                // 3134\n    var stampMaxY = ( this.options.isOriginTop ? offset.top : offset.bottom ) +                                        // 3135\n      stampSize.outerHeight;                                                                                           // 3136\n    for ( var i = firstCol; i <= lastCol; i++ ) {                                                                      // 3137\n      this.colYs[i] = Math.max( stampMaxY, this.colYs[i] );                                                            // 3138\n    }                                                                                                                  // 3139\n  };                                                                                                                   // 3140\n                                                                                                                       // 3141\n  Masonry.prototype._getContainerSize = function() {                                                                   // 3142\n    this.maxY = Math.max.apply( Math, this.colYs );                                                                    // 3143\n    var size = {                                                                                                       // 3144\n      height: this.maxY                                                                                                // 3145\n    };                                                                                                                 // 3146\n                                                                                                                       // 3147\n    if ( this.options.isFitWidth ) {                                                                                   // 3148\n      size.width = this._getContainerFitWidth();                                                                       // 3149\n    }                                                                                                                  // 3150\n                                                                                                                       // 3151\n    return size;                                                                                                       // 3152\n  };                                                                                                                   // 3153\n                                                                                                                       // 3154\n  Masonry.prototype._getContainerFitWidth = function() {                                                               // 3155\n    var unusedCols = 0;                                                                                                // 3156\n    // count unused columns                                                                                            // 3157\n    var i = this.cols;                                                                                                 // 3158\n    while ( --i ) {                                                                                                    // 3159\n      if ( this.colYs[i] !== 0 ) {                                                                                     // 3160\n        break;                                                                                                         // 3161\n      }                                                                                                                // 3162\n      unusedCols++;                                                                                                    // 3163\n    }                                                                                                                  // 3164\n    // fit container to columns that have been used                                                                    // 3165\n    return ( this.cols - unusedCols ) * this.columnWidth - this.gutter;                                                // 3166\n  };                                                                                                                   // 3167\n                                                                                                                       // 3168\n  Masonry.prototype.needsResizeLayout = function() {                                                                   // 3169\n    var previousWidth = this.containerWidth;                                                                           // 3170\n    this.getContainerWidth();                                                                                          // 3171\n    return previousWidth !== this.containerWidth;                                                                      // 3172\n  };                                                                                                                   // 3173\n                                                                                                                       // 3174\n  return Masonry;                                                                                                      // 3175\n}                                                                                                                      // 3176\n                                                                                                                       // 3177\n// -------------------------- transport -------------------------- //                                                  // 3178\n                                                                                                                       // 3179\nif ( typeof define === 'function' && define.amd ) {                                                                    // 3180\n  // AMD                                                                                                               // 3181\n  define( 'masonry/masonry',[                                                                                          // 3182\n      'outlayer/outlayer',                                                                                             // 3183\n      'get-size/get-size'                                                                                              // 3184\n    ],                                                                                                                 // 3185\n    masonryDefinition );                                                                                               // 3186\n} else if (typeof exports === 'object') {                                                                              // 3187\n  module.exports = masonryDefinition(                                                                                  // 3188\n    require('outlayer'),                                                                                               // 3189\n    require('get-size')                                                                                                // 3190\n  );                                                                                                                   // 3191\n} else {                                                                                                               // 3192\n  // browser global                                                                                                    // 3193\n  window.Masonry = masonryDefinition(                                                                                  // 3194\n    window.Outlayer,                                                                                                   // 3195\n    window.getSize                                                                                                     // 3196\n  );                                                                                                                   // 3197\n}                                                                                                                      // 3198\n                                                                                                                       // 3199\n})( window );                                                                                                          // 3200\n                                                                                                                       // 3201\n/*!                                                                                                                    // 3202\n * Masonry layout mode                                                                                                 // 3203\n * sub-classes Masonry                                                                                                 // 3204\n * http://masonry.desandro.com                                                                                         // 3205\n */                                                                                                                    // 3206\n                                                                                                                       // 3207\n( function( window ) {                                                                                                 // 3208\n                                                                                                                       // 3209\n                                                                                                                       // 3210\n                                                                                                                       // 3211\n// -------------------------- helpers -------------------------- //                                                    // 3212\n                                                                                                                       // 3213\n// extend objects                                                                                                      // 3214\nfunction extend( a, b ) {                                                                                              // 3215\n  for ( var prop in b ) {                                                                                              // 3216\n    a[ prop ] = b[ prop ];                                                                                             // 3217\n  }                                                                                                                    // 3218\n  return a;                                                                                                            // 3219\n}                                                                                                                      // 3220\n                                                                                                                       // 3221\n// -------------------------- masonryDefinition -------------------------- //                                          // 3222\n                                                                                                                       // 3223\n// used for AMD definition and requires                                                                                // 3224\nfunction masonryDefinition( LayoutMode, Masonry ) {                                                                    // 3225\n  // create an Outlayer layout class                                                                                   // 3226\n  var MasonryMode = LayoutMode.create('masonry');                                                                      // 3227\n                                                                                                                       // 3228\n  // save on to these methods                                                                                          // 3229\n  var _getElementOffset = MasonryMode.prototype._getElementOffset;                                                     // 3230\n  var layout = MasonryMode.prototype.layout;                                                                           // 3231\n  var _getMeasurement = MasonryMode.prototype._getMeasurement;                                                         // 3232\n                                                                                                                       // 3233\n  // sub-class Masonry                                                                                                 // 3234\n  extend( MasonryMode.prototype, Masonry.prototype );                                                                  // 3235\n                                                                                                                       // 3236\n  // set back, as it was overwritten by Masonry                                                                        // 3237\n  MasonryMode.prototype._getElementOffset = _getElementOffset;                                                         // 3238\n  MasonryMode.prototype.layout = layout;                                                                               // 3239\n  MasonryMode.prototype._getMeasurement = _getMeasurement;                                                             // 3240\n                                                                                                                       // 3241\n  var measureColumns = MasonryMode.prototype.measureColumns;                                                           // 3242\n  MasonryMode.prototype.measureColumns = function() {                                                                  // 3243\n    // set items, used if measuring first item                                                                         // 3244\n    this.items = this.isotope.filteredItems;                                                                           // 3245\n    measureColumns.call( this );                                                                                       // 3246\n  };                                                                                                                   // 3247\n                                                                                                                       // 3248\n  // HACK copy over isOriginLeft/Top options                                                                           // 3249\n  var _manageStamp = MasonryMode.prototype._manageStamp;                                                               // 3250\n  MasonryMode.prototype._manageStamp = function() {                                                                    // 3251\n    this.options.isOriginLeft = this.isotope.options.isOriginLeft;                                                     // 3252\n    this.options.isOriginTop = this.isotope.options.isOriginTop;                                                       // 3253\n    _manageStamp.apply( this, arguments );                                                                             // 3254\n  };                                                                                                                   // 3255\n                                                                                                                       // 3256\n  return MasonryMode;                                                                                                  // 3257\n}                                                                                                                      // 3258\n                                                                                                                       // 3259\n// -------------------------- transport -------------------------- //                                                  // 3260\n                                                                                                                       // 3261\nif ( typeof define === 'function' && define.amd ) {                                                                    // 3262\n  // AMD                                                                                                               // 3263\n  define( 'isotope/js/layout-modes/masonry',[                                                                          // 3264\n      '../layout-mode',                                                                                                // 3265\n      'masonry/masonry'                                                                                                // 3266\n    ],                                                                                                                 // 3267\n    masonryDefinition );                                                                                               // 3268\n} else if ( typeof exports === 'object' ) {                                                                            // 3269\n  // CommonJS                                                                                                          // 3270\n  module.exports = masonryDefinition(                                                                                  // 3271\n    require('../layout-mode'),                                                                                         // 3272\n    require('masonry-layout')                                                                                          // 3273\n  );                                                                                                                   // 3274\n} else {                                                                                                               // 3275\n  // browser global                                                                                                    // 3276\n  masonryDefinition(                                                                                                   // 3277\n    window.Isotope.LayoutMode,                                                                                         // 3278\n    window.Masonry                                                                                                     // 3279\n  );                                                                                                                   // 3280\n}                                                                                                                      // 3281\n                                                                                                                       // 3282\n})( window );                                                                                                          // 3283\n                                                                                                                       // 3284\n( function( window ) {                                                                                                 // 3285\n                                                                                                                       // 3286\n                                                                                                                       // 3287\n                                                                                                                       // 3288\nfunction fitRowsDefinition( LayoutMode ) {                                                                             // 3289\n                                                                                                                       // 3290\nvar FitRows = LayoutMode.create('fitRows');                                                                            // 3291\n                                                                                                                       // 3292\nFitRows.prototype._resetLayout = function() {                                                                          // 3293\n  this.x = 0;                                                                                                          // 3294\n  this.y = 0;                                                                                                          // 3295\n  this.maxY = 0;                                                                                                       // 3296\n  this._getMeasurement( 'gutter', 'outerWidth' );                                                                      // 3297\n};                                                                                                                     // 3298\n                                                                                                                       // 3299\nFitRows.prototype._getItemLayoutPosition = function( item ) {                                                          // 3300\n  item.getSize();                                                                                                      // 3301\n                                                                                                                       // 3302\n  var itemWidth = item.size.outerWidth + this.gutter;                                                                  // 3303\n  // if this element cannot fit in the current row                                                                     // 3304\n  var containerWidth = this.isotope.size.innerWidth + this.gutter;                                                     // 3305\n  if ( this.x !== 0 && itemWidth + this.x > containerWidth ) {                                                         // 3306\n    this.x = 0;                                                                                                        // 3307\n    this.y = this.maxY;                                                                                                // 3308\n  }                                                                                                                    // 3309\n                                                                                                                       // 3310\n  var position = {                                                                                                     // 3311\n    x: this.x,                                                                                                         // 3312\n    y: this.y                                                                                                          // 3313\n  };                                                                                                                   // 3314\n                                                                                                                       // 3315\n  this.maxY = Math.max( this.maxY, this.y + item.size.outerHeight );                                                   // 3316\n  this.x += itemWidth;                                                                                                 // 3317\n                                                                                                                       // 3318\n  return position;                                                                                                     // 3319\n};                                                                                                                     // 3320\n                                                                                                                       // 3321\nFitRows.prototype._getContainerSize = function() {                                                                     // 3322\n  return { height: this.maxY };                                                                                        // 3323\n};                                                                                                                     // 3324\n                                                                                                                       // 3325\nreturn FitRows;                                                                                                        // 3326\n                                                                                                                       // 3327\n}                                                                                                                      // 3328\n                                                                                                                       // 3329\nif ( typeof define === 'function' && define.amd ) {                                                                    // 3330\n  // AMD                                                                                                               // 3331\n  define( 'isotope/js/layout-modes/fit-rows',[                                                                         // 3332\n      '../layout-mode'                                                                                                 // 3333\n    ],                                                                                                                 // 3334\n    fitRowsDefinition );                                                                                               // 3335\n} else if ( typeof exports === 'object' ) {                                                                            // 3336\n  // CommonJS                                                                                                          // 3337\n  module.exports = fitRowsDefinition(                                                                                  // 3338\n    require('../layout-mode')                                                                                          // 3339\n  );                                                                                                                   // 3340\n} else {                                                                                                               // 3341\n  // browser global                                                                                                    // 3342\n  fitRowsDefinition(                                                                                                   // 3343\n    window.Isotope.LayoutMode                                                                                          // 3344\n  );                                                                                                                   // 3345\n}                                                                                                                      // 3346\n                                                                                                                       // 3347\n})( window );                                                                                                          // 3348\n                                                                                                                       // 3349\n( function( window ) {                                                                                                 // 3350\n                                                                                                                       // 3351\n                                                                                                                       // 3352\n                                                                                                                       // 3353\nfunction verticalDefinition( LayoutMode ) {                                                                            // 3354\n                                                                                                                       // 3355\nvar Vertical = LayoutMode.create( 'vertical', {                                                                        // 3356\n  horizontalAlignment: 0                                                                                               // 3357\n});                                                                                                                    // 3358\n                                                                                                                       // 3359\nVertical.prototype._resetLayout = function() {                                                                         // 3360\n  this.y = 0;                                                                                                          // 3361\n};                                                                                                                     // 3362\n                                                                                                                       // 3363\nVertical.prototype._getItemLayoutPosition = function( item ) {                                                         // 3364\n  item.getSize();                                                                                                      // 3365\n  var x = ( this.isotope.size.innerWidth - item.size.outerWidth ) *                                                    // 3366\n    this.options.horizontalAlignment;                                                                                  // 3367\n  var y = this.y;                                                                                                      // 3368\n  this.y += item.size.outerHeight;                                                                                     // 3369\n  return { x: x, y: y };                                                                                               // 3370\n};                                                                                                                     // 3371\n                                                                                                                       // 3372\nVertical.prototype._getContainerSize = function() {                                                                    // 3373\n  return { height: this.y };                                                                                           // 3374\n};                                                                                                                     // 3375\n                                                                                                                       // 3376\nreturn Vertical;                                                                                                       // 3377\n                                                                                                                       // 3378\n}                                                                                                                      // 3379\n                                                                                                                       // 3380\nif ( typeof define === 'function' && define.amd ) {                                                                    // 3381\n  // AMD                                                                                                               // 3382\n  define( 'isotope/js/layout-modes/vertical',[                                                                         // 3383\n      '../layout-mode'                                                                                                 // 3384\n    ],                                                                                                                 // 3385\n    verticalDefinition );                                                                                              // 3386\n} else if ( typeof exports === 'object' ) {                                                                            // 3387\n  // CommonJS                                                                                                          // 3388\n  module.exports = verticalDefinition(                                                                                 // 3389\n    require('../layout-mode')                                                                                          // 3390\n  );                                                                                                                   // 3391\n} else {                                                                                                               // 3392\n  // browser global                                                                                                    // 3393\n  verticalDefinition(                                                                                                  // 3394\n    window.Isotope.LayoutMode                                                                                          // 3395\n  );                                                                                                                   // 3396\n}                                                                                                                      // 3397\n                                                                                                                       // 3398\n})( window );                                                                                                          // 3399\n                                                                                                                       // 3400\n/*!                                                                                                                    // 3401\n * Isotope v2.1.0                                                                                                      // 3402\n * Filter & sort magical layouts                                                                                       // 3403\n * http://isotope.metafizzy.co                                                                                         // 3404\n */                                                                                                                    // 3405\n                                                                                                                       // 3406\n( function( window ) {                                                                                                 // 3407\n                                                                                                                       // 3408\n                                                                                                                       // 3409\n                                                                                                                       // 3410\n// -------------------------- vars -------------------------- //                                                       // 3411\n                                                                                                                       // 3412\nvar jQuery = window.jQuery;                                                                                            // 3413\n                                                                                                                       // 3414\n// -------------------------- helpers -------------------------- //                                                    // 3415\n                                                                                                                       // 3416\n// extend objects                                                                                                      // 3417\nfunction extend( a, b ) {                                                                                              // 3418\n  for ( var prop in b ) {                                                                                              // 3419\n    a[ prop ] = b[ prop ];                                                                                             // 3420\n  }                                                                                                                    // 3421\n  return a;                                                                                                            // 3422\n}                                                                                                                      // 3423\n                                                                                                                       // 3424\nvar trim = String.prototype.trim ?                                                                                     // 3425\n  function( str ) {                                                                                                    // 3426\n    return str.trim();                                                                                                 // 3427\n  } :                                                                                                                  // 3428\n  function( str ) {                                                                                                    // 3429\n    return str.replace( /^\\s+|\\s+$/g, '' );                                                                            // 3430\n  };                                                                                                                   // 3431\n                                                                                                                       // 3432\nvar docElem = document.documentElement;                                                                                // 3433\n                                                                                                                       // 3434\nvar getText = docElem.textContent ?                                                                                    // 3435\n  function( elem ) {                                                                                                   // 3436\n    return elem.textContent;                                                                                           // 3437\n  } :                                                                                                                  // 3438\n  function( elem ) {                                                                                                   // 3439\n    return elem.innerText;                                                                                             // 3440\n  };                                                                                                                   // 3441\n                                                                                                                       // 3442\nvar objToString = Object.prototype.toString;                                                                           // 3443\nfunction isArray( obj ) {                                                                                              // 3444\n  return objToString.call( obj ) === '[object Array]';                                                                 // 3445\n}                                                                                                                      // 3446\n                                                                                                                       // 3447\n// index of helper cause IE8                                                                                           // 3448\nvar indexOf = Array.prototype.indexOf ? function( ary, obj ) {                                                         // 3449\n    return ary.indexOf( obj );                                                                                         // 3450\n  } : function( ary, obj ) {                                                                                           // 3451\n    for ( var i=0, len = ary.length; i < len; i++ ) {                                                                  // 3452\n      if ( ary[i] === obj ) {                                                                                          // 3453\n        return i;                                                                                                      // 3454\n      }                                                                                                                // 3455\n    }                                                                                                                  // 3456\n    return -1;                                                                                                         // 3457\n  };                                                                                                                   // 3458\n                                                                                                                       // 3459\n// turn element or nodeList into an array                                                                              // 3460\nfunction makeArray( obj ) {                                                                                            // 3461\n  var ary = [];                                                                                                        // 3462\n  if ( isArray( obj ) ) {                                                                                              // 3463\n    // use object if already an array                                                                                  // 3464\n    ary = obj;                                                                                                         // 3465\n  } else if ( obj && typeof obj.length === 'number' ) {                                                                // 3466\n    // convert nodeList to array                                                                                       // 3467\n    for ( var i=0, len = obj.length; i < len; i++ ) {                                                                  // 3468\n      ary.push( obj[i] );                                                                                              // 3469\n    }                                                                                                                  // 3470\n  } else {                                                                                                             // 3471\n    // array of single index                                                                                           // 3472\n    ary.push( obj );                                                                                                   // 3473\n  }                                                                                                                    // 3474\n  return ary;                                                                                                          // 3475\n}                                                                                                                      // 3476\n                                                                                                                       // 3477\nfunction removeFrom( obj, ary ) {                                                                                      // 3478\n  var index = indexOf( ary, obj );                                                                                     // 3479\n  if ( index !== -1 ) {                                                                                                // 3480\n    ary.splice( index, 1 );                                                                                            // 3481\n  }                                                                                                                    // 3482\n}                                                                                                                      // 3483\n                                                                                                                       // 3484\n// -------------------------- isotopeDefinition -------------------------- //                                          // 3485\n                                                                                                                       // 3486\n// used for AMD definition and requires                                                                                // 3487\nfunction isotopeDefinition( Outlayer, getSize, matchesSelector, Item, LayoutMode ) {                                   // 3488\n  // create an Outlayer layout class                                                                                   // 3489\n  var Isotope = Outlayer.create( 'isotope', {                                                                          // 3490\n    layoutMode: \"masonry\",                                                                                             // 3491\n    isJQueryFiltering: true,                                                                                           // 3492\n    sortAscending: true                                                                                                // 3493\n  });                                                                                                                  // 3494\n                                                                                                                       // 3495\n  Isotope.Item = Item;                                                                                                 // 3496\n  Isotope.LayoutMode = LayoutMode;                                                                                     // 3497\n                                                                                                                       // 3498\n  Isotope.prototype._create = function() {                                                                             // 3499\n    this.itemGUID = 0;                                                                                                 // 3500\n    // functions that sort items                                                                                       // 3501\n    this._sorters = {};                                                                                                // 3502\n    this._getSorters();                                                                                                // 3503\n    // call super                                                                                                      // 3504\n    Outlayer.prototype._create.call( this );                                                                           // 3505\n                                                                                                                       // 3506\n    // create layout modes                                                                                             // 3507\n    this.modes = {};                                                                                                   // 3508\n    // start filteredItems with all items                                                                              // 3509\n    this.filteredItems = this.items;                                                                                   // 3510\n    // keep of track of sortBys                                                                                        // 3511\n    this.sortHistory = [ 'original-order' ];                                                                           // 3512\n    // create from registered layout modes                                                                             // 3513\n    for ( var name in LayoutMode.modes ) {                                                                             // 3514\n      this._initLayoutMode( name );                                                                                    // 3515\n    }                                                                                                                  // 3516\n  };                                                                                                                   // 3517\n                                                                                                                       // 3518\n  Isotope.prototype.reloadItems = function() {                                                                         // 3519\n    // reset item ID counter                                                                                           // 3520\n    this.itemGUID = 0;                                                                                                 // 3521\n    // call super                                                                                                      // 3522\n    Outlayer.prototype.reloadItems.call( this );                                                                       // 3523\n  };                                                                                                                   // 3524\n                                                                                                                       // 3525\n  Isotope.prototype._itemize = function() {                                                                            // 3526\n    var items = Outlayer.prototype._itemize.apply( this, arguments );                                                  // 3527\n    // assign ID for original-order                                                                                    // 3528\n    for ( var i=0, len = items.length; i < len; i++ ) {                                                                // 3529\n      var item = items[i];                                                                                             // 3530\n      item.id = this.itemGUID++;                                                                                       // 3531\n    }                                                                                                                  // 3532\n    this._updateItemsSortData( items );                                                                                // 3533\n    return items;                                                                                                      // 3534\n  };                                                                                                                   // 3535\n                                                                                                                       // 3536\n                                                                                                                       // 3537\n  // -------------------------- layout -------------------------- //                                                   // 3538\n                                                                                                                       // 3539\n  Isotope.prototype._initLayoutMode = function( name ) {                                                               // 3540\n    var Mode = LayoutMode.modes[ name ];                                                                               // 3541\n    // set mode options                                                                                                // 3542\n    // HACK extend initial options, back-fill in default options                                                       // 3543\n    var initialOpts = this.options[ name ] || {};                                                                      // 3544\n    this.options[ name ] = Mode.options ?                                                                              // 3545\n      extend( Mode.options, initialOpts ) : initialOpts;                                                               // 3546\n    // init layout mode instance                                                                                       // 3547\n    this.modes[ name ] = new Mode( this );                                                                             // 3548\n  };                                                                                                                   // 3549\n                                                                                                                       // 3550\n                                                                                                                       // 3551\n  Isotope.prototype.layout = function() {                                                                              // 3552\n    // if first time doing layout, do all magic                                                                        // 3553\n    if ( !this._isLayoutInited && this.options.isInitLayout ) {                                                        // 3554\n      this.arrange();                                                                                                  // 3555\n      return;                                                                                                          // 3556\n    }                                                                                                                  // 3557\n    this._layout();                                                                                                    // 3558\n  };                                                                                                                   // 3559\n                                                                                                                       // 3560\n  // private method to be used in layout() & magic()                                                                   // 3561\n  Isotope.prototype._layout = function() {                                                                             // 3562\n    // don't animate first layout                                                                                      // 3563\n    var isInstant = this._getIsInstant();                                                                              // 3564\n    // layout flow                                                                                                     // 3565\n    this._resetLayout();                                                                                               // 3566\n    this._manageStamps();                                                                                              // 3567\n    this.layoutItems( this.filteredItems, isInstant );                                                                 // 3568\n                                                                                                                       // 3569\n    // flag for initalized                                                                                             // 3570\n    this._isLayoutInited = true;                                                                                       // 3571\n  };                                                                                                                   // 3572\n                                                                                                                       // 3573\n  // filter + sort + layout                                                                                            // 3574\n  Isotope.prototype.arrange = function( opts ) {                                                                       // 3575\n    // set any options pass                                                                                            // 3576\n    this.option( opts );                                                                                               // 3577\n    this._getIsInstant();                                                                                              // 3578\n    // filter, sort, and layout                                                                                        // 3579\n    this.filteredItems = this._filter( this.items );                                                                   // 3580\n    this._sort();                                                                                                      // 3581\n    this._layout();                                                                                                    // 3582\n  };                                                                                                                   // 3583\n  // alias to _init for main plugin method                                                                             // 3584\n  Isotope.prototype._init = Isotope.prototype.arrange;                                                                 // 3585\n                                                                                                                       // 3586\n  // HACK                                                                                                              // 3587\n  // Don't animate/transition first layout                                                                             // 3588\n  // Or don't animate/transition other layouts                                                                         // 3589\n  Isotope.prototype._getIsInstant = function() {                                                                       // 3590\n    var isInstant = this.options.isLayoutInstant !== undefined ?                                                       // 3591\n      this.options.isLayoutInstant : !this._isLayoutInited;                                                            // 3592\n    this._isInstant = isInstant;                                                                                       // 3593\n    return isInstant;                                                                                                  // 3594\n  };                                                                                                                   // 3595\n                                                                                                                       // 3596\n  // -------------------------- filter -------------------------- //                                                   // 3597\n                                                                                                                       // 3598\n  Isotope.prototype._filter = function( items ) {                                                                      // 3599\n    var filter = this.options.filter;                                                                                  // 3600\n    filter = filter || '*';                                                                                            // 3601\n    var matches = [];                                                                                                  // 3602\n    var hiddenMatched = [];                                                                                            // 3603\n    var visibleUnmatched = [];                                                                                         // 3604\n                                                                                                                       // 3605\n    var test = this._getFilterTest( filter );                                                                          // 3606\n                                                                                                                       // 3607\n    // test each item                                                                                                  // 3608\n    for ( var i=0, len = items.length; i < len; i++ ) {                                                                // 3609\n      var item = items[i];                                                                                             // 3610\n      if ( item.isIgnored ) {                                                                                          // 3611\n        continue;                                                                                                      // 3612\n      }                                                                                                                // 3613\n      // add item to either matched or unmatched group                                                                 // 3614\n      var isMatched = test( item );                                                                                    // 3615\n      // item.isFilterMatched = isMatched;                                                                             // 3616\n      // add to matches if its a match                                                                                 // 3617\n      if ( isMatched ) {                                                                                               // 3618\n        matches.push( item );                                                                                          // 3619\n      }                                                                                                                // 3620\n      // add to additional group if item needs to be hidden or revealed                                                // 3621\n      if ( isMatched && item.isHidden ) {                                                                              // 3622\n        hiddenMatched.push( item );                                                                                    // 3623\n      } else if ( !isMatched && !item.isHidden ) {                                                                     // 3624\n        visibleUnmatched.push( item );                                                                                 // 3625\n      }                                                                                                                // 3626\n    }                                                                                                                  // 3627\n                                                                                                                       // 3628\n    var _this = this;                                                                                                  // 3629\n    function hideReveal() {                                                                                            // 3630\n      _this.reveal( hiddenMatched );                                                                                   // 3631\n      _this.hide( visibleUnmatched );                                                                                  // 3632\n    }                                                                                                                  // 3633\n                                                                                                                       // 3634\n    if ( this._isInstant ) {                                                                                           // 3635\n      this._noTransition( hideReveal );                                                                                // 3636\n    } else {                                                                                                           // 3637\n      hideReveal();                                                                                                    // 3638\n    }                                                                                                                  // 3639\n                                                                                                                       // 3640\n    return matches;                                                                                                    // 3641\n  };                                                                                                                   // 3642\n                                                                                                                       // 3643\n  // get a jQuery, function, or a matchesSelector test given the filter                                                // 3644\n  Isotope.prototype._getFilterTest = function( filter ) {                                                              // 3645\n    if ( jQuery && this.options.isJQueryFiltering ) {                                                                  // 3646\n      // use jQuery                                                                                                    // 3647\n      return function( item ) {                                                                                        // 3648\n        return jQuery( item.element ).is( filter );                                                                    // 3649\n      };                                                                                                               // 3650\n    }                                                                                                                  // 3651\n    if ( typeof filter === 'function' ) {                                                                              // 3652\n      // use filter as function                                                                                        // 3653\n      return function( item ) {                                                                                        // 3654\n        return filter( item.element );                                                                                 // 3655\n      };                                                                                                               // 3656\n    }                                                                                                                  // 3657\n    // default, use filter as selector string                                                                          // 3658\n    return function( item ) {                                                                                          // 3659\n      return matchesSelector( item.element, filter );                                                                  // 3660\n    };                                                                                                                 // 3661\n  };                                                                                                                   // 3662\n                                                                                                                       // 3663\n  // -------------------------- sorting -------------------------- //                                                  // 3664\n                                                                                                                       // 3665\n  /**                                                                                                                  // 3666\n   * @params {Array} elems                                                                                             // 3667\n   * @public                                                                                                           // 3668\n   */                                                                                                                  // 3669\n  Isotope.prototype.updateSortData = function( elems ) {                                                               // 3670\n    // get items                                                                                                       // 3671\n    var items;                                                                                                         // 3672\n    if ( elems ) {                                                                                                     // 3673\n      elems = makeArray( elems );                                                                                      // 3674\n      items = this.getItems( elems );                                                                                  // 3675\n    } else {                                                                                                           // 3676\n      // update all items if no elems provided                                                                         // 3677\n      items = this.items;                                                                                              // 3678\n    }                                                                                                                  // 3679\n                                                                                                                       // 3680\n    this._getSorters();                                                                                                // 3681\n    this._updateItemsSortData( items );                                                                                // 3682\n  };                                                                                                                   // 3683\n                                                                                                                       // 3684\n  Isotope.prototype._getSorters = function() {                                                                         // 3685\n    var getSortData = this.options.getSortData;                                                                        // 3686\n    for ( var key in getSortData ) {                                                                                   // 3687\n      var sorter = getSortData[ key ];                                                                                 // 3688\n      this._sorters[ key ] = mungeSorter( sorter );                                                                    // 3689\n    }                                                                                                                  // 3690\n  };                                                                                                                   // 3691\n                                                                                                                       // 3692\n  /**                                                                                                                  // 3693\n   * @params {Array} items - of Isotope.Items                                                                          // 3694\n   * @private                                                                                                          // 3695\n   */                                                                                                                  // 3696\n  Isotope.prototype._updateItemsSortData = function( items ) {                                                         // 3697\n    // do not update if no items                                                                                       // 3698\n    var len = items && items.length;                                                                                   // 3699\n                                                                                                                       // 3700\n    for ( var i=0; len && i < len; i++ ) {                                                                             // 3701\n      var item = items[i];                                                                                             // 3702\n      item.updateSortData();                                                                                           // 3703\n    }                                                                                                                  // 3704\n  };                                                                                                                   // 3705\n                                                                                                                       // 3706\n  // ----- munge sorter ----- //                                                                                       // 3707\n                                                                                                                       // 3708\n  // encapsulate this, as we just need mungeSorter                                                                     // 3709\n  // other functions in here are just for munging                                                                      // 3710\n  var mungeSorter = ( function() {                                                                                     // 3711\n    // add a magic layer to sorters for convienent shorthands                                                          // 3712\n    // `.foo-bar` will use the text of .foo-bar querySelector                                                          // 3713\n    // `[foo-bar]` will use attribute                                                                                  // 3714\n    // you can also add parser                                                                                         // 3715\n    // `.foo-bar parseInt` will parse that as a number                                                                 // 3716\n    function mungeSorter( sorter ) {                                                                                   // 3717\n      // if not a string, return function or whatever it is                                                            // 3718\n      if ( typeof sorter !== 'string' ) {                                                                              // 3719\n        return sorter;                                                                                                 // 3720\n      }                                                                                                                // 3721\n      // parse the sorter string                                                                                       // 3722\n      var args = trim( sorter ).split(' ');                                                                            // 3723\n      var query = args[0];                                                                                             // 3724\n      // check if query looks like [an-attribute]                                                                      // 3725\n      var attrMatch = query.match( /^\\[(.+)\\]$/ );                                                                     // 3726\n      var attr = attrMatch && attrMatch[1];                                                                            // 3727\n      var getValue = getValueGetter( attr, query );                                                                    // 3728\n      // use second argument as a parser                                                                               // 3729\n      var parser = Isotope.sortDataParsers[ args[1] ];                                                                 // 3730\n      // parse the value, if there was a parser                                                                        // 3731\n      sorter = parser ? function( elem ) {                                                                             // 3732\n        return elem && parser( getValue( elem ) );                                                                     // 3733\n      } :                                                                                                              // 3734\n      // otherwise just return value                                                                                   // 3735\n      function( elem ) {                                                                                               // 3736\n        return elem && getValue( elem );                                                                               // 3737\n      };                                                                                                               // 3738\n                                                                                                                       // 3739\n      return sorter;                                                                                                   // 3740\n    }                                                                                                                  // 3741\n                                                                                                                       // 3742\n    // get an attribute getter, or get text of the querySelector                                                       // 3743\n    function getValueGetter( attr, query ) {                                                                           // 3744\n      var getValue;                                                                                                    // 3745\n      // if query looks like [foo-bar], get attribute                                                                  // 3746\n      if ( attr ) {                                                                                                    // 3747\n        getValue = function( elem ) {                                                                                  // 3748\n          return elem.getAttribute( attr );                                                                            // 3749\n        };                                                                                                             // 3750\n      } else {                                                                                                         // 3751\n        // otherwise, assume its a querySelector, and get its text                                                     // 3752\n        getValue = function( elem ) {                                                                                  // 3753\n          var child = elem.querySelector( query );                                                                     // 3754\n          return child && getText( child );                                                                            // 3755\n        };                                                                                                             // 3756\n      }                                                                                                                // 3757\n      return getValue;                                                                                                 // 3758\n    }                                                                                                                  // 3759\n                                                                                                                       // 3760\n    return mungeSorter;                                                                                                // 3761\n  })();                                                                                                                // 3762\n                                                                                                                       // 3763\n  // parsers used in getSortData shortcut strings                                                                      // 3764\n  Isotope.sortDataParsers = {                                                                                          // 3765\n    'parseInt': function( val ) {                                                                                      // 3766\n      return parseInt( val, 10 );                                                                                      // 3767\n    },                                                                                                                 // 3768\n    'parseFloat': function( val ) {                                                                                    // 3769\n      return parseFloat( val );                                                                                        // 3770\n    }                                                                                                                  // 3771\n  };                                                                                                                   // 3772\n                                                                                                                       // 3773\n  // ----- sort method ----- //                                                                                        // 3774\n                                                                                                                       // 3775\n  // sort filteredItem order                                                                                           // 3776\n  Isotope.prototype._sort = function() {                                                                               // 3777\n    var sortByOpt = this.options.sortBy;                                                                               // 3778\n    if ( !sortByOpt ) {                                                                                                // 3779\n      return;                                                                                                          // 3780\n    }                                                                                                                  // 3781\n    // concat all sortBy and sortHistory                                                                               // 3782\n    var sortBys = [].concat.apply( sortByOpt, this.sortHistory );                                                      // 3783\n    // sort magic                                                                                                      // 3784\n    var itemSorter = getItemSorter( sortBys, this.options.sortAscending );                                             // 3785\n    this.filteredItems.sort( itemSorter );                                                                             // 3786\n    // keep track of sortBy History                                                                                    // 3787\n    if ( sortByOpt !== this.sortHistory[0] ) {                                                                         // 3788\n      // add to front, oldest goes in last                                                                             // 3789\n      this.sortHistory.unshift( sortByOpt );                                                                           // 3790\n    }                                                                                                                  // 3791\n  };                                                                                                                   // 3792\n                                                                                                                       // 3793\n  // returns a function used for sorting                                                                               // 3794\n  function getItemSorter( sortBys, sortAsc ) {                                                                         // 3795\n    return function sorter( itemA, itemB ) {                                                                           // 3796\n      // cycle through all sortKeys                                                                                    // 3797\n      for ( var i = 0, len = sortBys.length; i < len; i++ ) {                                                          // 3798\n        var sortBy = sortBys[i];                                                                                       // 3799\n        var a = itemA.sortData[ sortBy ];                                                                              // 3800\n        var b = itemB.sortData[ sortBy ];                                                                              // 3801\n        if ( a > b || a < b ) {                                                                                        // 3802\n          // if sortAsc is an object, use the value given the sortBy key                                               // 3803\n          var isAscending = sortAsc[ sortBy ] !== undefined ? sortAsc[ sortBy ] : sortAsc;                             // 3804\n          var direction = isAscending ? 1 : -1;                                                                        // 3805\n          return ( a > b ? 1 : -1 ) * direction;                                                                       // 3806\n        }                                                                                                              // 3807\n      }                                                                                                                // 3808\n      return 0;                                                                                                        // 3809\n    };                                                                                                                 // 3810\n  }                                                                                                                    // 3811\n                                                                                                                       // 3812\n  // -------------------------- methods -------------------------- //                                                  // 3813\n                                                                                                                       // 3814\n  // get layout mode                                                                                                   // 3815\n  Isotope.prototype._mode = function() {                                                                               // 3816\n    var layoutMode = this.options.layoutMode;                                                                          // 3817\n    var mode = this.modes[ layoutMode ];                                                                               // 3818\n    if ( !mode ) {                                                                                                     // 3819\n      // TODO console.error                                                                                            // 3820\n      throw new Error( 'No layout mode: ' + layoutMode );                                                              // 3821\n    }                                                                                                                  // 3822\n    // HACK sync mode's options                                                                                        // 3823\n    // any options set after init for layout mode need to be synced                                                    // 3824\n    mode.options = this.options[ layoutMode ];                                                                         // 3825\n    return mode;                                                                                                       // 3826\n  };                                                                                                                   // 3827\n                                                                                                                       // 3828\n  Isotope.prototype._resetLayout = function() {                                                                        // 3829\n    // trigger original reset layout                                                                                   // 3830\n    Outlayer.prototype._resetLayout.call( this );                                                                      // 3831\n    this._mode()._resetLayout();                                                                                       // 3832\n  };                                                                                                                   // 3833\n                                                                                                                       // 3834\n  Isotope.prototype._getItemLayoutPosition = function( item  ) {                                                       // 3835\n    return this._mode()._getItemLayoutPosition( item );                                                                // 3836\n  };                                                                                                                   // 3837\n                                                                                                                       // 3838\n  Isotope.prototype._manageStamp = function( stamp ) {                                                                 // 3839\n    this._mode()._manageStamp( stamp );                                                                                // 3840\n  };                                                                                                                   // 3841\n                                                                                                                       // 3842\n  Isotope.prototype._getContainerSize = function() {                                                                   // 3843\n    return this._mode()._getContainerSize();                                                                           // 3844\n  };                                                                                                                   // 3845\n                                                                                                                       // 3846\n  Isotope.prototype.needsResizeLayout = function() {                                                                   // 3847\n    return this._mode().needsResizeLayout();                                                                           // 3848\n  };                                                                                                                   // 3849\n                                                                                                                       // 3850\n  // -------------------------- adding & removing -------------------------- //                                        // 3851\n                                                                                                                       // 3852\n  // HEADS UP overwrites default Outlayer appended                                                                     // 3853\n  Isotope.prototype.appended = function( elems ) {                                                                     // 3854\n    var items = this.addItems( elems );                                                                                // 3855\n    if ( !items.length ) {                                                                                             // 3856\n      return;                                                                                                          // 3857\n    }                                                                                                                  // 3858\n    var filteredItems = this._filterRevealAdded( items );                                                              // 3859\n    // add to filteredItems                                                                                            // 3860\n    this.filteredItems = this.filteredItems.concat( filteredItems );                                                   // 3861\n  };                                                                                                                   // 3862\n                                                                                                                       // 3863\n  // HEADS UP overwrites default Outlayer prepended                                                                    // 3864\n  Isotope.prototype.prepended = function( elems ) {                                                                    // 3865\n    var items = this._itemize( elems );                                                                                // 3866\n    if ( !items.length ) {                                                                                             // 3867\n      return;                                                                                                          // 3868\n    }                                                                                                                  // 3869\n    // add items to beginning of collection                                                                            // 3870\n    var previousItems = this.items.slice(0);                                                                           // 3871\n    this.items = items.concat( previousItems );                                                                        // 3872\n    // start new layout                                                                                                // 3873\n    this._resetLayout();                                                                                               // 3874\n    this._manageStamps();                                                                                              // 3875\n    // layout new stuff without transition                                                                             // 3876\n    var filteredItems = this._filterRevealAdded( items );                                                              // 3877\n    // layout previous items                                                                                           // 3878\n    this.layoutItems( previousItems );                                                                                 // 3879\n    // add to filteredItems                                                                                            // 3880\n    this.filteredItems = filteredItems.concat( this.filteredItems );                                                   // 3881\n  };                                                                                                                   // 3882\n                                                                                                                       // 3883\n  Isotope.prototype._filterRevealAdded = function( items ) {                                                           // 3884\n    var filteredItems = this._noTransition( function() {                                                               // 3885\n      return this._filter( items );                                                                                    // 3886\n    });                                                                                                                // 3887\n    // layout and reveal just the new items                                                                            // 3888\n    this.layoutItems( filteredItems, true );                                                                           // 3889\n    this.reveal( filteredItems );                                                                                      // 3890\n    return items;                                                                                                      // 3891\n  };                                                                                                                   // 3892\n                                                                                                                       // 3893\n  /**                                                                                                                  // 3894\n   * Filter, sort, and layout newly-appended item elements                                                             // 3895\n   * @param {Array or NodeList or Element} elems                                                                       // 3896\n   */                                                                                                                  // 3897\n  Isotope.prototype.insert = function( elems ) {                                                                       // 3898\n    var items = this.addItems( elems );                                                                                // 3899\n    if ( !items.length ) {                                                                                             // 3900\n      return;                                                                                                          // 3901\n    }                                                                                                                  // 3902\n    // append item elements                                                                                            // 3903\n    var i, item;                                                                                                       // 3904\n    var len = items.length;                                                                                            // 3905\n    for ( i=0; i < len; i++ ) {                                                                                        // 3906\n      item = items[i];                                                                                                 // 3907\n      this.element.appendChild( item.element );                                                                        // 3908\n    }                                                                                                                  // 3909\n    // filter new stuff                                                                                                // 3910\n    /*                                                                                                                 // 3911\n    // this way adds hides new filtered items with NO transition                                                       // 3912\n    // so user can't see if new hidden items have been inserted                                                        // 3913\n    var filteredInsertItems;                                                                                           // 3914\n    this._noTransition( function() {                                                                                   // 3915\n      filteredInsertItems = this._filter( items );                                                                     // 3916\n      // hide all new items                                                                                            // 3917\n      this.hide( filteredInsertItems );                                                                                // 3918\n    });                                                                                                                // 3919\n    // */                                                                                                              // 3920\n    // this way hides new filtered items with transition                                                               // 3921\n    // so user at least sees that something has been added                                                             // 3922\n    var filteredInsertItems = this._filter( items );                                                                   // 3923\n    // hide all newitems                                                                                               // 3924\n    this._noTransition( function() {                                                                                   // 3925\n      this.hide( filteredInsertItems );                                                                                // 3926\n    });                                                                                                                // 3927\n    // */                                                                                                              // 3928\n    // set flag                                                                                                        // 3929\n    for ( i=0; i < len; i++ ) {                                                                                        // 3930\n      items[i].isLayoutInstant = true;                                                                                 // 3931\n    }                                                                                                                  // 3932\n    this.arrange();                                                                                                    // 3933\n    // reset flag                                                                                                      // 3934\n    for ( i=0; i < len; i++ ) {                                                                                        // 3935\n      delete items[i].isLayoutInstant;                                                                                 // 3936\n    }                                                                                                                  // 3937\n    this.reveal( filteredInsertItems );                                                                                // 3938\n  };                                                                                                                   // 3939\n                                                                                                                       // 3940\n  var _remove = Isotope.prototype.remove;                                                                              // 3941\n  Isotope.prototype.remove = function( elems ) {                                                                       // 3942\n    elems = makeArray( elems );                                                                                        // 3943\n    var removeItems = this.getItems( elems );                                                                          // 3944\n    // do regular thing                                                                                                // 3945\n    _remove.call( this, elems );                                                                                       // 3946\n    // bail if no items to remove                                                                                      // 3947\n    if ( !removeItems || !removeItems.length ) {                                                                       // 3948\n      return;                                                                                                          // 3949\n    }                                                                                                                  // 3950\n    // remove elems from filteredItems                                                                                 // 3951\n    for ( var i=0, len = removeItems.length; i < len; i++ ) {                                                          // 3952\n      var item = removeItems[i];                                                                                       // 3953\n      // remove item from collection                                                                                   // 3954\n      removeFrom( item, this.filteredItems );                                                                          // 3955\n    }                                                                                                                  // 3956\n  };                                                                                                                   // 3957\n                                                                                                                       // 3958\n  Isotope.prototype.shuffle = function() {                                                                             // 3959\n    // update random sortData                                                                                          // 3960\n    for ( var i=0, len = this.items.length; i < len; i++ ) {                                                           // 3961\n      var item = this.items[i];                                                                                        // 3962\n      item.sortData.random = Math.random();                                                                            // 3963\n    }                                                                                                                  // 3964\n    this.options.sortBy = 'random';                                                                                    // 3965\n    this._sort();                                                                                                      // 3966\n    this._layout();                                                                                                    // 3967\n  };                                                                                                                   // 3968\n                                                                                                                       // 3969\n  /**                                                                                                                  // 3970\n   * trigger fn without transition                                                                                     // 3971\n   * kind of hacky to have this in the first place                                                                     // 3972\n   * @param {Function} fn                                                                                              // 3973\n   * @returns ret                                                                                                      // 3974\n   * @private                                                                                                          // 3975\n   */                                                                                                                  // 3976\n  Isotope.prototype._noTransition = function( fn ) {                                                                   // 3977\n    // save transitionDuration before disabling                                                                        // 3978\n    var transitionDuration = this.options.transitionDuration;                                                          // 3979\n    // disable transition                                                                                              // 3980\n    this.options.transitionDuration = 0;                                                                               // 3981\n    // do it                                                                                                           // 3982\n    var returnValue = fn.call( this );                                                                                 // 3983\n    // re-enable transition for reveal                                                                                 // 3984\n    this.options.transitionDuration = transitionDuration;                                                              // 3985\n    return returnValue;                                                                                                // 3986\n  };                                                                                                                   // 3987\n                                                                                                                       // 3988\n  // ----- helper methods ----- //                                                                                     // 3989\n                                                                                                                       // 3990\n  /**                                                                                                                  // 3991\n   * getter method for getting filtered item elements                                                                  // 3992\n   * @returns {Array} elems - collection of item elements                                                              // 3993\n   */                                                                                                                  // 3994\n  Isotope.prototype.getFilteredItemElements = function() {                                                             // 3995\n    var elems = [];                                                                                                    // 3996\n    for ( var i=0, len = this.filteredItems.length; i < len; i++ ) {                                                   // 3997\n      elems.push( this.filteredItems[i].element );                                                                     // 3998\n    }                                                                                                                  // 3999\n    return elems;                                                                                                      // 4000\n  };                                                                                                                   // 4001\n                                                                                                                       // 4002\n  // -----  ----- //                                                                                                   // 4003\n                                                                                                                       // 4004\n  return Isotope;                                                                                                      // 4005\n}                                                                                                                      // 4006\n                                                                                                                       // 4007\n// -------------------------- transport -------------------------- //                                                  // 4008\n                                                                                                                       // 4009\nif ( typeof define === 'function' && define.amd ) {                                                                    // 4010\n  // AMD                                                                                                               // 4011\n  define( [                                                                                                            // 4012\n      'outlayer/outlayer',                                                                                             // 4013\n      'get-size/get-size',                                                                                             // 4014\n      'matches-selector/matches-selector',                                                                             // 4015\n      'isotope/js/item',                                                                                               // 4016\n      'isotope/js/layout-mode',                                                                                        // 4017\n      // include default layout modes                                                                                  // 4018\n      'isotope/js/layout-modes/masonry',                                                                               // 4019\n      'isotope/js/layout-modes/fit-rows',                                                                              // 4020\n      'isotope/js/layout-modes/vertical'                                                                               // 4021\n    ],                                                                                                                 // 4022\n    isotopeDefinition );                                                                                               // 4023\n} else if ( typeof exports === 'object' ) {                                                                            // 4024\n  // CommonJS                                                                                                          // 4025\n  module.exports = isotopeDefinition(                                                                                  // 4026\n    require('outlayer'),                                                                                               // 4027\n    require('get-size'),                                                                                               // 4028\n    require('desandro-matches-selector'),                                                                              // 4029\n    require('./item'),                                                                                                 // 4030\n    require('./layout-mode'),                                                                                          // 4031\n    // include default layout modes                                                                                    // 4032\n    require('./layout-modes/masonry'),                                                                                 // 4033\n    require('./layout-modes/fit-rows'),                                                                                // 4034\n    require('./layout-modes/vertical')                                                                                 // 4035\n  );                                                                                                                   // 4036\n} else {                                                                                                               // 4037\n  // browser global                                                                                                    // 4038\n  window.Isotope = isotopeDefinition(                                                                                  // 4039\n    window.Outlayer,                                                                                                   // 4040\n    window.getSize,                                                                                                    // 4041\n    window.matchesSelector,                                                                                            // 4042\n    window.Isotope.Item,                                                                                               // 4043\n    window.Isotope.LayoutMode                                                                                          // 4044\n  );                                                                                                                   // 4045\n}                                                                                                                      // 4046\n                                                                                                                       // 4047\n})( window );                                                                                                          // 4048\n                                                                                                                       // 4049\n                                                                                                                       // 4050\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/isotope:isotope/meteor/export.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*global Isotope:true*/  // Meteor.js creates a file-scope global for exporting. This comment prevents a potential JSHint warning.\nIsotope = window.Isotope;                                                                                              // 2\ndelete window.Isotope;                                                                                                 // 3\n                                                                                                                       // 4\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['isotope:isotope'] = {}, {\n  Isotope: Isotope\n});\n\n})();\n","servePath":"/packages/isotope_isotope.js"}]