[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar FS = Package['cfs:base-package'].FS;\nvar DDP = Package['ddp-client'].DDP;\nvar DDPServer = Package['ddp-server'].DDPServer;\nvar PowerQueue = Package['cfs:power-queue'].PowerQueue;\nvar MongoInternals = Package.mongo.MongoInternals;\nvar Mongo = Package.mongo.Mongo;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                             //\n// packages/cfs_worker/packages/cfs_worker.js                                                                  //\n//                                                                                                             //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                               //\n(function () {\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                      //\n// packages/cfs:worker/fileWorker.js                                                                    //\n//                                                                                                      //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                        //\n//// TODO: Use power queue to handle throttling etc.                                                    // 1\n//// Use observe to monitor changes and have it create tasks for the power queue                        // 2\n//// to perform.                                                                                        // 3\n                                                                                                        // 4\n/**                                                                                                     // 5\n * @public                                                                                              // 6\n * @type Object                                                                                         // 7\n */                                                                                                     // 8\nFS.FileWorker = {};                                                                                     // 9\n                                                                                                        // 10\n/**                                                                                                     // 11\n * @method FS.FileWorker.observe                                                                        // 12\n * @public                                                                                              // 13\n * @param {FS.Collection} fsCollection                                                                  // 14\n * @returns {undefined}                                                                                 // 15\n *                                                                                                      // 16\n * Sets up observes on the fsCollection to store file copies and delete                                 // 17\n * temp files at the appropriate times.                                                                 // 18\n */                                                                                                     // 19\nFS.FileWorker.observe = function(fsCollection) {                                                        // 20\n                                                                                                        // 21\n  // Initiate observe for finding newly uploaded/added files that need to be stored                     // 22\n  // per store.                                                                                         // 23\n  FS.Utility.each(fsCollection.options.stores, function(store) {                                        // 24\n    var storeName = store.name;                                                                         // 25\n    fsCollection.files.find(getReadyQuery(storeName), {                                                 // 26\n      fields: {                                                                                         // 27\n        copies: 0                                                                                       // 28\n      }                                                                                                 // 29\n    }).observe({                                                                                        // 30\n      added: function(fsFile) {                                                                         // 31\n        // added will catch fresh files                                                                 // 32\n        FS.debug && console.log(\"FileWorker ADDED - calling saveCopy\", storeName, \"for\", fsFile._id);   // 33\n        saveCopy(fsFile, storeName);                                                                    // 34\n      },                                                                                                // 35\n      changed: function(fsFile) {                                                                       // 36\n        // changed will catch failures and retry them                                                   // 37\n        FS.debug && console.log(\"FileWorker CHANGED - calling saveCopy\", storeName, \"for\", fsFile._id); // 38\n        saveCopy(fsFile, storeName);                                                                    // 39\n      }                                                                                                 // 40\n    });                                                                                                 // 41\n  });                                                                                                   // 42\n                                                                                                        // 43\n  // Initiate observe for finding files that have been stored so we can delete                          // 44\n  // any temp files                                                                                     // 45\n  fsCollection.files.find(getDoneQuery(fsCollection.options.stores)).observe({                          // 46\n    added: function(fsFile) {                                                                           // 47\n      FS.debug && console.log(\"FileWorker ADDED - calling deleteChunks for\", fsFile._id);               // 48\n      FS.TempStore.removeFile(fsFile);                                                                  // 49\n    }                                                                                                   // 50\n  });                                                                                                   // 51\n                                                                                                        // 52\n  // Initiate observe for catching files that have been removed and                                     // 53\n  // removing the data from all stores as well                                                          // 54\n  fsCollection.files.find().observe({                                                                   // 55\n    removed: function(fsFile) {                                                                         // 56\n      FS.debug && console.log('FileWorker REMOVED - removing all stored data for', fsFile._id);         // 57\n      //remove from temp store                                                                          // 58\n      FS.TempStore.removeFile(fsFile);                                                                  // 59\n      //delete from all stores                                                                          // 60\n      FS.Utility.each(fsCollection.options.stores, function(storage) {                                  // 61\n        storage.adapter.remove(fsFile);                                                                 // 62\n      });                                                                                               // 63\n    }                                                                                                   // 64\n  });                                                                                                   // 65\n};                                                                                                      // 66\n                                                                                                        // 67\n/**                                                                                                     // 68\n *  @method getReadyQuery                                                                               // 69\n *  @private                                                                                            // 70\n *  @param {string} storeName - The name of the store to observe                                        // 71\n *                                                                                                      // 72\n *  Returns a selector that will be used to identify files that                                         // 73\n *  have been uploaded but have not yet been stored to the                                              // 74\n *  specified store.                                                                                    // 75\n *                                                                                                      // 76\n *  {                                                                                                   // 77\n *    uploadedAt: {$exists: true},                                                                      // 78\n *    'copies.storeName`: null,                                                                         // 79\n *    'failures.copies.storeName.doneTrying': {$ne: true}                                               // 80\n *  }                                                                                                   // 81\n */                                                                                                     // 82\nfunction getReadyQuery(storeName) {                                                                     // 83\n  var selector = {uploadedAt: {$exists: true}};                                                         // 84\n  selector['copies.' + storeName] = null;                                                               // 85\n  selector['failures.copies.' + storeName + '.doneTrying'] = {$ne: true};                               // 86\n  return selector;                                                                                      // 87\n}                                                                                                       // 88\n                                                                                                        // 89\n/**                                                                                                     // 90\n *  @method getDoneQuery                                                                                // 91\n *  @private                                                                                            // 92\n *  @param {Array} stores - The stores array from the FS.Collection options                             // 93\n *                                                                                                      // 94\n *  Returns a selector that will be used to identify files where all                                    // 95\n *  stores have successfully save or have failed the                                                    // 96\n *  max number of times but still have chunks. The resulting selector                                   // 97\n *  should be something like this:                                                                      // 98\n *                                                                                                      // 99\n *  {                                                                                                   // 100\n *    $and: [                                                                                           // 101\n *      {chunks: {$exists: true}},                                                                      // 102\n *      {                                                                                               // 103\n *        $or: [                                                                                        // 104\n *          {                                                                                           // 105\n *            $and: [                                                                                   // 106\n *              {                                                                                       // 107\n *                'copies.storeName': {$ne: null}                                                       // 108\n *              },                                                                                      // 109\n *              {                                                                                       // 110\n *                'copies.storeName': {$ne: false}                                                      // 111\n *              }                                                                                       // 112\n *            ]                                                                                         // 113\n *          },                                                                                          // 114\n *          {                                                                                           // 115\n *            'failures.copies.storeName.doneTrying': true                                              // 116\n *          }                                                                                           // 117\n *        ]                                                                                             // 118\n *      },                                                                                              // 119\n *      REPEATED FOR EACH STORE                                                                         // 120\n *    ]                                                                                                 // 121\n *  }                                                                                                   // 122\n *                                                                                                      // 123\n */                                                                                                     // 124\nfunction getDoneQuery(stores) {                                                                         // 125\n  var selector = {                                                                                      // 126\n    $and: []                                                                                            // 127\n  };                                                                                                    // 128\n                                                                                                        // 129\n  // Add conditions for all defined stores                                                              // 130\n  FS.Utility.each(stores, function(store) {                                                             // 131\n    var storeName = store.name;                                                                         // 132\n    var copyCond = {$or: [{$and: []}]};                                                                 // 133\n    var tempCond = {};                                                                                  // 134\n    tempCond[\"copies.\" + storeName] = {$ne: null};                                                      // 135\n    copyCond.$or[0].$and.push(tempCond);                                                                // 136\n    tempCond = {};                                                                                      // 137\n    tempCond[\"copies.\" + storeName] = {$ne: false};                                                     // 138\n    copyCond.$or[0].$and.push(tempCond);                                                                // 139\n    tempCond = {};                                                                                      // 140\n    tempCond['failures.copies.' + storeName + '.doneTrying'] = true;                                    // 141\n    copyCond.$or.push(tempCond);                                                                        // 142\n    selector.$and.push(copyCond);                                                                       // 143\n  })                                                                                                    // 144\n                                                                                                        // 145\n  return selector;                                                                                      // 146\n}                                                                                                       // 147\n                                                                                                        // 148\n/**                                                                                                     // 149\n * @method saveCopy                                                                                     // 150\n * @private                                                                                             // 151\n * @param {FS.File} fsFile                                                                              // 152\n * @param {string} storeName                                                                            // 153\n * @param {Object} options                                                                              // 154\n * @param {Boolean} [options.overwrite=false] - Force save to the specified store?                      // 155\n * @returns {undefined}                                                                                 // 156\n *                                                                                                      // 157\n * Saves to the specified store. If the                                                                 // 158\n * `overwrite` option is `true`, will save to the store even if we already                              // 159\n * have, potentially overwriting any previously saved data. Synchronous.                                // 160\n */                                                                                                     // 161\nfunction saveCopy(fsFile, storeName, options) {                                                         // 162\n  options = options || {};                                                                              // 163\n                                                                                                        // 164\n  var storage = FS.StorageAdapter(storeName);                                                           // 165\n  if (!storage) {                                                                                       // 166\n    throw new Error('No store named \"' + storeName + '\" exists');                                       // 167\n  }                                                                                                     // 168\n                                                                                                        // 169\n  FS.debug && console.log('saving to store ' + storeName);                                              // 170\n                                                                                                        // 171\n  var writeStream = storage.adapter.createWriteStream(fsFile);                                          // 172\n  var readStream = FS.TempStore.createReadStream(fsFile);                                               // 173\n                                                                                                        // 174\n  // Pipe the temp data into the storage adapter                                                        // 175\n  readStream.pipe(writeStream);                                                                         // 176\n}                                                                                                       // 177\n                                                                                                        // 178\n//////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['cfs:worker'] = {};\n\n})();\n","servePath":"/packages/cfs_worker.js"}]