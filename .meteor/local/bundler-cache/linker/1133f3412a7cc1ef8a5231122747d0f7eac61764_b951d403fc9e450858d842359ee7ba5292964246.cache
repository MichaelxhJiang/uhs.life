[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar Random = Package.random.Random;\n\n(function(){\n\n//////////////////////////////////////////////////////////////////////////////////////\n//                                                                                  //\n// packages/localstorage/localstorage.js                                            //\n//                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////\n                                                                                    //\n// Meteor._localStorage is not an ideal name, but we can change it later.           // 1\n                                                                                    // 2\n// Let's test to make sure that localStorage actually works. For example, in        // 3\n// Safari with private browsing on, window.localStorage exists but actually         // 4\n// trying to use it throws.                                                         // 5\n// Accessing window.localStorage can also immediately throw an error in IE (#1291).\n                                                                                    // 7\nvar hasOwn = Object.prototype.hasOwnProperty;                                       // 8\nvar key = '_localstorage_test_' + Random.id();                                      // 9\nvar retrieved;                                                                      // 10\nvar storage;                                                                        // 11\n                                                                                    // 12\ntry {                                                                               // 13\n  storage = global.localStorage;                                                    // 14\n                                                                                    // 15\n  if (storage) {                                                                    // 16\n    storage.setItem(key, key);                                                      // 17\n    retrieved = storage.getItem(key);                                               // 18\n    storage.removeItem(key);                                                        // 19\n  }                                                                                 // 20\n} catch (ignored) {}                                                                // 21\n                                                                                    // 22\nif (key === retrieved) {                                                            // 23\n  if (Meteor.isServer) {                                                            // 24\n    Meteor._localStorage = storage;                                                 // 25\n  } else {                                                                          // 26\n    // Some browsers (e.g. IE11) don't properly handle attempts to change           // 27\n    // window.localStorage methods. By using proxy methods to expose                // 28\n    // window.localStorage functionality, developers can change the                 // 29\n    // behavior of Meteor._localStorage methods without breaking                    // 30\n    // window.localStorage.                                                         // 31\n    [\"getItem\",                                                                     // 32\n     \"setItem\",                                                                     // 33\n     \"removeItem\",                                                                  // 34\n    ].forEach(function (name) {                                                     // 35\n      this[name] = function () {                                                    // 36\n        return storage[name].apply(storage, arguments);                             // 37\n      };                                                                            // 38\n    }, Meteor._localStorage = {});                                                  // 39\n  }                                                                                 // 40\n}                                                                                   // 41\n                                                                                    // 42\nif (! Meteor._localStorage) {                                                       // 43\n  if (Meteor.isClient) {                                                            // 44\n    Meteor._debug(                                                                  // 45\n      \"You are running a browser with no localStorage or userData \"                 // 46\n        + \"support. Logging in from one tab will not cause another \"                // 47\n        + \"tab to be logged in.\");                                                  // 48\n  }                                                                                 // 49\n                                                                                    // 50\n  Meteor._localStorage = Object.create({                                            // 51\n    setItem: function (key, val) {                                                  // 52\n      this[key] = val;                                                              // 53\n    },                                                                              // 54\n                                                                                    // 55\n    removeItem: function (key) {                                                    // 56\n      delete this[key];                                                             // 57\n    },                                                                              // 58\n                                                                                    // 59\n    getItem: function (key) {                                                       // 60\n      return hasOwn.call(this, key) ? this[key] : null;                             // 61\n    }                                                                               // 62\n  });                                                                               // 63\n}                                                                                   // 64\n                                                                                    // 65\n//////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage.localstorage = {};\n\n})();\n","servePath":"/packages/localstorage.js"}]