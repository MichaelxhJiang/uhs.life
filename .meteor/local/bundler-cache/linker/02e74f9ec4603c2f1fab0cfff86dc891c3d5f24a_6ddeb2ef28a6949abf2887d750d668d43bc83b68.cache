[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar WebApp = Package.webapp.WebApp;\nvar WebAppInternals = Package.webapp.WebAppInternals;\nvar main = Package.webapp.main;\nvar _ = Package.underscore._;\nvar EJSON = Package.ejson.EJSON;\nvar Random = Package.random.Random;\nvar HTTP = Package['cfs:http-methods'].HTTP;\n\n/* Package-scope variables */\nvar _publishHTTP;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cfs_http-publish/packages/cfs_http-publish.js                                                             //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/cfs:http-publish/http.publish.server.api.js                                                            //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n/*                                                                                                                 // 1\n                                                                                                                   // 2\nGET /note                                                                                                          // 3\nGET /note/:id                                                                                                      // 4\nPOST /note                                                                                                         // 5\nPUT /note/:id                                                                                                      // 6\nDELETE /note/:id                                                                                                   // 7\n                                                                                                                   // 8\n*/                                                                                                                 // 9\n                                                                                                                   // 10\n// Could be cool if we could serve some api doc or even an api script                                              // 11\n// user could do <script href=\"/note/api?token=1&user=2\"></script> and be served                                   // 12\n// a client-side javascript api?                                                                                   // 13\n// Eg.                                                                                                             // 14\n// HTTP.api.note.create();                                                                                         // 15\n// HTTP.api.login(username, password);                                                                             // 16\n// HTTP.api.logout                                                                                                 // 17\n                                                                                                                   // 18\n                                                                                                                   // 19\n_publishHTTP = {};                                                                                                 // 20\n                                                                                                                   // 21\n// Cache the names of all http methods we've published                                                             // 22\n_publishHTTP.currentlyPublished = [];                                                                              // 23\n                                                                                                                   // 24\nvar defaultAPIPrefix = '/api/';                                                                                    // 25\n                                                                                                                   // 26\n/**                                                                                                                // 27\n * @method _publishHTTP.getPublishScope                                                                            // 28\n * @private                                                                                                        // 29\n * @param {Object} scope                                                                                           // 30\n * @returns {httpPublishGetPublishScope.publishScope}                                                              // 31\n *                                                                                                                 // 32\n * Creates a nice scope for the publish method                                                                     // 33\n */                                                                                                                // 34\n_publishHTTP.getPublishScope = function httpPublishGetPublishScope(scope) {                                        // 35\n  var publishScope = {};                                                                                           // 36\n  publishScope.userId = scope.userId;                                                                              // 37\n  publishScope.params = scope.params;                                                                              // 38\n  publishScope.query = scope.query;                                                                                // 39\n  // TODO: Additional scoping                                                                                      // 40\n  // publishScope.added                                                                                            // 41\n  // publishScope.ready                                                                                            // 42\n  return publishScope;                                                                                             // 43\n};                                                                                                                 // 44\n                                                                                                                   // 45\n_publishHTTP.formatHandlers = {};                                                                                  // 46\n                                                                                                                   // 47\n/**                                                                                                                // 48\n * @method _publishHTTP.formatHandlers.json                                                                        // 49\n * @private                                                                                                        // 50\n * @param {Object} result - The result object                                                                      // 51\n * @returns {String} JSON                                                                                          // 52\n *                                                                                                                 // 53\n * Formats the output into JSON and sets the appropriate content type on `this`                                    // 54\n */                                                                                                                // 55\n_publishHTTP.formatHandlers.json = function httpPublishJSONFormatHandler(result) {                                 // 56\n  // Set the method scope content type to json                                                                     // 57\n  this.setContentType('application/json');                                                                         // 58\n  // Return EJSON string                                                                                           // 59\n  return EJSON.stringify(result);                                                                                  // 60\n};                                                                                                                 // 61\n                                                                                                                   // 62\n/**                                                                                                                // 63\n * @method _publishHTTP.formatResult                                                                               // 64\n * @private                                                                                                        // 65\n * @param {Object} result - The result object                                                                      // 66\n * @param {Object} scope                                                                                           // 67\n * @param {String} [defaultFormat='json'] - Default format to use if format is not in query string.                // 68\n * @returns {Any} The formatted result                                                                             // 69\n *                                                                                                                 // 70\n * Formats the result into the format selected by querystring eg. \"&format=json\"                                   // 71\n */                                                                                                                // 72\n_publishHTTP.formatResult = function httpPublishFormatResult(result, scope, defaultFormat) {                       // 73\n                                                                                                                   // 74\n  // Get the format in lower case and default to json                                                              // 75\n  var format = scope && scope.query && scope.query.format || defaultFormat || 'json';                              // 76\n                                                                                                                   // 77\n  // Set the format handler found                                                                                  // 78\n  var formatHandlerFound = !!(typeof _publishHTTP.formatHandlers[format] === 'function');                          // 79\n                                                                                                                   // 80\n  // Set the format handler and fallback to default json if handler not found                                      // 81\n  var formatHandler = _publishHTTP.formatHandlers[(formatHandlerFound) ? format : 'json'];                         // 82\n                                                                                                                   // 83\n  // Check if format handler is a function                                                                         // 84\n  if (typeof formatHandler !== 'function') {                                                                       // 85\n    // We break things the user could have overwritten the default json handler                                    // 86\n    throw new Error('The default json format handler not found');                                                  // 87\n  }                                                                                                                // 88\n                                                                                                                   // 89\n  if (!formatHandlerFound) {                                                                                       // 90\n    scope.setStatusCode(500);                                                                                      // 91\n    return '{\"error\":\"Format handler for: `' + format + '` not found\"}';                                           // 92\n  }                                                                                                                // 93\n                                                                                                                   // 94\n  // Execute the format handler                                                                                    // 95\n  try {                                                                                                            // 96\n    return formatHandler.apply(scope, [result]);                                                                   // 97\n  } catch(err) {                                                                                                   // 98\n    scope.setStatusCode(500);                                                                                      // 99\n    return '{\"error\":\"Format handler for: `' + format + '` Error: ' + err.message + '\"}';                          // 100\n  }                                                                                                                // 101\n};                                                                                                                 // 102\n                                                                                                                   // 103\n/**                                                                                                                // 104\n * @method _publishHTTP.error                                                                                      // 105\n * @private                                                                                                        // 106\n * @param {String} statusCode - The status code                                                                    // 107\n * @param {String} message - The message                                                                           // 108\n * @param {Object} scope                                                                                           // 109\n * @returns {Any} The formatted result                                                                             // 110\n *                                                                                                                 // 111\n * Responds with error message in the expected format                                                              // 112\n */                                                                                                                // 113\n_publishHTTP.error = function httpPublishError(statusCode, message, scope) {                                       // 114\n  var result = _publishHTTP.formatResult(message, scope);                                                          // 115\n  scope.setStatusCode(statusCode);                                                                                 // 116\n  return result;                                                                                                   // 117\n};                                                                                                                 // 118\n                                                                                                                   // 119\n/**                                                                                                                // 120\n * @method _publishHTTP.getMethodHandler                                                                           // 121\n * @private                                                                                                        // 122\n * @param {Meteor.Collection} collection - The Meteor.Collection instance                                          // 123\n * @param {String} methodName - The method name                                                                    // 124\n * @returns {Function} The server method                                                                           // 125\n *                                                                                                                 // 126\n * Returns the DDP connection handler, already setup and secured                                                   // 127\n */                                                                                                                // 128\n_publishHTTP.getMethodHandler = function httpPublishGetMethodHandler(collection, methodName) {                     // 129\n  if (collection instanceof Meteor.Collection) {                                                                   // 130\n    if (collection._connection && collection._connection.method_handlers) {                                        // 131\n      return collection._connection.method_handlers[collection._prefix + methodName];                              // 132\n    } else {                                                                                                       // 133\n      throw new Error('HTTP publish does not work with current version of Meteor');                                // 134\n    }                                                                                                              // 135\n  } else {                                                                                                         // 136\n    throw new Error('_publishHTTP.getMethodHandler expected a collection');                                        // 137\n  }                                                                                                                // 138\n};                                                                                                                 // 139\n                                                                                                                   // 140\n/**                                                                                                                // 141\n * @method _publishHTTP.unpublishList                                                                              // 142\n * @private                                                                                                        // 143\n * @param {Array} names - List of method names to unpublish                                                        // 144\n * @returns {undefined}                                                                                            // 145\n *                                                                                                                 // 146\n * Unpublishes all HTTP methods that have names matching the given list.                                           // 147\n */                                                                                                                // 148\n_publishHTTP.unpublishList = function httpPublishUnpublishList(names) {                                            // 149\n  if (!names.length) {                                                                                             // 150\n    return;                                                                                                        // 151\n  }                                                                                                                // 152\n                                                                                                                   // 153\n  // Carry object for methods                                                                                      // 154\n  var methods = {};                                                                                                // 155\n                                                                                                                   // 156\n  // Unpublish the rest points by setting them to false                                                            // 157\n  for (var i = 0, ln = names.length; i < ln; i++) {                                                                // 158\n    methods[names[i]] = false;                                                                                     // 159\n  }                                                                                                                // 160\n                                                                                                                   // 161\n  HTTP.methods(methods);                                                                                           // 162\n                                                                                                                   // 163\n  // Remove the names from our list of currently published methods                                                 // 164\n  _publishHTTP.currentlyPublished = _.difference(_publishHTTP.currentlyPublished, names);                          // 165\n};                                                                                                                 // 166\n                                                                                                                   // 167\n/**                                                                                                                // 168\n * @method _publishHTTP.unpublish                                                                                  // 169\n * @private                                                                                                        // 170\n * @param {String|Meteor.Collection} [name] - The method name or collection                                        // 171\n * @returns {undefined}                                                                                            // 172\n *                                                                                                                 // 173\n * Unpublishes all HTTP methods that were published with the given name or                                         // 174\n * for the given collection. Call with no arguments to unpublish all.                                              // 175\n */                                                                                                                // 176\n_publishHTTP.unpublish = function httpPublishUnpublish(/* name or collection, options */) {                        // 177\n                                                                                                                   // 178\n  // Determine what method name we're unpublishing                                                                 // 179\n  var name = (arguments[0] instanceof Meteor.Collection) ?                                                         // 180\n          defaultAPIPrefix + arguments[0]._name : arguments[0];                                                    // 181\n                                                                                                                   // 182\n  // Unpublish name and name/id                                                                                    // 183\n  if (name && name.length) {                                                                                       // 184\n    _publishHTTP.unpublishList([name, name + '/:id']);                                                             // 185\n  }                                                                                                                // 186\n                                                                                                                   // 187\n  // If no args, unpublish all                                                                                     // 188\n  else {                                                                                                           // 189\n    _publishHTTP.unpublishList(_publishHTTP.currentlyPublished);                                                   // 190\n  }                                                                                                                // 191\n                                                                                                                   // 192\n};                                                                                                                 // 193\n                                                                                                                   // 194\n/**                                                                                                                // 195\n * @method HTTP.publishFormats                                                                                     // 196\n * @public                                                                                                         // 197\n * @param {Object} newHandlers                                                                                     // 198\n * @returns {undefined}                                                                                            // 199\n *                                                                                                                 // 200\n * Add publish formats. Example:                                                                                   // 201\n ```js                                                                                                             // 202\n HTTP.publishFormats({                                                                                             // 203\n                                                                                                                   // 204\n    json: function(inputObject) {                                                                                  // 205\n      // Set the method scope content type to json                                                                 // 206\n      this.setContentType('application/json');                                                                     // 207\n      // Return EJSON string                                                                                       // 208\n      return EJSON.stringify(inputObject);                                                                         // 209\n    }                                                                                                              // 210\n                                                                                                                   // 211\n  });                                                                                                              // 212\n ```                                                                                                               // 213\n */                                                                                                                // 214\nHTTP.publishFormats = function httpPublishFormats(newHandlers) {                                                   // 215\n  _.extend(_publishHTTP.formatHandlers, newHandlers);                                                              // 216\n};                                                                                                                 // 217\n                                                                                                                   // 218\n/**                                                                                                                // 219\n * @method HTTP.publish                                                                                            // 220\n * @public                                                                                                         // 221\n * @param {Object} options                                                                                         // 222\n * @param {String} [name] - Restpoint name (url prefix). Optional if `collection` is passed. Will mount on `/api/collectionName` by default.\n * @param {Meteor.Collection} [collection] - Meteor.Collection instance. Required for all restpoints except collectionGet\n * @param {String} [options.defaultFormat='json'] - Format to use for responses when `format` is not found in the query string.\n * @param {String} [options.collectionGet=true] - Add GET restpoint for collection? Requires a publish function.   // 226\n * @param {String} [options.collectionPost=true] - Add POST restpoint for adding documents to the collection?      // 227\n * @param {String} [options.documentGet=true] - Add GET restpoint for documents in collection? Requires a publish function.\n * @param {String} [options.documentPut=true] - Add PUT restpoint for updating a document in the collection?       // 229\n * @param {String} [options.documentDelete=true] - Add DELETE restpoint for deleting a document in the collection? // 230\n * @param {Function} [publishFunc] - A publish function. Required to mount GET restpoints.                         // 231\n * @returns {undefined}                                                                                            // 232\n * @todo this should use options argument instead of optional args                                                 // 233\n *                                                                                                                 // 234\n * Publishes one or more restpoints, mounted on \"name\" (\"/api/collectionName/\"                                     // 235\n * by default). The GET restpoints are subscribed to the document set (cursor)                                     // 236\n * returned by the publish function you supply. The other restpoints forward                                       // 237\n * requests to Meteor's built-in DDP methods (insert, update, remove), meaning                                     // 238\n * that full allow/deny security is automatic.                                                                     // 239\n *                                                                                                                 // 240\n * __Usage:__                                                                                                      // 241\n *                                                                                                                 // 242\n * Publish only:                                                                                                   // 243\n *                                                                                                                 // 244\n * HTTP.publish({name: 'mypublish'}, publishFunc);                                                                 // 245\n *                                                                                                                 // 246\n * Publish and mount crud rest point for collection /api/myCollection:                                             // 247\n *                                                                                                                 // 248\n * HTTP.publish({collection: myCollection}, publishFunc);                                                          // 249\n *                                                                                                                 // 250\n * Mount CUD rest point for collection and documents without GET:                                                  // 251\n *                                                                                                                 // 252\n * HTTP.publish({collection: myCollection});                                                                       // 253\n *                                                                                                                 // 254\n */                                                                                                                // 255\nHTTP.publish = function httpPublish(options, publishFunc) {                                                        // 256\n  options = _.extend({                                                                                             // 257\n    name: null,                                                                                                    // 258\n    auth: null,                                                                                                    // 259\n    collection: null,                                                                                              // 260\n    defaultFormat: null,                                                                                           // 261\n    collectionGet: true,                                                                                           // 262\n    collectionPost: true,                                                                                          // 263\n    documentGet: true,                                                                                             // 264\n    documentPut: true,                                                                                             // 265\n    documentDelete: true                                                                                           // 266\n  }, options || {});                                                                                               // 267\n                                                                                                                   // 268\n  var collection = options.collection;                                                                             // 269\n                                                                                                                   // 270\n  // Use provided name or build one                                                                                // 271\n  var name = (typeof options.name === \"string\") ? options.name : defaultAPIPrefix + collection._name;              // 272\n                                                                                                                   // 273\n  // Make sure we have a name                                                                                      // 274\n  if (typeof name !== \"string\") {                                                                                  // 275\n    throw new Error('HTTP.publish expected a collection or name option');                                          // 276\n  }                                                                                                                // 277\n                                                                                                                   // 278\n  var defaultFormat = options.defaultFormat;                                                                       // 279\n                                                                                                                   // 280\n  // Rig the methods for the CRUD interface                                                                        // 281\n  var methods = {};                                                                                                // 282\n                                                                                                                   // 283\n  // console.log('HTTP restpoint: ' + name);                                                                       // 284\n                                                                                                                   // 285\n  // list and create                                                                                               // 286\n  methods[name] = {};                                                                                              // 287\n                                                                                                                   // 288\n  if (options.collectionGet && publishFunc) {                                                                      // 289\n    // Return the published documents                                                                              // 290\n    methods[name].get = function(data) {                                                                           // 291\n      // Format the scope for the publish method                                                                   // 292\n      var publishScope = _publishHTTP.getPublishScope(this);                                                       // 293\n      // Get the publish cursor                                                                                    // 294\n      var cursor = publishFunc.apply(publishScope, [data]);                                                        // 295\n                                                                                                                   // 296\n      // Check if its a cursor                                                                                     // 297\n      if (cursor && cursor.fetch) {                                                                                // 298\n        // Fetch the data fron cursor                                                                              // 299\n        var result = cursor.fetch();                                                                               // 300\n        // Return the data                                                                                         // 301\n        return _publishHTTP.formatResult(result, this, defaultFormat);                                             // 302\n      } else {                                                                                                     // 303\n        // We didnt get any                                                                                        // 304\n        return _publishHTTP.error(200, [], this);                                                                  // 305\n      }                                                                                                            // 306\n    };                                                                                                             // 307\n  }                                                                                                                // 308\n                                                                                                                   // 309\n  if (collection) {                                                                                                // 310\n    // If we have a collection then add insert method                                                              // 311\n    if (options.collectionPost) {                                                                                  // 312\n      methods[name].post = function(data) {                                                                        // 313\n        var insertMethodHandler = _publishHTTP.getMethodHandler(collection, 'insert');                             // 314\n        // Make sure that _id isset else create a Meteor id                                                        // 315\n        data._id = data._id || Random.id();                                                                        // 316\n        // Create the document                                                                                     // 317\n        try {                                                                                                      // 318\n          // We should be passed a document in data                                                                // 319\n          insertMethodHandler.apply(this, [data]);                                                                 // 320\n          // Return the data                                                                                       // 321\n          return _publishHTTP.formatResult({ _id: data._id }, this, defaultFormat);                                // 322\n        } catch(err) {                                                                                             // 323\n          // This would be a Meteor.error?                                                                         // 324\n          return _publishHTTP.error(err.error, { error: err.message }, this);                                      // 325\n        }                                                                                                          // 326\n      };                                                                                                           // 327\n    }                                                                                                              // 328\n                                                                                                                   // 329\n    // We also add the findOne, update and remove methods                                                          // 330\n    methods[name + '/:id'] = {};                                                                                   // 331\n                                                                                                                   // 332\n    if (options.documentGet && publishFunc) {                                                                      // 333\n      // We have to have a publish method inorder to publish id? The user could                                    // 334\n      // just write a publish all if needed - better to make this explicit                                         // 335\n      methods[name + '/:id'].get = function(data) {                                                                // 336\n        // Get the mongoId                                                                                         // 337\n        var mongoId = this.params.id;                                                                              // 338\n                                                                                                                   // 339\n        // We would allways expect a string but it could be empty                                                  // 340\n        if (mongoId !== '') {                                                                                      // 341\n                                                                                                                   // 342\n          // Format the scope for the publish method                                                               // 343\n          var publishScope = _publishHTTP.getPublishScope(this);                                                   // 344\n                                                                                                                   // 345\n          // Get the publish cursor                                                                                // 346\n          var cursor = publishFunc.apply(publishScope, [data]);                                                    // 347\n                                                                                                                   // 348\n          // Result will contain the document if found                                                             // 349\n          var result;                                                                                              // 350\n                                                                                                                   // 351\n          // Check to see if document is in published cursor                                                       // 352\n          if (cursor) {                                                                                            // 353\n            cursor.forEach(function(doc) {                                                                         // 354\n              if (!result) {                                                                                       // 355\n                if (doc._id === mongoId) {                                                                         // 356\n                  result = doc;                                                                                    // 357\n                }                                                                                                  // 358\n              }                                                                                                    // 359\n            });                                                                                                    // 360\n          }                                                                                                        // 361\n                                                                                                                   // 362\n          // If the document is found the return                                                                   // 363\n          if (result) {                                                                                            // 364\n            return _publishHTTP.formatResult(result, this, defaultFormat);                                         // 365\n          } else {                                                                                                 // 366\n            // We do a check to see if the doc id exists                                                           // 367\n            var exists = collection.findOne({ _id: mongoId });                                                     // 368\n            // If it exists its not published to the user                                                          // 369\n            if (exists) {                                                                                          // 370\n              // Unauthorized                                                                                      // 371\n              return _publishHTTP.error(401, { error: 'Unauthorized' }, this);                                     // 372\n            } else {                                                                                               // 373\n              // Not found                                                                                         // 374\n              return _publishHTTP.error(404, { error: 'Document with id ' + mongoId + ' not found' }, this);       // 375\n            }                                                                                                      // 376\n          }                                                                                                        // 377\n                                                                                                                   // 378\n        } else {                                                                                                   // 379\n          return _publishHTTP.error(400, { error: 'Method expected a document id' }, this);                        // 380\n        }                                                                                                          // 381\n      };                                                                                                           // 382\n    }                                                                                                              // 383\n                                                                                                                   // 384\n    if (options.documentPut) {                                                                                     // 385\n      methods[name + '/:id'].put = function(data) {                                                                // 386\n        // Get the mongoId                                                                                         // 387\n        var mongoId = this.params.id;                                                                              // 388\n                                                                                                                   // 389\n        // We would allways expect a string but it could be empty                                                  // 390\n        if (mongoId !== '') {                                                                                      // 391\n                                                                                                                   // 392\n          var updateMethodHandler = _publishHTTP.getMethodHandler(collection, 'update');                           // 393\n          // Create the document                                                                                   // 394\n          try {                                                                                                    // 395\n            // We should be passed a document in data                                                              // 396\n            updateMethodHandler.apply(this, [{ _id: mongoId }, data]);                                             // 397\n            // Return the data                                                                                     // 398\n            return _publishHTTP.formatResult({ _id: mongoId }, this, defaultFormat);                               // 399\n          } catch(err) {                                                                                           // 400\n            // This would be a Meteor.error?                                                                       // 401\n            return _publishHTTP.error(err.error, { error: err.message }, this);                                    // 402\n          }                                                                                                        // 403\n                                                                                                                   // 404\n        } else {                                                                                                   // 405\n          return _publishHTTP.error(400, { error: 'Method expected a document id' }, this);                        // 406\n        }                                                                                                          // 407\n      };                                                                                                           // 408\n    }                                                                                                              // 409\n                                                                                                                   // 410\n    if (options.documentDelete) {                                                                                  // 411\n      methods[name + '/:id'].delete = function(data) {                                                             // 412\n         // Get the mongoId                                                                                        // 413\n        var mongoId = this.params.id;                                                                              // 414\n                                                                                                                   // 415\n        // We would allways expect a string but it could be empty                                                  // 416\n        if (mongoId !== '') {                                                                                      // 417\n                                                                                                                   // 418\n          var removeMethodHandler = _publishHTTP.getMethodHandler(collection, 'remove');                           // 419\n          // Create the document                                                                                   // 420\n          try {                                                                                                    // 421\n            // We should be passed a document in data                                                              // 422\n            removeMethodHandler.apply(this, [{ _id: mongoId }]);                                                   // 423\n            // Return the data                                                                                     // 424\n            return _publishHTTP.formatResult({ _id: mongoId }, this, defaultFormat);                               // 425\n          } catch(err) {                                                                                           // 426\n            // This would be a Meteor.error?                                                                       // 427\n            return _publishHTTP.error(err.error, { error: err.message }, this);                                    // 428\n          }                                                                                                        // 429\n                                                                                                                   // 430\n        } else {                                                                                                   // 431\n          return _publishHTTP.error(400, { error: 'Method expected a document id' }, this);                        // 432\n        }                                                                                                          // 433\n      };                                                                                                           // 434\n    }                                                                                                              // 435\n                                                                                                                   // 436\n  }                                                                                                                // 437\n                                                                                                                   // 438\n  // Authenticate with our own auth method: https://github.com/CollectionFS/Meteor-http-methods#authentication     // 439\n  if (options.auth) {                                                                                              // 440\n    if (methods[name]) {                                                                                           // 441\n      methods[name].auth = options.auth;                                                                           // 442\n    }                                                                                                              // 443\n    if (methods[name + '/:id']) {                                                                                  // 444\n      methods[name + '/:id'].auth = options.auth;                                                                  // 445\n    }                                                                                                              // 446\n  }                                                                                                                // 447\n                                                                                                                   // 448\n  // Publish the methods                                                                                           // 449\n  HTTP.methods(methods);                                                                                           // 450\n                                                                                                                   // 451\n  // Mark these method names as currently published                                                                // 452\n  _publishHTTP.currentlyPublished = _.union(_publishHTTP.currentlyPublished, _.keys(methods));                     // 453\n                                                                                                                   // 454\n}; // EO Publish                                                                                                   // 455\n                                                                                                                   // 456\n/**                                                                                                                // 457\n * @method HTTP.unpublish                                                                                          // 458\n * @public                                                                                                         // 459\n * @param {String|Meteor.Collection} [name] - The method name or collection                                        // 460\n * @returns {undefined}                                                                                            // 461\n *                                                                                                                 // 462\n * Unpublishes all HTTP methods that were published with the given name or                                         // 463\n * for the given collection. Call with no arguments to unpublish all.                                              // 464\n */                                                                                                                // 465\nHTTP.unpublish = _publishHTTP.unpublish;                                                                           // 466\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['cfs:http-publish'] = {}, {\n  _publishHTTP: _publishHTTP\n});\n\n})();\n","servePath":"/packages/cfs_http-publish.js"}]