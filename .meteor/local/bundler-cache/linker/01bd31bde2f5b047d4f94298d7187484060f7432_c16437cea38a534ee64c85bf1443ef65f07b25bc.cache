[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\n\n/* Package-scope variables */\nvar AlgoliaSearch;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/acemtp_algolia/algoliasearch-client-js/dist/algoliasearch.js                                               //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/*! algoliasearch 3.9.1 | Â© 2014, 2015 Algolia SAS | github.com/algolia/algoliasearch-client-js */                     // 1\n(function(f){var g;if(typeof window!=='undefined'){g=window}else if(typeof self!=='undefined'){g=self}g.ALGOLIA_MIGRATION_LAYER=f()})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n                                                                                                                       // 3\nmodule.exports = function load (src, opts, cb) {                                                                       // 4\n  var head = document.head || document.getElementsByTagName('head')[0]                                                 // 5\n  var script = document.createElement('script')                                                                        // 6\n                                                                                                                       // 7\n  if (typeof opts === 'function') {                                                                                    // 8\n    cb = opts                                                                                                          // 9\n    opts = {}                                                                                                          // 10\n  }                                                                                                                    // 11\n                                                                                                                       // 12\n  opts = opts || {}                                                                                                    // 13\n  cb = cb || function() {}                                                                                             // 14\n                                                                                                                       // 15\n  script.type = opts.type || 'text/javascript'                                                                         // 16\n  script.charset = opts.charset || 'utf8';                                                                             // 17\n  script.async = 'async' in opts ? !!opts.async : true                                                                 // 18\n  script.src = src                                                                                                     // 19\n                                                                                                                       // 20\n  if (opts.attrs) {                                                                                                    // 21\n    setAttributes(script, opts.attrs)                                                                                  // 22\n  }                                                                                                                    // 23\n                                                                                                                       // 24\n  if (opts.text) {                                                                                                     // 25\n    script.text = '' + opts.text                                                                                       // 26\n  }                                                                                                                    // 27\n                                                                                                                       // 28\n  var onend = 'onload' in script ? stdOnEnd : ieOnEnd                                                                  // 29\n  onend(script, cb)                                                                                                    // 30\n                                                                                                                       // 31\n  // some good legacy browsers (firefox) fail the 'in' detection above                                                 // 32\n  // so as a fallback we always set onload                                                                             // 33\n  // old IE will ignore this and new IE will set onload                                                                // 34\n  if (!script.onload) {                                                                                                // 35\n    stdOnEnd(script, cb);                                                                                              // 36\n  }                                                                                                                    // 37\n                                                                                                                       // 38\n  head.appendChild(script)                                                                                             // 39\n}                                                                                                                      // 40\n                                                                                                                       // 41\nfunction setAttributes(script, attrs) {                                                                                // 42\n  for (var attr in attrs) {                                                                                            // 43\n    script.setAttribute(attr, attrs[attr]);                                                                            // 44\n  }                                                                                                                    // 45\n}                                                                                                                      // 46\n                                                                                                                       // 47\nfunction stdOnEnd (script, cb) {                                                                                       // 48\n  script.onload = function () {                                                                                        // 49\n    this.onerror = this.onload = null                                                                                  // 50\n    cb(null, script)                                                                                                   // 51\n  }                                                                                                                    // 52\n  script.onerror = function () {                                                                                       // 53\n    // this.onload = null here is necessary                                                                            // 54\n    // because even IE9 works not like others                                                                          // 55\n    this.onerror = this.onload = null                                                                                  // 56\n    cb(new Error('Failed to load ' + this.src), script)                                                                // 57\n  }                                                                                                                    // 58\n}                                                                                                                      // 59\n                                                                                                                       // 60\nfunction ieOnEnd (script, cb) {                                                                                        // 61\n  script.onreadystatechange = function () {                                                                            // 62\n    if (this.readyState != 'complete' && this.readyState != 'loaded') return                                           // 63\n    this.onreadystatechange = null                                                                                     // 64\n    cb(null, script) // there is no way to catch loading errors in IE8                                                 // 65\n  }                                                                                                                    // 66\n}                                                                                                                      // 67\n                                                                                                                       // 68\n},{}],2:[function(require,module,exports){                                                                             // 69\n'use strict';                                                                                                          // 70\n                                                                                                                       // 71\n// this module helps finding if the current page is using                                                              // 72\n// the cdn.jsdelivr.net/algoliasearch/latest/$BUILDNAME.min.js version                                                 // 73\n                                                                                                                       // 74\nmodule.exports = isUsingLatest;                                                                                        // 75\n                                                                                                                       // 76\nfunction isUsingLatest(buildName) {                                                                                    // 77\n  var toFind = new RegExp('cdn\\\\.jsdelivr\\\\.net/algoliasearch/latest/' +                                               // 78\n    buildName.replace('.', '\\\\.') + // algoliasearch, algoliasearch.angular                                            // 79\n    '(?:\\\\.min)?\\\\.js$'); // [.min].js                                                                                 // 80\n                                                                                                                       // 81\n  var scripts = document.getElementsByTagName('script');                                                               // 82\n  var found = false;                                                                                                   // 83\n  for (var currentScript = 0, nbScripts = scripts.length; currentScript < nbScripts; currentScript++) {                // 84\n    if (scripts[currentScript].src && toFind.test(scripts[currentScript].src)) {                                       // 85\n      found = true;                                                                                                    // 86\n      break;                                                                                                           // 87\n    }                                                                                                                  // 88\n  }                                                                                                                    // 89\n                                                                                                                       // 90\n  return found;                                                                                                        // 91\n}                                                                                                                      // 92\n                                                                                                                       // 93\n},{}],3:[function(require,module,exports){                                                                             // 94\n'use strict';                                                                                                          // 95\n                                                                                                                       // 96\nmodule.exports = loadV2;                                                                                               // 97\n                                                                                                                       // 98\nfunction loadV2(buildName) {                                                                                           // 99\n  var loadScript = require(1);                                                                                         // 100\n  var v2ScriptUrl = '//cdn.jsdelivr.net/algoliasearch/2/' + buildName + '.min.js';                                     // 101\n                                                                                                                       // 102\n  var message = '-- AlgoliaSearch `latest` warning --\\n' +                                                             // 103\n    'Warning, you are using the `latest` version string from jsDelivr to load the AlgoliaSearch library.\\n' +          // 104\n    'Using `latest` is no more recommended, you should load //cdn.jsdelivr.net/algoliasearch/2/algoliasearch.min.js\\n\\n' +\n    'Also, we updated the AlgoliaSearch JavaScript client to V3. If you want to upgrade,\\n' +                          // 106\n    'please read our migration guide at https://github.com/algolia/algoliasearch-client-js/wiki/Migration-guide-from-2.x.x-to-3.x.x\\n' +\n    '-- /AlgoliaSearch  `latest` warning --';                                                                          // 108\n                                                                                                                       // 109\n  if (window.console) {                                                                                                // 110\n    if (window.console.warn) {                                                                                         // 111\n      window.console.warn(message);                                                                                    // 112\n    } else if (window.console.log) {                                                                                   // 113\n      window.console.log(message);                                                                                     // 114\n    }                                                                                                                  // 115\n  }                                                                                                                    // 116\n                                                                                                                       // 117\n  // If current script loaded asynchronously,                                                                          // 118\n  // it will load the script with DOMElement                                                                           // 119\n  // otherwise, it will load the script with document.write                                                            // 120\n  try {                                                                                                                // 121\n    // why \\x3c? http://stackoverflow.com/a/236106/147079                                                              // 122\n    document.write('\\x3Cscript>window.ALGOLIA_SUPPORTS_DOCWRITE = true\\x3C/script>');                                  // 123\n                                                                                                                       // 124\n    if (window.ALGOLIA_SUPPORTS_DOCWRITE === true) {                                                                   // 125\n      document.write('\\x3Cscript src=\"' + v2ScriptUrl + '\">\\x3C/script>');                                             // 126\n      scriptLoaded('document.write')();                                                                                // 127\n    } else {                                                                                                           // 128\n      loadScript(v2ScriptUrl, scriptLoaded('DOMElement'));                                                             // 129\n    }                                                                                                                  // 130\n  } catch (e) {                                                                                                        // 131\n    loadScript(v2ScriptUrl, scriptLoaded('DOMElement'));                                                               // 132\n  }                                                                                                                    // 133\n}                                                                                                                      // 134\n                                                                                                                       // 135\nfunction scriptLoaded(method) {                                                                                        // 136\n  return function log() {                                                                                              // 137\n    var message = 'AlgoliaSearch: loaded V2 script using ' + method;                                                   // 138\n                                                                                                                       // 139\n    if (window.console && window.console.log) {                                                                        // 140\n      window.console.log(message);                                                                                     // 141\n    }                                                                                                                  // 142\n  };                                                                                                                   // 143\n}                                                                                                                      // 144\n                                                                                                                       // 145\n},{\"1\":1}],4:[function(require,module,exports){                                                                        // 146\n'use strict';                                                                                                          // 147\n                                                                                                                       // 148\n/* eslint no-unused-vars: [2, {\"vars\": \"local\"}] */                                                                    // 149\n                                                                                                                       // 150\nmodule.exports = oldGlobals;                                                                                           // 151\n                                                                                                                       // 152\n// put old window.AlgoliaSearch.. into window. again so that                                                           // 153\n// users upgrading to V3 without changing their code, will be warned                                                   // 154\nfunction oldGlobals() {                                                                                                // 155\n  var message = '-- AlgoliaSearch V2 => V3 error --\\n' +                                                               // 156\n    'You are trying to use a new version of the AlgoliaSearch JavaScript client with an old notation.\\n' +             // 157\n    'Please read our migration guide at https://github.com/algolia/algoliasearch-client-js/wiki/Migration-guide-from-2.x.x-to-3.x.x\\n' +\n    '-- /AlgoliaSearch V2 => V3 error --';                                                                             // 159\n                                                                                                                       // 160\n  window.AlgoliaSearch = function() {                                                                                  // 161\n    throw new Error(message);                                                                                          // 162\n  };                                                                                                                   // 163\n                                                                                                                       // 164\n  window.AlgoliaSearchHelper = function() {                                                                            // 165\n    throw new Error(message);                                                                                          // 166\n  };                                                                                                                   // 167\n                                                                                                                       // 168\n  window.AlgoliaExplainResults = function() {                                                                          // 169\n    throw new Error(message);                                                                                          // 170\n  };                                                                                                                   // 171\n}                                                                                                                      // 172\n                                                                                                                       // 173\n},{}],5:[function(require,module,exports){                                                                             // 174\n'use strict';                                                                                                          // 175\n                                                                                                                       // 176\n// This script will be browserified and prepended to the normal build                                                  // 177\n// directly in window, not wrapped in any module definition                                                            // 178\n// To avoid cases where we are loaded with /latest/ along with                                                         // 179\nmigrationLayer(\"algoliasearch\");                                                                                       // 180\n                                                                                                                       // 181\n// Now onto the V2 related code:                                                                                       // 182\n//  If the client is using /latest/$BUILDNAME.min.js, load V2 of the library                                           // 183\n//                                                                                                                     // 184\n//  Otherwise, setup a migration layer that will throw on old constructors like                                        // 185\n//  new AlgoliaSearch().                                                                                               // 186\n//  So that users upgrading from v2 to v3 will have a clear information                                                // 187\n//  message on what to do if they did not read the migration guide                                                     // 188\nfunction migrationLayer(buildName) {                                                                                   // 189\n  var isUsingLatest = require(2);                                                                                      // 190\n  var loadV2 = require(3);                                                                                             // 191\n  var oldGlobals = require(4);                                                                                         // 192\n                                                                                                                       // 193\n  if (isUsingLatest(buildName)) {                                                                                      // 194\n    loadV2(buildName);                                                                                                 // 195\n  } else {                                                                                                             // 196\n    oldGlobals();                                                                                                      // 197\n  }                                                                                                                    // 198\n}                                                                                                                      // 199\n                                                                                                                       // 200\n},{\"2\":2,\"3\":3,\"4\":4}]},{},[5])(5)                                                                                     // 201\n});(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.algoliasearch = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 203\n//                                                                                                                     // 204\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 205\n// copy of this software and associated documentation files (the                                                       // 206\n// \"Software\"), to deal in the Software without restriction, including                                                 // 207\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 208\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 209\n// persons to whom the Software is furnished to do so, subject to the                                                  // 210\n// following conditions:                                                                                               // 211\n//                                                                                                                     // 212\n// The above copyright notice and this permission notice shall be included                                             // 213\n// in all copies or substantial portions of the Software.                                                              // 214\n//                                                                                                                     // 215\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 216\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 217\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 218\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 219\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 220\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 221\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 222\n                                                                                                                       // 223\nfunction EventEmitter() {                                                                                              // 224\n  this._events = this._events || {};                                                                                   // 225\n  this._maxListeners = this._maxListeners || undefined;                                                                // 226\n}                                                                                                                      // 227\nmodule.exports = EventEmitter;                                                                                         // 228\n                                                                                                                       // 229\n// Backwards-compat with node 0.10.x                                                                                   // 230\nEventEmitter.EventEmitter = EventEmitter;                                                                              // 231\n                                                                                                                       // 232\nEventEmitter.prototype._events = undefined;                                                                            // 233\nEventEmitter.prototype._maxListeners = undefined;                                                                      // 234\n                                                                                                                       // 235\n// By default EventEmitters will print a warning if more than 10 listeners are                                         // 236\n// added to it. This is a useful default which helps finding memory leaks.                                             // 237\nEventEmitter.defaultMaxListeners = 10;                                                                                 // 238\n                                                                                                                       // 239\n// Obviously not all Emitters should be limited to 10. This function allows                                            // 240\n// that to be increased. Set to zero for unlimited.                                                                    // 241\nEventEmitter.prototype.setMaxListeners = function(n) {                                                                 // 242\n  if (!isNumber(n) || n < 0 || isNaN(n))                                                                               // 243\n    throw TypeError('n must be a positive number');                                                                    // 244\n  this._maxListeners = n;                                                                                              // 245\n  return this;                                                                                                         // 246\n};                                                                                                                     // 247\n                                                                                                                       // 248\nEventEmitter.prototype.emit = function(type) {                                                                         // 249\n  var er, handler, len, args, i, listeners;                                                                            // 250\n                                                                                                                       // 251\n  if (!this._events)                                                                                                   // 252\n    this._events = {};                                                                                                 // 253\n                                                                                                                       // 254\n  // If there is no 'error' event listener then throw.                                                                 // 255\n  if (type === 'error') {                                                                                              // 256\n    if (!this._events.error ||                                                                                         // 257\n        (isObject(this._events.error) && !this._events.error.length)) {                                                // 258\n      er = arguments[1];                                                                                               // 259\n      if (er instanceof Error) {                                                                                       // 260\n        throw er; // Unhandled 'error' event                                                                           // 261\n      }                                                                                                                // 262\n      throw TypeError('Uncaught, unspecified \"error\" event.');                                                         // 263\n    }                                                                                                                  // 264\n  }                                                                                                                    // 265\n                                                                                                                       // 266\n  handler = this._events[type];                                                                                        // 267\n                                                                                                                       // 268\n  if (isUndefined(handler))                                                                                            // 269\n    return false;                                                                                                      // 270\n                                                                                                                       // 271\n  if (isFunction(handler)) {                                                                                           // 272\n    switch (arguments.length) {                                                                                        // 273\n      // fast cases                                                                                                    // 274\n      case 1:                                                                                                          // 275\n        handler.call(this);                                                                                            // 276\n        break;                                                                                                         // 277\n      case 2:                                                                                                          // 278\n        handler.call(this, arguments[1]);                                                                              // 279\n        break;                                                                                                         // 280\n      case 3:                                                                                                          // 281\n        handler.call(this, arguments[1], arguments[2]);                                                                // 282\n        break;                                                                                                         // 283\n      // slower                                                                                                        // 284\n      default:                                                                                                         // 285\n        len = arguments.length;                                                                                        // 286\n        args = new Array(len - 1);                                                                                     // 287\n        for (i = 1; i < len; i++)                                                                                      // 288\n          args[i - 1] = arguments[i];                                                                                  // 289\n        handler.apply(this, args);                                                                                     // 290\n    }                                                                                                                  // 291\n  } else if (isObject(handler)) {                                                                                      // 292\n    len = arguments.length;                                                                                            // 293\n    args = new Array(len - 1);                                                                                         // 294\n    for (i = 1; i < len; i++)                                                                                          // 295\n      args[i - 1] = arguments[i];                                                                                      // 296\n                                                                                                                       // 297\n    listeners = handler.slice();                                                                                       // 298\n    len = listeners.length;                                                                                            // 299\n    for (i = 0; i < len; i++)                                                                                          // 300\n      listeners[i].apply(this, args);                                                                                  // 301\n  }                                                                                                                    // 302\n                                                                                                                       // 303\n  return true;                                                                                                         // 304\n};                                                                                                                     // 305\n                                                                                                                       // 306\nEventEmitter.prototype.addListener = function(type, listener) {                                                        // 307\n  var m;                                                                                                               // 308\n                                                                                                                       // 309\n  if (!isFunction(listener))                                                                                           // 310\n    throw TypeError('listener must be a function');                                                                    // 311\n                                                                                                                       // 312\n  if (!this._events)                                                                                                   // 313\n    this._events = {};                                                                                                 // 314\n                                                                                                                       // 315\n  // To avoid recursion in the case that type === \"newListener\"! Before                                                // 316\n  // adding it to the listeners, first emit \"newListener\".                                                             // 317\n  if (this._events.newListener)                                                                                        // 318\n    this.emit('newListener', type,                                                                                     // 319\n              isFunction(listener.listener) ?                                                                          // 320\n              listener.listener : listener);                                                                           // 321\n                                                                                                                       // 322\n  if (!this._events[type])                                                                                             // 323\n    // Optimize the case of one listener. Don't need the extra array object.                                           // 324\n    this._events[type] = listener;                                                                                     // 325\n  else if (isObject(this._events[type]))                                                                               // 326\n    // If we've already got an array, just append.                                                                     // 327\n    this._events[type].push(listener);                                                                                 // 328\n  else                                                                                                                 // 329\n    // Adding the second element, need to change to array.                                                             // 330\n    this._events[type] = [this._events[type], listener];                                                               // 331\n                                                                                                                       // 332\n  // Check for listener leak                                                                                           // 333\n  if (isObject(this._events[type]) && !this._events[type].warned) {                                                    // 334\n    var m;                                                                                                             // 335\n    if (!isUndefined(this._maxListeners)) {                                                                            // 336\n      m = this._maxListeners;                                                                                          // 337\n    } else {                                                                                                           // 338\n      m = EventEmitter.defaultMaxListeners;                                                                            // 339\n    }                                                                                                                  // 340\n                                                                                                                       // 341\n    if (m && m > 0 && this._events[type].length > m) {                                                                 // 342\n      this._events[type].warned = true;                                                                                // 343\n      console.error('(node) warning: possible EventEmitter memory ' +                                                  // 344\n                    'leak detected. %d listeners added. ' +                                                            // 345\n                    'Use emitter.setMaxListeners() to increase limit.',                                                // 346\n                    this._events[type].length);                                                                        // 347\n      if (typeof console.trace === 'function') {                                                                       // 348\n        // not supported in IE 10                                                                                      // 349\n        console.trace();                                                                                               // 350\n      }                                                                                                                // 351\n    }                                                                                                                  // 352\n  }                                                                                                                    // 353\n                                                                                                                       // 354\n  return this;                                                                                                         // 355\n};                                                                                                                     // 356\n                                                                                                                       // 357\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;                                                        // 358\n                                                                                                                       // 359\nEventEmitter.prototype.once = function(type, listener) {                                                               // 360\n  if (!isFunction(listener))                                                                                           // 361\n    throw TypeError('listener must be a function');                                                                    // 362\n                                                                                                                       // 363\n  var fired = false;                                                                                                   // 364\n                                                                                                                       // 365\n  function g() {                                                                                                       // 366\n    this.removeListener(type, g);                                                                                      // 367\n                                                                                                                       // 368\n    if (!fired) {                                                                                                      // 369\n      fired = true;                                                                                                    // 370\n      listener.apply(this, arguments);                                                                                 // 371\n    }                                                                                                                  // 372\n  }                                                                                                                    // 373\n                                                                                                                       // 374\n  g.listener = listener;                                                                                               // 375\n  this.on(type, g);                                                                                                    // 376\n                                                                                                                       // 377\n  return this;                                                                                                         // 378\n};                                                                                                                     // 379\n                                                                                                                       // 380\n// emits a 'removeListener' event iff the listener was removed                                                         // 381\nEventEmitter.prototype.removeListener = function(type, listener) {                                                     // 382\n  var list, position, length, i;                                                                                       // 383\n                                                                                                                       // 384\n  if (!isFunction(listener))                                                                                           // 385\n    throw TypeError('listener must be a function');                                                                    // 386\n                                                                                                                       // 387\n  if (!this._events || !this._events[type])                                                                            // 388\n    return this;                                                                                                       // 389\n                                                                                                                       // 390\n  list = this._events[type];                                                                                           // 391\n  length = list.length;                                                                                                // 392\n  position = -1;                                                                                                       // 393\n                                                                                                                       // 394\n  if (list === listener ||                                                                                             // 395\n      (isFunction(list.listener) && list.listener === listener)) {                                                     // 396\n    delete this._events[type];                                                                                         // 397\n    if (this._events.removeListener)                                                                                   // 398\n      this.emit('removeListener', type, listener);                                                                     // 399\n                                                                                                                       // 400\n  } else if (isObject(list)) {                                                                                         // 401\n    for (i = length; i-- > 0;) {                                                                                       // 402\n      if (list[i] === listener ||                                                                                      // 403\n          (list[i].listener && list[i].listener === listener)) {                                                       // 404\n        position = i;                                                                                                  // 405\n        break;                                                                                                         // 406\n      }                                                                                                                // 407\n    }                                                                                                                  // 408\n                                                                                                                       // 409\n    if (position < 0)                                                                                                  // 410\n      return this;                                                                                                     // 411\n                                                                                                                       // 412\n    if (list.length === 1) {                                                                                           // 413\n      list.length = 0;                                                                                                 // 414\n      delete this._events[type];                                                                                       // 415\n    } else {                                                                                                           // 416\n      list.splice(position, 1);                                                                                        // 417\n    }                                                                                                                  // 418\n                                                                                                                       // 419\n    if (this._events.removeListener)                                                                                   // 420\n      this.emit('removeListener', type, listener);                                                                     // 421\n  }                                                                                                                    // 422\n                                                                                                                       // 423\n  return this;                                                                                                         // 424\n};                                                                                                                     // 425\n                                                                                                                       // 426\nEventEmitter.prototype.removeAllListeners = function(type) {                                                           // 427\n  var key, listeners;                                                                                                  // 428\n                                                                                                                       // 429\n  if (!this._events)                                                                                                   // 430\n    return this;                                                                                                       // 431\n                                                                                                                       // 432\n  // not listening for removeListener, no need to emit                                                                 // 433\n  if (!this._events.removeListener) {                                                                                  // 434\n    if (arguments.length === 0)                                                                                        // 435\n      this._events = {};                                                                                               // 436\n    else if (this._events[type])                                                                                       // 437\n      delete this._events[type];                                                                                       // 438\n    return this;                                                                                                       // 439\n  }                                                                                                                    // 440\n                                                                                                                       // 441\n  // emit removeListener for all listeners on all events                                                               // 442\n  if (arguments.length === 0) {                                                                                        // 443\n    for (key in this._events) {                                                                                        // 444\n      if (key === 'removeListener') continue;                                                                          // 445\n      this.removeAllListeners(key);                                                                                    // 446\n    }                                                                                                                  // 447\n    this.removeAllListeners('removeListener');                                                                         // 448\n    this._events = {};                                                                                                 // 449\n    return this;                                                                                                       // 450\n  }                                                                                                                    // 451\n                                                                                                                       // 452\n  listeners = this._events[type];                                                                                      // 453\n                                                                                                                       // 454\n  if (isFunction(listeners)) {                                                                                         // 455\n    this.removeListener(type, listeners);                                                                              // 456\n  } else {                                                                                                             // 457\n    // LIFO order                                                                                                      // 458\n    while (listeners.length)                                                                                           // 459\n      this.removeListener(type, listeners[listeners.length - 1]);                                                      // 460\n  }                                                                                                                    // 461\n  delete this._events[type];                                                                                           // 462\n                                                                                                                       // 463\n  return this;                                                                                                         // 464\n};                                                                                                                     // 465\n                                                                                                                       // 466\nEventEmitter.prototype.listeners = function(type) {                                                                    // 467\n  var ret;                                                                                                             // 468\n  if (!this._events || !this._events[type])                                                                            // 469\n    ret = [];                                                                                                          // 470\n  else if (isFunction(this._events[type]))                                                                             // 471\n    ret = [this._events[type]];                                                                                        // 472\n  else                                                                                                                 // 473\n    ret = this._events[type].slice();                                                                                  // 474\n  return ret;                                                                                                          // 475\n};                                                                                                                     // 476\n                                                                                                                       // 477\nEventEmitter.listenerCount = function(emitter, type) {                                                                 // 478\n  var ret;                                                                                                             // 479\n  if (!emitter._events || !emitter._events[type])                                                                      // 480\n    ret = 0;                                                                                                           // 481\n  else if (isFunction(emitter._events[type]))                                                                          // 482\n    ret = 1;                                                                                                           // 483\n  else                                                                                                                 // 484\n    ret = emitter._events[type].length;                                                                                // 485\n  return ret;                                                                                                          // 486\n};                                                                                                                     // 487\n                                                                                                                       // 488\nfunction isFunction(arg) {                                                                                             // 489\n  return typeof arg === 'function';                                                                                    // 490\n}                                                                                                                      // 491\n                                                                                                                       // 492\nfunction isNumber(arg) {                                                                                               // 493\n  return typeof arg === 'number';                                                                                      // 494\n}                                                                                                                      // 495\n                                                                                                                       // 496\nfunction isObject(arg) {                                                                                               // 497\n  return typeof arg === 'object' && arg !== null;                                                                      // 498\n}                                                                                                                      // 499\n                                                                                                                       // 500\nfunction isUndefined(arg) {                                                                                            // 501\n  return arg === void 0;                                                                                               // 502\n}                                                                                                                      // 503\n                                                                                                                       // 504\n},{}],2:[function(require,module,exports){                                                                             // 505\n// shim for using process in browser                                                                                   // 506\n                                                                                                                       // 507\nvar process = module.exports = {};                                                                                     // 508\nvar queue = [];                                                                                                        // 509\nvar draining = false;                                                                                                  // 510\nvar currentQueue;                                                                                                      // 511\nvar queueIndex = -1;                                                                                                   // 512\n                                                                                                                       // 513\nfunction cleanUpNextTick() {                                                                                           // 514\n    draining = false;                                                                                                  // 515\n    if (currentQueue.length) {                                                                                         // 516\n        queue = currentQueue.concat(queue);                                                                            // 517\n    } else {                                                                                                           // 518\n        queueIndex = -1;                                                                                               // 519\n    }                                                                                                                  // 520\n    if (queue.length) {                                                                                                // 521\n        drainQueue();                                                                                                  // 522\n    }                                                                                                                  // 523\n}                                                                                                                      // 524\n                                                                                                                       // 525\nfunction drainQueue() {                                                                                                // 526\n    if (draining) {                                                                                                    // 527\n        return;                                                                                                        // 528\n    }                                                                                                                  // 529\n    var timeout = setTimeout(cleanUpNextTick);                                                                         // 530\n    draining = true;                                                                                                   // 531\n                                                                                                                       // 532\n    var len = queue.length;                                                                                            // 533\n    while(len) {                                                                                                       // 534\n        currentQueue = queue;                                                                                          // 535\n        queue = [];                                                                                                    // 536\n        while (++queueIndex < len) {                                                                                   // 537\n            if (currentQueue) {                                                                                        // 538\n                currentQueue[queueIndex].run();                                                                        // 539\n            }                                                                                                          // 540\n        }                                                                                                              // 541\n        queueIndex = -1;                                                                                               // 542\n        len = queue.length;                                                                                            // 543\n    }                                                                                                                  // 544\n    currentQueue = null;                                                                                               // 545\n    draining = false;                                                                                                  // 546\n    clearTimeout(timeout);                                                                                             // 547\n}                                                                                                                      // 548\n                                                                                                                       // 549\nprocess.nextTick = function (fun) {                                                                                    // 550\n    var args = new Array(arguments.length - 1);                                                                        // 551\n    if (arguments.length > 1) {                                                                                        // 552\n        for (var i = 1; i < arguments.length; i++) {                                                                   // 553\n            args[i - 1] = arguments[i];                                                                                // 554\n        }                                                                                                              // 555\n    }                                                                                                                  // 556\n    queue.push(new Item(fun, args));                                                                                   // 557\n    if (queue.length === 1 && !draining) {                                                                             // 558\n        setTimeout(drainQueue, 0);                                                                                     // 559\n    }                                                                                                                  // 560\n};                                                                                                                     // 561\n                                                                                                                       // 562\n// v8 likes predictible objects                                                                                        // 563\nfunction Item(fun, array) {                                                                                            // 564\n    this.fun = fun;                                                                                                    // 565\n    this.array = array;                                                                                                // 566\n}                                                                                                                      // 567\nItem.prototype.run = function () {                                                                                     // 568\n    this.fun.apply(null, this.array);                                                                                  // 569\n};                                                                                                                     // 570\nprocess.title = 'browser';                                                                                             // 571\nprocess.browser = true;                                                                                                // 572\nprocess.env = {};                                                                                                      // 573\nprocess.argv = [];                                                                                                     // 574\nprocess.version = ''; // empty string to avoid regexp issues                                                           // 575\nprocess.versions = {};                                                                                                 // 576\n                                                                                                                       // 577\nfunction noop() {}                                                                                                     // 578\n                                                                                                                       // 579\nprocess.on = noop;                                                                                                     // 580\nprocess.addListener = noop;                                                                                            // 581\nprocess.once = noop;                                                                                                   // 582\nprocess.off = noop;                                                                                                    // 583\nprocess.removeListener = noop;                                                                                         // 584\nprocess.removeAllListeners = noop;                                                                                     // 585\nprocess.emit = noop;                                                                                                   // 586\n                                                                                                                       // 587\nprocess.binding = function (name) {                                                                                    // 588\n    throw new Error('process.binding is not supported');                                                               // 589\n};                                                                                                                     // 590\n                                                                                                                       // 591\nprocess.cwd = function () { return '/' };                                                                              // 592\nprocess.chdir = function (dir) {                                                                                       // 593\n    throw new Error('process.chdir is not supported');                                                                 // 594\n};                                                                                                                     // 595\nprocess.umask = function() { return 0; };                                                                              // 596\n                                                                                                                       // 597\n},{}],3:[function(require,module,exports){                                                                             // 598\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 599\n//                                                                                                                     // 600\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 601\n// copy of this software and associated documentation files (the                                                       // 602\n// \"Software\"), to deal in the Software without restriction, including                                                 // 603\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 604\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 605\n// persons to whom the Software is furnished to do so, subject to the                                                  // 606\n// following conditions:                                                                                               // 607\n//                                                                                                                     // 608\n// The above copyright notice and this permission notice shall be included                                             // 609\n// in all copies or substantial portions of the Software.                                                              // 610\n//                                                                                                                     // 611\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 612\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 613\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 614\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 615\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 616\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 617\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 618\n                                                                                                                       // 619\n'use strict';                                                                                                          // 620\n                                                                                                                       // 621\n// If obj.hasOwnProperty has been overridden, then calling                                                             // 622\n// obj.hasOwnProperty(prop) will break.                                                                                // 623\n// See: https://github.com/joyent/node/issues/1707                                                                     // 624\nfunction hasOwnProperty(obj, prop) {                                                                                   // 625\n  return Object.prototype.hasOwnProperty.call(obj, prop);                                                              // 626\n}                                                                                                                      // 627\n                                                                                                                       // 628\nmodule.exports = function(qs, sep, eq, options) {                                                                      // 629\n  sep = sep || '&';                                                                                                    // 630\n  eq = eq || '=';                                                                                                      // 631\n  var obj = {};                                                                                                        // 632\n                                                                                                                       // 633\n  if (typeof qs !== 'string' || qs.length === 0) {                                                                     // 634\n    return obj;                                                                                                        // 635\n  }                                                                                                                    // 636\n                                                                                                                       // 637\n  var regexp = /\\+/g;                                                                                                  // 638\n  qs = qs.split(sep);                                                                                                  // 639\n                                                                                                                       // 640\n  var maxKeys = 1000;                                                                                                  // 641\n  if (options && typeof options.maxKeys === 'number') {                                                                // 642\n    maxKeys = options.maxKeys;                                                                                         // 643\n  }                                                                                                                    // 644\n                                                                                                                       // 645\n  var len = qs.length;                                                                                                 // 646\n  // maxKeys <= 0 means that we should not limit keys count                                                            // 647\n  if (maxKeys > 0 && len > maxKeys) {                                                                                  // 648\n    len = maxKeys;                                                                                                     // 649\n  }                                                                                                                    // 650\n                                                                                                                       // 651\n  for (var i = 0; i < len; ++i) {                                                                                      // 652\n    var x = qs[i].replace(regexp, '%20'),                                                                              // 653\n        idx = x.indexOf(eq),                                                                                           // 654\n        kstr, vstr, k, v;                                                                                              // 655\n                                                                                                                       // 656\n    if (idx >= 0) {                                                                                                    // 657\n      kstr = x.substr(0, idx);                                                                                         // 658\n      vstr = x.substr(idx + 1);                                                                                        // 659\n    } else {                                                                                                           // 660\n      kstr = x;                                                                                                        // 661\n      vstr = '';                                                                                                       // 662\n    }                                                                                                                  // 663\n                                                                                                                       // 664\n    k = decodeURIComponent(kstr);                                                                                      // 665\n    v = decodeURIComponent(vstr);                                                                                      // 666\n                                                                                                                       // 667\n    if (!hasOwnProperty(obj, k)) {                                                                                     // 668\n      obj[k] = v;                                                                                                      // 669\n    } else if (isArray(obj[k])) {                                                                                      // 670\n      obj[k].push(v);                                                                                                  // 671\n    } else {                                                                                                           // 672\n      obj[k] = [obj[k], v];                                                                                            // 673\n    }                                                                                                                  // 674\n  }                                                                                                                    // 675\n                                                                                                                       // 676\n  return obj;                                                                                                          // 677\n};                                                                                                                     // 678\n                                                                                                                       // 679\nvar isArray = Array.isArray || function (xs) {                                                                         // 680\n  return Object.prototype.toString.call(xs) === '[object Array]';                                                      // 681\n};                                                                                                                     // 682\n                                                                                                                       // 683\n},{}],4:[function(require,module,exports){                                                                             // 684\n// Copyright Joyent, Inc. and other Node contributors.                                                                 // 685\n//                                                                                                                     // 686\n// Permission is hereby granted, free of charge, to any person obtaining a                                             // 687\n// copy of this software and associated documentation files (the                                                       // 688\n// \"Software\"), to deal in the Software without restriction, including                                                 // 689\n// without limitation the rights to use, copy, modify, merge, publish,                                                 // 690\n// distribute, sublicense, and/or sell copies of the Software, and to permit                                           // 691\n// persons to whom the Software is furnished to do so, subject to the                                                  // 692\n// following conditions:                                                                                               // 693\n//                                                                                                                     // 694\n// The above copyright notice and this permission notice shall be included                                             // 695\n// in all copies or substantial portions of the Software.                                                              // 696\n//                                                                                                                     // 697\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS                                             // 698\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF                                                          // 699\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN                                           // 700\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,                                            // 701\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR                                               // 702\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE                                           // 703\n// USE OR OTHER DEALINGS IN THE SOFTWARE.                                                                              // 704\n                                                                                                                       // 705\n'use strict';                                                                                                          // 706\n                                                                                                                       // 707\nvar stringifyPrimitive = function(v) {                                                                                 // 708\n  switch (typeof v) {                                                                                                  // 709\n    case 'string':                                                                                                     // 710\n      return v;                                                                                                        // 711\n                                                                                                                       // 712\n    case 'boolean':                                                                                                    // 713\n      return v ? 'true' : 'false';                                                                                     // 714\n                                                                                                                       // 715\n    case 'number':                                                                                                     // 716\n      return isFinite(v) ? v : '';                                                                                     // 717\n                                                                                                                       // 718\n    default:                                                                                                           // 719\n      return '';                                                                                                       // 720\n  }                                                                                                                    // 721\n};                                                                                                                     // 722\n                                                                                                                       // 723\nmodule.exports = function(obj, sep, eq, name) {                                                                        // 724\n  sep = sep || '&';                                                                                                    // 725\n  eq = eq || '=';                                                                                                      // 726\n  if (obj === null) {                                                                                                  // 727\n    obj = undefined;                                                                                                   // 728\n  }                                                                                                                    // 729\n                                                                                                                       // 730\n  if (typeof obj === 'object') {                                                                                       // 731\n    return map(objectKeys(obj), function(k) {                                                                          // 732\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;                                                         // 733\n      if (isArray(obj[k])) {                                                                                           // 734\n        return map(obj[k], function(v) {                                                                               // 735\n          return ks + encodeURIComponent(stringifyPrimitive(v));                                                       // 736\n        }).join(sep);                                                                                                  // 737\n      } else {                                                                                                         // 738\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));                                                    // 739\n      }                                                                                                                // 740\n    }).join(sep);                                                                                                      // 741\n                                                                                                                       // 742\n  }                                                                                                                    // 743\n                                                                                                                       // 744\n  if (!name) return '';                                                                                                // 745\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +                                                           // 746\n         encodeURIComponent(stringifyPrimitive(obj));                                                                  // 747\n};                                                                                                                     // 748\n                                                                                                                       // 749\nvar isArray = Array.isArray || function (xs) {                                                                         // 750\n  return Object.prototype.toString.call(xs) === '[object Array]';                                                      // 751\n};                                                                                                                     // 752\n                                                                                                                       // 753\nfunction map (xs, f) {                                                                                                 // 754\n  if (xs.map) return xs.map(f);                                                                                        // 755\n  var res = [];                                                                                                        // 756\n  for (var i = 0; i < xs.length; i++) {                                                                                // 757\n    res.push(f(xs[i], i));                                                                                             // 758\n  }                                                                                                                    // 759\n  return res;                                                                                                          // 760\n}                                                                                                                      // 761\n                                                                                                                       // 762\nvar objectKeys = Object.keys || function (obj) {                                                                       // 763\n  var res = [];                                                                                                        // 764\n  for (var key in obj) {                                                                                               // 765\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);                                                 // 766\n  }                                                                                                                    // 767\n  return res;                                                                                                          // 768\n};                                                                                                                     // 769\n                                                                                                                       // 770\n},{}],5:[function(require,module,exports){                                                                             // 771\n'use strict';                                                                                                          // 772\n                                                                                                                       // 773\nexports.decode = exports.parse = require(3);                                                                           // 774\nexports.encode = exports.stringify = require(4);                                                                       // 775\n                                                                                                                       // 776\n},{\"3\":3,\"4\":4}],6:[function(require,module,exports){                                                                  // 777\n                                                                                                                       // 778\n/**                                                                                                                    // 779\n * This is the web browser implementation of `debug()`.                                                                // 780\n *                                                                                                                     // 781\n * Expose `debug()` as the module.                                                                                     // 782\n */                                                                                                                    // 783\n                                                                                                                       // 784\nexports = module.exports = require(7);                                                                                 // 785\nexports.log = log;                                                                                                     // 786\nexports.formatArgs = formatArgs;                                                                                       // 787\nexports.save = save;                                                                                                   // 788\nexports.load = load;                                                                                                   // 789\nexports.useColors = useColors;                                                                                         // 790\nexports.storage = 'undefined' != typeof chrome                                                                         // 791\n               && 'undefined' != typeof chrome.storage                                                                 // 792\n                  ? chrome.storage.local                                                                               // 793\n                  : localstorage();                                                                                    // 794\n                                                                                                                       // 795\n/**                                                                                                                    // 796\n * Colors.                                                                                                             // 797\n */                                                                                                                    // 798\n                                                                                                                       // 799\nexports.colors = [                                                                                                     // 800\n  'lightseagreen',                                                                                                     // 801\n  'forestgreen',                                                                                                       // 802\n  'goldenrod',                                                                                                         // 803\n  'dodgerblue',                                                                                                        // 804\n  'darkorchid',                                                                                                        // 805\n  'crimson'                                                                                                            // 806\n];                                                                                                                     // 807\n                                                                                                                       // 808\n/**                                                                                                                    // 809\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,                                                         // 810\n * and the Firebug extension (any Firefox version) are known                                                           // 811\n * to support \"%c\" CSS customizations.                                                                                 // 812\n *                                                                                                                     // 813\n * TODO: add a `localStorage` variable to explicitly enable/disable colors                                             // 814\n */                                                                                                                    // 815\n                                                                                                                       // 816\nfunction useColors() {                                                                                                 // 817\n  // is webkit? http://stackoverflow.com/a/16459606/376773                                                             // 818\n  return ('WebkitAppearance' in document.documentElement.style) ||                                                     // 819\n    // is firebug? http://stackoverflow.com/a/398120/376773                                                            // 820\n    (window.console && (console.firebug || (console.exception && console.table))) ||                                   // 821\n    // is firefox >= v31?                                                                                              // 822\n    // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages                                     // 823\n    (navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31);                      // 824\n}                                                                                                                      // 825\n                                                                                                                       // 826\n/**                                                                                                                    // 827\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.                                           // 828\n */                                                                                                                    // 829\n                                                                                                                       // 830\nexports.formatters.j = function(v) {                                                                                   // 831\n  return JSON.stringify(v);                                                                                            // 832\n};                                                                                                                     // 833\n                                                                                                                       // 834\n                                                                                                                       // 835\n/**                                                                                                                    // 836\n * Colorize log arguments if enabled.                                                                                  // 837\n *                                                                                                                     // 838\n * @api public                                                                                                         // 839\n */                                                                                                                    // 840\n                                                                                                                       // 841\nfunction formatArgs() {                                                                                                // 842\n  var args = arguments;                                                                                                // 843\n  var useColors = this.useColors;                                                                                      // 844\n                                                                                                                       // 845\n  args[0] = (useColors ? '%c' : '')                                                                                    // 846\n    + this.namespace                                                                                                   // 847\n    + (useColors ? ' %c' : ' ')                                                                                        // 848\n    + args[0]                                                                                                          // 849\n    + (useColors ? '%c ' : ' ')                                                                                        // 850\n    + '+' + exports.humanize(this.diff);                                                                               // 851\n                                                                                                                       // 852\n  if (!useColors) return args;                                                                                         // 853\n                                                                                                                       // 854\n  var c = 'color: ' + this.color;                                                                                      // 855\n  args = [args[0], c, 'color: inherit'].concat(Array.prototype.slice.call(args, 1));                                   // 856\n                                                                                                                       // 857\n  // the final \"%c\" is somewhat tricky, because there could be other                                                   // 858\n  // arguments passed either before or after the %c, so we need to                                                     // 859\n  // figure out the correct index to insert the CSS into                                                               // 860\n  var index = 0;                                                                                                       // 861\n  var lastC = 0;                                                                                                       // 862\n  args[0].replace(/%[a-z%]/g, function(match) {                                                                        // 863\n    if ('%%' === match) return;                                                                                        // 864\n    index++;                                                                                                           // 865\n    if ('%c' === match) {                                                                                              // 866\n      // we only are interested in the *last* %c                                                                       // 867\n      // (the user may have provided their own)                                                                        // 868\n      lastC = index;                                                                                                   // 869\n    }                                                                                                                  // 870\n  });                                                                                                                  // 871\n                                                                                                                       // 872\n  args.splice(lastC, 0, c);                                                                                            // 873\n  return args;                                                                                                         // 874\n}                                                                                                                      // 875\n                                                                                                                       // 876\n/**                                                                                                                    // 877\n * Invokes `console.log()` when available.                                                                             // 878\n * No-op when `console.log` is not a \"function\".                                                                       // 879\n *                                                                                                                     // 880\n * @api public                                                                                                         // 881\n */                                                                                                                    // 882\n                                                                                                                       // 883\nfunction log() {                                                                                                       // 884\n  // this hackery is required for IE8/9, where                                                                         // 885\n  // the `console.log` function doesn't have 'apply'                                                                   // 886\n  return 'object' === typeof console                                                                                   // 887\n    && console.log                                                                                                     // 888\n    && Function.prototype.apply.call(console.log, console, arguments);                                                 // 889\n}                                                                                                                      // 890\n                                                                                                                       // 891\n/**                                                                                                                    // 892\n * Save `namespaces`.                                                                                                  // 893\n *                                                                                                                     // 894\n * @param {String} namespaces                                                                                          // 895\n * @api private                                                                                                        // 896\n */                                                                                                                    // 897\n                                                                                                                       // 898\nfunction save(namespaces) {                                                                                            // 899\n  try {                                                                                                                // 900\n    if (null == namespaces) {                                                                                          // 901\n      exports.storage.removeItem('debug');                                                                             // 902\n    } else {                                                                                                           // 903\n      exports.storage.debug = namespaces;                                                                              // 904\n    }                                                                                                                  // 905\n  } catch(e) {}                                                                                                        // 906\n}                                                                                                                      // 907\n                                                                                                                       // 908\n/**                                                                                                                    // 909\n * Load `namespaces`.                                                                                                  // 910\n *                                                                                                                     // 911\n * @return {String} returns the previously persisted debug modes                                                       // 912\n * @api private                                                                                                        // 913\n */                                                                                                                    // 914\n                                                                                                                       // 915\nfunction load() {                                                                                                      // 916\n  var r;                                                                                                               // 917\n  try {                                                                                                                // 918\n    r = exports.storage.debug;                                                                                         // 919\n  } catch(e) {}                                                                                                        // 920\n  return r;                                                                                                            // 921\n}                                                                                                                      // 922\n                                                                                                                       // 923\n/**                                                                                                                    // 924\n * Enable namespaces listed in `localStorage.debug` initially.                                                         // 925\n */                                                                                                                    // 926\n                                                                                                                       // 927\nexports.enable(load());                                                                                                // 928\n                                                                                                                       // 929\n/**                                                                                                                    // 930\n * Localstorage attempts to return the localstorage.                                                                   // 931\n *                                                                                                                     // 932\n * This is necessary because safari throws                                                                             // 933\n * when a user disables cookies/localstorage                                                                           // 934\n * and you attempt to access it.                                                                                       // 935\n *                                                                                                                     // 936\n * @return {LocalStorage}                                                                                              // 937\n * @api private                                                                                                        // 938\n */                                                                                                                    // 939\n                                                                                                                       // 940\nfunction localstorage(){                                                                                               // 941\n  try {                                                                                                                // 942\n    return window.localStorage;                                                                                        // 943\n  } catch (e) {}                                                                                                       // 944\n}                                                                                                                      // 945\n                                                                                                                       // 946\n},{\"7\":7}],7:[function(require,module,exports){                                                                        // 947\n                                                                                                                       // 948\n/**                                                                                                                    // 949\n * This is the common logic for both the Node.js and web browser                                                       // 950\n * implementations of `debug()`.                                                                                       // 951\n *                                                                                                                     // 952\n * Expose `debug()` as the module.                                                                                     // 953\n */                                                                                                                    // 954\n                                                                                                                       // 955\nexports = module.exports = debug;                                                                                      // 956\nexports.coerce = coerce;                                                                                               // 957\nexports.disable = disable;                                                                                             // 958\nexports.enable = enable;                                                                                               // 959\nexports.enabled = enabled;                                                                                             // 960\nexports.humanize = require(8);                                                                                         // 961\n                                                                                                                       // 962\n/**                                                                                                                    // 963\n * The currently active debug mode names, and names to skip.                                                           // 964\n */                                                                                                                    // 965\n                                                                                                                       // 966\nexports.names = [];                                                                                                    // 967\nexports.skips = [];                                                                                                    // 968\n                                                                                                                       // 969\n/**                                                                                                                    // 970\n * Map of special \"%n\" handling functions, for the debug \"format\" argument.                                            // 971\n *                                                                                                                     // 972\n * Valid key names are a single, lowercased letter, i.e. \"n\".                                                          // 973\n */                                                                                                                    // 974\n                                                                                                                       // 975\nexports.formatters = {};                                                                                               // 976\n                                                                                                                       // 977\n/**                                                                                                                    // 978\n * Previously assigned color.                                                                                          // 979\n */                                                                                                                    // 980\n                                                                                                                       // 981\nvar prevColor = 0;                                                                                                     // 982\n                                                                                                                       // 983\n/**                                                                                                                    // 984\n * Previous log timestamp.                                                                                             // 985\n */                                                                                                                    // 986\n                                                                                                                       // 987\nvar prevTime;                                                                                                          // 988\n                                                                                                                       // 989\n/**                                                                                                                    // 990\n * Select a color.                                                                                                     // 991\n *                                                                                                                     // 992\n * @return {Number}                                                                                                    // 993\n * @api private                                                                                                        // 994\n */                                                                                                                    // 995\n                                                                                                                       // 996\nfunction selectColor() {                                                                                               // 997\n  return exports.colors[prevColor++ % exports.colors.length];                                                          // 998\n}                                                                                                                      // 999\n                                                                                                                       // 1000\n/**                                                                                                                    // 1001\n * Create a debugger with the given `namespace`.                                                                       // 1002\n *                                                                                                                     // 1003\n * @param {String} namespace                                                                                           // 1004\n * @return {Function}                                                                                                  // 1005\n * @api public                                                                                                         // 1006\n */                                                                                                                    // 1007\n                                                                                                                       // 1008\nfunction debug(namespace) {                                                                                            // 1009\n                                                                                                                       // 1010\n  // define the `disabled` version                                                                                     // 1011\n  function disabled() {                                                                                                // 1012\n  }                                                                                                                    // 1013\n  disabled.enabled = false;                                                                                            // 1014\n                                                                                                                       // 1015\n  // define the `enabled` version                                                                                      // 1016\n  function enabled() {                                                                                                 // 1017\n                                                                                                                       // 1018\n    var self = enabled;                                                                                                // 1019\n                                                                                                                       // 1020\n    // set `diff` timestamp                                                                                            // 1021\n    var curr = +new Date();                                                                                            // 1022\n    var ms = curr - (prevTime || curr);                                                                                // 1023\n    self.diff = ms;                                                                                                    // 1024\n    self.prev = prevTime;                                                                                              // 1025\n    self.curr = curr;                                                                                                  // 1026\n    prevTime = curr;                                                                                                   // 1027\n                                                                                                                       // 1028\n    // add the `color` if not set                                                                                      // 1029\n    if (null == self.useColors) self.useColors = exports.useColors();                                                  // 1030\n    if (null == self.color && self.useColors) self.color = selectColor();                                              // 1031\n                                                                                                                       // 1032\n    var args = Array.prototype.slice.call(arguments);                                                                  // 1033\n                                                                                                                       // 1034\n    args[0] = exports.coerce(args[0]);                                                                                 // 1035\n                                                                                                                       // 1036\n    if ('string' !== typeof args[0]) {                                                                                 // 1037\n      // anything else let's inspect with %o                                                                           // 1038\n      args = ['%o'].concat(args);                                                                                      // 1039\n    }                                                                                                                  // 1040\n                                                                                                                       // 1041\n    // apply any `formatters` transformations                                                                          // 1042\n    var index = 0;                                                                                                     // 1043\n    args[0] = args[0].replace(/%([a-z%])/g, function(match, format) {                                                  // 1044\n      // if we encounter an escaped % then don't increase the array index                                              // 1045\n      if (match === '%%') return match;                                                                                // 1046\n      index++;                                                                                                         // 1047\n      var formatter = exports.formatters[format];                                                                      // 1048\n      if ('function' === typeof formatter) {                                                                           // 1049\n        var val = args[index];                                                                                         // 1050\n        match = formatter.call(self, val);                                                                             // 1051\n                                                                                                                       // 1052\n        // now we need to remove `args[index]` since it's inlined in the `format`                                      // 1053\n        args.splice(index, 1);                                                                                         // 1054\n        index--;                                                                                                       // 1055\n      }                                                                                                                // 1056\n      return match;                                                                                                    // 1057\n    });                                                                                                                // 1058\n                                                                                                                       // 1059\n    if ('function' === typeof exports.formatArgs) {                                                                    // 1060\n      args = exports.formatArgs.apply(self, args);                                                                     // 1061\n    }                                                                                                                  // 1062\n    var logFn = enabled.log || exports.log || console.log.bind(console);                                               // 1063\n    logFn.apply(self, args);                                                                                           // 1064\n  }                                                                                                                    // 1065\n  enabled.enabled = true;                                                                                              // 1066\n                                                                                                                       // 1067\n  var fn = exports.enabled(namespace) ? enabled : disabled;                                                            // 1068\n                                                                                                                       // 1069\n  fn.namespace = namespace;                                                                                            // 1070\n                                                                                                                       // 1071\n  return fn;                                                                                                           // 1072\n}                                                                                                                      // 1073\n                                                                                                                       // 1074\n/**                                                                                                                    // 1075\n * Enables a debug mode by namespaces. This can include modes                                                          // 1076\n * separated by a colon and wildcards.                                                                                 // 1077\n *                                                                                                                     // 1078\n * @param {String} namespaces                                                                                          // 1079\n * @api public                                                                                                         // 1080\n */                                                                                                                    // 1081\n                                                                                                                       // 1082\nfunction enable(namespaces) {                                                                                          // 1083\n  exports.save(namespaces);                                                                                            // 1084\n                                                                                                                       // 1085\n  var split = (namespaces || '').split(/[\\s,]+/);                                                                      // 1086\n  var len = split.length;                                                                                              // 1087\n                                                                                                                       // 1088\n  for (var i = 0; i < len; i++) {                                                                                      // 1089\n    if (!split[i]) continue; // ignore empty strings                                                                   // 1090\n    namespaces = split[i].replace(/\\*/g, '.*?');                                                                       // 1091\n    if (namespaces[0] === '-') {                                                                                       // 1092\n      exports.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));                                                // 1093\n    } else {                                                                                                           // 1094\n      exports.names.push(new RegExp('^' + namespaces + '$'));                                                          // 1095\n    }                                                                                                                  // 1096\n  }                                                                                                                    // 1097\n}                                                                                                                      // 1098\n                                                                                                                       // 1099\n/**                                                                                                                    // 1100\n * Disable debug output.                                                                                               // 1101\n *                                                                                                                     // 1102\n * @api public                                                                                                         // 1103\n */                                                                                                                    // 1104\n                                                                                                                       // 1105\nfunction disable() {                                                                                                   // 1106\n  exports.enable('');                                                                                                  // 1107\n}                                                                                                                      // 1108\n                                                                                                                       // 1109\n/**                                                                                                                    // 1110\n * Returns true if the given mode name is enabled, false otherwise.                                                    // 1111\n *                                                                                                                     // 1112\n * @param {String} name                                                                                                // 1113\n * @return {Boolean}                                                                                                   // 1114\n * @api public                                                                                                         // 1115\n */                                                                                                                    // 1116\n                                                                                                                       // 1117\nfunction enabled(name) {                                                                                               // 1118\n  var i, len;                                                                                                          // 1119\n  for (i = 0, len = exports.skips.length; i < len; i++) {                                                              // 1120\n    if (exports.skips[i].test(name)) {                                                                                 // 1121\n      return false;                                                                                                    // 1122\n    }                                                                                                                  // 1123\n  }                                                                                                                    // 1124\n  for (i = 0, len = exports.names.length; i < len; i++) {                                                              // 1125\n    if (exports.names[i].test(name)) {                                                                                 // 1126\n      return true;                                                                                                     // 1127\n    }                                                                                                                  // 1128\n  }                                                                                                                    // 1129\n  return false;                                                                                                        // 1130\n}                                                                                                                      // 1131\n                                                                                                                       // 1132\n/**                                                                                                                    // 1133\n * Coerce `val`.                                                                                                       // 1134\n *                                                                                                                     // 1135\n * @param {Mixed} val                                                                                                  // 1136\n * @return {Mixed}                                                                                                     // 1137\n * @api private                                                                                                        // 1138\n */                                                                                                                    // 1139\n                                                                                                                       // 1140\nfunction coerce(val) {                                                                                                 // 1141\n  if (val instanceof Error) return val.stack || val.message;                                                           // 1142\n  return val;                                                                                                          // 1143\n}                                                                                                                      // 1144\n                                                                                                                       // 1145\n},{\"8\":8}],8:[function(require,module,exports){                                                                        // 1146\n/**                                                                                                                    // 1147\n * Helpers.                                                                                                            // 1148\n */                                                                                                                    // 1149\n                                                                                                                       // 1150\nvar s = 1000;                                                                                                          // 1151\nvar m = s * 60;                                                                                                        // 1152\nvar h = m * 60;                                                                                                        // 1153\nvar d = h * 24;                                                                                                        // 1154\nvar y = d * 365.25;                                                                                                    // 1155\n                                                                                                                       // 1156\n/**                                                                                                                    // 1157\n * Parse or format the given `val`.                                                                                    // 1158\n *                                                                                                                     // 1159\n * Options:                                                                                                            // 1160\n *                                                                                                                     // 1161\n *  - `long` verbose formatting [false]                                                                                // 1162\n *                                                                                                                     // 1163\n * @param {String|Number} val                                                                                          // 1164\n * @param {Object} options                                                                                             // 1165\n * @return {String|Number}                                                                                             // 1166\n * @api public                                                                                                         // 1167\n */                                                                                                                    // 1168\n                                                                                                                       // 1169\nmodule.exports = function(val, options){                                                                               // 1170\n  options = options || {};                                                                                             // 1171\n  if ('string' == typeof val) return parse(val);                                                                       // 1172\n  // long, short were \"future reserved words in js\", YUI compressor fail on them                                       // 1173\n  // https://github.com/algolia/algoliasearch-client-js/issues/113#issuecomment-111978606                              // 1174\n  // https://github.com/yui/yuicompressor/issues/47                                                                    // 1175\n  // https://github.com/rauchg/ms.js/pull/40                                                                           // 1176\n  return options['long']                                                                                               // 1177\n    ? _long(val)                                                                                                       // 1178\n    : _short(val);                                                                                                     // 1179\n};                                                                                                                     // 1180\n                                                                                                                       // 1181\n/**                                                                                                                    // 1182\n * Parse the given `str` and return milliseconds.                                                                      // 1183\n *                                                                                                                     // 1184\n * @param {String} str                                                                                                 // 1185\n * @return {Number}                                                                                                    // 1186\n * @api private                                                                                                        // 1187\n */                                                                                                                    // 1188\n                                                                                                                       // 1189\nfunction parse(str) {                                                                                                  // 1190\n  str = '' + str;                                                                                                      // 1191\n  if (str.length > 10000) return;                                                                                      // 1192\n  var match = /^((?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(str);\n  if (!match) return;                                                                                                  // 1194\n  var n = parseFloat(match[1]);                                                                                        // 1195\n  var type = (match[2] || 'ms').toLowerCase();                                                                         // 1196\n  switch (type) {                                                                                                      // 1197\n    case 'years':                                                                                                      // 1198\n    case 'year':                                                                                                       // 1199\n    case 'yrs':                                                                                                        // 1200\n    case 'yr':                                                                                                         // 1201\n    case 'y':                                                                                                          // 1202\n      return n * y;                                                                                                    // 1203\n    case 'days':                                                                                                       // 1204\n    case 'day':                                                                                                        // 1205\n    case 'd':                                                                                                          // 1206\n      return n * d;                                                                                                    // 1207\n    case 'hours':                                                                                                      // 1208\n    case 'hour':                                                                                                       // 1209\n    case 'hrs':                                                                                                        // 1210\n    case 'hr':                                                                                                         // 1211\n    case 'h':                                                                                                          // 1212\n      return n * h;                                                                                                    // 1213\n    case 'minutes':                                                                                                    // 1214\n    case 'minute':                                                                                                     // 1215\n    case 'mins':                                                                                                       // 1216\n    case 'min':                                                                                                        // 1217\n    case 'm':                                                                                                          // 1218\n      return n * m;                                                                                                    // 1219\n    case 'seconds':                                                                                                    // 1220\n    case 'second':                                                                                                     // 1221\n    case 'secs':                                                                                                       // 1222\n    case 'sec':                                                                                                        // 1223\n    case 's':                                                                                                          // 1224\n      return n * s;                                                                                                    // 1225\n    case 'milliseconds':                                                                                               // 1226\n    case 'millisecond':                                                                                                // 1227\n    case 'msecs':                                                                                                      // 1228\n    case 'msec':                                                                                                       // 1229\n    case 'ms':                                                                                                         // 1230\n      return n;                                                                                                        // 1231\n  }                                                                                                                    // 1232\n}                                                                                                                      // 1233\n                                                                                                                       // 1234\n/**                                                                                                                    // 1235\n * Short format for `ms`.                                                                                              // 1236\n *                                                                                                                     // 1237\n * @param {Number} ms                                                                                                  // 1238\n * @return {String}                                                                                                    // 1239\n * @api private                                                                                                        // 1240\n */                                                                                                                    // 1241\n                                                                                                                       // 1242\nfunction _short(ms) {                                                                                                  // 1243\n  if (ms >= d) return Math.round(ms / d) + 'd';                                                                        // 1244\n  if (ms >= h) return Math.round(ms / h) + 'h';                                                                        // 1245\n  if (ms >= m) return Math.round(ms / m) + 'm';                                                                        // 1246\n  if (ms >= s) return Math.round(ms / s) + 's';                                                                        // 1247\n  return ms + 'ms';                                                                                                    // 1248\n}                                                                                                                      // 1249\n                                                                                                                       // 1250\n/**                                                                                                                    // 1251\n * Long format for `ms`.                                                                                               // 1252\n *                                                                                                                     // 1253\n * @param {Number} ms                                                                                                  // 1254\n * @return {String}                                                                                                    // 1255\n * @api private                                                                                                        // 1256\n */                                                                                                                    // 1257\n                                                                                                                       // 1258\nfunction _long(ms) {                                                                                                   // 1259\n  return plural(ms, d, 'day')                                                                                          // 1260\n    || plural(ms, h, 'hour')                                                                                           // 1261\n    || plural(ms, m, 'minute')                                                                                         // 1262\n    || plural(ms, s, 'second')                                                                                         // 1263\n    || ms + ' ms';                                                                                                     // 1264\n}                                                                                                                      // 1265\n                                                                                                                       // 1266\n/**                                                                                                                    // 1267\n * Pluralization helper.                                                                                               // 1268\n */                                                                                                                    // 1269\n                                                                                                                       // 1270\nfunction plural(ms, n, name) {                                                                                         // 1271\n  if (ms < n) return;                                                                                                  // 1272\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;                                                            // 1273\n  return Math.ceil(ms / n) + ' ' + name + 's';                                                                         // 1274\n}                                                                                                                      // 1275\n                                                                                                                       // 1276\n},{}],9:[function(require,module,exports){                                                                             // 1277\n(function (process,global){                                                                                            // 1278\n/*!                                                                                                                    // 1279\n * @overview es6-promise - a tiny implementation of Promises/A+.                                                       // 1280\n * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)\n * @license   Licensed under MIT license                                                                               // 1282\n *            See https://raw.githubusercontent.com/jakearchibald/es6-promise/master/LICENSE                           // 1283\n * @version   3.0.2                                                                                                    // 1284\n */                                                                                                                    // 1285\n                                                                                                                       // 1286\n(function() {                                                                                                          // 1287\n    \"use strict\";                                                                                                      // 1288\n    function lib$es6$promise$utils$$objectOrFunction(x) {                                                              // 1289\n      return typeof x === 'function' || (typeof x === 'object' && x !== null);                                         // 1290\n    }                                                                                                                  // 1291\n                                                                                                                       // 1292\n    function lib$es6$promise$utils$$isFunction(x) {                                                                    // 1293\n      return typeof x === 'function';                                                                                  // 1294\n    }                                                                                                                  // 1295\n                                                                                                                       // 1296\n    function lib$es6$promise$utils$$isMaybeThenable(x) {                                                               // 1297\n      return typeof x === 'object' && x !== null;                                                                      // 1298\n    }                                                                                                                  // 1299\n                                                                                                                       // 1300\n    var lib$es6$promise$utils$$_isArray;                                                                               // 1301\n    if (!Array.isArray) {                                                                                              // 1302\n      lib$es6$promise$utils$$_isArray = function (x) {                                                                 // 1303\n        return Object.prototype.toString.call(x) === '[object Array]';                                                 // 1304\n      };                                                                                                               // 1305\n    } else {                                                                                                           // 1306\n      lib$es6$promise$utils$$_isArray = Array.isArray;                                                                 // 1307\n    }                                                                                                                  // 1308\n                                                                                                                       // 1309\n    var lib$es6$promise$utils$$isArray = lib$es6$promise$utils$$_isArray;                                              // 1310\n    var lib$es6$promise$asap$$len = 0;                                                                                 // 1311\n    var lib$es6$promise$asap$$toString = {}.toString;                                                                  // 1312\n    var lib$es6$promise$asap$$vertxNext;                                                                               // 1313\n    var lib$es6$promise$asap$$customSchedulerFn;                                                                       // 1314\n                                                                                                                       // 1315\n    var lib$es6$promise$asap$$asap = function asap(callback, arg) {                                                    // 1316\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len] = callback;                                               // 1317\n      lib$es6$promise$asap$$queue[lib$es6$promise$asap$$len + 1] = arg;                                                // 1318\n      lib$es6$promise$asap$$len += 2;                                                                                  // 1319\n      if (lib$es6$promise$asap$$len === 2) {                                                                           // 1320\n        // If len is 2, that means that we need to schedule an async flush.                                            // 1321\n        // If additional callbacks are queued before the queue is flushed, they                                        // 1322\n        // will be processed by this flush that we are scheduling.                                                     // 1323\n        if (lib$es6$promise$asap$$customSchedulerFn) {                                                                 // 1324\n          lib$es6$promise$asap$$customSchedulerFn(lib$es6$promise$asap$$flush);                                        // 1325\n        } else {                                                                                                       // 1326\n          lib$es6$promise$asap$$scheduleFlush();                                                                       // 1327\n        }                                                                                                              // 1328\n      }                                                                                                                // 1329\n    }                                                                                                                  // 1330\n                                                                                                                       // 1331\n    function lib$es6$promise$asap$$setScheduler(scheduleFn) {                                                          // 1332\n      lib$es6$promise$asap$$customSchedulerFn = scheduleFn;                                                            // 1333\n    }                                                                                                                  // 1334\n                                                                                                                       // 1335\n    function lib$es6$promise$asap$$setAsap(asapFn) {                                                                   // 1336\n      lib$es6$promise$asap$$asap = asapFn;                                                                             // 1337\n    }                                                                                                                  // 1338\n                                                                                                                       // 1339\n    var lib$es6$promise$asap$$browserWindow = (typeof window !== 'undefined') ? window : undefined;                    // 1340\n    var lib$es6$promise$asap$$browserGlobal = lib$es6$promise$asap$$browserWindow || {};                               // 1341\n    var lib$es6$promise$asap$$BrowserMutationObserver = lib$es6$promise$asap$$browserGlobal.MutationObserver || lib$es6$promise$asap$$browserGlobal.WebKitMutationObserver;\n    var lib$es6$promise$asap$$isNode = typeof process !== 'undefined' && {}.toString.call(process) === '[object process]';\n                                                                                                                       // 1344\n    // test for web worker but not in IE10                                                                             // 1345\n    var lib$es6$promise$asap$$isWorker = typeof Uint8ClampedArray !== 'undefined' &&                                   // 1346\n      typeof importScripts !== 'undefined' &&                                                                          // 1347\n      typeof MessageChannel !== 'undefined';                                                                           // 1348\n                                                                                                                       // 1349\n    // node                                                                                                            // 1350\n    function lib$es6$promise$asap$$useNextTick() {                                                                     // 1351\n      // node version 0.10.x displays a deprecation warning when nextTick is used recursively                          // 1352\n      // see https://github.com/cujojs/when/issues/410 for details                                                     // 1353\n      return function() {                                                                                              // 1354\n        process.nextTick(lib$es6$promise$asap$$flush);                                                                 // 1355\n      };                                                                                                               // 1356\n    }                                                                                                                  // 1357\n                                                                                                                       // 1358\n    // vertx                                                                                                           // 1359\n    function lib$es6$promise$asap$$useVertxTimer() {                                                                   // 1360\n      return function() {                                                                                              // 1361\n        lib$es6$promise$asap$$vertxNext(lib$es6$promise$asap$$flush);                                                  // 1362\n      };                                                                                                               // 1363\n    }                                                                                                                  // 1364\n                                                                                                                       // 1365\n    function lib$es6$promise$asap$$useMutationObserver() {                                                             // 1366\n      var iterations = 0;                                                                                              // 1367\n      var observer = new lib$es6$promise$asap$$BrowserMutationObserver(lib$es6$promise$asap$$flush);                   // 1368\n      var node = document.createTextNode('');                                                                          // 1369\n      observer.observe(node, { characterData: true });                                                                 // 1370\n                                                                                                                       // 1371\n      return function() {                                                                                              // 1372\n        node.data = (iterations = ++iterations % 2);                                                                   // 1373\n      };                                                                                                               // 1374\n    }                                                                                                                  // 1375\n                                                                                                                       // 1376\n    // web worker                                                                                                      // 1377\n    function lib$es6$promise$asap$$useMessageChannel() {                                                               // 1378\n      var channel = new MessageChannel();                                                                              // 1379\n      channel.port1.onmessage = lib$es6$promise$asap$$flush;                                                           // 1380\n      return function () {                                                                                             // 1381\n        channel.port2.postMessage(0);                                                                                  // 1382\n      };                                                                                                               // 1383\n    }                                                                                                                  // 1384\n                                                                                                                       // 1385\n    function lib$es6$promise$asap$$useSetTimeout() {                                                                   // 1386\n      return function() {                                                                                              // 1387\n        setTimeout(lib$es6$promise$asap$$flush, 1);                                                                    // 1388\n      };                                                                                                               // 1389\n    }                                                                                                                  // 1390\n                                                                                                                       // 1391\n    var lib$es6$promise$asap$$queue = new Array(1000);                                                                 // 1392\n    function lib$es6$promise$asap$$flush() {                                                                           // 1393\n      for (var i = 0; i < lib$es6$promise$asap$$len; i+=2) {                                                           // 1394\n        var callback = lib$es6$promise$asap$$queue[i];                                                                 // 1395\n        var arg = lib$es6$promise$asap$$queue[i+1];                                                                    // 1396\n                                                                                                                       // 1397\n        callback(arg);                                                                                                 // 1398\n                                                                                                                       // 1399\n        lib$es6$promise$asap$$queue[i] = undefined;                                                                    // 1400\n        lib$es6$promise$asap$$queue[i+1] = undefined;                                                                  // 1401\n      }                                                                                                                // 1402\n                                                                                                                       // 1403\n      lib$es6$promise$asap$$len = 0;                                                                                   // 1404\n    }                                                                                                                  // 1405\n                                                                                                                       // 1406\n    function lib$es6$promise$asap$$attemptVertx() {                                                                    // 1407\n      try {                                                                                                            // 1408\n        var r = require;                                                                                               // 1409\n        var vertx = r('vertx');                                                                                        // 1410\n        lib$es6$promise$asap$$vertxNext = vertx.runOnLoop || vertx.runOnContext;                                       // 1411\n        return lib$es6$promise$asap$$useVertxTimer();                                                                  // 1412\n      } catch(e) {                                                                                                     // 1413\n        return lib$es6$promise$asap$$useSetTimeout();                                                                  // 1414\n      }                                                                                                                // 1415\n    }                                                                                                                  // 1416\n                                                                                                                       // 1417\n    var lib$es6$promise$asap$$scheduleFlush;                                                                           // 1418\n    // Decide what async method to use to triggering processing of queued callbacks:                                   // 1419\n    if (lib$es6$promise$asap$$isNode) {                                                                                // 1420\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useNextTick();                                       // 1421\n    } else if (lib$es6$promise$asap$$BrowserMutationObserver) {                                                        // 1422\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMutationObserver();                               // 1423\n    } else if (lib$es6$promise$asap$$isWorker) {                                                                       // 1424\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useMessageChannel();                                 // 1425\n    } else if (lib$es6$promise$asap$$browserWindow === undefined && typeof require === 'function') {                   // 1426\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$attemptVertx();                                      // 1427\n    } else {                                                                                                           // 1428\n      lib$es6$promise$asap$$scheduleFlush = lib$es6$promise$asap$$useSetTimeout();                                     // 1429\n    }                                                                                                                  // 1430\n                                                                                                                       // 1431\n    function lib$es6$promise$$internal$$noop() {}                                                                      // 1432\n                                                                                                                       // 1433\n    var lib$es6$promise$$internal$$PENDING   = void 0;                                                                 // 1434\n    var lib$es6$promise$$internal$$FULFILLED = 1;                                                                      // 1435\n    var lib$es6$promise$$internal$$REJECTED  = 2;                                                                      // 1436\n                                                                                                                       // 1437\n    var lib$es6$promise$$internal$$GET_THEN_ERROR = new lib$es6$promise$$internal$$ErrorObject();                      // 1438\n                                                                                                                       // 1439\n    function lib$es6$promise$$internal$$selfFulfillment() {                                                            // 1440\n      return new TypeError(\"You cannot resolve a promise with itself\");                                                // 1441\n    }                                                                                                                  // 1442\n                                                                                                                       // 1443\n    function lib$es6$promise$$internal$$cannotReturnOwn() {                                                            // 1444\n      return new TypeError('A promises callback cannot return that same promise.');                                    // 1445\n    }                                                                                                                  // 1446\n                                                                                                                       // 1447\n    function lib$es6$promise$$internal$$getThen(promise) {                                                             // 1448\n      try {                                                                                                            // 1449\n        return promise.then;                                                                                           // 1450\n      } catch(error) {                                                                                                 // 1451\n        lib$es6$promise$$internal$$GET_THEN_ERROR.error = error;                                                       // 1452\n        return lib$es6$promise$$internal$$GET_THEN_ERROR;                                                              // 1453\n      }                                                                                                                // 1454\n    }                                                                                                                  // 1455\n                                                                                                                       // 1456\n    function lib$es6$promise$$internal$$tryThen(then, value, fulfillmentHandler, rejectionHandler) {                   // 1457\n      try {                                                                                                            // 1458\n        then.call(value, fulfillmentHandler, rejectionHandler);                                                        // 1459\n      } catch(e) {                                                                                                     // 1460\n        return e;                                                                                                      // 1461\n      }                                                                                                                // 1462\n    }                                                                                                                  // 1463\n                                                                                                                       // 1464\n    function lib$es6$promise$$internal$$handleForeignThenable(promise, thenable, then) {                               // 1465\n       lib$es6$promise$asap$$asap(function(promise) {                                                                  // 1466\n        var sealed = false;                                                                                            // 1467\n        var error = lib$es6$promise$$internal$$tryThen(then, thenable, function(value) {                               // 1468\n          if (sealed) { return; }                                                                                      // 1469\n          sealed = true;                                                                                               // 1470\n          if (thenable !== value) {                                                                                    // 1471\n            lib$es6$promise$$internal$$resolve(promise, value);                                                        // 1472\n          } else {                                                                                                     // 1473\n            lib$es6$promise$$internal$$fulfill(promise, value);                                                        // 1474\n          }                                                                                                            // 1475\n        }, function(reason) {                                                                                          // 1476\n          if (sealed) { return; }                                                                                      // 1477\n          sealed = true;                                                                                               // 1478\n                                                                                                                       // 1479\n          lib$es6$promise$$internal$$reject(promise, reason);                                                          // 1480\n        }, 'Settle: ' + (promise._label || ' unknown promise'));                                                       // 1481\n                                                                                                                       // 1482\n        if (!sealed && error) {                                                                                        // 1483\n          sealed = true;                                                                                               // 1484\n          lib$es6$promise$$internal$$reject(promise, error);                                                           // 1485\n        }                                                                                                              // 1486\n      }, promise);                                                                                                     // 1487\n    }                                                                                                                  // 1488\n                                                                                                                       // 1489\n    function lib$es6$promise$$internal$$handleOwnThenable(promise, thenable) {                                         // 1490\n      if (thenable._state === lib$es6$promise$$internal$$FULFILLED) {                                                  // 1491\n        lib$es6$promise$$internal$$fulfill(promise, thenable._result);                                                 // 1492\n      } else if (thenable._state === lib$es6$promise$$internal$$REJECTED) {                                            // 1493\n        lib$es6$promise$$internal$$reject(promise, thenable._result);                                                  // 1494\n      } else {                                                                                                         // 1495\n        lib$es6$promise$$internal$$subscribe(thenable, undefined, function(value) {                                    // 1496\n          lib$es6$promise$$internal$$resolve(promise, value);                                                          // 1497\n        }, function(reason) {                                                                                          // 1498\n          lib$es6$promise$$internal$$reject(promise, reason);                                                          // 1499\n        });                                                                                                            // 1500\n      }                                                                                                                // 1501\n    }                                                                                                                  // 1502\n                                                                                                                       // 1503\n    function lib$es6$promise$$internal$$handleMaybeThenable(promise, maybeThenable) {                                  // 1504\n      if (maybeThenable.constructor === promise.constructor) {                                                         // 1505\n        lib$es6$promise$$internal$$handleOwnThenable(promise, maybeThenable);                                          // 1506\n      } else {                                                                                                         // 1507\n        var then = lib$es6$promise$$internal$$getThen(maybeThenable);                                                  // 1508\n                                                                                                                       // 1509\n        if (then === lib$es6$promise$$internal$$GET_THEN_ERROR) {                                                      // 1510\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$GET_THEN_ERROR.error);                 // 1511\n        } else if (then === undefined) {                                                                               // 1512\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);                                                  // 1513\n        } else if (lib$es6$promise$utils$$isFunction(then)) {                                                          // 1514\n          lib$es6$promise$$internal$$handleForeignThenable(promise, maybeThenable, then);                              // 1515\n        } else {                                                                                                       // 1516\n          lib$es6$promise$$internal$$fulfill(promise, maybeThenable);                                                  // 1517\n        }                                                                                                              // 1518\n      }                                                                                                                // 1519\n    }                                                                                                                  // 1520\n                                                                                                                       // 1521\n    function lib$es6$promise$$internal$$resolve(promise, value) {                                                      // 1522\n      if (promise === value) {                                                                                         // 1523\n        lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$selfFulfillment());                      // 1524\n      } else if (lib$es6$promise$utils$$objectOrFunction(value)) {                                                     // 1525\n        lib$es6$promise$$internal$$handleMaybeThenable(promise, value);                                                // 1526\n      } else {                                                                                                         // 1527\n        lib$es6$promise$$internal$$fulfill(promise, value);                                                            // 1528\n      }                                                                                                                // 1529\n    }                                                                                                                  // 1530\n                                                                                                                       // 1531\n    function lib$es6$promise$$internal$$publishRejection(promise) {                                                    // 1532\n      if (promise._onerror) {                                                                                          // 1533\n        promise._onerror(promise._result);                                                                             // 1534\n      }                                                                                                                // 1535\n                                                                                                                       // 1536\n      lib$es6$promise$$internal$$publish(promise);                                                                     // 1537\n    }                                                                                                                  // 1538\n                                                                                                                       // 1539\n    function lib$es6$promise$$internal$$fulfill(promise, value) {                                                      // 1540\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }                                           // 1541\n                                                                                                                       // 1542\n      promise._result = value;                                                                                         // 1543\n      promise._state = lib$es6$promise$$internal$$FULFILLED;                                                           // 1544\n                                                                                                                       // 1545\n      if (promise._subscribers.length !== 0) {                                                                         // 1546\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, promise);                                       // 1547\n      }                                                                                                                // 1548\n    }                                                                                                                  // 1549\n                                                                                                                       // 1550\n    function lib$es6$promise$$internal$$reject(promise, reason) {                                                      // 1551\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) { return; }                                           // 1552\n      promise._state = lib$es6$promise$$internal$$REJECTED;                                                            // 1553\n      promise._result = reason;                                                                                        // 1554\n                                                                                                                       // 1555\n      lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publishRejection, promise);                                // 1556\n    }                                                                                                                  // 1557\n                                                                                                                       // 1558\n    function lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection) {                         // 1559\n      var subscribers = parent._subscribers;                                                                           // 1560\n      var length = subscribers.length;                                                                                 // 1561\n                                                                                                                       // 1562\n      parent._onerror = null;                                                                                          // 1563\n                                                                                                                       // 1564\n      subscribers[length] = child;                                                                                     // 1565\n      subscribers[length + lib$es6$promise$$internal$$FULFILLED] = onFulfillment;                                      // 1566\n      subscribers[length + lib$es6$promise$$internal$$REJECTED]  = onRejection;                                        // 1567\n                                                                                                                       // 1568\n      if (length === 0 && parent._state) {                                                                             // 1569\n        lib$es6$promise$asap$$asap(lib$es6$promise$$internal$$publish, parent);                                        // 1570\n      }                                                                                                                // 1571\n    }                                                                                                                  // 1572\n                                                                                                                       // 1573\n    function lib$es6$promise$$internal$$publish(promise) {                                                             // 1574\n      var subscribers = promise._subscribers;                                                                          // 1575\n      var settled = promise._state;                                                                                    // 1576\n                                                                                                                       // 1577\n      if (subscribers.length === 0) { return; }                                                                        // 1578\n                                                                                                                       // 1579\n      var child, callback, detail = promise._result;                                                                   // 1580\n                                                                                                                       // 1581\n      for (var i = 0; i < subscribers.length; i += 3) {                                                                // 1582\n        child = subscribers[i];                                                                                        // 1583\n        callback = subscribers[i + settled];                                                                           // 1584\n                                                                                                                       // 1585\n        if (child) {                                                                                                   // 1586\n          lib$es6$promise$$internal$$invokeCallback(settled, child, callback, detail);                                 // 1587\n        } else {                                                                                                       // 1588\n          callback(detail);                                                                                            // 1589\n        }                                                                                                              // 1590\n      }                                                                                                                // 1591\n                                                                                                                       // 1592\n      promise._subscribers.length = 0;                                                                                 // 1593\n    }                                                                                                                  // 1594\n                                                                                                                       // 1595\n    function lib$es6$promise$$internal$$ErrorObject() {                                                                // 1596\n      this.error = null;                                                                                               // 1597\n    }                                                                                                                  // 1598\n                                                                                                                       // 1599\n    var lib$es6$promise$$internal$$TRY_CATCH_ERROR = new lib$es6$promise$$internal$$ErrorObject();                     // 1600\n                                                                                                                       // 1601\n    function lib$es6$promise$$internal$$tryCatch(callback, detail) {                                                   // 1602\n      try {                                                                                                            // 1603\n        return callback(detail);                                                                                       // 1604\n      } catch(e) {                                                                                                     // 1605\n        lib$es6$promise$$internal$$TRY_CATCH_ERROR.error = e;                                                          // 1606\n        return lib$es6$promise$$internal$$TRY_CATCH_ERROR;                                                             // 1607\n      }                                                                                                                // 1608\n    }                                                                                                                  // 1609\n                                                                                                                       // 1610\n    function lib$es6$promise$$internal$$invokeCallback(settled, promise, callback, detail) {                           // 1611\n      var hasCallback = lib$es6$promise$utils$$isFunction(callback),                                                   // 1612\n          value, error, succeeded, failed;                                                                             // 1613\n                                                                                                                       // 1614\n      if (hasCallback) {                                                                                               // 1615\n        value = lib$es6$promise$$internal$$tryCatch(callback, detail);                                                 // 1616\n                                                                                                                       // 1617\n        if (value === lib$es6$promise$$internal$$TRY_CATCH_ERROR) {                                                    // 1618\n          failed = true;                                                                                               // 1619\n          error = value.error;                                                                                         // 1620\n          value = null;                                                                                                // 1621\n        } else {                                                                                                       // 1622\n          succeeded = true;                                                                                            // 1623\n        }                                                                                                              // 1624\n                                                                                                                       // 1625\n        if (promise === value) {                                                                                       // 1626\n          lib$es6$promise$$internal$$reject(promise, lib$es6$promise$$internal$$cannotReturnOwn());                    // 1627\n          return;                                                                                                      // 1628\n        }                                                                                                              // 1629\n                                                                                                                       // 1630\n      } else {                                                                                                         // 1631\n        value = detail;                                                                                                // 1632\n        succeeded = true;                                                                                              // 1633\n      }                                                                                                                // 1634\n                                                                                                                       // 1635\n      if (promise._state !== lib$es6$promise$$internal$$PENDING) {                                                     // 1636\n        // noop                                                                                                        // 1637\n      } else if (hasCallback && succeeded) {                                                                           // 1638\n        lib$es6$promise$$internal$$resolve(promise, value);                                                            // 1639\n      } else if (failed) {                                                                                             // 1640\n        lib$es6$promise$$internal$$reject(promise, error);                                                             // 1641\n      } else if (settled === lib$es6$promise$$internal$$FULFILLED) {                                                   // 1642\n        lib$es6$promise$$internal$$fulfill(promise, value);                                                            // 1643\n      } else if (settled === lib$es6$promise$$internal$$REJECTED) {                                                    // 1644\n        lib$es6$promise$$internal$$reject(promise, value);                                                             // 1645\n      }                                                                                                                // 1646\n    }                                                                                                                  // 1647\n                                                                                                                       // 1648\n    function lib$es6$promise$$internal$$initializePromise(promise, resolver) {                                         // 1649\n      try {                                                                                                            // 1650\n        resolver(function resolvePromise(value){                                                                       // 1651\n          lib$es6$promise$$internal$$resolve(promise, value);                                                          // 1652\n        }, function rejectPromise(reason) {                                                                            // 1653\n          lib$es6$promise$$internal$$reject(promise, reason);                                                          // 1654\n        });                                                                                                            // 1655\n      } catch(e) {                                                                                                     // 1656\n        lib$es6$promise$$internal$$reject(promise, e);                                                                 // 1657\n      }                                                                                                                // 1658\n    }                                                                                                                  // 1659\n                                                                                                                       // 1660\n    function lib$es6$promise$enumerator$$Enumerator(Constructor, input) {                                              // 1661\n      var enumerator = this;                                                                                           // 1662\n                                                                                                                       // 1663\n      enumerator._instanceConstructor = Constructor;                                                                   // 1664\n      enumerator.promise = new Constructor(lib$es6$promise$$internal$$noop);                                           // 1665\n                                                                                                                       // 1666\n      if (enumerator._validateInput(input)) {                                                                          // 1667\n        enumerator._input     = input;                                                                                 // 1668\n        enumerator.length     = input.length;                                                                          // 1669\n        enumerator._remaining = input.length;                                                                          // 1670\n                                                                                                                       // 1671\n        enumerator._init();                                                                                            // 1672\n                                                                                                                       // 1673\n        if (enumerator.length === 0) {                                                                                 // 1674\n          lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);                                  // 1675\n        } else {                                                                                                       // 1676\n          enumerator.length = enumerator.length || 0;                                                                  // 1677\n          enumerator._enumerate();                                                                                     // 1678\n          if (enumerator._remaining === 0) {                                                                           // 1679\n            lib$es6$promise$$internal$$fulfill(enumerator.promise, enumerator._result);                                // 1680\n          }                                                                                                            // 1681\n        }                                                                                                              // 1682\n      } else {                                                                                                         // 1683\n        lib$es6$promise$$internal$$reject(enumerator.promise, enumerator._validationError());                          // 1684\n      }                                                                                                                // 1685\n    }                                                                                                                  // 1686\n                                                                                                                       // 1687\n    lib$es6$promise$enumerator$$Enumerator.prototype._validateInput = function(input) {                                // 1688\n      return lib$es6$promise$utils$$isArray(input);                                                                    // 1689\n    };                                                                                                                 // 1690\n                                                                                                                       // 1691\n    lib$es6$promise$enumerator$$Enumerator.prototype._validationError = function() {                                   // 1692\n      return new Error('Array Methods must be provided an Array');                                                     // 1693\n    };                                                                                                                 // 1694\n                                                                                                                       // 1695\n    lib$es6$promise$enumerator$$Enumerator.prototype._init = function() {                                              // 1696\n      this._result = new Array(this.length);                                                                           // 1697\n    };                                                                                                                 // 1698\n                                                                                                                       // 1699\n    var lib$es6$promise$enumerator$$default = lib$es6$promise$enumerator$$Enumerator;                                  // 1700\n                                                                                                                       // 1701\n    lib$es6$promise$enumerator$$Enumerator.prototype._enumerate = function() {                                         // 1702\n      var enumerator = this;                                                                                           // 1703\n                                                                                                                       // 1704\n      var length  = enumerator.length;                                                                                 // 1705\n      var promise = enumerator.promise;                                                                                // 1706\n      var input   = enumerator._input;                                                                                 // 1707\n                                                                                                                       // 1708\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {                      // 1709\n        enumerator._eachEntry(input[i], i);                                                                            // 1710\n      }                                                                                                                // 1711\n    };                                                                                                                 // 1712\n                                                                                                                       // 1713\n    lib$es6$promise$enumerator$$Enumerator.prototype._eachEntry = function(entry, i) {                                 // 1714\n      var enumerator = this;                                                                                           // 1715\n      var c = enumerator._instanceConstructor;                                                                         // 1716\n                                                                                                                       // 1717\n      if (lib$es6$promise$utils$$isMaybeThenable(entry)) {                                                             // 1718\n        if (entry.constructor === c && entry._state !== lib$es6$promise$$internal$$PENDING) {                          // 1719\n          entry._onerror = null;                                                                                       // 1720\n          enumerator._settledAt(entry._state, i, entry._result);                                                       // 1721\n        } else {                                                                                                       // 1722\n          enumerator._willSettleAt(c.resolve(entry), i);                                                               // 1723\n        }                                                                                                              // 1724\n      } else {                                                                                                         // 1725\n        enumerator._remaining--;                                                                                       // 1726\n        enumerator._result[i] = entry;                                                                                 // 1727\n      }                                                                                                                // 1728\n    };                                                                                                                 // 1729\n                                                                                                                       // 1730\n    lib$es6$promise$enumerator$$Enumerator.prototype._settledAt = function(state, i, value) {                          // 1731\n      var enumerator = this;                                                                                           // 1732\n      var promise = enumerator.promise;                                                                                // 1733\n                                                                                                                       // 1734\n      if (promise._state === lib$es6$promise$$internal$$PENDING) {                                                     // 1735\n        enumerator._remaining--;                                                                                       // 1736\n                                                                                                                       // 1737\n        if (state === lib$es6$promise$$internal$$REJECTED) {                                                           // 1738\n          lib$es6$promise$$internal$$reject(promise, value);                                                           // 1739\n        } else {                                                                                                       // 1740\n          enumerator._result[i] = value;                                                                               // 1741\n        }                                                                                                              // 1742\n      }                                                                                                                // 1743\n                                                                                                                       // 1744\n      if (enumerator._remaining === 0) {                                                                               // 1745\n        lib$es6$promise$$internal$$fulfill(promise, enumerator._result);                                               // 1746\n      }                                                                                                                // 1747\n    };                                                                                                                 // 1748\n                                                                                                                       // 1749\n    lib$es6$promise$enumerator$$Enumerator.prototype._willSettleAt = function(promise, i) {                            // 1750\n      var enumerator = this;                                                                                           // 1751\n                                                                                                                       // 1752\n      lib$es6$promise$$internal$$subscribe(promise, undefined, function(value) {                                       // 1753\n        enumerator._settledAt(lib$es6$promise$$internal$$FULFILLED, i, value);                                         // 1754\n      }, function(reason) {                                                                                            // 1755\n        enumerator._settledAt(lib$es6$promise$$internal$$REJECTED, i, reason);                                         // 1756\n      });                                                                                                              // 1757\n    };                                                                                                                 // 1758\n    function lib$es6$promise$promise$all$$all(entries) {                                                               // 1759\n      return new lib$es6$promise$enumerator$$default(this, entries).promise;                                           // 1760\n    }                                                                                                                  // 1761\n    var lib$es6$promise$promise$all$$default = lib$es6$promise$promise$all$$all;                                       // 1762\n    function lib$es6$promise$promise$race$$race(entries) {                                                             // 1763\n      /*jshint validthis:true */                                                                                       // 1764\n      var Constructor = this;                                                                                          // 1765\n                                                                                                                       // 1766\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);                                                  // 1767\n                                                                                                                       // 1768\n      if (!lib$es6$promise$utils$$isArray(entries)) {                                                                  // 1769\n        lib$es6$promise$$internal$$reject(promise, new TypeError('You must pass an array to race.'));                  // 1770\n        return promise;                                                                                                // 1771\n      }                                                                                                                // 1772\n                                                                                                                       // 1773\n      var length = entries.length;                                                                                     // 1774\n                                                                                                                       // 1775\n      function onFulfillment(value) {                                                                                  // 1776\n        lib$es6$promise$$internal$$resolve(promise, value);                                                            // 1777\n      }                                                                                                                // 1778\n                                                                                                                       // 1779\n      function onRejection(reason) {                                                                                   // 1780\n        lib$es6$promise$$internal$$reject(promise, reason);                                                            // 1781\n      }                                                                                                                // 1782\n                                                                                                                       // 1783\n      for (var i = 0; promise._state === lib$es6$promise$$internal$$PENDING && i < length; i++) {                      // 1784\n        lib$es6$promise$$internal$$subscribe(Constructor.resolve(entries[i]), undefined, onFulfillment, onRejection);  // 1785\n      }                                                                                                                // 1786\n                                                                                                                       // 1787\n      return promise;                                                                                                  // 1788\n    }                                                                                                                  // 1789\n    var lib$es6$promise$promise$race$$default = lib$es6$promise$promise$race$$race;                                    // 1790\n    function lib$es6$promise$promise$resolve$$resolve(object) {                                                        // 1791\n      /*jshint validthis:true */                                                                                       // 1792\n      var Constructor = this;                                                                                          // 1793\n                                                                                                                       // 1794\n      if (object && typeof object === 'object' && object.constructor === Constructor) {                                // 1795\n        return object;                                                                                                 // 1796\n      }                                                                                                                // 1797\n                                                                                                                       // 1798\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);                                                  // 1799\n      lib$es6$promise$$internal$$resolve(promise, object);                                                             // 1800\n      return promise;                                                                                                  // 1801\n    }                                                                                                                  // 1802\n    var lib$es6$promise$promise$resolve$$default = lib$es6$promise$promise$resolve$$resolve;                           // 1803\n    function lib$es6$promise$promise$reject$$reject(reason) {                                                          // 1804\n      /*jshint validthis:true */                                                                                       // 1805\n      var Constructor = this;                                                                                          // 1806\n      var promise = new Constructor(lib$es6$promise$$internal$$noop);                                                  // 1807\n      lib$es6$promise$$internal$$reject(promise, reason);                                                              // 1808\n      return promise;                                                                                                  // 1809\n    }                                                                                                                  // 1810\n    var lib$es6$promise$promise$reject$$default = lib$es6$promise$promise$reject$$reject;                              // 1811\n                                                                                                                       // 1812\n    var lib$es6$promise$promise$$counter = 0;                                                                          // 1813\n                                                                                                                       // 1814\n    function lib$es6$promise$promise$$needsResolver() {                                                                // 1815\n      throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');       // 1816\n    }                                                                                                                  // 1817\n                                                                                                                       // 1818\n    function lib$es6$promise$promise$$needsNew() {                                                                     // 1819\n      throw new TypeError(\"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.\");\n    }                                                                                                                  // 1821\n                                                                                                                       // 1822\n    var lib$es6$promise$promise$$default = lib$es6$promise$promise$$Promise;                                           // 1823\n    /**                                                                                                                // 1824\n      Promise objects represent the eventual result of an asynchronous operation. The                                  // 1825\n      primary way of interacting with a promise is through its `then` method, which                                    // 1826\n      registers callbacks to receive either a promise's eventual value or the reason                                   // 1827\n      why the promise cannot be fulfilled.                                                                             // 1828\n                                                                                                                       // 1829\n      Terminology                                                                                                      // 1830\n      -----------                                                                                                      // 1831\n                                                                                                                       // 1832\n      - `promise` is an object or function with a `then` method whose behavior conforms to this specification.         // 1833\n      - `thenable` is an object or function that defines a `then` method.                                              // 1834\n      - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).                         // 1835\n      - `exception` is a value that is thrown using the throw statement.                                               // 1836\n      - `reason` is a value that indicates why a promise was rejected.                                                 // 1837\n      - `settled` the final resting state of a promise, fulfilled or rejected.                                         // 1838\n                                                                                                                       // 1839\n      A promise can be in one of three states: pending, fulfilled, or rejected.                                        // 1840\n                                                                                                                       // 1841\n      Promises that are fulfilled have a fulfillment value and are in the fulfilled                                    // 1842\n      state.  Promises that are rejected have a rejection reason and are in the                                        // 1843\n      rejected state.  A fulfillment value is never a thenable.                                                        // 1844\n                                                                                                                       // 1845\n      Promises can also be said to *resolve* a value.  If this value is also a                                         // 1846\n      promise, then the original promise's settled state will match the value's                                        // 1847\n      settled state.  So a promise that *resolves* a promise that rejects will                                         // 1848\n      itself reject, and a promise that *resolves* a promise that fulfills will                                        // 1849\n      itself fulfill.                                                                                                  // 1850\n                                                                                                                       // 1851\n                                                                                                                       // 1852\n      Basic Usage:                                                                                                     // 1853\n      ------------                                                                                                     // 1854\n                                                                                                                       // 1855\n      ```js                                                                                                            // 1856\n      var promise = new Promise(function(resolve, reject) {                                                            // 1857\n        // on success                                                                                                  // 1858\n        resolve(value);                                                                                                // 1859\n                                                                                                                       // 1860\n        // on failure                                                                                                  // 1861\n        reject(reason);                                                                                                // 1862\n      });                                                                                                              // 1863\n                                                                                                                       // 1864\n      promise.then(function(value) {                                                                                   // 1865\n        // on fulfillment                                                                                              // 1866\n      }, function(reason) {                                                                                            // 1867\n        // on rejection                                                                                                // 1868\n      });                                                                                                              // 1869\n      ```                                                                                                              // 1870\n                                                                                                                       // 1871\n      Advanced Usage:                                                                                                  // 1872\n      ---------------                                                                                                  // 1873\n                                                                                                                       // 1874\n      Promises shine when abstracting away asynchronous interactions such as                                           // 1875\n      `XMLHttpRequest`s.                                                                                               // 1876\n                                                                                                                       // 1877\n      ```js                                                                                                            // 1878\n      function getJSON(url) {                                                                                          // 1879\n        return new Promise(function(resolve, reject){                                                                  // 1880\n          var xhr = new XMLHttpRequest();                                                                              // 1881\n                                                                                                                       // 1882\n          xhr.open('GET', url);                                                                                        // 1883\n          xhr.onreadystatechange = handler;                                                                            // 1884\n          xhr.responseType = 'json';                                                                                   // 1885\n          xhr.setRequestHeader('Accept', 'application/json');                                                          // 1886\n          xhr.send();                                                                                                  // 1887\n                                                                                                                       // 1888\n          function handler() {                                                                                         // 1889\n            if (this.readyState === this.DONE) {                                                                       // 1890\n              if (this.status === 200) {                                                                               // 1891\n                resolve(this.response);                                                                                // 1892\n              } else {                                                                                                 // 1893\n                reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));                 // 1894\n              }                                                                                                        // 1895\n            }                                                                                                          // 1896\n          };                                                                                                           // 1897\n        });                                                                                                            // 1898\n      }                                                                                                                // 1899\n                                                                                                                       // 1900\n      getJSON('/posts.json').then(function(json) {                                                                     // 1901\n        // on fulfillment                                                                                              // 1902\n      }, function(reason) {                                                                                            // 1903\n        // on rejection                                                                                                // 1904\n      });                                                                                                              // 1905\n      ```                                                                                                              // 1906\n                                                                                                                       // 1907\n      Unlike callbacks, promises are great composable primitives.                                                      // 1908\n                                                                                                                       // 1909\n      ```js                                                                                                            // 1910\n      Promise.all([                                                                                                    // 1911\n        getJSON('/posts'),                                                                                             // 1912\n        getJSON('/comments')                                                                                           // 1913\n      ]).then(function(values){                                                                                        // 1914\n        values[0] // => postsJSON                                                                                      // 1915\n        values[1] // => commentsJSON                                                                                   // 1916\n                                                                                                                       // 1917\n        return values;                                                                                                 // 1918\n      });                                                                                                              // 1919\n      ```                                                                                                              // 1920\n                                                                                                                       // 1921\n      @class Promise                                                                                                   // 1922\n      @param {function} resolver                                                                                       // 1923\n      Useful for tooling.                                                                                              // 1924\n      @constructor                                                                                                     // 1925\n    */                                                                                                                 // 1926\n    function lib$es6$promise$promise$$Promise(resolver) {                                                              // 1927\n      this._id = lib$es6$promise$promise$$counter++;                                                                   // 1928\n      this._state = undefined;                                                                                         // 1929\n      this._result = undefined;                                                                                        // 1930\n      this._subscribers = [];                                                                                          // 1931\n                                                                                                                       // 1932\n      if (lib$es6$promise$$internal$$noop !== resolver) {                                                              // 1933\n        if (!lib$es6$promise$utils$$isFunction(resolver)) {                                                            // 1934\n          lib$es6$promise$promise$$needsResolver();                                                                    // 1935\n        }                                                                                                              // 1936\n                                                                                                                       // 1937\n        if (!(this instanceof lib$es6$promise$promise$$Promise)) {                                                     // 1938\n          lib$es6$promise$promise$$needsNew();                                                                         // 1939\n        }                                                                                                              // 1940\n                                                                                                                       // 1941\n        lib$es6$promise$$internal$$initializePromise(this, resolver);                                                  // 1942\n      }                                                                                                                // 1943\n    }                                                                                                                  // 1944\n                                                                                                                       // 1945\n    lib$es6$promise$promise$$Promise.all = lib$es6$promise$promise$all$$default;                                       // 1946\n    lib$es6$promise$promise$$Promise.race = lib$es6$promise$promise$race$$default;                                     // 1947\n    lib$es6$promise$promise$$Promise.resolve = lib$es6$promise$promise$resolve$$default;                               // 1948\n    lib$es6$promise$promise$$Promise.reject = lib$es6$promise$promise$reject$$default;                                 // 1949\n    lib$es6$promise$promise$$Promise._setScheduler = lib$es6$promise$asap$$setScheduler;                               // 1950\n    lib$es6$promise$promise$$Promise._setAsap = lib$es6$promise$asap$$setAsap;                                         // 1951\n    lib$es6$promise$promise$$Promise._asap = lib$es6$promise$asap$$asap;                                               // 1952\n                                                                                                                       // 1953\n    lib$es6$promise$promise$$Promise.prototype = {                                                                     // 1954\n      constructor: lib$es6$promise$promise$$Promise,                                                                   // 1955\n                                                                                                                       // 1956\n    /**                                                                                                                // 1957\n      The primary way of interacting with a promise is through its `then` method,                                      // 1958\n      which registers callbacks to receive either a promise's eventual value or the                                    // 1959\n      reason why the promise cannot be fulfilled.                                                                      // 1960\n                                                                                                                       // 1961\n      ```js                                                                                                            // 1962\n      findUser().then(function(user){                                                                                  // 1963\n        // user is available                                                                                           // 1964\n      }, function(reason){                                                                                             // 1965\n        // user is unavailable, and you are given the reason why                                                       // 1966\n      });                                                                                                              // 1967\n      ```                                                                                                              // 1968\n                                                                                                                       // 1969\n      Chaining                                                                                                         // 1970\n      --------                                                                                                         // 1971\n                                                                                                                       // 1972\n      The return value of `then` is itself a promise.  This second, 'downstream'                                       // 1973\n      promise is resolved with the return value of the first promise's fulfillment                                     // 1974\n      or rejection handler, or rejected if the handler throws an exception.                                            // 1975\n                                                                                                                       // 1976\n      ```js                                                                                                            // 1977\n      findUser().then(function (user) {                                                                                // 1978\n        return user.name;                                                                                              // 1979\n      }, function (reason) {                                                                                           // 1980\n        return 'default name';                                                                                         // 1981\n      }).then(function (userName) {                                                                                    // 1982\n        // If `findUser` fulfilled, `userName` will be the user's name, otherwise it                                   // 1983\n        // will be `'default name'`                                                                                    // 1984\n      });                                                                                                              // 1985\n                                                                                                                       // 1986\n      findUser().then(function (user) {                                                                                // 1987\n        throw new Error('Found user, but still unhappy');                                                              // 1988\n      }, function (reason) {                                                                                           // 1989\n        throw new Error('`findUser` rejected and we're unhappy');                                                      // 1990\n      }).then(function (value) {                                                                                       // 1991\n        // never reached                                                                                               // 1992\n      }, function (reason) {                                                                                           // 1993\n        // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.                                  // 1994\n        // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.                           // 1995\n      });                                                                                                              // 1996\n      ```                                                                                                              // 1997\n      If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n                                                                                                                       // 1999\n      ```js                                                                                                            // 2000\n      findUser().then(function (user) {                                                                                // 2001\n        throw new PedagogicalException('Upstream error');                                                              // 2002\n      }).then(function (value) {                                                                                       // 2003\n        // never reached                                                                                               // 2004\n      }).then(function (value) {                                                                                       // 2005\n        // never reached                                                                                               // 2006\n      }, function (reason) {                                                                                           // 2007\n        // The `PedgagocialException` is propagated all the way down to here                                           // 2008\n      });                                                                                                              // 2009\n      ```                                                                                                              // 2010\n                                                                                                                       // 2011\n      Assimilation                                                                                                     // 2012\n      ------------                                                                                                     // 2013\n                                                                                                                       // 2014\n      Sometimes the value you want to propagate to a downstream promise can only be                                    // 2015\n      retrieved asynchronously. This can be achieved by returning a promise in the                                     // 2016\n      fulfillment or rejection handler. The downstream promise will then be pending                                    // 2017\n      until the returned promise is settled. This is called *assimilation*.                                            // 2018\n                                                                                                                       // 2019\n      ```js                                                                                                            // 2020\n      findUser().then(function (user) {                                                                                // 2021\n        return findCommentsByAuthor(user);                                                                             // 2022\n      }).then(function (comments) {                                                                                    // 2023\n        // The user's comments are now available                                                                       // 2024\n      });                                                                                                              // 2025\n      ```                                                                                                              // 2026\n                                                                                                                       // 2027\n      If the assimliated promise rejects, then the downstream promise will also reject.                                // 2028\n                                                                                                                       // 2029\n      ```js                                                                                                            // 2030\n      findUser().then(function (user) {                                                                                // 2031\n        return findCommentsByAuthor(user);                                                                             // 2032\n      }).then(function (comments) {                                                                                    // 2033\n        // If `findCommentsByAuthor` fulfills, we'll have the value here                                               // 2034\n      }, function (reason) {                                                                                           // 2035\n        // If `findCommentsByAuthor` rejects, we'll have the reason here                                               // 2036\n      });                                                                                                              // 2037\n      ```                                                                                                              // 2038\n                                                                                                                       // 2039\n      Simple Example                                                                                                   // 2040\n      --------------                                                                                                   // 2041\n                                                                                                                       // 2042\n      Synchronous Example                                                                                              // 2043\n                                                                                                                       // 2044\n      ```javascript                                                                                                    // 2045\n      var result;                                                                                                      // 2046\n                                                                                                                       // 2047\n      try {                                                                                                            // 2048\n        result = findResult();                                                                                         // 2049\n        // success                                                                                                     // 2050\n      } catch(reason) {                                                                                                // 2051\n        // failure                                                                                                     // 2052\n      }                                                                                                                // 2053\n      ```                                                                                                              // 2054\n                                                                                                                       // 2055\n      Errback Example                                                                                                  // 2056\n                                                                                                                       // 2057\n      ```js                                                                                                            // 2058\n      findResult(function(result, err){                                                                                // 2059\n        if (err) {                                                                                                     // 2060\n          // failure                                                                                                   // 2061\n        } else {                                                                                                       // 2062\n          // success                                                                                                   // 2063\n        }                                                                                                              // 2064\n      });                                                                                                              // 2065\n      ```                                                                                                              // 2066\n                                                                                                                       // 2067\n      Promise Example;                                                                                                 // 2068\n                                                                                                                       // 2069\n      ```javascript                                                                                                    // 2070\n      findResult().then(function(result){                                                                              // 2071\n        // success                                                                                                     // 2072\n      }, function(reason){                                                                                             // 2073\n        // failure                                                                                                     // 2074\n      });                                                                                                              // 2075\n      ```                                                                                                              // 2076\n                                                                                                                       // 2077\n      Advanced Example                                                                                                 // 2078\n      --------------                                                                                                   // 2079\n                                                                                                                       // 2080\n      Synchronous Example                                                                                              // 2081\n                                                                                                                       // 2082\n      ```javascript                                                                                                    // 2083\n      var author, books;                                                                                               // 2084\n                                                                                                                       // 2085\n      try {                                                                                                            // 2086\n        author = findAuthor();                                                                                         // 2087\n        books  = findBooksByAuthor(author);                                                                            // 2088\n        // success                                                                                                     // 2089\n      } catch(reason) {                                                                                                // 2090\n        // failure                                                                                                     // 2091\n      }                                                                                                                // 2092\n      ```                                                                                                              // 2093\n                                                                                                                       // 2094\n      Errback Example                                                                                                  // 2095\n                                                                                                                       // 2096\n      ```js                                                                                                            // 2097\n                                                                                                                       // 2098\n      function foundBooks(books) {                                                                                     // 2099\n                                                                                                                       // 2100\n      }                                                                                                                // 2101\n                                                                                                                       // 2102\n      function failure(reason) {                                                                                       // 2103\n                                                                                                                       // 2104\n      }                                                                                                                // 2105\n                                                                                                                       // 2106\n      findAuthor(function(author, err){                                                                                // 2107\n        if (err) {                                                                                                     // 2108\n          failure(err);                                                                                                // 2109\n          // failure                                                                                                   // 2110\n        } else {                                                                                                       // 2111\n          try {                                                                                                        // 2112\n            findBoooksByAuthor(author, function(books, err) {                                                          // 2113\n              if (err) {                                                                                               // 2114\n                failure(err);                                                                                          // 2115\n              } else {                                                                                                 // 2116\n                try {                                                                                                  // 2117\n                  foundBooks(books);                                                                                   // 2118\n                } catch(reason) {                                                                                      // 2119\n                  failure(reason);                                                                                     // 2120\n                }                                                                                                      // 2121\n              }                                                                                                        // 2122\n            });                                                                                                        // 2123\n          } catch(error) {                                                                                             // 2124\n            failure(err);                                                                                              // 2125\n          }                                                                                                            // 2126\n          // success                                                                                                   // 2127\n        }                                                                                                              // 2128\n      });                                                                                                              // 2129\n      ```                                                                                                              // 2130\n                                                                                                                       // 2131\n      Promise Example;                                                                                                 // 2132\n                                                                                                                       // 2133\n      ```javascript                                                                                                    // 2134\n      findAuthor().                                                                                                    // 2135\n        then(findBooksByAuthor).                                                                                       // 2136\n        then(function(books){                                                                                          // 2137\n          // found books                                                                                               // 2138\n      }).catch(function(reason){                                                                                       // 2139\n        // something went wrong                                                                                        // 2140\n      });                                                                                                              // 2141\n      ```                                                                                                              // 2142\n                                                                                                                       // 2143\n      @method then                                                                                                     // 2144\n      @param {Function} onFulfilled                                                                                    // 2145\n      @param {Function} onRejected                                                                                     // 2146\n      Useful for tooling.                                                                                              // 2147\n      @return {Promise}                                                                                                // 2148\n    */                                                                                                                 // 2149\n      then: function(onFulfillment, onRejection) {                                                                     // 2150\n        var parent = this;                                                                                             // 2151\n        var state = parent._state;                                                                                     // 2152\n                                                                                                                       // 2153\n        if (state === lib$es6$promise$$internal$$FULFILLED && !onFulfillment || state === lib$es6$promise$$internal$$REJECTED && !onRejection) {\n          return this;                                                                                                 // 2155\n        }                                                                                                              // 2156\n                                                                                                                       // 2157\n        var child = new this.constructor(lib$es6$promise$$internal$$noop);                                             // 2158\n        var result = parent._result;                                                                                   // 2159\n                                                                                                                       // 2160\n        if (state) {                                                                                                   // 2161\n          var callback = arguments[state - 1];                                                                         // 2162\n          lib$es6$promise$asap$$asap(function(){                                                                       // 2163\n            lib$es6$promise$$internal$$invokeCallback(state, child, callback, result);                                 // 2164\n          });                                                                                                          // 2165\n        } else {                                                                                                       // 2166\n          lib$es6$promise$$internal$$subscribe(parent, child, onFulfillment, onRejection);                             // 2167\n        }                                                                                                              // 2168\n                                                                                                                       // 2169\n        return child;                                                                                                  // 2170\n      },                                                                                                               // 2171\n                                                                                                                       // 2172\n    /**                                                                                                                // 2173\n      `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same                               // 2174\n      as the catch block of a try/catch statement.                                                                     // 2175\n                                                                                                                       // 2176\n      ```js                                                                                                            // 2177\n      function findAuthor(){                                                                                           // 2178\n        throw new Error('couldn't find that author');                                                                  // 2179\n      }                                                                                                                // 2180\n                                                                                                                       // 2181\n      // synchronous                                                                                                   // 2182\n      try {                                                                                                            // 2183\n        findAuthor();                                                                                                  // 2184\n      } catch(reason) {                                                                                                // 2185\n        // something went wrong                                                                                        // 2186\n      }                                                                                                                // 2187\n                                                                                                                       // 2188\n      // async with promises                                                                                           // 2189\n      findAuthor().catch(function(reason){                                                                             // 2190\n        // something went wrong                                                                                        // 2191\n      });                                                                                                              // 2192\n      ```                                                                                                              // 2193\n                                                                                                                       // 2194\n      @method catch                                                                                                    // 2195\n      @param {Function} onRejection                                                                                    // 2196\n      Useful for tooling.                                                                                              // 2197\n      @return {Promise}                                                                                                // 2198\n    */                                                                                                                 // 2199\n      'catch': function(onRejection) {                                                                                 // 2200\n        return this.then(null, onRejection);                                                                           // 2201\n      }                                                                                                                // 2202\n    };                                                                                                                 // 2203\n    function lib$es6$promise$polyfill$$polyfill() {                                                                    // 2204\n      var local;                                                                                                       // 2205\n                                                                                                                       // 2206\n      if (typeof global !== 'undefined') {                                                                             // 2207\n          local = global;                                                                                              // 2208\n      } else if (typeof self !== 'undefined') {                                                                        // 2209\n          local = self;                                                                                                // 2210\n      } else {                                                                                                         // 2211\n          try {                                                                                                        // 2212\n              local = Function('return this')();                                                                       // 2213\n          } catch (e) {                                                                                                // 2214\n              throw new Error('polyfill failed because global object is unavailable in this environment');             // 2215\n          }                                                                                                            // 2216\n      }                                                                                                                // 2217\n                                                                                                                       // 2218\n      var P = local.Promise;                                                                                           // 2219\n                                                                                                                       // 2220\n      if (P && Object.prototype.toString.call(P.resolve()) === '[object Promise]' && !P.cast) {                        // 2221\n        return;                                                                                                        // 2222\n      }                                                                                                                // 2223\n                                                                                                                       // 2224\n      local.Promise = lib$es6$promise$promise$$default;                                                                // 2225\n    }                                                                                                                  // 2226\n    var lib$es6$promise$polyfill$$default = lib$es6$promise$polyfill$$polyfill;                                        // 2227\n                                                                                                                       // 2228\n    var lib$es6$promise$umd$$ES6Promise = {                                                                            // 2229\n      'Promise': lib$es6$promise$promise$$default,                                                                     // 2230\n      'polyfill': lib$es6$promise$polyfill$$default                                                                    // 2231\n    };                                                                                                                 // 2232\n                                                                                                                       // 2233\n    /* global define:true module:true window: true */                                                                  // 2234\n    if (typeof define === 'function' && define['amd']) {                                                               // 2235\n      define(function() { return lib$es6$promise$umd$$ES6Promise; });                                                  // 2236\n    } else if (typeof module !== 'undefined' && module['exports']) {                                                   // 2237\n      module['exports'] = lib$es6$promise$umd$$ES6Promise;                                                             // 2238\n    } else if (typeof this !== 'undefined') {                                                                          // 2239\n      this['ES6Promise'] = lib$es6$promise$umd$$ES6Promise;                                                            // 2240\n    }                                                                                                                  // 2241\n                                                                                                                       // 2242\n    lib$es6$promise$polyfill$$default();                                                                               // 2243\n}).call(this);                                                                                                         // 2244\n                                                                                                                       // 2245\n                                                                                                                       // 2246\n}).call(this,require(2),typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],10:[function(require,module,exports){                                                                       // 2248\nif (typeof Object.create === 'function') {                                                                             // 2249\n  // implementation from standard node.js 'util' module                                                                // 2250\n  module.exports = function inherits(ctor, superCtor) {                                                                // 2251\n    ctor.super_ = superCtor                                                                                            // 2252\n    ctor.prototype = Object.create(superCtor.prototype, {                                                              // 2253\n      constructor: {                                                                                                   // 2254\n        value: ctor,                                                                                                   // 2255\n        enumerable: false,                                                                                             // 2256\n        writable: true,                                                                                                // 2257\n        configurable: true                                                                                             // 2258\n      }                                                                                                                // 2259\n    });                                                                                                                // 2260\n  };                                                                                                                   // 2261\n} else {                                                                                                               // 2262\n  // old school shim for old browsers                                                                                  // 2263\n  module.exports = function inherits(ctor, superCtor) {                                                                // 2264\n    ctor.super_ = superCtor                                                                                            // 2265\n    var TempCtor = function () {}                                                                                      // 2266\n    TempCtor.prototype = superCtor.prototype                                                                           // 2267\n    ctor.prototype = new TempCtor()                                                                                    // 2268\n    ctor.prototype.constructor = ctor                                                                                  // 2269\n  }                                                                                                                    // 2270\n}                                                                                                                      // 2271\n                                                                                                                       // 2272\n},{}],11:[function(require,module,exports){                                                                            // 2273\nvar arrayEach = require(14),                                                                                           // 2274\n    baseEach = require(18),                                                                                            // 2275\n    createForEach = require(30);                                                                                       // 2276\n                                                                                                                       // 2277\n/**                                                                                                                    // 2278\n * Iterates over elements of `collection` invoking `iteratee` for each element.                                        // 2279\n * The `iteratee` is bound to `thisArg` and invoked with three arguments:                                              // 2280\n * (value, index|key, collection). Iteratee functions may exit iteration early                                         // 2281\n * by explicitly returning `false`.                                                                                    // 2282\n *                                                                                                                     // 2283\n * **Note:** As with other \"Collections\" methods, objects with a \"length\" property                                     // 2284\n * are iterated like arrays. To avoid this behavior `_.forIn` or `_.forOwn`                                            // 2285\n * may be used for object iteration.                                                                                   // 2286\n *                                                                                                                     // 2287\n * @static                                                                                                             // 2288\n * @memberOf _                                                                                                         // 2289\n * @alias each                                                                                                         // 2290\n * @category Collection                                                                                                // 2291\n * @param {Array|Object|string} collection The collection to iterate over.                                             // 2292\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.                                         // 2293\n * @param {*} [thisArg] The `this` binding of `iteratee`.                                                              // 2294\n * @returns {Array|Object|string} Returns `collection`.                                                                // 2295\n * @example                                                                                                            // 2296\n *                                                                                                                     // 2297\n * _([1, 2]).forEach(function(n) {                                                                                     // 2298\n *   console.log(n);                                                                                                   // 2299\n * }).value();                                                                                                         // 2300\n * // => logs each value from left to right and returns the array                                                      // 2301\n *                                                                                                                     // 2302\n * _.forEach({ 'a': 1, 'b': 2 }, function(n, key) {                                                                    // 2303\n *   console.log(n, key);                                                                                              // 2304\n * });                                                                                                                 // 2305\n * // => logs each value-key pair and returns the object (iteration order is not guaranteed)                           // 2306\n */                                                                                                                    // 2307\nvar forEach = createForEach(arrayEach, baseEach);                                                                      // 2308\n                                                                                                                       // 2309\nmodule.exports = forEach;                                                                                              // 2310\n                                                                                                                       // 2311\n},{\"14\":14,\"18\":18,\"30\":30}],12:[function(require,module,exports){                                                     // 2312\n/** Used as the `TypeError` message for \"Functions\" methods. */                                                        // 2313\nvar FUNC_ERROR_TEXT = 'Expected a function';                                                                           // 2314\n                                                                                                                       // 2315\n/* Native method references for those with the same name as other `lodash` methods. */                                 // 2316\nvar nativeMax = Math.max;                                                                                              // 2317\n                                                                                                                       // 2318\n/**                                                                                                                    // 2319\n * Creates a function that invokes `func` with the `this` binding of the                                               // 2320\n * created function and arguments from `start` and beyond provided as an array.                                        // 2321\n *                                                                                                                     // 2322\n * **Note:** This method is based on the [rest parameter](https://developer.mozilla.org/Web/JavaScript/Reference/Functions/rest_parameters).\n *                                                                                                                     // 2324\n * @static                                                                                                             // 2325\n * @memberOf _                                                                                                         // 2326\n * @category Function                                                                                                  // 2327\n * @param {Function} func The function to apply a rest parameter to.                                                   // 2328\n * @param {number} [start=func.length-1] The start position of the rest parameter.                                     // 2329\n * @returns {Function} Returns the new function.                                                                       // 2330\n * @example                                                                                                            // 2331\n *                                                                                                                     // 2332\n * var say = _.restParam(function(what, names) {                                                                       // 2333\n *   return what + ' ' + _.initial(names).join(', ') +                                                                 // 2334\n *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);                                                              // 2335\n * });                                                                                                                 // 2336\n *                                                                                                                     // 2337\n * say('hello', 'fred', 'barney', 'pebbles');                                                                          // 2338\n * // => 'hello fred, barney, & pebbles'                                                                               // 2339\n */                                                                                                                    // 2340\nfunction restParam(func, start) {                                                                                      // 2341\n  if (typeof func != 'function') {                                                                                     // 2342\n    throw new TypeError(FUNC_ERROR_TEXT);                                                                              // 2343\n  }                                                                                                                    // 2344\n  start = nativeMax(start === undefined ? (func.length - 1) : (+start || 0), 0);                                       // 2345\n  return function() {                                                                                                  // 2346\n    var args = arguments,                                                                                              // 2347\n        index = -1,                                                                                                    // 2348\n        length = nativeMax(args.length - start, 0),                                                                    // 2349\n        rest = Array(length);                                                                                          // 2350\n                                                                                                                       // 2351\n    while (++index < length) {                                                                                         // 2352\n      rest[index] = args[start + index];                                                                               // 2353\n    }                                                                                                                  // 2354\n    switch (start) {                                                                                                   // 2355\n      case 0: return func.call(this, rest);                                                                            // 2356\n      case 1: return func.call(this, args[0], rest);                                                                   // 2357\n      case 2: return func.call(this, args[0], args[1], rest);                                                          // 2358\n    }                                                                                                                  // 2359\n    var otherArgs = Array(start + 1);                                                                                  // 2360\n    index = -1;                                                                                                        // 2361\n    while (++index < start) {                                                                                          // 2362\n      otherArgs[index] = args[index];                                                                                  // 2363\n    }                                                                                                                  // 2364\n    otherArgs[start] = rest;                                                                                           // 2365\n    return func.apply(this, otherArgs);                                                                                // 2366\n  };                                                                                                                   // 2367\n}                                                                                                                      // 2368\n                                                                                                                       // 2369\nmodule.exports = restParam;                                                                                            // 2370\n                                                                                                                       // 2371\n},{}],13:[function(require,module,exports){                                                                            // 2372\n/**                                                                                                                    // 2373\n * Copies the values of `source` to `array`.                                                                           // 2374\n *                                                                                                                     // 2375\n * @private                                                                                                            // 2376\n * @param {Array} source The array to copy values from.                                                                // 2377\n * @param {Array} [array=[]] The array to copy values to.                                                              // 2378\n * @returns {Array} Returns `array`.                                                                                   // 2379\n */                                                                                                                    // 2380\nfunction arrayCopy(source, array) {                                                                                    // 2381\n  var index = -1,                                                                                                      // 2382\n      length = source.length;                                                                                          // 2383\n                                                                                                                       // 2384\n  array || (array = Array(length));                                                                                    // 2385\n  while (++index < length) {                                                                                           // 2386\n    array[index] = source[index];                                                                                      // 2387\n  }                                                                                                                    // 2388\n  return array;                                                                                                        // 2389\n}                                                                                                                      // 2390\n                                                                                                                       // 2391\nmodule.exports = arrayCopy;                                                                                            // 2392\n                                                                                                                       // 2393\n},{}],14:[function(require,module,exports){                                                                            // 2394\n/**                                                                                                                    // 2395\n * A specialized version of `_.forEach` for arrays without support for callback                                        // 2396\n * shorthands and `this` binding.                                                                                      // 2397\n *                                                                                                                     // 2398\n * @private                                                                                                            // 2399\n * @param {Array} array The array to iterate over.                                                                     // 2400\n * @param {Function} iteratee The function invoked per iteration.                                                      // 2401\n * @returns {Array} Returns `array`.                                                                                   // 2402\n */                                                                                                                    // 2403\nfunction arrayEach(array, iteratee) {                                                                                  // 2404\n  var index = -1,                                                                                                      // 2405\n      length = array.length;                                                                                           // 2406\n                                                                                                                       // 2407\n  while (++index < length) {                                                                                           // 2408\n    if (iteratee(array[index], index, array) === false) {                                                              // 2409\n      break;                                                                                                           // 2410\n    }                                                                                                                  // 2411\n  }                                                                                                                    // 2412\n  return array;                                                                                                        // 2413\n}                                                                                                                      // 2414\n                                                                                                                       // 2415\nmodule.exports = arrayEach;                                                                                            // 2416\n                                                                                                                       // 2417\n},{}],15:[function(require,module,exports){                                                                            // 2418\nvar baseCopy = require(17),                                                                                            // 2419\n    keys = require(53);                                                                                                // 2420\n                                                                                                                       // 2421\n/**                                                                                                                    // 2422\n * The base implementation of `_.assign` without support for argument juggling,                                        // 2423\n * multiple sources, and `customizer` functions.                                                                       // 2424\n *                                                                                                                     // 2425\n * @private                                                                                                            // 2426\n * @param {Object} object The destination object.                                                                      // 2427\n * @param {Object} source The source object.                                                                           // 2428\n * @returns {Object} Returns `object`.                                                                                 // 2429\n */                                                                                                                    // 2430\nfunction baseAssign(object, source) {                                                                                  // 2431\n  return source == null                                                                                                // 2432\n    ? object                                                                                                           // 2433\n    : baseCopy(source, keys(source), object);                                                                          // 2434\n}                                                                                                                      // 2435\n                                                                                                                       // 2436\nmodule.exports = baseAssign;                                                                                           // 2437\n                                                                                                                       // 2438\n},{\"17\":17,\"53\":53}],16:[function(require,module,exports){                                                             // 2439\nvar arrayCopy = require(13),                                                                                           // 2440\n    arrayEach = require(14),                                                                                           // 2441\n    baseAssign = require(15),                                                                                          // 2442\n    baseForOwn = require(21),                                                                                          // 2443\n    initCloneArray = require(33),                                                                                      // 2444\n    initCloneByTag = require(34),                                                                                      // 2445\n    initCloneObject = require(35),                                                                                     // 2446\n    isArray = require(46),                                                                                             // 2447\n    isObject = require(49);                                                                                            // 2448\n                                                                                                                       // 2449\n/** `Object#toString` result references. */                                                                            // 2450\nvar argsTag = '[object Arguments]',                                                                                    // 2451\n    arrayTag = '[object Array]',                                                                                       // 2452\n    boolTag = '[object Boolean]',                                                                                      // 2453\n    dateTag = '[object Date]',                                                                                         // 2454\n    errorTag = '[object Error]',                                                                                       // 2455\n    funcTag = '[object Function]',                                                                                     // 2456\n    mapTag = '[object Map]',                                                                                           // 2457\n    numberTag = '[object Number]',                                                                                     // 2458\n    objectTag = '[object Object]',                                                                                     // 2459\n    regexpTag = '[object RegExp]',                                                                                     // 2460\n    setTag = '[object Set]',                                                                                           // 2461\n    stringTag = '[object String]',                                                                                     // 2462\n    weakMapTag = '[object WeakMap]';                                                                                   // 2463\n                                                                                                                       // 2464\nvar arrayBufferTag = '[object ArrayBuffer]',                                                                           // 2465\n    float32Tag = '[object Float32Array]',                                                                              // 2466\n    float64Tag = '[object Float64Array]',                                                                              // 2467\n    int8Tag = '[object Int8Array]',                                                                                    // 2468\n    int16Tag = '[object Int16Array]',                                                                                  // 2469\n    int32Tag = '[object Int32Array]',                                                                                  // 2470\n    uint8Tag = '[object Uint8Array]',                                                                                  // 2471\n    uint8ClampedTag = '[object Uint8ClampedArray]',                                                                    // 2472\n    uint16Tag = '[object Uint16Array]',                                                                                // 2473\n    uint32Tag = '[object Uint32Array]';                                                                                // 2474\n                                                                                                                       // 2475\n/** Used to identify `toStringTag` values supported by `_.clone`. */                                                   // 2476\nvar cloneableTags = {};                                                                                                // 2477\ncloneableTags[argsTag] = cloneableTags[arrayTag] =                                                                     // 2478\ncloneableTags[arrayBufferTag] = cloneableTags[boolTag] =                                                               // 2479\ncloneableTags[dateTag] = cloneableTags[float32Tag] =                                                                   // 2480\ncloneableTags[float64Tag] = cloneableTags[int8Tag] =                                                                   // 2481\ncloneableTags[int16Tag] = cloneableTags[int32Tag] =                                                                    // 2482\ncloneableTags[numberTag] = cloneableTags[objectTag] =                                                                  // 2483\ncloneableTags[regexpTag] = cloneableTags[stringTag] =                                                                  // 2484\ncloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =                                                             // 2485\ncloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;                                                            // 2486\ncloneableTags[errorTag] = cloneableTags[funcTag] =                                                                     // 2487\ncloneableTags[mapTag] = cloneableTags[setTag] =                                                                        // 2488\ncloneableTags[weakMapTag] = false;                                                                                     // 2489\n                                                                                                                       // 2490\n/** Used for native method references. */                                                                              // 2491\nvar objectProto = Object.prototype;                                                                                    // 2492\n                                                                                                                       // 2493\n/**                                                                                                                    // 2494\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)      // 2495\n * of values.                                                                                                          // 2496\n */                                                                                                                    // 2497\nvar objToString = objectProto.toString;                                                                                // 2498\n                                                                                                                       // 2499\n/**                                                                                                                    // 2500\n * The base implementation of `_.clone` without support for argument juggling                                          // 2501\n * and `this` binding `customizer` functions.                                                                          // 2502\n *                                                                                                                     // 2503\n * @private                                                                                                            // 2504\n * @param {*} value The value to clone.                                                                                // 2505\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 2506\n * @param {Function} [customizer] The function to customize cloning values.                                            // 2507\n * @param {string} [key] The key of `value`.                                                                           // 2508\n * @param {Object} [object] The object `value` belongs to.                                                             // 2509\n * @param {Array} [stackA=[]] Tracks traversed source objects.                                                         // 2510\n * @param {Array} [stackB=[]] Associates clones with source counterparts.                                              // 2511\n * @returns {*} Returns the cloned value.                                                                              // 2512\n */                                                                                                                    // 2513\nfunction baseClone(value, isDeep, customizer, key, object, stackA, stackB) {                                           // 2514\n  var result;                                                                                                          // 2515\n  if (customizer) {                                                                                                    // 2516\n    result = object ? customizer(value, key, object) : customizer(value);                                              // 2517\n  }                                                                                                                    // 2518\n  if (result !== undefined) {                                                                                          // 2519\n    return result;                                                                                                     // 2520\n  }                                                                                                                    // 2521\n  if (!isObject(value)) {                                                                                              // 2522\n    return value;                                                                                                      // 2523\n  }                                                                                                                    // 2524\n  var isArr = isArray(value);                                                                                          // 2525\n  if (isArr) {                                                                                                         // 2526\n    result = initCloneArray(value);                                                                                    // 2527\n    if (!isDeep) {                                                                                                     // 2528\n      return arrayCopy(value, result);                                                                                 // 2529\n    }                                                                                                                  // 2530\n  } else {                                                                                                             // 2531\n    var tag = objToString.call(value),                                                                                 // 2532\n        isFunc = tag == funcTag;                                                                                       // 2533\n                                                                                                                       // 2534\n    if (tag == objectTag || tag == argsTag || (isFunc && !object)) {                                                   // 2535\n      result = initCloneObject(isFunc ? {} : value);                                                                   // 2536\n      if (!isDeep) {                                                                                                   // 2537\n        return baseAssign(result, value);                                                                              // 2538\n      }                                                                                                                // 2539\n    } else {                                                                                                           // 2540\n      return cloneableTags[tag]                                                                                        // 2541\n        ? initCloneByTag(value, tag, isDeep)                                                                           // 2542\n        : (object ? value : {});                                                                                       // 2543\n    }                                                                                                                  // 2544\n  }                                                                                                                    // 2545\n  // Check for circular references and return its corresponding clone.                                                 // 2546\n  stackA || (stackA = []);                                                                                             // 2547\n  stackB || (stackB = []);                                                                                             // 2548\n                                                                                                                       // 2549\n  var length = stackA.length;                                                                                          // 2550\n  while (length--) {                                                                                                   // 2551\n    if (stackA[length] == value) {                                                                                     // 2552\n      return stackB[length];                                                                                           // 2553\n    }                                                                                                                  // 2554\n  }                                                                                                                    // 2555\n  // Add the source value to the stack of traversed objects and associate it with its clone.                           // 2556\n  stackA.push(value);                                                                                                  // 2557\n  stackB.push(result);                                                                                                 // 2558\n                                                                                                                       // 2559\n  // Recursively populate clone (susceptible to call stack limits).                                                    // 2560\n  (isArr ? arrayEach : baseForOwn)(value, function(subValue, key) {                                                    // 2561\n    result[key] = baseClone(subValue, isDeep, customizer, key, value, stackA, stackB);                                 // 2562\n  });                                                                                                                  // 2563\n  return result;                                                                                                       // 2564\n}                                                                                                                      // 2565\n                                                                                                                       // 2566\nmodule.exports = baseClone;                                                                                            // 2567\n                                                                                                                       // 2568\n},{\"13\":13,\"14\":14,\"15\":15,\"21\":21,\"33\":33,\"34\":34,\"35\":35,\"46\":46,\"49\":49}],17:[function(require,module,exports){     // 2569\n/**                                                                                                                    // 2570\n * Copies properties of `source` to `object`.                                                                          // 2571\n *                                                                                                                     // 2572\n * @private                                                                                                            // 2573\n * @param {Object} source The object to copy properties from.                                                          // 2574\n * @param {Array} props The property names to copy.                                                                    // 2575\n * @param {Object} [object={}] The object to copy properties to.                                                       // 2576\n * @returns {Object} Returns `object`.                                                                                 // 2577\n */                                                                                                                    // 2578\nfunction baseCopy(source, props, object) {                                                                             // 2579\n  object || (object = {});                                                                                             // 2580\n                                                                                                                       // 2581\n  var index = -1,                                                                                                      // 2582\n      length = props.length;                                                                                           // 2583\n                                                                                                                       // 2584\n  while (++index < length) {                                                                                           // 2585\n    var key = props[index];                                                                                            // 2586\n    object[key] = source[key];                                                                                         // 2587\n  }                                                                                                                    // 2588\n  return object;                                                                                                       // 2589\n}                                                                                                                      // 2590\n                                                                                                                       // 2591\nmodule.exports = baseCopy;                                                                                             // 2592\n                                                                                                                       // 2593\n},{}],18:[function(require,module,exports){                                                                            // 2594\nvar baseForOwn = require(21),                                                                                          // 2595\n    createBaseEach = require(28);                                                                                      // 2596\n                                                                                                                       // 2597\n/**                                                                                                                    // 2598\n * The base implementation of `_.forEach` without support for callback                                                 // 2599\n * shorthands and `this` binding.                                                                                      // 2600\n *                                                                                                                     // 2601\n * @private                                                                                                            // 2602\n * @param {Array|Object|string} collection The collection to iterate over.                                             // 2603\n * @param {Function} iteratee The function invoked per iteration.                                                      // 2604\n * @returns {Array|Object|string} Returns `collection`.                                                                // 2605\n */                                                                                                                    // 2606\nvar baseEach = createBaseEach(baseForOwn);                                                                             // 2607\n                                                                                                                       // 2608\nmodule.exports = baseEach;                                                                                             // 2609\n                                                                                                                       // 2610\n},{\"21\":21,\"28\":28}],19:[function(require,module,exports){                                                             // 2611\nvar createBaseFor = require(29);                                                                                       // 2612\n                                                                                                                       // 2613\n/**                                                                                                                    // 2614\n * The base implementation of `baseForIn` and `baseForOwn` which iterates                                              // 2615\n * over `object` properties returned by `keysFunc` invoking `iteratee` for                                             // 2616\n * each property. Iteratee functions may exit iteration early by explicitly                                            // 2617\n * returning `false`.                                                                                                  // 2618\n *                                                                                                                     // 2619\n * @private                                                                                                            // 2620\n * @param {Object} object The object to iterate over.                                                                  // 2621\n * @param {Function} iteratee The function invoked per iteration.                                                      // 2622\n * @param {Function} keysFunc The function to get the keys of `object`.                                                // 2623\n * @returns {Object} Returns `object`.                                                                                 // 2624\n */                                                                                                                    // 2625\nvar baseFor = createBaseFor();                                                                                         // 2626\n                                                                                                                       // 2627\nmodule.exports = baseFor;                                                                                              // 2628\n                                                                                                                       // 2629\n},{\"29\":29}],20:[function(require,module,exports){                                                                     // 2630\nvar baseFor = require(19),                                                                                             // 2631\n    keysIn = require(54);                                                                                              // 2632\n                                                                                                                       // 2633\n/**                                                                                                                    // 2634\n * The base implementation of `_.forIn` without support for callback                                                   // 2635\n * shorthands and `this` binding.                                                                                      // 2636\n *                                                                                                                     // 2637\n * @private                                                                                                            // 2638\n * @param {Object} object The object to iterate over.                                                                  // 2639\n * @param {Function} iteratee The function invoked per iteration.                                                      // 2640\n * @returns {Object} Returns `object`.                                                                                 // 2641\n */                                                                                                                    // 2642\nfunction baseForIn(object, iteratee) {                                                                                 // 2643\n  return baseFor(object, iteratee, keysIn);                                                                            // 2644\n}                                                                                                                      // 2645\n                                                                                                                       // 2646\nmodule.exports = baseForIn;                                                                                            // 2647\n                                                                                                                       // 2648\n},{\"19\":19,\"54\":54}],21:[function(require,module,exports){                                                             // 2649\nvar baseFor = require(19),                                                                                             // 2650\n    keys = require(53);                                                                                                // 2651\n                                                                                                                       // 2652\n/**                                                                                                                    // 2653\n * The base implementation of `_.forOwn` without support for callback                                                  // 2654\n * shorthands and `this` binding.                                                                                      // 2655\n *                                                                                                                     // 2656\n * @private                                                                                                            // 2657\n * @param {Object} object The object to iterate over.                                                                  // 2658\n * @param {Function} iteratee The function invoked per iteration.                                                      // 2659\n * @returns {Object} Returns `object`.                                                                                 // 2660\n */                                                                                                                    // 2661\nfunction baseForOwn(object, iteratee) {                                                                                // 2662\n  return baseFor(object, iteratee, keys);                                                                              // 2663\n}                                                                                                                      // 2664\n                                                                                                                       // 2665\nmodule.exports = baseForOwn;                                                                                           // 2666\n                                                                                                                       // 2667\n},{\"19\":19,\"53\":53}],22:[function(require,module,exports){                                                             // 2668\nvar arrayEach = require(14),                                                                                           // 2669\n    baseMergeDeep = require(23),                                                                                       // 2670\n    isArray = require(46),                                                                                             // 2671\n    isArrayLike = require(36),                                                                                         // 2672\n    isObject = require(49),                                                                                            // 2673\n    isObjectLike = require(40),                                                                                        // 2674\n    isTypedArray = require(51),                                                                                        // 2675\n    keys = require(53);                                                                                                // 2676\n                                                                                                                       // 2677\n/**                                                                                                                    // 2678\n * The base implementation of `_.merge` without support for argument juggling,                                         // 2679\n * multiple sources, and `this` binding `customizer` functions.                                                        // 2680\n *                                                                                                                     // 2681\n * @private                                                                                                            // 2682\n * @param {Object} object The destination object.                                                                      // 2683\n * @param {Object} source The source object.                                                                           // 2684\n * @param {Function} [customizer] The function to customize merged values.                                             // 2685\n * @param {Array} [stackA=[]] Tracks traversed source objects.                                                         // 2686\n * @param {Array} [stackB=[]] Associates values with source counterparts.                                              // 2687\n * @returns {Object} Returns `object`.                                                                                 // 2688\n */                                                                                                                    // 2689\nfunction baseMerge(object, source, customizer, stackA, stackB) {                                                       // 2690\n  if (!isObject(object)) {                                                                                             // 2691\n    return object;                                                                                                     // 2692\n  }                                                                                                                    // 2693\n  var isSrcArr = isArrayLike(source) && (isArray(source) || isTypedArray(source)),                                     // 2694\n      props = isSrcArr ? undefined : keys(source);                                                                     // 2695\n                                                                                                                       // 2696\n  arrayEach(props || source, function(srcValue, key) {                                                                 // 2697\n    if (props) {                                                                                                       // 2698\n      key = srcValue;                                                                                                  // 2699\n      srcValue = source[key];                                                                                          // 2700\n    }                                                                                                                  // 2701\n    if (isObjectLike(srcValue)) {                                                                                      // 2702\n      stackA || (stackA = []);                                                                                         // 2703\n      stackB || (stackB = []);                                                                                         // 2704\n      baseMergeDeep(object, source, key, baseMerge, customizer, stackA, stackB);                                       // 2705\n    }                                                                                                                  // 2706\n    else {                                                                                                             // 2707\n      var value = object[key],                                                                                         // 2708\n          result = customizer ? customizer(value, srcValue, key, object, source) : undefined,                          // 2709\n          isCommon = result === undefined;                                                                             // 2710\n                                                                                                                       // 2711\n      if (isCommon) {                                                                                                  // 2712\n        result = srcValue;                                                                                             // 2713\n      }                                                                                                                // 2714\n      if ((result !== undefined || (isSrcArr && !(key in object))) &&                                                  // 2715\n          (isCommon || (result === result ? (result !== value) : (value === value)))) {                                // 2716\n        object[key] = result;                                                                                          // 2717\n      }                                                                                                                // 2718\n    }                                                                                                                  // 2719\n  });                                                                                                                  // 2720\n  return object;                                                                                                       // 2721\n}                                                                                                                      // 2722\n                                                                                                                       // 2723\nmodule.exports = baseMerge;                                                                                            // 2724\n                                                                                                                       // 2725\n},{\"14\":14,\"23\":23,\"36\":36,\"40\":40,\"46\":46,\"49\":49,\"51\":51,\"53\":53}],23:[function(require,module,exports){             // 2726\nvar arrayCopy = require(13),                                                                                           // 2727\n    isArguments = require(45),                                                                                         // 2728\n    isArray = require(46),                                                                                             // 2729\n    isArrayLike = require(36),                                                                                         // 2730\n    isPlainObject = require(50),                                                                                       // 2731\n    isTypedArray = require(51),                                                                                        // 2732\n    toPlainObject = require(52);                                                                                       // 2733\n                                                                                                                       // 2734\n/**                                                                                                                    // 2735\n * A specialized version of `baseMerge` for arrays and objects which performs                                          // 2736\n * deep merges and tracks traversed objects enabling objects with circular                                             // 2737\n * references to be merged.                                                                                            // 2738\n *                                                                                                                     // 2739\n * @private                                                                                                            // 2740\n * @param {Object} object The destination object.                                                                      // 2741\n * @param {Object} source The source object.                                                                           // 2742\n * @param {string} key The key of the value to merge.                                                                  // 2743\n * @param {Function} mergeFunc The function to merge values.                                                           // 2744\n * @param {Function} [customizer] The function to customize merged values.                                             // 2745\n * @param {Array} [stackA=[]] Tracks traversed source objects.                                                         // 2746\n * @param {Array} [stackB=[]] Associates values with source counterparts.                                              // 2747\n * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.                                      // 2748\n */                                                                                                                    // 2749\nfunction baseMergeDeep(object, source, key, mergeFunc, customizer, stackA, stackB) {                                   // 2750\n  var length = stackA.length,                                                                                          // 2751\n      srcValue = source[key];                                                                                          // 2752\n                                                                                                                       // 2753\n  while (length--) {                                                                                                   // 2754\n    if (stackA[length] == srcValue) {                                                                                  // 2755\n      object[key] = stackB[length];                                                                                    // 2756\n      return;                                                                                                          // 2757\n    }                                                                                                                  // 2758\n  }                                                                                                                    // 2759\n  var value = object[key],                                                                                             // 2760\n      result = customizer ? customizer(value, srcValue, key, object, source) : undefined,                              // 2761\n      isCommon = result === undefined;                                                                                 // 2762\n                                                                                                                       // 2763\n  if (isCommon) {                                                                                                      // 2764\n    result = srcValue;                                                                                                 // 2765\n    if (isArrayLike(srcValue) && (isArray(srcValue) || isTypedArray(srcValue))) {                                      // 2766\n      result = isArray(value)                                                                                          // 2767\n        ? value                                                                                                        // 2768\n        : (isArrayLike(value) ? arrayCopy(value) : []);                                                                // 2769\n    }                                                                                                                  // 2770\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {                                                       // 2771\n      result = isArguments(value)                                                                                      // 2772\n        ? toPlainObject(value)                                                                                         // 2773\n        : (isPlainObject(value) ? value : {});                                                                         // 2774\n    }                                                                                                                  // 2775\n    else {                                                                                                             // 2776\n      isCommon = false;                                                                                                // 2777\n    }                                                                                                                  // 2778\n  }                                                                                                                    // 2779\n  // Add the source value to the stack of traversed objects and associate                                              // 2780\n  // it with its merged value.                                                                                         // 2781\n  stackA.push(srcValue);                                                                                               // 2782\n  stackB.push(result);                                                                                                 // 2783\n                                                                                                                       // 2784\n  if (isCommon) {                                                                                                      // 2785\n    // Recursively merge objects and arrays (susceptible to call stack limits).                                        // 2786\n    object[key] = mergeFunc(result, srcValue, customizer, stackA, stackB);                                             // 2787\n  } else if (result === result ? (result !== value) : (value === value)) {                                             // 2788\n    object[key] = result;                                                                                              // 2789\n  }                                                                                                                    // 2790\n}                                                                                                                      // 2791\n                                                                                                                       // 2792\nmodule.exports = baseMergeDeep;                                                                                        // 2793\n                                                                                                                       // 2794\n},{\"13\":13,\"36\":36,\"45\":45,\"46\":46,\"50\":50,\"51\":51,\"52\":52}],24:[function(require,module,exports){                     // 2795\n/**                                                                                                                    // 2796\n * The base implementation of `_.property` without support for deep paths.                                             // 2797\n *                                                                                                                     // 2798\n * @private                                                                                                            // 2799\n * @param {string} key The key of the property to get.                                                                 // 2800\n * @returns {Function} Returns the new function.                                                                       // 2801\n */                                                                                                                    // 2802\nfunction baseProperty(key) {                                                                                           // 2803\n  return function(object) {                                                                                            // 2804\n    return object == null ? undefined : object[key];                                                                   // 2805\n  };                                                                                                                   // 2806\n}                                                                                                                      // 2807\n                                                                                                                       // 2808\nmodule.exports = baseProperty;                                                                                         // 2809\n                                                                                                                       // 2810\n},{}],25:[function(require,module,exports){                                                                            // 2811\nvar identity = require(56);                                                                                            // 2812\n                                                                                                                       // 2813\n/**                                                                                                                    // 2814\n * A specialized version of `baseCallback` which only supports `this` binding                                          // 2815\n * and specifying the number of arguments to provide to `func`.                                                        // 2816\n *                                                                                                                     // 2817\n * @private                                                                                                            // 2818\n * @param {Function} func The function to bind.                                                                        // 2819\n * @param {*} thisArg The `this` binding of `func`.                                                                    // 2820\n * @param {number} [argCount] The number of arguments to provide to `func`.                                            // 2821\n * @returns {Function} Returns the callback.                                                                           // 2822\n */                                                                                                                    // 2823\nfunction bindCallback(func, thisArg, argCount) {                                                                       // 2824\n  if (typeof func != 'function') {                                                                                     // 2825\n    return identity;                                                                                                   // 2826\n  }                                                                                                                    // 2827\n  if (thisArg === undefined) {                                                                                         // 2828\n    return func;                                                                                                       // 2829\n  }                                                                                                                    // 2830\n  switch (argCount) {                                                                                                  // 2831\n    case 1: return function(value) {                                                                                   // 2832\n      return func.call(thisArg, value);                                                                                // 2833\n    };                                                                                                                 // 2834\n    case 3: return function(value, index, collection) {                                                                // 2835\n      return func.call(thisArg, value, index, collection);                                                             // 2836\n    };                                                                                                                 // 2837\n    case 4: return function(accumulator, value, index, collection) {                                                   // 2838\n      return func.call(thisArg, accumulator, value, index, collection);                                                // 2839\n    };                                                                                                                 // 2840\n    case 5: return function(value, other, key, object, source) {                                                       // 2841\n      return func.call(thisArg, value, other, key, object, source);                                                    // 2842\n    };                                                                                                                 // 2843\n  }                                                                                                                    // 2844\n  return function() {                                                                                                  // 2845\n    return func.apply(thisArg, arguments);                                                                             // 2846\n  };                                                                                                                   // 2847\n}                                                                                                                      // 2848\n                                                                                                                       // 2849\nmodule.exports = bindCallback;                                                                                         // 2850\n                                                                                                                       // 2851\n},{\"56\":56}],26:[function(require,module,exports){                                                                     // 2852\n(function (global){                                                                                                    // 2853\n/** Native method references. */                                                                                       // 2854\nvar ArrayBuffer = global.ArrayBuffer,                                                                                  // 2855\n    Uint8Array = global.Uint8Array;                                                                                    // 2856\n                                                                                                                       // 2857\n/**                                                                                                                    // 2858\n * Creates a clone of the given array buffer.                                                                          // 2859\n *                                                                                                                     // 2860\n * @private                                                                                                            // 2861\n * @param {ArrayBuffer} buffer The array buffer to clone.                                                              // 2862\n * @returns {ArrayBuffer} Returns the cloned array buffer.                                                             // 2863\n */                                                                                                                    // 2864\nfunction bufferClone(buffer) {                                                                                         // 2865\n  var result = new ArrayBuffer(buffer.byteLength),                                                                     // 2866\n      view = new Uint8Array(result);                                                                                   // 2867\n                                                                                                                       // 2868\n  view.set(new Uint8Array(buffer));                                                                                    // 2869\n  return result;                                                                                                       // 2870\n}                                                                                                                      // 2871\n                                                                                                                       // 2872\nmodule.exports = bufferClone;                                                                                          // 2873\n                                                                                                                       // 2874\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],27:[function(require,module,exports){                                                                            // 2876\nvar bindCallback = require(25),                                                                                        // 2877\n    isIterateeCall = require(38),                                                                                      // 2878\n    restParam = require(12);                                                                                           // 2879\n                                                                                                                       // 2880\n/**                                                                                                                    // 2881\n * Creates a `_.assign`, `_.defaults`, or `_.merge` function.                                                          // 2882\n *                                                                                                                     // 2883\n * @private                                                                                                            // 2884\n * @param {Function} assigner The function to assign values.                                                           // 2885\n * @returns {Function} Returns the new assigner function.                                                              // 2886\n */                                                                                                                    // 2887\nfunction createAssigner(assigner) {                                                                                    // 2888\n  return restParam(function(object, sources) {                                                                         // 2889\n    var index = -1,                                                                                                    // 2890\n        length = object == null ? 0 : sources.length,                                                                  // 2891\n        customizer = length > 2 ? sources[length - 2] : undefined,                                                     // 2892\n        guard = length > 2 ? sources[2] : undefined,                                                                   // 2893\n        thisArg = length > 1 ? sources[length - 1] : undefined;                                                        // 2894\n                                                                                                                       // 2895\n    if (typeof customizer == 'function') {                                                                             // 2896\n      customizer = bindCallback(customizer, thisArg, 5);                                                               // 2897\n      length -= 2;                                                                                                     // 2898\n    } else {                                                                                                           // 2899\n      customizer = typeof thisArg == 'function' ? thisArg : undefined;                                                 // 2900\n      length -= (customizer ? 1 : 0);                                                                                  // 2901\n    }                                                                                                                  // 2902\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {                                                      // 2903\n      customizer = length < 3 ? undefined : customizer;                                                                // 2904\n      length = 1;                                                                                                      // 2905\n    }                                                                                                                  // 2906\n    while (++index < length) {                                                                                         // 2907\n      var source = sources[index];                                                                                     // 2908\n      if (source) {                                                                                                    // 2909\n        assigner(object, source, customizer);                                                                          // 2910\n      }                                                                                                                // 2911\n    }                                                                                                                  // 2912\n    return object;                                                                                                     // 2913\n  });                                                                                                                  // 2914\n}                                                                                                                      // 2915\n                                                                                                                       // 2916\nmodule.exports = createAssigner;                                                                                       // 2917\n                                                                                                                       // 2918\n},{\"12\":12,\"25\":25,\"38\":38}],28:[function(require,module,exports){                                                     // 2919\nvar getLength = require(31),                                                                                           // 2920\n    isLength = require(39),                                                                                            // 2921\n    toObject = require(42);                                                                                            // 2922\n                                                                                                                       // 2923\n/**                                                                                                                    // 2924\n * Creates a `baseEach` or `baseEachRight` function.                                                                   // 2925\n *                                                                                                                     // 2926\n * @private                                                                                                            // 2927\n * @param {Function} eachFunc The function to iterate over a collection.                                               // 2928\n * @param {boolean} [fromRight] Specify iterating from right to left.                                                  // 2929\n * @returns {Function} Returns the new base function.                                                                  // 2930\n */                                                                                                                    // 2931\nfunction createBaseEach(eachFunc, fromRight) {                                                                         // 2932\n  return function(collection, iteratee) {                                                                              // 2933\n    var length = collection ? getLength(collection) : 0;                                                               // 2934\n    if (!isLength(length)) {                                                                                           // 2935\n      return eachFunc(collection, iteratee);                                                                           // 2936\n    }                                                                                                                  // 2937\n    var index = fromRight ? length : -1,                                                                               // 2938\n        iterable = toObject(collection);                                                                               // 2939\n                                                                                                                       // 2940\n    while ((fromRight ? index-- : ++index < length)) {                                                                 // 2941\n      if (iteratee(iterable[index], index, iterable) === false) {                                                      // 2942\n        break;                                                                                                         // 2943\n      }                                                                                                                // 2944\n    }                                                                                                                  // 2945\n    return collection;                                                                                                 // 2946\n  };                                                                                                                   // 2947\n}                                                                                                                      // 2948\n                                                                                                                       // 2949\nmodule.exports = createBaseEach;                                                                                       // 2950\n                                                                                                                       // 2951\n},{\"31\":31,\"39\":39,\"42\":42}],29:[function(require,module,exports){                                                     // 2952\nvar toObject = require(42);                                                                                            // 2953\n                                                                                                                       // 2954\n/**                                                                                                                    // 2955\n * Creates a base function for `_.forIn` or `_.forInRight`.                                                            // 2956\n *                                                                                                                     // 2957\n * @private                                                                                                            // 2958\n * @param {boolean} [fromRight] Specify iterating from right to left.                                                  // 2959\n * @returns {Function} Returns the new base function.                                                                  // 2960\n */                                                                                                                    // 2961\nfunction createBaseFor(fromRight) {                                                                                    // 2962\n  return function(object, iteratee, keysFunc) {                                                                        // 2963\n    var iterable = toObject(object),                                                                                   // 2964\n        props = keysFunc(object),                                                                                      // 2965\n        length = props.length,                                                                                         // 2966\n        index = fromRight ? length : -1;                                                                               // 2967\n                                                                                                                       // 2968\n    while ((fromRight ? index-- : ++index < length)) {                                                                 // 2969\n      var key = props[index];                                                                                          // 2970\n      if (iteratee(iterable[key], key, iterable) === false) {                                                          // 2971\n        break;                                                                                                         // 2972\n      }                                                                                                                // 2973\n    }                                                                                                                  // 2974\n    return object;                                                                                                     // 2975\n  };                                                                                                                   // 2976\n}                                                                                                                      // 2977\n                                                                                                                       // 2978\nmodule.exports = createBaseFor;                                                                                        // 2979\n                                                                                                                       // 2980\n},{\"42\":42}],30:[function(require,module,exports){                                                                     // 2981\nvar bindCallback = require(25),                                                                                        // 2982\n    isArray = require(46);                                                                                             // 2983\n                                                                                                                       // 2984\n/**                                                                                                                    // 2985\n * Creates a function for `_.forEach` or `_.forEachRight`.                                                             // 2986\n *                                                                                                                     // 2987\n * @private                                                                                                            // 2988\n * @param {Function} arrayFunc The function to iterate over an array.                                                  // 2989\n * @param {Function} eachFunc The function to iterate over a collection.                                               // 2990\n * @returns {Function} Returns the new each function.                                                                  // 2991\n */                                                                                                                    // 2992\nfunction createForEach(arrayFunc, eachFunc) {                                                                          // 2993\n  return function(collection, iteratee, thisArg) {                                                                     // 2994\n    return (typeof iteratee == 'function' && thisArg === undefined && isArray(collection))                             // 2995\n      ? arrayFunc(collection, iteratee)                                                                                // 2996\n      : eachFunc(collection, bindCallback(iteratee, thisArg, 3));                                                      // 2997\n  };                                                                                                                   // 2998\n}                                                                                                                      // 2999\n                                                                                                                       // 3000\nmodule.exports = createForEach;                                                                                        // 3001\n                                                                                                                       // 3002\n},{\"25\":25,\"46\":46}],31:[function(require,module,exports){                                                             // 3003\nvar baseProperty = require(24);                                                                                        // 3004\n                                                                                                                       // 3005\n/**                                                                                                                    // 3006\n * Gets the \"length\" property value of `object`.                                                                       // 3007\n *                                                                                                                     // 3008\n * **Note:** This function is used to avoid a [JIT bug](https://bugs.webkit.org/show_bug.cgi?id=142792)                // 3009\n * that affects Safari on at least iOS 8.1-8.3 ARM64.                                                                  // 3010\n *                                                                                                                     // 3011\n * @private                                                                                                            // 3012\n * @param {Object} object The object to query.                                                                         // 3013\n * @returns {*} Returns the \"length\" value.                                                                            // 3014\n */                                                                                                                    // 3015\nvar getLength = baseProperty('length');                                                                                // 3016\n                                                                                                                       // 3017\nmodule.exports = getLength;                                                                                            // 3018\n                                                                                                                       // 3019\n},{\"24\":24}],32:[function(require,module,exports){                                                                     // 3020\nvar isNative = require(48);                                                                                            // 3021\n                                                                                                                       // 3022\n/**                                                                                                                    // 3023\n * Gets the native function at `key` of `object`.                                                                      // 3024\n *                                                                                                                     // 3025\n * @private                                                                                                            // 3026\n * @param {Object} object The object to query.                                                                         // 3027\n * @param {string} key The key of the method to get.                                                                   // 3028\n * @returns {*} Returns the function if it's native, else `undefined`.                                                 // 3029\n */                                                                                                                    // 3030\nfunction getNative(object, key) {                                                                                      // 3031\n  var value = object == null ? undefined : object[key];                                                                // 3032\n  return isNative(value) ? value : undefined;                                                                          // 3033\n}                                                                                                                      // 3034\n                                                                                                                       // 3035\nmodule.exports = getNative;                                                                                            // 3036\n                                                                                                                       // 3037\n},{\"48\":48}],33:[function(require,module,exports){                                                                     // 3038\n/** Used for native method references. */                                                                              // 3039\nvar objectProto = Object.prototype;                                                                                    // 3040\n                                                                                                                       // 3041\n/** Used to check objects for own properties. */                                                                       // 3042\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 3043\n                                                                                                                       // 3044\n/**                                                                                                                    // 3045\n * Initializes an array clone.                                                                                         // 3046\n *                                                                                                                     // 3047\n * @private                                                                                                            // 3048\n * @param {Array} array The array to clone.                                                                            // 3049\n * @returns {Array} Returns the initialized clone.                                                                     // 3050\n */                                                                                                                    // 3051\nfunction initCloneArray(array) {                                                                                       // 3052\n  var length = array.length,                                                                                           // 3053\n      result = new array.constructor(length);                                                                          // 3054\n                                                                                                                       // 3055\n  // Add array properties assigned by `RegExp#exec`.                                                                   // 3056\n  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {                                  // 3057\n    result.index = array.index;                                                                                        // 3058\n    result.input = array.input;                                                                                        // 3059\n  }                                                                                                                    // 3060\n  return result;                                                                                                       // 3061\n}                                                                                                                      // 3062\n                                                                                                                       // 3063\nmodule.exports = initCloneArray;                                                                                       // 3064\n                                                                                                                       // 3065\n},{}],34:[function(require,module,exports){                                                                            // 3066\nvar bufferClone = require(26);                                                                                         // 3067\n                                                                                                                       // 3068\n/** `Object#toString` result references. */                                                                            // 3069\nvar boolTag = '[object Boolean]',                                                                                      // 3070\n    dateTag = '[object Date]',                                                                                         // 3071\n    numberTag = '[object Number]',                                                                                     // 3072\n    regexpTag = '[object RegExp]',                                                                                     // 3073\n    stringTag = '[object String]';                                                                                     // 3074\n                                                                                                                       // 3075\nvar arrayBufferTag = '[object ArrayBuffer]',                                                                           // 3076\n    float32Tag = '[object Float32Array]',                                                                              // 3077\n    float64Tag = '[object Float64Array]',                                                                              // 3078\n    int8Tag = '[object Int8Array]',                                                                                    // 3079\n    int16Tag = '[object Int16Array]',                                                                                  // 3080\n    int32Tag = '[object Int32Array]',                                                                                  // 3081\n    uint8Tag = '[object Uint8Array]',                                                                                  // 3082\n    uint8ClampedTag = '[object Uint8ClampedArray]',                                                                    // 3083\n    uint16Tag = '[object Uint16Array]',                                                                                // 3084\n    uint32Tag = '[object Uint32Array]';                                                                                // 3085\n                                                                                                                       // 3086\n/** Used to match `RegExp` flags from their coerced string values. */                                                  // 3087\nvar reFlags = /\\w*$/;                                                                                                  // 3088\n                                                                                                                       // 3089\n/**                                                                                                                    // 3090\n * Initializes an object clone based on its `toStringTag`.                                                             // 3091\n *                                                                                                                     // 3092\n * **Note:** This function only supports cloning values with tags of                                                   // 3093\n * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.                                                        // 3094\n *                                                                                                                     // 3095\n * @private                                                                                                            // 3096\n * @param {Object} object The object to clone.                                                                         // 3097\n * @param {string} tag The `toStringTag` of the object to clone.                                                       // 3098\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 3099\n * @returns {Object} Returns the initialized clone.                                                                    // 3100\n */                                                                                                                    // 3101\nfunction initCloneByTag(object, tag, isDeep) {                                                                         // 3102\n  var Ctor = object.constructor;                                                                                       // 3103\n  switch (tag) {                                                                                                       // 3104\n    case arrayBufferTag:                                                                                               // 3105\n      return bufferClone(object);                                                                                      // 3106\n                                                                                                                       // 3107\n    case boolTag:                                                                                                      // 3108\n    case dateTag:                                                                                                      // 3109\n      return new Ctor(+object);                                                                                        // 3110\n                                                                                                                       // 3111\n    case float32Tag: case float64Tag:                                                                                  // 3112\n    case int8Tag: case int16Tag: case int32Tag:                                                                        // 3113\n    case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:                                               // 3114\n      var buffer = object.buffer;                                                                                      // 3115\n      return new Ctor(isDeep ? bufferClone(buffer) : buffer, object.byteOffset, object.length);                        // 3116\n                                                                                                                       // 3117\n    case numberTag:                                                                                                    // 3118\n    case stringTag:                                                                                                    // 3119\n      return new Ctor(object);                                                                                         // 3120\n                                                                                                                       // 3121\n    case regexpTag:                                                                                                    // 3122\n      var result = new Ctor(object.source, reFlags.exec(object));                                                      // 3123\n      result.lastIndex = object.lastIndex;                                                                             // 3124\n  }                                                                                                                    // 3125\n  return result;                                                                                                       // 3126\n}                                                                                                                      // 3127\n                                                                                                                       // 3128\nmodule.exports = initCloneByTag;                                                                                       // 3129\n                                                                                                                       // 3130\n},{\"26\":26}],35:[function(require,module,exports){                                                                     // 3131\n/**                                                                                                                    // 3132\n * Initializes an object clone.                                                                                        // 3133\n *                                                                                                                     // 3134\n * @private                                                                                                            // 3135\n * @param {Object} object The object to clone.                                                                         // 3136\n * @returns {Object} Returns the initialized clone.                                                                    // 3137\n */                                                                                                                    // 3138\nfunction initCloneObject(object) {                                                                                     // 3139\n  var Ctor = object.constructor;                                                                                       // 3140\n  if (!(typeof Ctor == 'function' && Ctor instanceof Ctor)) {                                                          // 3141\n    Ctor = Object;                                                                                                     // 3142\n  }                                                                                                                    // 3143\n  return new Ctor;                                                                                                     // 3144\n}                                                                                                                      // 3145\n                                                                                                                       // 3146\nmodule.exports = initCloneObject;                                                                                      // 3147\n                                                                                                                       // 3148\n},{}],36:[function(require,module,exports){                                                                            // 3149\nvar getLength = require(31),                                                                                           // 3150\n    isLength = require(39);                                                                                            // 3151\n                                                                                                                       // 3152\n/**                                                                                                                    // 3153\n * Checks if `value` is array-like.                                                                                    // 3154\n *                                                                                                                     // 3155\n * @private                                                                                                            // 3156\n * @param {*} value The value to check.                                                                                // 3157\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.                                           // 3158\n */                                                                                                                    // 3159\nfunction isArrayLike(value) {                                                                                          // 3160\n  return value != null && isLength(getLength(value));                                                                  // 3161\n}                                                                                                                      // 3162\n                                                                                                                       // 3163\nmodule.exports = isArrayLike;                                                                                          // 3164\n                                                                                                                       // 3165\n},{\"31\":31,\"39\":39}],37:[function(require,module,exports){                                                             // 3166\n/** Used to detect unsigned integer values. */                                                                         // 3167\nvar reIsUint = /^\\d+$/;                                                                                                // 3168\n                                                                                                                       // 3169\n/**                                                                                                                    // 3170\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)               // 3171\n * of an array-like value.                                                                                             // 3172\n */                                                                                                                    // 3173\nvar MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 3174\n                                                                                                                       // 3175\n/**                                                                                                                    // 3176\n * Checks if `value` is a valid array-like index.                                                                      // 3177\n *                                                                                                                     // 3178\n * @private                                                                                                            // 3179\n * @param {*} value The value to check.                                                                                // 3180\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.                                        // 3181\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.                                        // 3182\n */                                                                                                                    // 3183\nfunction isIndex(value, length) {                                                                                      // 3184\n  value = (typeof value == 'number' || reIsUint.test(value)) ? +value : -1;                                            // 3185\n  length = length == null ? MAX_SAFE_INTEGER : length;                                                                 // 3186\n  return value > -1 && value % 1 == 0 && value < length;                                                               // 3187\n}                                                                                                                      // 3188\n                                                                                                                       // 3189\nmodule.exports = isIndex;                                                                                              // 3190\n                                                                                                                       // 3191\n},{}],38:[function(require,module,exports){                                                                            // 3192\nvar isArrayLike = require(36),                                                                                         // 3193\n    isIndex = require(37),                                                                                             // 3194\n    isObject = require(49);                                                                                            // 3195\n                                                                                                                       // 3196\n/**                                                                                                                    // 3197\n * Checks if the provided arguments are from an iteratee call.                                                         // 3198\n *                                                                                                                     // 3199\n * @private                                                                                                            // 3200\n * @param {*} value The potential iteratee value argument.                                                             // 3201\n * @param {*} index The potential iteratee index or key argument.                                                      // 3202\n * @param {*} object The potential iteratee object argument.                                                           // 3203\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call, else `false`.                         // 3204\n */                                                                                                                    // 3205\nfunction isIterateeCall(value, index, object) {                                                                        // 3206\n  if (!isObject(object)) {                                                                                             // 3207\n    return false;                                                                                                      // 3208\n  }                                                                                                                    // 3209\n  var type = typeof index;                                                                                             // 3210\n  if (type == 'number'                                                                                                 // 3211\n      ? (isArrayLike(object) && isIndex(index, object.length))                                                         // 3212\n      : (type == 'string' && index in object)) {                                                                       // 3213\n    var other = object[index];                                                                                         // 3214\n    return value === value ? (value === other) : (other !== other);                                                    // 3215\n  }                                                                                                                    // 3216\n  return false;                                                                                                        // 3217\n}                                                                                                                      // 3218\n                                                                                                                       // 3219\nmodule.exports = isIterateeCall;                                                                                       // 3220\n                                                                                                                       // 3221\n},{\"36\":36,\"37\":37,\"49\":49}],39:[function(require,module,exports){                                                     // 3222\n/**                                                                                                                    // 3223\n * Used as the [maximum length](http://ecma-international.org/ecma-262/6.0/#sec-number.max_safe_integer)               // 3224\n * of an array-like value.                                                                                             // 3225\n */                                                                                                                    // 3226\nvar MAX_SAFE_INTEGER = 9007199254740991;                                                                               // 3227\n                                                                                                                       // 3228\n/**                                                                                                                    // 3229\n * Checks if `value` is a valid array-like length.                                                                     // 3230\n *                                                                                                                     // 3231\n * **Note:** This function is based on [`ToLength`](http://ecma-international.org/ecma-262/6.0/#sec-tolength).         // 3232\n *                                                                                                                     // 3233\n * @private                                                                                                            // 3234\n * @param {*} value The value to check.                                                                                // 3235\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.                                       // 3236\n */                                                                                                                    // 3237\nfunction isLength(value) {                                                                                             // 3238\n  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;                        // 3239\n}                                                                                                                      // 3240\n                                                                                                                       // 3241\nmodule.exports = isLength;                                                                                             // 3242\n                                                                                                                       // 3243\n},{}],40:[function(require,module,exports){                                                                            // 3244\n/**                                                                                                                    // 3245\n * Checks if `value` is object-like.                                                                                   // 3246\n *                                                                                                                     // 3247\n * @private                                                                                                            // 3248\n * @param {*} value The value to check.                                                                                // 3249\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.                                          // 3250\n */                                                                                                                    // 3251\nfunction isObjectLike(value) {                                                                                         // 3252\n  return !!value && typeof value == 'object';                                                                          // 3253\n}                                                                                                                      // 3254\n                                                                                                                       // 3255\nmodule.exports = isObjectLike;                                                                                         // 3256\n                                                                                                                       // 3257\n},{}],41:[function(require,module,exports){                                                                            // 3258\nvar isArguments = require(45),                                                                                         // 3259\n    isArray = require(46),                                                                                             // 3260\n    isIndex = require(37),                                                                                             // 3261\n    isLength = require(39),                                                                                            // 3262\n    keysIn = require(54);                                                                                              // 3263\n                                                                                                                       // 3264\n/** Used for native method references. */                                                                              // 3265\nvar objectProto = Object.prototype;                                                                                    // 3266\n                                                                                                                       // 3267\n/** Used to check objects for own properties. */                                                                       // 3268\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 3269\n                                                                                                                       // 3270\n/**                                                                                                                    // 3271\n * A fallback implementation of `Object.keys` which creates an array of the                                            // 3272\n * own enumerable property names of `object`.                                                                          // 3273\n *                                                                                                                     // 3274\n * @private                                                                                                            // 3275\n * @param {Object} object The object to query.                                                                         // 3276\n * @returns {Array} Returns the array of property names.                                                               // 3277\n */                                                                                                                    // 3278\nfunction shimKeys(object) {                                                                                            // 3279\n  var props = keysIn(object),                                                                                          // 3280\n      propsLength = props.length,                                                                                      // 3281\n      length = propsLength && object.length;                                                                           // 3282\n                                                                                                                       // 3283\n  var allowIndexes = !!length && isLength(length) &&                                                                   // 3284\n    (isArray(object) || isArguments(object));                                                                          // 3285\n                                                                                                                       // 3286\n  var index = -1,                                                                                                      // 3287\n      result = [];                                                                                                     // 3288\n                                                                                                                       // 3289\n  while (++index < propsLength) {                                                                                      // 3290\n    var key = props[index];                                                                                            // 3291\n    if ((allowIndexes && isIndex(key, length)) || hasOwnProperty.call(object, key)) {                                  // 3292\n      result.push(key);                                                                                                // 3293\n    }                                                                                                                  // 3294\n  }                                                                                                                    // 3295\n  return result;                                                                                                       // 3296\n}                                                                                                                      // 3297\n                                                                                                                       // 3298\nmodule.exports = shimKeys;                                                                                             // 3299\n                                                                                                                       // 3300\n},{\"37\":37,\"39\":39,\"45\":45,\"46\":46,\"54\":54}],42:[function(require,module,exports){                                     // 3301\nvar isObject = require(49);                                                                                            // 3302\n                                                                                                                       // 3303\n/**                                                                                                                    // 3304\n * Converts `value` to an object if it's not one.                                                                      // 3305\n *                                                                                                                     // 3306\n * @private                                                                                                            // 3307\n * @param {*} value The value to process.                                                                              // 3308\n * @returns {Object} Returns the object.                                                                               // 3309\n */                                                                                                                    // 3310\nfunction toObject(value) {                                                                                             // 3311\n  return isObject(value) ? value : Object(value);                                                                      // 3312\n}                                                                                                                      // 3313\n                                                                                                                       // 3314\nmodule.exports = toObject;                                                                                             // 3315\n                                                                                                                       // 3316\n},{\"49\":49}],43:[function(require,module,exports){                                                                     // 3317\nvar baseClone = require(16),                                                                                           // 3318\n    bindCallback = require(25),                                                                                        // 3319\n    isIterateeCall = require(38);                                                                                      // 3320\n                                                                                                                       // 3321\n/**                                                                                                                    // 3322\n * Creates a clone of `value`. If `isDeep` is `true` nested objects are cloned,                                        // 3323\n * otherwise they are assigned by reference. If `customizer` is provided it's                                          // 3324\n * invoked to produce the cloned values. If `customizer` returns `undefined`                                           // 3325\n * cloning is handled by the method instead. The `customizer` is bound to                                              // 3326\n * `thisArg` and invoked with up to three argument; (value [, index|key, object]).                                     // 3327\n *                                                                                                                     // 3328\n * **Note:** This method is loosely based on the                                                                       // 3329\n * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\n * The enumerable properties of `arguments` objects and objects created by                                             // 3331\n * constructors other than `Object` are cloned to plain `Object` objects. An                                           // 3332\n * empty object is returned for uncloneable values such as functions, DOM nodes,                                       // 3333\n * Maps, Sets, and WeakMaps.                                                                                           // 3334\n *                                                                                                                     // 3335\n * @static                                                                                                             // 3336\n * @memberOf _                                                                                                         // 3337\n * @category Lang                                                                                                      // 3338\n * @param {*} value The value to clone.                                                                                // 3339\n * @param {boolean} [isDeep] Specify a deep clone.                                                                     // 3340\n * @param {Function} [customizer] The function to customize cloning values.                                            // 3341\n * @param {*} [thisArg] The `this` binding of `customizer`.                                                            // 3342\n * @returns {*} Returns the cloned value.                                                                              // 3343\n * @example                                                                                                            // 3344\n *                                                                                                                     // 3345\n * var users = [                                                                                                       // 3346\n *   { 'user': 'barney' },                                                                                             // 3347\n *   { 'user': 'fred' }                                                                                                // 3348\n * ];                                                                                                                  // 3349\n *                                                                                                                     // 3350\n * var shallow = _.clone(users);                                                                                       // 3351\n * shallow[0] === users[0];                                                                                            // 3352\n * // => true                                                                                                          // 3353\n *                                                                                                                     // 3354\n * var deep = _.clone(users, true);                                                                                    // 3355\n * deep[0] === users[0];                                                                                               // 3356\n * // => false                                                                                                         // 3357\n *                                                                                                                     // 3358\n * // using a customizer callback                                                                                      // 3359\n * var el = _.clone(document.body, function(value) {                                                                   // 3360\n *   if (_.isElement(value)) {                                                                                         // 3361\n *     return value.cloneNode(false);                                                                                  // 3362\n *   }                                                                                                                 // 3363\n * });                                                                                                                 // 3364\n *                                                                                                                     // 3365\n * el === document.body                                                                                                // 3366\n * // => false                                                                                                         // 3367\n * el.nodeName                                                                                                         // 3368\n * // => BODY                                                                                                          // 3369\n * el.childNodes.length;                                                                                               // 3370\n * // => 0                                                                                                             // 3371\n */                                                                                                                    // 3372\nfunction clone(value, isDeep, customizer, thisArg) {                                                                   // 3373\n  if (isDeep && typeof isDeep != 'boolean' && isIterateeCall(value, isDeep, customizer)) {                             // 3374\n    isDeep = false;                                                                                                    // 3375\n  }                                                                                                                    // 3376\n  else if (typeof isDeep == 'function') {                                                                              // 3377\n    thisArg = customizer;                                                                                              // 3378\n    customizer = isDeep;                                                                                               // 3379\n    isDeep = false;                                                                                                    // 3380\n  }                                                                                                                    // 3381\n  return typeof customizer == 'function'                                                                               // 3382\n    ? baseClone(value, isDeep, bindCallback(customizer, thisArg, 3))                                                   // 3383\n    : baseClone(value, isDeep);                                                                                        // 3384\n}                                                                                                                      // 3385\n                                                                                                                       // 3386\nmodule.exports = clone;                                                                                                // 3387\n                                                                                                                       // 3388\n},{\"16\":16,\"25\":25,\"38\":38}],44:[function(require,module,exports){                                                     // 3389\nvar baseClone = require(16),                                                                                           // 3390\n    bindCallback = require(25);                                                                                        // 3391\n                                                                                                                       // 3392\n/**                                                                                                                    // 3393\n * Creates a deep clone of `value`. If `customizer` is provided it's invoked                                           // 3394\n * to produce the cloned values. If `customizer` returns `undefined` cloning                                           // 3395\n * is handled by the method instead. The `customizer` is bound to `thisArg`                                            // 3396\n * and invoked with up to three argument; (value [, index|key, object]).                                               // 3397\n *                                                                                                                     // 3398\n * **Note:** This method is loosely based on the                                                                       // 3399\n * [structured clone algorithm](http://www.w3.org/TR/html5/infrastructure.html#internal-structured-cloning-algorithm).\n * The enumerable properties of `arguments` objects and objects created by                                             // 3401\n * constructors other than `Object` are cloned to plain `Object` objects. An                                           // 3402\n * empty object is returned for uncloneable values such as functions, DOM nodes,                                       // 3403\n * Maps, Sets, and WeakMaps.                                                                                           // 3404\n *                                                                                                                     // 3405\n * @static                                                                                                             // 3406\n * @memberOf _                                                                                                         // 3407\n * @category Lang                                                                                                      // 3408\n * @param {*} value The value to deep clone.                                                                           // 3409\n * @param {Function} [customizer] The function to customize cloning values.                                            // 3410\n * @param {*} [thisArg] The `this` binding of `customizer`.                                                            // 3411\n * @returns {*} Returns the deep cloned value.                                                                         // 3412\n * @example                                                                                                            // 3413\n *                                                                                                                     // 3414\n * var users = [                                                                                                       // 3415\n *   { 'user': 'barney' },                                                                                             // 3416\n *   { 'user': 'fred' }                                                                                                // 3417\n * ];                                                                                                                  // 3418\n *                                                                                                                     // 3419\n * var deep = _.cloneDeep(users);                                                                                      // 3420\n * deep[0] === users[0];                                                                                               // 3421\n * // => false                                                                                                         // 3422\n *                                                                                                                     // 3423\n * // using a customizer callback                                                                                      // 3424\n * var el = _.cloneDeep(document.body, function(value) {                                                               // 3425\n *   if (_.isElement(value)) {                                                                                         // 3426\n *     return value.cloneNode(true);                                                                                   // 3427\n *   }                                                                                                                 // 3428\n * });                                                                                                                 // 3429\n *                                                                                                                     // 3430\n * el === document.body                                                                                                // 3431\n * // => false                                                                                                         // 3432\n * el.nodeName                                                                                                         // 3433\n * // => BODY                                                                                                          // 3434\n * el.childNodes.length;                                                                                               // 3435\n * // => 20                                                                                                            // 3436\n */                                                                                                                    // 3437\nfunction cloneDeep(value, customizer, thisArg) {                                                                       // 3438\n  return typeof customizer == 'function'                                                                               // 3439\n    ? baseClone(value, true, bindCallback(customizer, thisArg, 3))                                                     // 3440\n    : baseClone(value, true);                                                                                          // 3441\n}                                                                                                                      // 3442\n                                                                                                                       // 3443\nmodule.exports = cloneDeep;                                                                                            // 3444\n                                                                                                                       // 3445\n},{\"16\":16,\"25\":25}],45:[function(require,module,exports){                                                             // 3446\nvar isArrayLike = require(36),                                                                                         // 3447\n    isObjectLike = require(40);                                                                                        // 3448\n                                                                                                                       // 3449\n/** Used for native method references. */                                                                              // 3450\nvar objectProto = Object.prototype;                                                                                    // 3451\n                                                                                                                       // 3452\n/** Used to check objects for own properties. */                                                                       // 3453\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 3454\n                                                                                                                       // 3455\n/** Native method references. */                                                                                       // 3456\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;                                                           // 3457\n                                                                                                                       // 3458\n/**                                                                                                                    // 3459\n * Checks if `value` is classified as an `arguments` object.                                                           // 3460\n *                                                                                                                     // 3461\n * @static                                                                                                             // 3462\n * @memberOf _                                                                                                         // 3463\n * @category Lang                                                                                                      // 3464\n * @param {*} value The value to check.                                                                                // 3465\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                                 // 3466\n * @example                                                                                                            // 3467\n *                                                                                                                     // 3468\n * _.isArguments(function() { return arguments; }());                                                                  // 3469\n * // => true                                                                                                          // 3470\n *                                                                                                                     // 3471\n * _.isArguments([1, 2, 3]);                                                                                           // 3472\n * // => false                                                                                                         // 3473\n */                                                                                                                    // 3474\nfunction isArguments(value) {                                                                                          // 3475\n  return isObjectLike(value) && isArrayLike(value) &&                                                                  // 3476\n    hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');                               // 3477\n}                                                                                                                      // 3478\n                                                                                                                       // 3479\nmodule.exports = isArguments;                                                                                          // 3480\n                                                                                                                       // 3481\n},{\"36\":36,\"40\":40}],46:[function(require,module,exports){                                                             // 3482\nvar getNative = require(32),                                                                                           // 3483\n    isLength = require(39),                                                                                            // 3484\n    isObjectLike = require(40);                                                                                        // 3485\n                                                                                                                       // 3486\n/** `Object#toString` result references. */                                                                            // 3487\nvar arrayTag = '[object Array]';                                                                                       // 3488\n                                                                                                                       // 3489\n/** Used for native method references. */                                                                              // 3490\nvar objectProto = Object.prototype;                                                                                    // 3491\n                                                                                                                       // 3492\n/**                                                                                                                    // 3493\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)      // 3494\n * of values.                                                                                                          // 3495\n */                                                                                                                    // 3496\nvar objToString = objectProto.toString;                                                                                // 3497\n                                                                                                                       // 3498\n/* Native method references for those with the same name as other `lodash` methods. */                                 // 3499\nvar nativeIsArray = getNative(Array, 'isArray');                                                                       // 3500\n                                                                                                                       // 3501\n/**                                                                                                                    // 3502\n * Checks if `value` is classified as an `Array` object.                                                               // 3503\n *                                                                                                                     // 3504\n * @static                                                                                                             // 3505\n * @memberOf _                                                                                                         // 3506\n * @category Lang                                                                                                      // 3507\n * @param {*} value The value to check.                                                                                // 3508\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                                 // 3509\n * @example                                                                                                            // 3510\n *                                                                                                                     // 3511\n * _.isArray([1, 2, 3]);                                                                                               // 3512\n * // => true                                                                                                          // 3513\n *                                                                                                                     // 3514\n * _.isArray(function() { return arguments; }());                                                                      // 3515\n * // => false                                                                                                         // 3516\n */                                                                                                                    // 3517\nvar isArray = nativeIsArray || function(value) {                                                                       // 3518\n  return isObjectLike(value) && isLength(value.length) && objToString.call(value) == arrayTag;                         // 3519\n};                                                                                                                     // 3520\n                                                                                                                       // 3521\nmodule.exports = isArray;                                                                                              // 3522\n                                                                                                                       // 3523\n},{\"32\":32,\"39\":39,\"40\":40}],47:[function(require,module,exports){                                                     // 3524\nvar isObject = require(49);                                                                                            // 3525\n                                                                                                                       // 3526\n/** `Object#toString` result references. */                                                                            // 3527\nvar funcTag = '[object Function]';                                                                                     // 3528\n                                                                                                                       // 3529\n/** Used for native method references. */                                                                              // 3530\nvar objectProto = Object.prototype;                                                                                    // 3531\n                                                                                                                       // 3532\n/**                                                                                                                    // 3533\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)      // 3534\n * of values.                                                                                                          // 3535\n */                                                                                                                    // 3536\nvar objToString = objectProto.toString;                                                                                // 3537\n                                                                                                                       // 3538\n/**                                                                                                                    // 3539\n * Checks if `value` is classified as a `Function` object.                                                             // 3540\n *                                                                                                                     // 3541\n * @static                                                                                                             // 3542\n * @memberOf _                                                                                                         // 3543\n * @category Lang                                                                                                      // 3544\n * @param {*} value The value to check.                                                                                // 3545\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                                 // 3546\n * @example                                                                                                            // 3547\n *                                                                                                                     // 3548\n * _.isFunction(_);                                                                                                    // 3549\n * // => true                                                                                                          // 3550\n *                                                                                                                     // 3551\n * _.isFunction(/abc/);                                                                                                // 3552\n * // => false                                                                                                         // 3553\n */                                                                                                                    // 3554\nfunction isFunction(value) {                                                                                           // 3555\n  // The use of `Object#toString` avoids issues with the `typeof` operator                                             // 3556\n  // in older versions of Chrome and Safari which return 'function' for regexes                                        // 3557\n  // and Safari 8 which returns 'object' for typed array constructors.                                                 // 3558\n  return isObject(value) && objToString.call(value) == funcTag;                                                        // 3559\n}                                                                                                                      // 3560\n                                                                                                                       // 3561\nmodule.exports = isFunction;                                                                                           // 3562\n                                                                                                                       // 3563\n},{\"49\":49}],48:[function(require,module,exports){                                                                     // 3564\nvar isFunction = require(47),                                                                                          // 3565\n    isObjectLike = require(40);                                                                                        // 3566\n                                                                                                                       // 3567\n/** Used to detect host constructors (Safari > 5). */                                                                  // 3568\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;                                                                      // 3569\n                                                                                                                       // 3570\n/** Used for native method references. */                                                                              // 3571\nvar objectProto = Object.prototype;                                                                                    // 3572\n                                                                                                                       // 3573\n/** Used to resolve the decompiled source of functions. */                                                             // 3574\nvar fnToString = Function.prototype.toString;                                                                          // 3575\n                                                                                                                       // 3576\n/** Used to check objects for own properties. */                                                                       // 3577\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 3578\n                                                                                                                       // 3579\n/** Used to detect if a method is native. */                                                                           // 3580\nvar reIsNative = RegExp('^' +                                                                                          // 3581\n  fnToString.call(hasOwnProperty).replace(/[\\\\^$.*+?()[\\]{}|]/g, '\\\\$&')                                               // 3582\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'                                    // 3583\n);                                                                                                                     // 3584\n                                                                                                                       // 3585\n/**                                                                                                                    // 3586\n * Checks if `value` is a native function.                                                                             // 3587\n *                                                                                                                     // 3588\n * @static                                                                                                             // 3589\n * @memberOf _                                                                                                         // 3590\n * @category Lang                                                                                                      // 3591\n * @param {*} value The value to check.                                                                                // 3592\n * @returns {boolean} Returns `true` if `value` is a native function, else `false`.                                    // 3593\n * @example                                                                                                            // 3594\n *                                                                                                                     // 3595\n * _.isNative(Array.prototype.push);                                                                                   // 3596\n * // => true                                                                                                          // 3597\n *                                                                                                                     // 3598\n * _.isNative(_);                                                                                                      // 3599\n * // => false                                                                                                         // 3600\n */                                                                                                                    // 3601\nfunction isNative(value) {                                                                                             // 3602\n  if (value == null) {                                                                                                 // 3603\n    return false;                                                                                                      // 3604\n  }                                                                                                                    // 3605\n  if (isFunction(value)) {                                                                                             // 3606\n    return reIsNative.test(fnToString.call(value));                                                                    // 3607\n  }                                                                                                                    // 3608\n  return isObjectLike(value) && reIsHostCtor.test(value);                                                              // 3609\n}                                                                                                                      // 3610\n                                                                                                                       // 3611\nmodule.exports = isNative;                                                                                             // 3612\n                                                                                                                       // 3613\n},{\"40\":40,\"47\":47}],49:[function(require,module,exports){                                                             // 3614\n/**                                                                                                                    // 3615\n * Checks if `value` is the [language type](https://es5.github.io/#x8) of `Object`.                                    // 3616\n * (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)                                   // 3617\n *                                                                                                                     // 3618\n * @static                                                                                                             // 3619\n * @memberOf _                                                                                                         // 3620\n * @category Lang                                                                                                      // 3621\n * @param {*} value The value to check.                                                                                // 3622\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.                                            // 3623\n * @example                                                                                                            // 3624\n *                                                                                                                     // 3625\n * _.isObject({});                                                                                                     // 3626\n * // => true                                                                                                          // 3627\n *                                                                                                                     // 3628\n * _.isObject([1, 2, 3]);                                                                                              // 3629\n * // => true                                                                                                          // 3630\n *                                                                                                                     // 3631\n * _.isObject(1);                                                                                                      // 3632\n * // => false                                                                                                         // 3633\n */                                                                                                                    // 3634\nfunction isObject(value) {                                                                                             // 3635\n  // Avoid a V8 JIT bug in Chrome 19-20.                                                                               // 3636\n  // See https://code.google.com/p/v8/issues/detail?id=2291 for more details.                                          // 3637\n  var type = typeof value;                                                                                             // 3638\n  return !!value && (type == 'object' || type == 'function');                                                          // 3639\n}                                                                                                                      // 3640\n                                                                                                                       // 3641\nmodule.exports = isObject;                                                                                             // 3642\n                                                                                                                       // 3643\n},{}],50:[function(require,module,exports){                                                                            // 3644\nvar baseForIn = require(20),                                                                                           // 3645\n    isArguments = require(45),                                                                                         // 3646\n    isObjectLike = require(40);                                                                                        // 3647\n                                                                                                                       // 3648\n/** `Object#toString` result references. */                                                                            // 3649\nvar objectTag = '[object Object]';                                                                                     // 3650\n                                                                                                                       // 3651\n/** Used for native method references. */                                                                              // 3652\nvar objectProto = Object.prototype;                                                                                    // 3653\n                                                                                                                       // 3654\n/** Used to check objects for own properties. */                                                                       // 3655\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 3656\n                                                                                                                       // 3657\n/**                                                                                                                    // 3658\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)      // 3659\n * of values.                                                                                                          // 3660\n */                                                                                                                    // 3661\nvar objToString = objectProto.toString;                                                                                // 3662\n                                                                                                                       // 3663\n/**                                                                                                                    // 3664\n * Checks if `value` is a plain object, that is, an object created by the                                              // 3665\n * `Object` constructor or one with a `[[Prototype]]` of `null`.                                                       // 3666\n *                                                                                                                     // 3667\n * **Note:** This method assumes objects created by the `Object` constructor                                           // 3668\n * have no inherited enumerable properties.                                                                            // 3669\n *                                                                                                                     // 3670\n * @static                                                                                                             // 3671\n * @memberOf _                                                                                                         // 3672\n * @category Lang                                                                                                      // 3673\n * @param {*} value The value to check.                                                                                // 3674\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.                                       // 3675\n * @example                                                                                                            // 3676\n *                                                                                                                     // 3677\n * function Foo() {                                                                                                    // 3678\n *   this.a = 1;                                                                                                       // 3679\n * }                                                                                                                   // 3680\n *                                                                                                                     // 3681\n * _.isPlainObject(new Foo);                                                                                           // 3682\n * // => false                                                                                                         // 3683\n *                                                                                                                     // 3684\n * _.isPlainObject([1, 2, 3]);                                                                                         // 3685\n * // => false                                                                                                         // 3686\n *                                                                                                                     // 3687\n * _.isPlainObject({ 'x': 0, 'y': 0 });                                                                                // 3688\n * // => true                                                                                                          // 3689\n *                                                                                                                     // 3690\n * _.isPlainObject(Object.create(null));                                                                               // 3691\n * // => true                                                                                                          // 3692\n */                                                                                                                    // 3693\nfunction isPlainObject(value) {                                                                                        // 3694\n  var Ctor;                                                                                                            // 3695\n                                                                                                                       // 3696\n  // Exit early for non `Object` objects.                                                                              // 3697\n  if (!(isObjectLike(value) && objToString.call(value) == objectTag && !isArguments(value)) ||                         // 3698\n      (!hasOwnProperty.call(value, 'constructor') && (Ctor = value.constructor, typeof Ctor == 'function' && !(Ctor instanceof Ctor)))) {\n    return false;                                                                                                      // 3700\n  }                                                                                                                    // 3701\n  // IE < 9 iterates inherited properties before own properties. If the first                                          // 3702\n  // iterated property is an object's own property then there are no inherited                                         // 3703\n  // enumerable properties.                                                                                            // 3704\n  var result;                                                                                                          // 3705\n  // In most environments an object's own properties are iterated before                                               // 3706\n  // its inherited properties. If the last iterated property is an object's                                            // 3707\n  // own property then there are no inherited enumerable properties.                                                   // 3708\n  baseForIn(value, function(subValue, key) {                                                                           // 3709\n    result = key;                                                                                                      // 3710\n  });                                                                                                                  // 3711\n  return result === undefined || hasOwnProperty.call(value, result);                                                   // 3712\n}                                                                                                                      // 3713\n                                                                                                                       // 3714\nmodule.exports = isPlainObject;                                                                                        // 3715\n                                                                                                                       // 3716\n},{\"20\":20,\"40\":40,\"45\":45}],51:[function(require,module,exports){                                                     // 3717\nvar isLength = require(39),                                                                                            // 3718\n    isObjectLike = require(40);                                                                                        // 3719\n                                                                                                                       // 3720\n/** `Object#toString` result references. */                                                                            // 3721\nvar argsTag = '[object Arguments]',                                                                                    // 3722\n    arrayTag = '[object Array]',                                                                                       // 3723\n    boolTag = '[object Boolean]',                                                                                      // 3724\n    dateTag = '[object Date]',                                                                                         // 3725\n    errorTag = '[object Error]',                                                                                       // 3726\n    funcTag = '[object Function]',                                                                                     // 3727\n    mapTag = '[object Map]',                                                                                           // 3728\n    numberTag = '[object Number]',                                                                                     // 3729\n    objectTag = '[object Object]',                                                                                     // 3730\n    regexpTag = '[object RegExp]',                                                                                     // 3731\n    setTag = '[object Set]',                                                                                           // 3732\n    stringTag = '[object String]',                                                                                     // 3733\n    weakMapTag = '[object WeakMap]';                                                                                   // 3734\n                                                                                                                       // 3735\nvar arrayBufferTag = '[object ArrayBuffer]',                                                                           // 3736\n    float32Tag = '[object Float32Array]',                                                                              // 3737\n    float64Tag = '[object Float64Array]',                                                                              // 3738\n    int8Tag = '[object Int8Array]',                                                                                    // 3739\n    int16Tag = '[object Int16Array]',                                                                                  // 3740\n    int32Tag = '[object Int32Array]',                                                                                  // 3741\n    uint8Tag = '[object Uint8Array]',                                                                                  // 3742\n    uint8ClampedTag = '[object Uint8ClampedArray]',                                                                    // 3743\n    uint16Tag = '[object Uint16Array]',                                                                                // 3744\n    uint32Tag = '[object Uint32Array]';                                                                                // 3745\n                                                                                                                       // 3746\n/** Used to identify `toStringTag` values of typed arrays. */                                                          // 3747\nvar typedArrayTags = {};                                                                                               // 3748\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =                                                              // 3749\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =                                                                   // 3750\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =                                                                  // 3751\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =                                                          // 3752\ntypedArrayTags[uint32Tag] = true;                                                                                      // 3753\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =                                                                   // 3754\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =                                                             // 3755\ntypedArrayTags[dateTag] = typedArrayTags[errorTag] =                                                                   // 3756\ntypedArrayTags[funcTag] = typedArrayTags[mapTag] =                                                                     // 3757\ntypedArrayTags[numberTag] = typedArrayTags[objectTag] =                                                                // 3758\ntypedArrayTags[regexpTag] = typedArrayTags[setTag] =                                                                   // 3759\ntypedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;                                                        // 3760\n                                                                                                                       // 3761\n/** Used for native method references. */                                                                              // 3762\nvar objectProto = Object.prototype;                                                                                    // 3763\n                                                                                                                       // 3764\n/**                                                                                                                    // 3765\n * Used to resolve the [`toStringTag`](http://ecma-international.org/ecma-262/6.0/#sec-object.prototype.tostring)      // 3766\n * of values.                                                                                                          // 3767\n */                                                                                                                    // 3768\nvar objToString = objectProto.toString;                                                                                // 3769\n                                                                                                                       // 3770\n/**                                                                                                                    // 3771\n * Checks if `value` is classified as a typed array.                                                                   // 3772\n *                                                                                                                     // 3773\n * @static                                                                                                             // 3774\n * @memberOf _                                                                                                         // 3775\n * @category Lang                                                                                                      // 3776\n * @param {*} value The value to check.                                                                                // 3777\n * @returns {boolean} Returns `true` if `value` is correctly classified, else `false`.                                 // 3778\n * @example                                                                                                            // 3779\n *                                                                                                                     // 3780\n * _.isTypedArray(new Uint8Array);                                                                                     // 3781\n * // => true                                                                                                          // 3782\n *                                                                                                                     // 3783\n * _.isTypedArray([]);                                                                                                 // 3784\n * // => false                                                                                                         // 3785\n */                                                                                                                    // 3786\nfunction isTypedArray(value) {                                                                                         // 3787\n  return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[objToString.call(value)];                   // 3788\n}                                                                                                                      // 3789\n                                                                                                                       // 3790\nmodule.exports = isTypedArray;                                                                                         // 3791\n                                                                                                                       // 3792\n},{\"39\":39,\"40\":40}],52:[function(require,module,exports){                                                             // 3793\nvar baseCopy = require(17),                                                                                            // 3794\n    keysIn = require(54);                                                                                              // 3795\n                                                                                                                       // 3796\n/**                                                                                                                    // 3797\n * Converts `value` to a plain object flattening inherited enumerable                                                  // 3798\n * properties of `value` to own properties of the plain object.                                                        // 3799\n *                                                                                                                     // 3800\n * @static                                                                                                             // 3801\n * @memberOf _                                                                                                         // 3802\n * @category Lang                                                                                                      // 3803\n * @param {*} value The value to convert.                                                                              // 3804\n * @returns {Object} Returns the converted plain object.                                                               // 3805\n * @example                                                                                                            // 3806\n *                                                                                                                     // 3807\n * function Foo() {                                                                                                    // 3808\n *   this.b = 2;                                                                                                       // 3809\n * }                                                                                                                   // 3810\n *                                                                                                                     // 3811\n * Foo.prototype.c = 3;                                                                                                // 3812\n *                                                                                                                     // 3813\n * _.assign({ 'a': 1 }, new Foo);                                                                                      // 3814\n * // => { 'a': 1, 'b': 2 }                                                                                            // 3815\n *                                                                                                                     // 3816\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));                                                                     // 3817\n * // => { 'a': 1, 'b': 2, 'c': 3 }                                                                                    // 3818\n */                                                                                                                    // 3819\nfunction toPlainObject(value) {                                                                                        // 3820\n  return baseCopy(value, keysIn(value));                                                                               // 3821\n}                                                                                                                      // 3822\n                                                                                                                       // 3823\nmodule.exports = toPlainObject;                                                                                        // 3824\n                                                                                                                       // 3825\n},{\"17\":17,\"54\":54}],53:[function(require,module,exports){                                                             // 3826\nvar getNative = require(32),                                                                                           // 3827\n    isArrayLike = require(36),                                                                                         // 3828\n    isObject = require(49),                                                                                            // 3829\n    shimKeys = require(41);                                                                                            // 3830\n                                                                                                                       // 3831\n/* Native method references for those with the same name as other `lodash` methods. */                                 // 3832\nvar nativeKeys = getNative(Object, 'keys');                                                                            // 3833\n                                                                                                                       // 3834\n/**                                                                                                                    // 3835\n * Creates an array of the own enumerable property names of `object`.                                                  // 3836\n *                                                                                                                     // 3837\n * **Note:** Non-object values are coerced to objects. See the                                                         // 3838\n * [ES spec](http://ecma-international.org/ecma-262/6.0/#sec-object.keys)                                              // 3839\n * for more details.                                                                                                   // 3840\n *                                                                                                                     // 3841\n * @static                                                                                                             // 3842\n * @memberOf _                                                                                                         // 3843\n * @category Object                                                                                                    // 3844\n * @param {Object} object The object to query.                                                                         // 3845\n * @returns {Array} Returns the array of property names.                                                               // 3846\n * @example                                                                                                            // 3847\n *                                                                                                                     // 3848\n * function Foo() {                                                                                                    // 3849\n *   this.a = 1;                                                                                                       // 3850\n *   this.b = 2;                                                                                                       // 3851\n * }                                                                                                                   // 3852\n *                                                                                                                     // 3853\n * Foo.prototype.c = 3;                                                                                                // 3854\n *                                                                                                                     // 3855\n * _.keys(new Foo);                                                                                                    // 3856\n * // => ['a', 'b'] (iteration order is not guaranteed)                                                                // 3857\n *                                                                                                                     // 3858\n * _.keys('hi');                                                                                                       // 3859\n * // => ['0', '1']                                                                                                    // 3860\n */                                                                                                                    // 3861\nvar keys = !nativeKeys ? shimKeys : function(object) {                                                                 // 3862\n  var Ctor = object == null ? undefined : object.constructor;                                                          // 3863\n  if ((typeof Ctor == 'function' && Ctor.prototype === object) ||                                                      // 3864\n      (typeof object != 'function' && isArrayLike(object))) {                                                          // 3865\n    return shimKeys(object);                                                                                           // 3866\n  }                                                                                                                    // 3867\n  return isObject(object) ? nativeKeys(object) : [];                                                                   // 3868\n};                                                                                                                     // 3869\n                                                                                                                       // 3870\nmodule.exports = keys;                                                                                                 // 3871\n                                                                                                                       // 3872\n},{\"32\":32,\"36\":36,\"41\":41,\"49\":49}],54:[function(require,module,exports){                                             // 3873\nvar isArguments = require(45),                                                                                         // 3874\n    isArray = require(46),                                                                                             // 3875\n    isIndex = require(37),                                                                                             // 3876\n    isLength = require(39),                                                                                            // 3877\n    isObject = require(49);                                                                                            // 3878\n                                                                                                                       // 3879\n/** Used for native method references. */                                                                              // 3880\nvar objectProto = Object.prototype;                                                                                    // 3881\n                                                                                                                       // 3882\n/** Used to check objects for own properties. */                                                                       // 3883\nvar hasOwnProperty = objectProto.hasOwnProperty;                                                                       // 3884\n                                                                                                                       // 3885\n/**                                                                                                                    // 3886\n * Creates an array of the own and inherited enumerable property names of `object`.                                    // 3887\n *                                                                                                                     // 3888\n * **Note:** Non-object values are coerced to objects.                                                                 // 3889\n *                                                                                                                     // 3890\n * @static                                                                                                             // 3891\n * @memberOf _                                                                                                         // 3892\n * @category Object                                                                                                    // 3893\n * @param {Object} object The object to query.                                                                         // 3894\n * @returns {Array} Returns the array of property names.                                                               // 3895\n * @example                                                                                                            // 3896\n *                                                                                                                     // 3897\n * function Foo() {                                                                                                    // 3898\n *   this.a = 1;                                                                                                       // 3899\n *   this.b = 2;                                                                                                       // 3900\n * }                                                                                                                   // 3901\n *                                                                                                                     // 3902\n * Foo.prototype.c = 3;                                                                                                // 3903\n *                                                                                                                     // 3904\n * _.keysIn(new Foo);                                                                                                  // 3905\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)                                                           // 3906\n */                                                                                                                    // 3907\nfunction keysIn(object) {                                                                                              // 3908\n  if (object == null) {                                                                                                // 3909\n    return [];                                                                                                         // 3910\n  }                                                                                                                    // 3911\n  if (!isObject(object)) {                                                                                             // 3912\n    object = Object(object);                                                                                           // 3913\n  }                                                                                                                    // 3914\n  var length = object.length;                                                                                          // 3915\n  length = (length && isLength(length) &&                                                                              // 3916\n    (isArray(object) || isArguments(object)) && length) || 0;                                                          // 3917\n                                                                                                                       // 3918\n  var Ctor = object.constructor,                                                                                       // 3919\n      index = -1,                                                                                                      // 3920\n      isProto = typeof Ctor == 'function' && Ctor.prototype === object,                                                // 3921\n      result = Array(length),                                                                                          // 3922\n      skipIndexes = length > 0;                                                                                        // 3923\n                                                                                                                       // 3924\n  while (++index < length) {                                                                                           // 3925\n    result[index] = (index + '');                                                                                      // 3926\n  }                                                                                                                    // 3927\n  for (var key in object) {                                                                                            // 3928\n    if (!(skipIndexes && isIndex(key, length)) &&                                                                      // 3929\n        !(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {                                   // 3930\n      result.push(key);                                                                                                // 3931\n    }                                                                                                                  // 3932\n  }                                                                                                                    // 3933\n  return result;                                                                                                       // 3934\n}                                                                                                                      // 3935\n                                                                                                                       // 3936\nmodule.exports = keysIn;                                                                                               // 3937\n                                                                                                                       // 3938\n},{\"37\":37,\"39\":39,\"45\":45,\"46\":46,\"49\":49}],55:[function(require,module,exports){                                     // 3939\nvar baseMerge = require(22),                                                                                           // 3940\n    createAssigner = require(27);                                                                                      // 3941\n                                                                                                                       // 3942\n/**                                                                                                                    // 3943\n * Recursively merges own enumerable properties of the source object(s), that                                          // 3944\n * don't resolve to `undefined` into the destination object. Subsequent sources                                        // 3945\n * overwrite property assignments of previous sources. If `customizer` is                                              // 3946\n * provided it's invoked to produce the merged values of the destination and                                           // 3947\n * source properties. If `customizer` returns `undefined` merging is handled                                           // 3948\n * by the method instead. The `customizer` is bound to `thisArg` and invoked                                           // 3949\n * with five arguments: (objectValue, sourceValue, key, object, source).                                               // 3950\n *                                                                                                                     // 3951\n * @static                                                                                                             // 3952\n * @memberOf _                                                                                                         // 3953\n * @category Object                                                                                                    // 3954\n * @param {Object} object The destination object.                                                                      // 3955\n * @param {...Object} [sources] The source objects.                                                                    // 3956\n * @param {Function} [customizer] The function to customize assigned values.                                           // 3957\n * @param {*} [thisArg] The `this` binding of `customizer`.                                                            // 3958\n * @returns {Object} Returns `object`.                                                                                 // 3959\n * @example                                                                                                            // 3960\n *                                                                                                                     // 3961\n * var users = {                                                                                                       // 3962\n *   'data': [{ 'user': 'barney' }, { 'user': 'fred' }]                                                                // 3963\n * };                                                                                                                  // 3964\n *                                                                                                                     // 3965\n * var ages = {                                                                                                        // 3966\n *   'data': [{ 'age': 36 }, { 'age': 40 }]                                                                            // 3967\n * };                                                                                                                  // 3968\n *                                                                                                                     // 3969\n * _.merge(users, ages);                                                                                               // 3970\n * // => { 'data': [{ 'user': 'barney', 'age': 36 }, { 'user': 'fred', 'age': 40 }] }                                  // 3971\n *                                                                                                                     // 3972\n * // using a customizer callback                                                                                      // 3973\n * var object = {                                                                                                      // 3974\n *   'fruits': ['apple'],                                                                                              // 3975\n *   'vegetables': ['beet']                                                                                            // 3976\n * };                                                                                                                  // 3977\n *                                                                                                                     // 3978\n * var other = {                                                                                                       // 3979\n *   'fruits': ['banana'],                                                                                             // 3980\n *   'vegetables': ['carrot']                                                                                          // 3981\n * };                                                                                                                  // 3982\n *                                                                                                                     // 3983\n * _.merge(object, other, function(a, b) {                                                                             // 3984\n *   if (_.isArray(a)) {                                                                                               // 3985\n *     return a.concat(b);                                                                                             // 3986\n *   }                                                                                                                 // 3987\n * });                                                                                                                 // 3988\n * // => { 'fruits': ['apple', 'banana'], 'vegetables': ['beet', 'carrot'] }                                           // 3989\n */                                                                                                                    // 3990\nvar merge = createAssigner(baseMerge);                                                                                 // 3991\n                                                                                                                       // 3992\nmodule.exports = merge;                                                                                                // 3993\n                                                                                                                       // 3994\n},{\"22\":22,\"27\":27}],56:[function(require,module,exports){                                                             // 3995\n/**                                                                                                                    // 3996\n * This method returns the first argument provided to it.                                                              // 3997\n *                                                                                                                     // 3998\n * @static                                                                                                             // 3999\n * @memberOf _                                                                                                         // 4000\n * @category Utility                                                                                                   // 4001\n * @param {*} value Any value.                                                                                         // 4002\n * @returns {*} Returns `value`.                                                                                       // 4003\n * @example                                                                                                            // 4004\n *                                                                                                                     // 4005\n * var object = { 'user': 'fred' };                                                                                    // 4006\n *                                                                                                                     // 4007\n * _.identity(object) === object;                                                                                      // 4008\n * // => true                                                                                                          // 4009\n */                                                                                                                    // 4010\nfunction identity(value) {                                                                                             // 4011\n  return value;                                                                                                        // 4012\n}                                                                                                                      // 4013\n                                                                                                                       // 4014\nmodule.exports = identity;                                                                                             // 4015\n                                                                                                                       // 4016\n},{}],57:[function(require,module,exports){                                                                            // 4017\n(function (process){                                                                                                   // 4018\n'use strict';                                                                                                          // 4019\n                                                                                                                       // 4020\nmodule.exports = AlgoliaSearch;                                                                                        // 4021\n                                                                                                                       // 4022\n// default debug activated in dev environments                                                                         // 4023\n// this is triggered in package.json, using the envify transform                                                       // 4024\nif (\"production\" === 'development') {                                                                                  // 4025\n  require(6).enable('algoliasearch*');                                                                                 // 4026\n}                                                                                                                      // 4027\n                                                                                                                       // 4028\nvar errors = require(63);                                                                                              // 4029\n                                                                                                                       // 4030\n/*                                                                                                                     // 4031\n * Algolia Search library initialization                                                                               // 4032\n * https://www.algolia.com/                                                                                            // 4033\n *                                                                                                                     // 4034\n * @param {string} applicationID - Your applicationID, found in your dashboard                                         // 4035\n * @param {string} apiKey - Your API key, found in your dashboard                                                      // 4036\n * @param {Object} [opts]                                                                                              // 4037\n * @param {number} [opts.timeout=2000] - The request timeout set in milliseconds,                                      // 4038\n * another request will be issued after this timeout                                                                   // 4039\n * @param {string} [opts.protocol='http:'] - The protocol used to query Algolia Search API.                            // 4040\n *                                        Set to 'https:' to force using https.                                        // 4041\n *                                        Default to document.location.protocol in browsers                            // 4042\n * @param {Object|Array} [opts.hosts={                                                                                 // 4043\n *           read: [this.applicationID + '-dsn.algolia.net'].concat([                                                  // 4044\n *             this.applicationID + '-1.algolianet.com',                                                               // 4045\n *             this.applicationID + '-2.algolianet.com',                                                               // 4046\n *             this.applicationID + '-3.algolianet.com']                                                               // 4047\n *           ]),                                                                                                       // 4048\n *           write: [this.applicationID + '.algolia.net'].concat([                                                     // 4049\n *             this.applicationID + '-1.algolianet.com',                                                               // 4050\n *             this.applicationID + '-2.algolianet.com',                                                               // 4051\n *             this.applicationID + '-3.algolianet.com']                                                               // 4052\n *           ]) - The hosts to use for Algolia Search API.                                                             // 4053\n *           If you provide them, you will less benefit from our HA implementation                                     // 4054\n */                                                                                                                    // 4055\nfunction AlgoliaSearch(applicationID, apiKey, opts) {                                                                  // 4056\n  var debug = require(6)('algoliasearch');                                                                             // 4057\n                                                                                                                       // 4058\n  var clone = require(43);                                                                                             // 4059\n  var isArray = require(46);                                                                                           // 4060\n                                                                                                                       // 4061\n  var usage = 'Usage: algoliasearch(applicationID, apiKey, opts)';                                                     // 4062\n                                                                                                                       // 4063\n  if (!applicationID) {                                                                                                // 4064\n    throw new errors.AlgoliaSearchError('Please provide an application ID. ' + usage);                                 // 4065\n  }                                                                                                                    // 4066\n                                                                                                                       // 4067\n  if (!apiKey) {                                                                                                       // 4068\n    throw new errors.AlgoliaSearchError('Please provide an API key. ' + usage);                                        // 4069\n  }                                                                                                                    // 4070\n                                                                                                                       // 4071\n  this.applicationID = applicationID;                                                                                  // 4072\n  this.apiKey = apiKey;                                                                                                // 4073\n                                                                                                                       // 4074\n  var defaultHosts = [                                                                                                 // 4075\n    this.applicationID + '-1.algolianet.com',                                                                          // 4076\n    this.applicationID + '-2.algolianet.com',                                                                          // 4077\n    this.applicationID + '-3.algolianet.com'                                                                           // 4078\n  ];                                                                                                                   // 4079\n  this.hosts = {                                                                                                       // 4080\n    read: [],                                                                                                          // 4081\n    write: []                                                                                                          // 4082\n  };                                                                                                                   // 4083\n                                                                                                                       // 4084\n  this.hostIndex = {                                                                                                   // 4085\n    read: 0,                                                                                                           // 4086\n    write: 0                                                                                                           // 4087\n  };                                                                                                                   // 4088\n                                                                                                                       // 4089\n  opts = opts || {};                                                                                                   // 4090\n                                                                                                                       // 4091\n  var protocol = opts.protocol || 'https:';                                                                            // 4092\n  var timeout = opts.timeout === undefined ? 2000 : opts.timeout;                                                      // 4093\n                                                                                                                       // 4094\n  // while we advocate for colon-at-the-end values: 'http:' for `opts.protocol`                                        // 4095\n  // we also accept `http` and `https`. It's a common error.                                                           // 4096\n  if (!/:$/.test(protocol)) {                                                                                          // 4097\n    protocol = protocol + ':';                                                                                         // 4098\n  }                                                                                                                    // 4099\n                                                                                                                       // 4100\n  if (opts.protocol !== 'http:' && opts.protocol !== 'https:') {                                                       // 4101\n    throw new errors.AlgoliaSearchError('protocol must be `http:` or `https:` (was `' + opts.protocol + '`)');         // 4102\n  }                                                                                                                    // 4103\n                                                                                                                       // 4104\n  // no hosts given, add defaults                                                                                      // 4105\n  if (!opts.hosts) {                                                                                                   // 4106\n    this.hosts.read = [this.applicationID + '-dsn.algolia.net'].concat(defaultHosts);                                  // 4107\n    this.hosts.write = [this.applicationID + '.algolia.net'].concat(defaultHosts);                                     // 4108\n  } else if (isArray(opts.hosts)) {                                                                                    // 4109\n    this.hosts.read = clone(opts.hosts);                                                                               // 4110\n    this.hosts.write = clone(opts.hosts);                                                                              // 4111\n  } else {                                                                                                             // 4112\n    this.hosts.read = clone(opts.hosts.read);                                                                          // 4113\n    this.hosts.write = clone(opts.hosts.write);                                                                        // 4114\n  }                                                                                                                    // 4115\n                                                                                                                       // 4116\n  // add protocol and lowercase hosts                                                                                  // 4117\n  this.hosts.read = map(this.hosts.read, prepareHost(protocol));                                                       // 4118\n  this.hosts.write = map(this.hosts.write, prepareHost(protocol));                                                     // 4119\n  this.requestTimeout = timeout;                                                                                       // 4120\n                                                                                                                       // 4121\n  this.extraHeaders = [];                                                                                              // 4122\n  this.cache = {};                                                                                                     // 4123\n                                                                                                                       // 4124\n  this._ua = opts._ua;                                                                                                 // 4125\n  this._useCache = opts._useCache === undefined ? true : opts._useCache;                                               // 4126\n                                                                                                                       // 4127\n  this._setTimeout = opts._setTimeout;                                                                                 // 4128\n                                                                                                                       // 4129\n  debug('init done, %j', this);                                                                                        // 4130\n}                                                                                                                      // 4131\n                                                                                                                       // 4132\nAlgoliaSearch.prototype = {                                                                                            // 4133\n  /*                                                                                                                   // 4134\n   * Delete an index                                                                                                   // 4135\n   *                                                                                                                   // 4136\n   * @param indexName the name of index to delete                                                                      // 4137\n   * @param callback the result callback called with two arguments                                                     // 4138\n   *  error: null or Error('message')                                                                                  // 4139\n   *  content: the server answer that contains the task ID                                                             // 4140\n   */                                                                                                                  // 4141\n  deleteIndex: function(indexName, callback) {                                                                         // 4142\n    return this._jsonRequest({                                                                                         // 4143\n      method: 'DELETE',                                                                                                // 4144\n      url: '/1/indexes/' + encodeURIComponent(indexName),                                                              // 4145\n      hostType: 'write',                                                                                               // 4146\n      callback: callback                                                                                               // 4147\n    });                                                                                                                // 4148\n  },                                                                                                                   // 4149\n  /**                                                                                                                  // 4150\n   * Move an existing index.                                                                                           // 4151\n   * @param srcIndexName the name of index to copy.                                                                    // 4152\n   * @param dstIndexName the new index name that will contains a copy of                                               // 4153\n   * srcIndexName (destination will be overriten if it already exist).                                                 // 4154\n   * @param callback the result callback called with two arguments                                                     // 4155\n   *  error: null or Error('message')                                                                                  // 4156\n   *  content: the server answer that contains the task ID                                                             // 4157\n   */                                                                                                                  // 4158\n  moveIndex: function(srcIndexName, dstIndexName, callback) {                                                          // 4159\n    var postObj = {                                                                                                    // 4160\n      operation: 'move', destination: dstIndexName                                                                     // 4161\n    };                                                                                                                 // 4162\n    return this._jsonRequest({                                                                                         // 4163\n      method: 'POST',                                                                                                  // 4164\n      url: '/1/indexes/' + encodeURIComponent(srcIndexName) + '/operation',                                            // 4165\n      body: postObj,                                                                                                   // 4166\n      hostType: 'write',                                                                                               // 4167\n      callback: callback                                                                                               // 4168\n    });                                                                                                                // 4169\n  },                                                                                                                   // 4170\n  /**                                                                                                                  // 4171\n   * Copy an existing index.                                                                                           // 4172\n   * @param srcIndexName the name of index to copy.                                                                    // 4173\n   * @param dstIndexName the new index name that will contains a copy                                                  // 4174\n   * of srcIndexName (destination will be overriten if it already exist).                                              // 4175\n   * @param callback the result callback called with two arguments                                                     // 4176\n   *  error: null or Error('message')                                                                                  // 4177\n   *  content: the server answer that contains the task ID                                                             // 4178\n   */                                                                                                                  // 4179\n  copyIndex: function(srcIndexName, dstIndexName, callback) {                                                          // 4180\n    var postObj = {                                                                                                    // 4181\n      operation: 'copy', destination: dstIndexName                                                                     // 4182\n    };                                                                                                                 // 4183\n    return this._jsonRequest({                                                                                         // 4184\n      method: 'POST',                                                                                                  // 4185\n      url: '/1/indexes/' + encodeURIComponent(srcIndexName) + '/operation',                                            // 4186\n      body: postObj,                                                                                                   // 4187\n      hostType: 'write',                                                                                               // 4188\n      callback: callback                                                                                               // 4189\n    });                                                                                                                // 4190\n  },                                                                                                                   // 4191\n  /**                                                                                                                  // 4192\n   * Return last log entries.                                                                                          // 4193\n   * @param offset Specify the first entry to retrieve (0-based, 0 is the most recent log entry).                      // 4194\n   * @param length Specify the maximum number of entries to retrieve starting                                          // 4195\n   * at offset. Maximum allowed value: 1000.                                                                           // 4196\n   * @param callback the result callback called with two arguments                                                     // 4197\n   *  error: null or Error('message')                                                                                  // 4198\n   *  content: the server answer that contains the task ID                                                             // 4199\n   */                                                                                                                  // 4200\n  getLogs: function(offset, length, callback) {                                                                        // 4201\n    if (arguments.length === 0 || typeof offset === 'function') {                                                      // 4202\n      // getLogs([cb])                                                                                                 // 4203\n      callback = offset;                                                                                               // 4204\n      offset = 0;                                                                                                      // 4205\n      length = 10;                                                                                                     // 4206\n    } else if (arguments.length === 1 || typeof length === 'function') {                                               // 4207\n      // getLogs(1, [cb)]                                                                                              // 4208\n      callback = length;                                                                                               // 4209\n      length = 10;                                                                                                     // 4210\n    }                                                                                                                  // 4211\n                                                                                                                       // 4212\n    return this._jsonRequest({                                                                                         // 4213\n      method: 'GET',                                                                                                   // 4214\n      url: '/1/logs?offset=' + offset + '&length=' + length,                                                           // 4215\n      hostType: 'read',                                                                                                // 4216\n      callback: callback                                                                                               // 4217\n    });                                                                                                                // 4218\n  },                                                                                                                   // 4219\n  /*                                                                                                                   // 4220\n   * List all existing indexes (paginated)                                                                             // 4221\n   *                                                                                                                   // 4222\n   * @param page The page to retrieve, starting at 0.                                                                  // 4223\n   * @param callback the result callback called with two arguments                                                     // 4224\n   *  error: null or Error('message')                                                                                  // 4225\n   *  content: the server answer with index list                                                                       // 4226\n   */                                                                                                                  // 4227\n  listIndexes: function(page, callback) {                                                                              // 4228\n    var params = '';                                                                                                   // 4229\n                                                                                                                       // 4230\n    if (page === undefined || typeof page === 'function') {                                                            // 4231\n      callback = page;                                                                                                 // 4232\n    } else {                                                                                                           // 4233\n      params = '?page=' + page;                                                                                        // 4234\n    }                                                                                                                  // 4235\n                                                                                                                       // 4236\n    return this._jsonRequest({                                                                                         // 4237\n      method: 'GET',                                                                                                   // 4238\n      url: '/1/indexes' + params,                                                                                      // 4239\n      hostType: 'read',                                                                                                // 4240\n      callback: callback                                                                                               // 4241\n    });                                                                                                                // 4242\n  },                                                                                                                   // 4243\n                                                                                                                       // 4244\n  /*                                                                                                                   // 4245\n   * Get the index object initialized                                                                                  // 4246\n   *                                                                                                                   // 4247\n   * @param indexName the name of index                                                                                // 4248\n   * @param callback the result callback with one argument (the Index instance)                                        // 4249\n   */                                                                                                                  // 4250\n  initIndex: function(indexName) {                                                                                     // 4251\n    return new this.Index(this, indexName);                                                                            // 4252\n  },                                                                                                                   // 4253\n  /*                                                                                                                   // 4254\n   * List all existing user keys with their associated ACLs                                                            // 4255\n   *                                                                                                                   // 4256\n   * @param callback the result callback called with two arguments                                                     // 4257\n   *  error: null or Error('message')                                                                                  // 4258\n   *  content: the server answer with user keys list                                                                   // 4259\n   */                                                                                                                  // 4260\n  listUserKeys: function(callback) {                                                                                   // 4261\n    return this._jsonRequest({                                                                                         // 4262\n      method: 'GET',                                                                                                   // 4263\n      url: '/1/keys',                                                                                                  // 4264\n      hostType: 'read',                                                                                                // 4265\n      callback: callback                                                                                               // 4266\n    });                                                                                                                // 4267\n  },                                                                                                                   // 4268\n  /*                                                                                                                   // 4269\n   * Get ACL of a user key                                                                                             // 4270\n   *                                                                                                                   // 4271\n   * @param key                                                                                                        // 4272\n   * @param callback the result callback called with two arguments                                                     // 4273\n   *  error: null or Error('message')                                                                                  // 4274\n   *  content: the server answer with user keys list                                                                   // 4275\n   */                                                                                                                  // 4276\n  getUserKeyACL: function(key, callback) {                                                                             // 4277\n    return this._jsonRequest({                                                                                         // 4278\n      method: 'GET',                                                                                                   // 4279\n      url: '/1/keys/' + key,                                                                                           // 4280\n      hostType: 'read',                                                                                                // 4281\n      callback: callback                                                                                               // 4282\n    });                                                                                                                // 4283\n  },                                                                                                                   // 4284\n  /*                                                                                                                   // 4285\n   * Delete an existing user key                                                                                       // 4286\n   * @param key                                                                                                        // 4287\n   * @param callback the result callback called with two arguments                                                     // 4288\n   *  error: null or Error('message')                                                                                  // 4289\n   *  content: the server answer with user keys list                                                                   // 4290\n   */                                                                                                                  // 4291\n  deleteUserKey: function(key, callback) {                                                                             // 4292\n    return this._jsonRequest({                                                                                         // 4293\n      method: 'DELETE',                                                                                                // 4294\n      url: '/1/keys/' + key,                                                                                           // 4295\n      hostType: 'write',                                                                                               // 4296\n      callback: callback                                                                                               // 4297\n    });                                                                                                                // 4298\n  },                                                                                                                   // 4299\n  /*                                                                                                                   // 4300\n   * Add a new global API key                                                                                          // 4301\n   *                                                                                                                   // 4302\n   * @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that                        // 4303\n   *   can contains the following values:                                                                              // 4304\n   *     - search: allow to search (https and http)                                                                    // 4305\n   *     - addObject: allows to add/update an object in the index (https only)                                         // 4306\n   *     - deleteObject : allows to delete an existing object (https only)                                             // 4307\n   *     - deleteIndex : allows to delete index content (https only)                                                   // 4308\n   *     - settings : allows to get index settings (https only)                                                        // 4309\n   *     - editSettings : allows to change index settings (https only)                                                 // 4310\n   * @param {Object} [params] - Optionnal parameters to set for the key                                                // 4311\n   * @param {number} params.validity - Number of seconds after which the key will be automatically removed (0 means no time limit for this key)\n   * @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour           // 4313\n   * @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call                     // 4314\n   * @param {string[]} params.indexes - Allowed targeted indexes for this key                                          // 4315\n   * @param {string} params.description - A description for your key                                                   // 4316\n   * @param {string[]} params.referers - A list of authorized referers                                                 // 4317\n   * @param {Object} params.queryParameters - Force the key to use specific query parameters                           // 4318\n   * @param {Function} callback - The result callback called with two arguments                                        // 4319\n   *   error: null or Error('message')                                                                                 // 4320\n   *   content: the server answer with user keys list                                                                  // 4321\n   * @return {Promise|undefined} Returns a promise if no callback given                                                // 4322\n   * @example                                                                                                          // 4323\n   * client.addUserKey(['search'], {                                                                                   // 4324\n   *   validity: 300,                                                                                                  // 4325\n   *   maxQueriesPerIPPerHour: 2000,                                                                                   // 4326\n   *   maxHitsPerQuery: 3,                                                                                             // 4327\n   *   indexes: ['fruits'],                                                                                            // 4328\n   *   description: 'Eat three fruits',                                                                                // 4329\n   *   referers: ['*.algolia.com'],                                                                                    // 4330\n   *   queryParameters: {                                                                                              // 4331\n   *     tagFilters: ['public'],                                                                                       // 4332\n   *   }                                                                                                               // 4333\n   * })                                                                                                                // 4334\n   * @see {@link https://www.algolia.com/doc/rest_api#AddKey|Algolia REST API Documentation}                           // 4335\n   */                                                                                                                  // 4336\n  addUserKey: function(acls, params, callback) {                                                                       // 4337\n    var isArray = require(46);                                                                                         // 4338\n    var usage = 'Usage: client.addUserKey(arrayOfAcls[, params, callback])';                                           // 4339\n                                                                                                                       // 4340\n    if (!isArray(acls)) {                                                                                              // 4341\n      throw new Error(usage);                                                                                          // 4342\n    }                                                                                                                  // 4343\n                                                                                                                       // 4344\n    if (arguments.length === 1 || typeof params === 'function') {                                                      // 4345\n      callback = params;                                                                                               // 4346\n      params = null;                                                                                                   // 4347\n    }                                                                                                                  // 4348\n                                                                                                                       // 4349\n    var postObj = {                                                                                                    // 4350\n      acl: acls                                                                                                        // 4351\n    };                                                                                                                 // 4352\n                                                                                                                       // 4353\n    if (params) {                                                                                                      // 4354\n      postObj.validity = params.validity;                                                                              // 4355\n      postObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;                                                  // 4356\n      postObj.maxHitsPerQuery = params.maxHitsPerQuery;                                                                // 4357\n      postObj.indexes = params.indexes;                                                                                // 4358\n      postObj.description = params.description;                                                                        // 4359\n                                                                                                                       // 4360\n      if (params.queryParameters) {                                                                                    // 4361\n        postObj.queryParameters = this._getSearchParams(params.queryParameters, '');                                   // 4362\n      }                                                                                                                // 4363\n                                                                                                                       // 4364\n      postObj.referers = params.referers;                                                                              // 4365\n    }                                                                                                                  // 4366\n                                                                                                                       // 4367\n    return this._jsonRequest({                                                                                         // 4368\n      method: 'POST',                                                                                                  // 4369\n      url: '/1/keys',                                                                                                  // 4370\n      body: postObj,                                                                                                   // 4371\n      hostType: 'write',                                                                                               // 4372\n      callback: callback                                                                                               // 4373\n    });                                                                                                                // 4374\n  },                                                                                                                   // 4375\n  /**                                                                                                                  // 4376\n   * Add a new global API key                                                                                          // 4377\n   * @deprecated Please use client.addUserKey()                                                                        // 4378\n   */                                                                                                                  // 4379\n  addUserKeyWithValidity: deprecate(function(acls, params, callback) {                                                 // 4380\n    return this.addUserKey(acls, params, callback);                                                                    // 4381\n  }, deprecatedMessage('client.addUserKeyWithValidity()', 'client.addUserKey()')),                                     // 4382\n                                                                                                                       // 4383\n  /**                                                                                                                  // 4384\n   * Update an existing API key                                                                                        // 4385\n   * @param {string} key - The key to update                                                                           // 4386\n   * @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that                        // 4387\n   *   can contains the following values:                                                                              // 4388\n   *     - search: allow to search (https and http)                                                                    // 4389\n   *     - addObject: allows to add/update an object in the index (https only)                                         // 4390\n   *     - deleteObject : allows to delete an existing object (https only)                                             // 4391\n   *     - deleteIndex : allows to delete index content (https only)                                                   // 4392\n   *     - settings : allows to get index settings (https only)                                                        // 4393\n   *     - editSettings : allows to change index settings (https only)                                                 // 4394\n   * @param {Object} [params] - Optionnal parameters to set for the key                                                // 4395\n   * @param {number} params.validity - Number of seconds after which the key will be automatically removed (0 means no time limit for this key)\n   * @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour           // 4397\n   * @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call                     // 4398\n   * @param {string[]} params.indexes - Allowed targeted indexes for this key                                          // 4399\n   * @param {string} params.description - A description for your key                                                   // 4400\n   * @param {string[]} params.referers - A list of authorized referers                                                 // 4401\n   * @param {Object} params.queryParameters - Force the key to use specific query parameters                           // 4402\n   * @param {Function} callback - The result callback called with two arguments                                        // 4403\n   *   error: null or Error('message')                                                                                 // 4404\n   *   content: the server answer with user keys list                                                                  // 4405\n   * @return {Promise|undefined} Returns a promise if no callback given                                                // 4406\n   * @example                                                                                                          // 4407\n   * client.updateUserKey('APIKEY', ['search'], {                                                                      // 4408\n   *   validity: 300,                                                                                                  // 4409\n   *   maxQueriesPerIPPerHour: 2000,                                                                                   // 4410\n   *   maxHitsPerQuery: 3,                                                                                             // 4411\n   *   indexes: ['fruits'],                                                                                            // 4412\n   *   description: 'Eat three fruits',                                                                                // 4413\n   *   referers: ['*.algolia.com'],                                                                                    // 4414\n   *   queryParameters: {                                                                                              // 4415\n   *     tagFilters: ['public'],                                                                                       // 4416\n   *   }                                                                                                               // 4417\n   * })                                                                                                                // 4418\n   * @see {@link https://www.algolia.com/doc/rest_api#UpdateIndexKey|Algolia REST API Documentation}                   // 4419\n   */                                                                                                                  // 4420\n  updateUserKey: function(key, acls, params, callback) {                                                               // 4421\n    var isArray = require(46);                                                                                         // 4422\n    var usage = 'Usage: client.updateUserKey(key, arrayOfAcls[, params, callback])';                                   // 4423\n                                                                                                                       // 4424\n    if (!isArray(acls)) {                                                                                              // 4425\n      throw new Error(usage);                                                                                          // 4426\n    }                                                                                                                  // 4427\n                                                                                                                       // 4428\n    if (arguments.length === 2 || typeof params === 'function') {                                                      // 4429\n      callback = params;                                                                                               // 4430\n      params = null;                                                                                                   // 4431\n    }                                                                                                                  // 4432\n                                                                                                                       // 4433\n    var putObj = {                                                                                                     // 4434\n      acl: acls                                                                                                        // 4435\n    };                                                                                                                 // 4436\n                                                                                                                       // 4437\n    if (params) {                                                                                                      // 4438\n      putObj.validity = params.validity;                                                                               // 4439\n      putObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;                                                   // 4440\n      putObj.maxHitsPerQuery = params.maxHitsPerQuery;                                                                 // 4441\n      putObj.indexes = params.indexes;                                                                                 // 4442\n      putObj.description = params.description;                                                                         // 4443\n                                                                                                                       // 4444\n      if (params.queryParameters) {                                                                                    // 4445\n        putObj.queryParameters = this._getSearchParams(params.queryParameters, '');                                    // 4446\n      }                                                                                                                // 4447\n                                                                                                                       // 4448\n      putObj.referers = params.referers;                                                                               // 4449\n    }                                                                                                                  // 4450\n                                                                                                                       // 4451\n    return this._jsonRequest({                                                                                         // 4452\n      method: 'PUT',                                                                                                   // 4453\n      url: '/1/keys/' + key,                                                                                           // 4454\n      body: putObj,                                                                                                    // 4455\n      hostType: 'write',                                                                                               // 4456\n      callback: callback                                                                                               // 4457\n    });                                                                                                                // 4458\n  },                                                                                                                   // 4459\n                                                                                                                       // 4460\n  /**                                                                                                                  // 4461\n   * Set the extra security tagFilters header                                                                          // 4462\n   * @param {string|array} tags The list of tags defining the current security filters                                 // 4463\n   */                                                                                                                  // 4464\n  setSecurityTags: function(tags) {                                                                                    // 4465\n    if (Object.prototype.toString.call(tags) === '[object Array]') {                                                   // 4466\n      var strTags = [];                                                                                                // 4467\n      for (var i = 0; i < tags.length; ++i) {                                                                          // 4468\n        if (Object.prototype.toString.call(tags[i]) === '[object Array]') {                                            // 4469\n          var oredTags = [];                                                                                           // 4470\n          for (var j = 0; j < tags[i].length; ++j) {                                                                   // 4471\n            oredTags.push(tags[i][j]);                                                                                 // 4472\n          }                                                                                                            // 4473\n          strTags.push('(' + oredTags.join(',') + ')');                                                                // 4474\n        } else {                                                                                                       // 4475\n          strTags.push(tags[i]);                                                                                       // 4476\n        }                                                                                                              // 4477\n      }                                                                                                                // 4478\n      tags = strTags.join(',');                                                                                        // 4479\n    }                                                                                                                  // 4480\n                                                                                                                       // 4481\n    this.securityTags = tags;                                                                                          // 4482\n  },                                                                                                                   // 4483\n                                                                                                                       // 4484\n  /**                                                                                                                  // 4485\n   * Set the extra user token header                                                                                   // 4486\n   * @param {string} userToken The token identifying a uniq user (used to apply rate limits)                           // 4487\n   */                                                                                                                  // 4488\n  setUserToken: function(userToken) {                                                                                  // 4489\n    this.userToken = userToken;                                                                                        // 4490\n  },                                                                                                                   // 4491\n                                                                                                                       // 4492\n  /**                                                                                                                  // 4493\n   * Initialize a new batch of search queries                                                                          // 4494\n   * @deprecated use client.search()                                                                                   // 4495\n   */                                                                                                                  // 4496\n  startQueriesBatch: deprecate(function startQueriesBatchDeprecated() {                                                // 4497\n    this._batch = [];                                                                                                  // 4498\n  }, deprecatedMessage('client.startQueriesBatch()', 'client.search()')),                                              // 4499\n                                                                                                                       // 4500\n  /**                                                                                                                  // 4501\n   * Add a search query in the batch                                                                                   // 4502\n   * @deprecated use client.search()                                                                                   // 4503\n   */                                                                                                                  // 4504\n  addQueryInBatch: deprecate(function addQueryInBatchDeprecated(indexName, query, args) {                              // 4505\n    this._batch.push({                                                                                                 // 4506\n      indexName: indexName,                                                                                            // 4507\n      query: query,                                                                                                    // 4508\n      params: args                                                                                                     // 4509\n    });                                                                                                                // 4510\n  }, deprecatedMessage('client.addQueryInBatch()', 'client.search()')),                                                // 4511\n                                                                                                                       // 4512\n  /**                                                                                                                  // 4513\n   * Clear all queries in client's cache                                                                               // 4514\n   * @return undefined                                                                                                 // 4515\n   */                                                                                                                  // 4516\n  clearCache: function() {                                                                                             // 4517\n    this.cache = {};                                                                                                   // 4518\n  },                                                                                                                   // 4519\n                                                                                                                       // 4520\n  /**                                                                                                                  // 4521\n   * Launch the batch of queries using XMLHttpRequest.                                                                 // 4522\n   * @deprecated use client.search()                                                                                   // 4523\n   */                                                                                                                  // 4524\n  sendQueriesBatch: deprecate(function sendQueriesBatchDeprecated(callback) {                                          // 4525\n    return this.search(this._batch, callback);                                                                         // 4526\n  }, deprecatedMessage('client.sendQueriesBatch()', 'client.search()')),                                               // 4527\n                                                                                                                       // 4528\n  /**                                                                                                                  // 4529\n  * Set the number of milliseconds a request can take before automatically being terminated.                           // 4530\n  *                                                                                                                    // 4531\n  * @param {Number} milliseconds                                                                                       // 4532\n  */                                                                                                                   // 4533\n  setRequestTimeout: function(milliseconds) {                                                                          // 4534\n    if (milliseconds) {                                                                                                // 4535\n      this.requestTimeout = parseInt(milliseconds, 10);                                                                // 4536\n    }                                                                                                                  // 4537\n  },                                                                                                                   // 4538\n                                                                                                                       // 4539\n  /**                                                                                                                  // 4540\n   * Search through multiple indices at the same time                                                                  // 4541\n   * @param  {Object[]}   queries  An array of queries you want to run.                                                // 4542\n   * @param {string} queries[].indexName The index name you want to target                                             // 4543\n   * @param {string} [queries[].query] The query to issue on this index. Can also be passed into `params`              // 4544\n   * @param {Object} queries[].params Any search param like hitsPerPage, ..                                            // 4545\n   * @param  {Function} callback Callback to be called                                                                 // 4546\n   * @return {Promise|undefined} Returns a promise if no callback given                                                // 4547\n   */                                                                                                                  // 4548\n  search: function(queries, callback) {                                                                                // 4549\n    var isArray = require(46);                                                                                         // 4550\n    var usage = 'Usage: client.search(arrayOfQueries[, callback])';                                                    // 4551\n                                                                                                                       // 4552\n    if (!isArray(queries)) {                                                                                           // 4553\n      throw new Error(usage);                                                                                          // 4554\n    }                                                                                                                  // 4555\n                                                                                                                       // 4556\n    var client = this;                                                                                                 // 4557\n                                                                                                                       // 4558\n    var postObj = {                                                                                                    // 4559\n      requests: map(queries, function prepareRequest(query) {                                                          // 4560\n        var params = '';                                                                                               // 4561\n                                                                                                                       // 4562\n        // allow query.query                                                                                           // 4563\n        // so we are mimicing the index.search(query, params) method                                                   // 4564\n        // {indexName:, query:, params:}                                                                               // 4565\n        if (query.query !== undefined) {                                                                               // 4566\n          params += 'query=' + encodeURIComponent(query.query);                                                        // 4567\n        }                                                                                                              // 4568\n                                                                                                                       // 4569\n        return {                                                                                                       // 4570\n          indexName: query.indexName,                                                                                  // 4571\n          params: client._getSearchParams(query.params, params)                                                        // 4572\n        };                                                                                                             // 4573\n      })                                                                                                               // 4574\n    };                                                                                                                 // 4575\n                                                                                                                       // 4576\n    return this._jsonRequest({                                                                                         // 4577\n      cache: this.cache,                                                                                               // 4578\n      method: 'POST',                                                                                                  // 4579\n      url: '/1/indexes/*/queries',                                                                                     // 4580\n      body: postObj,                                                                                                   // 4581\n      hostType: 'read',                                                                                                // 4582\n      callback: callback                                                                                               // 4583\n    });                                                                                                                // 4584\n  },                                                                                                                   // 4585\n                                                                                                                       // 4586\n  /**                                                                                                                  // 4587\n   * Perform write operations accross multiple indexes.                                                                // 4588\n   *                                                                                                                   // 4589\n   * To reduce the amount of time spent on network round trips,                                                        // 4590\n   * you can create, update, or delete several objects in one call,                                                    // 4591\n   * using the batch endpoint (all operations are done in the given order).                                            // 4592\n   *                                                                                                                   // 4593\n   * Available actions:                                                                                                // 4594\n   *   - addObject                                                                                                     // 4595\n   *   - updateObject                                                                                                  // 4596\n   *   - partialUpdateObject                                                                                           // 4597\n   *   - partialUpdateObjectNoCreate                                                                                   // 4598\n   *   - deleteObject                                                                                                  // 4599\n   *                                                                                                                   // 4600\n   * https://www.algolia.com/doc/rest_api#Indexes                                                                      // 4601\n   * @param  {Object[]} operations An array of operations to perform                                                   // 4602\n   * @return {Promise|undefined} Returns a promise if no callback given                                                // 4603\n   * @example                                                                                                          // 4604\n   * client.batch([{                                                                                                   // 4605\n   *   action: 'addObject',                                                                                            // 4606\n   *   indexName: 'clients',                                                                                           // 4607\n   *   body: {                                                                                                         // 4608\n   *     name: 'Bill'                                                                                                  // 4609\n   *   }                                                                                                               // 4610\n   * }, {                                                                                                              // 4611\n   *   action: 'udpateObject',                                                                                         // 4612\n   *   indexName: 'fruits',                                                                                            // 4613\n   *   body: {                                                                                                         // 4614\n   *     objectID: '29138',                                                                                            // 4615\n   *     name: 'banana'                                                                                                // 4616\n   *   }                                                                                                               // 4617\n   * }], cb)                                                                                                           // 4618\n   */                                                                                                                  // 4619\n  batch: function(operations, callback) {                                                                              // 4620\n    var isArray = require(46);                                                                                         // 4621\n    var usage = 'Usage: client.batch(operations[, callback])';                                                         // 4622\n                                                                                                                       // 4623\n    if (!isArray(operations)) {                                                                                        // 4624\n      throw new Error(usage);                                                                                          // 4625\n    }                                                                                                                  // 4626\n                                                                                                                       // 4627\n    return this._jsonRequest({                                                                                         // 4628\n      method: 'POST',                                                                                                  // 4629\n      url: '/1/indexes/*/batch',                                                                                       // 4630\n      body: {                                                                                                          // 4631\n        requests: operations                                                                                           // 4632\n      },                                                                                                               // 4633\n      hostType: 'write',                                                                                               // 4634\n      callback: callback                                                                                               // 4635\n    });                                                                                                                // 4636\n  },                                                                                                                   // 4637\n                                                                                                                       // 4638\n  // environment specific methods                                                                                      // 4639\n  destroy: notImplemented,                                                                                             // 4640\n  enableRateLimitForward: notImplemented,                                                                              // 4641\n  disableRateLimitForward: notImplemented,                                                                             // 4642\n  useSecuredAPIKey: notImplemented,                                                                                    // 4643\n  disableSecuredAPIKey: notImplemented,                                                                                // 4644\n  generateSecuredApiKey: notImplemented,                                                                               // 4645\n  /*                                                                                                                   // 4646\n   * Index class constructor.                                                                                          // 4647\n   * You should not use this method directly but use initIndex() function                                              // 4648\n   */                                                                                                                  // 4649\n  Index: function(algoliasearch, indexName) {                                                                          // 4650\n    this.indexName = indexName;                                                                                        // 4651\n    this.as = algoliasearch;                                                                                           // 4652\n    this.typeAheadArgs = null;                                                                                         // 4653\n    this.typeAheadValueOption = null;                                                                                  // 4654\n                                                                                                                       // 4655\n    // make sure every index instance has it's own cache                                                               // 4656\n    this.cache = {};                                                                                                   // 4657\n  },                                                                                                                   // 4658\n  /**                                                                                                                  // 4659\n  * Add an extra field to the HTTP request                                                                             // 4660\n  *                                                                                                                    // 4661\n  * @param name the header field name                                                                                  // 4662\n  * @param value the header field value                                                                                // 4663\n  */                                                                                                                   // 4664\n  setExtraHeader: function(name, value) {                                                                              // 4665\n    this.extraHeaders.push({                                                                                           // 4666\n      name: name.toLowerCase(), value: value                                                                           // 4667\n    });                                                                                                                // 4668\n  },                                                                                                                   // 4669\n                                                                                                                       // 4670\n  /**                                                                                                                  // 4671\n  * Augment sent x-algolia-agent with more data, each agent part                                                       // 4672\n  * is automatically separated from the others by a semicolon;                                                         // 4673\n  *                                                                                                                    // 4674\n  * @param algoliaAgent the agent to add                                                                               // 4675\n  */                                                                                                                   // 4676\n  addAlgoliaAgent: function(algoliaAgent) {                                                                            // 4677\n    this._ua += ';' + algoliaAgent;                                                                                    // 4678\n  },                                                                                                                   // 4679\n                                                                                                                       // 4680\n  _sendQueriesBatch: function(params, callback) {                                                                      // 4681\n    function prepareParams() {                                                                                         // 4682\n      var reqParams = '';                                                                                              // 4683\n      for (var i = 0; i < params.requests.length; ++i) {                                                               // 4684\n        var q = '/1/indexes/' +                                                                                        // 4685\n          encodeURIComponent(params.requests[i].indexName) +                                                           // 4686\n          '?' + params.requests[i].params;                                                                             // 4687\n        reqParams += i + '=' + encodeURIComponent(q) + '&';                                                            // 4688\n      }                                                                                                                // 4689\n      return reqParams;                                                                                                // 4690\n    }                                                                                                                  // 4691\n                                                                                                                       // 4692\n    return this._jsonRequest({                                                                                         // 4693\n      cache: this.cache,                                                                                               // 4694\n      method: 'POST',                                                                                                  // 4695\n      url: '/1/indexes/*/queries',                                                                                     // 4696\n      body: params,                                                                                                    // 4697\n      hostType: 'read',                                                                                                // 4698\n      fallback: {                                                                                                      // 4699\n        method: 'GET',                                                                                                 // 4700\n        url: '/1/indexes/*',                                                                                           // 4701\n        body: {                                                                                                        // 4702\n          params: prepareParams()                                                                                      // 4703\n        }                                                                                                              // 4704\n      },                                                                                                               // 4705\n      callback: callback                                                                                               // 4706\n    });                                                                                                                // 4707\n  },                                                                                                                   // 4708\n  /*                                                                                                                   // 4709\n   * Wrapper that try all hosts to maximize the quality of service                                                     // 4710\n   */                                                                                                                  // 4711\n  _jsonRequest: function(opts) {                                                                                       // 4712\n    var requestDebug = require(6)('algoliasearch:' + opts.url);                                                        // 4713\n                                                                                                                       // 4714\n    var body;                                                                                                          // 4715\n    var cache = opts.cache;                                                                                            // 4716\n    var client = this;                                                                                                 // 4717\n    var tries = 0;                                                                                                     // 4718\n    var usingFallback = false;                                                                                         // 4719\n                                                                                                                       // 4720\n    if (opts.body !== undefined) {                                                                                     // 4721\n      body = safeJSONStringify(opts.body);                                                                             // 4722\n    }                                                                                                                  // 4723\n                                                                                                                       // 4724\n    requestDebug('request start');                                                                                     // 4725\n                                                                                                                       // 4726\n    function doRequest(requester, reqOpts) {                                                                           // 4727\n      var cacheID;                                                                                                     // 4728\n                                                                                                                       // 4729\n      if (client._useCache) {                                                                                          // 4730\n        cacheID = opts.url;                                                                                            // 4731\n      }                                                                                                                // 4732\n                                                                                                                       // 4733\n      // as we sometime use POST requests to pass parameters (like query='aa'),                                        // 4734\n      // the cacheID must also include the body to be different between calls                                          // 4735\n      if (client._useCache && body) {                                                                                  // 4736\n        cacheID += '_body_' + reqOpts.body;                                                                            // 4737\n      }                                                                                                                // 4738\n                                                                                                                       // 4739\n      // handle cache existence                                                                                        // 4740\n      if (client._useCache && cache && cache[cacheID] !== undefined) {                                                 // 4741\n        requestDebug('serving response from cache');                                                                   // 4742\n        return client._promise.resolve(JSON.parse(cache[cacheID]));                                                    // 4743\n      }                                                                                                                // 4744\n                                                                                                                       // 4745\n      // if we reached max tries                                                                                       // 4746\n      if (tries >= client.hosts[opts.hostType].length ||                                                               // 4747\n        // or we need to switch to fallback                                                                            // 4748\n        client.useFallback && !usingFallback) {                                                                        // 4749\n        // and there's no fallback or we are already using a fallback                                                  // 4750\n        if (!opts.fallback || !client._request.fallback || usingFallback) {                                            // 4751\n          requestDebug('could not get any response');                                                                  // 4752\n          // then stop                                                                                                 // 4753\n          return client._promise.reject(new errors.AlgoliaSearchError(                                                 // 4754\n            'Cannot connect to the AlgoliaSearch API.' +                                                               // 4755\n            ' Send an email to support@algolia.com to report and resolve the issue.' +                                 // 4756\n            ' Application id was: ' + client.applicationID                                                             // 4757\n          ));                                                                                                          // 4758\n        }                                                                                                              // 4759\n                                                                                                                       // 4760\n        requestDebug('switching to fallback');                                                                         // 4761\n                                                                                                                       // 4762\n        // let's try the fallback starting from here                                                                   // 4763\n        tries = 0;                                                                                                     // 4764\n                                                                                                                       // 4765\n        // method, url and body are fallback dependent                                                                 // 4766\n        reqOpts.method = opts.fallback.method;                                                                         // 4767\n        reqOpts.url = opts.fallback.url;                                                                               // 4768\n        reqOpts.jsonBody = opts.fallback.body;                                                                         // 4769\n        if (reqOpts.jsonBody) {                                                                                        // 4770\n          reqOpts.body = safeJSONStringify(reqOpts.jsonBody);                                                          // 4771\n        }                                                                                                              // 4772\n                                                                                                                       // 4773\n        reqOpts.timeout = client.requestTimeout * (tries + 1);                                                         // 4774\n        client.hostIndex[opts.hostType] = 0;                                                                           // 4775\n        usingFallback = true; // the current request is now using fallback                                             // 4776\n        return doRequest(client._request.fallback, reqOpts);                                                           // 4777\n      }                                                                                                                // 4778\n                                                                                                                       // 4779\n      var url = client.hosts[opts.hostType][client.hostIndex[opts.hostType]] + reqOpts.url;                            // 4780\n      var options = {                                                                                                  // 4781\n        body: body,                                                                                                    // 4782\n        jsonBody: opts.body,                                                                                           // 4783\n        method: reqOpts.method,                                                                                        // 4784\n        headers: client._computeRequestHeaders(),                                                                      // 4785\n        timeout: reqOpts.timeout,                                                                                      // 4786\n        debug: requestDebug                                                                                            // 4787\n      };                                                                                                               // 4788\n                                                                                                                       // 4789\n      requestDebug('method: %s, url: %s, headers: %j, timeout: %d',                                                    // 4790\n        options.method, url, options.headers, options.timeout);                                                        // 4791\n                                                                                                                       // 4792\n      if (requester === client._request.fallback) {                                                                    // 4793\n        requestDebug('using fallback');                                                                                // 4794\n      }                                                                                                                // 4795\n                                                                                                                       // 4796\n      // `requester` is any of this._request or this._request.fallback                                                 // 4797\n      // thus it needs to be called using the client as context                                                        // 4798\n      return requester.call(client, url, options).then(success, tryFallback);                                          // 4799\n                                                                                                                       // 4800\n      function success(httpResponse) {                                                                                 // 4801\n        // compute the status of the response,                                                                         // 4802\n        //                                                                                                             // 4803\n        // When in browser mode, using XDR or JSONP, we have no statusCode available                                   // 4804\n        // So we rely on our API response `status` property.                                                           // 4805\n        // But `waitTask` can set a `status` property which is not the statusCode (it's the task status)               // 4806\n        // So we check if there's a `message` along `status` and it means it's an error                                // 4807\n        //                                                                                                             // 4808\n        // That's the only case where we have a response.status that's not the http statusCode                         // 4809\n        var status = httpResponse && httpResponse.body && httpResponse.body.message && httpResponse.body.status ||     // 4810\n                                                                                                                       // 4811\n          // this is important to check the request statusCode AFTER the body eventual                                 // 4812\n          // statusCode because some implementations (jQuery XDomainRequest transport) may                             // 4813\n          // send statusCode 200 while we had an error                                                                 // 4814\n          httpResponse.statusCode ||                                                                                   // 4815\n                                                                                                                       // 4816\n          // When in browser mode, using XDR or JSONP                                                                  // 4817\n          // we default to success when no error (no response.status && response.message)                              // 4818\n          // If there was a JSON.parse() error then body is null and it fails                                          // 4819\n          httpResponse && httpResponse.body && 200;                                                                    // 4820\n                                                                                                                       // 4821\n        requestDebug('received response: statusCode: %s, computed statusCode: %d, headers: %j',                        // 4822\n          httpResponse.statusCode, status, httpResponse.headers);                                                      // 4823\n                                                                                                                       // 4824\n        if (process.env.DEBUG && process.env.DEBUG.indexOf('debugBody') !== -1) {                                      // 4825\n          requestDebug('body: %j', httpResponse.body);                                                                 // 4826\n        }                                                                                                              // 4827\n                                                                                                                       // 4828\n        var ok = status === 200 || status === 201;                                                                     // 4829\n        var retry = !ok && Math.floor(status / 100) !== 4 && Math.floor(status / 100) !== 1;                           // 4830\n                                                                                                                       // 4831\n        if (client._useCache && ok && cache) {                                                                         // 4832\n          cache[cacheID] = httpResponse.responseText;                                                                  // 4833\n        }                                                                                                              // 4834\n                                                                                                                       // 4835\n        if (ok) {                                                                                                      // 4836\n          return httpResponse.body;                                                                                    // 4837\n        }                                                                                                              // 4838\n                                                                                                                       // 4839\n        if (retry) {                                                                                                   // 4840\n          tries += 1;                                                                                                  // 4841\n          return retryRequest();                                                                                       // 4842\n        }                                                                                                              // 4843\n                                                                                                                       // 4844\n        var unrecoverableError = new errors.AlgoliaSearchError(                                                        // 4845\n          httpResponse.body && httpResponse.body.message                                                               // 4846\n        );                                                                                                             // 4847\n                                                                                                                       // 4848\n        return client._promise.reject(unrecoverableError);                                                             // 4849\n      }                                                                                                                // 4850\n                                                                                                                       // 4851\n      function tryFallback(err) {                                                                                      // 4852\n        // error cases:                                                                                                // 4853\n        //  While not in fallback mode:                                                                                // 4854\n        //    - CORS not supported                                                                                     // 4855\n        //    - network error                                                                                          // 4856\n        //  While in fallback mode:                                                                                    // 4857\n        //    - timeout                                                                                                // 4858\n        //    - network error                                                                                          // 4859\n        //    - badly formatted JSONP (script loaded, did not call our callback)                                       // 4860\n        //  In both cases:                                                                                             // 4861\n        //    - uncaught exception occurs (TypeError)                                                                  // 4862\n        requestDebug('error: %s, stack: %s', err.message, err.stack);                                                  // 4863\n                                                                                                                       // 4864\n        if (!(err instanceof errors.AlgoliaSearchError)) {                                                             // 4865\n          err = new errors.Unknown(err && err.message, err);                                                           // 4866\n        }                                                                                                              // 4867\n                                                                                                                       // 4868\n        tries += 1;                                                                                                    // 4869\n                                                                                                                       // 4870\n        // stop the request implementation when:                                                                       // 4871\n        if (                                                                                                           // 4872\n          // we did not generate this error,                                                                           // 4873\n          // it comes from a throw in some other piece of code                                                         // 4874\n          err instanceof errors.Unknown ||                                                                             // 4875\n                                                                                                                       // 4876\n          // server sent unparsable JSON                                                                               // 4877\n          err instanceof errors.UnparsableJSON ||                                                                      // 4878\n                                                                                                                       // 4879\n          // max tries and already using fallback or no fallback                                                       // 4880\n          tries >= client.hosts[opts.hostType].length &&                                                               // 4881\n          (usingFallback || !opts.fallback || !client._request.fallback)) {                                            // 4882\n          // stop request implementation for this command                                                              // 4883\n          return client._promise.reject(err);                                                                          // 4884\n        }                                                                                                              // 4885\n                                                                                                                       // 4886\n        client.hostIndex[opts.hostType] = ++client.hostIndex[opts.hostType] % client.hosts[opts.hostType].length;      // 4887\n                                                                                                                       // 4888\n        if (err instanceof errors.RequestTimeout) {                                                                    // 4889\n          return retryRequest();                                                                                       // 4890\n        } else if (client._request.fallback && !client.useFallback) {                                                  // 4891\n          // if any error occured but timeout, use fallback for the rest                                               // 4892\n          // of the session                                                                                            // 4893\n          client.useFallback = true;                                                                                   // 4894\n        }                                                                                                              // 4895\n                                                                                                                       // 4896\n        return doRequest(requester, reqOpts);                                                                          // 4897\n      }                                                                                                                // 4898\n                                                                                                                       // 4899\n      function retryRequest() {                                                                                        // 4900\n        client.hostIndex[opts.hostType] = ++client.hostIndex[opts.hostType] % client.hosts[opts.hostType].length;      // 4901\n        reqOpts.timeout = client.requestTimeout * (tries + 1);                                                         // 4902\n        return doRequest(requester, reqOpts);                                                                          // 4903\n      }                                                                                                                // 4904\n    }                                                                                                                  // 4905\n                                                                                                                       // 4906\n    // we can use a fallback if forced AND fallback parameters are available                                           // 4907\n    var useFallback = client.useFallback && opts.fallback;                                                             // 4908\n    var requestOptions = useFallback ? opts.fallback : opts;                                                           // 4909\n                                                                                                                       // 4910\n    var promise = doRequest(                                                                                           // 4911\n      // set the requester                                                                                             // 4912\n      useFallback ? client._request.fallback : client._request, {                                                      // 4913\n        url: requestOptions.url,                                                                                       // 4914\n        method: requestOptions.method,                                                                                 // 4915\n        body: body,                                                                                                    // 4916\n        jsonBody: opts.body,                                                                                           // 4917\n        timeout: client.requestTimeout * (tries + 1)                                                                   // 4918\n      }                                                                                                                // 4919\n    );                                                                                                                 // 4920\n                                                                                                                       // 4921\n    // either we have a callback                                                                                       // 4922\n    // either we are using promises                                                                                    // 4923\n    if (opts.callback) {                                                                                               // 4924\n      promise.then(function okCb(content) {                                                                            // 4925\n        exitPromise(function() {                                                                                       // 4926\n          opts.callback(null, content);                                                                                // 4927\n        }, client._setTimeout || setTimeout);                                                                          // 4928\n      }, function nookCb(err) {                                                                                        // 4929\n        exitPromise(function() {                                                                                       // 4930\n          opts.callback(err);                                                                                          // 4931\n        }, client._setTimeout || setTimeout);                                                                          // 4932\n      });                                                                                                              // 4933\n    } else {                                                                                                           // 4934\n      return promise;                                                                                                  // 4935\n    }                                                                                                                  // 4936\n  },                                                                                                                   // 4937\n                                                                                                                       // 4938\n  /*                                                                                                                   // 4939\n  * Transform search param object in query string                                                                      // 4940\n  */                                                                                                                   // 4941\n  _getSearchParams: function(args, params) {                                                                           // 4942\n    if (this._isUndefined(args) || args === null) {                                                                    // 4943\n      return params;                                                                                                   // 4944\n    }                                                                                                                  // 4945\n    for (var key in args) {                                                                                            // 4946\n      if (key !== null && args[key] !== undefined && args.hasOwnProperty(key)) {                                       // 4947\n        params += params === '' ? '' : '&';                                                                            // 4948\n        params += key + '=' + encodeURIComponent(Object.prototype.toString.call(args[key]) === '[object Array]' ? safeJSONStringify(args[key]) : args[key]);\n      }                                                                                                                // 4950\n    }                                                                                                                  // 4951\n    return params;                                                                                                     // 4952\n  },                                                                                                                   // 4953\n                                                                                                                       // 4954\n  _isUndefined: function(obj) {                                                                                        // 4955\n    return obj === void 0;                                                                                             // 4956\n  },                                                                                                                   // 4957\n                                                                                                                       // 4958\n  _computeRequestHeaders: function() {                                                                                 // 4959\n    var forEach = require(11);                                                                                         // 4960\n                                                                                                                       // 4961\n    var requestHeaders = {                                                                                             // 4962\n      'x-algolia-api-key': this.apiKey,                                                                                // 4963\n      'x-algolia-application-id': this.applicationID,                                                                  // 4964\n      'x-algolia-agent': this._ua                                                                                      // 4965\n    };                                                                                                                 // 4966\n                                                                                                                       // 4967\n    if (this.userToken) {                                                                                              // 4968\n      requestHeaders['x-algolia-usertoken'] = this.userToken;                                                          // 4969\n    }                                                                                                                  // 4970\n                                                                                                                       // 4971\n    if (this.securityTags) {                                                                                           // 4972\n      requestHeaders['x-algolia-tagfilters'] = this.securityTags;                                                      // 4973\n    }                                                                                                                  // 4974\n                                                                                                                       // 4975\n    if (this.extraHeaders) {                                                                                           // 4976\n      forEach(this.extraHeaders, function addToRequestHeaders(header) {                                                // 4977\n        requestHeaders[header.name] = header.value;                                                                    // 4978\n      });                                                                                                              // 4979\n    }                                                                                                                  // 4980\n                                                                                                                       // 4981\n    return requestHeaders;                                                                                             // 4982\n  }                                                                                                                    // 4983\n};                                                                                                                     // 4984\n                                                                                                                       // 4985\n/*                                                                                                                     // 4986\n * Contains all the functions related to one index                                                                     // 4987\n * You should use AlgoliaSearch.initIndex(indexName) to retrieve this object                                           // 4988\n */                                                                                                                    // 4989\nAlgoliaSearch.prototype.Index.prototype = {                                                                            // 4990\n  /*                                                                                                                   // 4991\n   * Clear all queries in cache                                                                                        // 4992\n   */                                                                                                                  // 4993\n  clearCache: function() {                                                                                             // 4994\n    this.cache = {};                                                                                                   // 4995\n  },                                                                                                                   // 4996\n  /*                                                                                                                   // 4997\n   * Add an object in this index                                                                                       // 4998\n   *                                                                                                                   // 4999\n   * @param content contains the javascript object to add inside the index                                             // 5000\n   * @param objectID (optional) an objectID you want to attribute to this object                                       // 5001\n   * (if the attribute already exist the old object will be overwrite)                                                 // 5002\n   * @param callback (optional) the result callback called with two arguments:                                         // 5003\n   *  error: null or Error('message')                                                                                  // 5004\n   *  content: the server answer that contains 3 elements: createAt, taskId and objectID                               // 5005\n   */                                                                                                                  // 5006\n  addObject: function(content, objectID, callback) {                                                                   // 5007\n    var indexObj = this;                                                                                               // 5008\n                                                                                                                       // 5009\n    if (arguments.length === 1 || typeof objectID === 'function') {                                                    // 5010\n      callback = objectID;                                                                                             // 5011\n      objectID = undefined;                                                                                            // 5012\n    }                                                                                                                  // 5013\n                                                                                                                       // 5014\n    return this.as._jsonRequest({                                                                                      // 5015\n      method: objectID !== undefined ?                                                                                 // 5016\n        'PUT' : // update or create                                                                                    // 5017\n        'POST', // create (API generates an objectID)                                                                  // 5018\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + // create                                          // 5019\n        (objectID !== undefined ? '/' + encodeURIComponent(objectID) : ''), // update or create                        // 5020\n      body: content,                                                                                                   // 5021\n      hostType: 'write',                                                                                               // 5022\n      callback: callback                                                                                               // 5023\n    });                                                                                                                // 5024\n  },                                                                                                                   // 5025\n  /*                                                                                                                   // 5026\n   * Add several objects                                                                                               // 5027\n   *                                                                                                                   // 5028\n   * @param objects contains an array of objects to add                                                                // 5029\n   * @param callback (optional) the result callback called with two arguments:                                         // 5030\n   *  error: null or Error('message')                                                                                  // 5031\n   *  content: the server answer that updateAt and taskID                                                              // 5032\n   */                                                                                                                  // 5033\n  addObjects: function(objects, callback) {                                                                            // 5034\n    var isArray = require(46);                                                                                         // 5035\n    var usage = 'Usage: index.addObjects(arrayOfObjects[, callback])';                                                 // 5036\n                                                                                                                       // 5037\n    if (!isArray(objects)) {                                                                                           // 5038\n      throw new Error(usage);                                                                                          // 5039\n    }                                                                                                                  // 5040\n                                                                                                                       // 5041\n    var indexObj = this;                                                                                               // 5042\n    var postObj = {                                                                                                    // 5043\n      requests: []                                                                                                     // 5044\n    };                                                                                                                 // 5045\n    for (var i = 0; i < objects.length; ++i) {                                                                         // 5046\n      var request = {                                                                                                  // 5047\n        action: 'addObject',                                                                                           // 5048\n        body: objects[i]                                                                                               // 5049\n      };                                                                                                               // 5050\n      postObj.requests.push(request);                                                                                  // 5051\n    }                                                                                                                  // 5052\n    return this.as._jsonRequest({                                                                                      // 5053\n      method: 'POST',                                                                                                  // 5054\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',                                          // 5055\n      body: postObj,                                                                                                   // 5056\n      hostType: 'write',                                                                                               // 5057\n      callback: callback                                                                                               // 5058\n    });                                                                                                                // 5059\n  },                                                                                                                   // 5060\n  /*                                                                                                                   // 5061\n   * Get an object from this index                                                                                     // 5062\n   *                                                                                                                   // 5063\n   * @param objectID the unique identifier of the object to retrieve                                                   // 5064\n   * @param attrs (optional) if set, contains the array of attribute names to retrieve                                 // 5065\n   * @param callback (optional) the result callback called with two arguments                                          // 5066\n   *  error: null or Error('message')                                                                                  // 5067\n   *  content: the object to retrieve or the error message if a failure occured                                        // 5068\n   */                                                                                                                  // 5069\n  getObject: function(objectID, attrs, callback) {                                                                     // 5070\n    var indexObj = this;                                                                                               // 5071\n                                                                                                                       // 5072\n    if (arguments.length === 1 || typeof attrs === 'function') {                                                       // 5073\n      callback = attrs;                                                                                                // 5074\n      attrs = undefined;                                                                                               // 5075\n    }                                                                                                                  // 5076\n                                                                                                                       // 5077\n    var params = '';                                                                                                   // 5078\n    if (attrs !== undefined) {                                                                                         // 5079\n      params = '?attributes=';                                                                                         // 5080\n      for (var i = 0; i < attrs.length; ++i) {                                                                         // 5081\n        if (i !== 0) {                                                                                                 // 5082\n          params += ',';                                                                                               // 5083\n        }                                                                                                              // 5084\n        params += attrs[i];                                                                                            // 5085\n      }                                                                                                                // 5086\n    }                                                                                                                  // 5087\n                                                                                                                       // 5088\n    return this.as._jsonRequest({                                                                                      // 5089\n      method: 'GET',                                                                                                   // 5090\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(objectID) + params,       // 5091\n      hostType: 'read',                                                                                                // 5092\n      callback: callback                                                                                               // 5093\n    });                                                                                                                // 5094\n  },                                                                                                                   // 5095\n                                                                                                                       // 5096\n  /*                                                                                                                   // 5097\n   * Get several objects from this index                                                                               // 5098\n   *                                                                                                                   // 5099\n   * @param objectIDs the array of unique identifier of objects to retrieve                                            // 5100\n   */                                                                                                                  // 5101\n  getObjects: function(objectIDs, attributesToRetrieve, callback) {                                                    // 5102\n    var isArray = require(46);                                                                                         // 5103\n    var usage = 'Usage: index.getObjects(arrayOfObjectIDs[, callback])';                                               // 5104\n                                                                                                                       // 5105\n    if (!isArray(objectIDs)) {                                                                                         // 5106\n      throw new Error(usage);                                                                                          // 5107\n    }                                                                                                                  // 5108\n                                                                                                                       // 5109\n    var indexObj = this;                                                                                               // 5110\n                                                                                                                       // 5111\n    if (arguments.length === 1 || typeof attributesToRetrieve === 'function') {                                        // 5112\n      callback = attributesToRetrieve;                                                                                 // 5113\n      attributesToRetrieve = undefined;                                                                                // 5114\n    }                                                                                                                  // 5115\n                                                                                                                       // 5116\n    var body = {                                                                                                       // 5117\n      requests: map(objectIDs, function prepareRequest(objectID) {                                                     // 5118\n        var request = {                                                                                                // 5119\n          indexName: indexObj.indexName,                                                                               // 5120\n          objectID: objectID                                                                                           // 5121\n        };                                                                                                             // 5122\n                                                                                                                       // 5123\n        if (attributesToRetrieve) {                                                                                    // 5124\n          request.attributesToRetrieve = attributesToRetrieve.join(',');                                               // 5125\n        }                                                                                                              // 5126\n                                                                                                                       // 5127\n        return request;                                                                                                // 5128\n      })                                                                                                               // 5129\n    };                                                                                                                 // 5130\n                                                                                                                       // 5131\n    return this.as._jsonRequest({                                                                                      // 5132\n      method: 'POST',                                                                                                  // 5133\n      url: '/1/indexes/*/objects',                                                                                     // 5134\n      hostType: 'read',                                                                                                // 5135\n      body: body,                                                                                                      // 5136\n      callback: callback                                                                                               // 5137\n    });                                                                                                                // 5138\n  },                                                                                                                   // 5139\n                                                                                                                       // 5140\n  /*                                                                                                                   // 5141\n   * Update partially an object (only update attributes passed in argument)                                            // 5142\n   *                                                                                                                   // 5143\n   * @param partialObject contains the javascript attributes to override, the                                          // 5144\n   *  object must contains an objectID attribute                                                                       // 5145\n   * @param callback (optional) the result callback called with two arguments:                                         // 5146\n   *  error: null or Error('message')                                                                                  // 5147\n   *  content: the server answer that contains 3 elements: createAt, taskId and objectID                               // 5148\n   */                                                                                                                  // 5149\n  partialUpdateObject: function(partialObject, callback) {                                                             // 5150\n    var indexObj = this;                                                                                               // 5151\n    return this.as._jsonRequest({                                                                                      // 5152\n      method: 'POST',                                                                                                  // 5153\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(partialObject.objectID) + '/partial',\n      body: partialObject,                                                                                             // 5155\n      hostType: 'write',                                                                                               // 5156\n      callback: callback                                                                                               // 5157\n    });                                                                                                                // 5158\n  },                                                                                                                   // 5159\n  /*                                                                                                                   // 5160\n   * Partially Override the content of several objects                                                                 // 5161\n   *                                                                                                                   // 5162\n   * @param objects contains an array of objects to update (each object must contains a objectID attribute)            // 5163\n   * @param callback (optional) the result callback called with two arguments:                                         // 5164\n   *  error: null or Error('message')                                                                                  // 5165\n   *  content: the server answer that updateAt and taskID                                                              // 5166\n   */                                                                                                                  // 5167\n  partialUpdateObjects: function(objects, callback) {                                                                  // 5168\n    var isArray = require(46);                                                                                         // 5169\n    var usage = 'Usage: index.partialUpdateObjects(arrayOfObjects[, callback])';                                       // 5170\n                                                                                                                       // 5171\n    if (!isArray(objects)) {                                                                                           // 5172\n      throw new Error(usage);                                                                                          // 5173\n    }                                                                                                                  // 5174\n                                                                                                                       // 5175\n    var indexObj = this;                                                                                               // 5176\n    var postObj = {                                                                                                    // 5177\n      requests: []                                                                                                     // 5178\n    };                                                                                                                 // 5179\n    for (var i = 0; i < objects.length; ++i) {                                                                         // 5180\n      var request = {                                                                                                  // 5181\n        action: 'partialUpdateObject',                                                                                 // 5182\n        objectID: objects[i].objectID,                                                                                 // 5183\n        body: objects[i]                                                                                               // 5184\n      };                                                                                                               // 5185\n      postObj.requests.push(request);                                                                                  // 5186\n    }                                                                                                                  // 5187\n    return this.as._jsonRequest({                                                                                      // 5188\n      method: 'POST',                                                                                                  // 5189\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',                                          // 5190\n      body: postObj,                                                                                                   // 5191\n      hostType: 'write',                                                                                               // 5192\n      callback: callback                                                                                               // 5193\n    });                                                                                                                // 5194\n  },                                                                                                                   // 5195\n  /*                                                                                                                   // 5196\n   * Override the content of object                                                                                    // 5197\n   *                                                                                                                   // 5198\n   * @param object contains the javascript object to save, the object must contains an objectID attribute              // 5199\n   * @param callback (optional) the result callback called with two arguments:                                         // 5200\n   *  error: null or Error('message')                                                                                  // 5201\n   *  content: the server answer that updateAt and taskID                                                              // 5202\n   */                                                                                                                  // 5203\n  saveObject: function(object, callback) {                                                                             // 5204\n    var indexObj = this;                                                                                               // 5205\n    return this.as._jsonRequest({                                                                                      // 5206\n      method: 'PUT',                                                                                                   // 5207\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(object.objectID),         // 5208\n      body: object,                                                                                                    // 5209\n      hostType: 'write',                                                                                               // 5210\n      callback: callback                                                                                               // 5211\n    });                                                                                                                // 5212\n  },                                                                                                                   // 5213\n  /*                                                                                                                   // 5214\n   * Override the content of several objects                                                                           // 5215\n   *                                                                                                                   // 5216\n   * @param objects contains an array of objects to update (each object must contains a objectID attribute)            // 5217\n   * @param callback (optional) the result callback called with two arguments:                                         // 5218\n   *  error: null or Error('message')                                                                                  // 5219\n   *  content: the server answer that updateAt and taskID                                                              // 5220\n   */                                                                                                                  // 5221\n  saveObjects: function(objects, callback) {                                                                           // 5222\n    var isArray = require(46);                                                                                         // 5223\n    var usage = 'Usage: index.saveObjects(arrayOfObjects[, callback])';                                                // 5224\n                                                                                                                       // 5225\n    if (!isArray(objects)) {                                                                                           // 5226\n      throw new Error(usage);                                                                                          // 5227\n    }                                                                                                                  // 5228\n                                                                                                                       // 5229\n    var indexObj = this;                                                                                               // 5230\n    var postObj = {                                                                                                    // 5231\n      requests: []                                                                                                     // 5232\n    };                                                                                                                 // 5233\n    for (var i = 0; i < objects.length; ++i) {                                                                         // 5234\n      var request = {                                                                                                  // 5235\n        action: 'updateObject',                                                                                        // 5236\n        objectID: objects[i].objectID,                                                                                 // 5237\n        body: objects[i]                                                                                               // 5238\n      };                                                                                                               // 5239\n      postObj.requests.push(request);                                                                                  // 5240\n    }                                                                                                                  // 5241\n    return this.as._jsonRequest({                                                                                      // 5242\n      method: 'POST',                                                                                                  // 5243\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',                                          // 5244\n      body: postObj,                                                                                                   // 5245\n      hostType: 'write',                                                                                               // 5246\n      callback: callback                                                                                               // 5247\n    });                                                                                                                // 5248\n  },                                                                                                                   // 5249\n  /*                                                                                                                   // 5250\n   * Delete an object from the index                                                                                   // 5251\n   *                                                                                                                   // 5252\n   * @param objectID the unique identifier of object to delete                                                         // 5253\n   * @param callback (optional) the result callback called with two arguments:                                         // 5254\n   *  error: null or Error('message')                                                                                  // 5255\n   *  content: the server answer that contains 3 elements: createAt, taskId and objectID                               // 5256\n   */                                                                                                                  // 5257\n  deleteObject: function(objectID, callback) {                                                                         // 5258\n    if (typeof objectID === 'function' || typeof objectID !== 'string' && typeof objectID !== 'number') {              // 5259\n      var err = new errors.AlgoliaSearchError('Cannot delete an object without an objectID');                          // 5260\n      callback = objectID;                                                                                             // 5261\n      if (typeof callback === 'function') {                                                                            // 5262\n        return callback(err);                                                                                          // 5263\n      }                                                                                                                // 5264\n                                                                                                                       // 5265\n      return this.as._promise.reject(err);                                                                             // 5266\n    }                                                                                                                  // 5267\n                                                                                                                       // 5268\n    var indexObj = this;                                                                                               // 5269\n    return this.as._jsonRequest({                                                                                      // 5270\n      method: 'DELETE',                                                                                                // 5271\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/' + encodeURIComponent(objectID),                // 5272\n      hostType: 'write',                                                                                               // 5273\n      callback: callback                                                                                               // 5274\n    });                                                                                                                // 5275\n  },                                                                                                                   // 5276\n  /*                                                                                                                   // 5277\n   * Delete several objects from an index                                                                              // 5278\n   *                                                                                                                   // 5279\n   * @param objectIDs contains an array of objectID to delete                                                          // 5280\n   * @param callback (optional) the result callback called with two arguments:                                         // 5281\n   *  error: null or Error('message')                                                                                  // 5282\n   *  content: the server answer that contains 3 elements: createAt, taskId and objectID                               // 5283\n   */                                                                                                                  // 5284\n  deleteObjects: function(objectIDs, callback) {                                                                       // 5285\n    var isArray = require(46);                                                                                         // 5286\n    var usage = 'Usage: index.deleteObjects(arrayOfObjectIDs[, callback])';                                            // 5287\n                                                                                                                       // 5288\n    if (!isArray(objectIDs)) {                                                                                         // 5289\n      throw new Error(usage);                                                                                          // 5290\n    }                                                                                                                  // 5291\n                                                                                                                       // 5292\n    var indexObj = this;                                                                                               // 5293\n    var postObj = {                                                                                                    // 5294\n      requests: map(objectIDs, function prepareRequest(objectID) {                                                     // 5295\n        return {                                                                                                       // 5296\n          action: 'deleteObject',                                                                                      // 5297\n          objectID: objectID,                                                                                          // 5298\n          body: {                                                                                                      // 5299\n            objectID: objectID                                                                                         // 5300\n          }                                                                                                            // 5301\n        };                                                                                                             // 5302\n      })                                                                                                               // 5303\n    };                                                                                                                 // 5304\n                                                                                                                       // 5305\n    return this.as._jsonRequest({                                                                                      // 5306\n      method: 'POST',                                                                                                  // 5307\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/batch',                                          // 5308\n      body: postObj,                                                                                                   // 5309\n      hostType: 'write',                                                                                               // 5310\n      callback: callback                                                                                               // 5311\n    });                                                                                                                // 5312\n  },                                                                                                                   // 5313\n  /*                                                                                                                   // 5314\n   * Delete all objects matching a query                                                                               // 5315\n   *                                                                                                                   // 5316\n   * @param query the query string                                                                                     // 5317\n   * @param params the optional query parameters                                                                       // 5318\n   * @param callback (optional) the result callback called with one argument                                           // 5319\n   *  error: null or Error('message')                                                                                  // 5320\n   */                                                                                                                  // 5321\n  deleteByQuery: function(query, params, callback) {                                                                   // 5322\n    var clone = require(43);                                                                                           // 5323\n                                                                                                                       // 5324\n    var indexObj = this;                                                                                               // 5325\n    var client = indexObj.as;                                                                                          // 5326\n                                                                                                                       // 5327\n    if (arguments.length === 1 || typeof params === 'function') {                                                      // 5328\n      callback = params;                                                                                               // 5329\n      params = {};                                                                                                     // 5330\n    } else {                                                                                                           // 5331\n      params = clone(params);                                                                                          // 5332\n    }                                                                                                                  // 5333\n                                                                                                                       // 5334\n    params.attributesToRetrieve = 'objectID';                                                                          // 5335\n    params.hitsPerPage = 1000;                                                                                         // 5336\n    params.distinct = false;                                                                                           // 5337\n                                                                                                                       // 5338\n    // when deleting, we should never use cache to get the                                                             // 5339\n    // search results                                                                                                  // 5340\n    this.clearCache();                                                                                                 // 5341\n                                                                                                                       // 5342\n    // there's a problem in how we use the promise chain,                                                              // 5343\n    // see how waitTask is done                                                                                        // 5344\n    var promise = this                                                                                                 // 5345\n      .search(query, params)                                                                                           // 5346\n      .then(stopOrDelete);                                                                                             // 5347\n                                                                                                                       // 5348\n    function stopOrDelete(searchContent) {                                                                             // 5349\n      // stop here                                                                                                     // 5350\n      if (searchContent.nbHits === 0) {                                                                                // 5351\n        // return indexObj.as._request.resolve();                                                                      // 5352\n        return searchContent;                                                                                          // 5353\n      }                                                                                                                // 5354\n                                                                                                                       // 5355\n      // continue and do a recursive call                                                                              // 5356\n      var objectIDs = map(searchContent.hits, function getObjectID(object) {                                           // 5357\n        return object.objectID;                                                                                        // 5358\n      });                                                                                                              // 5359\n                                                                                                                       // 5360\n      return indexObj                                                                                                  // 5361\n        .deleteObjects(objectIDs)                                                                                      // 5362\n        .then(waitTask)                                                                                                // 5363\n        .then(doDeleteByQuery);                                                                                        // 5364\n    }                                                                                                                  // 5365\n                                                                                                                       // 5366\n    function waitTask(deleteObjectsContent) {                                                                          // 5367\n      return indexObj.waitTask(deleteObjectsContent.taskID);                                                           // 5368\n    }                                                                                                                  // 5369\n                                                                                                                       // 5370\n    function doDeleteByQuery() {                                                                                       // 5371\n      return indexObj.deleteByQuery(query, params);                                                                    // 5372\n    }                                                                                                                  // 5373\n                                                                                                                       // 5374\n    if (!callback) {                                                                                                   // 5375\n      return promise;                                                                                                  // 5376\n    }                                                                                                                  // 5377\n                                                                                                                       // 5378\n    promise.then(success, failure);                                                                                    // 5379\n                                                                                                                       // 5380\n    function success() {                                                                                               // 5381\n      exitPromise(function exit() {                                                                                    // 5382\n        callback(null);                                                                                                // 5383\n      }, client._setTimeout || setTimeout);                                                                            // 5384\n    }                                                                                                                  // 5385\n                                                                                                                       // 5386\n    function failure(err) {                                                                                            // 5387\n      exitPromise(function exit() {                                                                                    // 5388\n        callback(err);                                                                                                 // 5389\n      }, client._setTimeout || setTimeout);                                                                            // 5390\n    }                                                                                                                  // 5391\n  },                                                                                                                   // 5392\n                                                                                                                       // 5393\n  /*                                                                                                                   // 5394\n   * Search inside the index using XMLHttpRequest request (Using a POST query to                                       // 5395\n   * minimize number of OPTIONS queries: Cross-Origin Resource Sharing).                                               // 5396\n   *                                                                                                                   // 5397\n   * @param query the full text query                                                                                  // 5398\n   * @param args (optional) if set, contains an object with query parameters:                                          // 5399\n   * - page: (integer) Pagination parameter used to select the page to retrieve.                                       // 5400\n   *                   Page is zero-based and defaults to 0. Thus,                                                     // 5401\n   *                   to retrieve the 10th page you need to set page=9                                                // 5402\n   * - hitsPerPage: (integer) Pagination parameter used to select the number of hits per page. Defaults to 20.         // 5403\n   * - attributesToRetrieve: a string that contains the list of object attributes                                      // 5404\n   * you want to retrieve (let you minimize the answer size).                                                          // 5405\n   *   Attributes are separated with a comma (for example \"name,address\").                                             // 5406\n   *   You can also use an array (for example [\"name\",\"address\"]).                                                     // 5407\n   *   By default, all attributes are retrieved. You can also use '*' to retrieve all                                  // 5408\n   *   values when an attributesToRetrieve setting is specified for your index.                                        // 5409\n   * - attributesToHighlight: a string that contains the list of attributes you                                        // 5410\n   *   want to highlight according to the query.                                                                       // 5411\n   *   Attributes are separated by a comma. You can also use an array (for example [\"name\",\"address\"]).                // 5412\n   *   If an attribute has no match for the query, the raw value is returned.                                          // 5413\n   *   By default all indexed text attributes are highlighted.                                                         // 5414\n   *   You can use `*` if you want to highlight all textual attributes.                                                // 5415\n   *   Numerical attributes are not highlighted.                                                                       // 5416\n   *   A matchLevel is returned for each highlighted attribute and can contain:                                        // 5417\n   *      - full: if all the query terms were found in the attribute,                                                  // 5418\n   *      - partial: if only some of the query terms were found,                                                       // 5419\n   *      - none: if none of the query terms were found.                                                               // 5420\n   * - attributesToSnippet: a string that contains the list of attributes to snippet alongside                         // 5421\n   * the number of words to return (syntax is `attributeName:nbWords`).                                                // 5422\n   *    Attributes are separated by a comma (Example: attributesToSnippet=name:10,content:10).                         // 5423\n   *    You can also use an array (Example: attributesToSnippet: ['name:10','content:10']).                            // 5424\n   *    By default no snippet is computed.                                                                             // 5425\n   * - minWordSizefor1Typo: the minimum number of characters in a query word to accept one typo in this word.          // 5426\n   * Defaults to 3.                                                                                                    // 5427\n   * - minWordSizefor2Typos: the minimum number of characters in a query word                                          // 5428\n   * to accept two typos in this word. Defaults to 7.                                                                  // 5429\n   * - getRankingInfo: if set to 1, the result hits will contain ranking                                               // 5430\n   * information in _rankingInfo attribute.                                                                            // 5431\n   * - aroundLatLng: search for entries around a given                                                                 // 5432\n   * latitude/longitude (specified as two floats separated by a comma).                                                // 5433\n   *   For example aroundLatLng=47.316669,5.016670).                                                                   // 5434\n   *   You can specify the maximum distance in meters with the aroundRadius parameter (in meters)                      // 5435\n   *   and the precision for ranking with aroundPrecision                                                              // 5436\n   *   (for example if you set aroundPrecision=100, two objects that are distant of                                    // 5437\n   *   less than 100m will be considered as identical for \"geo\" ranking parameter).                                    // 5438\n   *   At indexing, you should specify geoloc of an object with the _geoloc attribute                                  // 5439\n   *   (in the form {\"_geoloc\":{\"lat\":48.853409, \"lng\":2.348800}})                                                     // 5440\n   * - insideBoundingBox: search entries inside a given area defined by the two extreme points                         // 5441\n   * of a rectangle (defined by 4 floats: p1Lat,p1Lng,p2Lat,p2Lng).                                                    // 5442\n   *   For example insideBoundingBox=47.3165,4.9665,47.3424,5.0201).                                                   // 5443\n   *   At indexing, you should specify geoloc of an object with the _geoloc attribute                                  // 5444\n   *   (in the form {\"_geoloc\":{\"lat\":48.853409, \"lng\":2.348800}})                                                     // 5445\n   * - numericFilters: a string that contains the list of numeric filters you want to                                  // 5446\n   * apply separated by a comma.                                                                                       // 5447\n   *   The syntax of one filter is `attributeName` followed by `operand` followed by `value`.                          // 5448\n   *   Supported operands are `<`, `<=`, `=`, `>` and `>=`.                                                            // 5449\n   *   You can have multiple conditions on one attribute like for example numericFilters=price>100,price<1000.         // 5450\n   *   You can also use an array (for example numericFilters: [\"price>100\",\"price<1000\"]).                             // 5451\n   * - tagFilters: filter the query by a set of tags. You can AND tags by separating them by commas.                   // 5452\n   *   To OR tags, you must add parentheses. For example, tags=tag1,(tag2,tag3) means tag1 AND (tag2 OR tag3).         // 5453\n   *   You can also use an array, for example tagFilters: [\"tag1\",[\"tag2\",\"tag3\"]]                                     // 5454\n   *   means tag1 AND (tag2 OR tag3).                                                                                  // 5455\n   *   At indexing, tags should be added in the _tags** attribute                                                      // 5456\n   *   of objects (for example {\"_tags\":[\"tag1\",\"tag2\"]}).                                                             // 5457\n   * - facetFilters: filter the query by a list of facets.                                                             // 5458\n   *   Facets are separated by commas and each facet is encoded as `attributeName:value`.                              // 5459\n   *   For example: `facetFilters=category:Book,author:John%20Doe`.                                                    // 5460\n   *   You can also use an array (for example `[\"category:Book\",\"author:John%20Doe\"]`).                                // 5461\n   * - facets: List of object attributes that you want to use for faceting.                                            // 5462\n   *   Comma separated list: `\"category,author\"` or array `['category','author']`                                      // 5463\n   *   Only attributes that have been added in **attributesForFaceting** index setting                                 // 5464\n   *   can be used in this parameter.                                                                                  // 5465\n   *   You can also use `*` to perform faceting on all attributes specified in **attributesForFaceting**.              // 5466\n   * - queryType: select how the query words are interpreted, it can be one of the following value:                    // 5467\n   *    - prefixAll: all query words are interpreted as prefixes,                                                      // 5468\n   *    - prefixLast: only the last word is interpreted as a prefix (default behavior),                                // 5469\n   *    - prefixNone: no query word is interpreted as a prefix. This option is not recommended.                        // 5470\n   * - optionalWords: a string that contains the list of words that should                                             // 5471\n   * be considered as optional when found in the query.                                                                // 5472\n   *   Comma separated and array are accepted.                                                                         // 5473\n   * - distinct: If set to 1, enable the distinct feature (disabled by default)                                        // 5474\n   * if the attributeForDistinct index setting is set.                                                                 // 5475\n   *   This feature is similar to the SQL \"distinct\" keyword: when enabled                                             // 5476\n   *   in a query with the distinct=1 parameter,                                                                       // 5477\n   *   all hits containing a duplicate value for the attributeForDistinct attribute are removed from results.          // 5478\n   *   For example, if the chosen attribute is show_name and several hits have                                         // 5479\n   *   the same value for show_name, then only the best                                                                // 5480\n   *   one is kept and others are removed.                                                                             // 5481\n   * - restrictSearchableAttributes: List of attributes you want to use for                                            // 5482\n   * textual search (must be a subset of the attributesToIndex index setting)                                          // 5483\n   * either comma separated or as an array                                                                             // 5484\n   * @param callback the result callback called with two arguments:                                                    // 5485\n   *  error: null or Error('message'). If false, the content contains the error.                                       // 5486\n   *  content: the server answer that contains the list of results.                                                    // 5487\n   */                                                                                                                  // 5488\n  search: buildSearchMethod('query'),                                                                                  // 5489\n                                                                                                                       // 5490\n  /*                                                                                                                   // 5491\n   * -- BETA --                                                                                                        // 5492\n   * Search a record similar to the query inside the index using XMLHttpRequest request (Using a POST query to         // 5493\n   * minimize number of OPTIONS queries: Cross-Origin Resource Sharing).                                               // 5494\n   *                                                                                                                   // 5495\n   * @param query the similar query                                                                                    // 5496\n   * @param args (optional) if set, contains an object with query parameters.                                          // 5497\n   *   All search parameters are supported (see search function), restrictSearchableAttributes and facetFilters        // 5498\n   *   are the two most useful to restrict the similar results and get more relevant content                           // 5499\n   */                                                                                                                  // 5500\n  similarSearch: buildSearchMethod('similarQuery'),                                                                    // 5501\n                                                                                                                       // 5502\n  /*                                                                                                                   // 5503\n   * Browse index content. The response content will have a `cursor` property that you can use                         // 5504\n   * to browse subsequent pages for this query. Use `index.browseFrom(cursor)` when you want.                          // 5505\n   *                                                                                                                   // 5506\n   * @param {string} query - The full text query                                                                       // 5507\n   * @param {Object} [queryParameters] - Any search query parameter                                                    // 5508\n   * @param {Function} [callback] - The result callback called with two arguments                                      // 5509\n   *   error: null or Error('message')                                                                                 // 5510\n   *   content: the server answer with the browse result                                                               // 5511\n   * @return {Promise|undefined} Returns a promise if no callback given                                                // 5512\n   * @example                                                                                                          // 5513\n   * index.browse('cool songs', {                                                                                      // 5514\n   *   tagFilters: 'public,comments',                                                                                  // 5515\n   *   hitsPerPage: 500                                                                                                // 5516\n   * }, callback);                                                                                                     // 5517\n   * @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}                           // 5518\n   */                                                                                                                  // 5519\n  // pre 3.5.0 usage, backward compatible                                                                              // 5520\n  // browse: function(page, hitsPerPage, callback) {                                                                   // 5521\n  browse: function(query, queryParameters, callback) {                                                                 // 5522\n    var merge = require(55);                                                                                           // 5523\n                                                                                                                       // 5524\n    var indexObj = this;                                                                                               // 5525\n                                                                                                                       // 5526\n    var page;                                                                                                          // 5527\n    var hitsPerPage;                                                                                                   // 5528\n                                                                                                                       // 5529\n    // we check variadic calls that are not the one defined                                                            // 5530\n    // .browse()/.browse(fn)                                                                                           // 5531\n    // => page = 0                                                                                                     // 5532\n    if (arguments.length === 0 || arguments.length === 1 && typeof arguments[0] === 'function') {                      // 5533\n      page = 0;                                                                                                        // 5534\n      callback = arguments[0];                                                                                         // 5535\n      query = undefined;                                                                                               // 5536\n    } else if (typeof arguments[0] === 'number') {                                                                     // 5537\n      // .browse(2)/.browse(2, 10)/.browse(2, fn)/.browse(2, 10, fn)                                                   // 5538\n      page = arguments[0];                                                                                             // 5539\n      if (typeof arguments[1] === 'number') {                                                                          // 5540\n        hitsPerPage = arguments[1];                                                                                    // 5541\n      } else if (typeof arguments[1] === 'function') {                                                                 // 5542\n        callback = arguments[1];                                                                                       // 5543\n        hitsPerPage = undefined;                                                                                       // 5544\n      }                                                                                                                // 5545\n      query = undefined;                                                                                               // 5546\n      queryParameters = undefined;                                                                                     // 5547\n    } else if (typeof arguments[0] === 'object') {                                                                     // 5548\n      // .browse(queryParameters)/.browse(queryParameters, cb)                                                         // 5549\n      if (typeof arguments[1] === 'function') {                                                                        // 5550\n        callback = arguments[1];                                                                                       // 5551\n      }                                                                                                                // 5552\n      queryParameters = arguments[0];                                                                                  // 5553\n      query = undefined;                                                                                               // 5554\n    } else if (typeof arguments[0] === 'string' && typeof arguments[1] === 'function') {                               // 5555\n      // .browse(query, cb)                                                                                            // 5556\n      callback = arguments[1];                                                                                         // 5557\n      queryParameters = undefined;                                                                                     // 5558\n    }                                                                                                                  // 5559\n                                                                                                                       // 5560\n    // otherwise it's a .browse(query)/.browse(query, queryParameters)/.browse(query, queryParameters, cb)             // 5561\n                                                                                                                       // 5562\n    // get search query parameters combining various possible calls                                                    // 5563\n    // to .browse();                                                                                                   // 5564\n    queryParameters = merge({}, queryParameters || {}, {                                                               // 5565\n      page: page,                                                                                                      // 5566\n      hitsPerPage: hitsPerPage,                                                                                        // 5567\n      query: query                                                                                                     // 5568\n    });                                                                                                                // 5569\n                                                                                                                       // 5570\n    var params = this.as._getSearchParams(queryParameters, '');                                                        // 5571\n                                                                                                                       // 5572\n    return this.as._jsonRequest({                                                                                      // 5573\n      method: 'GET',                                                                                                   // 5574\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/browse?' + params,                               // 5575\n      hostType: 'read',                                                                                                // 5576\n      callback: callback                                                                                               // 5577\n    });                                                                                                                // 5578\n  },                                                                                                                   // 5579\n                                                                                                                       // 5580\n  /*                                                                                                                   // 5581\n   * Continue browsing from a previous position (cursor), obtained via a call to `.browse()`.                          // 5582\n   *                                                                                                                   // 5583\n   * @param {string} query - The full text query                                                                       // 5584\n   * @param {Object} [queryParameters] - Any search query parameter                                                    // 5585\n   * @param {Function} [callback] - The result callback called with two arguments                                      // 5586\n   *   error: null or Error('message')                                                                                 // 5587\n   *   content: the server answer with the browse result                                                               // 5588\n   * @return {Promise|undefined} Returns a promise if no callback given                                                // 5589\n   * @example                                                                                                          // 5590\n   * index.browseFrom('14lkfsakl32', callback);                                                                        // 5591\n   * @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}                           // 5592\n   */                                                                                                                  // 5593\n  browseFrom: function(cursor, callback) {                                                                             // 5594\n    return this.as._jsonRequest({                                                                                      // 5595\n      method: 'GET',                                                                                                   // 5596\n      url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/browse?cursor=' + encodeURIComponent(cursor),        // 5597\n      hostType: 'read',                                                                                                // 5598\n      callback: callback                                                                                               // 5599\n    });                                                                                                                // 5600\n  },                                                                                                                   // 5601\n                                                                                                                       // 5602\n  /*                                                                                                                   // 5603\n   * Browse all content from an index using events. Basically this will do                                             // 5604\n   * .browse() -> .browseFrom -> .browseFrom -> .. until all the results are returned                                  // 5605\n   *                                                                                                                   // 5606\n   * @param {string} query - The full text query                                                                       // 5607\n   * @param {Object} [queryParameters] - Any search query parameter                                                    // 5608\n   * @return {EventEmitter}                                                                                            // 5609\n   * @example                                                                                                          // 5610\n   * var browser = index.browseAll('cool songs', {                                                                     // 5611\n   *   tagFilters: 'public,comments',                                                                                  // 5612\n   *   hitsPerPage: 500                                                                                                // 5613\n   * });                                                                                                               // 5614\n   *                                                                                                                   // 5615\n   * browser.on('result', function resultCallback(content) {                                                           // 5616\n   *   console.log(content.hits);                                                                                      // 5617\n   * });                                                                                                               // 5618\n   *                                                                                                                   // 5619\n   * // if any error occurs, you get it                                                                                // 5620\n   * browser.on('error', function(err) {                                                                               // 5621\n   *   throw err;                                                                                                      // 5622\n   * });                                                                                                               // 5623\n   *                                                                                                                   // 5624\n   * // when you have browsed the whole index, you get this event                                                      // 5625\n   * browser.on('end', function() {                                                                                    // 5626\n   *   console.log('finished');                                                                                        // 5627\n   * });                                                                                                               // 5628\n   *                                                                                                                   // 5629\n   * // at any point if you want to stop the browsing process, you can stop it manually                                // 5630\n   * // otherwise it will go on and on                                                                                 // 5631\n   * browser.stop();                                                                                                   // 5632\n   *                                                                                                                   // 5633\n   * @see {@link https://www.algolia.com/doc/rest_api#Browse|Algolia REST API Documentation}                           // 5634\n   */                                                                                                                  // 5635\n  browseAll: function(query, queryParameters) {                                                                        // 5636\n    if (typeof query === 'object') {                                                                                   // 5637\n      queryParameters = query;                                                                                         // 5638\n      query = undefined;                                                                                               // 5639\n    }                                                                                                                  // 5640\n                                                                                                                       // 5641\n    var merge = require(55);                                                                                           // 5642\n                                                                                                                       // 5643\n    var IndexBrowser = require(58);                                                                                    // 5644\n                                                                                                                       // 5645\n    var browser = new IndexBrowser();                                                                                  // 5646\n    var client = this.as;                                                                                              // 5647\n    var index = this;                                                                                                  // 5648\n    var params = client._getSearchParams(                                                                              // 5649\n      merge({}, queryParameters || {}, {                                                                               // 5650\n        query: query                                                                                                   // 5651\n      }), ''                                                                                                           // 5652\n    );                                                                                                                 // 5653\n                                                                                                                       // 5654\n    // start browsing                                                                                                  // 5655\n    browseLoop();                                                                                                      // 5656\n                                                                                                                       // 5657\n    function browseLoop(cursor) {                                                                                      // 5658\n      if (browser._stopped) {                                                                                          // 5659\n        return;                                                                                                        // 5660\n      }                                                                                                                // 5661\n                                                                                                                       // 5662\n      var queryString;                                                                                                 // 5663\n                                                                                                                       // 5664\n      if (cursor !== undefined) {                                                                                      // 5665\n        queryString = 'cursor=' + encodeURIComponent(cursor);                                                          // 5666\n      } else {                                                                                                         // 5667\n        queryString = params;                                                                                          // 5668\n      }                                                                                                                // 5669\n                                                                                                                       // 5670\n      client._jsonRequest({                                                                                            // 5671\n        method: 'GET',                                                                                                 // 5672\n        url: '/1/indexes/' + encodeURIComponent(index.indexName) + '/browse?' + queryString,                           // 5673\n        hostType: 'read',                                                                                              // 5674\n        callback: browseCallback                                                                                       // 5675\n      });                                                                                                              // 5676\n    }                                                                                                                  // 5677\n                                                                                                                       // 5678\n    function browseCallback(err, content) {                                                                            // 5679\n      if (browser._stopped) {                                                                                          // 5680\n        return;                                                                                                        // 5681\n      }                                                                                                                // 5682\n                                                                                                                       // 5683\n      if (err) {                                                                                                       // 5684\n        browser._error(err);                                                                                           // 5685\n        return;                                                                                                        // 5686\n      }                                                                                                                // 5687\n                                                                                                                       // 5688\n      browser._result(content);                                                                                        // 5689\n                                                                                                                       // 5690\n      // no cursor means we are finished browsing                                                                      // 5691\n      if (content.cursor === undefined) {                                                                              // 5692\n        browser._end();                                                                                                // 5693\n        return;                                                                                                        // 5694\n      }                                                                                                                // 5695\n                                                                                                                       // 5696\n      browseLoop(content.cursor);                                                                                      // 5697\n    }                                                                                                                  // 5698\n                                                                                                                       // 5699\n    return browser;                                                                                                    // 5700\n  },                                                                                                                   // 5701\n                                                                                                                       // 5702\n  /*                                                                                                                   // 5703\n   * Get a Typeahead.js adapter                                                                                        // 5704\n   * @param searchParams contains an object with query parameters (see search for details)                             // 5705\n   */                                                                                                                  // 5706\n  ttAdapter: function(params) {                                                                                        // 5707\n    var self = this;                                                                                                   // 5708\n    return function ttAdapter(query, syncCb, asyncCb) {                                                                // 5709\n      var cb;                                                                                                          // 5710\n                                                                                                                       // 5711\n      if (typeof asyncCb === 'function') {                                                                             // 5712\n        // typeahead 0.11                                                                                              // 5713\n        cb = asyncCb;                                                                                                  // 5714\n      } else {                                                                                                         // 5715\n        // pre typeahead 0.11                                                                                          // 5716\n        cb = syncCb;                                                                                                   // 5717\n      }                                                                                                                // 5718\n                                                                                                                       // 5719\n      self.search(query, params, function searchDone(err, content) {                                                   // 5720\n        if (err) {                                                                                                     // 5721\n          cb(err);                                                                                                     // 5722\n          return;                                                                                                      // 5723\n        }                                                                                                              // 5724\n                                                                                                                       // 5725\n        cb(content.hits);                                                                                              // 5726\n      });                                                                                                              // 5727\n    };                                                                                                                 // 5728\n  },                                                                                                                   // 5729\n                                                                                                                       // 5730\n  /*                                                                                                                   // 5731\n   * Wait the publication of a task on the server.                                                                     // 5732\n   * All server task are asynchronous and you can check with this method that the task is published.                   // 5733\n   *                                                                                                                   // 5734\n   * @param taskID the id of the task returned by server                                                               // 5735\n   * @param callback the result callback with with two arguments:                                                      // 5736\n   *  error: null or Error('message')                                                                                  // 5737\n   *  content: the server answer that contains the list of results                                                     // 5738\n   */                                                                                                                  // 5739\n  waitTask: function(taskID, callback) {                                                                               // 5740\n    // wait minimum 100ms before retrying                                                                              // 5741\n    var baseDelay = 100;                                                                                               // 5742\n    // wait maximum 5s before retrying                                                                                 // 5743\n    var maxDelay = 5000;                                                                                               // 5744\n    var loop = 0;                                                                                                      // 5745\n                                                                                                                       // 5746\n    // waitTask() must be handled differently from other methods,                                                      // 5747\n    // it's a recursive method using a timeout                                                                         // 5748\n    var indexObj = this;                                                                                               // 5749\n    var client = indexObj.as;                                                                                          // 5750\n                                                                                                                       // 5751\n    var promise = retryLoop();                                                                                         // 5752\n                                                                                                                       // 5753\n    function retryLoop() {                                                                                             // 5754\n      return client._jsonRequest({                                                                                     // 5755\n        method: 'GET',                                                                                                 // 5756\n        hostType: 'read',                                                                                              // 5757\n        url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/task/' + taskID                                // 5758\n      }).then(function success(content) {                                                                              // 5759\n        loop++;                                                                                                        // 5760\n        var delay = baseDelay * loop * loop;                                                                           // 5761\n        if (delay > maxDelay) {                                                                                        // 5762\n          delay = maxDelay;                                                                                            // 5763\n        }                                                                                                              // 5764\n                                                                                                                       // 5765\n        if (content.status !== 'published') {                                                                          // 5766\n          return client._promise.delay(delay).then(retryLoop);                                                         // 5767\n        }                                                                                                              // 5768\n                                                                                                                       // 5769\n        return content;                                                                                                // 5770\n      });                                                                                                              // 5771\n    }                                                                                                                  // 5772\n                                                                                                                       // 5773\n    if (!callback) {                                                                                                   // 5774\n      return promise;                                                                                                  // 5775\n    }                                                                                                                  // 5776\n                                                                                                                       // 5777\n    promise.then(successCb, failureCb);                                                                                // 5778\n                                                                                                                       // 5779\n    function successCb(content) {                                                                                      // 5780\n      exitPromise(function exit() {                                                                                    // 5781\n        callback(null, content);                                                                                       // 5782\n      }, client._setTimeout || setTimeout);                                                                            // 5783\n    }                                                                                                                  // 5784\n                                                                                                                       // 5785\n    function failureCb(err) {                                                                                          // 5786\n      exitPromise(function exit() {                                                                                    // 5787\n        callback(err);                                                                                                 // 5788\n      }, client._setTimeout || setTimeout);                                                                            // 5789\n    }                                                                                                                  // 5790\n  },                                                                                                                   // 5791\n                                                                                                                       // 5792\n  /*                                                                                                                   // 5793\n   * This function deletes the index content. Settings and index specific API keys are kept untouched.                 // 5794\n   *                                                                                                                   // 5795\n   * @param callback (optional) the result callback called with two arguments                                          // 5796\n   *  error: null or Error('message')                                                                                  // 5797\n   *  content: the settings object or the error message if a failure occured                                           // 5798\n   */                                                                                                                  // 5799\n  clearIndex: function(callback) {                                                                                     // 5800\n    var indexObj = this;                                                                                               // 5801\n    return this.as._jsonRequest({                                                                                      // 5802\n      method: 'POST',                                                                                                  // 5803\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/clear',                                          // 5804\n      hostType: 'write',                                                                                               // 5805\n      callback: callback                                                                                               // 5806\n    });                                                                                                                // 5807\n  },                                                                                                                   // 5808\n  /*                                                                                                                   // 5809\n   * Get settings of this index                                                                                        // 5810\n   *                                                                                                                   // 5811\n   * @param callback (optional) the result callback called with two arguments                                          // 5812\n   *  error: null or Error('message')                                                                                  // 5813\n   *  content: the settings object or the error message if a failure occured                                           // 5814\n   */                                                                                                                  // 5815\n  getSettings: function(callback) {                                                                                    // 5816\n    var indexObj = this;                                                                                               // 5817\n    return this.as._jsonRequest({                                                                                      // 5818\n      method: 'GET',                                                                                                   // 5819\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/settings',                                       // 5820\n      hostType: 'read',                                                                                                // 5821\n      callback: callback                                                                                               // 5822\n    });                                                                                                                // 5823\n  },                                                                                                                   // 5824\n                                                                                                                       // 5825\n  /*                                                                                                                   // 5826\n   * Set settings for this index                                                                                       // 5827\n   *                                                                                                                   // 5828\n   * @param settigns the settings object that can contains :                                                           // 5829\n   * - minWordSizefor1Typo: (integer) the minimum number of characters to accept one typo (default = 3).               // 5830\n   * - minWordSizefor2Typos: (integer) the minimum number of characters to accept two typos (default = 7).             // 5831\n   * - hitsPerPage: (integer) the number of hits per page (default = 10).                                              // 5832\n   * - attributesToRetrieve: (array of strings) default list of attributes to retrieve in objects.                     // 5833\n   *   If set to null, all attributes are retrieved.                                                                   // 5834\n   * - attributesToHighlight: (array of strings) default list of attributes to highlight.                              // 5835\n   *   If set to null, all indexed attributes are highlighted.                                                         // 5836\n   * - attributesToSnippet**: (array of strings) default list of attributes to snippet alongside the number            // 5837\n   * of words to return (syntax is attributeName:nbWords).                                                             // 5838\n   *   By default no snippet is computed. If set to null, no snippet is computed.                                      // 5839\n   * - attributesToIndex: (array of strings) the list of fields you want to index.                                     // 5840\n   *   If set to null, all textual and numerical attributes of your objects are indexed,                               // 5841\n   *   but you should update it to get optimal results.                                                                // 5842\n   *   This parameter has two important uses:                                                                          // 5843\n   *     - Limit the attributes to index: For example if you store a binary image in base64,                           // 5844\n   *     you want to store it and be able to                                                                           // 5845\n   *       retrieve it but you don't want to search in the base64 string.                                              // 5846\n   *     - Control part of the ranking*: (see the ranking parameter for full explanation)                              // 5847\n   *     Matches in attributes at the beginning of                                                                     // 5848\n   *       the list will be considered more important than matches in attributes further down the list.                // 5849\n   *       In one attribute, matching text at the beginning of the attribute will be                                   // 5850\n   *       considered more important than text after, you can disable                                                  // 5851\n   *       this behavior if you add your attribute inside `unordered(AttributeName)`,                                  // 5852\n   *       for example attributesToIndex: [\"title\", \"unordered(text)\"].                                                // 5853\n   * - attributesForFaceting: (array of strings) The list of fields you want to use for faceting.                      // 5854\n   *   All strings in the attribute selected for faceting are extracted and added as a facet.                          // 5855\n   *   If set to null, no attribute is used for faceting.                                                              // 5856\n   * - attributeForDistinct: (string) The attribute name used for the Distinct feature.                                // 5857\n   * This feature is similar to the SQL \"distinct\" keyword: when enabled                                               // 5858\n   *   in query with the distinct=1 parameter, all hits containing a duplicate                                         // 5859\n   *   value for this attribute are removed from results.                                                              // 5860\n   *   For example, if the chosen attribute is show_name and several hits have                                         // 5861\n   *   the same value for show_name, then only the best one is kept and others are removed.                            // 5862\n   * - ranking: (array of strings) controls the way results are sorted.                                                // 5863\n   *   We have six available criteria:                                                                                 // 5864\n   *    - typo: sort according to number of typos,                                                                     // 5865\n   *    - geo: sort according to decreassing distance when performing a geo-location based search,                     // 5866\n   *    - proximity: sort according to the proximity of query words in hits,                                           // 5867\n   *    - attribute: sort according to the order of attributes defined by attributesToIndex,                           // 5868\n   *    - exact:                                                                                                       // 5869\n   *        - if the user query contains one word: sort objects having an attribute                                    // 5870\n   *        that is exactly the query word before others.                                                              // 5871\n   *          For example if you search for the \"V\" TV show, you want to find it                                       // 5872\n   *          with the \"V\" query and avoid to have all popular TV                                                      // 5873\n   *          show starting by the v letter before it.                                                                 // 5874\n   *        - if the user query contains multiple words: sort according to the                                         // 5875\n   *        number of words that matched exactly (and not as a prefix).                                                // 5876\n   *    - custom: sort according to a user defined formula set in **customRanking** attribute.                         // 5877\n   *   The standard order is [\"typo\", \"geo\", \"proximity\", \"attribute\", \"exact\", \"custom\"]                              // 5878\n   * - customRanking: (array of strings) lets you specify part of the ranking.                                         // 5879\n   *   The syntax of this condition is an array of strings containing attributes                                       // 5880\n   *   prefixed by asc (ascending order) or desc (descending order) operator.                                          // 5881\n   *   For example `\"customRanking\" => [\"desc(population)\", \"asc(name)\"]`                                              // 5882\n   * - queryType: Select how the query words are interpreted, it can be one of the following value:                    // 5883\n   *   - prefixAll: all query words are interpreted as prefixes,                                                       // 5884\n   *   - prefixLast: only the last word is interpreted as a prefix (default behavior),                                 // 5885\n   *   - prefixNone: no query word is interpreted as a prefix. This option is not recommended.                         // 5886\n   * - highlightPreTag: (string) Specify the string that is inserted before                                            // 5887\n   * the highlighted parts in the query result (default to \"<em>\").                                                    // 5888\n   * - highlightPostTag: (string) Specify the string that is inserted after                                            // 5889\n   * the highlighted parts in the query result (default to \"</em>\").                                                   // 5890\n   * - optionalWords: (array of strings) Specify a list of words that should                                           // 5891\n   * be considered as optional when found in the query.                                                                // 5892\n   * @param callback (optional) the result callback called with two arguments                                          // 5893\n   *  error: null or Error('message')                                                                                  // 5894\n   *  content: the server answer or the error message if a failure occured                                             // 5895\n   */                                                                                                                  // 5896\n  setSettings: function(settings, callback) {                                                                          // 5897\n    var indexObj = this;                                                                                               // 5898\n    return this.as._jsonRequest({                                                                                      // 5899\n      method: 'PUT',                                                                                                   // 5900\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/settings',                                       // 5901\n      hostType: 'write',                                                                                               // 5902\n      body: settings,                                                                                                  // 5903\n      callback: callback                                                                                               // 5904\n    });                                                                                                                // 5905\n  },                                                                                                                   // 5906\n  /*                                                                                                                   // 5907\n   * List all existing user keys associated to this index                                                              // 5908\n   *                                                                                                                   // 5909\n   * @param callback the result callback called with two arguments                                                     // 5910\n   *  error: null or Error('message')                                                                                  // 5911\n   *  content: the server answer with user keys list                                                                   // 5912\n   */                                                                                                                  // 5913\n  listUserKeys: function(callback) {                                                                                   // 5914\n    var indexObj = this;                                                                                               // 5915\n    return this.as._jsonRequest({                                                                                      // 5916\n      method: 'GET',                                                                                                   // 5917\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/keys',                                           // 5918\n      hostType: 'read',                                                                                                // 5919\n      callback: callback                                                                                               // 5920\n    });                                                                                                                // 5921\n  },                                                                                                                   // 5922\n  /*                                                                                                                   // 5923\n   * Get ACL of a user key associated to this index                                                                    // 5924\n   *                                                                                                                   // 5925\n   * @param key                                                                                                        // 5926\n   * @param callback the result callback called with two arguments                                                     // 5927\n   *  error: null or Error('message')                                                                                  // 5928\n   *  content: the server answer with user keys list                                                                   // 5929\n   */                                                                                                                  // 5930\n  getUserKeyACL: function(key, callback) {                                                                             // 5931\n    var indexObj = this;                                                                                               // 5932\n    return this.as._jsonRequest({                                                                                      // 5933\n      method: 'GET',                                                                                                   // 5934\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/keys/' + key,                                    // 5935\n      hostType: 'read',                                                                                                // 5936\n      callback: callback                                                                                               // 5937\n    });                                                                                                                // 5938\n  },                                                                                                                   // 5939\n  /*                                                                                                                   // 5940\n   * Delete an existing user key associated to this index                                                              // 5941\n   *                                                                                                                   // 5942\n   * @param key                                                                                                        // 5943\n   * @param callback the result callback called with two arguments                                                     // 5944\n   *  error: null or Error('message')                                                                                  // 5945\n   *  content: the server answer with user keys list                                                                   // 5946\n   */                                                                                                                  // 5947\n  deleteUserKey: function(key, callback) {                                                                             // 5948\n    var indexObj = this;                                                                                               // 5949\n    return this.as._jsonRequest({                                                                                      // 5950\n      method: 'DELETE',                                                                                                // 5951\n      url: '/1/indexes/' + encodeURIComponent(indexObj.indexName) + '/keys/' + key,                                    // 5952\n      hostType: 'write',                                                                                               // 5953\n      callback: callback                                                                                               // 5954\n    });                                                                                                                // 5955\n  },                                                                                                                   // 5956\n  /*                                                                                                                   // 5957\n   * Add a new API key to this index                                                                                   // 5958\n   *                                                                                                                   // 5959\n   * @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that                        // 5960\n   *   can contains the following values:                                                                              // 5961\n   *     - search: allow to search (https and http)                                                                    // 5962\n   *     - addObject: allows to add/update an object in the index (https only)                                         // 5963\n   *     - deleteObject : allows to delete an existing object (https only)                                             // 5964\n   *     - deleteIndex : allows to delete index content (https only)                                                   // 5965\n   *     - settings : allows to get index settings (https only)                                                        // 5966\n   *     - editSettings : allows to change index settings (https only)                                                 // 5967\n   * @param {Object} [params] - Optionnal parameters to set for the key                                                // 5968\n   * @param {number} params.validity - Number of seconds after which the key will                                      // 5969\n   * be automatically removed (0 means no time limit for this key)                                                     // 5970\n   * @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour           // 5971\n   * @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call                     // 5972\n   * @param {string} params.description - A description for your key                                                   // 5973\n   * @param {string[]} params.referers - A list of authorized referers                                                 // 5974\n   * @param {Object} params.queryParameters - Force the key to use specific query parameters                           // 5975\n   * @param {Function} callback - The result callback called with two arguments                                        // 5976\n   *   error: null or Error('message')                                                                                 // 5977\n   *   content: the server answer with user keys list                                                                  // 5978\n   * @return {Promise|undefined} Returns a promise if no callback given                                                // 5979\n   * @example                                                                                                          // 5980\n   * index.addUserKey(['search'], {                                                                                    // 5981\n   *   validity: 300,                                                                                                  // 5982\n   *   maxQueriesPerIPPerHour: 2000,                                                                                   // 5983\n   *   maxHitsPerQuery: 3,                                                                                             // 5984\n   *   description: 'Eat three fruits',                                                                                // 5985\n   *   referers: ['*.algolia.com'],                                                                                    // 5986\n   *   queryParameters: {                                                                                              // 5987\n   *     tagFilters: ['public'],                                                                                       // 5988\n   *   }                                                                                                               // 5989\n   * })                                                                                                                // 5990\n   * @see {@link https://www.algolia.com/doc/rest_api#AddIndexKey|Algolia REST API Documentation}                      // 5991\n   */                                                                                                                  // 5992\n  addUserKey: function(acls, params, callback) {                                                                       // 5993\n    var isArray = require(46);                                                                                         // 5994\n    var usage = 'Usage: index.addUserKey(arrayOfAcls[, params, callback])';                                            // 5995\n                                                                                                                       // 5996\n    if (!isArray(acls)) {                                                                                              // 5997\n      throw new Error(usage);                                                                                          // 5998\n    }                                                                                                                  // 5999\n                                                                                                                       // 6000\n    if (arguments.length === 1 || typeof params === 'function') {                                                      // 6001\n      callback = params;                                                                                               // 6002\n      params = null;                                                                                                   // 6003\n    }                                                                                                                  // 6004\n                                                                                                                       // 6005\n    var postObj = {                                                                                                    // 6006\n      acl: acls                                                                                                        // 6007\n    };                                                                                                                 // 6008\n                                                                                                                       // 6009\n    if (params) {                                                                                                      // 6010\n      postObj.validity = params.validity;                                                                              // 6011\n      postObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;                                                  // 6012\n      postObj.maxHitsPerQuery = params.maxHitsPerQuery;                                                                // 6013\n      postObj.description = params.description;                                                                        // 6014\n                                                                                                                       // 6015\n      if (params.queryParameters) {                                                                                    // 6016\n        postObj.queryParameters = this.as._getSearchParams(params.queryParameters, '');                                // 6017\n      }                                                                                                                // 6018\n                                                                                                                       // 6019\n      postObj.referers = params.referers;                                                                              // 6020\n    }                                                                                                                  // 6021\n                                                                                                                       // 6022\n    return this.as._jsonRequest({                                                                                      // 6023\n      method: 'POST',                                                                                                  // 6024\n      url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/keys',                                               // 6025\n      body: postObj,                                                                                                   // 6026\n      hostType: 'write',                                                                                               // 6027\n      callback: callback                                                                                               // 6028\n    });                                                                                                                // 6029\n  },                                                                                                                   // 6030\n                                                                                                                       // 6031\n  /**                                                                                                                  // 6032\n   * Add an existing user key associated to this index                                                                 // 6033\n   * @deprecated use index.addUserKey()                                                                                // 6034\n   */                                                                                                                  // 6035\n  addUserKeyWithValidity: deprecate(function deprecatedAddUserKeyWithValidity(acls, params, callback) {                // 6036\n    return this.addUserKey(acls, params, callback);                                                                    // 6037\n  }, deprecatedMessage('index.addUserKeyWithValidity()', 'index.addUserKey()')),                                       // 6038\n                                                                                                                       // 6039\n  /**                                                                                                                  // 6040\n   * Update an existing API key of this index                                                                          // 6041\n   * @param {string} key - The key to update                                                                           // 6042\n   * @param {string[]} acls - The list of ACL for this key. Defined by an array of strings that                        // 6043\n   *   can contains the following values:                                                                              // 6044\n   *     - search: allow to search (https and http)                                                                    // 6045\n   *     - addObject: allows to add/update an object in the index (https only)                                         // 6046\n   *     - deleteObject : allows to delete an existing object (https only)                                             // 6047\n   *     - deleteIndex : allows to delete index content (https only)                                                   // 6048\n   *     - settings : allows to get index settings (https only)                                                        // 6049\n   *     - editSettings : allows to change index settings (https only)                                                 // 6050\n   * @param {Object} [params] - Optionnal parameters to set for the key                                                // 6051\n   * @param {number} params.validity - Number of seconds after which the key will                                      // 6052\n   * be automatically removed (0 means no time limit for this key)                                                     // 6053\n   * @param {number} params.maxQueriesPerIPPerHour - Number of API calls allowed from an IP address per hour           // 6054\n   * @param {number} params.maxHitsPerQuery - Number of hits this API key can retrieve in one call                     // 6055\n   * @param {string} params.description - A description for your key                                                   // 6056\n   * @param {string[]} params.referers - A list of authorized referers                                                 // 6057\n   * @param {Object} params.queryParameters - Force the key to use specific query parameters                           // 6058\n   * @param {Function} callback - The result callback called with two arguments                                        // 6059\n   *   error: null or Error('message')                                                                                 // 6060\n   *   content: the server answer with user keys list                                                                  // 6061\n   * @return {Promise|undefined} Returns a promise if no callback given                                                // 6062\n   * @example                                                                                                          // 6063\n   * index.updateUserKey('APIKEY', ['search'], {                                                                       // 6064\n   *   validity: 300,                                                                                                  // 6065\n   *   maxQueriesPerIPPerHour: 2000,                                                                                   // 6066\n   *   maxHitsPerQuery: 3,                                                                                             // 6067\n   *   description: 'Eat three fruits',                                                                                // 6068\n   *   referers: ['*.algolia.com'],                                                                                    // 6069\n   *   queryParameters: {                                                                                              // 6070\n   *     tagFilters: ['public'],                                                                                       // 6071\n   *   }                                                                                                               // 6072\n   * })                                                                                                                // 6073\n   * @see {@link https://www.algolia.com/doc/rest_api#UpdateIndexKey|Algolia REST API Documentation}                   // 6074\n   */                                                                                                                  // 6075\n  updateUserKey: function(key, acls, params, callback) {                                                               // 6076\n    var isArray = require(46);                                                                                         // 6077\n    var usage = 'Usage: index.updateUserKey(key, arrayOfAcls[, params, callback])';                                    // 6078\n                                                                                                                       // 6079\n    if (!isArray(acls)) {                                                                                              // 6080\n      throw new Error(usage);                                                                                          // 6081\n    }                                                                                                                  // 6082\n                                                                                                                       // 6083\n    if (arguments.length === 2 || typeof params === 'function') {                                                      // 6084\n      callback = params;                                                                                               // 6085\n      params = null;                                                                                                   // 6086\n    }                                                                                                                  // 6087\n                                                                                                                       // 6088\n    var putObj = {                                                                                                     // 6089\n      acl: acls                                                                                                        // 6090\n    };                                                                                                                 // 6091\n                                                                                                                       // 6092\n    if (params) {                                                                                                      // 6093\n      putObj.validity = params.validity;                                                                               // 6094\n      putObj.maxQueriesPerIPPerHour = params.maxQueriesPerIPPerHour;                                                   // 6095\n      putObj.maxHitsPerQuery = params.maxHitsPerQuery;                                                                 // 6096\n      putObj.description = params.description;                                                                         // 6097\n                                                                                                                       // 6098\n      if (params.queryParameters) {                                                                                    // 6099\n        putObj.queryParameters = this.as._getSearchParams(params.queryParameters, '');                                 // 6100\n      }                                                                                                                // 6101\n                                                                                                                       // 6102\n      putObj.referers = params.referers;                                                                               // 6103\n    }                                                                                                                  // 6104\n                                                                                                                       // 6105\n    return this.as._jsonRequest({                                                                                      // 6106\n      method: 'PUT',                                                                                                   // 6107\n      url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/keys/' + key,                                        // 6108\n      body: putObj,                                                                                                    // 6109\n      hostType: 'write',                                                                                               // 6110\n      callback: callback                                                                                               // 6111\n    });                                                                                                                // 6112\n  },                                                                                                                   // 6113\n                                                                                                                       // 6114\n  _search: function(params, callback) {                                                                                // 6115\n    return this.as._jsonRequest({                                                                                      // 6116\n      cache: this.cache,                                                                                               // 6117\n      method: 'POST',                                                                                                  // 6118\n      url: '/1/indexes/' + encodeURIComponent(this.indexName) + '/query',                                              // 6119\n      body: {params: params},                                                                                          // 6120\n      hostType: 'read',                                                                                                // 6121\n      fallback: {                                                                                                      // 6122\n        method: 'GET',                                                                                                 // 6123\n        url: '/1/indexes/' + encodeURIComponent(this.indexName),                                                       // 6124\n        body: {params: params}                                                                                         // 6125\n      },                                                                                                               // 6126\n      callback: callback                                                                                               // 6127\n    });                                                                                                                // 6128\n  },                                                                                                                   // 6129\n                                                                                                                       // 6130\n  as: null,                                                                                                            // 6131\n  indexName: null,                                                                                                     // 6132\n  typeAheadArgs: null,                                                                                                 // 6133\n  typeAheadValueOption: null                                                                                           // 6134\n};                                                                                                                     // 6135\n                                                                                                                       // 6136\n// extracted from https://github.com/component/map/blob/master/index.js                                                // 6137\n// without the crazy toFunction thing                                                                                  // 6138\nfunction map(arr, fn) {                                                                                                // 6139\n  var ret = [];                                                                                                        // 6140\n  for (var i = 0; i < arr.length; ++i) {                                                                               // 6141\n    ret.push(fn(arr[i], i));                                                                                           // 6142\n  }                                                                                                                    // 6143\n  return ret;                                                                                                          // 6144\n}                                                                                                                      // 6145\n                                                                                                                       // 6146\nfunction prepareHost(protocol) {                                                                                       // 6147\n  return function prepare(host) {                                                                                      // 6148\n    return protocol + '//' + host.toLowerCase();                                                                       // 6149\n  };                                                                                                                   // 6150\n}                                                                                                                      // 6151\n                                                                                                                       // 6152\nfunction notImplemented() {                                                                                            // 6153\n  var message = 'Not implemented in this environment.\\n' +                                                             // 6154\n    'If you feel this is a mistake, write to support@algolia.com';                                                     // 6155\n                                                                                                                       // 6156\n  throw new errors.AlgoliaSearchError(message);                                                                        // 6157\n}                                                                                                                      // 6158\n                                                                                                                       // 6159\nfunction deprecatedMessage(previousUsage, newUsage) {                                                                  // 6160\n  var githubAnchorLink = previousUsage.toLowerCase()                                                                   // 6161\n    .replace('.', '')                                                                                                  // 6162\n    .replace('()', '');                                                                                                // 6163\n                                                                                                                       // 6164\n  return 'algoliasearch: `' + previousUsage + '` was replaced by `' + newUsage +                                       // 6165\n    '`. Please see https://github.com/algolia/algoliasearch-client-js/wiki/Deprecated#' + githubAnchorLink;            // 6166\n}                                                                                                                      // 6167\n                                                                                                                       // 6168\n// Parse cloud does not supports setTimeout                                                                            // 6169\n// We do not store a setTimeout reference in the client everytime                                                      // 6170\n// We only fallback to a fake setTimeout when not available                                                            // 6171\n// setTimeout cannot be override globally sadly                                                                        // 6172\nfunction exitPromise(fn, _setTimeout) {                                                                                // 6173\n  _setTimeout(fn, 0);                                                                                                  // 6174\n}                                                                                                                      // 6175\n                                                                                                                       // 6176\nfunction deprecate(fn, message) {                                                                                      // 6177\n  var warned = false;                                                                                                  // 6178\n                                                                                                                       // 6179\n  function deprecated() {                                                                                              // 6180\n    if (!warned) {                                                                                                     // 6181\n      /* eslint no-console:0 */                                                                                        // 6182\n      console.log(message);                                                                                            // 6183\n      warned = true;                                                                                                   // 6184\n    }                                                                                                                  // 6185\n                                                                                                                       // 6186\n    return fn.apply(this, arguments);                                                                                  // 6187\n  }                                                                                                                    // 6188\n                                                                                                                       // 6189\n  return deprecated;                                                                                                   // 6190\n}                                                                                                                      // 6191\n                                                                                                                       // 6192\n// Prototype.js < 1.7, a widely used library, defines a weird                                                          // 6193\n// Array.prototype.toJSON function that will fail to stringify our content                                             // 6194\n// appropriately                                                                                                       // 6195\n// refs:                                                                                                               // 6196\n//   - https://groups.google.com/forum/#!topic/prototype-core/E-SAVvV_V9Q                                              // 6197\n//   - https://github.com/sstephenson/prototype/commit/038a2985a70593c1a86c230fadbdfe2e4898a48c                        // 6198\n//   - http://stackoverflow.com/a/3148441/147079                                                                       // 6199\nfunction safeJSONStringify(obj) {                                                                                      // 6200\n  /* eslint no-extend-native:0 */                                                                                      // 6201\n                                                                                                                       // 6202\n  if (Array.prototype.toJSON === undefined) {                                                                          // 6203\n    return JSON.stringify(obj);                                                                                        // 6204\n  }                                                                                                                    // 6205\n                                                                                                                       // 6206\n  var toJSON = Array.prototype.toJSON;                                                                                 // 6207\n  delete Array.prototype.toJSON;                                                                                       // 6208\n  var out = JSON.stringify(obj);                                                                                       // 6209\n  Array.prototype.toJSON = toJSON;                                                                                     // 6210\n                                                                                                                       // 6211\n  return out;                                                                                                          // 6212\n}                                                                                                                      // 6213\n                                                                                                                       // 6214\nfunction buildSearchMethod(queryParam) {                                                                               // 6215\n  return function search(query, args, callback) {                                                                      // 6216\n    // warn V2 users on how to search                                                                                  // 6217\n    if (typeof query === 'function' && typeof args === 'object' ||                                                     // 6218\n      typeof callback === 'object') {                                                                                  // 6219\n      // .search(query, params, cb)                                                                                    // 6220\n      // .search(cb, params)                                                                                           // 6221\n      throw new errors.AlgoliaSearchError('index.search usage is index.search(query, params, cb)');                    // 6222\n    }                                                                                                                  // 6223\n                                                                                                                       // 6224\n    if (arguments.length === 0 || typeof query === 'function') {                                                       // 6225\n      // .search(), .search(cb)                                                                                        // 6226\n      callback = query;                                                                                                // 6227\n      query = '';                                                                                                      // 6228\n    } else if (arguments.length === 1 || typeof args === 'function') {                                                 // 6229\n      // .search(query/args), .search(query, cb)                                                                       // 6230\n      callback = args;                                                                                                 // 6231\n      args = undefined;                                                                                                // 6232\n    }                                                                                                                  // 6233\n                                                                                                                       // 6234\n    // .search(args), careful: typeof null === 'object'                                                                // 6235\n    if (typeof query === 'object' && query !== null) {                                                                 // 6236\n      args = query;                                                                                                    // 6237\n      query = undefined;                                                                                               // 6238\n    } else if (query === undefined || query === null) { // .search(undefined/null)                                     // 6239\n      query = '';                                                                                                      // 6240\n    }                                                                                                                  // 6241\n                                                                                                                       // 6242\n    var params = '';                                                                                                   // 6243\n                                                                                                                       // 6244\n    if (query !== undefined) {                                                                                         // 6245\n      params += queryParam + '=' + encodeURIComponent(query);                                                          // 6246\n    }                                                                                                                  // 6247\n                                                                                                                       // 6248\n    if (args !== undefined) {                                                                                          // 6249\n      // `_getSearchParams` will augment params, do not be fooled by the = versus += from previous if                  // 6250\n      params = this.as._getSearchParams(args, params);                                                                 // 6251\n    }                                                                                                                  // 6252\n                                                                                                                       // 6253\n    return this._search(params, callback);                                                                             // 6254\n  };                                                                                                                   // 6255\n}                                                                                                                      // 6256\n                                                                                                                       // 6257\n}).call(this,require(2))                                                                                               // 6258\n},{\"11\":11,\"2\":2,\"43\":43,\"46\":46,\"55\":55,\"58\":58,\"6\":6,\"63\":63}],58:[function(require,module,exports){                 // 6259\n'use strict';                                                                                                          // 6260\n                                                                                                                       // 6261\n// This is the object returned by the `index.browseAll()` method                                                       // 6262\n                                                                                                                       // 6263\nmodule.exports = IndexBrowser;                                                                                         // 6264\n                                                                                                                       // 6265\nvar inherits = require(10);                                                                                            // 6266\nvar EventEmitter = require(1).EventEmitter;                                                                            // 6267\n                                                                                                                       // 6268\nfunction IndexBrowser() {                                                                                              // 6269\n}                                                                                                                      // 6270\n                                                                                                                       // 6271\ninherits(IndexBrowser, EventEmitter);                                                                                  // 6272\n                                                                                                                       // 6273\nIndexBrowser.prototype.stop = function() {                                                                             // 6274\n  this._stopped = true;                                                                                                // 6275\n  this._clean();                                                                                                       // 6276\n};                                                                                                                     // 6277\n                                                                                                                       // 6278\nIndexBrowser.prototype._end = function() {                                                                             // 6279\n  this.emit('end');                                                                                                    // 6280\n  this._clean();                                                                                                       // 6281\n};                                                                                                                     // 6282\n                                                                                                                       // 6283\nIndexBrowser.prototype._error = function(err) {                                                                        // 6284\n  this.emit('error', err);                                                                                             // 6285\n  this._clean();                                                                                                       // 6286\n};                                                                                                                     // 6287\n                                                                                                                       // 6288\nIndexBrowser.prototype._result = function(content) {                                                                   // 6289\n  this.emit('result', content);                                                                                        // 6290\n};                                                                                                                     // 6291\n                                                                                                                       // 6292\nIndexBrowser.prototype._clean = function() {                                                                           // 6293\n  this.removeAllListeners('stop');                                                                                     // 6294\n  this.removeAllListeners('end');                                                                                      // 6295\n  this.removeAllListeners('error');                                                                                    // 6296\n  this.removeAllListeners('result');                                                                                   // 6297\n};                                                                                                                     // 6298\n                                                                                                                       // 6299\n},{\"1\":1,\"10\":10}],59:[function(require,module,exports){                                                               // 6300\n'use strict';                                                                                                          // 6301\n                                                                                                                       // 6302\n// This is the standalone browser build entry point                                                                    // 6303\n// Browser implementation of the Algolia Search JavaScript client,                                                     // 6304\n// using XMLHttpRequest, XDomainRequest and JSONP as fallback                                                          // 6305\nmodule.exports = algoliasearch;                                                                                        // 6306\n                                                                                                                       // 6307\nvar inherits = require(10);                                                                                            // 6308\nvar Promise = window.Promise || require(9).Promise;                                                                    // 6309\n                                                                                                                       // 6310\nvar AlgoliaSearch = require(57);                                                                                       // 6311\nvar errors = require(63);                                                                                              // 6312\nvar inlineHeaders = require(61);                                                                                       // 6313\nvar jsonpRequest = require(62);                                                                                        // 6314\n                                                                                                                       // 6315\nfunction algoliasearch(applicationID, apiKey, opts) {                                                                  // 6316\n  var cloneDeep = require(44);                                                                                         // 6317\n                                                                                                                       // 6318\n  var getDocumentProtocol = require(60);                                                                               // 6319\n                                                                                                                       // 6320\n  opts = cloneDeep(opts || {});                                                                                        // 6321\n                                                                                                                       // 6322\n  if (opts.protocol === undefined) {                                                                                   // 6323\n    opts.protocol = getDocumentProtocol();                                                                             // 6324\n  }                                                                                                                    // 6325\n                                                                                                                       // 6326\n  opts._ua = opts._ua || algoliasearch.ua;                                                                             // 6327\n                                                                                                                       // 6328\n  return new AlgoliaSearchBrowser(applicationID, apiKey, opts);                                                        // 6329\n}                                                                                                                      // 6330\n                                                                                                                       // 6331\nalgoliasearch.version = require(64);                                                                                   // 6332\nalgoliasearch.ua = 'Algolia for vanilla JavaScript ' + algoliasearch.version;                                          // 6333\n                                                                                                                       // 6334\n// we expose into window no matter how we are used, this will allow                                                    // 6335\n// us to easily debug any website running algolia                                                                      // 6336\nwindow.__algolia = {                                                                                                   // 6337\n  debug: require(6),                                                                                                   // 6338\n  algoliasearch: algoliasearch                                                                                         // 6339\n};                                                                                                                     // 6340\n                                                                                                                       // 6341\nvar support = {                                                                                                        // 6342\n  hasXMLHttpRequest: 'XMLHttpRequest' in window,                                                                       // 6343\n  hasXDomainRequest: 'XDomainRequest' in window,                                                                       // 6344\n  cors: 'withCredentials' in new XMLHttpRequest(),                                                                     // 6345\n  timeout: 'timeout' in new XMLHttpRequest()                                                                           // 6346\n};                                                                                                                     // 6347\n                                                                                                                       // 6348\nfunction AlgoliaSearchBrowser() {                                                                                      // 6349\n  // call AlgoliaSearch constructor                                                                                    // 6350\n  AlgoliaSearch.apply(this, arguments);                                                                                // 6351\n}                                                                                                                      // 6352\n                                                                                                                       // 6353\ninherits(AlgoliaSearchBrowser, AlgoliaSearch);                                                                         // 6354\n                                                                                                                       // 6355\nAlgoliaSearchBrowser.prototype._request = function request(url, opts) {                                                // 6356\n  return new Promise(function wrapRequest(resolve, reject) {                                                           // 6357\n    // no cors or XDomainRequest, no request                                                                           // 6358\n    if (!support.cors && !support.hasXDomainRequest) {                                                                 // 6359\n      // very old browser, not supported                                                                               // 6360\n      reject(new errors.Network('CORS not supported'));                                                                // 6361\n      return;                                                                                                          // 6362\n    }                                                                                                                  // 6363\n                                                                                                                       // 6364\n    url = inlineHeaders(url, opts.headers);                                                                            // 6365\n                                                                                                                       // 6366\n    var body = opts.body;                                                                                              // 6367\n    var req = support.cors ? new XMLHttpRequest() : new XDomainRequest();                                              // 6368\n    var ontimeout;                                                                                                     // 6369\n    var timedOut;                                                                                                      // 6370\n                                                                                                                       // 6371\n    // do not rely on default XHR async flag, as some analytics code like hotjar                                       // 6372\n    // breaks it and set it to false by default                                                                        // 6373\n    if (req instanceof XMLHttpRequest) {                                                                               // 6374\n      req.open(opts.method, url, true);                                                                                // 6375\n    } else {                                                                                                           // 6376\n      req.open(opts.method, url);                                                                                      // 6377\n    }                                                                                                                  // 6378\n                                                                                                                       // 6379\n    if (support.cors) {                                                                                                // 6380\n      if (body) {                                                                                                      // 6381\n        if (opts.method === 'POST') {                                                                                  // 6382\n          // https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS#Simple_requests                     // 6383\n          req.setRequestHeader('content-type', 'application/x-www-form-urlencoded');                                   // 6384\n        } else {                                                                                                       // 6385\n          req.setRequestHeader('content-type', 'application/json');                                                    // 6386\n        }                                                                                                              // 6387\n      }                                                                                                                // 6388\n      req.setRequestHeader('accept', 'application/json');                                                              // 6389\n    }                                                                                                                  // 6390\n                                                                                                                       // 6391\n    // we set an empty onprogress listener                                                                             // 6392\n    // so that XDomainRequest on IE9 is not aborted                                                                    // 6393\n    // refs:                                                                                                           // 6394\n    //  - https://github.com/algolia/algoliasearch-client-js/issues/76                                                 // 6395\n    //  - https://social.msdn.microsoft.com/Forums/ie/en-US/30ef3add-767c-4436-b8a9-f1ca19b4812e/ie9-rtm-xdomainrequest-issued-requests-may-abort-if-all-event-handlers-not-specified?forum=iewebdevelopment\n    req.onprogress = function noop() {};                                                                               // 6397\n                                                                                                                       // 6398\n    req.onload = load;                                                                                                 // 6399\n    req.onerror = error;                                                                                               // 6400\n                                                                                                                       // 6401\n    if (support.timeout) {                                                                                             // 6402\n      // .timeout supported by both XHR and XDR,                                                                       // 6403\n      // we do receive timeout event, tested                                                                           // 6404\n      req.timeout = opts.timeout;                                                                                      // 6405\n                                                                                                                       // 6406\n      req.ontimeout = timeout;                                                                                         // 6407\n    } else {                                                                                                           // 6408\n      ontimeout = setTimeout(timeout, opts.timeout);                                                                   // 6409\n    }                                                                                                                  // 6410\n                                                                                                                       // 6411\n    req.send(body);                                                                                                    // 6412\n                                                                                                                       // 6413\n    // event object not received in IE8, at least                                                                      // 6414\n    // but we do not use it, still important to note                                                                   // 6415\n    function load(/* event */) {                                                                                       // 6416\n      // When browser does not supports req.timeout, we can                                                            // 6417\n      // have both a load and timeout event, since handled by a dumb setTimeout                                        // 6418\n      if (timedOut) {                                                                                                  // 6419\n        return;                                                                                                        // 6420\n      }                                                                                                                // 6421\n                                                                                                                       // 6422\n      if (!support.timeout) {                                                                                          // 6423\n        clearTimeout(ontimeout);                                                                                       // 6424\n      }                                                                                                                // 6425\n                                                                                                                       // 6426\n      var out;                                                                                                         // 6427\n                                                                                                                       // 6428\n      try {                                                                                                            // 6429\n        out = {                                                                                                        // 6430\n          body: JSON.parse(req.responseText),                                                                          // 6431\n          responseText: req.responseText,                                                                              // 6432\n          statusCode: req.status,                                                                                      // 6433\n          // XDomainRequest does not have any response headers                                                         // 6434\n          headers: req.getAllResponseHeaders && req.getAllResponseHeaders() || {}                                      // 6435\n        };                                                                                                             // 6436\n      } catch (e) {                                                                                                    // 6437\n        out = new errors.UnparsableJSON({                                                                              // 6438\n          more: req.responseText                                                                                       // 6439\n        });                                                                                                            // 6440\n      }                                                                                                                // 6441\n                                                                                                                       // 6442\n      if (out instanceof errors.UnparsableJSON) {                                                                      // 6443\n        reject(out);                                                                                                   // 6444\n      } else {                                                                                                         // 6445\n        resolve(out);                                                                                                  // 6446\n      }                                                                                                                // 6447\n    }                                                                                                                  // 6448\n                                                                                                                       // 6449\n    function error(event) {                                                                                            // 6450\n      if (timedOut) {                                                                                                  // 6451\n        return;                                                                                                        // 6452\n      }                                                                                                                // 6453\n                                                                                                                       // 6454\n      if (!support.timeout) {                                                                                          // 6455\n        clearTimeout(ontimeout);                                                                                       // 6456\n      }                                                                                                                // 6457\n                                                                                                                       // 6458\n      // error event is trigerred both with XDR/XHR on:                                                                // 6459\n      //   - DNS error                                                                                                 // 6460\n      //   - unallowed cross domain request                                                                            // 6461\n      reject(                                                                                                          // 6462\n        new errors.Network({                                                                                           // 6463\n          more: event                                                                                                  // 6464\n        })                                                                                                             // 6465\n      );                                                                                                               // 6466\n    }                                                                                                                  // 6467\n                                                                                                                       // 6468\n    function timeout() {                                                                                               // 6469\n      if (!support.timeout) {                                                                                          // 6470\n        timedOut = true;                                                                                               // 6471\n        req.abort();                                                                                                   // 6472\n      }                                                                                                                // 6473\n                                                                                                                       // 6474\n      reject(new errors.RequestTimeout());                                                                             // 6475\n    }                                                                                                                  // 6476\n  });                                                                                                                  // 6477\n};                                                                                                                     // 6478\n                                                                                                                       // 6479\nAlgoliaSearchBrowser.prototype._request.fallback = function requestFallback(url, opts) {                               // 6480\n  url = inlineHeaders(url, opts.headers);                                                                              // 6481\n                                                                                                                       // 6482\n  return new Promise(function wrapJsonpRequest(resolve, reject) {                                                      // 6483\n    jsonpRequest(url, opts, function jsonpRequestDone(err, content) {                                                  // 6484\n      if (err) {                                                                                                       // 6485\n        reject(err);                                                                                                   // 6486\n        return;                                                                                                        // 6487\n      }                                                                                                                // 6488\n                                                                                                                       // 6489\n      resolve(content);                                                                                                // 6490\n    });                                                                                                                // 6491\n  });                                                                                                                  // 6492\n};                                                                                                                     // 6493\n                                                                                                                       // 6494\nAlgoliaSearchBrowser.prototype._promise = {                                                                            // 6495\n  reject: function rejectPromise(val) {                                                                                // 6496\n    return Promise.reject(val);                                                                                        // 6497\n  },                                                                                                                   // 6498\n  resolve: function resolvePromise(val) {                                                                              // 6499\n    return Promise.resolve(val);                                                                                       // 6500\n  },                                                                                                                   // 6501\n  delay: function delayPromise(ms) {                                                                                   // 6502\n    return new Promise(function resolveOnTimeout(resolve/* , reject*/) {                                               // 6503\n      setTimeout(resolve, ms);                                                                                         // 6504\n    });                                                                                                                // 6505\n  }                                                                                                                    // 6506\n};                                                                                                                     // 6507\n                                                                                                                       // 6508\n},{\"10\":10,\"44\":44,\"57\":57,\"6\":6,\"60\":60,\"61\":61,\"62\":62,\"63\":63,\"64\":64,\"9\":9}],60:[function(require,module,exports){\n'use strict';                                                                                                          // 6510\n                                                                                                                       // 6511\nmodule.exports = getDocumentProtocol;                                                                                  // 6512\n                                                                                                                       // 6513\nfunction getDocumentProtocol() {                                                                                       // 6514\n  var protocol = window.document.location.protocol;                                                                    // 6515\n                                                                                                                       // 6516\n  // when in `file:` mode (local html file), default to `http:`                                                        // 6517\n  if (protocol !== 'http:' && protocol !== 'https:') {                                                                 // 6518\n    protocol = 'http:';                                                                                                // 6519\n  }                                                                                                                    // 6520\n                                                                                                                       // 6521\n  return protocol;                                                                                                     // 6522\n}                                                                                                                      // 6523\n                                                                                                                       // 6524\n},{}],61:[function(require,module,exports){                                                                            // 6525\n'use strict';                                                                                                          // 6526\n                                                                                                                       // 6527\nmodule.exports = inlineHeaders;                                                                                        // 6528\n                                                                                                                       // 6529\nvar querystring = require(5);                                                                                          // 6530\n                                                                                                                       // 6531\nfunction inlineHeaders(url, headers) {                                                                                 // 6532\n  if (/\\?/.test(url)) {                                                                                                // 6533\n    url += '&';                                                                                                        // 6534\n  } else {                                                                                                             // 6535\n    url += '?';                                                                                                        // 6536\n  }                                                                                                                    // 6537\n                                                                                                                       // 6538\n  return url + querystring.encode(headers);                                                                            // 6539\n}                                                                                                                      // 6540\n                                                                                                                       // 6541\n},{\"5\":5}],62:[function(require,module,exports){                                                                       // 6542\n'use strict';                                                                                                          // 6543\n                                                                                                                       // 6544\nmodule.exports = jsonpRequest;                                                                                         // 6545\n                                                                                                                       // 6546\nvar errors = require(63);                                                                                              // 6547\n                                                                                                                       // 6548\nvar JSONPCounter = 0;                                                                                                  // 6549\n                                                                                                                       // 6550\nfunction jsonpRequest(url, opts, cb) {                                                                                 // 6551\n  if (opts.method !== 'GET') {                                                                                         // 6552\n    cb(new Error('Method ' + opts.method + ' ' + url + ' is not supported by JSONP.'));                                // 6553\n    return;                                                                                                            // 6554\n  }                                                                                                                    // 6555\n                                                                                                                       // 6556\n  opts.debug('JSONP: start');                                                                                          // 6557\n                                                                                                                       // 6558\n  var cbCalled = false;                                                                                                // 6559\n  var timedOut = false;                                                                                                // 6560\n                                                                                                                       // 6561\n  JSONPCounter += 1;                                                                                                   // 6562\n  var head = document.getElementsByTagName('head')[0];                                                                 // 6563\n  var script = document.createElement('script');                                                                       // 6564\n  var cbName = 'algoliaJSONP_' + JSONPCounter;                                                                         // 6565\n  var done = false;                                                                                                    // 6566\n                                                                                                                       // 6567\n  window[cbName] = function(data) {                                                                                    // 6568\n    try {                                                                                                              // 6569\n      delete window[cbName];                                                                                           // 6570\n    } catch (e) {                                                                                                      // 6571\n      window[cbName] = undefined;                                                                                      // 6572\n    }                                                                                                                  // 6573\n                                                                                                                       // 6574\n    if (timedOut) {                                                                                                    // 6575\n      return;                                                                                                          // 6576\n    }                                                                                                                  // 6577\n                                                                                                                       // 6578\n    cbCalled = true;                                                                                                   // 6579\n                                                                                                                       // 6580\n    clean();                                                                                                           // 6581\n                                                                                                                       // 6582\n    cb(null, {                                                                                                         // 6583\n      body: data/* ,                                                                                                   // 6584\n      // We do not send the statusCode, there's no statusCode in JSONP, it will be                                     // 6585\n      // computed using data.status && data.message like with XDR                                                      // 6586\n      statusCode*/                                                                                                     // 6587\n    });                                                                                                                // 6588\n  };                                                                                                                   // 6589\n                                                                                                                       // 6590\n  // add callback by hand                                                                                              // 6591\n  url += '&callback=' + cbName;                                                                                        // 6592\n                                                                                                                       // 6593\n  // add body params manually                                                                                          // 6594\n  if (opts.jsonBody && opts.jsonBody.params) {                                                                         // 6595\n    url += '&' + opts.jsonBody.params;                                                                                 // 6596\n  }                                                                                                                    // 6597\n                                                                                                                       // 6598\n  var ontimeout = setTimeout(timeout, opts.timeout);                                                                   // 6599\n                                                                                                                       // 6600\n  // script onreadystatechange needed only for                                                                         // 6601\n  // <= IE8                                                                                                            // 6602\n  // https://github.com/angular/angular.js/issues/4523                                                                 // 6603\n  script.onreadystatechange = readystatechange;                                                                        // 6604\n  script.onload = success;                                                                                             // 6605\n  script.onerror = error;                                                                                              // 6606\n                                                                                                                       // 6607\n  script.async = true;                                                                                                 // 6608\n  script.defer = true;                                                                                                 // 6609\n  script.src = url;                                                                                                    // 6610\n  head.appendChild(script);                                                                                            // 6611\n                                                                                                                       // 6612\n  function success() {                                                                                                 // 6613\n    opts.debug('JSONP: success');                                                                                      // 6614\n                                                                                                                       // 6615\n    if (done || timedOut) {                                                                                            // 6616\n      return;                                                                                                          // 6617\n    }                                                                                                                  // 6618\n                                                                                                                       // 6619\n    done = true;                                                                                                       // 6620\n                                                                                                                       // 6621\n    // script loaded but did not call the fn => script loading error                                                   // 6622\n    if (!cbCalled) {                                                                                                   // 6623\n      opts.debug('JSONP: Fail. Script loaded but did not call the callback');                                          // 6624\n      clean();                                                                                                         // 6625\n      cb(new errors.JSONPScriptFail());                                                                                // 6626\n    }                                                                                                                  // 6627\n  }                                                                                                                    // 6628\n                                                                                                                       // 6629\n  function readystatechange() {                                                                                        // 6630\n    if (this.readyState === 'loaded' || this.readyState === 'complete') {                                              // 6631\n      success();                                                                                                       // 6632\n    }                                                                                                                  // 6633\n  }                                                                                                                    // 6634\n                                                                                                                       // 6635\n  function clean() {                                                                                                   // 6636\n    clearTimeout(ontimeout);                                                                                           // 6637\n    script.onload = null;                                                                                              // 6638\n    script.onreadystatechange = null;                                                                                  // 6639\n    script.onerror = null;                                                                                             // 6640\n    head.removeChild(script);                                                                                          // 6641\n                                                                                                                       // 6642\n    try {                                                                                                              // 6643\n      delete window[cbName];                                                                                           // 6644\n      delete window[cbName + '_loaded'];                                                                               // 6645\n    } catch (e) {                                                                                                      // 6646\n      window[cbName] = null;                                                                                           // 6647\n      window[cbName + '_loaded'] = null;                                                                               // 6648\n    }                                                                                                                  // 6649\n  }                                                                                                                    // 6650\n                                                                                                                       // 6651\n  function timeout() {                                                                                                 // 6652\n    opts.debug('JSONP: Script timeout');                                                                               // 6653\n                                                                                                                       // 6654\n    timedOut = true;                                                                                                   // 6655\n    clean();                                                                                                           // 6656\n    cb(new errors.RequestTimeout());                                                                                   // 6657\n  }                                                                                                                    // 6658\n                                                                                                                       // 6659\n  function error() {                                                                                                   // 6660\n    opts.debug('JSONP: Script error');                                                                                 // 6661\n                                                                                                                       // 6662\n    if (done || timedOut) {                                                                                            // 6663\n      return;                                                                                                          // 6664\n    }                                                                                                                  // 6665\n                                                                                                                       // 6666\n    clean();                                                                                                           // 6667\n    cb(new errors.JSONPScriptError());                                                                                 // 6668\n  }                                                                                                                    // 6669\n}                                                                                                                      // 6670\n                                                                                                                       // 6671\n},{\"63\":63}],63:[function(require,module,exports){                                                                     // 6672\n'use strict';                                                                                                          // 6673\n                                                                                                                       // 6674\n// This file hosts our error definitions                                                                               // 6675\n// We use custom error \"types\" so that we can act on them when we need it                                              // 6676\n// e.g.: if error instanceof errors.UnparsableJSON then..                                                              // 6677\n                                                                                                                       // 6678\nvar inherits = require(10);                                                                                            // 6679\n                                                                                                                       // 6680\nfunction AlgoliaSearchError(message, extraProperties) {                                                                // 6681\n  var forEach = require(11);                                                                                           // 6682\n                                                                                                                       // 6683\n  var error = this;                                                                                                    // 6684\n                                                                                                                       // 6685\n  // try to get a stacktrace                                                                                           // 6686\n  if (typeof Error.captureStackTrace === 'function') {                                                                 // 6687\n    Error.captureStackTrace(this, this.constructor);                                                                   // 6688\n  } else {                                                                                                             // 6689\n    error.stack = (new Error()).stack || 'Cannot get a stacktrace, browser is too old';                                // 6690\n  }                                                                                                                    // 6691\n                                                                                                                       // 6692\n  this.name = this.constructor.name;                                                                                   // 6693\n  this.message = message || 'Unknown error';                                                                           // 6694\n                                                                                                                       // 6695\n  if (extraProperties) {                                                                                               // 6696\n    forEach(extraProperties, function addToErrorObject(value, key) {                                                   // 6697\n      error[key] = value;                                                                                              // 6698\n    });                                                                                                                // 6699\n  }                                                                                                                    // 6700\n}                                                                                                                      // 6701\n                                                                                                                       // 6702\ninherits(AlgoliaSearchError, Error);                                                                                   // 6703\n                                                                                                                       // 6704\nfunction createCustomError(name, message) {                                                                            // 6705\n  function AlgoliaSearchCustomError() {                                                                                // 6706\n    var args = Array.prototype.slice.call(arguments, 0);                                                               // 6707\n                                                                                                                       // 6708\n    // custom message not set, use default                                                                             // 6709\n    if (typeof args[0] !== 'string') {                                                                                 // 6710\n      args.unshift(message);                                                                                           // 6711\n    }                                                                                                                  // 6712\n                                                                                                                       // 6713\n    AlgoliaSearchError.apply(this, args);                                                                              // 6714\n    this.name = 'AlgoliaSearch' + name + 'Error';                                                                      // 6715\n  }                                                                                                                    // 6716\n                                                                                                                       // 6717\n  inherits(AlgoliaSearchCustomError, AlgoliaSearchError);                                                              // 6718\n                                                                                                                       // 6719\n  return AlgoliaSearchCustomError;                                                                                     // 6720\n}                                                                                                                      // 6721\n                                                                                                                       // 6722\n// late exports to let various fn defs and inherits take place                                                         // 6723\nmodule.exports = {                                                                                                     // 6724\n  AlgoliaSearchError: AlgoliaSearchError,                                                                              // 6725\n  UnparsableJSON: createCustomError(                                                                                   // 6726\n    'UnparsableJSON',                                                                                                  // 6727\n    'Could not parse the incoming response as JSON, see err.more for details'                                          // 6728\n  ),                                                                                                                   // 6729\n  RequestTimeout: createCustomError(                                                                                   // 6730\n    'RequestTimeout',                                                                                                  // 6731\n    'Request timedout before getting a response'                                                                       // 6732\n  ),                                                                                                                   // 6733\n  Network: createCustomError(                                                                                          // 6734\n    'Network',                                                                                                         // 6735\n    'Network issue, see err.more for details'                                                                          // 6736\n  ),                                                                                                                   // 6737\n  JSONPScriptFail: createCustomError(                                                                                  // 6738\n    'JSONPScriptFail',                                                                                                 // 6739\n    '<script> was loaded but did not call our provided callback'                                                       // 6740\n  ),                                                                                                                   // 6741\n  JSONPScriptError: createCustomError(                                                                                 // 6742\n    'JSONPScriptError',                                                                                                // 6743\n    '<script> unable to load due to an `error` event on it'                                                            // 6744\n  ),                                                                                                                   // 6745\n  Unknown: createCustomError(                                                                                          // 6746\n    'Unknown',                                                                                                         // 6747\n    'Unknown error occured'                                                                                            // 6748\n  )                                                                                                                    // 6749\n};                                                                                                                     // 6750\n                                                                                                                       // 6751\n},{\"10\":10,\"11\":11}],64:[function(require,module,exports){                                                             // 6752\n'use strict';                                                                                                          // 6753\n                                                                                                                       // 6754\nmodule.exports = '3.9.1';                                                                                              // 6755\n                                                                                                                       // 6756\n},{}]},{},[59])(59)                                                                                                    // 6757\n});                                                                                                                    // 6758\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/acemtp_algolia/client.js                                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nAlgoliaSearch = algoliasearch;                                                                                         // 1\n                                                                                                                       // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['acemtp:algolia'] = {}, {\n  AlgoliaSearch: AlgoliaSearch\n});\n\n})();\n","servePath":"/packages/acemtp_algolia.js"}]