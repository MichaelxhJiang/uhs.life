[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar ReactiveDict = Package['reactive-dict'].ReactiveDict;\nvar _ = Package.underscore._;\n\n/* Package-scope variables */\nvar __coffeescriptShare, ActiveRoute;\n\n(function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/zimme_active-route/packages/zimme_active-route.js                                                         //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\n(function () {                                                                                                        // 1\n                                                                                                                      // 2\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/zimme:active-route/lib/activeroute.coffee.js                                                           //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar checkArgument, checkRouterPackages, errorMessages, fr, ir, test;                                                  // 10\n                                                                                                                      // 11\nfr = ir = null;                                                                                                       // 12\n                                                                                                                      // 13\ncheckArgument = function(arg) {                                                                                       // 14\n  var error;                                                                                                          // 15\n  try {                                                                                                               // 16\n    return check(arg, Match.OneOf(RegExp, String));                                                                   // 17\n  } catch (_error) {                                                                                                  // 18\n    error = _error;                                                                                                   // 19\n    throw new Error(errorMessages.invalidArgument);                                                                   // 20\n  }                                                                                                                   // 21\n};                                                                                                                    // 22\n                                                                                                                      // 23\ncheckRouterPackages = function() {                                                                                    // 24\n  var _ref;                                                                                                           // 25\n  fr = (_ref = Package['kadira:flow-router']) != null ? _ref : Package['meteorhacks:flow-router'];                    // 26\n  ir = Package['iron:router'];                                                                                        // 27\n  if (!(ir || fr)) {                                                                                                  // 28\n    throw new Error(errorMessages.noSupportedRouter);                                                                 // 29\n  }                                                                                                                   // 30\n};                                                                                                                    // 31\n                                                                                                                      // 32\nerrorMessages = {                                                                                                     // 33\n  noSupportedRouter: 'No supported router installed. Please install ' + 'iron:router or meteorhacks:flow-router.',    // 34\n  invalidArgument: 'Invalid argument, must be String or RegExp.'                                                      // 35\n};                                                                                                                    // 36\n                                                                                                                      // 37\nshare.config = new ReactiveDict('activeRouteConfig');                                                                 // 38\n                                                                                                                      // 39\nshare.config.setDefault({                                                                                             // 40\n  activeClass: 'active',                                                                                              // 41\n  caseSensitive: true,                                                                                                // 42\n  disabledClass: 'disabled'                                                                                           // 43\n});                                                                                                                   // 44\n                                                                                                                      // 45\ntest = function(value, pattern) {                                                                                     // 46\n  var result;                                                                                                         // 47\n  if (!value) {                                                                                                       // 48\n    return false;                                                                                                     // 49\n  }                                                                                                                   // 50\n  if (Match.test(pattern, RegExp)) {                                                                                  // 51\n    result = value.search(pattern);                                                                                   // 52\n    result = result > -1;                                                                                             // 53\n  } else if (Match.test(pattern, String)) {                                                                           // 54\n    if (share.config.equals('caseSensitive', false)) {                                                                // 55\n      value = value.toLowerCase();                                                                                    // 56\n      pattern = pattern.toLowerCase();                                                                                // 57\n    }                                                                                                                 // 58\n    result = value === pattern;                                                                                       // 59\n  }                                                                                                                   // 60\n  return result != null ? result : result = false;                                                                    // 61\n};                                                                                                                    // 62\n                                                                                                                      // 63\nActiveRoute = {                                                                                                       // 64\n  config: function() {                                                                                                // 65\n    return this.configure.apply(this, arguments);                                                                     // 66\n  },                                                                                                                  // 67\n  configure: function(options) {                                                                                      // 68\n    if (Meteor.isServer) {                                                                                            // 69\n      return;                                                                                                         // 70\n    }                                                                                                                 // 71\n    share.config.set(options);                                                                                        // 72\n  },                                                                                                                  // 73\n  name: function(routeName) {                                                                                         // 74\n    var currentRouteName, _ref, _ref1;                                                                                // 75\n    checkRouterPackages();                                                                                            // 76\n    if (Meteor.isServer) {                                                                                            // 77\n      return;                                                                                                         // 78\n    }                                                                                                                 // 79\n    checkArgument(routeName);                                                                                         // 80\n    if (ir) {                                                                                                         // 81\n      currentRouteName = (_ref = ir.Router.current()) != null ? (_ref1 = _ref.route) != null ? typeof _ref1.getName === \"function\" ? _ref1.getName() : void 0 : void 0 : void 0;\n    }                                                                                                                 // 83\n    if (fr) {                                                                                                         // 84\n      if (currentRouteName == null) {                                                                                 // 85\n        currentRouteName = fr.FlowRouter.getRouteName();                                                              // 86\n      }                                                                                                               // 87\n    }                                                                                                                 // 88\n    return test(currentRouteName, routeName);                                                                         // 89\n  },                                                                                                                  // 90\n  path: function(path) {                                                                                              // 91\n    var controller, currentPath;                                                                                      // 92\n    checkRouterPackages();                                                                                            // 93\n    if (Meteor.isServer) {                                                                                            // 94\n      return;                                                                                                         // 95\n    }                                                                                                                 // 96\n    checkArgument(path);                                                                                              // 97\n    if (ir) {                                                                                                         // 98\n      controller = ir.Router.current();                                                                               // 99\n      if (controller != null ? controller.route : void 0) {                                                           // 100\n        currentPath = controller != null ? controller.location.get().path : void 0;                                   // 101\n      }                                                                                                               // 102\n    }                                                                                                                 // 103\n    if (fr) {                                                                                                         // 104\n      fr.FlowRouter.watchPathChange();                                                                                // 105\n      if (currentPath == null) {                                                                                      // 106\n        currentPath = fr.FlowRouter.current().path;                                                                   // 107\n      }                                                                                                               // 108\n    }                                                                                                                 // 109\n    return test(currentPath, path);                                                                                   // 110\n  }                                                                                                                   // 111\n};                                                                                                                    // 112\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 114\n}).call(this);                                                                                                        // 115\n                                                                                                                      // 116\n                                                                                                                      // 117\n                                                                                                                      // 118\n                                                                                                                      // 119\n                                                                                                                      // 120\n                                                                                                                      // 121\n(function () {                                                                                                        // 122\n                                                                                                                      // 123\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                 //\n// packages/zimme:active-route/client/helpers.coffee.js                                                            //\n//                                                                                                                 //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                   //\n__coffeescriptShare = typeof __coffeescriptShare === 'object' ? __coffeescriptShare : {}; var share = __coffeescriptShare;\nvar Template, func, helpers, isActive, name,                                                                          // 131\n  __hasProp = {}.hasOwnProperty;                                                                                      // 132\n                                                                                                                      // 133\nif (!Package.templating) {                                                                                            // 134\n  return;                                                                                                             // 135\n}                                                                                                                     // 136\n                                                                                                                      // 137\nTemplate = Package.templating.Template;                                                                               // 138\n                                                                                                                      // 139\nisActive = function(type, inverse) {                                                                                  // 140\n  var helperName;                                                                                                     // 141\n  if (inverse == null) {                                                                                              // 142\n    inverse = false;                                                                                                  // 143\n  }                                                                                                                   // 144\n  helperName = 'is';                                                                                                  // 145\n  if (inverse) {                                                                                                      // 146\n    helperName += 'Not';                                                                                              // 147\n  }                                                                                                                   // 148\n  helperName += \"Active\" + type;                                                                                      // 149\n  return function(options, attributes) {                                                                              // 150\n    var className, isPath, name, path, pattern, regex, result, t, _ref;                                               // 151\n    if (options == null) {                                                                                            // 152\n      options = {};                                                                                                   // 153\n    }                                                                                                                 // 154\n    if (attributes == null) {                                                                                         // 155\n      attributes = {};                                                                                                // 156\n    }                                                                                                                 // 157\n    if (Match.test(options, Spacebars.kw)) {                                                                          // 158\n      options = options.hash;                                                                                         // 159\n    }                                                                                                                 // 160\n    if (Match.test(attributes, Spacebars.kw)) {                                                                       // 161\n      attributes = attributes.hash;                                                                                   // 162\n    }                                                                                                                 // 163\n    if (Match.test(options, String)) {                                                                                // 164\n      if (share.config.equals('regex', true)) {                                                                       // 165\n        options = {                                                                                                   // 166\n          regex: options                                                                                              // 167\n        };                                                                                                            // 168\n      } else if (type === 'Path') {                                                                                   // 169\n        options = {                                                                                                   // 170\n          path: options                                                                                               // 171\n        };                                                                                                            // 172\n      } else {                                                                                                        // 173\n        options = {                                                                                                   // 174\n          name: options                                                                                               // 175\n        };                                                                                                            // 176\n      }                                                                                                               // 177\n    }                                                                                                                 // 178\n    options = _.defaults(attributes, options);                                                                        // 179\n    pattern = Match.ObjectIncluding({                                                                                 // 180\n      \"class\": Match.Optional(String),                                                                                // 181\n      className: Match.Optional(String),                                                                              // 182\n      regex: Match.Optional(Match.OneOf(RegExp, String)),                                                             // 183\n      name: Match.Optional(String),                                                                                   // 184\n      path: Match.Optional(String)                                                                                    // 185\n    });                                                                                                               // 186\n    check(options, pattern);                                                                                          // 187\n    regex = options.regex, name = options.name, path = options.path;                                                  // 188\n    className = (_ref = options[\"class\"]) != null ? _ref : options.className;                                         // 189\n    if (type === 'Path') {                                                                                            // 190\n      name = null;                                                                                                    // 191\n    } else {                                                                                                          // 192\n      path = null;                                                                                                    // 193\n    }                                                                                                                 // 194\n    if (!(regex || name || path)) {                                                                                   // 195\n      t = type === 'Route' ? 'name' : type;                                                                           // 196\n      t = t.toLowerCase();                                                                                            // 197\n      console.error((\"Invalid argument, \" + helperName + \" takes \\\"\" + t + \"\\\", \") + (\"\" + t + \"=\\\"\" + t + \"\\\" or regex=\\\"regex\\\"\"));\n      return false;                                                                                                   // 199\n    }                                                                                                                 // 200\n    if (Match.test(regex, String)) {                                                                                  // 201\n      if (share.config.equals('caseSensitive', false)) {                                                              // 202\n        regex = new RegExp(regex, 'i');                                                                               // 203\n      } else {                                                                                                        // 204\n        regex = new RegExp(regex);                                                                                    // 205\n      }                                                                                                               // 206\n    }                                                                                                                 // 207\n    if (regex == null) {                                                                                              // 208\n      regex = name || path;                                                                                           // 209\n    }                                                                                                                 // 210\n    if (inverse) {                                                                                                    // 211\n      if (className == null) {                                                                                        // 212\n        className = share.config.get('disabledClass');                                                                // 213\n      }                                                                                                               // 214\n    } else {                                                                                                          // 215\n      if (className == null) {                                                                                        // 216\n        className = share.config.get('activeClass');                                                                  // 217\n      }                                                                                                               // 218\n    }                                                                                                                 // 219\n    if (type === 'Path') {                                                                                            // 220\n      isPath = true;                                                                                                  // 221\n    }                                                                                                                 // 222\n    if (isPath) {                                                                                                     // 223\n      result = ActiveRoute.path(regex);                                                                               // 224\n    } else {                                                                                                          // 225\n      result = ActiveRoute.name(regex);                                                                               // 226\n    }                                                                                                                 // 227\n    if (inverse) {                                                                                                    // 228\n      result = !result;                                                                                               // 229\n    }                                                                                                                 // 230\n    if (result) {                                                                                                     // 231\n      return className;                                                                                               // 232\n    } else {                                                                                                          // 233\n      return false;                                                                                                   // 234\n    }                                                                                                                 // 235\n  };                                                                                                                  // 236\n};                                                                                                                    // 237\n                                                                                                                      // 238\nhelpers = {                                                                                                           // 239\n  isActiveRoute: isActive('Route'),                                                                                   // 240\n  isActivePath: isActive('Path'),                                                                                     // 241\n  isNotActiveRoute: isActive('Route', true),                                                                          // 242\n  isNotActivePath: isActive('Path', true)                                                                             // 243\n};                                                                                                                    // 244\n                                                                                                                      // 245\nfor (name in helpers) {                                                                                               // 246\n  if (!__hasProp.call(helpers, name)) continue;                                                                       // 247\n  func = helpers[name];                                                                                               // 248\n  Template.registerHelper(name, func);                                                                                // 249\n}                                                                                                                     // 250\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      // 252\n}).call(this);                                                                                                        // 253\n                                                                                                                      // 254\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['zimme:active-route'] = {}, {\n  ActiveRoute: ActiveRoute\n});\n\n})();\n","servePath":"/packages/zimme_active-route.js"}]