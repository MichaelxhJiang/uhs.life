[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar EJSON = Package.ejson.EJSON;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar ReactiveDict;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"reactive-dict\":{\"reactive-dict.js\":function(require){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/reactive-dict.js                                                                        //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nvar _slicedToArray2 = require(\"babel-runtime/helpers/slicedToArray\");                                             //\n                                                                                                                  //\nvar _slicedToArray3 = _interopRequireDefault(_slicedToArray2);                                                    //\n                                                                                                                  //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                           //\n                                                                                                                  //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                  //\n                                                                                                                  //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                 //\n                                                                                                                  //\n// XXX come up with a serialization method which canonicalizes object key                                         // 1\n// order, which would allow us to use objects as values for equals.                                               // 2\nvar stringify = function (value) {                                                                                // 3\n  if (value === undefined) return 'undefined';                                                                    // 4\n  return EJSON.stringify(value);                                                                                  // 6\n};                                                                                                                // 7\n                                                                                                                  //\nvar parse = function (serialized) {                                                                               // 8\n  if (serialized === undefined || serialized === 'undefined') return undefined;                                   // 9\n  return EJSON.parse(serialized);                                                                                 // 11\n};                                                                                                                // 12\n                                                                                                                  //\nvar changed = function (v) {                                                                                      // 14\n  v && v.changed();                                                                                               // 15\n}; // XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName                                            // 16\n                                                                                                                  //\n                                                                                                                  //\nReactiveDict = function (dictName) {                                                                              // 19\n  // this.keys: key -> value                                                                                      // 20\n  if (dictName) {                                                                                                 // 21\n    if (typeof dictName === 'string') {                                                                           // 22\n      // the normal case, argument is a string name.                                                              // 23\n      // _registerDictForMigrate will throw an error on duplicate name.                                           // 24\n      ReactiveDict._registerDictForMigrate(dictName, this);                                                       // 25\n                                                                                                                  //\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};                                                 // 26\n      this.name = dictName;                                                                                       // 27\n    } else if ((typeof dictName === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(dictName)) === 'object') {  // 28\n      // back-compat case: dictName is actually migrationData                                                     // 29\n      this.keys = {};                                                                                             // 30\n                                                                                                                  //\n      for (var _iterator = Object.entries(dictName), _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n        var _ref3;                                                                                                // 31\n                                                                                                                  //\n        if (_isArray) {                                                                                           // 31\n          if (_i >= _iterator.length) break;                                                                      // 31\n          _ref3 = _iterator[_i++];                                                                                // 31\n        } else {                                                                                                  // 31\n          _i = _iterator.next();                                                                                  // 31\n          if (_i.done) break;                                                                                     // 31\n          _ref3 = _i.value;                                                                                       // 31\n        }                                                                                                         // 31\n                                                                                                                  //\n        var _ref = _ref3;                                                                                         // 31\n                                                                                                                  //\n        var _ref2 = (0, _slicedToArray3.default)(_ref, 2);                                                        // 31\n                                                                                                                  //\n        var key = _ref2[0];                                                                                       // 31\n        var value = _ref2[1];                                                                                     // 31\n        this.keys[key] = stringify(value);                                                                        // 32\n      }                                                                                                           // 33\n    } else {                                                                                                      // 34\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);                                              // 35\n    }                                                                                                             // 36\n  } else {                                                                                                        // 37\n    // no name given; no migration will be performed                                                              // 38\n    this.keys = {};                                                                                               // 39\n  }                                                                                                               // 40\n                                                                                                                  //\n  this.allDeps = new Tracker.Dependency();                                                                        // 42\n  this.keyDeps = {}; // key -> Dependency                                                                         // 43\n                                                                                                                  //\n  this.keyValueDeps = {}; // key -> Dependency                                                                    // 44\n};                                                                                                                // 45\n                                                                                                                  //\n_.extend(ReactiveDict.prototype, {                                                                                // 47\n  // set() began as a key/value method, but we are now overloading it                                             // 48\n  // to take an object of key/value pairs, similar to backbone                                                    // 49\n  // http://backbonejs.org/#Model-set                                                                             // 50\n  set: function (keyOrObject, value) {                                                                            // 52\n    var self = this;                                                                                              // 53\n                                                                                                                  //\n    if ((typeof keyOrObject === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(keyOrObject)) === 'object' && value === undefined) {\n      // Called as `dict.set({...})`                                                                              // 56\n      self._setObject(keyOrObject);                                                                               // 57\n                                                                                                                  //\n      return;                                                                                                     // 58\n    } // the input isn't an object, so it must be a key                                                           // 59\n    // and we resume with the rest of the function                                                                // 61\n                                                                                                                  //\n                                                                                                                  //\n    var key = keyOrObject;                                                                                        // 62\n    value = stringify(value);                                                                                     // 64\n                                                                                                                  //\n    var keyExisted = _.has(self.keys, key);                                                                       // 66\n                                                                                                                  //\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';                                           // 67\n    var isNewValue = value !== oldSerializedValue;                                                                // 68\n    self.keys[key] = value;                                                                                       // 70\n                                                                                                                  //\n    if (isNewValue || !keyExisted) {                                                                              // 72\n      self.allDeps.changed();                                                                                     // 73\n    }                                                                                                             // 74\n                                                                                                                  //\n    if (isNewValue) {                                                                                             // 76\n      changed(self.keyDeps[key]);                                                                                 // 77\n                                                                                                                  //\n      if (self.keyValueDeps[key]) {                                                                               // 78\n        changed(self.keyValueDeps[key][oldSerializedValue]);                                                      // 79\n        changed(self.keyValueDeps[key][value]);                                                                   // 80\n      }                                                                                                           // 81\n    }                                                                                                             // 82\n  },                                                                                                              // 83\n  setDefault: function (keyOrObject, value) {                                                                     // 85\n    var self = this;                                                                                              // 86\n                                                                                                                  //\n    if ((typeof keyOrObject === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(keyOrObject)) === 'object' && value === undefined) {\n      // Called as `dict.setDefault({...})`                                                                       // 89\n      self._setDefaultObject(keyOrObject);                                                                        // 90\n                                                                                                                  //\n      return;                                                                                                     // 91\n    } // the input isn't an object, so it must be a key                                                           // 92\n    // and we resume with the rest of the function                                                                // 94\n                                                                                                                  //\n                                                                                                                  //\n    var key = keyOrObject;                                                                                        // 95\n                                                                                                                  //\n    if (!_.has(self.keys, key)) {                                                                                 // 97\n      self.set(key, value);                                                                                       // 98\n    }                                                                                                             // 99\n  },                                                                                                              // 100\n  get: function (key) {                                                                                           // 102\n    var self = this;                                                                                              // 103\n                                                                                                                  //\n    self._ensureKey(key);                                                                                         // 104\n                                                                                                                  //\n    self.keyDeps[key].depend();                                                                                   // 105\n    return parse(self.keys[key]);                                                                                 // 106\n  },                                                                                                              // 107\n  equals: function (key, value) {                                                                                 // 109\n    var self = this; // Mongo.ObjectID is in the 'mongo' package                                                  // 110\n                                                                                                                  //\n    var ObjectID = null;                                                                                          // 113\n                                                                                                                  //\n    if (Package.mongo) {                                                                                          // 114\n      ObjectID = Package.mongo.Mongo.ObjectID;                                                                    // 115\n    } // We don't allow objects (or arrays that might include objects) for                                        // 116\n    // .equals, because JSON.stringify doesn't canonicalize object key                                            // 119\n    // order. (We can make equals have the right return value by parsing the                                      // 120\n    // current value and using EJSON.equals, but we won't have a canonical                                        // 121\n    // element of keyValueDeps[key] to store the dependency.) You can still use                                   // 122\n    // \"EJSON.equals(reactiveDict.get(key), value)\".                                                              // 123\n    //                                                                                                            // 124\n    // XXX we could allow arrays as long as we recursively check that there                                       // 125\n    // are no objects                                                                                             // 126\n                                                                                                                  //\n                                                                                                                  //\n    if (typeof value !== 'string' && typeof value !== 'number' && typeof value !== 'boolean' && typeof value !== 'undefined' && !(value instanceof Date) && !(ObjectID && value instanceof ObjectID) && value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");                                               // 134\n    }                                                                                                             // 135\n                                                                                                                  //\n    var serializedValue = stringify(value);                                                                       // 136\n                                                                                                                  //\n    if (Tracker.active) {                                                                                         // 138\n      self._ensureKey(key);                                                                                       // 139\n                                                                                                                  //\n      if (!_.has(self.keyValueDeps[key], serializedValue)) self.keyValueDeps[key][serializedValue] = new Tracker.Dependency();\n      var isNew = self.keyValueDeps[key][serializedValue].depend();                                               // 144\n                                                                                                                  //\n      if (isNew) {                                                                                                // 145\n        Tracker.onInvalidate(function () {                                                                        // 146\n          // clean up [key][serializedValue] if it's now empty, so we don't                                       // 147\n          // use O(n) memory for n = values seen ever                                                             // 148\n          if (!self.keyValueDeps[key][serializedValue].hasDependents()) delete self.keyValueDeps[key][serializedValue];\n        });                                                                                                       // 151\n      }                                                                                                           // 152\n    }                                                                                                             // 153\n                                                                                                                  //\n    var oldValue = undefined;                                                                                     // 155\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);                                                  // 156\n    return EJSON.equals(oldValue, value);                                                                         // 157\n  },                                                                                                              // 158\n  all: function () {                                                                                              // 160\n    this.allDeps.depend();                                                                                        // 161\n    var ret = {};                                                                                                 // 162\n                                                                                                                  //\n    _.each(this.keys, function (value, key) {                                                                     // 163\n      ret[key] = parse(value);                                                                                    // 164\n    });                                                                                                           // 165\n                                                                                                                  //\n    return ret;                                                                                                   // 166\n  },                                                                                                              // 167\n  clear: function () {                                                                                            // 169\n    var self = this;                                                                                              // 170\n    var oldKeys = self.keys;                                                                                      // 172\n    self.keys = {};                                                                                               // 173\n    self.allDeps.changed();                                                                                       // 175\n                                                                                                                  //\n    _.each(oldKeys, function (value, key) {                                                                       // 177\n      changed(self.keyDeps[key]);                                                                                 // 178\n                                                                                                                  //\n      if (self.keyValueDeps[key]) {                                                                               // 179\n        changed(self.keyValueDeps[key][value]);                                                                   // 180\n        changed(self.keyValueDeps[key]['undefined']);                                                             // 181\n      }                                                                                                           // 182\n    });                                                                                                           // 183\n  },                                                                                                              // 185\n  \"delete\": function (key) {                                                                                      // 187\n    var self = this;                                                                                              // 188\n    var didRemove = false;                                                                                        // 189\n                                                                                                                  //\n    if (_.has(self.keys, key)) {                                                                                  // 191\n      var oldValue = self.keys[key];                                                                              // 192\n      delete self.keys[key];                                                                                      // 193\n      changed(self.keyDeps[key]);                                                                                 // 194\n                                                                                                                  //\n      if (self.keyValueDeps[key]) {                                                                               // 195\n        changed(self.keyValueDeps[key][oldValue]);                                                                // 196\n        changed(self.keyValueDeps[key]['undefined']);                                                             // 197\n      }                                                                                                           // 198\n                                                                                                                  //\n      self.allDeps.changed();                                                                                     // 199\n      didRemove = true;                                                                                           // 200\n    }                                                                                                             // 201\n                                                                                                                  //\n    return didRemove;                                                                                             // 203\n  },                                                                                                              // 204\n  _setObject: function (object) {                                                                                 // 206\n    var self = this;                                                                                              // 207\n                                                                                                                  //\n    _.each(object, function (value, key) {                                                                        // 209\n      self.set(key, value);                                                                                       // 210\n    });                                                                                                           // 211\n  },                                                                                                              // 212\n  _setDefaultObject: function (object) {                                                                          // 214\n    var self = this;                                                                                              // 215\n                                                                                                                  //\n    _.each(object, function (value, key) {                                                                        // 217\n      self.setDefault(key, value);                                                                                // 218\n    });                                                                                                           // 219\n  },                                                                                                              // 220\n  _ensureKey: function (key) {                                                                                    // 222\n    var self = this;                                                                                              // 223\n                                                                                                                  //\n    if (!(key in self.keyDeps)) {                                                                                 // 224\n      self.keyDeps[key] = new Tracker.Dependency();                                                               // 225\n      self.keyValueDeps[key] = {};                                                                                // 226\n    }                                                                                                             // 227\n  },                                                                                                              // 228\n  // Get a JSON value that can be passed to the constructor to                                                    // 230\n  // create a new ReactiveDict with the same contents as this one                                                 // 231\n  _getMigrationData: function () {                                                                                // 232\n    // XXX sanitize and make sure it's JSONible?                                                                  // 233\n    return this.keys;                                                                                             // 234\n  }                                                                                                               // 235\n});                                                                                                               // 47\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"migration.js\":function(){\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                //\n// packages/reactive-dict/migration.js                                                                            //\n//                                                                                                                //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                  //\nReactiveDict._migratedDictData = {}; // name -> data                                                              // 1\n                                                                                                                  //\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict                                                        // 2\n                                                                                                                  //\nReactiveDict._loadMigratedDict = function (dictName) {                                                            // 4\n  if (_.has(ReactiveDict._migratedDictData, dictName)) return ReactiveDict._migratedDictData[dictName];           // 5\n  return null;                                                                                                    // 8\n};                                                                                                                // 9\n                                                                                                                  //\nReactiveDict._registerDictForMigrate = function (dictName, dict) {                                                // 11\n  if (_.has(ReactiveDict._dictsToMigrate, dictName)) throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n  ReactiveDict._dictsToMigrate[dictName] = dict;                                                                  // 15\n};                                                                                                                // 16\n                                                                                                                  //\nif (Meteor.isClient && Package.reload) {                                                                          // 18\n  // Put old migrated data into ReactiveDict._migratedDictData,                                                   // 19\n  // where it can be accessed by ReactiveDict._loadMigratedDict.                                                  // 20\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');                                      // 21\n                                                                                                                  //\n  if (migrationData && migrationData.dicts) ReactiveDict._migratedDictData = migrationData.dicts; // On migration, assemble the data from all the dicts that have been\n  // registered.                                                                                                  // 26\n                                                                                                                  //\n  Package.reload.Reload._onMigrate('reactive-dict', function () {                                                 // 27\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;                                                            // 28\n    var dataToMigrate = {};                                                                                       // 29\n                                                                                                                  //\n    for (var dictName in meteorBabelHelpers.sanitizeForInObject(dictsToMigrate)) {                                // 31\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();                                     // 32\n    }                                                                                                             // 31\n                                                                                                                  //\n    return [true, {                                                                                               // 34\n      dicts: dataToMigrate                                                                                        // 34\n    }];                                                                                                           // 34\n  });                                                                                                             // 35\n}                                                                                                                 // 36\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./node_modules/meteor/reactive-dict/reactive-dict.js\");\nrequire(\"./node_modules/meteor/reactive-dict/migration.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['reactive-dict'] = {}, {\n  ReactiveDict: ReactiveDict\n});\n\n})();\n","servePath":"/packages/reactive-dict.js","sourceMap":{"version":3,"sources":["packages/reactive-dict/reactive-dict.js","packages/reactive-dict/migration.js"],"names":["stringify","value","undefined","EJSON","parse","serialized","changed","v","ReactiveDict","dictName","_registerDictForMigrate","keys","_loadMigratedDict","name","Object","entries","key","Error","allDeps","Tracker","Dependency","keyDeps","keyValueDeps","_","extend","prototype","set","keyOrObject","self","_setObject","keyExisted","has","oldSerializedValue","isNewValue","setDefault","_setDefaultObject","get","_ensureKey","depend","equals","ObjectID","Package","mongo","Mongo","Date","serializedValue","active","isNew","onInvalidate","hasDependents","oldValue","all","ret","each","clear","oldKeys","didRemove","object","_getMigrationData","_migratedDictData","_dictsToMigrate","dict","Meteor","isClient","reload","migrationData","Reload","_migrationData","dicts","_onMigrate","dictsToMigrate","dataToMigrate"],"mappings":"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","file":"/packages/reactive-dict.js","sourcesContent":["// XXX come up with a serialization method which canonicalizes object key\n// order, which would allow us to use objects as values for equals.\nvar stringify = function (value) {\n  if (value === undefined)\n    return 'undefined';\n  return EJSON.stringify(value);\n};\nvar parse = function (serialized) {\n  if (serialized === undefined || serialized === 'undefined')\n    return undefined;\n  return EJSON.parse(serialized);\n};\n\nvar changed = function (v) {\n  v && v.changed();\n};\n\n// XXX COMPAT WITH 0.9.1 : accept migrationData instead of dictName\nReactiveDict = function (dictName) {\n  // this.keys: key -> value\n  if (dictName) {\n    if (typeof dictName === 'string') {\n      // the normal case, argument is a string name.\n      // _registerDictForMigrate will throw an error on duplicate name.\n      ReactiveDict._registerDictForMigrate(dictName, this);\n      this.keys = ReactiveDict._loadMigratedDict(dictName) || {};\n      this.name = dictName;\n    } else if (typeof dictName === 'object') {\n      // back-compat case: dictName is actually migrationData\n      this.keys = {};\n      for (let [key, value] of Object.entries(dictName)) {\n        this.keys[key] = stringify(value);\n      }\n    } else {\n      throw new Error(\"Invalid ReactiveDict argument: \" + dictName);\n    }\n  } else {\n    // no name given; no migration will be performed\n    this.keys = {};\n  }\n\n  this.allDeps = new Tracker.Dependency;\n  this.keyDeps = {}; // key -> Dependency\n  this.keyValueDeps = {}; // key -> Dependency\n};\n\n_.extend(ReactiveDict.prototype, {\n  // set() began as a key/value method, but we are now overloading it\n  // to take an object of key/value pairs, similar to backbone\n  // http://backbonejs.org/#Model-set\n\n  set: function (keyOrObject, value) {\n    var self = this;\n\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.set({...})`\n      self._setObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    var key = keyOrObject;\n\n    value = stringify(value);\n\n    var keyExisted = _.has(self.keys, key);\n    var oldSerializedValue = keyExisted ? self.keys[key] : 'undefined';\n    var isNewValue = (value !== oldSerializedValue);\n\n    self.keys[key] = value;\n\n    if (isNewValue || !keyExisted) {\n      self.allDeps.changed();\n    }\n\n    if (isNewValue) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldSerializedValue]);\n        changed(self.keyValueDeps[key][value]);\n      }\n    }\n  },\n\n  setDefault: function (keyOrObject, value) {\n    var self = this;\n\n    if ((typeof keyOrObject === 'object') && (value === undefined)) {\n      // Called as `dict.setDefault({...})`\n      self._setDefaultObject(keyOrObject);\n      return;\n    }\n    // the input isn't an object, so it must be a key\n    // and we resume with the rest of the function\n    var key = keyOrObject;\n\n    if (! _.has(self.keys, key)) {\n      self.set(key, value);\n    }\n  },\n\n  get: function (key) {\n    var self = this;\n    self._ensureKey(key);\n    self.keyDeps[key].depend();\n    return parse(self.keys[key]);\n  },\n\n  equals: function (key, value) {\n    var self = this;\n\n    // Mongo.ObjectID is in the 'mongo' package\n    var ObjectID = null;\n    if (Package.mongo) {\n      ObjectID = Package.mongo.Mongo.ObjectID;\n    }\n\n    // We don't allow objects (or arrays that might include objects) for\n    // .equals, because JSON.stringify doesn't canonicalize object key\n    // order. (We can make equals have the right return value by parsing the\n    // current value and using EJSON.equals, but we won't have a canonical\n    // element of keyValueDeps[key] to store the dependency.) You can still use\n    // \"EJSON.equals(reactiveDict.get(key), value)\".\n    //\n    // XXX we could allow arrays as long as we recursively check that there\n    // are no objects\n    if (typeof value !== 'string' &&\n        typeof value !== 'number' &&\n        typeof value !== 'boolean' &&\n        typeof value !== 'undefined' &&\n        !(value instanceof Date) &&\n        !(ObjectID && value instanceof ObjectID) &&\n        value !== null) {\n      throw new Error(\"ReactiveDict.equals: value must be scalar\");\n    }\n    var serializedValue = stringify(value);\n\n    if (Tracker.active) {\n      self._ensureKey(key);\n\n      if (! _.has(self.keyValueDeps[key], serializedValue))\n        self.keyValueDeps[key][serializedValue] = new Tracker.Dependency;\n\n      var isNew = self.keyValueDeps[key][serializedValue].depend();\n      if (isNew) {\n        Tracker.onInvalidate(function () {\n          // clean up [key][serializedValue] if it's now empty, so we don't\n          // use O(n) memory for n = values seen ever\n          if (! self.keyValueDeps[key][serializedValue].hasDependents())\n            delete self.keyValueDeps[key][serializedValue];\n        });\n      }\n    }\n\n    var oldValue = undefined;\n    if (_.has(self.keys, key)) oldValue = parse(self.keys[key]);\n    return EJSON.equals(oldValue, value);\n  },\n\n  all: function() {\n    this.allDeps.depend();\n    var ret = {};\n    _.each(this.keys, function(value, key) {\n      ret[key] = parse(value);\n    });\n    return ret;\n  },\n\n  clear: function() {\n    var self = this;\n\n    var oldKeys = self.keys;\n    self.keys = {};\n\n    self.allDeps.changed();\n\n    _.each(oldKeys, function(value, key) {\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][value]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n    });\n\n  },\n\n  delete: function(key) {\n    var self = this;\n    var didRemove = false;\n\n    if (_.has(self.keys, key)) {\n      var oldValue = self.keys[key];\n      delete self.keys[key];\n      changed(self.keyDeps[key]);\n      if (self.keyValueDeps[key]) {\n        changed(self.keyValueDeps[key][oldValue]);\n        changed(self.keyValueDeps[key]['undefined']);\n      }\n      self.allDeps.changed();\n      didRemove = true;\n    }\n\n    return didRemove;\n  },\n\n  _setObject: function (object) {\n    var self = this;\n\n    _.each(object, function (value, key){\n      self.set(key, value);\n    });\n  },\n\n  _setDefaultObject: function (object) {\n    var self = this;\n\n    _.each(object, function (value, key){\n      self.setDefault(key, value);\n    });\n  },\n\n  _ensureKey: function (key) {\n    var self = this;\n    if (!(key in self.keyDeps)) {\n      self.keyDeps[key] = new Tracker.Dependency;\n      self.keyValueDeps[key] = {};\n    }\n  },\n\n  // Get a JSON value that can be passed to the constructor to\n  // create a new ReactiveDict with the same contents as this one\n  _getMigrationData: function () {\n    // XXX sanitize and make sure it's JSONible?\n    return this.keys;\n  }\n});\n","ReactiveDict._migratedDictData = {}; // name -> data\nReactiveDict._dictsToMigrate = {}; // name -> ReactiveDict\n\nReactiveDict._loadMigratedDict = function (dictName) {\n  if (_.has(ReactiveDict._migratedDictData, dictName))\n    return ReactiveDict._migratedDictData[dictName];\n\n  return null;\n};\n\nReactiveDict._registerDictForMigrate = function (dictName, dict) {\n  if (_.has(ReactiveDict._dictsToMigrate, dictName))\n    throw new Error(\"Duplicate ReactiveDict name: \" + dictName);\n\n  ReactiveDict._dictsToMigrate[dictName] = dict;\n};\n\nif (Meteor.isClient && Package.reload) {\n  // Put old migrated data into ReactiveDict._migratedDictData,\n  // where it can be accessed by ReactiveDict._loadMigratedDict.\n  var migrationData = Package.reload.Reload._migrationData('reactive-dict');\n  if (migrationData && migrationData.dicts)\n    ReactiveDict._migratedDictData = migrationData.dicts;\n\n  // On migration, assemble the data from all the dicts that have been\n  // registered.\n  Package.reload.Reload._onMigrate('reactive-dict', function () {\n    var dictsToMigrate = ReactiveDict._dictsToMigrate;\n    var dataToMigrate = {};\n\n    for (var dictName in dictsToMigrate)\n      dataToMigrate[dictName] = dictsToMigrate[dictName]._getMigrationData();\n\n    return [true, {dicts: dataToMigrate}];\n  });\n}\n"]}}]