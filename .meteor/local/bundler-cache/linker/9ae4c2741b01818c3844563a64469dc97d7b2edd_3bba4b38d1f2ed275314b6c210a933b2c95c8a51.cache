[{"type":"js","data":"/* Imports for global scope */\n\nMongoInternals = Package.mongo.MongoInternals;\nMongo = Package.mongo.Mongo;\nReactiveVar = Package['reactive-var'].ReactiveVar;\nTracker = Package.tracker.Tracker;\nDeps = Package.tracker.Deps;\nECMAScript = Package.ecmascript.ECMAScript;\nReactiveDict = Package['reactive-dict'].ReactiveDict;\nFlowRouter = Package['kadira:flow-router'].FlowRouter;\nBlazeLayout = Package['kadira:blaze-layout'].BlazeLayout;\nTwit = Package['schiller:twit'].Twit;\nAlgoliaSearch = Package['acemtp:algolia'].AlgoliaSearch;\nIsotope = Package['isotope:isotope'].Isotope;\nFlowRouterHelpers = Package['arillo:flow-router-helpers'].FlowRouterHelpers;\nServiceConfiguration = Package['service-configuration'].ServiceConfiguration;\n_ = Package.underscore._;\nRoles = Package['alanning:roles'].Roles;\nmoment = Package['momentjs:moment'].moment;\nHTTP = Package.http.HTTP;\nHTTPInternals = Package.http.HTTPInternals;\nTAPi18next = Package['tap:i18n'].TAPi18next;\nTAPi18n = Package['tap:i18n'].TAPi18n;\nMeteor = Package.meteor.Meteor;\nglobal = Package.meteor.global;\nmeteorEnv = Package.meteor.meteorEnv;\nWebApp = Package.webapp.WebApp;\nWebAppInternals = Package.webapp.WebAppInternals;\nmain = Package.webapp.main;\nDDP = Package['ddp-client'].DDP;\nDDPServer = Package['ddp-server'].DDPServer;\nLaunchScreen = Package['launch-screen'].LaunchScreen;\nBlaze = Package.ui.Blaze;\nUI = Package.ui.UI;\nHandlebars = Package.ui.Handlebars;\nSpacebars = Package.spacebars.Spacebars;\nmeteorInstall = Package.modules.meteorInstall;\nmeteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nPromise = Package.promise.Promise;\nFS = Package['cfs:base-package'].FS;\nActiveRoute = Package['zimme:active-route'].ActiveRoute;\nAccounts = Package['accounts-base'].Accounts;\nGoogle = Package['google-oauth'].Google;\nAutoupdate = Package.autoupdate.Autoupdate;\nHTML = Package.htmljs.HTML;\nSymbol = Package['ecmascript-runtime-server'].Symbol;\nMap = Package['ecmascript-runtime-server'].Map;\nSet = Package['ecmascript-runtime-server'].Set;\n\n","servePath":"/packages/global-imports.js"},{"type":"js","data":"var require = meteorInstall({\"imports\":{\"api\":{\"blogCategories\":{\"blogCategories.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/blogCategories/blogCategories.js                                                              //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({                                                                                              // 1\n    BlogCategories: function () {                                                                            // 1\n        return BlogCategories;                                                                               // 1\n    }                                                                                                        // 1\n});                                                                                                          // 1\nvar BlogCategories = new Mongo.Collection('blogcategories');                                                 // 4\n                                                                                                             //\nif (Meteor.isServer) {                                                                                       // 6\n    Meteor.publish('blogCategories', function () {                                                           // 7\n        function blogCategoriesPublication() {                                                               // 7\n            return BlogCategories.find({});                                                                  // 8\n        }                                                                                                    // 9\n                                                                                                             //\n        return blogCategoriesPublication;                                                                    // 7\n    }());                                                                                                    // 7\n}                                                                                                            // 10\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"categoriesMethods.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/blogCategories/categoriesMethods.js                                                           //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar BlogCategories = void 0;                                                                                 // 1\nmodule.watch(require(\"./blogCategories.js\"), {                                                               // 1\n    BlogCategories: function (v) {                                                                           // 1\n        BlogCategories = v;                                                                                  // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nMeteor.methods({                                                                                             // 6\n    'blogCategory.addNew': function (details) {                                                              // 7\n        var categoryInfo = {                                                                                 // 8\n            name: details.name,                                                                              // 9\n            description: details.description,                                                                // 10\n            imageId: details.imgId || null,                                                                  // 11\n            featured: details.featured || false,                                                             // 12\n            tracking: {                                                                                      // 13\n                numPost: 0,                                                                                  // 14\n                lastestPostIds: []                                                                           // 15\n            },                                                                                               // 13\n            createdDate: new Date(),                                                                         // 17\n            children: [],                                                                                    // 18\n            isSubCategory: false                                                                             // 19\n        };                                                                                                   // 8\n        BlogCategories.insert(categoryInfo);                                                                 // 21\n    },                                                                                                       // 22\n    'blogCategory.remove': function (query) {                                                                // 23\n        BlogCategories.remove({                                                                              // 24\n            _id: query                                                                                       // 24\n        });                                                                                                  // 24\n    },                                                                                                       // 25\n    'blogCategory.update': function (id, details) {                                                          // 26\n        var newCategory = {                                                                                  // 27\n            name: details.name,                                                                              // 28\n            description: details.description,                                                                // 29\n            imageId: details.imgId,                                                                          // 30\n            featured: details.featured,                                                                      // 31\n            tracking: {                                                                                      // 32\n                numPost: 0,                                                                                  // 33\n                lastestPostIds: []                                                                           // 34\n            },                                                                                               // 32\n            createdDate: new Date(),                                                                         // 36\n            children: [],                                                                                    // 37\n            isSubCategory: false                                                                             // 38\n        };                                                                                                   // 27\n        BlogCategories.update({                                                                              // 40\n            _id: id                                                                                          // 40\n        }, {                                                                                                 // 40\n            $set: newCategory                                                                                // 40\n        });                                                                                                  // 40\n    }                                                                                                        // 41\n});                                                                                                          // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"categories\":{\"categories.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/categories/categories.js                                                                      //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({                                                                                              // 1\n    Categories: function () {                                                                                // 1\n        return Categories;                                                                                   // 1\n    }                                                                                                        // 1\n});                                                                                                          // 1\nvar Categories = new Mongo.Collection('categories');                                                         // 4\n                                                                                                             //\nif (Meteor.isServer) {                                                                                       // 6\n    Meteor.publish('categories', function () {                                                               // 7\n        function categoriesPublication() {                                                                   // 7\n            return Categories.find({});                                                                      // 8\n        }                                                                                                    // 9\n                                                                                                             //\n        return categoriesPublication;                                                                        // 7\n    }());                                                                                                    // 7\n}                                                                                                            // 10\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"categoriesMethods.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/categories/categoriesMethods.js                                                               //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Categories = void 0;                                                                                     // 1\nmodule.watch(require(\"./categories.js\"), {                                                                   // 1\n    Categories: function (v) {                                                                               // 1\n        Categories = v;                                                                                      // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nMeteor.methods({                                                                                             // 6\n    'category.addNew': function (details) {                                                                  // 7\n        var categoryInfo = {                                                                                 // 8\n            name: details.name,                                                                              // 9\n            description: details.description,                                                                // 10\n            imageId: details.imgId || null,                                                                  // 11\n            featured: details.featured || false,                                                             // 12\n            tracking: {                                                                                      // 13\n                numPost: 0,                                                                                  // 14\n                lastestPostIds: []                                                                           // 15\n            },                                                                                               // 13\n            createdDate: new Date(),                                                                         // 17\n            children: [],                                                                                    // 18\n            isSubCategory: false                                                                             // 19\n        };                                                                                                   // 8\n        Categories.insert(categoryInfo);                                                                     // 21\n    },                                                                                                       // 22\n    'category.remove': function (query) {                                                                    // 23\n        Categories.remove({                                                                                  // 24\n            _id: query                                                                                       // 24\n        });                                                                                                  // 24\n    },                                                                                                       // 25\n    'category.update': function (id, details) {                                                              // 26\n        var newCategory = {                                                                                  // 27\n            name: details.name,                                                                              // 28\n            description: details.description,                                                                // 29\n            imageId: details.imgId,                                                                          // 30\n            featured: details.featured,                                                                      // 31\n            tracking: {                                                                                      // 32\n                numPost: 0,                                                                                  // 33\n                lastestPostIds: []                                                                           // 34\n            },                                                                                               // 32\n            createdDate: new Date(),                                                                         // 36\n            children: [],                                                                                    // 37\n            isSubCategory: false                                                                             // 38\n        };                                                                                                   // 27\n        Categories.update({                                                                                  // 40\n            _id: id                                                                                          // 40\n        }, {                                                                                                 // 40\n            $set: newCategory                                                                                // 40\n        });                                                                                                  // 40\n    }                                                                                                        // 41\n});                                                                                                          // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"drafts\":{\"draftMethods.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/drafts/draftMethods.js                                                                        //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Meteor = void 0;                                                                                         // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                     // 1\n    Meteor: function (v) {                                                                                   // 1\n        Meteor = v;                                                                                          // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nvar Drafts = void 0;                                                                                         // 1\nmodule.watch(require(\"./drafts.js\"), {                                                                       // 1\n    Drafts: function (v) {                                                                                   // 1\n        Drafts = v;                                                                                          // 1\n    }                                                                                                        // 1\n}, 1);                                                                                                       // 1\n                                                                                                             //\nif (Meteor.isServer) {                                                                                       // 4\n    Meteor.publish('drafts', function () {                                                                   // 5\n        function draftsPublication(limit) {                                                                  // 5\n            return Drafts.find({                                                                             // 6\n                'author': this.userId                                                                        // 7\n            }, {                                                                                             // 6\n                limit: limit                                                                                 // 9\n            });                                                                                              // 8\n        }                                                                                                    // 11\n                                                                                                             //\n        return draftsPublication;                                                                            // 5\n    }());                                                                                                    // 5\n}                                                                                                            // 12\n                                                                                                             //\nMeteor.methods({                                                                                             // 14\n    'drafts.postDraftTextImage': function (json) {                                                           // 15\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'announcementEditor'])) {                  // 16\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");                            // 17\n        } //adds draft to the Drafts collection                                                              // 18\n                                                                                                             //\n                                                                                                             //\n        Drafts.insert(json, function (err, content) {                                                        // 21\n            //error catch for algolia issues                                                                 // 22\n            if (err) {                                                                                       // 23\n                console.error(err);                                                                          // 24\n            }                                                                                                // 25\n        });                                                                                                  // 26\n    },                                                                                                       // 27\n    'drafts.postDraftText': function (json) {                                                                // 28\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'announcementEditor'])) {                  // 29\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");                            // 30\n        } //adds draft to the Drafts collection                                                              // 31\n                                                                                                             //\n                                                                                                             //\n        Drafts.insert(json, function (err, content) {                                                        // 34\n            //error catch for algolia issues                                                                 // 35\n            if (err) {                                                                                       // 36\n                console.error(err);                                                                          // 37\n            }                                                                                                // 38\n        });                                                                                                  // 39\n    },                                                                                                       // 40\n    'drafts.postDraftImage': function (json) {                                                               // 41\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'announcementEditor'])) {                  // 42\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");                            // 43\n        } //adds draft to the Drafts collection                                                              // 44\n                                                                                                             //\n                                                                                                             //\n        Drafts.insert(json, function (err, content) {                                                        // 47\n            //error catch for algolia issues                                                                 // 48\n            if (err) {                                                                                       // 49\n                console.error(err);                                                                          // 50\n            }                                                                                                // 51\n        });                                                                                                  // 52\n    },                                                                                                       // 53\n    'drafts.postDraftBlog': function (json) {                                                                // 54\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'announcementEditor'])) {                  // 55\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");                            // 56\n        } //adds draft to the Drafts collection                                                              // 57\n                                                                                                             //\n                                                                                                             //\n        Drafts.insert(json, function (err, content) {                                                        // 60\n            //error catch for algolia issues                                                                 // 61\n            if (err) {                                                                                       // 62\n                console.error(err);                                                                          // 63\n            }                                                                                                // 64\n        });                                                                                                  // 65\n    },                                                                                                       // 66\n    'drafts.remove': function (id) {                                                                         // 67\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'announcementEditor'])) {                  // 68\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");                            // 69\n        }                                                                                                    // 70\n                                                                                                             //\n        var draft = Drafts.findOne({                                                                         // 71\n            _id: id                                                                                          // 71\n        });                                                                                                  // 71\n                                                                                                             //\n        if (draft.author !== this.userId) {                                                                  // 72\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");                            // 73\n        }                                                                                                    // 74\n                                                                                                             //\n        return Drafts.remove({                                                                               // 75\n            _id: id                                                                                          // 75\n        });                                                                                                  // 75\n    }                                                                                                        // 76\n});                                                                                                          // 14\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"drafts.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/drafts/drafts.js                                                                              //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({                                                                                              // 1\n  Drafts: function () {                                                                                      // 1\n    return Drafts;                                                                                           // 1\n  }                                                                                                          // 1\n});                                                                                                          // 1\nvar Mongo = void 0;                                                                                          // 1\nmodule.watch(require(\"meteor/mongo\"), {                                                                      // 1\n  Mongo: function (v) {                                                                                      // 1\n    Mongo = v;                                                                                               // 1\n  }                                                                                                          // 1\n}, 0);                                                                                                       // 1\nvar Drafts = new Mongo.Collection('drafts');                                                                 // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"images\":{\"images.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/images/images.js                                                                              //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({                                                                                              // 1\n   Images: function () {                                                                                     // 1\n      return Images;                                                                                         // 1\n   }                                                                                                         // 1\n});                                                                                                          // 1\nvar imageStore = new FS.Store.GridFS(\"images\");                                                              // 1\nvar Images = new FS.Collection(\"images\", {                                                                   // 3\n   stores: [imageStore]                                                                                      // 4\n});                                                                                                          // 3\n//Set the permissions for Images collection                                                                  // 7\nImages.allow({                                                                                               // 8\n   insert: function () {                                                                                     // 9\n      return Roles.userIsInRole(this.userId, ['teacher', 'admin']);                                          // 10\n   },                                                                                                        // 11\n   update: function () {                                                                                     // 12\n      return Roles.userIsInRole(this.userId, ['teacher', 'admin']);                                          // 13\n   },                                                                                                        // 14\n   remove: function () {                                                                                     // 15\n      return Roles.userIsInRole(this.userId, ['teacher', 'admin']);                                          // 16\n   },                                                                                                        // 17\n   download: function () {                                                                                   // 18\n      return Roles.userIsInRole(this.userId, ['teacher', 'admin']);                                          // 19\n   }                                                                                                         // 20\n});                                                                                                          // 8\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"imagesMethods.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/images/imagesMethods.js                                                                       //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Images = void 0;                                                                                         // 1\nmodule.watch(require(\"./images.js\"), {                                                                       // 1\n   Images: function (v) {                                                                                    // 1\n      Images = v;                                                                                            // 1\n   }                                                                                                         // 1\n}, 0);                                                                                                       // 1\n                                                                                                             //\nif (Meteor.isServer) {                                                                                       // 3\n   Meteor.publish('images', function () {                                                                    // 4\n      function imagesPublication() {                                                                         // 4\n         return Images.find({}); //TODO only show drafts of current user                                     // 5\n      }                                                                                                      // 6\n                                                                                                             //\n      return imagesPublication;                                                                              // 4\n   }());                                                                                                     // 4\n}                                                                                                            // 7\n                                                                                                             //\nMeteor.methods({                                                                                             // 9\n   'images.insert': function (image, callback) {                                                             // 10\n      console.log(image);                                                                                    // 11\n      Images.insert(image, function (err, fileObj) {                                                         // 12\n         if (err) {                                                                                          // 13\n            callback(err, null);                                                                             // 14\n         } else {                                                                                            // 15\n            console.log('upload success');                                                                   // 16\n            callback(null, fileObj);                                                                         // 17\n         }                                                                                                   // 18\n      });                                                                                                    // 19\n   }                                                                                                         // 20\n});                                                                                                          // 9\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"organizations\":{\"clubs.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/organizations/clubs.js                                                                        //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({                                                                                              // 1\n    Clubs: function () {                                                                                     // 1\n        return Clubs;                                                                                        // 1\n    }                                                                                                        // 1\n});                                                                                                          // 1\nvar Clubs = new Mongo.Collection('clubs');                                                                   // 4\n                                                                                                             //\nif (Meteor.isServer) {                                                                                       // 6\n    Meteor.publish('allClubs', function () {                                                                 // 7\n        function clubsPublication(limit) {                                                                   // 7\n            return Clubs.find({}, {                                                                          // 8\n                limit: limit                                                                                 // 9\n            });                                                                                              // 8\n        }                                                                                                    // 11\n                                                                                                             //\n        return clubsPublication;                                                                             // 7\n    }());                                                                                                    // 7\n}                                                                                                            // 12\n                                                                                                             //\nClubs.allow({                                                                                                // 14\n    insert: function () {                                                                                    // 15\n        return true;                                                                                         // 16\n    },                                                                                                       // 17\n    update: function () {                                                                                    // 18\n        return true;                                                                                         // 19\n    },                                                                                                       // 20\n    remove: function () {                                                                                    // 21\n        return true;                                                                                         // 22\n    }                                                                                                        // 23\n});                                                                                                          // 14\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"clubsMethods.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/organizations/clubsMethods.js                                                                 //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Clubs = void 0;                                                                                          // 1\nmodule.watch(require(\"./clubs.js\"), {                                                                        // 1\n    Clubs: function (v) {                                                                                    // 1\n        Clubs = v;                                                                                           // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\n                                                                                                             //\nif (Meteor.isServer) {                                                                                       // 6\n    Meteor.methods({                                                                                         // 7\n        'clubs.add': function (json) {                                                                       // 8\n            if (!Roles.userIsInRole(this.userId, 'admin')) {                                                 // 9\n                throw Meteor.Error(403, \"Your account is not allowed to do so.\");                            // 10\n            }                                                                                                // 11\n                                                                                                             //\n            Clubs.insert(json);                                                                              // 12\n        },                                                                                                   // 13\n        'clubs.remove': function (id) {                                                                      // 14\n            if (!Roles.userIsInRole(this.userId, 'admin')) {                                                 // 15\n                throw Meteor.Error(403, \"Your account is not allowed to do so.\");                            // 16\n            }                                                                                                // 17\n                                                                                                             //\n            Clubs.remove(id);                                                                                // 18\n        }                                                                                                    // 19\n    });                                                                                                      // 7\n}                                                                                                            // 21\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"courses.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/organizations/courses.js                                                                      //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({                                                                                              // 1\n    Courses: function () {                                                                                   // 1\n        return Courses;                                                                                      // 1\n    }                                                                                                        // 1\n});                                                                                                          // 1\nvar Courses = new Mongo.Collection('courses');                                                               // 4\n                                                                                                             //\nif (Meteor.isServer) {                                                                                       // 6\n    Meteor.publish('allCourses', function () {                                                               // 7\n        function coursesPublication(limit) {                                                                 // 7\n            return Courses.find({}, {                                                                        // 8\n                limit: limit                                                                                 // 9\n            });                                                                                              // 8\n        }                                                                                                    // 11\n                                                                                                             //\n        return coursesPublication;                                                                           // 7\n    }());                                                                                                    // 7\n}                                                                                                            // 12\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"coursesMethods.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/organizations/coursesMethods.js                                                               //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Courses = void 0;                                                                                        // 1\nmodule.watch(require(\"./courses.js\"), {                                                                      // 1\n    Courses: function (v) {                                                                                  // 1\n        Courses = v;                                                                                         // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nMeteor.methods({                                                                                             // 7\n    'courses.addSeveral': function (names, codes) {                                                          // 8\n        var nameList = names.split('\\n');                                                                    // 9\n        var codeList = codes.split('\\n');                                                                    // 10\n        console.log(nameList.length);                                                                        // 11\n        console.log(codeList.length);                                                                        // 12\n                                                                                                             //\n        if (nameList.length !== codeList.length) {                                                           // 13\n            Meteor.Error(400, \"List not the same length\");                                                   // 14\n        }                                                                                                    // 15\n                                                                                                             //\n        for (var i = 0; i < nameList.length; i++) {                                                          // 16\n            var json = {                                                                                     // 17\n                name: nameList[i],                                                                           // 18\n                code: codeList[i],                                                                           // 19\n                description: \"\",                                                                             // 20\n                imgLink: null                                                                                // 21\n            };                                                                                               // 17\n            Courses.insert(json);                                                                            // 23\n        }                                                                                                    // 24\n    }                                                                                                        // 25\n});                                                                                                          // 7\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"posts\":{\"posts.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/posts/posts.js                                                                                //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({                                                                                              // 1\n  Posts: function () {                                                                                       // 1\n    return Posts;                                                                                            // 1\n  }                                                                                                          // 1\n});                                                                                                          // 1\nvar Mongo = void 0;                                                                                          // 1\nmodule.watch(require(\"meteor/mongo\"), {                                                                      // 1\n  Mongo: function (v) {                                                                                      // 1\n    Mongo = v;                                                                                               // 1\n  }                                                                                                          // 1\n}, 0);                                                                                                       // 1\nvar Posts = new Mongo.Collection('posts');                                                                   // 3\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"postsMethods.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/posts/postsMethods.js                                                                         //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Meteor = void 0;                                                                                         // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                     // 1\n    Meteor: function (v) {                                                                                   // 1\n        Meteor = v;                                                                                          // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nvar Posts = void 0;                                                                                          // 1\nmodule.watch(require(\"./posts.js\"), {                                                                        // 1\n    Posts: function (v) {                                                                                    // 1\n        Posts = v;                                                                                           // 1\n    }                                                                                                        // 1\n}, 1);                                                                                                       // 1\n                                                                                                             //\nif (Meteor.isServer) {                                                                                       // 4\n    Meteor.publish('posts', function () {                                                                    // 5\n        function postsPublication() {                                                                        // 5\n            if (this.userId) {                                                                               // 6\n                console.log(this.userId);                                                                    // 7\n                return Posts.find({});                                                                       // 8\n            }                                                                                                // 9\n        }                                                                                                    // 10\n                                                                                                             //\n        return postsPublication;                                                                             // 5\n    }());                                                                                                    // 5\n    Meteor.publish('announcements', function () {                                                            // 11\n        function announcementsPublication(limit) {                                                           // 11\n            var userLevel = '1';                                                                             // 12\n                                                                                                             //\n            if (Roles.userIsInRole(this.userId, 'student')) {                                                // 13\n                userLevel = '2';                                                                             // 14\n            } else if (Roles.userIsInRole(this.userId, ['teacher', 'admin'])) {                              // 15\n                userLevel = '3';                                                                             // 16\n            }                                                                                                // 17\n                                                                                                             //\n            return Posts.find({                                                                              // 18\n                'type': 'announcement',                                                                      // 19\n                'meta.approved': true,                                                                       // 20\n                $or: [{                                                                                      // 21\n                    'meta.visibility': '1'                                                                   // 22\n                }, {                                                                                         // 21\n                    'meta.visibility': userLevel                                                             // 24\n                }]                                                                                           // 23\n            }, {                                                                                             // 18\n                limit: limit                                                                                 // 27\n            });                                                                                              // 26\n        }                                                                                                    // 29\n                                                                                                             //\n        return announcementsPublication;                                                                     // 11\n    }());                                                                                                    // 11\n    Meteor.publish('blogs', function () {                                                                    // 30\n        function blogsPublication(limit) {                                                                   // 30\n            return Posts.find({                                                                              // 31\n                'type': 'blog'                                                                               // 32\n            }, {                                                                                             // 31\n                limit: limit                                                                                 // 34\n            });                                                                                              // 33\n        }                                                                                                    // 36\n                                                                                                             //\n        return blogsPublication;                                                                             // 30\n    }());                                                                                                    // 30\n    Meteor.publish('postsByCourse', function (code, limit) {                                                 // 37\n        return Posts.find({                                                                                  // 38\n            'type': 'blog',                                                                                  // 39\n            'organizationsValues': code                                                                      // 40\n        }, {                                                                                                 // 38\n            limit: limit                                                                                     // 42\n        });                                                                                                  // 41\n    });                                                                                                      // 44\n    Meteor.publish('postsByUser', function (limit) {                                                         // 45\n        return Posts.find({                                                                                  // 46\n            'author': this.userId                                                                            // 47\n        }, {                                                                                                 // 46\n            limit: limit                                                                                     // 49\n        });                                                                                                  // 48\n    });                                                                                                      // 51\n}                                                                                                            // 52\n                                                                                                             //\nMeteor.methods({                                                                                             // 54\n    'posts.removeAll': function () {                                                                         // 55\n        throw new Meteor.Error(403, \"No, just no.\"); //Posts.remove({});                                     // 56\n    },                                                                                                       // 58\n    'posts.postTextImage': function (json) {                                                                 // 59\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'announcementEditor'])) {                  // 60\n            throw new Meteor.Error(403, \"You do not have permission to execute the following action.\");      // 61\n        }                                                                                                    // 62\n                                                                                                             //\n        var errStr = \"\",                                                                                     // 63\n            err = false;                                                                                     // 63\n                                                                                                             //\n        if (json.type !== \"announcement\") {                                                                  // 64\n            err = true;                                                                                      // 65\n            errStr += \"Not an announcement. \";                                                               // 66\n        }                                                                                                    // 67\n                                                                                                             //\n        if (json.subType !== \"imageText\") {                                                                  // 68\n            err = true;                                                                                      // 69\n            errStr += \"Not correct announcement type. \";                                                     // 70\n        }                                                                                                    // 71\n                                                                                                             //\n        if (!json.headline) {                                                                                // 72\n            err = true;                                                                                      // 73\n            errStr += \"Missing headline. \";                                                                  // 74\n        }                                                                                                    // 75\n                                                                                                             //\n        if (!json.content) {                                                                                 // 76\n            err = true;                                                                                      // 77\n            errStr += \"Missing content. \";                                                                   // 78\n        }                                                                                                    // 79\n                                                                                                             //\n        console.log(json.imgId);                                                                             // 80\n                                                                                                             //\n        if (!json.imgId) {                                                                                   // 81\n            err = true;                                                                                      // 82\n            errStr += \"Missing image. \";                                                                     // 83\n        }                                                                                                    // 84\n                                                                                                             //\n        var sDate = new Date(json.startDate),                                                                // 85\n            eDate = new Date(json.endDate),                                                                  // 85\n            currentDate = new Date();                                                                        // 85\n                                                                                                             //\n        if (sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()) {\n            err = true;                                                                                      // 89\n            errStr = \"Your date selection is illegal. \";                                                     // 90\n        }                                                                                                    // 91\n                                                                                                             //\n        if (err) {                                                                                           // 92\n            throw new Meteor.Error(400, errStr);                                                             // 93\n        }                                                                                                    // 94\n                                                                                                             //\n        json.meta.approved = false;                                                                          // 95\n        json.meta.screeningStage = 0;                                                                        // 96\n        json.meta.display = false; //adds draft to the Posts collection                                      // 97\n                                                                                                             //\n        Posts.insert(json, function (err, content) {                                                         // 100\n            //error catch for algolia issues                                                                 // 101\n            if (err) {                                                                                       // 102\n                console.error(err);                                                                          // 103\n            }                                                                                                // 104\n        });                                                                                                  // 105\n    },                                                                                                       // 107\n    'posts.postText': function (json) {                                                                      // 108\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'announcementEditor'])) {                  // 109\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");                            // 110\n        }                                                                                                    // 111\n                                                                                                             //\n        var errStr = \"\",                                                                                     // 113\n            err = false;                                                                                     // 113\n                                                                                                             //\n        if (json.type !== \"announcement\") {                                                                  // 114\n            err = true;                                                                                      // 115\n            errStr += \"Not an announcement. \";                                                               // 116\n        }                                                                                                    // 117\n                                                                                                             //\n        if (json.subType !== \"textOnly\") {                                                                   // 118\n            err = true;                                                                                      // 119\n            errStr += \"Not correct announcement type. \";                                                     // 120\n        }                                                                                                    // 121\n                                                                                                             //\n        if (!json.headline) {                                                                                // 122\n            err = true;                                                                                      // 123\n            errStr += \"Missing headline. \";                                                                  // 124\n        }                                                                                                    // 125\n                                                                                                             //\n        if (!json.content) {                                                                                 // 126\n            err = true;                                                                                      // 127\n            errStr += \"Missing content. \";                                                                   // 128\n        }                                                                                                    // 129\n                                                                                                             //\n        var sDate = new Date(json.startDate),                                                                // 130\n            eDate = new Date(json.endDate),                                                                  // 130\n            currentDate = new Date();                                                                        // 130\n                                                                                                             //\n        if (sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()) {\n            err = true;                                                                                      // 134\n            errStr = \"Your date selection is illegal. \";                                                     // 135\n        }                                                                                                    // 136\n                                                                                                             //\n        if (err) {                                                                                           // 137\n            throw new Meteor.Error(400, errStr);                                                             // 138\n        }                                                                                                    // 139\n                                                                                                             //\n        json.meta.approved = false;                                                                          // 141\n        json.meta.screeningStage = 0;                                                                        // 142\n        json.meta.display = false; //adds draft to the Posts collection                                      // 143\n                                                                                                             //\n        Posts.insert(json, function (err, content) {                                                         // 146\n            //error catch for algolia issues                                                                 // 147\n            if (err) {                                                                                       // 148\n                console.error(err);                                                                          // 149\n            }                                                                                                // 150\n        });                                                                                                  // 151\n    },                                                                                                       // 152\n    'posts.postImage': function (json) {                                                                     // 153\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'announcementEditor'])) {                  // 154\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");                            // 155\n        }                                                                                                    // 156\n                                                                                                             //\n        var errStr = \"\",                                                                                     // 158\n            err = false;                                                                                     // 158\n                                                                                                             //\n        if (json.type !== \"announcement\") {                                                                  // 159\n            err = true;                                                                                      // 160\n            errStr += \"Not an announcement. \";                                                               // 161\n        }                                                                                                    // 162\n                                                                                                             //\n        if (json.subType !== \"imageOnly\") {                                                                  // 163\n            err = true;                                                                                      // 164\n            errStr += \"Not correct announcement type. \";                                                     // 165\n        }                                                                                                    // 166\n                                                                                                             //\n        console.log(json.headline);                                                                          // 167\n                                                                                                             //\n        if (!json.headline) {                                                                                // 168\n            err = true;                                                                                      // 169\n            errStr += \"Missing headline. \";                                                                  // 170\n        }                                                                                                    // 171\n                                                                                                             //\n        if (!json.imgId) {                                                                                   // 172\n            err = true;                                                                                      // 173\n            errStr += \"Missing image. \";                                                                     // 174\n        }                                                                                                    // 175\n                                                                                                             //\n        var sDate = new Date(json.startDate),                                                                // 176\n            eDate = new Date(json.endDate),                                                                  // 176\n            currentDate = new Date();                                                                        // 176\n                                                                                                             //\n        if (sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()) {\n            err = true;                                                                                      // 180\n            errStr = \"Your date selection is illegal. \";                                                     // 181\n        }                                                                                                    // 182\n                                                                                                             //\n        if (err) {                                                                                           // 183\n            throw new Meteor.Error(400, errStr);                                                             // 184\n        }                                                                                                    // 185\n                                                                                                             //\n        json.meta.approved = false;                                                                          // 187\n        json.meta.screeningStage = 0;                                                                        // 188\n        json.meta.display = false; //adds draft to the Posts collection                                      // 189\n                                                                                                             //\n        Posts.insert(json, function (err, content) {                                                         // 192\n            //error catch for algolia issues                                                                 // 193\n            if (err) {                                                                                       // 194\n                console.error(err);                                                                          // 195\n            }                                                                                                // 196\n        });                                                                                                  // 197\n    },                                                                                                       // 198\n    'posts.postBlog': function (json) {                                                                      // 199\n        if (!Roles.userIsInRole(this.userId, ['teacher', 'admin', 'blogEditor'])) {                          // 200\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 201\n        }                                                                                                    // 202\n                                                                                                             //\n        var errStr = \"\",                                                                                     // 204\n            err = false;                                                                                     // 204\n                                                                                                             //\n        if (json.type !== \"blog\") {                                                                          // 205\n            err = true;                                                                                      // 206\n            errStr += \"Not a blog. \";                                                                        // 207\n        }                                                                                                    // 208\n                                                                                                             //\n        if (!json.title) {                                                                                   // 209\n            err = true;                                                                                      // 210\n            errStr += \"Missing title. \";                                                                     // 211\n        }                                                                                                    // 212\n                                                                                                             //\n        if (!json.subtitle) {                                                                                // 213\n            err = true;                                                                                      // 214\n            errStr += \"Missing subtitle. \";                                                                  // 215\n        }                                                                                                    // 216\n                                                                                                             //\n        if (!json.content) {                                                                                 // 217\n            err = true;                                                                                      // 218\n            errStr += \"Missing content. \";                                                                   // 219\n        }                                                                                                    // 220\n                                                                                                             //\n        if (!json.imgId) {                                                                                   // 221\n            err = true;                                                                                      // 222\n            errStr += \"Missing image. \";                                                                     // 223\n        }                                                                                                    // 224\n                                                                                                             //\n        var sDate = new Date(json.releaseDate),                                                              // 225\n            currentDate = new Date();                                                                        // 225\n                                                                                                             //\n        if (sDate < currentDate) {                                                                           // 227\n            err = true;                                                                                      // 228\n            errStr = \"Your date selection is illegal. \";                                                     // 229\n        }                                                                                                    // 230\n                                                                                                             //\n        if (err) {                                                                                           // 231\n            throw new Meteor.Error(400, errStr);                                                             // 232\n        }                                                                                                    // 233\n                                                                                                             //\n        json.meta.approved = false;                                                                          // 235\n        json.meta.screeningStage = 0;                                                                        // 236\n        json.meta.display = false; //adds draft to the Posts collection                                      // 237\n                                                                                                             //\n        Posts.insert(json, function (err, content) {                                                         // 240\n            //error catch for algolia issues                                                                 // 241\n            if (err) {                                                                                       // 242\n                console.error(err);                                                                          // 243\n            }                                                                                                // 244\n        });                                                                                                  // 245\n    },                                                                                                       // 246\n    'posts.getPostById': function (id) {                                                                     // 247\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 251\n        }                                                                                                    // 252\n                                                                                                             //\n        return Posts.findOne({                                                                               // 253\n            '_id': id                                                                                        // 253\n        });                                                                                                  // 253\n    },                                                                                                       // 254\n    'posts.getDisplayPosts': function () {                                                                   // 255\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 259\n        }                                                                                                    // 260\n                                                                                                             //\n        return Posts.find({                                                                                  // 262\n            'meta.approved': true,                                                                           // 262\n            'display': true                                                                                  // 262\n        }).fetch();                                                                                          // 262\n    },                                                                                                       // 263\n    'posts.getUnapprovedPosts': function () {                                                                // 264\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 268\n        }                                                                                                    // 269\n                                                                                                             //\n        return Posts.find({                                                                                  // 271\n            'meta.approved': false,                                                                          // 271\n            'meta.screeningStage': {                                                                         // 271\n                $ne: -1                                                                                      // 271\n            }                                                                                                // 271\n        }).fetch();                                                                                          // 271\n    },                                                                                                       // 272\n    'posts.getApprovedPosts': function () {                                                                  // 273\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 277\n        }                                                                                                    // 278\n                                                                                                             //\n        return Posts.find({                                                                                  // 280\n            'meta.approved': true,                                                                           // 280\n            'meta.screeningStage': 3                                                                         // 280\n        }).fetch();                                                                                          // 280\n    },                                                                                                       // 281\n    'posts.getRejectedPosts': function () {                                                                  // 282\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 286\n        }                                                                                                    // 287\n                                                                                                             //\n        return Posts.find({                                                                                  // 289\n            'meta.approved': false,                                                                          // 289\n            'meta.screeningStage': -1                                                                        // 289\n        }).fetch();                                                                                          // 289\n    },                                                                                                       // 290\n    'posts.getPostsByUserId': function (userId) {                                                            // 291\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 295\n        }                                                                                                    // 296\n                                                                                                             //\n        return Posts.find({                                                                                  // 298\n            'authorId': userId                                                                               // 298\n        }).fetch();                                                                                          // 298\n    },                                                                                                       // 299\n    'posts.removePost': function (postId) {                                                                  // 300\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 304\n        }                                                                                                    // 305\n                                                                                                             //\n        Posts.remove({                                                                                       // 307\n            _id: postId                                                                                      // 307\n        });                                                                                                  // 307\n    },                                                                                                       // 308\n    'posts.approvePost': function (postId) {                                                                 // 309\n        if (!Roles.userIsInRole(this.userId, ['admin'])) {                                                   // 310\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 311\n        }                                                                                                    // 312\n                                                                                                             //\n        Posts.update({                                                                                       // 314\n            '_id': postId                                                                                    // 314\n        }, {                                                                                                 // 314\n            $set: {                                                                                          // 314\n                'meta.approved': true,                                                                       // 314\n                'meta.screeningStage': 3                                                                     // 314\n            }                                                                                                // 314\n        }, function (err, response) {                                                                        // 314\n            if (err) {                                                                                       // 315\n                console.log(err);                                                                            // 316\n            } else {                                                                                         // 317\n                var obj = Posts.findOne({                                                                    // 318\n                    '_id': postId                                                                            // 318\n                });                                                                                          // 318\n                var type = obj.type,                                                                         // 319\n                    subType = obj.subType;                                                                   // 319\n                Meteor.call('scheduleAnnouncement', postId, function (err) {                                 // 321\n                    if (err) {                                                                               // 322\n                        console.log(err);                                                                    // 323\n                    }                                                                                        // 324\n                });                                                                                          // 325\n                                                                                                             //\n                if (type === 'announcement') {                                                               // 326\n                    if (subType === 'textOnly') {                                                            // 327\n                        Meteor.call('postTextAlgolia', postId);                                              // 328\n                    } else if (subType === 'imageOnly') {                                                    // 329\n                        Meteor.call('postImageAlgolia', postId);                                             // 330\n                    } else {                                                                                 // 331\n                        Meteor.call('postTextImageAlgolia', postId);                                         // 332\n                    }                                                                                        // 333\n                } else {                                                                                     // 334\n                    Meteor.call('postBlogAlgolia', postId);                                                  // 335\n                } //Post on twitter                                                                          // 336\n                                                                                                             //\n                                                                                                             //\n                Meteor.call('setupTwitterAPI', function (err, response) {                                    // 339\n                    if (err) {                                                                               // 340\n                        console.log(err);                                                                    // 341\n                    } else {                                                                                 // 342\n                        if (type === 'announcement') {                                                       // 344\n                            if (subType === 'textOnly') {                                                    // 345\n                                Meteor.call('postTextAnnouncementTwitter', obj, function (err) {             // 346\n                                    if (err) {                                                               // 347\n                                        console.log(err);                                                    // 348\n                                    }                                                                        // 349\n                                });                                                                          // 350\n                            } else if (subType === 'imageOnly') {                                            // 351\n                                Meteor.call('postImageAnnouncementTwitter', obj, function (err) {            // 352\n                                    if (err) {                                                               // 353\n                                        console.log(err);                                                    // 354\n                                    }                                                                        // 355\n                                });                                                                          // 356\n                            } else {                                                                         // 357\n                                Meteor.call('postTextImageAnnouncementTwitter', obj, function (err) {        // 358\n                                    if (err) {                                                               // 359\n                                        console.log(err);                                                    // 360\n                                    }                                                                        // 361\n                                });                                                                          // 362\n                            }                                                                                // 363\n                        } else {                                                                             // 364\n                            console.log('This post is not announcement');                                    // 365\n                            return -1;                                                                       // 366\n                        }                                                                                    // 367\n                    }                                                                                        // 368\n                });                                                                                          // 369\n            }                                                                                                // 370\n        });                                                                                                  // 371\n    },                                                                                                       // 372\n    'posts.unApprovePost': function (postId) {                                                               // 373\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 377\n        }                                                                                                    // 378\n                                                                                                             //\n        Posts.findOneAndUpdate({                                                                             // 380\n            '_id': postId                                                                                    // 380\n        }, {                                                                                                 // 380\n            $set: {                                                                                          // 380\n                'meta.approved': false,                                                                      // 380\n                'meta.screeningStage': 0,                                                                    // 380\n                'display': false                                                                             // 380\n            }                                                                                                // 380\n        });                                                                                                  // 380\n    },                                                                                                       // 381\n    'posts.rejectPost': function (postId, reason) {                                                          // 382\n        if (!Roles.userIsInRole(this.userId, ['admin'])) {                                                   // 383\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 384\n        }                                                                                                    // 385\n                                                                                                             //\n        Posts.update({                                                                                       // 386\n            '_id': postId                                                                                    // 386\n        }, {                                                                                                 // 386\n            $set: {                                                                                          // 386\n                'meta.screeningStage': -1,                                                                   // 386\n                'meta.rejectedReason': reason                                                                // 386\n            }                                                                                                // 386\n        });                                                                                                  // 386\n    },                                                                                                       // 387\n    'posts.unRejectPost': function (postId) {                                                                // 388\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 392\n        }                                                                                                    // 393\n                                                                                                             //\n        Posts.findOneAndUpdate({                                                                             // 395\n            '_id': postId                                                                                    // 395\n        }, {                                                                                                 // 395\n            $set: {                                                                                          // 395\n                'meta.screeningStage': 0                                                                     // 395\n            }                                                                                                // 395\n        });                                                                                                  // 395\n    }                                                                                                        // 396\n});                                                                                                          // 54\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"suggestions\":{\"suggestionMethods.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/suggestions/suggestionMethods.js                                                              //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Suggestions = void 0;                                                                                    // 1\nmodule.watch(require(\"./suggestions.js\"), {                                                                  // 1\n    Suggestions: function (v) {                                                                              // 1\n        Suggestions = v;                                                                                     // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nMeteor.methods({                                                                                             // 3\n    'suggestions.postSuggestion': function (json) {                                                          // 4\n        var accessLevel = Meteor.users.find({                                                                // 5\n            _id: Meteor.userId()                                                                             // 5\n        }).accessLevel;                                                                                      // 5\n                                                                                                             //\n        if (accessLevel === 'teacher' || accessLevel === 'admin') {//TODO                                    // 6\n        }                                                                                                    // 8\n                                                                                                             //\n        var errStr = \"\",                                                                                     // 9\n            err = false;                                                                                     // 9\n                                                                                                             //\n        if (json.type !== \"suggestion\") {                                                                    // 10\n            err = true;                                                                                      // 11\n            errStr += \"Not an announcement. \";                                                               // 12\n        }                                                                                                    // 13\n                                                                                                             //\n        if (!json.headline) {                                                                                // 14\n            err = true;                                                                                      // 15\n            errStr += \"Missing headline. \";                                                                  // 16\n        }                                                                                                    // 17\n                                                                                                             //\n        if (!json.content) {                                                                                 // 18\n            err = true;                                                                                      // 19\n            errStr += \"Missing content. \";                                                                   // 20\n        }                                                                                                    // 21\n                                                                                                             //\n        if (err) {                                                                                           // 22\n            throw new Meteor.Error(400, errStr);                                                             // 23\n        } //adds draft to the Posts collection                                                               // 24\n                                                                                                             //\n                                                                                                             //\n        Suggestions.insert(json, function (err, content) {                                                   // 27\n            //error catch for algolia issues                                                                 // 28\n            if (err) {                                                                                       // 29\n                console.error(err);                                                                          // 30\n            }                                                                                                // 31\n        });                                                                                                  // 32\n    },                                                                                                       // 34\n    'suggestions.getSuggestions': function () {                                                              // 35\n        return Suggestions.find();                                                                           // 36\n    },                                                                                                       // 37\n    'suggestions.removeSuggestions': function (id) {                                                         // 38\n        return Suggestions.remove({                                                                          // 39\n            '_id': id                                                                                        // 39\n        });                                                                                                  // 39\n    }                                                                                                        // 40\n});                                                                                                          // 3\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"suggestions.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/api/suggestions/suggestions.js                                                                    //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.export({                                                                                              // 1\n    Suggestions: function () {                                                                               // 1\n        return Suggestions;                                                                                  // 1\n    }                                                                                                        // 1\n});                                                                                                          // 1\nvar Mongo = void 0;                                                                                          // 1\nmodule.watch(require(\"meteor/mongo\"), {                                                                      // 1\n    Mongo: function (v) {                                                                                    // 1\n        Mongo = v;                                                                                           // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nvar Suggestions = new Mongo.Collection('suggestions');                                                       // 3\n                                                                                                             //\nif (Meteor.isServer) {                                                                                       // 5\n    Meteor.publish('suggestions', function () {                                                              // 6\n        function suggestionsPublication() {                                                                  // 6\n            if (this.userId) {                                                                               // 7\n                return Suggestions.find({});                                                                 // 8\n            }                                                                                                // 9\n        }                                                                                                    // 10\n                                                                                                             //\n        return suggestionsPublication;                                                                       // 6\n    }());                                                                                                    // 6\n}                                                                                                            // 11\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"startup\":{\"server\":{\"accounts.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/accounts.js                                                                        //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Meteor = void 0;                                                                                         // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                     // 1\n    Meteor: function (v) {                                                                                   // 1\n        Meteor = v;                                                                                          // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nvar Banned = new Mongo.Collection('blacklist');                                                              // 3\nMeteor.users.allow({                                                                                         // 5\n    update: function () {                                                                                    // 6\n        return true;                                                                                         // 7\n    },                                                                                                       // 8\n    remove: function () {                                                                                    // 9\n        return true;                                                                                         // 10\n    }                                                                                                        // 11\n});                                                                                                          // 5\n                                                                                                             //\nif (Meteor.isServer) {                                                                                       // 14\n    Meteor.publish('allUsers', function () {                                                                 // 15\n        function usersPublication() {                                                                        // 15\n            return Meteor.users.find({});                                                                    // 16\n        }                                                                                                    // 17\n                                                                                                             //\n        return usersPublication;                                                                             // 15\n    }());                                                                                                    // 15\n    Meteor.publish('theUser', function () {                                                                  // 18\n        function theUserPublication() {                                                                      // 18\n            return Meteor.users.find({                                                                       // 19\n                _id: this.userId                                                                             // 19\n            });                                                                                              // 19\n        }                                                                                                    // 20\n                                                                                                             //\n        return theUserPublication;                                                                           // 18\n    }());                                                                                                    // 18\n    Meteor.publish('allUsersLite', function () {                                                             // 21\n        function usersLitePublication() {                                                                    // 21\n            return Meteor.users.find({}, {                                                                   // 22\n                'services.google.picture': 1,                                                                // 23\n                'services.google.name': 1                                                                    // 24\n            });                                                                                              // 22\n        }                                                                                                    // 26\n                                                                                                             //\n        return usersLitePublication;                                                                         // 21\n    }());                                                                                                    // 21\n}                                                                                                            // 27\n                                                                                                             //\nAccounts.validateNewUser(function (user) {                                                                   // 29\n    var email = user.services.google.email;                                                                  // 30\n                                                                                                             //\n    if (email.indexOf(\"gapps.yrdsb.ca\") !== -1) {                                                            // 31\n        //check for teacher or student                                                                       // 32\n        return true;                                                                                         // 33\n    } else {                                                                                                 // 35\n        console.log('not gapps yrdsb account');                                                              // 36\n        throw new Meteor.Error(403, \"Currently uhs.life is only available to YRDSB GAPPS users, stay tuned for parental support!\");\n    }                                                                                                        // 38\n});                                                                                                          // 39\nAccounts.onCreateUser(function (options, user) {                                                             // 41\n    if (!user.profile) {                                                                                     // 42\n        user.profile = {                                                                                     // 43\n            init: false,                                                                                     // 44\n            teacher: false                                                                                   // 45\n        };                                                                                                   // 43\n        user.private = {                                                                                     // 47\n            courses: null,                                                                                   // 48\n            token: null                                                                                      // 49\n        };                                                                                                   // 47\n    }                                                                                                        // 51\n                                                                                                             //\n    var email = user.services.google.email;                                                                  // 52\n    var hasNumbers = email.match(/\\d+/g);                                                                    // 53\n                                                                                                             //\n    if (!hasNumbers) {                                                                                       // 54\n        user.profile.teacher = true;                                                                         // 55\n    }                                                                                                        // 56\n                                                                                                             //\n    return user;                                                                                             // 57\n});                                                                                                          // 58\nAccounts.validateLoginAttempt(function (info) {                                                              // 59\n    var status = true;                                                                                       // 60\n                                                                                                             //\n    try {                                                                                                    // 61\n        status = !Roles.userIsInRole(info.user._id, 'banned');                                               // 62\n    } catch (e) {                                                                                            // 63\n        status = true;                                                                                       // 64\n    }                                                                                                        // 65\n                                                                                                             //\n    console.log(status);                                                                                     // 66\n                                                                                                             //\n    if (!status) {                                                                                           // 67\n        throw new Meteor.Error(403, \"Sorry you have been banned from uhs.life by the administration for the following reason: \");\n    }                                                                                                        // 69\n                                                                                                             //\n    return true;                                                                                             // 70\n});                                                                                                          // 71\nMeteor.methods({                                                                                             // 72\n    'initUserProfile': function (id, info) {                                                                 // 73\n        Meteor.users.update({                                                                                // 74\n            _id: id                                                                                          // 74\n        }, {                                                                                                 // 74\n            $set: {                                                                                          // 74\n                \"profile.init\": true                                                                         // 74\n            }                                                                                                // 74\n        });                                                                                                  // 74\n        Meteor.users.update({                                                                                // 75\n            _id: id                                                                                          // 75\n        }, {                                                                                                 // 75\n            $set: {                                                                                          // 75\n                \"profile.terms\": true                                                                        // 75\n            }                                                                                                // 75\n        });                                                                                                  // 75\n    },                                                                                                       // 76\n    'addUserToRole': function (userId, roles) {                                                              // 77\n        Roles.setUserRoles(userId, roles);                                                                   // 78\n    },                                                                                                       // 79\n    'accounts.setPersonalEmail': function (email) {                                                          // 80\n        Meteor.users.update({                                                                                // 81\n            _id: this.userId                                                                                 // 81\n        }, {                                                                                                 // 81\n            $set: {                                                                                          // 81\n                \"profile.email\": email                                                                       // 81\n            }                                                                                                // 81\n        });                                                                                                  // 81\n    },                                                                                                       // 82\n    'accounts.initRoles': function () {                                                                      // 83\n        var user = Meteor.users.findOne({                                                                    // 84\n            _id: this.userId                                                                                 // 84\n        });                                                                                                  // 84\n        var email = user.services.google.email;                                                              // 85\n        var hasNumbers = email.match(/\\d+/g);                                                                // 86\n                                                                                                             //\n        if (hasNumbers) {                                                                                    // 87\n            Roles.addUsersToRoles(this.userId, ['student']);                                                 // 88\n        } else {                                                                                             // 89\n            Roles.addUsersToRoles(this.userId, ['teacher']);                                                 // 90\n        }                                                                                                    // 91\n    },                                                                                                       // 92\n    'accounts.ban': function (id, reason) {                                                                  // 93\n        if (!Roles.userIsInRole(this.userId, 'admin')) {                                                     // 94\n            throw new Meteor.Error(403, \"You do not have the power to ban a user.\");                         // 95\n        }                                                                                                    // 96\n                                                                                                             //\n        Meteor.users.update({                                                                                // 97\n            _id: id                                                                                          // 97\n        }, {                                                                                                 // 97\n            $set: {                                                                                          // 97\n                'private.bannedReason': reason                                                               // 97\n            }                                                                                                // 97\n        });                                                                                                  // 97\n        Roles.addUsersToRoles(id, 'banned');                                                                 // 98\n    }                                                                                                        // 99\n});                                                                                                          // 72\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"algoliaPost.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/algoliaPost.js                                                                     //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Posts = void 0;                                                                                          // 1\nmodule.watch(require(\"../../api/posts/posts.js\"), {                                                          // 1\n    Posts: function (v) {                                                                                    // 1\n        Posts = v;                                                                                           // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\n//Server side method to be called from client to post announcement                                           // 1\n// api key that connects the client side to Algolia's server                                                 // 3\nvar client = AlgoliaSearch(\"GJDCY9DKEW\", \"31f60dc3cc7926270934909c81f867ee\"); // select indice (collection) of data to be accesed. In this case it would be the announcements\n                                                                                                             //\nvar index = client.initIndex('announcement');                                                                // 7\nindex.setSettings({                                                                                          // 9\n    searchableAttributes: ['headline', 'content', 'type', 'tags', 'categories', 'subType']                   // 10\n});                                                                                                          // 9\nMeteor.methods({                                                                                             // 22\n    /**                                                                                                      // 23\n    @params title : string; text: string; fileType: string; textFirst: boolean                               //\n    **/'postTextImageAlgolia': function (postId) {                                                           //\n        var json = Posts.findOne({                                                                           // 27\n            '_id': postId                                                                                    // 27\n        });                                                                                                  // 27\n        var newJson = {                                                                                      // 29\n            type: json.type,                                                                                 // 30\n            subType: json.subType,                                                                           // 31\n            headline: json.headline,                                                                         // 32\n            content: json.content,                                                                           // 33\n            tags: json.tags,                                                                                 // 34\n            categories: json.categories,                                                                     // 35\n            imgId: json.imgId //adds object to the indice announcement                                       // 36\n                                                                                                             //\n        };                                                                                                   // 29\n        index.addObject(newJson, Meteor.bindEnvironment(function (err, content) {                            // 39\n            //error catch for algolia issues                                                                 // 41\n            if (err) {                                                                                       // 42\n                console.error('Algolia returned an error', err);                                             // 43\n            } else {                                                                                         // 44\n                //prints the announcement posted                                                             // 45\n                console.log(content);                                                                        // 46\n                Posts.update({                                                                               // 47\n                    '_id': postId                                                                            // 47\n                }, {                                                                                         // 47\n                    $set: {                                                                                  // 47\n                        'meta.algoliaId': content.objectID                                                   // 47\n                    }                                                                                        // 47\n                }, function (err, response) {                                                                // 47\n                    if (err) {                                                                               // 48\n                        console.log(err);                                                                    // 49\n                    } else {                                                                                 // 50\n                        console.log(response);                                                               // 51\n                    }                                                                                        // 52\n                });                                                                                          // 53\n            }                                                                                                // 54\n        }));                                                                                                 // 55\n    },                                                                                                       // 56\n    'postTextAlgolia': function (postId) {                                                                   // 57\n        var json = Posts.findOne({                                                                           // 58\n            '_id': postId                                                                                    // 58\n        });                                                                                                  // 58\n        var newJson = {                                                                                      // 60\n            type: json.type,                                                                                 // 61\n            subType: json.subType,                                                                           // 62\n            headline: json.headline,                                                                         // 63\n            content: json.content,                                                                           // 64\n            tags: json.tags,                                                                                 // 65\n            categories: json.categories //adds object to the indice announcement                             // 66\n                                                                                                             //\n        };                                                                                                   // 60\n        index.addObject(newJson, Meteor.bindEnvironment(function (err, content) {                            // 70\n            //error catch for algolia issues                                                                 // 72\n            if (err) {                                                                                       // 73\n                console.error('Algolia returned an error', err);                                             // 74\n            } else {                                                                                         // 75\n                //prints the announcement posted                                                             // 76\n                console.log(content);                                                                        // 77\n                Posts.update({                                                                               // 78\n                    '_id': postId                                                                            // 78\n                }, {                                                                                         // 78\n                    $set: {                                                                                  // 78\n                        'meta.algoliaId': content.objectID                                                   // 78\n                    }                                                                                        // 78\n                }, function (err, response) {                                                                // 78\n                    if (err) {                                                                               // 79\n                        console.log(err);                                                                    // 80\n                    } else {                                                                                 // 81\n                        console.log(response);                                                               // 82\n                    }                                                                                        // 83\n                });                                                                                          // 84\n            }                                                                                                // 85\n        }));                                                                                                 // 86\n    },                                                                                                       // 87\n    'postImageAlgolia': function (postId) {                                                                  // 88\n        var json = Posts.findOne({                                                                           // 89\n            '_id': postId                                                                                    // 89\n        });                                                                                                  // 89\n        var newJson = {                                                                                      // 91\n            type: json.type,                                                                                 // 92\n            subType: json.subType,                                                                           // 93\n            headline: json.headline,                                                                         // 94\n            tags: json.tags,                                                                                 // 95\n            categories: json.categories,                                                                     // 96\n            imgId: json.imgId //adds object to the indice announcement                                       // 97\n                                                                                                             //\n        };                                                                                                   // 91\n        index.addObject(newJson, Meteor.bindEnvironment(function (err, content) {                            // 101\n            //error catch for algolia issues                                                                 // 103\n            if (err) {                                                                                       // 104\n                console.error('Algolia returned an error', err);                                             // 105\n            } else {                                                                                         // 106\n                //prints the announcement posted                                                             // 107\n                console.log(content);                                                                        // 108\n                Posts.update({                                                                               // 109\n                    '_id': postId                                                                            // 109\n                }, {                                                                                         // 109\n                    $set: {                                                                                  // 109\n                        'meta.algoliaId': content.objectID                                                   // 109\n                    }                                                                                        // 109\n                }, function (err, response) {                                                                // 109\n                    if (err) {                                                                               // 110\n                        console.log(err);                                                                    // 111\n                    } else {                                                                                 // 112\n                        console.log(response);                                                               // 113\n                    }                                                                                        // 114\n                });                                                                                          // 115\n            }                                                                                                // 116\n        }));                                                                                                 // 117\n    },                                                                                                       // 118\n    'postBlogAlgolia': function (postId) {                                                                   // 119\n        var json = Posts.findOne({                                                                           // 120\n            '_id': postId                                                                                    // 120\n        });                                                                                                  // 120\n        var newJson = {                                                                                      // 121\n            type: json.type,                                                                                 // 122\n            headline: json.title,                                                                            // 123\n            subType: json.subtitle,                                                                          // 124\n            content: json.content,                                                                           // 125\n            tags: json.tags,                                                                                 // 126\n            categories: json.categories,                                                                     // 127\n            imgId: json.imgId //adds object to the indice announcement                                       // 128\n                                                                                                             //\n        };                                                                                                   // 121\n        index.addObjects(newJson, Meteor.bindEnvironment(function (err, content) {                           // 131\n            //error catch for algolia issues                                                                 // 133\n            if (err) {                                                                                       // 134\n                console.error('Algolia returned an error', err);                                             // 135\n            } else {                                                                                         // 136\n                //prints the announcement posted                                                             // 137\n                Posts.update({                                                                               // 138\n                    '_id': postId                                                                            // 138\n                }, {                                                                                         // 138\n                    $set: {                                                                                  // 138\n                        'meta.algoliaId': content.objectID                                                   // 138\n                    }                                                                                        // 138\n                }, function (err, response) {                                                                // 138\n                    if (err) {                                                                               // 139\n                        console.log(err);                                                                    // 140\n                    } else {                                                                                 // 141\n                        console.log(response);                                                               // 142\n                    }                                                                                        // 143\n                });                                                                                          // 144\n                console.log(content);                                                                        // 145\n            }                                                                                                // 147\n        }));                                                                                                 // 148\n    }                                                                                                        // 149\n});                                                                                                          // 22\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"algoliaRemove.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/algoliaRemove.js                                                                   //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n//Server side method to be called from client to remove an existing announcement                             // 1\n// api key that connects the client side to Algolia's server                                                 // 3\nvar client = AlgoliaSearch(\"GJDCY9DKEW\", \"31f60dc3cc7926270934909c81f867ee\"); // select indice (collection) of data to be accesed. In this case it would be the announcements\n                                                                                                             //\nvar index = client.initIndex('announcement');                                                                // 7\nMeteor.methods({                                                                                             // 9\n    'removeAnnouncement': function (myID) {                                                                  // 10\n        //removes object to the indice announcement                                                          // 12\n        //myID is hidden and can be accessed using .objectID on the announcement                             // 13\n        index.deleteObject('myID', function (err) {                                                          // 14\n            if (err) {                                                                                       // 15\n                //error catch (server down, or algolia issue)                                                // 16\n                console.error('Algolia returned an error', err);                                             // 17\n            } else {                                                                                         // 18\n                //object succesfully removed                                                                 // 19\n                console.log('announcement removed');                                                         // 20\n            }                                                                                                // 21\n        });                                                                                                  // 22\n    }                                                                                                        // 24\n});                                                                                                          // 9\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"algoliaUpdate.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/algoliaUpdate.js                                                                   //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\n//Server side method to be called from client to update an existing announcement                             // 1\n// api key that connects the client side to Algolia's server                                                 // 3\nvar client = AlgoliaSearch(\"GJDCY9DKEW\", \"31f60dc3cc7926270934909c81f867ee\"); // select indice (collection) of data to be accesed. In this case it would be the announcements\n                                                                                                             //\nvar index = client.initIndex('announcement');                                                                // 7\nMeteor.methods({                                                                                             // 9\n    'updateAnnouncement': function (announcement, description, imgId, myID) {                                // 10\n        //updates object to the indice announcement                                                          // 12\n        //myID is hidden and can be accessed using .objectID on the announcement                             // 13\n        index.saveObject({                                                                                   // 14\n            announcement: announcement,                                                                      // 15\n            description: description,                                                                        // 16\n            imgId: imgId,                                                                                    // 17\n            objectID: myID                                                                                   // 18\n        }, function (err, content) {                                                                         // 14\n            //error catch (server down, or algolia issue)                                                    // 21\n            if (err) {                                                                                       // 22\n                console.error('Algolia returned an error', err);                                             // 23\n            } else {                                                                                         // 24\n                //Spits out the updated announcement with the keyword                                        // 26\n                console.log('content', content);                                                             // 27\n            }                                                                                                // 28\n        });                                                                                                  // 29\n    }                                                                                                        // 32\n});                                                                                                          // 9\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"categories.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/categories.js                                                                      //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nif (Meteor.isServer) {                                                                                       // 1\n   Meteor.publish('keywords', function () {                                                                  // 2\n      function postsPublication() {                                                                          // 2\n         return Posts.find({});                                                                              // 3\n      }                                                                                                      // 4\n                                                                                                             //\n      return postsPublication;                                                                               // 2\n   }());                                                                                                     // 2\n}                                                                                                            // 5\n                                                                                                             //\nvar categories = new Map(); //athletics                                                                      // 7\n                                                                                                             //\ncategories.set('gym', 'athletics');                                                                          // 9\ncategories.set('athletic', 'athletics');                                                                     // 10\ncategories.set('athletics', 'athletics');                                                                    // 11\ncategories.set('sport', 'athletics');                                                                        // 12\ncategories.set('sports', 'athletics');                                                                       // 13\ncategories.set('volleyball', 'athletics');                                                                   // 14\ncategories.set('soccer', 'athletics');                                                                       // 15\ncategories.set('frisbee', 'athletics');                                                                      // 16\ncategories.set('workout', 'athletics');                                                                      // 17\ncategories.set('curling', 'athletics');                                                                      // 18\ncategories.set('baseball', 'athletics');                                                                     // 19\ncategories.set('basketball', 'athletics');                                                                   // 20\ncategories.set('football', 'athletics');                                                                     // 21\ncategories.set('volleyball', 'athletics'); //academics                                                       // 22\n                                                                                                             //\ncategories.set('math', 'academics');                                                                         // 25\ncategories.set('english', 'academics');                                                                      // 26\ncategories.set('calculus', 'academics');                                                                     // 27\ncategories.set('science', 'academics');                                                                      // 28\ncategories.set('physics', 'academics');                                                                      // 29\ncategories.set('chemistry', 'academics');                                                                    // 30\ncategories.set('biology', 'academics');                                                                      // 31\ncategories.set('computing', 'academics');                                                                    // 32\ncategories.set('academics', 'academics');                                                                    // 33\ncategories.set('academic', 'academics');                                                                     // 34\ncategories.set('class', 'academics');                                                                        // 35\ncategories.set('tutor', 'academics');                                                                        // 36\ncategories.set('marks', 'academics');                                                                        // 37\ncategories.set('mark', 'academics'); //competition                                                           // 38\n                                                                                                             //\ncategories.set('contest', 'competition');                                                                    // 41\ncategories.set('contests', 'competition');                                                                   // 42\ncategories.set('competition', 'competition');                                                                // 43\ncategories.set('competitions', 'competition');                                                               // 44\ncategories.set('vs', 'competition');                                                                         // 45\ncategories.set('fight', 'competition');                                                                      // 46\ncategories.set('battle', 'competition');                                                                     // 47\nMeteor.methods({                                                                                             // 49\n   //return all categories found within text                                                                 // 50\n   'keywords.getKeywords': function (text) {                                                                 // 51\n      text = text.toLowerCase();                                                                             // 52\n      var separators = [' , ', ', ', ',', ' ,', ' ']; //                                                     // 53\n                                                                                                             //\n      var keys = text.split(/[ ,.]+/); //console.log(keys);                                                  // 55\n                                                                                                             //\n      var len = keys.length;                                                                                 // 57\n      var ans = [];                                                                                          // 58\n                                                                                                             //\n      for (var i = 0; i < len; ++i) {                                                                        // 59\n         var key = keys[i];                                                                                  // 60\n                                                                                                             //\n         if (categories.has(key)) {                                                                          // 61\n            if (!ans.includes(categories.get(key))) {                                                        // 62\n               ans.push(categories.get(key));                                                                // 63\n            }                                                                                                // 64\n         }                                                                                                   // 65\n      }                                                                                                      // 66\n                                                                                                             //\n      return ans;                                                                                            // 67\n   }                                                                                                         // 68\n});                                                                                                          // 49\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"facebook.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/facebook.js                                                                        //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Meteor = void 0;                                                                                         // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                     // 1\n    Meteor: function (v) {                                                                                   // 1\n        Meteor = v;                                                                                          // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nMeteor.methods({                                                                                             // 3\n    //return the facebook app id                                                                             // 4\n    'getFBAppId': function () {                                                                              // 5\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 9\n        }                                                                                                    // 10\n                                                                                                             //\n        return '443985995958874';                                                                            // 11\n    },                                                                                                       // 12\n    'getFBSecret': function () {                                                                             // 13\n        if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 17\n        }                                                                                                    // 18\n                                                                                                             //\n        return '8d9cbbb60eb7f71e105f23ca026f391c';                                                           // 19\n    },                                                                                                       // 20\n    'extendToken': function (accessToken) {                                                                  // 21\n        /*$.get(\"https://graph.facebook.com/oauth/access_token?\", {                                          // 22\n        grant_type:'fb_exchange_token',                                                                      //\n        client_id:appId,                                                                                     //\n        client_secret:appSec,                                                                                //\n        fb_exchange_token:accessToken },                                                                     //\n        function (data) {                                                                                    //\n        console.log(data);                                                                                   //\n        })*/if (!(Roles.userIsInRole(this.userId, 'teacher') || Roles.userIsInRole(this.userId, 'admin') || Roles.userIsInRole(this.userId, 'announcementEditor'))) {\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");                            // 33\n        }                                                                                                    // 34\n                                                                                                             //\n        Meteor.call('getFBAppId', function (err, response) {                                                 // 36\n            var appId = response;                                                                            // 37\n            Meteor.call('getFBSecret', function (err, response2) {                                           // 38\n                var appSec = response2;                                                                      // 39\n                console.log(\"proceeding to HTTP call\");                                                      // 40\n                HTTP.call('GET', \"https://graph.facebook.com/oauth/access_token?\", {                         // 41\n                    grant_type: 'fb_exchange_token',                                                         // 42\n                    client_id: appId,                                                                        // 43\n                    client_secret: appSec,                                                                   // 44\n                    fb_exchange_token: accessToken                                                           // 45\n                }, function (err, data) {                                                                    // 41\n                    if (err) {                                                                               // 47\n                        console.log(err);                                                                    // 48\n                    } else {                                                                                 // 49\n                        console.log(\"HELLO\");                                                                // 50\n                        console.log(data);                                                                   // 51\n                    }                                                                                        // 52\n                });                                                                                          // 53\n            });                                                                                              // 54\n        });                                                                                                  // 55\n    }                                                                                                        // 56\n});                                                                                                          // 3\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"imports.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/imports.js                                                                         //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.watch(require(\"./unsplash.js\"));                                                                      // 1\nmodule.watch(require(\"./facebook.js\"));                                                                      // 1\nmodule.watch(require(\"./twitter.js\"));                                                                       // 1\nmodule.watch(require(\"./algoliaPost.js\"));                                                                   // 1\nmodule.watch(require(\"./algoliaUpdate.js\"));                                                                 // 1\nmodule.watch(require(\"./algoliaRemove.js\"));                                                                 // 1\nmodule.watch(require(\"./accounts.js\"));                                                                      // 1\nmodule.watch(require(\"./mailchimp.js\"));                                                                     // 1\nmodule.watch(require(\"./categories.js\"));                                                                    // 1\nmodule.watch(require(\"./scheduler.js\"));                                                                     // 1\nmodule.watch(require(\"../../api/drafts/draftMethods.js\"));                                                   // 1\nmodule.watch(require(\"../../api/posts/postsMethods.js\"));                                                    // 1\nmodule.watch(require(\"../../api/suggestions/suggestionMethods.js\"));                                         // 1\nmodule.watch(require(\"../../api/categories/categoriesMethods.js\"));                                          // 1\nmodule.watch(require(\"../../api/blogCategories/categoriesMethods.js\"));                                      // 1\nmodule.watch(require(\"./teachAssist.js\"));                                                                   // 1\nmodule.watch(require(\"../../api/suggestions/suggestions.js\"));                                               // 1\nmodule.watch(require(\"../../api/images/images.js\"));                                                         // 1\nmodule.watch(require(\"../../api/images/imagesMethods.js\"));                                                  // 1\nmodule.watch(require(\"../../api/organizations/clubs.js\"));                                                   // 1\nmodule.watch(require(\"../../api/organizations/clubsMethods.js\"));                                            // 1\nmodule.watch(require(\"../../api/organizations/courses.js\"));                                                 // 1\nmodule.watch(require(\"../../api/organizations/coursesMethods.js\"));                                          // 1\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"index.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/index.js                                                                           //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nmodule.watch(require(\"./imports.js\"));                                                                       // 1\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"mailchimp.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/mailchimp.js                                                                       //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Mailchimp = void 0;                                                                                      // 1\nmodule.watch(require(\"mailchimp-api-v3\"), {                                                                  // 1\n   \"default\": function (v) {                                                                                 // 1\n      Mailchimp = v;                                                                                         // 1\n   }                                                                                                         // 1\n}, 0);                                                                                                       // 1\n//const Mailchimp = require('mailchimp-api-v3')                                                              // 3\nvar mailchimp = new Mailchimp('c63e149751b5b34657fc48286f336650-us16');                                      // 5\nMeteor.methods({                                                                                             // 7\n   'getSubscribers': function () {                                                                           // 8\n      mailchimp.get('/lists/b7d23cbf79', function (results) {                                                // 9\n         return results;                                                                                     // 10\n      });                                                                                                    // 11\n   },                                                                                                        // 12\n   'news.addSubscriber': function (email, fname, lname) {                                                    // 13\n      mailchimp.post('/lists/b7d23cbf79/members', {                                                          // 14\n         email_address: email,                                                                               // 14\n         status: 'subscribed',                                                                               // 14\n         merge_fields: {                                                                                     // 14\n            FNAME: fname,                                                                                    // 14\n            LNAME: lname                                                                                     // 14\n         }                                                                                                   // 14\n      }, function (err, response) {                                                                          // 14\n         if (err) {                                                                                          // 15\n            console.log(err);                                                                                // 16\n         } else {                                                                                            // 17\n            console.log(JSON.stringify(response, null, 2));                                                  // 18\n         }                                                                                                   // 19\n                                                                                                             //\n         return response;                                                                                    // 20\n      });                                                                                                    // 21\n   },                                                                                                        // 22\n   'getTemplates': function () {                                                                             // 23\n      mailchimp.get('/templates', function (err, response) {                                                 // 24\n         if (err) {                                                                                          // 25\n            console.log(err);                                                                                // 26\n         } else {                                                                                            // 27\n            console.log(JSON.stringify(response, null, 2));                                                  // 28\n         }                                                                                                   // 29\n      });                                                                                                    // 30\n   },                                                                                                        // 31\n   'createCampaign': function (subjectLine, title) {                                                         // 32\n      mailchimp.post('/campaigns', {                                                                         // 33\n         type: 'regular',                                                                                    // 35\n         recipients: {                                                                                       // 36\n            list_id: 'b7d23cbf79'                                                                            // 37\n         },                                                                                                  // 36\n         settings: {                                                                                         // 39\n            subject_line: subjectLine,                                                                       // 40\n            title: title,                                                                                    // 41\n            from_name: 'UHS Life Bulletin',                                                                  // 42\n            reply_to: 'hello@uhs.life',                                                                      // 43\n            template_id: 60467                                                                               // 44\n         }                                                                                                   // 39\n      }, function (err, response) {                                                                          // 34\n         if (err) {                                                                                          // 47\n            console.log(err);                                                                                // 48\n         } else {                                                                                            // 49\n            console.log(JSON.stringify(response, null, 2));                                                  // 50\n            var campaignID = response.id;                                                                    // 51\n            mailchimp.put('/campaigns/' + campaignID + '/content', {                                         // 52\n               template: {                                                                                   // 54\n                  id: 60467,                                                                                 // 55\n                  sections: {                                                                                // 56\n                     \"image\": \"<img src='https://www.sitebuilderreport.com/assets/facebook-stock-up-446fff24fb11820517c520c4a5a4c032.jpg'>\",\n                     \"text\": \"<p>Changed text 2</p>\"                                                         // 58\n                  }                                                                                          // 56\n               }                                                                                             // 54\n            }, function (err, response) {                                                                    // 53\n               if (err) {                                                                                    // 62\n                  console.log(err);                                                                          // 63\n               } else {                                                                                      // 64\n                  //console.log(JSON.stringify(response, null, 2));                                          // 65\n                  mailchimp.post('/campaigns/' + campaignID + '/actions/send', function (err, response) {    // 66\n                     if (err) {                                                                              // 67\n                        console.log(err);                                                                    // 68\n                     } else {                                                                                // 69\n                        console.log(JSON.stringify(response, null, 2));                                      // 70\n                     }                                                                                       // 71\n                  });                                                                                        // 72\n               }                                                                                             // 73\n            });                                                                                              // 74\n         }                                                                                                   // 75\n      });                                                                                                    // 76\n   }                                                                                                         // 77\n});                                                                                                          // 7\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"scheduler.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/scheduler.js                                                                       //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Meteor = void 0;                                                                                         // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                     // 1\n   Meteor: function (v) {                                                                                    // 1\n      Meteor = v;                                                                                            // 1\n   }                                                                                                         // 1\n}, 0);                                                                                                       // 1\nvar schedule = void 0;                                                                                       // 1\nmodule.watch(require(\"node-schedule\"), {                                                                     // 1\n   \"default\": function (v) {                                                                                 // 1\n      schedule = v;                                                                                          // 1\n   }                                                                                                         // 1\n}, 1);                                                                                                       // 1\nvar Posts = void 0;                                                                                          // 1\nmodule.watch(require(\"../../api/posts/posts.js\"), {                                                          // 1\n   Posts: function (v) {                                                                                     // 1\n      Posts = v;                                                                                             // 1\n   }                                                                                                         // 1\n}, 2);                                                                                                       // 1\nMeteor.methods({                                                                                             // 5\n   'scheduleAnnouncement': function (announcementId) {                                                       // 6\n      var announcement = Posts.findOne({                                                                     // 7\n         '_id': announcementId                                                                               // 7\n      });                                                                                                    // 7\n                                                                                                             //\n      if (announcement.type === 'announcement') {                                                            // 9\n         var sDate = new Date(announcement.startDate);                                                       // 10\n         var eDate = new Date(announcement.endDate);                                                         // 11\n         var cDate = new Date();                                                                             // 12\n         var flag = false;                                                                                   // 13\n         sDate.setHours(8);                                                                                  // 15\n         eDate.setHours(8);                                                                                  // 16\n                                                                                                             //\n         if (eDate.getTime() === sDate.getTime()) {                                                          // 18\n            //scheduled for one day                                                                          // 18\n            eDate = new Date(eDate.setTime(eDate.getTime() + 86400000)); //move end day to next day midnight\n         }                                                                                                   // 20\n                                                                                                             //\n         if (sDate.getTime() < cDate.getTime()) {                                                            // 21\n            //already past start date                                                                        // 21\n            console.log(\"updated start date\");                                                               // 22\n            sDate = new Date(); //update the start date                                                      // 23\n                                                                                                             //\n            sDate.setSeconds(sDate.getSeconds() + 5); //add a delay                                          // 24\n         }                                                                                                   // 25\n                                                                                                             //\n         if (eDate.getTime() < cDate.getTime()) {                                                            // 26\n            //already past end date                                                                          // 26\n            console.log(\"updated end date\");                                                                 // 27\n            flag = true;                                                                                     // 28\n         }                                                                                                   // 29\n                                                                                                             //\n         if (!flag) {                                                                                        // 32\n            var j = schedule.scheduleJob(sDate, Meteor.bindEnvironment(function () {                         // 33\n               //Set display to TRUE                                                                         // 34\n               console.log(\"DISPLAY TRUE\");                                                                  // 35\n               Posts.update({                                                                                // 36\n                  '_id': announcementId                                                                      // 36\n               }, {                                                                                          // 36\n                  $set: {                                                                                    // 36\n                     'meta.display': true                                                                    // 36\n                  }                                                                                          // 36\n               });                                                                                           // 36\n            }));                                                                                             // 37\n            var k = schedule.scheduleJob(eDate, Meteor.bindEnvironment(function () {                         // 38\n               //Set display to FALSE                                                                        // 39\n               console.log(\"DISPLAY FALSE\");                                                                 // 40\n               Posts.update({                                                                                // 41\n                  '_id': announcementId                                                                      // 41\n               }, {                                                                                          // 41\n                  $set: {                                                                                    // 41\n                     'meta.display': false                                                                   // 41\n                  }                                                                                          // 41\n               });                                                                                           // 41\n            }));                                                                                             // 42\n         }                                                                                                   // 43\n      } else {                                                                                               // 44\n         console.log('Not an announcement');                                                                 // 45\n         return -1;                                                                                          // 46\n      }                                                                                                      // 47\n   },                                                                                                        // 48\n   'scheduleBlog': function (blogId) {                                                                       // 49\n      var blog = Posts.findOne({                                                                             // 50\n         '_id': blogId                                                                                       // 50\n      });                                                                                                    // 50\n                                                                                                             //\n      if (blog.type === 'blog') {                                                                            // 52\n         var rDate = new Date(blog.releaseDate);                                                             // 53\n         var cDate = new Date();                                                                             // 54\n                                                                                                             //\n         if (rDate.getTime() < cDate.getTime()) {                                                            // 56\n            //already past start date                                                                        // 56\n            rDate = new Date(); //update the start date                                                      // 57\n                                                                                                             //\n            rDate.setSeconds(rDate.getSeconds() + 5); //add a delay                                          // 58\n         }                                                                                                   // 59\n                                                                                                             //\n         var j = schedule.scheduleJob(rDate, Meteor.bindEnvironment(function () {                            // 61\n            //Set display to TRUE                                                                            // 62\n            Posts.update({                                                                                   // 63\n               '_id': blogId                                                                                 // 63\n            }, {                                                                                             // 63\n               $set: {                                                                                       // 63\n                  'meta.display': true                                                                       // 63\n               }                                                                                             // 63\n            });                                                                                              // 63\n         }));                                                                                                // 64\n      } else {                                                                                               // 65\n         console.log('not a blog');                                                                          // 66\n         return -1;                                                                                          // 67\n      }                                                                                                      // 68\n   }                                                                                                         // 69\n});                                                                                                          // 5\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"teachAssist.js\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/teachAssist.js                                                                     //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nMeteor.methods({                                                                                             // 1\n    'getTeachAssistTokens': function (json) {                                                                // 2\n        if (!(json.student_number && json.password)) {                                                       // 3\n            throw new Meteor.Error(400, \"Need a student number and password\");                               // 4\n        }                                                                                                    // 5\n                                                                                                             //\n        var response = HTTP.call(\"GET\", \"https://ta.yrdsb.ca/v4/students/json.php\", {                        // 6\n            data: {                                                                                          // 7\n                \"student_number\": json.student_number,                                                       // 8\n                \"password\": json.password                                                                    // 9\n            }                                                                                                // 7\n        });                                                                                                  // 6\n        var res = JSON.parse(response.content);                                                              // 12\n                                                                                                             //\n        if (res[0].ERROR) {                                                                                  // 13\n            console.log(res[0].ERROR);                                                                       // 14\n            throw new Meteor.Error(403, \"Your password is invalid.\");                                        // 15\n        }                                                                                                    // 16\n                                                                                                             //\n        var id = res[0].student_id;                                                                          // 18\n        var token = res[0].token;                                                                            // 19\n        return {                                                                                             // 21\n            \"student_id\": id,                                                                                // 21\n            \"token\": token                                                                                   // 21\n        };                                                                                                   // 21\n    },                                                                                                       // 22\n    'getTeachAssistCourses': function (json) {                                                               // 23\n        if (!(json.student_id && json.token)) {                                                              // 24\n            throw new Meteor.Error(400, \"Need a student id and token\");                                      // 25\n        }                                                                                                    // 26\n                                                                                                             //\n        console.log(\"hello courses\");                                                                        // 27\n        var response = HTTP.call(\"GET\", \"https://ta.yrdsb.ca/v4/students/json.php\", {                        // 28\n            data: {                                                                                          // 29\n                \"student_id\": json.student_id,                                                               // 30\n                \"token\": json.token                                                                          // 31\n            }                                                                                                // 29\n        });                                                                                                  // 28\n                                                                                                             //\n        if (JSON.parse(response.content)[0].ERROR) {                                                         // 35\n            throw new Meteor.Error(400, JSON.parse(response.content)[0].ERROR);                              // 36\n        }                                                                                                    // 37\n                                                                                                             //\n        return JSON.parse(response.content)[0].data[0].subjects;                                             // 38\n    },                                                                                                       // 40\n    'getTeachAssistCourseDetails': function (json) {                                                         // 41\n        if (!(json.student_id && json.token && json.subject_id)) {                                           // 42\n            throw new Meteor.Error(400, \"Need a student id and token and subject id\");                       // 43\n        }                                                                                                    // 44\n                                                                                                             //\n        var response = HTTP.call(\"GET\", \"https://ta.yrdsb.ca/v4/students/json.php\", {                        // 45\n            data: {                                                                                          // 46\n                \"student_id\": json.student_id,                                                               // 47\n                \"token\": json.token,                                                                         // 48\n                \"subject_id\": json.subject_id                                                                // 49\n            }                                                                                                // 46\n        });                                                                                                  // 45\n                                                                                                             //\n        if (JSON.parse(response.content)[0].ERROR) {                                                         // 52\n            throw new Meteor.Error(400, JSON.parse(response.content)[0].ERROR);                              // 53\n        } //console.log(JSON.parse(response.content)[0]);                                                    // 54\n                                                                                                             //\n                                                                                                             //\n        var cat = [0, 0, 0, 0, 0]; //K T C A O                                                               // 57\n                                                                                                             //\n        var catWeight = [0, 0, 0, 0, 0];                                                                     // 58\n        var catExist = [false, false, false, false, false];                                                  // 59\n        var timeline = [];                                                                                   // 60\n        var preParse = JSON.parse(response.content)[0];                                                      // 62\n        var postParse = JSON.parse(response.content)[0];                                                     // 63\n        postParse.data.assessment = [];                                                                      // 65\n        postParse.categoryMarks = [0, 0, 0, 0, 0];                                                           // 66\n        var categories = preParse.data.assessment.data.categories;                                           // 68\n        var cnt = 0;                                                                                         // 70\n                                                                                                             //\n        _.each(preParse.data.assessment.data, function (k, v) {                                              // 71\n            if (v === 'categories') {                                                                        // 72\n                postParse.categories = k;                                                                    // 73\n            } else {                                                                                         // 74\n                var assess = k;                                                                              // 75\n                                                                                                             //\n                if (assess.K) {                                                                              // 76\n                    catExist[0] = true;                                                                      // 77\n                    cat[0] += parseFloat(assess.K.mark) / parseFloat(assess.K.outOf) * 100 * parseFloat(assess.K.weight);\n                    catWeight[0] += parseFloat(assess.K.weight);                                             // 79\n                }                                                                                            // 80\n                                                                                                             //\n                if (assess.T) {                                                                              // 81\n                    catExist[1] = true;                                                                      // 82\n                    cat[1] += parseFloat(assess.T.mark) / parseFloat(assess.T.outOf) * 100 * parseFloat(assess.T.weight);\n                    catWeight[1] += parseFloat(assess.T.weight);                                             // 84\n                }                                                                                            // 85\n                                                                                                             //\n                if (assess.C) {                                                                              // 86\n                    catExist[2] = true;                                                                      // 87\n                    cat[2] += parseFloat(assess.C.mark) / parseFloat(assess.C.outOf) * 100 * parseFloat(assess.C.weight);\n                    catWeight[2] += parseFloat(assess.C.weight);                                             // 89\n                }                                                                                            // 90\n                                                                                                             //\n                if (assess.A) {                                                                              // 91\n                    catExist[3] = true;                                                                      // 92\n                    cat[3] += parseFloat(assess.A.mark) / parseFloat(assess.A.outOf) * 100 * parseFloat(assess.A.weight);\n                    catWeight[3] += parseFloat(assess.A.weight);                                             // 94\n                    console.log(cat[3] + \" \" + catWeight[3]);                                                // 95\n                }                                                                                            // 96\n                                                                                                             //\n                if (assess[\"\"]) {                                                                            // 97\n                    catExist[4] = true;                                                                      // 98\n                    cat[4] += parseFloat(assess[\"\"].mark) / parseFloat(assess[\"\"].outOf) * 100 * parseFloat(assess[\"\"].weight);\n                    catWeight[4] += parseFloat(assess[\"\"].weight);                                           // 100\n                }                                                                                            // 101\n                                                                                                             //\n                k.O = k[\"\"]; //transfer to Other                                                             // 102\n                                                                                                             //\n                delete k[\"\"];                                                                                // 103\n                var mark = 0;                                                                                // 104\n                var K = void 0,                                                                              // 105\n                    T = void 0,                                                                              // 105\n                    C = void 0,                                                                              // 105\n                    A = void 0,                                                                              // 105\n                    O = 0;                                                                                   // 105\n                var catTotalWeight = 0;                                                                      // 106\n                                                                                                             //\n                if (catExist[0]) {                                                                           // 107\n                    mark += cat[0] / catWeight[0] * categories.K;                                            // 108\n                    K = cat[0] / catWeight[0];                                                               // 109\n                    catTotalWeight += categories.K;                                                          // 110\n                }                                                                                            // 111\n                                                                                                             //\n                if (catExist[1]) {                                                                           // 112\n                    mark += cat[1] / catWeight[1] * categories.T;                                            // 113\n                    T = cat[1] / catWeight[1];                                                               // 114\n                    catTotalWeight += categories.T;                                                          // 115\n                }                                                                                            // 116\n                                                                                                             //\n                if (catExist[2]) {                                                                           // 117\n                    mark += cat[2] / catWeight[2] * categories.C;                                            // 118\n                    C = cat[2] / catWeight[2];                                                               // 119\n                    catTotalWeight += categories.C;                                                          // 120\n                }                                                                                            // 121\n                                                                                                             //\n                if (catExist[3]) {                                                                           // 122\n                    mark += cat[3] / catWeight[3] * categories.A;                                            // 123\n                    A = cat[3] / catWeight[3];                                                               // 124\n                    catTotalWeight += categories.A;                                                          // 125\n                }                                                                                            // 126\n                                                                                                             //\n                if (catExist[4]) {                                                                           // 127\n                    mark += cat[4] / catWeight[4] * categories.O;                                            // 128\n                    O = cat[4] / catWeight[4];                                                               // 129\n                    catTotalWeight += categories.O;                                                          // 130\n                }                                                                                            // 131\n                                                                                                             //\n                mark /= catTotalWeight;                                                                      // 132\n                timeline[cnt] = {                                                                            // 133\n                    mark: Math.round(mark * 100) / 100,                                                      // 134\n                    K: Math.round(K * 100) / 100,                                                            // 135\n                    T: Math.round(T * 100) / 100,                                                            // 136\n                    C: Math.round(C * 100) / 100,                                                            // 137\n                    A: Math.round(A * 100) / 100,                                                            // 138\n                    O: Math.round(O * 100) / 100                                                             // 139\n                };                                                                                           // 133\n                postParse.data.assessment[cnt++] = k;                                                        // 141\n            }                                                                                                // 142\n        });                                                                                                  // 143\n                                                                                                             //\n        for (var i = 0; i < 5; i++) {                                                                        // 144\n            if (cat[i] !== 0) {                                                                              // 145\n                postParse.categoryMarks[i] = Math.round(cat[i] / catWeight[i] * 100) / 100;                  // 146\n            } else {                                                                                         // 147\n                postParse.categoryMarks[i] = 0;                                                              // 148\n            }                                                                                                // 149\n        }                                                                                                    // 150\n                                                                                                             //\n        postParse.timeline = timeline;                                                                       // 151\n        return postParse;                                                                                    // 152\n    }                                                                                                        // 153\n});                                                                                                          // 1\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"twitter.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/twitter.js                                                                         //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Meteor = void 0;                                                                                         // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                     // 1\n    Meteor: function (v) {                                                                                   // 1\n        Meteor = v;                                                                                          // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nvar Images = void 0;                                                                                         // 1\nmodule.watch(require(\"../../api/images/images.js\"), {                                                        // 1\n    Images: function (v) {                                                                                   // 1\n        Images = v;                                                                                          // 1\n    }                                                                                                        // 1\n}, 1);                                                                                                       // 1\nMeteor.methods({                                                                                             // 4\n    //return the twitter api key                                                                             // 5\n    'getTwitterAPIKey': function () {                                                                        // 6\n        return 'cwR4tCHFOTFRIyiLQVacIzns8';                                                                  // 7\n    },                                                                                                       // 8\n    //return the twitter api secret                                                                          // 9\n    'getTwitterAPISecret': function () {                                                                     // 10\n        return 'MP0Pphmcp6HL0FF6WXYhZa2M8b8cTH297MNqRR7M6wwCOBxfwU';                                         // 11\n    },                                                                                                       // 12\n    //return the twitter access token                                                                        // 13\n    'getTwitterAccessToken': function () {                                                                   // 14\n        return '882355763771043840-8uCzofs2q4HHE8m0GS2QZUxqNxzOvEG';                                         // 15\n    },                                                                                                       // 16\n    //return the twitter access token secret                                                                 // 17\n    'getTwitterAccessTokenSecret': function () {                                                             // 18\n        return 'vpw7YwWu9tic20VI2qDh8W73zJoROenAnDEQoh7PMlM5l';                                              // 19\n    },                                                                                                       // 20\n    //setup the twitter api                                                                                  // 21\n    'setupTwitterAPI': function () {                                                                         // 22\n        //Initialize the twitter API                                                                         // 24\n        T = new Twit({                                                                                       // 25\n            consumer_key: 'cwR4tCHFOTFRIyiLQVacIzns8',                                                       // 26\n            consumer_secret: 'MP0Pphmcp6HL0FF6WXYhZa2M8b8cTH297MNqRR7M6wwCOBxfwU',                           // 27\n            access_token: '882355763771043840-8uCzofs2q4HHE8m0GS2QZUxqNxzOvEG',                              // 28\n            access_token_secret: 'vpw7YwWu9tic20VI2qDh8W73zJoROenAnDEQoh7PMlM5l'                             // 29\n        });                                                                                                  // 25\n        console.log(\"setting up twitter\");                                                                   // 31\n    },                                                                                                       // 33\n    //post to twitter account                                                                                // 34\n    'postTextAnnouncementTwitter': function (obj) {                                                          // 35\n        var headline = obj.headline,                                                                         // 36\n            content = obj.content;                                                                           // 36\n        var status = obj.headline + '\\n' + obj.content;                                                      // 38\n                                                                                                             //\n        if (status.length > 140) {                                                                           // 39\n            status = status.substring(0, 137);                                                               // 40\n        }                                                                                                    // 41\n                                                                                                             //\n        status += \"...\";                                                                                     // 42\n        T.post('statuses/update', {                                                                          // 43\n            status: status                                                                                   // 43\n        }, function (err, data, response) {                                                                  // 43\n            console.log(data);                                                                               // 44\n        });                                                                                                  // 45\n    },                                                                                                       // 46\n    'postImageAnnouncementTwitter': function (obj) {                                                         // 47\n        var fs = require('fs'); // post a tweet with media                                                   // 48\n        //let b64content = fs.readFileSync('/Documents/TestFacebookAPI/facebookapi/public/images/stock1.jpg', { encoding: 'base64' });\n                                                                                                             //\n                                                                                                             //\n        var getBase64Data = function (doc, callback) {                                                       // 52\n            var buffer = new Buffer(0); // callback has the form function (err, res) {}                      // 53\n                                                                                                             //\n            var readStream = doc.createReadStream();                                                         // 55\n            readStream.on('data', function (chunk) {                                                         // 56\n                buffer = Buffer.concat([buffer, chunk]);                                                     // 57\n            });                                                                                              // 58\n            readStream.on('error', function (err) {                                                          // 59\n                callback(err, null);                                                                         // 60\n            });                                                                                              // 61\n            readStream.on('end', function () {                                                               // 62\n                // done                                                                                      // 63\n                callback(null, buffer.toString('base64'));                                                   // 64\n            });                                                                                              // 65\n        };                                                                                                   // 66\n                                                                                                             //\n        var getBase64DataSync = Meteor.wrapAsync(getBase64Data);                                             // 67\n        var file = Images.findOne({                                                                          // 69\n            '_id': obj.imgId                                                                                 // 69\n        });                                                                                                  // 69\n        getBase64DataSync(file, function (err, b64content) {                                                 // 70\n            // first we must post the media to Twitter                                                       // 71\n            T.post('media/upload', {                                                                         // 72\n                media_data: b64content                                                                       // 72\n            }, function (err, data, response) {                                                              // 72\n                // now we can reference the media and post a tweet (media will attach to the tweet)          // 74\n                var mediaIdStr = data.media_id_string;                                                       // 75\n                var params = {                                                                               // 76\n                    status: obj.headline,                                                                    // 76\n                    media_ids: [mediaIdStr]                                                                  // 76\n                };                                                                                           // 76\n                T.post('statuses/update', params, function (err, data, response) {                           // 78\n                    console.log(data);                                                                       // 79\n                });                                                                                          // 80\n            });                                                                                              // 81\n        });                                                                                                  // 82\n    },                                                                                                       // 83\n    'postTextImageAnnouncementTwitter': function (obj) {                                                     // 84\n        var getBase64Data = function (doc, callback) {                                                       // 85\n            var buffer = new Buffer(0); // callback has the form function (err, res) {}                      // 86\n                                                                                                             //\n            var readStream = doc.createReadStream();                                                         // 88\n            readStream.on('data', function (chunk) {                                                         // 89\n                buffer = Buffer.concat([buffer, chunk]);                                                     // 90\n            });                                                                                              // 91\n            readStream.on('error', function (err) {                                                          // 92\n                callback(err, null);                                                                         // 93\n            });                                                                                              // 94\n            readStream.on('end', function () {                                                               // 95\n                // done                                                                                      // 96\n                callback(null, buffer.toString('base64'));                                                   // 97\n            });                                                                                              // 98\n        };                                                                                                   // 99\n                                                                                                             //\n        var getBase64DataSync = Meteor.wrapAsync(getBase64Data);                                             // 100\n        var status = obj.headline + '\\n' + obj.content;                                                      // 102\n                                                                                                             //\n        if (status.length > 140) {                                                                           // 103\n            status = status.substring(0, 137);                                                               // 104\n        }                                                                                                    // 105\n                                                                                                             //\n        status += \"...\";                                                                                     // 106\n        var file = Images.findOne({                                                                          // 108\n            '_id': obj.imgId                                                                                 // 108\n        });                                                                                                  // 108\n        getBase64DataSync(file, function (err, b64content) {                                                 // 109\n            // first we must post the media to Twitter                                                       // 110\n            T.post('media/upload', {                                                                         // 111\n                media_data: b64content                                                                       // 111\n            }, function (err, data, response) {                                                              // 111\n                // now we can reference the media and post a tweet (media will attach to the tweet)          // 113\n                var mediaIdStr = data.media_id_string;                                                       // 114\n                var params = {                                                                               // 115\n                    status: status,                                                                          // 115\n                    media_ids: [mediaIdStr]                                                                  // 115\n                };                                                                                           // 115\n                T.post('statuses/update', params, function (err, data, response) {                           // 117\n                    console.log(data);                                                                       // 118\n                });                                                                                          // 119\n            });                                                                                              // 120\n        });                                                                                                  // 121\n    }                                                                                                        // 122\n});                                                                                                          // 4\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"unsplash.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// imports/startup/server/unsplash.js                                                                        //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Meteor = void 0;                                                                                         // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                     // 1\n    Meteor: function (v) {                                                                                   // 1\n        Meteor = v;                                                                                          // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nvar Unsplash = void 0,                                                                                       // 1\n    toJson = void 0;                                                                                         // 1\nmodule.watch(require(\"unsplash-js\"), {                                                                       // 1\n    \"default\": function (v) {                                                                                // 1\n        Unsplash = v;                                                                                        // 1\n    },                                                                                                       // 1\n    toJson: function (v) {                                                                                   // 1\n        toJson = v;                                                                                          // 1\n    }                                                                                                        // 1\n}, 1);                                                                                                       // 1\nvar es6Promise = void 0;                                                                                     // 1\nmodule.watch(require(\"es6-promise\"), {                                                                       // 1\n    \"default\": function (v) {                                                                                // 1\n        es6Promise = v;                                                                                      // 1\n    }                                                                                                        // 1\n}, 2);                                                                                                       // 1\nvar isomorphicFetch = void 0;                                                                                // 1\nmodule.watch(require(\"isomorphic-fetch\"), {                                                                  // 1\n    \"default\": function (v) {                                                                                // 1\n        isomorphicFetch = v;                                                                                 // 1\n    }                                                                                                        // 1\n}, 3);                                                                                                       // 1\nes6Promise = require('es6-promise').polyfill();                                                              // 6\nisomorphicFetch = require('isomorphic-fetch');                                                               // 7\nMeteor.methods({                                                                                             // 9\n    'setupUnsplash': function () {                                                                           // 10\n        unsplash = new Unsplash({                                                                            // 11\n            applicationId: \"bb5b9c84132fd7a81bb83c76f31682d365611a88e4c4787c15c10e6f5c0dda1e\",               // 12\n            secret: \"449740b9a733347f3476d7c87aff43054cb36c78b40ef88d8593605926d7ddb5\",                      // 13\n            callbackUrl: \"localhost:3000\"                                                                    // 14\n        });                                                                                                  // 11\n    },                                                                                                       // 16\n    'searchKeyword': function (key) {                                                                        // 17\n        return unsplash.search.photos(key, 1, 10).then(toJson).then(function (json) {                        // 18\n            return json;                                                                                     // 21\n        });                                                                                                  // 22\n    },                                                                                                       // 23\n    'getRandomPhoto': function () {                                                                          // 24\n        return unsplash.photos.getRandomPhoto().then(toJson).then(function (json) {                          // 25\n            return json;                                                                                     // 28\n        });                                                                                                  // 29\n    },                                                                                                       // 30\n    'getPhoto': function (id) {                                                                              // 31\n        return unsplash.photos.getPhoto(id).then(toJson).then(function (json) {                              // 32\n            return json;                                                                                     // 35\n        });                                                                                                  // 36\n    }                                                                                                        // 37\n});                                                                                                          // 9\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}},\"i18n\":{\"en.i18n.json\":function(){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// i18n/en.i18n.json                                                                                         //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar _ = Package.underscore._,\n    package_name = \"project\",\n    namespace = \"project\";\n\nif (package_name != \"project\") {\n    namespace = TAPi18n.packages[package_name].namespace;\n}\nTAPi18n._enable({\"helper_name\":\"_\",\"supported_languages\":null,\"i18n_files_route\":\"/tap-i18n\",\"preloaded_langs\":[],\"cdn_path\":null});\nTAPi18n.languages_names[\"en\"] = [\"English\",\"English\"];\n// integrate the fallback language translations \ntranslations = {};\ntranslations[namespace] = {\"branding\":\"uhs.life\",\"tagline\":\"Built by students, for everyone.\",\"loading\":\"Loading...\",\"login\":{\"title\":\"Login\",\"main_btn\":\"Login With Gapps\",\"about\":\"About\",\"branding\":\"uhs.life\",\"help\":\"Help Center\",\"legal\":\"Legal Stuff\",\"read_more\":\"Read More\",\"welcome\":\"Welcome\"},\"nav\":{\"left\":\"MENU\",\"right\":\"SEARCH\",\"close\":\"CLOSE\",\"search_prompt\":{\"init\":\"Type something in the box above to search\"},\"logout\":\"LOGOUT\",\"side_items\":{\"stream\":\"Stream\",\"stories\":\"Stories\",\"marks\":\"Academics\",\"suggest\":\"Suggestions to Admin\",\"admin\":\"Dashboard\"},\"teach\":{\"login\":\"Please Login to\",\"submit_login\":\"Login\",\"connect\":\"Connect your Teach Assist Account\"}},\"stream\":{\"all\":\"All\",\"time_range\":\"Effective\",\"read_more\":\"Read More\",\"no\":\"There are no announcements today! 😅\"},\"details\":{\"scroll\":\"Scroll Down\",\"posted_date\":\"Posted\",\"course\":{\"knowledge\":\"Knowledge\",\"thinking\":\"Thinking\",\"communication\":\"Communication\",\"application\":\"Application\",\"culminating\":\"Culminating\",\"other\":\"Other\",\"menu\":{\"assess\":\"Assessments\",\"insights\":\"Insights\",\"resources\":\"Resources\"},\"expand_a\":\"You got\",\"expand_b\":\"out of\",\"no\":\"No Marks Available\",\"weight\":\"Weight\",\"timeline_graph\":\"Timeline of Your Mark\",\"assignments_graph\":\"Section Marks by Assignment\"}},\"first\":{\"greet\":\"Hello There!\",\"greet_more\":\"Thank you for signing up for uhs.life! Since it's your first time here, we would like to know some things about you, it's really short\",\"teach\":\"Connect Your Teach Assist Account\",\"teach_more\":\"Connecting your teach assist enables you to view your marks, assignments, academic progress and find resources written by UHS teachers on your subject. You do not have to opt-in for this service, and you can opt-out any time. (You can opt-in later)\",\"teach_skip\":\"No, I do not want to connect my Teach Assist, please\",\"teach_t\":\"Do you teach any courses or supervise any clubs?\",\"teach_t_more\":\"Selecting these will help us build your profile, if you don't have any or prefer not to tell simply click skip.\",\"teach_t_skip\":\"This section does not apply to me, I want to\",\"news\":\"Sign Up For Newsletter Subscription\",\"news_more\":\"We offer weekly briefings on everything that happened in our school and tips and tricks on studying at Unionville Highs School, why not subscribe to learn more about your school? You can opt-out and opt-in at any time. We'll never share your email with anyone else or spam you. Read more in our privacy policy.\",\"news_inst\":\"If you would like the news to be on your gapps account, simply click sign up, if you would like to use a personal email, change the email in the box below, then hit sign up. If you do not want to subscribe, click skip.\",\"news_skip\":\"No, I do not want weekly briefing, please\",\"confirm\":\"We are almost there...\",\"confirm_more\":\"We are almost done here, confirm the information bellow and agree to the Terms of Service of uhs.life.\",\"confirm_t_more\":\"We are almost done here, why not give yourself a tag line, this will appear under your name in a story post. Then confirm the information bellow, and agree to the Terms of Service of uhs.life.\",\"done\":\"Thank You!\",\"done_more\":\"Welcome to uhs.life\",\"btn\":{\"intro\":\"Let's go!\",\"authorize\":\"AUTHORIZE\",\"skip\":\"skip\",\"signup\":\"Sign Up\",\"done\":\"We are Done!\"},\"input\":{\"sNum\":\"Teach Assist Login\",\"sPass\":\"Teach Assist Password\",\"cName\":\"Your Name\",\"cNum\":\"Your Student Number\",\"cMail\":\"The email that we will be sending news letters to\",\"cTerms\":\"I have read and agreed with the Terms of Service\",\"tCourse\":\"What Courses do you teach? Select all that applies\",\"tClub\":\"What Clubs do you supervise? Select all that applies\"}}};\nTAPi18n._loadLangFileObject(\"en\", translations);\nTAPi18n._registerServerTranslator(\"en\", namespace);\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"server\":{\"main.js\":function(require,exports,module){\n\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                           //\n// server/main.js                                                                                            //\n//                                                                                                           //\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                             //\nvar Meteor = void 0;                                                                                         // 1\nmodule.watch(require(\"meteor/meteor\"), {                                                                     // 1\n    Meteor: function (v) {                                                                                   // 1\n        Meteor = v;                                                                                          // 1\n    }                                                                                                        // 1\n}, 0);                                                                                                       // 1\nmodule.watch(require(\"/imports/startup/server\"));                                                            // 1\nvar Posts = void 0;                                                                                          // 1\nmodule.watch(require(\"../imports/api/posts/posts.js\"), {                                                     // 1\n    Posts: function (v) {                                                                                    // 1\n        Posts = v;                                                                                           // 1\n    }                                                                                                        // 1\n}, 1);                                                                                                       // 1\nMeteor.startup(function () {                                                                                 // 7\n    Accounts.loginServiceConfiguration.remove({                                                              // 8\n        service: \"google\"                                                                                    // 9\n    });                                                                                                      // 8\n    Accounts.loginServiceConfiguration.insert({                                                              // 11\n        service: \"google\",                                                                                   // 12\n        clientId: \"152156454960-h8olc9vhu7juk77p71et1aekkr6qslm1.apps.googleusercontent.com\",                // 13\n        secret: \"nL2ZzKMfrfwja7VHa9jmlhvU\"                                                                   // 14\n    }); //on server restart, always re-run scheduler to reschedule all announcements                         // 11\n    //TODO                                                                                                   // 17\n                                                                                                             //\n    Posts.find({                                                                                             // 18\n        'meta.approved': true,                                                                               // 18\n        'meta.screeningStage': 3                                                                             // 18\n    }).forEach(function (obj) {                                                                              // 18\n        Meteor.call('scheduleAnnouncement', obj._id, function (err, res) {                                   // 19\n            if (err) {                                                                                       // 20\n                console.log(err);                                                                            // 21\n            }                                                                                                // 22\n        });                                                                                                  // 23\n    }); /*                                                                                                   // 24\n         Meteor.call('posts.getApprovedPosts', function(err, data) {                                         //\n         console.log(\"getting approved posts\");                                                              //\n         if (err) {                                                                                          //\n         console.log (err);                                                                                  //\n         } else {                                                                                            //\n         //console.log(data);                                                                                //\n         data.forEach(function(obj) {                                                                        //\n         Meteor.call('scheduleAnnouncement', obj._id, function(err, res) {                                   //\n         if (err) {                                                                                          //\n         console.log(err);                                                                                   //\n         }                                                                                                   //\n         });                                                                                                 //\n         });                                                                                                 //\n         }                                                                                                   //\n         })*/                                                                                                //\n});                                                                                                          // 41\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./i18n/en.i18n.json\");\nrequire(\"./server/main.js\");","servePath":"/app.js","sourceMap":{"version":3,"sources":["imports/api/blogCategories/blogCategories.js","imports/api/blogCategories/categoriesMethods.js","imports/api/categories/categories.js","imports/api/categories/categoriesMethods.js","imports/api/drafts/draftMethods.js","imports/api/drafts/drafts.js","imports/api/images/images.js","imports/api/images/imagesMethods.js","imports/api/organizations/clubs.js","imports/api/organizations/clubsMethods.js","imports/api/organizations/courses.js","imports/api/organizations/coursesMethods.js","imports/api/posts/posts.js","imports/api/posts/postsMethods.js","imports/api/suggestions/suggestionMethods.js","imports/api/suggestions/suggestions.js","imports/startup/server/accounts.js","imports/startup/server/algoliaPost.js","imports/startup/server/algoliaRemove.js","imports/startup/server/algoliaUpdate.js","imports/startup/server/categories.js","imports/startup/server/facebook.js","imports/startup/server/imports.js","imports/startup/server/index.js","imports/startup/server/mailchimp.js","imports/startup/server/scheduler.js","imports/startup/server/teachAssist.js","imports/startup/server/twitter.js","imports/startup/server/unsplash.js","server/main.js"],"names":["module","export","BlogCategories","Mongo","Collection","Meteor","isServer","publish","blogCategoriesPublication","find","watch","require","v","methods","details","categoryInfo","name","description","imageId","imgId","featured","tracking","numPost","lastestPostIds","createdDate","Date","children","isSubCategory","insert","query","remove","_id","id","newCategory","update","$set","Categories","categoriesPublication","Drafts","draftsPublication","limit","userId","json","Roles","userIsInRole","Error","err","content","console","error","draft","findOne","author","Images","imageStore","FS","Store","GridFS","stores","allow","download","imagesPublication","image","callback","log","fileObj","Clubs","clubsPublication","Courses","coursesPublication","names","codes","nameList","split","codeList","length","i","code","imgLink","Posts","postsPublication","announcementsPublication","userLevel","$or","blogsPublication","errStr","type","subType","headline","sDate","startDate","eDate","endDate","currentDate","getTime","meta","approved","screeningStage","display","title","subtitle","releaseDate","fetch","$ne","postId","response","obj","call","findOneAndUpdate","reason","Suggestions","accessLevel","users","suggestionsPublication","Banned","usersPublication","theUserPublication","usersLitePublication","Accounts","validateNewUser","user","email","services","google","indexOf","onCreateUser","options","profile","init","teacher","private","courses","token","hasNumbers","match","validateLoginAttempt","info","status","e","roles","setUserRoles","addUsersToRoles","client","AlgoliaSearch","index","initIndex","setSettings","searchableAttributes","newJson","tags","categories","addObject","bindEnvironment","objectID","addObjects","myID","deleteObject","announcement","saveObject","Map","set","text","toLowerCase","separators","keys","len","ans","key","has","includes","get","push","accessToken","appId","response2","appSec","HTTP","grant_type","client_id","client_secret","fb_exchange_token","data","Mailchimp","mailchimp","results","fname","lname","post","email_address","merge_fields","FNAME","LNAME","JSON","stringify","subjectLine","recipients","list_id","settings","subject_line","from_name","reply_to","template_id","campaignID","put","template","sections","schedule","announcementId","cDate","flag","setHours","setTime","setSeconds","getSeconds","j","scheduleJob","k","blogId","blog","rDate","student_number","password","res","parse","ERROR","student_id","subjects","subject_id","cat","catWeight","catExist","timeline","preParse","postParse","assessment","categoryMarks","cnt","_","each","assess","K","parseFloat","mark","outOf","weight","T","C","A","O","catTotalWeight","Math","round","Twit","consumer_key","consumer_secret","access_token","access_token_secret","substring","fs","getBase64Data","doc","buffer","Buffer","readStream","createReadStream","on","chunk","concat","toString","getBase64DataSync","wrapAsync","file","b64content","media_data","mediaIdStr","media_id_string","params","media_ids","Unsplash","toJson","es6Promise","isomorphicFetch","polyfill","unsplash","applicationId","secret","callbackUrl","search","photos","then","getRandomPhoto","getPhoto","startup","loginServiceConfiguration","service","clientId","forEach"],"mappings":"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","file":"/app.js","sourcesContent":["/**\r\n * Created by Yonglin Wang on 8/30/2017.\r\n */\r\nexport const BlogCategories = new Mongo.Collection('blogcategories');\r\n\r\nif (Meteor.isServer) {\r\n    Meteor.publish('blogCategories', function blogCategoriesPublication() {\r\n        return BlogCategories.find({});\r\n    });\r\n}","/**\r\n * Created by Yonglin Wang on 8/30/2017.\r\n */\r\nimport { BlogCategories } from './blogCategories.js'\r\n\r\nMeteor.methods({\r\n    'blogCategory.addNew': function (details) {\r\n        let categoryInfo = {\r\n            name: details.name,\r\n            description: details.description,\r\n            imageId: details.imgId || null,\r\n            featured: details.featured || false,\r\n            tracking: {\r\n                numPost: 0,\r\n                lastestPostIds: []\r\n            },\r\n            createdDate: new Date(),\r\n            children: [],\r\n            isSubCategory: false\r\n        };\r\n        BlogCategories.insert(categoryInfo);\r\n    },\r\n    'blogCategory.remove': function (query) {\r\n        BlogCategories.remove({_id: query});\r\n    },\r\n    'blogCategory.update': function (id, details) {\r\n        let newCategory = {\r\n            name: details.name,\r\n            description: details.description,\r\n            imageId: details.imgId,\r\n            featured: details.featured,\r\n            tracking: {\r\n                numPost: 0,\r\n                lastestPostIds: []\r\n            },\r\n            createdDate: new Date(),\r\n            children: [],\r\n            isSubCategory: false\r\n        };\r\n        BlogCategories.update({_id: id},{$set: newCategory});\r\n    }\r\n});","/**\r\n * Created by Yonglin Wang on 8/30/2017.\r\n */\r\nexport const Categories = new Mongo.Collection('categories');\r\n\r\nif (Meteor.isServer) {\r\n    Meteor.publish('categories', function categoriesPublication() {\r\n        return Categories.find({});\r\n    });\r\n}","/**\r\n * Created by Yonglin Wang on 8/30/2017.\r\n */\r\nimport { Categories } from './categories.js'\r\n\r\nMeteor.methods({\r\n    'category.addNew': function (details) {\r\n        let categoryInfo = {\r\n            name: details.name,\r\n            description: details.description,\r\n            imageId: details.imgId || null,\r\n            featured: details.featured || false,\r\n            tracking: {\r\n                numPost: 0,\r\n                lastestPostIds: []\r\n            },\r\n            createdDate: new Date(),\r\n            children: [],\r\n            isSubCategory: false\r\n        };\r\n        Categories.insert(categoryInfo);\r\n    },\r\n    'category.remove': function (query) {\r\n        Categories.remove({_id: query});\r\n    },\r\n    'category.update': function (id, details) {\r\n        let newCategory = {\r\n            name: details.name,\r\n            description: details.description,\r\n            imageId: details.imgId,\r\n            featured: details.featured,\r\n            tracking: {\r\n                numPost: 0,\r\n                lastestPostIds: []\r\n            },\r\n            createdDate: new Date(),\r\n            children: [],\r\n            isSubCategory: false\r\n        };\r\n        Categories.update({_id: id},{$set: newCategory});\r\n    }\r\n});","import { Meteor } from 'meteor/meteor';\r\nimport { Drafts } from './drafts.js';\r\n\r\nif (Meteor.isServer) {\r\n   Meteor.publish('drafts', function draftsPublication(limit) {\r\n    return Drafts.find({\r\n        'author': this.userId\r\n    },{\r\n        limit: limit\r\n    });\r\n  });\r\n}\r\n\r\nMeteor.methods({\r\n    'drafts.postDraftTextImage' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher', 'admin', 'announcementEditor'])) {\r\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        //adds draft to the Drafts collection\r\n        Drafts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    },\r\n    'drafts.postDraftText' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher', 'admin', 'announcementEditor'])) {\r\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        //adds draft to the Drafts collection\r\n        Drafts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    },\r\n    'drafts.postDraftImage' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher', 'admin', 'announcementEditor'])) {\r\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        //adds draft to the Drafts collection\r\n        Drafts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    },\r\n    'drafts.postDraftBlog' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher', 'admin', 'announcementEditor'])) {\r\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        //adds draft to the Drafts collection\r\n        Drafts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    },\r\n    'drafts.remove' : function(id) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher', 'admin', 'announcementEditor'])) {\r\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\r\n        }\r\n        let draft = Drafts.findOne({_id: id});\r\n        if(draft.author !== this.userId){\r\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\r\n        }\r\n        return Drafts.remove({_id: id});\r\n   }\r\n});\r\n","import { Mongo } from 'meteor/mongo';\r\nexport const Drafts = new Mongo.Collection('drafts');\r\n\r\n","var imageStore = new FS.Store.GridFS(\"images\");\r\n\r\nexport const Images = new FS.Collection(\"images\", {\r\n  stores: [imageStore]\r\n});\r\n\r\n//Set the permissions for Images collection\r\nImages.allow({\r\n    insert: function(){\r\n       return Roles.userIsInRole(this.userId, ['teacher', 'admin']);\r\n    },\r\n    update: function(){\r\n       return Roles.userIsInRole(this.userId, ['teacher', 'admin']);\r\n    },\r\n    remove: function(){\r\n       return Roles.userIsInRole(this.userId, ['teacher', 'admin']);\r\n    },\r\n    download: function(){\r\n       return Roles.userIsInRole(this.userId, ['teacher', 'admin']);\r\n    }\r\n});\r\n","import { Images } from './images.js';\r\n\r\nif (Meteor.isServer) {\r\n   Meteor.publish('images', function imagesPublication() {\r\n    return Images.find({});  //TODO only show drafts of current user\r\n  });\r\n}\r\n\r\nMeteor.methods({\r\n   'images.insert' : function(image, callback) {\r\n      console.log(image);\r\n      Images.insert(image, function(err, fileObj) {\r\n         if (err) {\r\n            callback(err, null);\r\n         } else {\r\n            console.log('upload success');\r\n            callback(null, fileObj);\r\n         }\r\n      })\r\n   }\r\n})\r\n","/**\r\n * Created by Yonglin Wang on 9/16/2017.\r\n */\r\nexport const Clubs = new Mongo.Collection('clubs');\r\n\r\nif(Meteor.isServer){\r\n    Meteor.publish('allClubs', function clubsPublication(limit) {\r\n        return Clubs.find({},{\r\n            limit: limit\r\n        })\r\n    });\r\n}\r\n\r\nClubs.allow({\r\n    insert: function(){\r\n        return true;\r\n    },\r\n    update: function(){\r\n        return true;\r\n    },\r\n    remove: function(){\r\n        return true;\r\n    }\r\n});\r\n","/**\r\n * Created by Yonglin Wang on 9/16/2017.\r\n */\r\nimport { Clubs } from './clubs.js'\r\n\r\nif(Meteor.isServer){\r\n    Meteor.methods({\r\n        'clubs.add': function (json) {\r\n            if(!Roles.userIsInRole(this.userId,'admin')){\r\n                throw Meteor.Error(403, \"Your account is not allowed to do so.\")\r\n            }\r\n            Clubs.insert(json);\r\n        },\r\n        'clubs.remove': function (id) {\r\n            if(!Roles.userIsInRole(this.userId,'admin')){\r\n                throw Meteor.Error(403, \"Your account is not allowed to do so.\")\r\n            }\r\n            Clubs.remove(id);\r\n        }\r\n    })\r\n}","/**\r\n * Created by Yonglin Wang on 9/16/2017.\r\n */\r\nexport const Courses = new Mongo.Collection('courses');\r\n\r\nif (Meteor.isServer){\r\n    Meteor.publish('allCourses', function coursesPublication(limit) {\r\n        return Courses.find({},{\r\n            limit: limit\r\n        });\r\n    });\r\n}","/**\r\n * Created by Yonglin Wang on 9/16/2017.\r\n */\r\nimport { Courses } from './courses.js'\r\n\r\n\r\nMeteor.methods({\r\n    'courses.addSeveral': function (names, codes) {\r\n        let nameList = names.split('\\n');\r\n        let codeList = codes.split('\\n');\r\n        console.log(nameList.length);\r\n        console.log(codeList.length);\r\n        if(nameList.length !== codeList.length){\r\n            Meteor.Error(400,\"List not the same length\")\r\n        }\r\n        for(let i = 0; i < nameList.length; i++){\r\n            let json = {\r\n                name: nameList[i],\r\n                code: codeList[i],\r\n                description: \"\",\r\n                imgLink: null\r\n            };\r\n            Courses.insert(json)\r\n        }\r\n    }\r\n})","import { Mongo } from 'meteor/mongo';\r\n\r\nexport const Posts = new Mongo.Collection('posts');","import { Meteor } from 'meteor/meteor';\r\nimport { Posts } from './posts.js';\r\n\r\nif (Meteor.isServer) {\r\n    Meteor.publish('posts', function postsPublication() {\r\n        if (this.userId) {\r\n            console.log(this.userId);\r\n            return Posts.find({});\r\n        }\r\n    });\r\n    Meteor.publish('announcements', function announcementsPublication(limit) {\r\n        let userLevel = '1';\r\n        if(Roles.userIsInRole(this.userId, 'student')){\r\n            userLevel = '2';\r\n        }else if(Roles.userIsInRole(this.userId, ['teacher', 'admin'])){\r\n            userLevel = '3';\r\n        }\r\n        return Posts.find({\r\n            'type': 'announcement',\r\n            'meta.approved': true,\r\n            $or: [{\r\n                'meta.visibility': '1'\r\n            },{\r\n                'meta.visibility': userLevel\r\n            }]\r\n        },{\r\n            limit: limit\r\n        });\r\n    });\r\n    Meteor.publish('blogs', function blogsPublication(limit) {\r\n        return Posts.find({\r\n            'type': 'blog'\r\n        },{\r\n            limit: limit\r\n        });\r\n    });\r\n    Meteor.publish('postsByCourse', function (code, limit) {\r\n        return Posts.find({\r\n            'type': 'blog',\r\n            'organizationsValues': code\r\n        },{\r\n            limit: limit\r\n        });\r\n    });\r\n    Meteor.publish('postsByUser', function (limit) {\r\n        return Posts.find({\r\n            'author': this.userId\r\n        }, {\r\n            limit: limit\r\n        });\r\n    })\r\n}\r\n\r\nMeteor.methods({\r\n    'posts.removeAll' : function() {\r\n        throw new Meteor.Error(403, \"No, just no.\");\r\n        //Posts.remove({});\r\n    },\r\n    'posts.postTextImage' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher','admin','announcementEditor'])) {\r\n            throw new Meteor.Error(403, \"You do not have permission to execute the following action.\");\r\n        }\r\n        let errStr = \"\", err = false;\r\n        if (json.type !== \"announcement\") {\r\n            err = true;\r\n            errStr += \"Not an announcement. \";\r\n        }\r\n        if (json.subType !== \"imageText\") {\r\n            err = true;\r\n            errStr += \"Not correct announcement type. \";\r\n        }\r\n        if (!json.headline) {\r\n            err = true;\r\n            errStr += \"Missing headline. \";\r\n        }\r\n        if (!json.content) {\r\n            err = true;\r\n            errStr += \"Missing content. \";\r\n        }\r\n        console.log(json.imgId);\r\n        if (!json.imgId) {\r\n            err = true;\r\n            errStr += \"Missing image. \";\r\n        }\r\n        let sDate = new Date(json.startDate),\r\n            eDate = new Date(json.endDate),\r\n            currentDate = new Date();\r\n        if(sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()){\r\n            err = true;\r\n            errStr = \"Your date selection is illegal. \"\r\n        }\r\n        if (err) {\r\n            throw new Meteor.Error(400, errStr);\r\n        }\r\n        json.meta.approved = false;\r\n        json.meta.screeningStage = 0;\r\n        json.meta.display = false;\r\n\r\n        //adds draft to the Posts collection\r\n        Posts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n    },\r\n    'posts.postText' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher','admin','announcementEditor'])) {\r\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        let errStr = \"\", err = false;\r\n        if (json.type !== \"announcement\") {\r\n            err = true;\r\n            errStr += \"Not an announcement. \";\r\n        }\r\n        if (json.subType !== \"textOnly\") {\r\n            err = true;\r\n            errStr += \"Not correct announcement type. \";\r\n        }\r\n        if (!json.headline) {\r\n            err = true;\r\n            errStr += \"Missing headline. \";\r\n        }\r\n        if (!json.content) {\r\n            err = true;\r\n            errStr += \"Missing content. \";\r\n        }\r\n        let sDate = new Date(json.startDate),\r\n            eDate = new Date(json.endDate),\r\n            currentDate = new Date();\r\n        if(sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()){\r\n            err = true;\r\n            errStr = \"Your date selection is illegal. \"\r\n        }\r\n        if (err) {\r\n            throw new Meteor.Error(400, errStr);\r\n        }\r\n\r\n        json.meta.approved = false;\r\n        json.meta.screeningStage = 0;\r\n        json.meta.display = false;\r\n\r\n        //adds draft to the Posts collection\r\n        Posts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    },\r\n    'posts.postImage' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher','admin','announcementEditor'])) {\r\n            throw new Meteor.Error(403, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        let errStr = \"\", err = false;\r\n        if (json.type !== \"announcement\") {\r\n            err = true;\r\n            errStr += \"Not an announcement. \";\r\n        }\r\n        if (json.subType !== \"imageOnly\") {\r\n            err = true;\r\n            errStr += \"Not correct announcement type. \";\r\n        }\r\n        console.log(json.headline);\r\n        if (!json.headline) {\r\n            err = true;\r\n            errStr += \"Missing headline. \";\r\n        }\r\n        if (!json.imgId) {\r\n            err = true;\r\n            errStr += \"Missing image. \";\r\n        }\r\n        let sDate = new Date(json.startDate),\r\n            eDate = new Date(json.endDate),\r\n            currentDate = new Date();\r\n        if(sDate.getTime() < currentDate.getTime() || currentDate.getTime() > eDate.getTime() || sDate.getTime() > eDate.getTime()){\r\n            err = true;\r\n            errStr = \"Your date selection is illegal. \"\r\n        }\r\n        if (err) {\r\n            throw new Meteor.Error(400, errStr);\r\n        }\r\n\r\n        json.meta.approved = false;\r\n        json.meta.screeningStage = 0;\r\n        json.meta.display = false;\r\n\r\n        //adds draft to the Posts collection\r\n        Posts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    },\r\n    'posts.postBlog' : function(json) {\r\n        if (!Roles.userIsInRole( this.userId, ['teacher','admin','blogEditor'])) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        let errStr = \"\", err = false;\r\n        if (json.type !== \"blog\") {\r\n            err = true;\r\n            errStr += \"Not a blog. \";\r\n        }\r\n        if (!json.title) {\r\n            err = true;\r\n            errStr += \"Missing title. \";\r\n        }\r\n        if (!json.subtitle) {\r\n            err = true;\r\n            errStr += \"Missing subtitle. \";\r\n        }\r\n        if (!json.content) {\r\n            err = true;\r\n            errStr += \"Missing content. \";\r\n        }\r\n        if (!json.imgId) {\r\n            err = true;\r\n            errStr += \"Missing image. \";\r\n        }\r\n        let sDate = new Date(json.releaseDate),\r\n            currentDate = new Date();\r\n        if(sDate < currentDate){\r\n            err = true;\r\n            errStr = \"Your date selection is illegal. \"\r\n        }\r\n        if (err) {\r\n            throw new Meteor.Error(400, errStr);\r\n        }\r\n\r\n        json.meta.approved = false;\r\n        json.meta.screeningStage = 0;\r\n        json.meta.display = false;\r\n\r\n        //adds draft to the Posts collection\r\n        Posts.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n    },\r\n    'posts.getPostById' : function(id) {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n        return Posts.findOne({'_id':id});\r\n    },\r\n    'posts.getDisplayPosts' : function() {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        return Posts.find({'meta.approved':true, 'display': true}).fetch();\r\n    },\r\n    'posts.getUnapprovedPosts' : function() {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        return Posts.find({'meta.approved':false, 'meta.screeningStage': {$ne: -1}}).fetch();\r\n    },\r\n    'posts.getApprovedPosts' : function() {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        return Posts.find({'meta.approved':true, 'meta.screeningStage': 3}).fetch();\r\n    },\r\n    'posts.getRejectedPosts' : function() {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        return Posts.find({'meta.approved':false, 'meta.screeningStage': -1}).fetch();\r\n    },\r\n    'posts.getPostsByUserId' : function (userId) {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        return Posts.find({'authorId': userId}).fetch();\r\n    },\r\n    'posts.removePost': function (postId) {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        Posts.remove({_id: postId});\r\n    },\r\n    'posts.approvePost' : function(postId) {\r\n        if (!Roles.userIsInRole( this.userId, ['admin'])) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        Posts.update({'_id':postId}, { $set: {'meta.approved':true, 'meta.screeningStage':3}}, function (err, response) {\r\n            if (err) {\r\n                console.log(err);\r\n            } else {\r\n                let obj = Posts.findOne({'_id':postId});\r\n                let type = obj.type, subType = obj.subType;\r\n\r\n                Meteor.call('scheduleAnnouncement', postId, function(err) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    }\r\n                });\r\n                if (type === 'announcement') {\r\n                    if (subType === 'textOnly') {\r\n                        Meteor.call('postTextAlgolia', postId);\r\n                    } else if (subType === 'imageOnly') {\r\n                        Meteor.call('postImageAlgolia', postId);\r\n                    } else {\r\n                        Meteor.call('postTextImageAlgolia', postId);\r\n                    }\r\n                } else {\r\n                    Meteor.call('postBlogAlgolia', postId);\r\n                }\r\n\r\n                //Post on twitter\r\n                Meteor.call('setupTwitterAPI', function(err, response) {\r\n                    if(err) {\r\n                        console.log(err);\r\n                    } else {\r\n\r\n                        if (type === 'announcement') {\r\n                            if (subType === 'textOnly') {\r\n                                Meteor.call('postTextAnnouncementTwitter', obj, function(err) {\r\n                                    if (err) {\r\n                                        console.log(err);\r\n                                    }\r\n                                });\r\n                            } else if (subType === 'imageOnly') {\r\n                                Meteor.call('postImageAnnouncementTwitter', obj, function(err) {\r\n                                    if (err) {\r\n                                        console.log(err);\r\n                                    }\r\n                                });\r\n                            } else {\r\n                                Meteor.call('postTextImageAnnouncementTwitter', obj, function(err) {\r\n                                    if (err) {\r\n                                        console.log(err);\r\n                                    }\r\n                                });\r\n                            }\r\n                        }  else {\r\n                            console.log('This post is not announcement');\r\n                            return -1;\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n        });\r\n    },\r\n    'posts.unApprovePost' : function (postId) {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        Posts.findOneAndUpdate ({'_id':postId}, { $set: {'meta.approved':false, 'meta.screeningStage':0, 'display': false}});\r\n    },\r\n    'posts.rejectPost' : function (postId, reason) {\r\n        if (!Roles.userIsInRole( this.userId, ['admin'])) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n        Posts.update ({'_id':postId}, { $set: {'meta.screeningStage': -1, 'meta.rejectedReason': reason}});\r\n    },\r\n    'posts.unRejectPost' : function (postId) {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n            Roles.userIsInRole( this.userId, 'admin') ||\r\n            Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        Posts.findOneAndUpdate ({'_id':postId}, { $set: {'meta.screeningStage': 0}});\r\n    }\r\n});\r\n","import { Suggestions } from './suggestions.js';\r\n\r\nMeteor.methods({\r\n    'suggestions.postSuggestion' : function(json) {\r\n        let accessLevel = Meteor.users.find({_id:Meteor.userId()}).accessLevel;\r\n        if (accessLevel === 'teacher' || accessLevel === 'admin') {\r\n            //TODO\r\n        }\r\n        let errStr = \"\", err = false;\r\n        if (json.type !== \"suggestion\") {\r\n            err = true;\r\n            errStr += \"Not an announcement. \";\r\n        }\r\n        if (!json.headline) {\r\n            err = true;\r\n            errStr += \"Missing headline. \";\r\n        }\r\n        if (!json.content) {\r\n            err = true;\r\n            errStr += \"Missing content. \";\r\n        }\r\n        if (err) {\r\n            throw new Meteor.Error(400, errStr);\r\n        }\r\n\r\n        //adds draft to the Posts collection\r\n        Suggestions.insert(json, function(err, content) {\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error(err);\r\n            }\r\n        });\r\n\r\n    },\r\n    'suggestions.getSuggestions' : function() {\r\n        return Suggestions.find();\r\n    },\r\n    'suggestions.removeSuggestions' : function(id) {\r\n        return Suggestions.remove({'_id': id});\r\n    }\r\n})\r\n","import { Mongo } from 'meteor/mongo';\r\n\r\nexport const Suggestions = new Mongo.Collection('suggestions');\r\n\r\nif (Meteor.isServer) {\r\n    Meteor.publish('suggestions', function suggestionsPublication() {\r\n        if (this.userId) {\r\n            return Suggestions.find({});\r\n        }\r\n    });\r\n}","import { Meteor } from 'meteor/meteor';\r\n\r\nconst Banned = new Mongo.Collection('blacklist');\r\n\r\nMeteor.users.allow({\r\n   update: function () {\r\n       return true;\r\n   },\r\n    remove: function () {\r\n        return true;\r\n    }\r\n});\r\n\r\nif(Meteor.isServer){\r\n    Meteor.publish('allUsers', function usersPublication() {\r\n        return Meteor.users.find({});\r\n    });\r\n    Meteor.publish('theUser', function theUserPublication() {\r\n        return Meteor.users.find({_id: this.userId})\r\n    });\r\n    Meteor.publish('allUsersLite', function usersLitePublication() {\r\n        return Meteor.users.find({},{\r\n            'services.google.picture': 1,\r\n            'services.google.name': 1\r\n        });\r\n    });\r\n}\r\n\r\nAccounts.validateNewUser(function (user) {\r\n    const email = user.services.google.email;\r\n    if (email.indexOf(\"gapps.yrdsb.ca\") !== -1) {\r\n        //check for teacher or student\r\n        return true;\r\n\r\n    } else {\r\n        console.log('not gapps yrdsb account');\r\n        throw new Meteor.Error(403, \"Currently uhs.life is only available to YRDSB GAPPS users, stay tuned for parental support!\");\r\n    }\r\n});\r\n\r\nAccounts.onCreateUser(function (options,user){\r\n    if (!user.profile) {\r\n        user.profile = {\r\n            init: false,\r\n            teacher: false\r\n        };\r\n        user.private = {\r\n            courses: null,\r\n            token: null\r\n        }\r\n    }\r\n    const email = user.services.google.email;\r\n    const hasNumbers = email.match(/\\d+/g);\r\n    if (!hasNumbers) {\r\n        user.profile.teacher = true;\r\n    }\r\n    return user;\r\n});\r\nAccounts.validateLoginAttempt(function (info) {\r\n    let status = true;\r\n    try{\r\n        status = !Roles.userIsInRole(info.user._id, 'banned')\r\n    }catch(e){\r\n        status = true;\r\n    }\r\n    console.log(status);\r\n    if(!status){\r\n        throw new Meteor.Error(403, \"Sorry you have been banned from uhs.life by the administration for the following reason: \")\r\n    }\r\n    return true;\r\n});\r\nMeteor.methods({\r\n    'initUserProfile': function (id,info) {\r\n        Meteor.users.update({_id: id}, {$set: {\"profile.init\": true}});\r\n        Meteor.users.update({_id: id}, {$set: {\"profile.terms\": true}});\r\n    },\r\n    'addUserToRole': function (userId, roles) {\r\n        Roles.setUserRoles(userId, roles);\r\n    },\r\n    'accounts.setPersonalEmail': function (email) {\r\n        Meteor.users.update({_id: this.userId}, {$set: {\"profile.email\": email}});\r\n    },\r\n    'accounts.initRoles': function () {\r\n        const user = Meteor.users.findOne({_id: this.userId});\r\n        const email = user.services.google.email;\r\n        const hasNumbers = email.match(/\\d+/g);\r\n        if (hasNumbers) {\r\n            Roles.addUsersToRoles(this.userId,['student']);\r\n        } else {\r\n            Roles.addUsersToRoles(this.userId,['teacher'])\r\n        }\r\n    },\r\n    'accounts.ban': function (id,reason) {\r\n        if(!Roles.userIsInRole(this.userId,'admin')){\r\n            throw new Meteor.Error(403, \"You do not have the power to ban a user.\")\r\n        }\r\n        Meteor.users.update({_id: id},{$set: {'private.bannedReason':reason}});\r\n        Roles.addUsersToRoles(id, 'banned');\r\n    }\r\n});","//Server side method to be called from client to post announcement\r\n\r\n// api key that connects the client side to Algolia's server\r\nvar client = AlgoliaSearch(\"GJDCY9DKEW\", \"31f60dc3cc7926270934909c81f867ee\");\r\n\r\n// select indice (collection) of data to be accesed. In this case it would be the announcements\r\nvar index = client.initIndex('announcement');\r\n\r\nindex.setSettings({\r\n    searchableAttributes: [\r\n        'headline',\r\n        'content',\r\n        'type',\r\n        'tags',\r\n        'categories',\r\n        'subType'\r\n    ]\r\n});\r\n\r\nimport {Posts} from '../../api/posts/posts.js';\r\n\r\nMeteor.methods({\r\n    /**\r\n    @params title : string; text: string; fileType: string; textFirst: boolean\r\n    **/\r\n    'postTextImageAlgolia' : function(postId) {\r\n        let json = Posts.findOne({'_id':postId});\r\n\r\n        let newJson = {\r\n            type: json.type,\r\n            subType: json.subType,\r\n            headline: json.headline,\r\n            content: json.content,\r\n            tags: json.tags,\r\n            categories: json.categories,\r\n            imgId: json.imgId\r\n        }\r\n        //adds object to the indice announcement\r\n        index.addObject(newJson, Meteor.bindEnvironment(function(err, content) {\r\n\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error('Algolia returned an error', err);\r\n            } else {\r\n                //prints the announcement posted\r\n                console.log(content);\r\n                Posts.update({'_id': postId}, { $set: {'meta.algoliaId':content.objectID}}, function(err, response) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    } else {\r\n                        console.log(response);\r\n                    }\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    'postTextAlgolia' : function(postId) {\r\n        let json = Posts.findOne({'_id':postId});\r\n\r\n        let newJson = {\r\n            type: json.type,\r\n            subType: json.subType,\r\n            headline: json.headline,\r\n            content: json.content,\r\n            tags: json.tags,\r\n            categories: json.categories,\r\n        }\r\n\r\n        //adds object to the indice announcement\r\n        index.addObject(newJson, Meteor.bindEnvironment(function(err, content) {\r\n\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error('Algolia returned an error', err);\r\n            } else {\r\n                //prints the announcement posted\r\n                console.log(content);\r\n                Posts.update({'_id':postId}, { $set: {'meta.algoliaId':content.objectID}}, function(err, response) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    } else {\r\n                        console.log(response);\r\n                    }\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    'postImageAlgolia' : function(postId) {\r\n        let json = Posts.findOne({'_id':postId});\r\n\r\n        let newJson = {\r\n            type: json.type,\r\n            subType: json.subType,\r\n            headline: json.headline,\r\n            tags: json.tags,\r\n            categories: json.categories,\r\n            imgId: json.imgId\r\n        }\r\n\r\n        //adds object to the indice announcement\r\n        index.addObject(newJson, Meteor.bindEnvironment(function(err, content) {\r\n\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error('Algolia returned an error', err);\r\n            } else {\r\n                //prints the announcement posted\r\n                console.log(content);\r\n                Posts.update({'_id':postId}, { $set: {'meta.algoliaId':content.objectID}}, function(err, response) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    } else {\r\n                        console.log(response);\r\n                    }\r\n                });\r\n            }\r\n        }));\r\n    },\r\n    'postBlogAlgolia' : function(postId) {\r\n        let json = Posts.findOne({'_id':postId});\r\n        let newJson = {\r\n            type: json.type,\r\n            headline: json.title,\r\n            subType: json.subtitle,\r\n            content: json.content,\r\n            tags: json.tags,\r\n            categories: json.categories,\r\n            imgId: json.imgId\r\n        }\r\n        //adds object to the indice announcement\r\n        index.addObjects(newJson, Meteor.bindEnvironment(function(err, content) {\r\n\r\n            //error catch for algolia issues\r\n            if(err) {\r\n                console.error('Algolia returned an error', err);\r\n            } else {\r\n                //prints the announcement posted\r\n                Posts.update({'_id':postId}, { $set: {'meta.algoliaId':content.objectID}}, function(err, response) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    } else {\r\n                        console.log(response);\r\n                    }\r\n                });\r\n                console.log(content);\r\n\r\n            }\r\n        }));\r\n    },\r\n});\r\n","//Server side method to be called from client to remove an existing announcement\r\n\r\n// api key that connects the client side to Algolia's server\r\nvar client = AlgoliaSearch(\"GJDCY9DKEW\", \"31f60dc3cc7926270934909c81f867ee\");\r\n\r\n// select indice (collection) of data to be accesed. In this case it would be the announcements\r\nvar index = client.initIndex('announcement');\r\n\r\nMeteor.methods({\r\n    'removeAnnouncement' : function(myID) {\r\n\r\n        //removes object to the indice announcement\r\n        //myID is hidden and can be accessed using .objectID on the announcement\r\n        index.deleteObject('myID', function(err) {\r\n            if(err) {\r\n                //error catch (server down, or algolia issue)\r\n                console.error('Algolia returned an error', err);\r\n            } else {\r\n                //object succesfully removed\r\n                console.log('announcement removed');\r\n            }\r\n        });\r\n\r\n    },\r\n});","//Server side method to be called from client to update an existing announcement\r\n\r\n// api key that connects the client side to Algolia's server\r\nvar client = AlgoliaSearch(\"GJDCY9DKEW\", \"31f60dc3cc7926270934909c81f867ee\");\r\n\r\n// select indice (collection) of data to be accesed. In this case it would be the announcements\r\nvar index = client.initIndex('announcement');\r\n\r\nMeteor.methods({\r\n    'updateAnnouncement' : function(announcement, description, imgId, myID) {\r\n\r\n        //updates object to the indice announcement\r\n        //myID is hidden and can be accessed using .objectID on the announcement\r\n        index.saveObject({\r\n            announcement: announcement,\r\n            description: description,\r\n            imgId: imgId,\r\n            objectID: myID\r\n        }, function(err, content) {\r\n\r\n            //error catch (server down, or algolia issue)\r\n            if(err) {\r\n                console.error('Algolia returned an error', err);\r\n            } else {\r\n\r\n                //Spits out the updated announcement with the keyword\r\n                console.log('content', content);\r\n            }\r\n        });\r\n\r\n\r\n    },\r\n});","if (Meteor.isServer) {\r\n    Meteor.publish('keywords', function postsPublication() {\r\n        return Posts.find({});\r\n    });\r\n}\r\n\r\nconst categories = new Map();\r\n//athletics\r\ncategories.set('gym', 'athletics');\r\ncategories.set('athletic', 'athletics');\r\ncategories.set('athletics', 'athletics')\r\ncategories.set('sport', 'athletics');\r\ncategories.set('sports', 'athletics');\r\ncategories.set('volleyball', 'athletics');\r\ncategories.set('soccer', 'athletics');\r\ncategories.set('frisbee', 'athletics');\r\ncategories.set('workout', 'athletics');\r\ncategories.set('curling', 'athletics');\r\ncategories.set('baseball', 'athletics');\r\ncategories.set('basketball', 'athletics');\r\ncategories.set('football', 'athletics');\r\ncategories.set('volleyball', 'athletics');\r\n\r\n//academics\r\ncategories.set('math', 'academics');\r\ncategories.set('english', 'academics');\r\ncategories.set('calculus', 'academics');\r\ncategories.set('science', 'academics');\r\ncategories.set('physics', 'academics');\r\ncategories.set('chemistry', 'academics');\r\ncategories.set('biology', 'academics');\r\ncategories.set('computing', 'academics');\r\ncategories.set('academics', 'academics');\r\ncategories.set('academic', 'academics');\r\ncategories.set('class', 'academics');\r\ncategories.set('tutor', 'academics');\r\ncategories.set('marks', 'academics');\r\ncategories.set('mark', 'academics');\r\n\r\n//competition\r\ncategories.set('contest', 'competition');\r\ncategories.set('contests', 'competition');\r\ncategories.set('competition', 'competition');\r\ncategories.set('competitions', 'competition');\r\ncategories.set('vs', 'competition');\r\ncategories.set('fight', 'competition');\r\ncategories.set('battle', 'competition');\r\n\r\nMeteor.methods({\r\n   //return all categories found within text\r\n   'keywords.getKeywords': function(text) {\r\n      text = text.toLowerCase();\r\n      var separators = [' , ', ', ', ',', ' ,', ' '];\r\n      //\r\n      var keys = text.split(/[ ,.]+/);\r\n      //console.log(keys);\r\n      var len = keys.length;\r\n      var ans = [];\r\n      for (var i = 0; i < len; ++i) {\r\n         var key = keys[i];\r\n         if (categories.has(key)) {\r\n            if (!ans.includes(categories.get(key))) {\r\n               ans.push(categories.get(key));\r\n            }\r\n         }\r\n      }\r\n      return ans;\r\n   }\r\n})\r\n","import { Meteor } from 'meteor/meteor';\r\n\r\nMeteor.methods({\r\n    //return the facebook app id\r\n    'getFBAppId' : function() {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n        Roles.userIsInRole( this.userId, 'admin') ||\r\n        Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n        return '443985995958874';\r\n    },\r\n    'getFBSecret' : function() {\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n        Roles.userIsInRole( this.userId, 'admin') ||\r\n        Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n        return '8d9cbbb60eb7f71e105f23ca026f391c';\r\n    },\r\n    'extendToken' : function(accessToken) {\r\n        /*$.get(\"https://graph.facebook.com/oauth/access_token?\", {\r\n        grant_type:'fb_exchange_token',\r\n        client_id:appId,\r\n        client_secret:appSec,\r\n        fb_exchange_token:accessToken },\r\n        function (data) {\r\n        console.log(data);\r\n    })*/\r\n        if (!(Roles.userIsInRole( this.userId, 'teacher') ||\r\n        Roles.userIsInRole( this.userId, 'admin') ||\r\n        Roles.userIsInRole( this.userId, 'announcementEditor'))) {\r\n            throw new Meteor.Error(400, \"You do not have permission...Reported\");\r\n        }\r\n\r\n        Meteor.call('getFBAppId', function(err, response) {\r\n            let appId = response;\r\n            Meteor.call('getFBSecret', function(err, response2) {\r\n                let appSec = response2;\r\n                console.log(\"proceeding to HTTP call\")\r\n                HTTP.call( 'GET', \"https://graph.facebook.com/oauth/access_token?\", {\r\n                    grant_type:'fb_exchange_token',\r\n                    client_id:appId,\r\n                    client_secret:appSec,\r\n                    fb_exchange_token:accessToken },\r\n                    function (err, data) {\r\n                    if (err) {\r\n                        console.log(err);\r\n                    } else {\r\n                        console.log(\"HELLO\");\r\n                        console.log(data);\r\n                    }\r\n                });\r\n            });\r\n        });\r\n    }\r\n});\r\n","//This file contains unsplash API searching functions\r\nimport './unsplash.js';\r\n//This file stores the facebook API keys and tokens\r\nimport './facebook.js';\r\n//This file defines all functions for the twitter API\r\nimport './twitter.js';\r\n//This file is used to post announcments using Algolia\r\nimport './algoliaPost.js';\r\n//This file is used to update announcments using Algolia\r\nimport './algoliaUpdate.js';\r\n//This file is used to remove announcments using Algolia\r\nimport './algoliaRemove.js';\r\n//This file contains meteor account functions\r\nimport './accounts.js';\r\n//This file includes mailchimp API functions\r\nimport './mailchimp.js';\r\n//This file includes dictionary of categories and maps them with keywords\r\nimport './categories.js';\r\n//This file includes a job scheduler\r\nimport './scheduler.js';\r\n//This file contains methods for draft collection\r\nimport '../../api/drafts/draftMethods.js';\r\n//This file contains methods for posts collection\r\nimport '../../api/posts/postsMethods.js';\r\n//This file contains methods for suggestion collection\r\nimport '../../api/suggestions/suggestionMethods.js';\r\n//This file contains methods for suggestion collection\r\nimport '../../api/categories/categoriesMethods.js';\r\n//This file contains methods for suggestion collection\r\nimport '../../api/blogCategories/categoriesMethods.js';\r\n//This file contains teach assist api functions\r\nimport './teachAssist.js';\r\n//import the collections into server\r\nimport '../../api/suggestions/suggestions.js';\r\nimport '../../api/images/images.js'\r\nimport '../../api/images/imagesMethods.js'\r\nimport '../../api/organizations/clubs.js'\r\nimport '../../api/organizations/clubsMethods.js'\r\nimport '../../api/organizations/courses.js'\r\nimport '../../api/organizations/coursesMethods.js'","import './imports.js';\r\n","import Mailchimp from 'mailchimp-api-v3';\r\n\r\n//const Mailchimp = require('mailchimp-api-v3')\r\n\r\nconst mailchimp = new Mailchimp('c63e149751b5b34657fc48286f336650-us16');\r\n\r\nMeteor.methods({\r\n   'getSubscribers' : function() {\r\n      mailchimp.get('/lists/b7d23cbf79', function(results) {\r\n         return results;\r\n      })\r\n   },\r\n   'news.addSubscriber' : function(email, fname, lname) {\r\n      mailchimp.post('/lists/b7d23cbf79/members', {email_address : email, status: 'subscribed', merge_fields : {FNAME : fname, LNAME : lname}}, function (err, response) {\r\n         if (err) {\r\n            console.log(err)\r\n         } else {\r\n            console.log(JSON.stringify(response, null, 2));\r\n         }\r\n         return response;\r\n      })\r\n   },\r\n   'getTemplates' : function () {\r\n      mailchimp.get('/templates', function(err, response) {\r\n         if (err) {\r\n            console.log(err);\r\n         } else {\r\n            console.log(JSON.stringify(response, null, 2));\r\n         }\r\n      })\r\n   },\r\n   'createCampaign' : function(subjectLine, title) {\r\n      mailchimp.post('/campaigns',\r\n      {\r\n         type : 'regular',\r\n         recipients : {\r\n            list_id: 'b7d23cbf79'\r\n         },\r\n         settings : {\r\n            subject_line : subjectLine,\r\n            title: title,\r\n            from_name : 'UHS Life Bulletin',\r\n            reply_to : 'hello@uhs.life',\r\n            template_id : 60467\r\n         }\r\n      }, function (err, response) {\r\n         if (err) {\r\n            console.log(err);\r\n         } else {\r\n            console.log(JSON.stringify(response, null, 2));\r\n            let campaignID = response.id;\r\n            mailchimp.put('/campaigns/'+campaignID+'/content',\r\n            {\r\n               template : {\r\n                  id : 60467,\r\n                  sections : {\r\n                     \"image\" : \"<img src='https://www.sitebuilderreport.com/assets/facebook-stock-up-446fff24fb11820517c520c4a5a4c032.jpg'>\",\r\n                     \"text\" : \"<p>Changed text 2</p>\"\r\n                  }\r\n               }\r\n            }, function(err, response) {\r\n               if (err) {\r\n                  console.log(err);\r\n               } else {\r\n                  //console.log(JSON.stringify(response, null, 2));\r\n                  mailchimp.post('/campaigns/'+campaignID+'/actions/send', function(err, response) {\r\n                     if (err) {\r\n                        console.log(err);\r\n                     } else {\r\n                        console.log(JSON.stringify(response, null, 2));\r\n                     }\r\n                  })\r\n               }\r\n            })\r\n         }\r\n      })\r\n   }\r\n})\r\n","import { Meteor } from 'meteor/meteor';\r\nimport schedule from 'node-schedule';\r\nimport { Posts } from '../../api/posts/posts.js';\r\n\r\nMeteor.methods({\r\n   'scheduleAnnouncement' : function(announcementId) {\r\n      let announcement = Posts.findOne({'_id': announcementId});\r\n\r\n      if (announcement.type === 'announcement') {\r\n         let sDate = new Date(announcement.startDate);\r\n         let eDate = new Date(announcement.endDate);\r\n         let cDate = new Date();\r\n         let flag = false;\r\n\r\n         sDate.setHours(8);\r\n         eDate.setHours(8);\r\n\r\n         if (eDate.getTime() === sDate.getTime()) {   //scheduled for one day\r\n            eDate = new Date(eDate.setTime( eDate.getTime() + 86400000 )); //move end day to next day midnight\r\n         }\r\n         if (sDate.getTime() < cDate.getTime()) { //already past start date\r\n             console.log(\"updated start date\");\r\n            sDate = new Date();  //update the start date\r\n            sDate.setSeconds(sDate.getSeconds() + 5);  //add a delay\r\n         }\r\n         if (eDate.getTime() < cDate.getTime()) { //already past end date\r\n             console.log(\"updated end date\");\r\n            flag = true;\r\n         }\r\n\r\n\r\n         if (!flag) {\r\n            let j = schedule.scheduleJob(sDate, Meteor.bindEnvironment(function() {\r\n               //Set display to TRUE\r\n               console.log(\"DISPLAY TRUE\");\r\n               Posts.update({'_id': announcementId}, { $set: {'meta.display':true}});\r\n           }));\r\n            let k = schedule.scheduleJob(eDate, Meteor.bindEnvironment(function() {\r\n               //Set display to FALSE\r\n               console.log(\"DISPLAY FALSE\");\r\n               Posts.update({'_id': announcementId}, { $set: {'meta.display':false}});\r\n            }));\r\n         }\r\n      } else {\r\n         console.log('Not an announcement');\r\n         return -1;\r\n     }\r\n   },\r\n   'scheduleBlog' : function(blogId) {\r\n      let blog = Posts.findOne({'_id':blogId});\r\n\r\n      if (blog.type === 'blog') {\r\n         let rDate = new Date(blog.releaseDate);\r\n         let cDate = new Date();\r\n\r\n         if (rDate.getTime() < cDate.getTime()) { //already past start date\r\n            rDate = new Date();  //update the start date\r\n            rDate.setSeconds(rDate.getSeconds() + 5);  //add a delay\r\n         }\r\n\r\n         let j = schedule.scheduleJob(rDate, Meteor.bindEnvironment(function() {\r\n            //Set display to TRUE\r\n            Posts.update({'_id': blogId}, { $set: {'meta.display':true}});\r\n        }));\r\n      } else {\r\n         console.log('not a blog');\r\n         return -1;\r\n      }\r\n   }\r\n});\r\n","Meteor.methods({\r\n    'getTeachAssistTokens' : function(json) {\r\n        if (!(json.student_number && json.password)) {\r\n            throw new Meteor.Error(400, \"Need a student number and password\");\r\n        }\r\n        let response = HTTP.call(\"GET\", \"https://ta.yrdsb.ca/v4/students/json.php\", {\r\n            data: {\r\n                \"student_number\": json.student_number,\r\n                \"password\": json.password\r\n            }\r\n        });\r\n        let res = JSON.parse(response.content);\r\n        if (res[0].ERROR) {\r\n            console.log(res[0].ERROR);\r\n            throw new Meteor.Error(403, \"Your password is invalid.\");\r\n        }\r\n\r\n        let id = res[0].student_id;\r\n        let token = res[0].token;\r\n\r\n        return {\"student_id\": id, \"token\": token};\r\n    },\r\n    'getTeachAssistCourses' : function(json) {\r\n        if (!(json.student_id && json.token)) {\r\n            throw new Meteor.Error(400, \"Need a student id and token\");\r\n        }\r\n        console.log(\"hello courses\");\r\n        let response = HTTP.call(\"GET\", \"https://ta.yrdsb.ca/v4/students/json.php\", {\r\n            data: {\r\n                \"student_id\": json.student_id,\r\n                \"token\": json.token\r\n            }\r\n        });\r\n\r\n        if (JSON.parse(response.content)[0].ERROR) {\r\n            throw new Meteor.Error(400, JSON.parse(response.content)[0].ERROR);\r\n        }\r\n        return JSON.parse(response.content)[0].data[0].subjects;\r\n\r\n    },\r\n    'getTeachAssistCourseDetails' : function(json) {\r\n        if (!(json.student_id && json.token && json.subject_id)) {\r\n            throw new Meteor.Error(400, \"Need a student id and token and subject id\");\r\n        }\r\n        let response = HTTP.call(\"GET\", \"https://ta.yrdsb.ca/v4/students/json.php\", {\r\n            data: {\r\n                \"student_id\": json.student_id,\r\n                \"token\": json.token,\r\n                \"subject_id\": json.subject_id\r\n            }\r\n        });\r\n        if (JSON.parse(response.content)[0].ERROR) {\r\n            throw new Meteor.Error(400, JSON.parse(response.content)[0].ERROR);\r\n        }\r\n        //console.log(JSON.parse(response.content)[0]);\r\n\r\n        let cat = [0, 0, 0, 0, 0]; //K T C A O\r\n        let catWeight = [0, 0, 0, 0, 0];\r\n        let catExist = [false, false, false, false, false];\r\n        let timeline = [];\r\n\r\n        let preParse = JSON.parse(response.content)[0];\r\n        let postParse = JSON.parse(response.content)[0];\r\n\r\n        postParse.data.assessment = [];\r\n        postParse.categoryMarks = [0, 0, 0, 0, 0];\r\n\r\n        let categories = preParse.data.assessment.data.categories;\r\n\r\n        let cnt = 0;\r\n        _.each(preParse.data.assessment.data, function(k, v) {\r\n            if (v === 'categories') {\r\n                postParse.categories = k;\r\n            } else {\r\n                let assess = k;\r\n                if (assess.K) {\r\n                    catExist[0] = true;\r\n                    cat[0] += parseFloat(assess.K.mark) / parseFloat(assess.K.outOf) * 100 * parseFloat(assess.K.weight);\r\n                    catWeight[0] += parseFloat(assess.K.weight);\r\n                }\r\n                if (assess.T) {\r\n                    catExist[1] = true;\r\n                    cat[1] += parseFloat(assess.T.mark) / parseFloat(assess.T.outOf) * 100  * parseFloat(assess.T.weight);\r\n                    catWeight[1] += parseFloat(assess.T.weight);\r\n                }\r\n                if (assess.C) {\r\n                    catExist[2] = true;\r\n                    cat[2] += parseFloat(assess.C.mark) / parseFloat(assess.C.outOf) * 100  * parseFloat(assess.C.weight);\r\n                    catWeight[2] += parseFloat(assess.C.weight);\r\n                }\r\n                if (assess.A) {\r\n                    catExist[3] = true;\r\n                    cat[3] += parseFloat(assess.A.mark) / parseFloat(assess.A.outOf) * 100  * parseFloat(assess.A.weight);\r\n                    catWeight[3] += parseFloat(assess.A.weight);\r\n                    console.log(cat[3] + \" \" + catWeight[3]);\r\n                }\r\n                if (assess[\"\"]) {\r\n                    catExist[4] = true;\r\n                    cat[4] += parseFloat(assess[\"\"].mark) / parseFloat(assess[\"\"].outOf) * 100  * parseFloat(assess[\"\"].weight);\r\n                    catWeight[4] += parseFloat(assess[\"\"].weight);\r\n                }\r\n                k.O = k[\"\"];    //transfer to Other\r\n                delete k[\"\"];\r\n                let mark = 0;\r\n                let K, T, C, A, O = 0;\r\n                let catTotalWeight = 0;\r\n                if (catExist[0]) {\r\n                    mark += cat[0] / catWeight[0] * categories.K;\r\n                    K = cat[0] / catWeight[0];\r\n                    catTotalWeight += categories.K;\r\n                }\r\n                if (catExist[1]) {\r\n                    mark += cat[1] / catWeight[1] * categories.T;\r\n                    T = cat[1] / catWeight[1];\r\n                    catTotalWeight += categories.T;\r\n                }\r\n                if (catExist[2]) {\r\n                    mark += cat[2] / catWeight[2] * categories.C;\r\n                    C = cat[2] / catWeight[2];\r\n                    catTotalWeight += categories.C;\r\n                }\r\n                if (catExist[3]) {\r\n                    mark += cat[3] / catWeight[3] * categories.A;\r\n                    A = cat[3] / catWeight[3];\r\n                    catTotalWeight += categories.A;\r\n                }\r\n                if (catExist[4]) {\r\n                    mark += cat[4] / catWeight[4] * categories.O;\r\n                    O = cat[4] / catWeight[4];\r\n                    catTotalWeight += categories.O;\r\n                }\r\n                mark /= catTotalWeight;\r\n                timeline[cnt] = {\r\n                    mark: Math.round(mark * 100) / 100,\r\n                    K: Math.round(K * 100) / 100,\r\n                    T: Math.round(T * 100) / 100,\r\n                    C: Math.round(C * 100) / 100,\r\n                    A: Math.round(A * 100) / 100,\r\n                    O: Math.round(O * 100) / 100\r\n                };\r\n                postParse.data.assessment[cnt++] = k;\r\n            }\r\n        })\r\n        for (var i = 0;i < 5; i++) {\r\n            if (cat[i] !== 0) {\r\n                postParse.categoryMarks[i] = Math.round(cat[i]/catWeight[i] * 100) / 100;\r\n            } else {\r\n                postParse.categoryMarks[i] = 0;\r\n            }\r\n        }\r\n        postParse.timeline = timeline;\r\n        return postParse;\r\n    }\r\n});\r\n","import { Meteor } from 'meteor/meteor';\r\nimport { Images } from '../../api/images/images.js'\r\n\r\nMeteor.methods({\r\n    //return the twitter api key\r\n    'getTwitterAPIKey' : function() {\r\n        return 'cwR4tCHFOTFRIyiLQVacIzns8';\r\n    },\r\n    //return the twitter api secret\r\n    'getTwitterAPISecret' : function() {\r\n        return 'MP0Pphmcp6HL0FF6WXYhZa2M8b8cTH297MNqRR7M6wwCOBxfwU';\r\n    },\r\n    //return the twitter access token\r\n    'getTwitterAccessToken' : function() {\r\n        return '882355763771043840-8uCzofs2q4HHE8m0GS2QZUxqNxzOvEG';\r\n    },\r\n    //return the twitter access token secret\r\n    'getTwitterAccessTokenSecret' : function() {\r\n        return 'vpw7YwWu9tic20VI2qDh8W73zJoROenAnDEQoh7PMlM5l';\r\n    },\r\n    //setup the twitter api\r\n    'setupTwitterAPI' : function () {\r\n\r\n        //Initialize the twitter API\r\n        T = new Twit({\r\n            consumer_key:         'cwR4tCHFOTFRIyiLQVacIzns8',\r\n            consumer_secret:      'MP0Pphmcp6HL0FF6WXYhZa2M8b8cTH297MNqRR7M6wwCOBxfwU',\r\n            access_token:         '882355763771043840-8uCzofs2q4HHE8m0GS2QZUxqNxzOvEG',\r\n            access_token_secret:  'vpw7YwWu9tic20VI2qDh8W73zJoROenAnDEQoh7PMlM5l'\r\n        });\r\n        console.log(\"setting up twitter\");\r\n\r\n    },\r\n    //post to twitter account\r\n    'postTextAnnouncementTwitter' : function(obj) {\r\n        let headline = obj.headline,\r\n        content = obj.content;\r\n        let status = obj.headline + '\\n' + obj.content;\r\n        if (status.length > 140) {\r\n            status = status.substring(0, 137);\r\n        }\r\n        status += \"...\";\r\n        T.post('statuses/update', { status: status}, function(err, data, response) {\r\n            console.log(data)\r\n        });\r\n    },\r\n    'postImageAnnouncementTwitter' : function(obj) {\r\n        let fs = require('fs');\r\n        // post a tweet with media\r\n        //let b64content = fs.readFileSync('/Documents/TestFacebookAPI/facebookapi/public/images/stock1.jpg', { encoding: 'base64' });\r\n\r\n        let getBase64Data = function(doc, callback) {\r\n            let buffer = new Buffer(0);\r\n            // callback has the form function (err, res) {}\r\n            let readStream = doc.createReadStream();\r\n            readStream.on('data', function(chunk) {\r\n                buffer = Buffer.concat([buffer, chunk]);\r\n            });\r\n            readStream.on('error', function(err) {\r\n                callback(err, null);\r\n            });\r\n            readStream.on('end', function() {\r\n                // done\r\n                callback(null, buffer.toString('base64'));\r\n            });\r\n        };\r\n        let getBase64DataSync = Meteor.wrapAsync(getBase64Data);\r\n\r\n        let file = Images.findOne({'_id': obj.imgId});\r\n        getBase64DataSync(file, function(err, b64content) {\r\n            // first we must post the media to Twitter\r\n            T.post('media/upload', { media_data: b64content }, function (err, data, response) {\r\n\r\n                // now we can reference the media and post a tweet (media will attach to the tweet)\r\n                let mediaIdStr = data.media_id_string\r\n                let params = { status: obj.headline, media_ids: [mediaIdStr] }\r\n\r\n                T.post('statuses/update', params, function (err, data, response) {\r\n                    console.log(data);\r\n                });\r\n            });\r\n        })\r\n    },\r\n    'postTextImageAnnouncementTwitter' : function(obj) {\r\n        let getBase64Data = function(doc, callback) {\r\n            let buffer = new Buffer(0);\r\n            // callback has the form function (err, res) {}\r\n            let readStream = doc.createReadStream();\r\n            readStream.on('data', function(chunk) {\r\n                buffer = Buffer.concat([buffer, chunk]);\r\n            });\r\n            readStream.on('error', function(err) {\r\n                callback(err, null);\r\n            });\r\n            readStream.on('end', function() {\r\n                // done\r\n                callback(null, buffer.toString('base64'));\r\n            });\r\n        };\r\n        let getBase64DataSync = Meteor.wrapAsync(getBase64Data);\r\n\r\n        let status = obj.headline + '\\n' + obj.content;\r\n        if (status.length > 140) {\r\n            status = status.substring(0, 137);\r\n        }\r\n        status += \"...\";\r\n\r\n        let file = Images.findOne({'_id': obj.imgId});\r\n        getBase64DataSync(file, function(err, b64content) {\r\n            // first we must post the media to Twitter\r\n            T.post('media/upload', { media_data: b64content }, function (err, data, response) {\r\n\r\n                // now we can reference the media and post a tweet (media will attach to the tweet)\r\n                let mediaIdStr = data.media_id_string\r\n                let params = { status: status, media_ids: [mediaIdStr] }\r\n\r\n                T.post('statuses/update', params, function (err, data, response) {\r\n                    console.log(data);\r\n                });\r\n            });\r\n        })\r\n    }\r\n})\r\n","import { Meteor } from 'meteor/meteor';\r\nimport Unsplash, { toJson } from 'unsplash-js';\r\nimport es6Promise from 'es6-promise';\r\nimport isomorphicFetch from 'isomorphic-fetch';\r\n\r\nes6Promise = require('es6-promise').polyfill();\r\nisomorphicFetch = require('isomorphic-fetch');\r\n\r\nMeteor.methods({\r\n   'setupUnsplash' : function() {\r\n      unsplash = new Unsplash ({\r\n         applicationId: \"bb5b9c84132fd7a81bb83c76f31682d365611a88e4c4787c15c10e6f5c0dda1e\",\r\n         secret: \"449740b9a733347f3476d7c87aff43054cb36c78b40ef88d8593605926d7ddb5\",\r\n         callbackUrl: \"localhost:3000\"\r\n      });\r\n   },\r\n   'searchKeyword' : function(key) {\r\n       return unsplash.search.photos(key, 1, 10)\r\n         .then(toJson)\r\n         .then(json => {\r\n             return json;\r\n         });\r\n   }, \r\n    'getRandomPhoto': function () {\r\n        return unsplash.photos.getRandomPhoto()\r\n            .then(toJson)\r\n            .then(json => {\r\n                return json;\r\n            });\r\n    },\r\n    'getPhoto': function (id) {\r\n        return unsplash.photos.getPhoto(id)\r\n            .then(toJson)\r\n            .then(json => {\r\n                return json;\r\n            });\r\n    }\r\n});\r\n","import { Meteor } from 'meteor/meteor';\r\n\r\nimport '/imports/startup/server'\r\n\r\nimport {Posts} from '../imports/api/posts/posts.js';\r\n\r\nMeteor.startup(() => {\r\n    Accounts.loginServiceConfiguration.remove({\r\n        service: \"google\"\r\n    });\r\n    Accounts.loginServiceConfiguration.insert({\r\n        service: \"google\",\r\n        clientId: \"152156454960-h8olc9vhu7juk77p71et1aekkr6qslm1.apps.googleusercontent.com\",\r\n        secret: \"nL2ZzKMfrfwja7VHa9jmlhvU\"\r\n    });\r\n//on server restart, always re-run scheduler to reschedule all announcements\r\n//TODO\r\n    Posts.find({'meta.approved':true, 'meta.screeningStage': 3}).forEach(function(obj) {\r\n        Meteor.call('scheduleAnnouncement', obj._id, function(err, res) {\r\n            if (err) {\r\n                console.log(err);\r\n            }\r\n        });\r\n    })\r\n    /*\r\n     Meteor.call('posts.getApprovedPosts', function(err, data) {\r\n     console.log(\"getting approved posts\");\r\n     if (err) {\r\n     console.log (err);\r\n     } else {\r\n     //console.log(data);\r\n     data.forEach(function(obj) {\r\n     Meteor.call('scheduleAnnouncement', obj._id, function(err, res) {\r\n     if (err) {\r\n     console.log(err);\r\n     }\r\n     });\r\n     });\r\n     }\r\n     })*/\r\n});\r\n"]}}]