[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar FS = Package['cfs:base-package'].FS;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cfs_collection-filters/packages/cfs_collection-filters.js                                                  //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function () {                                                                                                         // 1\n                                                                                                                       // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/cfs:collection-filters/filters.js                                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * @method FS.Collection.prototype.filters                                                                          // 2\n * @public                                                                                                          // 3\n * @param {Object} filters - File filters for this collection.                                                      // 4\n * @returns {undefined}                                                                                             // 5\n */                                                                                                                 // 6\nFS.Collection.prototype.filters = function fsColFilters(filters) {                                                  // 7\n  var self = this;                                                                                                  // 8\n                                                                                                                    // 9\n  // Check filter option values and normalize them for quicker checking later                                       // 10\n  if (filters) {                                                                                                    // 11\n    // check/adjust allow/deny                                                                                      // 12\n    FS.Utility.each(['allow', 'deny'], function (type) {                                                            // 13\n      if (!filters[type]) {                                                                                         // 14\n        filters[type] = {};                                                                                         // 15\n      } else if (typeof filters[type] !== \"object\") {                                                               // 16\n        throw new Error(type + ' filter must be an object');                                                        // 17\n      }                                                                                                             // 18\n    });                                                                                                             // 19\n                                                                                                                    // 20\n    // check/adjust maxSize                                                                                         // 21\n    if (typeof filters.maxSize === \"undefined\") {                                                                   // 22\n      filters.maxSize = null;                                                                                       // 23\n    } else if (filters.maxSize && typeof filters.maxSize !== \"number\") {                                            // 24\n      throw new Error('maxSize filter must be an number');                                                          // 25\n    }                                                                                                               // 26\n                                                                                                                    // 27\n    // check/adjust extensions                                                                                      // 28\n    FS.Utility.each(['allow', 'deny'], function (type) {                                                            // 29\n      if (!filters[type].extensions) {                                                                              // 30\n        filters[type].extensions = [];                                                                              // 31\n      } else if (!FS.Utility.isArray(filters[type].extensions)) {                                                   // 32\n        throw new Error(type + '.extensions filter must be an array of extensions');                                // 33\n      } else {                                                                                                      // 34\n        //convert all to lowercase                                                                                  // 35\n        for (var i = 0, ln = filters[type].extensions.length; i < ln; i++) {                                        // 36\n          filters[type].extensions[i] = filters[type].extensions[i].toLowerCase();                                  // 37\n        }                                                                                                           // 38\n      }                                                                                                             // 39\n    });                                                                                                             // 40\n                                                                                                                    // 41\n    // check/adjust content types                                                                                   // 42\n    FS.Utility.each(['allow', 'deny'], function (type) {                                                            // 43\n      if (!filters[type].contentTypes) {                                                                            // 44\n        filters[type].contentTypes = [];                                                                            // 45\n      } else if (!FS.Utility.isArray(filters[type].contentTypes)) {                                                 // 46\n        throw new Error(type + '.contentTypes filter must be an array of content types');                           // 47\n      }                                                                                                             // 48\n    });                                                                                                             // 49\n                                                                                                                    // 50\n    self.options.filter = filters;                                                                                  // 51\n  }                                                                                                                 // 52\n                                                                                                                    // 53\n  // Define deny functions to enforce file filters on the server                                                    // 54\n  // for inserts and updates that initiate from untrusted code.                                                     // 55\n  self.files.deny({                                                                                                 // 56\n    insert: function(userId, fsFile) {                                                                              // 57\n      return !self.allowsFile(fsFile);                                                                              // 58\n    },                                                                                                              // 59\n    update: function(userId, fsFile, fields, modifier) {                                                            // 60\n      // TODO will need some kind of additional security here:                                                      // 61\n      // Don't allow them to change the type, size, name, and                                                       // 62\n      // anything else that would be security or data integrity issue.                                              // 63\n      // Such security should probably be added by cfs-collection package, not here.                                // 64\n      return !self.allowsFile(fsFile);                                                                              // 65\n    },                                                                                                              // 66\n    fetch: []                                                                                                       // 67\n  });                                                                                                               // 68\n                                                                                                                    // 69\n  // If insecure package is in use, we need to add allow rules that return                                          // 70\n  // true. Otherwise, it would seemingly turn off insecure mode.                                                    // 71\n  if (Package && Package.insecure) {                                                                                // 72\n    self.allow({                                                                                                    // 73\n      insert: function() {                                                                                          // 74\n        return true;                                                                                                // 75\n      },                                                                                                            // 76\n      update: function() {                                                                                          // 77\n        return true;                                                                                                // 78\n      },                                                                                                            // 79\n      remove: function() {                                                                                          // 80\n        return true;                                                                                                // 81\n      },                                                                                                            // 82\n      download: function() {                                                                                        // 83\n        return true;                                                                                                // 84\n      },                                                                                                            // 85\n      fetch: [],                                                                                                    // 86\n      transform: null                                                                                               // 87\n    });                                                                                                             // 88\n  }                                                                                                                 // 89\n  // If insecure package is NOT in use, then adding the deny function                                               // 90\n  // does not have any effect on the main app's security paradigm. The                                              // 91\n  // user will still be required to add at least one allow function of her                                          // 92\n  // own for each operation for this collection. And the user may still add                                         // 93\n  // additional deny functions, but does not have to.                                                               // 94\n};                                                                                                                  // 95\n                                                                                                                    // 96\n/**                                                                                                                 // 97\n * @method FS.Collection.prototype.allowsFile Does the collection allow the specified file?                         // 98\n * @public                                                                                                          // 99\n * @returns {boolean} True if the collection allows this file.                                                      // 100\n *                                                                                                                  // 101\n * Checks based on any filters defined on the collection. If the                                                    // 102\n * file is not valid according to the filters, this method returns false                                            // 103\n * and also calls the filter `onInvalid` method defined for the                                                     // 104\n * collection, passing it an English error string that explains why it                                              // 105\n * failed.                                                                                                          // 106\n */                                                                                                                 // 107\nFS.Collection.prototype.allowsFile = function fsColAllowsFile(fileObj) {                                            // 108\n  var self = this;                                                                                                  // 109\n                                                                                                                    // 110\n  // Get filters                                                                                                    // 111\n  var filter = self.options.filter;                                                                                 // 112\n  if (!filter) {                                                                                                    // 113\n    return true;                                                                                                    // 114\n  }                                                                                                                 // 115\n  var saveAllFileExtensions = (filter.allow.extensions.length === 0);                                               // 116\n  var saveAllContentTypes = (filter.allow.contentTypes.length === 0);                                               // 117\n                                                                                                                    // 118\n  // Get info about the file                                                                                        // 119\n  var filename = fileObj.name();                                                                                    // 120\n  var contentType = fileObj.type();                                                                                 // 121\n  if (!saveAllContentTypes && !contentType) {                                                                       // 122\n    filter.onInvalid && filter.onInvalid(filename + \" has an unknown content type\");                                // 123\n    return false;                                                                                                   // 124\n  }                                                                                                                 // 125\n  var fileSize = fileObj.size();                                                                                    // 126\n  if (!fileSize || isNaN(fileSize)) {                                                                               // 127\n    filter.onInvalid && filter.onInvalid(filename + \" has an unknown file size\");                                   // 128\n    return false;                                                                                                   // 129\n  }                                                                                                                 // 130\n                                                                                                                    // 131\n  // Do extension checks only if we have a filename                                                                 // 132\n  if (filename) {                                                                                                   // 133\n    var ext = fileObj.getExtension();                                                                               // 134\n    if (!((saveAllFileExtensions ||                                                                                 // 135\n            FS.Utility.indexOf(filter.allow.extensions, ext) !== -1) &&                                             // 136\n            FS.Utility.indexOf(filter.deny.extensions, ext) === -1)) {                                              // 137\n      filter.onInvalid && filter.onInvalid(filename + ' has the extension \"' + ext + '\", which is not allowed');    // 138\n      return false;                                                                                                 // 139\n    }                                                                                                               // 140\n  }                                                                                                                 // 141\n                                                                                                                    // 142\n  // Do content type checks                                                                                         // 143\n  if (!((saveAllContentTypes ||                                                                                     // 144\n          contentTypeInList(filter.allow.contentTypes, contentType)) &&                                             // 145\n          !contentTypeInList(filter.deny.contentTypes, contentType))) {                                             // 146\n    filter.onInvalid && filter.onInvalid(filename + ' is of the type \"' + contentType + '\", which is not allowed'); // 147\n    return false;                                                                                                   // 148\n  }                                                                                                                 // 149\n                                                                                                                    // 150\n  // Do max size check                                                                                              // 151\n  if (typeof filter.maxSize === \"number\" && fileSize > filter.maxSize) {                                            // 152\n    filter.onInvalid && filter.onInvalid(filename + \" is too big\");                                                 // 153\n    return false;                                                                                                   // 154\n  }                                                                                                                 // 155\n  return true;                                                                                                      // 156\n};                                                                                                                  // 157\n                                                                                                                    // 158\n/**                                                                                                                 // 159\n * @method contentTypeInList Is the content type string in the list?                                                // 160\n * @private                                                                                                         // 161\n * @param {String[]} list - Array of content types                                                                  // 162\n * @param {String} contentType - The content type                                                                   // 163\n * @returns {Boolean}                                                                                               // 164\n *                                                                                                                  // 165\n * Returns true if the content type is in the list, or if it matches                                                // 166\n * one of the special types in the list, e.g., \"image/*\".                                                           // 167\n */                                                                                                                 // 168\nfunction contentTypeInList(list, contentType) {                                                                     // 169\n  var listType, found = false;                                                                                      // 170\n  for (var i = 0, ln = list.length; i < ln; i++) {                                                                  // 171\n    listType = list[i];                                                                                             // 172\n    if (listType === contentType) {                                                                                 // 173\n      found = true;                                                                                                 // 174\n      break;                                                                                                        // 175\n    }                                                                                                               // 176\n    if (listType === \"image/*\" && contentType.indexOf(\"image/\") === 0) {                                            // 177\n      found = true;                                                                                                 // 178\n      break;                                                                                                        // 179\n    }                                                                                                               // 180\n    if (listType === \"audio/*\" && contentType.indexOf(\"audio/\") === 0) {                                            // 181\n      found = true;                                                                                                 // 182\n      break;                                                                                                        // 183\n    }                                                                                                               // 184\n    if (listType === \"video/*\" && contentType.indexOf(\"video/\") === 0) {                                            // 185\n      found = true;                                                                                                 // 186\n      break;                                                                                                        // 187\n    }                                                                                                               // 188\n  }                                                                                                                 // 189\n  return found;                                                                                                     // 190\n}                                                                                                                   // 191\n                                                                                                                    // 192\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       // 202\n}).call(this);                                                                                                         // 203\n                                                                                                                       // 204\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['cfs:collection-filters'] = {};\n\n})();\n","servePath":"/packages/cfs_collection-filters.js"}]