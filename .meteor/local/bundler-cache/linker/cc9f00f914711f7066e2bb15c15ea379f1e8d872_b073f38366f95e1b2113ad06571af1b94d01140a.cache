[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar Random = Package.random.Random;\nvar Accounts = Package['accounts-base'].Accounts;\nvar Google = Package['google-oauth'].Google;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/accounts-google/notice.js                                                                  //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nif (Package['accounts-ui']\n    && !Package['service-configuration']\n    && !Package.hasOwnProperty('google-config-ui')) {\n  console.warn(\n    \"Note: You're using accounts-ui and accounts-google,\\n\" +\n    \"but didn't install the configuration UI for the Google\\n\" +\n    \"OAuth. You can install it with:\\n\" +\n    \"\\n\" +\n    \"    meteor add google-config-ui\" +\n    \"\\n\"\n  );\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                     //\n// packages/accounts-google/google.js                                                                  //\n//                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                       //\nAccounts.oauth.registerService('google');\n\nif (Meteor.isClient) {\n  const loginWithGoogle = function(options, callback) {\n    // support a callback without options\n    if (! callback && typeof options === \"function\") {\n      callback = options;\n      options = null;\n    }\n\n    if (Meteor.isCordova &&\n        Google.signIn) {\n      // After 20 April 2017, Google OAuth login will no longer work from\n      // a WebView, so Cordova apps must use Google Sign-In instead.\n      // https://github.com/meteor/meteor/issues/8253\n      Google.signIn(options, callback);\n      return;\n    }\n\n    // Use Google's domain-specific login page if we want to restrict creation to\n    // a particular email domain. (Don't use it if restrictCreationByEmailDomain\n    // is a function.) Note that all this does is change Google's UI ---\n    // accounts-base/accounts_server.js still checks server-side that the server\n    // has the proper email address after the OAuth conversation.\n    if (typeof Accounts._options.restrictCreationByEmailDomain === 'string') {\n      options = _.extend({}, options || {});\n      options.loginUrlParameters = _.extend({}, options.loginUrlParameters || {});\n      options.loginUrlParameters.hd = Accounts._options.restrictCreationByEmailDomain;\n    }\n    var credentialRequestCompleteCallback = Accounts.oauth.credentialRequestCompleteHandler(callback);\n    Google.requestCredential(options, credentialRequestCompleteCallback);\n  };\n  Accounts.registerClientLoginFunction('google', loginWithGoogle);\n  Meteor.loginWithGoogle = function () {\n    return Accounts.applyLoginFunction('google', arguments);\n  };\n} else {\n  Accounts.addAutopublishFields({\n    forLoggedInUser: _.map(\n      // publish access token since it can be used from the client (if\n      // transmitted over ssl or on\n      // localhost). https://developers.google.com/accounts/docs/OAuth2UserAgent\n      // refresh token probably shouldn't be sent down.\n      Google.whitelistedFields.concat(['accessToken', 'expiresAt']), // don't publish refresh token\n      function (subfield) { return 'services.google.' + subfield; }),\n\n    forOtherUsers: _.map(\n      // even with autopublish, no legitimate web app should be\n      // publishing all users' emails\n      _.without(Google.whitelistedFields, 'email', 'verified_email'),\n      function (subfield) { return 'services.google.' + subfield; })\n  });\n}\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['accounts-google'] = {};\n\n})();\n","servePath":"/packages/accounts-google.js"}]