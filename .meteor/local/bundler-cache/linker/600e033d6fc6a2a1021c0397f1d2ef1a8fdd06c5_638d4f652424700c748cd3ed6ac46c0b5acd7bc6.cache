[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar Random = Package.random.Random;\nvar EJSON = Package.ejson.EJSON;\nvar _ = Package.underscore._;\nvar Tracker = Package.tracker.Tracker;\nvar Deps = Package.tracker.Deps;\nvar Retry = Package.retry.Retry;\nvar IdMap = Package['id-map'].IdMap;\nvar Hook = Package['callback-hook'].Hook;\nvar DDPCommon = Package['ddp-common'].DDPCommon;\nvar DiffSequence = Package['diff-sequence'].DiffSequence;\nvar MongoID = Package['mongo-id'].MongoID;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-client'].Symbol;\nvar Map = Package['ecmascript-runtime-client'].Map;\nvar Set = Package['ecmascript-runtime-client'].Set;\n\n/* Package-scope variables */\nvar SockJS, toSockjsUrl, toWebsocketUrl, allConnections, DDP;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"ddp-client\":{\"sockjs-0.3.4.js\":function(require){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-client/sockjs-0.3.4.js                                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                                //\n                                                                                                                       //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\n// XXX METEOR changes in <METEOR>                                                                                      // 1\n/* SockJS client, version 0.3.4, http://sockjs.org, MIT License                                                        // 3\n                                                                                                                       //\nCopyright (c) 2011-2012 VMware, Inc.                                                                                   //\n                                                                                                                       //\nPermission is hereby granted, free of charge, to any person obtaining a copy                                           //\nof this software and associated documentation files (the \"Software\"), to deal                                          //\nin the Software without restriction, including without limitation the rights                                           //\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell                                              //\ncopies of the Software, and to permit persons to whom the Software is                                                  //\nfurnished to do so, subject to the following conditions:                                                               //\n                                                                                                                       //\nThe above copyright notice and this permission notice shall be included in                                             //\nall copies or substantial portions of the Software.                                                                    //\n                                                                                                                       //\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR                                             //\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,                                               //\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE                                            //\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER                                                 //\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,                                          //\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN                                              //\nTHE SOFTWARE.                                                                                                          //\n*/ // <METEOR> Commented out JSO implementation (use json package instead).                                            //\n// JSON2 by Douglas Crockford (minified).                                                                              // 27\n// var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i==\"object\"&&typeof i.toJSON==\"function\"&&(i=i.toJSON(a)),typeof rep==\"function\"&&(i=rep.call(b,a,i));switch(typeof i){case\"string\":return quote(i);case\"number\":return isFinite(i)?String(i):\"null\";case\"boolean\":case\"null\":return String(i);case\"object\":if(!i)return\"null\";gap+=indent,h=[];if(Object.prototype.toString.apply(i)===\"[object Array]\"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||\"null\";e=h.length===0?\"[]\":gap?\"[\\n\"+gap+h.join(\",\\n\"+gap)+\"\\n\"+g+\"]\":\"[\"+h.join(\",\")+\"]\",gap=g;return e}if(rep&&typeof rep==\"object\"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]==\"string\"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?\": \":\":\")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?\": \":\":\")+e));e=h.length===0?\"{}\":gap?\"{\\n\"+gap+h.join(\",\\n\"+gap)+\"\\n\"+g+\"}\":\"{\"+h.join(\",\")+\"}\",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'\"'+a.replace(escapable,function(a){var b=meta[a];return typeof b==\"string\"?b:\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)})+'\"':'\"'+a+'\"'}function f(a){return a<10?\"0\"+a:a}\"use strict\",typeof Date.prototype.toJSON!=\"function\"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+\"-\"+f(this.getUTCMonth()+1)+\"-\"+f(this.getUTCDate())+\"T\"+f(this.getUTCHours())+\":\"+f(this.getUTCMinutes())+\":\"+f(this.getUTCSeconds())+\"Z\":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,escapable=/[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,gap,indent,meta={\"\\b\":\"\\\\b\",\"\\t\":\"\\\\t\",\"\\n\":\"\\\\n\",\"\\f\":\"\\\\f\",\"\\r\":\"\\\\r\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\"},rep;typeof JSON.stringify!=\"function\"&&(JSON.stringify=function(a,b,c){var d;gap=\"\",indent=\"\";if(typeof c==\"number\")for(d=0;d<c;d+=1)indent+=\" \";else typeof c==\"string\"&&(indent=c);rep=b;if(!b||typeof b==\"function\"||typeof b==\"object\"&&typeof b.length==\"number\")return str(\"\",{\"\":a});throw new Error(\"JSON.stringify\")}),typeof JSON.parse!=\"function\"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e==\"object\")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\\],:{}\\s]*$/.test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\"))){j=eval(\"(\"+text+\")\");return typeof reviver==\"function\"?walk({\"\":j},\"\"):j}throw new SyntaxError(\"JSON.parse\")})}()\n// </METEOR>                                                                                                           // 29\n//     [*] Including lib/index.js                                                                                      // 31\n// Public object                                                                                                       // 32\nSockJS = function () {                                                                                                 // 33\n    var _document = document;                                                                                          // 34\n    var _window = window;                                                                                              // 35\n    var utils = {}; //         [*] Including lib/reventtarget.js                                                       // 36\n    /*                                                                                                                 // 40\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */ /* Simplified implementation of DOM2 EventTarget.                                                              //\n         *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget                                    //\n         */                                                                                                            //\n                                                                                                                       //\n    var REventTarget = function () {};                                                                                 // 51\n                                                                                                                       //\n    REventTarget.prototype.addEventListener = function (eventType, listener) {                                         // 52\n        if (!this._listeners) {                                                                                        // 53\n            this._listeners = {};                                                                                      // 54\n        }                                                                                                              // 55\n                                                                                                                       //\n        if (!(eventType in this._listeners)) {                                                                         // 56\n            this._listeners[eventType] = [];                                                                           // 57\n        }                                                                                                              // 58\n                                                                                                                       //\n        var arr = this._listeners[eventType];                                                                          // 59\n                                                                                                                       //\n        if (utils.arrIndexOf(arr, listener) === -1) {                                                                  // 60\n            arr.push(listener);                                                                                        // 61\n        }                                                                                                              // 62\n                                                                                                                       //\n        return;                                                                                                        // 63\n    };                                                                                                                 // 64\n                                                                                                                       //\n    REventTarget.prototype.removeEventListener = function (eventType, listener) {                                      // 66\n        if (!(this._listeners && eventType in this._listeners)) {                                                      // 67\n            return;                                                                                                    // 68\n        }                                                                                                              // 69\n                                                                                                                       //\n        var arr = this._listeners[eventType];                                                                          // 70\n        var idx = utils.arrIndexOf(arr, listener);                                                                     // 71\n                                                                                                                       //\n        if (idx !== -1) {                                                                                              // 72\n            if (arr.length > 1) {                                                                                      // 73\n                this._listeners[eventType] = arr.slice(0, idx).concat(arr.slice(idx + 1));                             // 74\n            } else {                                                                                                   // 75\n                delete this._listeners[eventType];                                                                     // 76\n            }                                                                                                          // 77\n                                                                                                                       //\n            return;                                                                                                    // 78\n        }                                                                                                              // 79\n                                                                                                                       //\n        return;                                                                                                        // 80\n    };                                                                                                                 // 81\n                                                                                                                       //\n    REventTarget.prototype.dispatchEvent = function (event) {                                                          // 83\n        var t = event.type;                                                                                            // 84\n        var args = Array.prototype.slice.call(arguments, 0);                                                           // 85\n                                                                                                                       //\n        if (this['on' + t]) {                                                                                          // 86\n            this['on' + t].apply(this, args);                                                                          // 87\n        }                                                                                                              // 88\n                                                                                                                       //\n        if (this._listeners && t in this._listeners) {                                                                 // 89\n            for (var i = 0; i < this._listeners[t].length; i++) {                                                      // 90\n                this._listeners[t][i].apply(this, args);                                                               // 91\n            }                                                                                                          // 92\n        }                                                                                                              // 93\n    }; //         [*] End of lib/reventtarget.js                                                                       // 94\n    //         [*] Including lib/simpleevent.js                                                                        // 98\n    /*                                                                                                                 // 99\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var SimpleEvent = function (type, obj) {                                                                           // 107\n        this.type = type;                                                                                              // 108\n                                                                                                                       //\n        if (typeof obj !== 'undefined') {                                                                              // 109\n            for (var k in meteorBabelHelpers.sanitizeForInObject(obj)) {                                               // 110\n                if (!obj.hasOwnProperty(k)) continue;                                                                  // 111\n                this[k] = obj[k];                                                                                      // 112\n            }                                                                                                          // 113\n        }                                                                                                              // 114\n    };                                                                                                                 // 115\n                                                                                                                       //\n    SimpleEvent.prototype.toString = function () {                                                                     // 117\n        var r = [];                                                                                                    // 118\n                                                                                                                       //\n        for (var k in meteorBabelHelpers.sanitizeForInObject(this)) {                                                  // 119\n            if (!this.hasOwnProperty(k)) continue;                                                                     // 120\n            var v = this[k];                                                                                           // 121\n            if (typeof v === 'function') v = '[function]';                                                             // 122\n            r.push(k + '=' + v);                                                                                       // 123\n        }                                                                                                              // 124\n                                                                                                                       //\n        return 'SimpleEvent(' + r.join(', ') + ')';                                                                    // 125\n    }; //         [*] End of lib/simpleevent.js                                                                        // 126\n    //         [*] Including lib/eventemitter.js                                                                       // 130\n    /*                                                                                                                 // 131\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var EventEmitter = function (events) {                                                                             // 139\n        var that = this;                                                                                               // 140\n        that._events = events || [];                                                                                   // 141\n        that._listeners = {};                                                                                          // 142\n    };                                                                                                                 // 143\n                                                                                                                       //\n    EventEmitter.prototype.emit = function (type) {                                                                    // 144\n        var that = this;                                                                                               // 145\n                                                                                                                       //\n        that._verifyType(type);                                                                                        // 146\n                                                                                                                       //\n        if (that._nuked) return;                                                                                       // 147\n        var args = Array.prototype.slice.call(arguments, 1);                                                           // 149\n                                                                                                                       //\n        if (that['on' + type]) {                                                                                       // 150\n            that['on' + type].apply(that, args);                                                                       // 151\n        }                                                                                                              // 152\n                                                                                                                       //\n        if (type in that._listeners) {                                                                                 // 153\n            for (var i = 0; i < that._listeners[type].length; i++) {                                                   // 154\n                that._listeners[type][i].apply(that, args);                                                            // 155\n            }                                                                                                          // 156\n        }                                                                                                              // 157\n    };                                                                                                                 // 158\n                                                                                                                       //\n    EventEmitter.prototype.on = function (type, callback) {                                                            // 160\n        var that = this;                                                                                               // 161\n                                                                                                                       //\n        that._verifyType(type);                                                                                        // 162\n                                                                                                                       //\n        if (that._nuked) return;                                                                                       // 163\n                                                                                                                       //\n        if (!(type in that._listeners)) {                                                                              // 165\n            that._listeners[type] = [];                                                                                // 166\n        }                                                                                                              // 167\n                                                                                                                       //\n        that._listeners[type].push(callback);                                                                          // 168\n    };                                                                                                                 // 169\n                                                                                                                       //\n    EventEmitter.prototype._verifyType = function (type) {                                                             // 171\n        var that = this;                                                                                               // 172\n                                                                                                                       //\n        if (utils.arrIndexOf(that._events, type) === -1) {                                                             // 173\n            utils.log('Event ' + JSON.stringify(type) + ' not listed ' + JSON.stringify(that._events) + ' in ' + that);\n        }                                                                                                              // 177\n    };                                                                                                                 // 178\n                                                                                                                       //\n    EventEmitter.prototype.nuke = function () {                                                                        // 180\n        var that = this;                                                                                               // 181\n        that._nuked = true;                                                                                            // 182\n                                                                                                                       //\n        for (var i = 0; i < that._events.length; i++) {                                                                // 183\n            delete that[that._events[i]];                                                                              // 184\n        }                                                                                                              // 185\n                                                                                                                       //\n        that._listeners = {};                                                                                          // 186\n    }; //         [*] End of lib/eventemitter.js                                                                       // 187\n    //         [*] Including lib/utils.js                                                                              // 191\n    /*                                                                                                                 // 192\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_';                                                 // 200\n                                                                                                                       //\n    utils.random_string = function (length, max) {                                                                     // 201\n        max = max || random_string_chars.length;                                                                       // 202\n        var i,                                                                                                         // 203\n            ret = [];                                                                                                  // 203\n                                                                                                                       //\n        for (i = 0; i < length; i++) {                                                                                 // 204\n            ret.push(random_string_chars.substr(Math.floor(Math.random() * max), 1));                                  // 205\n        }                                                                                                              // 206\n                                                                                                                       //\n        return ret.join('');                                                                                           // 207\n    };                                                                                                                 // 208\n                                                                                                                       //\n    utils.random_number = function (max) {                                                                             // 209\n        return Math.floor(Math.random() * max);                                                                        // 210\n    };                                                                                                                 // 211\n                                                                                                                       //\n    utils.random_number_string = function (max) {                                                                      // 212\n        var t = ('' + (max - 1)).length;                                                                               // 213\n        var p = Array(t + 1).join('0');                                                                                // 214\n        return (p + utils.random_number(max)).slice(-t);                                                               // 215\n    }; // Assuming that url looks like: http://asdasd:111/asd                                                          // 216\n                                                                                                                       //\n                                                                                                                       //\n    utils.getOrigin = function (url) {                                                                                 // 219\n        url += '/';                                                                                                    // 220\n        var parts = url.split('/').slice(0, 3);                                                                        // 221\n        return parts.join('/');                                                                                        // 222\n    };                                                                                                                 // 223\n                                                                                                                       //\n    utils.isSameOriginUrl = function (url_a, url_b) {                                                                  // 225\n        // location.origin would do, but it's not always available.                                                    // 226\n        if (!url_b) url_b = _window.location.href;                                                                     // 227\n        return url_a.split('/').slice(0, 3).join('/') === url_b.split('/').slice(0, 3).join('/');                      // 229\n    }; // <METEOR>                                                                                                     // 232\n    // https://github.com/sockjs/sockjs-client/issues/79                                                               // 235\n                                                                                                                       //\n                                                                                                                       //\n    utils.isSameOriginScheme = function (url_a, url_b) {                                                               // 236\n        if (!url_b) url_b = _window.location.href;                                                                     // 237\n        return url_a.split(':')[0] === url_b.split(':')[0];                                                            // 239\n    }; // </METEOR>                                                                                                    // 242\n                                                                                                                       //\n                                                                                                                       //\n    utils.getParentDomain = function (url) {                                                                           // 246\n        // ipv4 ip address                                                                                             // 247\n        if (/^[0-9.]*$/.test(url)) return url; // ipv6 ip address                                                      // 248\n                                                                                                                       //\n        if (/^\\[/.test(url)) return url; // no dots                                                                    // 250\n                                                                                                                       //\n        if (!/[.]/.test(url)) return url;                                                                              // 252\n        var parts = url.split('.').slice(1);                                                                           // 254\n        return parts.join('.');                                                                                        // 255\n    };                                                                                                                 // 256\n                                                                                                                       //\n    utils.objectExtend = function (dst, src) {                                                                         // 258\n        for (var k in meteorBabelHelpers.sanitizeForInObject(src)) {                                                   // 259\n            if (src.hasOwnProperty(k)) {                                                                               // 260\n                dst[k] = src[k];                                                                                       // 261\n            }                                                                                                          // 262\n        }                                                                                                              // 263\n                                                                                                                       //\n        return dst;                                                                                                    // 264\n    };                                                                                                                 // 265\n                                                                                                                       //\n    var WPrefix = '_jp';                                                                                               // 267\n                                                                                                                       //\n    utils.polluteGlobalNamespace = function () {                                                                       // 269\n        if (!(WPrefix in _window)) {                                                                                   // 270\n            _window[WPrefix] = {};                                                                                     // 271\n        }                                                                                                              // 272\n    };                                                                                                                 // 273\n                                                                                                                       //\n    utils.closeFrame = function (code, reason) {                                                                       // 275\n        return 'c' + JSON.stringify([code, reason]);                                                                   // 276\n    };                                                                                                                 // 277\n                                                                                                                       //\n    utils.userSetCode = function (code) {                                                                              // 279\n        return code === 1000 || code >= 3000 && code <= 4999;                                                          // 280\n    }; // See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/                                       // 281\n    // and RFC 2988.                                                                                                   // 284\n                                                                                                                       //\n                                                                                                                       //\n    utils.countRTO = function (rtt) {                                                                                  // 285\n        var rto;                                                                                                       // 286\n                                                                                                                       //\n        if (rtt > 100) {                                                                                               // 287\n            rto = 3 * rtt; // rto > 300msec                                                                            // 288\n        } else {                                                                                                       // 289\n            rto = rtt + 200; // 200msec < rto <= 300msec                                                               // 290\n        }                                                                                                              // 291\n                                                                                                                       //\n        return rto;                                                                                                    // 292\n    };                                                                                                                 // 293\n                                                                                                                       //\n    utils.log = function () {                                                                                          // 295\n        if (_window.console && console.log && console.log.apply) {                                                     // 296\n            console.log.apply(console, arguments);                                                                     // 297\n        }                                                                                                              // 298\n    };                                                                                                                 // 299\n                                                                                                                       //\n    utils.bind = function (fun, that) {                                                                                // 301\n        if (fun.bind) {                                                                                                // 302\n            return fun.bind(that);                                                                                     // 303\n        } else {                                                                                                       // 304\n            return function () {                                                                                       // 305\n                return fun.apply(that, arguments);                                                                     // 306\n            };                                                                                                         // 307\n        }                                                                                                              // 308\n    };                                                                                                                 // 309\n                                                                                                                       //\n    utils.flatUrl = function (url) {                                                                                   // 311\n        return url.indexOf('?') === -1 && url.indexOf('#') === -1;                                                     // 312\n    }; // `relativeTo` is an optional absolute URL. If provided, `url` will be                                         // 313\n    // interpreted relative to `relativeTo`. Defaults to `document.location`.                                          // 316\n    // <METEOR>                                                                                                        // 317\n                                                                                                                       //\n                                                                                                                       //\n    utils.amendUrl = function (url, relativeTo) {                                                                      // 318\n        var baseUrl;                                                                                                   // 319\n                                                                                                                       //\n        if (relativeTo === undefined) {                                                                                // 320\n            baseUrl = _document.location;                                                                              // 321\n        } else {                                                                                                       // 322\n            var protocolMatch = /^([a-z0-9.+-]+:)/i.exec(relativeTo);                                                  // 323\n                                                                                                                       //\n            if (protocolMatch) {                                                                                       // 324\n                var protocol = protocolMatch[0].toLowerCase();                                                         // 325\n                var rest = relativeTo.substring(protocol.length);                                                      // 326\n                var hostMatch = /[a-z0-9\\.-]+(:[0-9]+)?/.exec(rest);                                                   // 327\n                if (hostMatch) var host = hostMatch[0];                                                                // 328\n            }                                                                                                          // 330\n                                                                                                                       //\n            if (!protocol || !host) throw new Error(\"relativeTo must be an absolute url\");                             // 331\n            baseUrl = {                                                                                                // 333\n                protocol: protocol,                                                                                    // 334\n                host: host                                                                                             // 335\n            };                                                                                                         // 333\n        }                                                                                                              // 337\n                                                                                                                       //\n        if (!url) {                                                                                                    // 338\n            throw new Error('Wrong url for SockJS');                                                                   // 339\n        }                                                                                                              // 340\n                                                                                                                       //\n        if (!utils.flatUrl(url)) {                                                                                     // 341\n            throw new Error('Only basic urls are supported in SockJS');                                                // 342\n        } //  '//abc' --> 'http://abc'                                                                                 // 343\n                                                                                                                       //\n                                                                                                                       //\n        if (url.indexOf('//') === 0) {                                                                                 // 346\n            url = baseUrl.protocol + url;                                                                              // 347\n        } // '/abc' --> 'http://localhost:1234/abc'                                                                    // 348\n                                                                                                                       //\n                                                                                                                       //\n        if (url.indexOf('/') === 0) {                                                                                  // 350\n            url = baseUrl.protocol + '//' + baseUrl.host + url;                                                        // 351\n        } // </METEOR>                                                                                                 // 352\n        // strip trailing slashes                                                                                      // 354\n                                                                                                                       //\n                                                                                                                       //\n        url = url.replace(/[/]+$/, ''); // We have a full url here, with proto and host. For some browsers             // 355\n        // http://localhost:80/ is not in the same origin as http://localhost/                                         // 358\n        // Remove explicit :80 or :443 in such cases. See #74                                                          // 359\n                                                                                                                       //\n        var parts = url.split(\"/\");                                                                                    // 360\n                                                                                                                       //\n        if (parts[0] === \"http:\" && /:80$/.test(parts[2]) || parts[0] === \"https:\" && /:443$/.test(parts[2])) {        // 361\n            parts[2] = parts[2].replace(/:(80|443)$/, \"\");                                                             // 363\n        }                                                                                                              // 364\n                                                                                                                       //\n        url = parts.join(\"/\");                                                                                         // 365\n        return url;                                                                                                    // 366\n    }; // IE doesn't support [].indexOf.                                                                               // 367\n                                                                                                                       //\n                                                                                                                       //\n    utils.arrIndexOf = function (arr, obj) {                                                                           // 370\n        for (var i = 0; i < arr.length; i++) {                                                                         // 371\n            if (arr[i] === obj) {                                                                                      // 372\n                return i;                                                                                              // 373\n            }                                                                                                          // 374\n        }                                                                                                              // 375\n                                                                                                                       //\n        return -1;                                                                                                     // 376\n    };                                                                                                                 // 377\n                                                                                                                       //\n    utils.arrSkip = function (arr, obj) {                                                                              // 379\n        var idx = utils.arrIndexOf(arr, obj);                                                                          // 380\n                                                                                                                       //\n        if (idx === -1) {                                                                                              // 381\n            return arr.slice();                                                                                        // 382\n        } else {                                                                                                       // 383\n            var dst = arr.slice(0, idx);                                                                               // 384\n            return dst.concat(arr.slice(idx + 1));                                                                     // 385\n        }                                                                                                              // 386\n    }; // Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df                                // 387\n                                                                                                                       //\n                                                                                                                       //\n    utils.isArray = Array.isArray || function (value) {                                                                // 390\n        return {}.toString.call(value).indexOf('Array') >= 0;                                                          // 391\n    };                                                                                                                 // 392\n                                                                                                                       //\n    utils.delay = function (t, fun) {                                                                                  // 394\n        if (typeof t === 'function') {                                                                                 // 395\n            fun = t;                                                                                                   // 396\n            t = 0;                                                                                                     // 397\n        }                                                                                                              // 398\n                                                                                                                       //\n        return setTimeout(fun, t);                                                                                     // 399\n    }; // Chars worth escaping, as defined by Douglas Crockford:                                                       // 400\n    //   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196       // 404\n                                                                                                                       //\n                                                                                                                       //\n    var json_escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n        json_lookup = {                                                                                                // 405\n        \"\\0\": \"\\\\u0000\",                                                                                               // 407\n        \"\\x01\": \"\\\\u0001\",                                                                                             // 407\n        \"\\x02\": \"\\\\u0002\",                                                                                             // 407\n        \"\\x03\": \"\\\\u0003\",                                                                                             // 407\n        \"\\x04\": \"\\\\u0004\",                                                                                             // 408\n        \"\\x05\": \"\\\\u0005\",                                                                                             // 408\n        \"\\x06\": \"\\\\u0006\",                                                                                             // 408\n        \"\\x07\": \"\\\\u0007\",                                                                                             // 408\n        \"\\b\": \"\\\\b\",                                                                                                   // 409\n        \"\\t\": \"\\\\t\",                                                                                                   // 409\n        \"\\n\": \"\\\\n\",                                                                                                   // 409\n        \"\\x0B\": \"\\\\u000b\",                                                                                             // 409\n        \"\\f\": \"\\\\f\",                                                                                                   // 409\n        \"\\r\": \"\\\\r\",                                                                                                   // 409\n        \"\\x0E\": \"\\\\u000e\",                                                                                             // 410\n        \"\\x0F\": \"\\\\u000f\",                                                                                             // 410\n        \"\\x10\": \"\\\\u0010\",                                                                                             // 410\n        \"\\x11\": \"\\\\u0011\",                                                                                             // 410\n        \"\\x12\": \"\\\\u0012\",                                                                                             // 411\n        \"\\x13\": \"\\\\u0013\",                                                                                             // 411\n        \"\\x14\": \"\\\\u0014\",                                                                                             // 411\n        \"\\x15\": \"\\\\u0015\",                                                                                             // 411\n        \"\\x16\": \"\\\\u0016\",                                                                                             // 412\n        \"\\x17\": \"\\\\u0017\",                                                                                             // 412\n        \"\\x18\": \"\\\\u0018\",                                                                                             // 412\n        \"\\x19\": \"\\\\u0019\",                                                                                             // 412\n        \"\\x1A\": \"\\\\u001a\",                                                                                             // 413\n        \"\\x1B\": \"\\\\u001b\",                                                                                             // 413\n        \"\\x1C\": \"\\\\u001c\",                                                                                             // 413\n        \"\\x1D\": \"\\\\u001d\",                                                                                             // 413\n        \"\\x1E\": \"\\\\u001e\",                                                                                             // 414\n        \"\\x1F\": \"\\\\u001f\",                                                                                             // 414\n        \"\\\"\": \"\\\\\\\"\",                                                                                                  // 414\n        \"\\\\\": \"\\\\\\\\\",                                                                                                  // 414\n        \"\\x7F\": \"\\\\u007f\",                                                                                             // 415\n        \"\\x80\": \"\\\\u0080\",                                                                                             // 415\n        \"\\x81\": \"\\\\u0081\",                                                                                             // 415\n        \"\\x82\": \"\\\\u0082\",                                                                                             // 415\n        \"\\x83\": \"\\\\u0083\",                                                                                             // 416\n        \"\\x84\": \"\\\\u0084\",                                                                                             // 416\n        \"\\x85\": \"\\\\u0085\",                                                                                             // 416\n        \"\\x86\": \"\\\\u0086\",                                                                                             // 416\n        \"\\x87\": \"\\\\u0087\",                                                                                             // 417\n        \"\\x88\": \"\\\\u0088\",                                                                                             // 417\n        \"\\x89\": \"\\\\u0089\",                                                                                             // 417\n        \"\\x8A\": \"\\\\u008a\",                                                                                             // 417\n        \"\\x8B\": \"\\\\u008b\",                                                                                             // 418\n        \"\\x8C\": \"\\\\u008c\",                                                                                             // 418\n        \"\\x8D\": \"\\\\u008d\",                                                                                             // 418\n        \"\\x8E\": \"\\\\u008e\",                                                                                             // 418\n        \"\\x8F\": \"\\\\u008f\",                                                                                             // 419\n        \"\\x90\": \"\\\\u0090\",                                                                                             // 419\n        \"\\x91\": \"\\\\u0091\",                                                                                             // 419\n        \"\\x92\": \"\\\\u0092\",                                                                                             // 419\n        \"\\x93\": \"\\\\u0093\",                                                                                             // 420\n        \"\\x94\": \"\\\\u0094\",                                                                                             // 420\n        \"\\x95\": \"\\\\u0095\",                                                                                             // 420\n        \"\\x96\": \"\\\\u0096\",                                                                                             // 420\n        \"\\x97\": \"\\\\u0097\",                                                                                             // 421\n        \"\\x98\": \"\\\\u0098\",                                                                                             // 421\n        \"\\x99\": \"\\\\u0099\",                                                                                             // 421\n        \"\\x9A\": \"\\\\u009a\",                                                                                             // 421\n        \"\\x9B\": \"\\\\u009b\",                                                                                             // 422\n        \"\\x9C\": \"\\\\u009c\",                                                                                             // 422\n        \"\\x9D\": \"\\\\u009d\",                                                                                             // 422\n        \"\\x9E\": \"\\\\u009e\",                                                                                             // 422\n        \"\\x9F\": \"\\\\u009f\",                                                                                             // 423\n        \"\\xAD\": \"\\\\u00ad\",                                                                                             // 423\n        \"\\u0600\": \"\\\\u0600\",                                                                                           // 423\n        \"\\u0601\": \"\\\\u0601\",                                                                                           // 423\n        \"\\u0602\": \"\\\\u0602\",                                                                                           // 424\n        \"\\u0603\": \"\\\\u0603\",                                                                                           // 424\n        \"\\u0604\": \"\\\\u0604\",                                                                                           // 424\n        \"\\u070F\": \"\\\\u070f\",                                                                                           // 424\n        \"\\u17B4\": \"\\\\u17b4\",                                                                                           // 425\n        \"\\u17B5\": \"\\\\u17b5\",                                                                                           // 425\n        \"\\u200C\": \"\\\\u200c\",                                                                                           // 425\n        \"\\u200D\": \"\\\\u200d\",                                                                                           // 425\n        \"\\u200E\": \"\\\\u200e\",                                                                                           // 426\n        \"\\u200F\": \"\\\\u200f\",                                                                                           // 426\n        \"\\u2028\": \"\\\\u2028\",                                                                                           // 426\n        \"\\u2029\": \"\\\\u2029\",                                                                                           // 426\n        \"\\u202A\": \"\\\\u202a\",                                                                                           // 427\n        \"\\u202B\": \"\\\\u202b\",                                                                                           // 427\n        \"\\u202C\": \"\\\\u202c\",                                                                                           // 427\n        \"\\u202D\": \"\\\\u202d\",                                                                                           // 427\n        \"\\u202E\": \"\\\\u202e\",                                                                                           // 428\n        \"\\u202F\": \"\\\\u202f\",                                                                                           // 428\n        \"\\u2060\": \"\\\\u2060\",                                                                                           // 428\n        \"\\u2061\": \"\\\\u2061\",                                                                                           // 428\n        \"\\u2062\": \"\\\\u2062\",                                                                                           // 429\n        \"\\u2063\": \"\\\\u2063\",                                                                                           // 429\n        \"\\u2064\": \"\\\\u2064\",                                                                                           // 429\n        \"\\u2065\": \"\\\\u2065\",                                                                                           // 429\n        \"\\u2066\": \"\\\\u2066\",                                                                                           // 430\n        \"\\u2067\": \"\\\\u2067\",                                                                                           // 430\n        \"\\u2068\": \"\\\\u2068\",                                                                                           // 430\n        \"\\u2069\": \"\\\\u2069\",                                                                                           // 430\n        \"\\u206A\": \"\\\\u206a\",                                                                                           // 431\n        \"\\u206B\": \"\\\\u206b\",                                                                                           // 431\n        \"\\u206C\": \"\\\\u206c\",                                                                                           // 431\n        \"\\u206D\": \"\\\\u206d\",                                                                                           // 431\n        \"\\u206E\": \"\\\\u206e\",                                                                                           // 432\n        \"\\u206F\": \"\\\\u206f\",                                                                                           // 432\n        \"\\uFEFF\": \"\\\\ufeff\",                                                                                           // 432\n        \"\\uFFF0\": \"\\\\ufff0\",                                                                                           // 432\n        \"\\uFFF1\": \"\\\\ufff1\",                                                                                           // 433\n        \"\\uFFF2\": \"\\\\ufff2\",                                                                                           // 433\n        \"\\uFFF3\": \"\\\\ufff3\",                                                                                           // 433\n        \"\\uFFF4\": \"\\\\ufff4\",                                                                                           // 433\n        \"\\uFFF5\": \"\\\\ufff5\",                                                                                           // 434\n        \"\\uFFF6\": \"\\\\ufff6\",                                                                                           // 434\n        \"\\uFFF7\": \"\\\\ufff7\",                                                                                           // 434\n        \"\\uFFF8\": \"\\\\ufff8\",                                                                                           // 434\n        \"\\uFFF9\": \"\\\\ufff9\",                                                                                           // 435\n        \"\\uFFFA\": \"\\\\ufffa\",                                                                                           // 435\n        \"\\uFFFB\": \"\\\\ufffb\",                                                                                           // 435\n        \"\\uFFFC\": \"\\\\ufffc\",                                                                                           // 435\n        \"\\uFFFD\": \"\\\\ufffd\",                                                                                           // 436\n        \"\\uFFFE\": \"\\\\ufffe\",                                                                                           // 436\n        \"\\uFFFF\": \"\\\\uffff\"                                                                                            // 436\n    }; // Some extra characters that Chrome gets wrong, and substitutes with                                           // 406\n    // something else on the wire.                                                                                     // 439\n                                                                                                                       //\n    var extra_escapable = /[\\x00-\\x1f\\ud800-\\udfff\\ufffe\\uffff\\u0300-\\u0333\\u033d-\\u0346\\u034a-\\u034c\\u0350-\\u0352\\u0357-\\u0358\\u035c-\\u0362\\u0374\\u037e\\u0387\\u0591-\\u05af\\u05c4\\u0610-\\u0617\\u0653-\\u0654\\u0657-\\u065b\\u065d-\\u065e\\u06df-\\u06e2\\u06eb-\\u06ec\\u0730\\u0732-\\u0733\\u0735-\\u0736\\u073a\\u073d\\u073f-\\u0741\\u0743\\u0745\\u0747\\u07eb-\\u07f1\\u0951\\u0958-\\u095f\\u09dc-\\u09dd\\u09df\\u0a33\\u0a36\\u0a59-\\u0a5b\\u0a5e\\u0b5c-\\u0b5d\\u0e38-\\u0e39\\u0f43\\u0f4d\\u0f52\\u0f57\\u0f5c\\u0f69\\u0f72-\\u0f76\\u0f78\\u0f80-\\u0f83\\u0f93\\u0f9d\\u0fa2\\u0fa7\\u0fac\\u0fb9\\u1939-\\u193a\\u1a17\\u1b6b\\u1cda-\\u1cdb\\u1dc0-\\u1dcf\\u1dfc\\u1dfe\\u1f71\\u1f73\\u1f75\\u1f77\\u1f79\\u1f7b\\u1f7d\\u1fbb\\u1fbe\\u1fc9\\u1fcb\\u1fd3\\u1fdb\\u1fe3\\u1feb\\u1fee-\\u1fef\\u1ff9\\u1ffb\\u1ffd\\u2000-\\u2001\\u20d0-\\u20d1\\u20d4-\\u20d7\\u20e7-\\u20e9\\u2126\\u212a-\\u212b\\u2329-\\u232a\\u2adc\\u302b-\\u302c\\uaab2-\\uaab3\\uf900-\\ufa0d\\ufa10\\ufa12\\ufa15-\\ufa1e\\ufa20\\ufa22\\ufa25-\\ufa26\\ufa2a-\\ufa2d\\ufa30-\\ufa6d\\ufa70-\\ufad9\\ufb1d\\ufb1f\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufb4e\\ufff0-\\uffff]/g,\n        extra_lookup; // JSON Quote string. Use native implementation when possible.                                   // 440\n                                                                                                                       //\n    var JSONQuote = JSON && JSON.stringify || function (string) {                                                      // 444\n        json_escapable.lastIndex = 0;                                                                                  // 445\n                                                                                                                       //\n        if (json_escapable.test(string)) {                                                                             // 446\n            string = string.replace(json_escapable, function (a) {                                                     // 447\n                return json_lookup[a];                                                                                 // 448\n            });                                                                                                        // 449\n        }                                                                                                              // 450\n                                                                                                                       //\n        return '\"' + string + '\"';                                                                                     // 451\n    }; // This may be quite slow, so let's delay until user actually uses bad                                          // 452\n    // characters.                                                                                                     // 455\n                                                                                                                       //\n                                                                                                                       //\n    var unroll_lookup = function (escapable) {                                                                         // 456\n        var i;                                                                                                         // 457\n        var unrolled = {};                                                                                             // 458\n        var c = [];                                                                                                    // 459\n                                                                                                                       //\n        for (i = 0; i < 65536; i++) {                                                                                  // 460\n            c.push(String.fromCharCode(i));                                                                            // 461\n        }                                                                                                              // 462\n                                                                                                                       //\n        escapable.lastIndex = 0;                                                                                       // 463\n        c.join('').replace(escapable, function (a) {                                                                   // 464\n            unrolled[a] = \"\\\\u\" + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);                                   // 465\n            return '';                                                                                                 // 466\n        });                                                                                                            // 467\n        escapable.lastIndex = 0;                                                                                       // 468\n        return unrolled;                                                                                               // 469\n    }; // Quote string, also taking care of unicode characters that browsers                                           // 470\n    // often break. Especially, take care of unicode surrogates:                                                       // 473\n    //    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates                                        // 474\n                                                                                                                       //\n                                                                                                                       //\n    utils.quote = function (string) {                                                                                  // 475\n        var quoted = JSONQuote(string); // In most cases this should be very fast and good enough.                     // 476\n                                                                                                                       //\n        extra_escapable.lastIndex = 0;                                                                                 // 479\n                                                                                                                       //\n        if (!extra_escapable.test(quoted)) {                                                                           // 480\n            return quoted;                                                                                             // 481\n        }                                                                                                              // 482\n                                                                                                                       //\n        if (!extra_lookup) extra_lookup = unroll_lookup(extra_escapable);                                              // 484\n        return quoted.replace(extra_escapable, function (a) {                                                          // 486\n            return extra_lookup[a];                                                                                    // 487\n        });                                                                                                            // 488\n    };                                                                                                                 // 489\n                                                                                                                       //\n    var _all_protocols = ['websocket', 'xdr-streaming', 'xhr-streaming', 'iframe-eventsource', 'iframe-htmlfile', 'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'];\n                                                                                                                       //\n    utils.probeProtocols = function () {                                                                               // 501\n        var probed = {};                                                                                               // 502\n                                                                                                                       //\n        for (var i = 0; i < _all_protocols.length; i++) {                                                              // 503\n            var protocol = _all_protocols[i]; // User can have a typo in protocol name.                                // 504\n                                                                                                                       //\n            probed[protocol] = SockJS[protocol] && SockJS[protocol].enabled();                                         // 506\n        }                                                                                                              // 508\n                                                                                                                       //\n        return probed;                                                                                                 // 509\n    };                                                                                                                 // 510\n                                                                                                                       //\n    utils.detectProtocols = function (probed, protocols_whitelist, info) {                                             // 512\n        var pe = {},                                                                                                   // 513\n            protocols = [];                                                                                            // 513\n        if (!protocols_whitelist) protocols_whitelist = _all_protocols;                                                // 515\n                                                                                                                       //\n        for (var i = 0; i < protocols_whitelist.length; i++) {                                                         // 516\n            var protocol = protocols_whitelist[i];                                                                     // 517\n            pe[protocol] = probed[protocol];                                                                           // 518\n        }                                                                                                              // 519\n                                                                                                                       //\n        var maybe_push = function (protos) {                                                                           // 520\n            var proto = protos.shift();                                                                                // 521\n                                                                                                                       //\n            if (pe[proto]) {                                                                                           // 522\n                protocols.push(proto);                                                                                 // 523\n            } else {                                                                                                   // 524\n                if (protos.length > 0) {                                                                               // 525\n                    maybe_push(protos);                                                                                // 526\n                }                                                                                                      // 527\n            }                                                                                                          // 528\n        }; // 1. Websocket                                                                                             // 529\n                                                                                                                       //\n                                                                                                                       //\n        if (info.websocket !== false) {                                                                                // 532\n            maybe_push(['websocket']);                                                                                 // 533\n        } // 2. Streaming                                                                                              // 534\n                                                                                                                       //\n                                                                                                                       //\n        if (pe['xhr-streaming'] && !info.null_origin) {                                                                // 537\n            protocols.push('xhr-streaming');                                                                           // 538\n        } else {                                                                                                       // 539\n            if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {                                     // 540\n                protocols.push('xdr-streaming');                                                                       // 541\n            } else {                                                                                                   // 542\n                maybe_push(['iframe-eventsource', 'iframe-htmlfile']);                                                 // 543\n            }                                                                                                          // 545\n        } // 3. Polling                                                                                                // 546\n                                                                                                                       //\n                                                                                                                       //\n        if (pe['xhr-polling'] && !info.null_origin) {                                                                  // 549\n            protocols.push('xhr-polling');                                                                             // 550\n        } else {                                                                                                       // 551\n            if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {                                       // 552\n                protocols.push('xdr-polling');                                                                         // 553\n            } else {                                                                                                   // 554\n                maybe_push(['iframe-xhr-polling', 'jsonp-polling']);                                                   // 555\n            }                                                                                                          // 557\n        }                                                                                                              // 558\n                                                                                                                       //\n        return protocols;                                                                                              // 559\n    }; //         [*] End of lib/utils.js                                                                              // 560\n    //         [*] Including lib/dom.js                                                                                // 564\n    /*                                                                                                                 // 565\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */ // May be used by htmlfile jsonp and transports.                                                               //\n                                                                                                                       //\n                                                                                                                       //\n    var MPrefix = '_sockjs_global';                                                                                    // 574\n                                                                                                                       //\n    utils.createHook = function () {                                                                                   // 575\n        var window_id = 'a' + utils.random_string(8);                                                                  // 576\n                                                                                                                       //\n        if (!(MPrefix in _window)) {                                                                                   // 577\n            var map = {};                                                                                              // 578\n                                                                                                                       //\n            _window[MPrefix] = function (window_id) {                                                                  // 579\n                if (!(window_id in map)) {                                                                             // 580\n                    map[window_id] = {                                                                                 // 581\n                        id: window_id,                                                                                 // 582\n                        del: function () {                                                                             // 583\n                            delete map[window_id];                                                                     // 583\n                        }                                                                                              // 583\n                    };                                                                                                 // 581\n                }                                                                                                      // 585\n                                                                                                                       //\n                return map[window_id];                                                                                 // 586\n            };                                                                                                         // 587\n        }                                                                                                              // 588\n                                                                                                                       //\n        return _window[MPrefix](window_id);                                                                            // 589\n    };                                                                                                                 // 590\n                                                                                                                       //\n    utils.attachMessage = function (listener) {                                                                        // 594\n        utils.attachEvent('message', listener);                                                                        // 595\n    };                                                                                                                 // 596\n                                                                                                                       //\n    utils.attachEvent = function (event, listener) {                                                                   // 597\n        if (typeof _window.addEventListener !== 'undefined') {                                                         // 598\n            _window.addEventListener(event, listener, false);                                                          // 599\n        } else {                                                                                                       // 600\n            // IE quirks.                                                                                              // 601\n            // According to: http://stevesouders.com/misc/test-postmessage.php                                         // 602\n            // the message gets delivered only to 'document', not 'window'.                                            // 603\n            _document.attachEvent(\"on\" + event, listener); // I get 'window' for ie8.                                  // 604\n                                                                                                                       //\n                                                                                                                       //\n            _window.attachEvent(\"on\" + event, listener);                                                               // 606\n        }                                                                                                              // 607\n    };                                                                                                                 // 608\n                                                                                                                       //\n    utils.detachMessage = function (listener) {                                                                        // 610\n        utils.detachEvent('message', listener);                                                                        // 611\n    };                                                                                                                 // 612\n                                                                                                                       //\n    utils.detachEvent = function (event, listener) {                                                                   // 613\n        if (typeof _window.addEventListener !== 'undefined') {                                                         // 614\n            _window.removeEventListener(event, listener, false);                                                       // 615\n        } else {                                                                                                       // 616\n            _document.detachEvent(\"on\" + event, listener);                                                             // 617\n                                                                                                                       //\n            _window.detachEvent(\"on\" + event, listener);                                                               // 618\n        }                                                                                                              // 619\n    };                                                                                                                 // 620\n                                                                                                                       //\n    var on_unload = {}; // Things registered after beforeunload are to be called immediately.                          // 623\n                                                                                                                       //\n    var after_unload = false;                                                                                          // 625\n                                                                                                                       //\n    var trigger_unload_callbacks = function () {                                                                       // 627\n        for (var ref in meteorBabelHelpers.sanitizeForInObject(on_unload)) {                                           // 628\n            on_unload[ref]();                                                                                          // 629\n            delete on_unload[ref];                                                                                     // 630\n        }                                                                                                              // 631\n                                                                                                                       //\n        ;                                                                                                              // 631\n    };                                                                                                                 // 632\n                                                                                                                       //\n    var unload_triggered = function () {                                                                               // 634\n        if (after_unload) return;                                                                                      // 635\n        after_unload = true;                                                                                           // 636\n        trigger_unload_callbacks();                                                                                    // 637\n    }; // 'unload' alone is not reliable in opera within an iframe, but we                                             // 638\n    // can't use `beforeunload` as IE fires it on javascript: links.                                                   // 641\n                                                                                                                       //\n                                                                                                                       //\n    utils.attachEvent('unload', unload_triggered);                                                                     // 642\n                                                                                                                       //\n    utils.unload_add = function (listener) {                                                                           // 644\n        var ref = utils.random_string(8);                                                                              // 645\n        on_unload[ref] = listener;                                                                                     // 646\n                                                                                                                       //\n        if (after_unload) {                                                                                            // 647\n            utils.delay(trigger_unload_callbacks);                                                                     // 648\n        }                                                                                                              // 649\n                                                                                                                       //\n        return ref;                                                                                                    // 650\n    };                                                                                                                 // 651\n                                                                                                                       //\n    utils.unload_del = function (ref) {                                                                                // 652\n        if (ref in on_unload) delete on_unload[ref];                                                                   // 653\n    };                                                                                                                 // 655\n                                                                                                                       //\n    utils.createIframe = function (iframe_url, error_callback) {                                                       // 658\n        var iframe = _document.createElement('iframe');                                                                // 659\n                                                                                                                       //\n        var tref, unload_ref;                                                                                          // 660\n                                                                                                                       //\n        var unattach = function () {                                                                                   // 661\n            clearTimeout(tref); // Explorer had problems with that.                                                    // 662\n                                                                                                                       //\n            try {                                                                                                      // 664\n                iframe.onload = null;                                                                                  // 664\n            } catch (x) {}                                                                                             // 664\n                                                                                                                       //\n            iframe.onerror = null;                                                                                     // 665\n        };                                                                                                             // 666\n                                                                                                                       //\n        var cleanup = function () {                                                                                    // 667\n            if (iframe) {                                                                                              // 668\n                unattach(); // This timeout makes chrome fire onbeforeunload event                                     // 669\n                // within iframe. Without the timeout it goes straight to                                              // 671\n                // onunload.                                                                                           // 672\n                                                                                                                       //\n                setTimeout(function () {                                                                               // 673\n                    if (iframe) {                                                                                      // 674\n                        iframe.parentNode.removeChild(iframe);                                                         // 675\n                    }                                                                                                  // 676\n                                                                                                                       //\n                    iframe = null;                                                                                     // 677\n                }, 0);                                                                                                 // 678\n                utils.unload_del(unload_ref);                                                                          // 679\n            }                                                                                                          // 680\n        };                                                                                                             // 681\n                                                                                                                       //\n        var onerror = function (r) {                                                                                   // 682\n            if (iframe) {                                                                                              // 683\n                cleanup();                                                                                             // 684\n                error_callback(r);                                                                                     // 685\n            }                                                                                                          // 686\n        };                                                                                                             // 687\n                                                                                                                       //\n        var post = function (msg, origin) {                                                                            // 688\n            try {                                                                                                      // 689\n                // When the iframe is not loaded, IE raises an exception                                               // 690\n                // on 'contentWindow'.                                                                                 // 691\n                if (iframe && iframe.contentWindow) {                                                                  // 692\n                    iframe.contentWindow.postMessage(msg, origin);                                                     // 693\n                }                                                                                                      // 694\n            } catch (x) {}                                                                                             // 695\n                                                                                                                       //\n            ;                                                                                                          // 695\n        };                                                                                                             // 696\n                                                                                                                       //\n        iframe.src = iframe_url;                                                                                       // 698\n        iframe.style.display = 'none';                                                                                 // 699\n        iframe.style.position = 'absolute';                                                                            // 700\n                                                                                                                       //\n        iframe.onerror = function () {                                                                                 // 701\n            onerror('onerror');                                                                                        // 701\n        };                                                                                                             // 701\n                                                                                                                       //\n        iframe.onload = function () {                                                                                  // 702\n            // `onload` is triggered before scripts on the iframe are                                                  // 703\n            // executed. Give it few seconds to actually load stuff.                                                   // 704\n            clearTimeout(tref);                                                                                        // 705\n            tref = setTimeout(function () {                                                                            // 706\n                onerror('onload timeout');                                                                             // 706\n            }, 2000);                                                                                                  // 706\n        };                                                                                                             // 707\n                                                                                                                       //\n        _document.body.appendChild(iframe);                                                                            // 708\n                                                                                                                       //\n        tref = setTimeout(function () {                                                                                // 709\n            onerror('timeout');                                                                                        // 709\n        }, 15000);                                                                                                     // 709\n        unload_ref = utils.unload_add(cleanup);                                                                        // 710\n        return {                                                                                                       // 711\n            post: post,                                                                                                // 712\n            cleanup: cleanup,                                                                                          // 713\n            loaded: unattach                                                                                           // 714\n        };                                                                                                             // 711\n    };                                                                                                                 // 716\n                                                                                                                       //\n    utils.createHtmlfile = function (iframe_url, error_callback) {                                                     // 718\n        var doc = new ActiveXObject('htmlfile');                                                                       // 719\n        var tref, unload_ref;                                                                                          // 720\n        var iframe;                                                                                                    // 721\n                                                                                                                       //\n        var unattach = function () {                                                                                   // 722\n            clearTimeout(tref);                                                                                        // 723\n        };                                                                                                             // 724\n                                                                                                                       //\n        var cleanup = function () {                                                                                    // 725\n            if (doc) {                                                                                                 // 726\n                unattach();                                                                                            // 727\n                utils.unload_del(unload_ref);                                                                          // 728\n                iframe.parentNode.removeChild(iframe);                                                                 // 729\n                iframe = doc = null;                                                                                   // 730\n                CollectGarbage();                                                                                      // 731\n            }                                                                                                          // 732\n        };                                                                                                             // 733\n                                                                                                                       //\n        var onerror = function (r) {                                                                                   // 734\n            if (doc) {                                                                                                 // 735\n                cleanup();                                                                                             // 736\n                error_callback(r);                                                                                     // 737\n            }                                                                                                          // 738\n        };                                                                                                             // 739\n                                                                                                                       //\n        var post = function (msg, origin) {                                                                            // 740\n            try {                                                                                                      // 741\n                // When the iframe is not loaded, IE raises an exception                                               // 742\n                // on 'contentWindow'.                                                                                 // 743\n                if (iframe && iframe.contentWindow) {                                                                  // 744\n                    iframe.contentWindow.postMessage(msg, origin);                                                     // 745\n                }                                                                                                      // 746\n            } catch (x) {}                                                                                             // 747\n                                                                                                                       //\n            ;                                                                                                          // 747\n        };                                                                                                             // 748\n                                                                                                                       //\n        doc.open();                                                                                                    // 750\n        doc.write('<html><s' + 'cript>' + 'document.domain=\"' + document.domain + '\";' + '</s' + 'cript></html>');     // 751\n        doc.close();                                                                                                   // 754\n        doc.parentWindow[WPrefix] = _window[WPrefix];                                                                  // 755\n        var c = doc.createElement('div');                                                                              // 756\n        doc.body.appendChild(c);                                                                                       // 757\n        iframe = doc.createElement('iframe');                                                                          // 758\n        c.appendChild(iframe);                                                                                         // 759\n        iframe.src = iframe_url;                                                                                       // 760\n        tref = setTimeout(function () {                                                                                // 761\n            onerror('timeout');                                                                                        // 761\n        }, 15000);                                                                                                     // 761\n        unload_ref = utils.unload_add(cleanup);                                                                        // 762\n        return {                                                                                                       // 763\n            post: post,                                                                                                // 764\n            cleanup: cleanup,                                                                                          // 765\n            loaded: unattach                                                                                           // 766\n        };                                                                                                             // 763\n    }; //         [*] End of lib/dom.js                                                                                // 768\n    //         [*] Including lib/dom2.js                                                                               // 772\n    /*                                                                                                                 // 773\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var AbstractXHRObject = function () {};                                                                            // 781\n                                                                                                                       //\n    AbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']);                                               // 782\n                                                                                                                       //\n    AbstractXHRObject.prototype._start = function (method, url, payload, opts) {                                       // 784\n        var that = this;                                                                                               // 785\n                                                                                                                       //\n        try {                                                                                                          // 787\n            that.xhr = new XMLHttpRequest();                                                                           // 788\n        } catch (x) {}                                                                                                 // 789\n                                                                                                                       //\n        ;                                                                                                              // 789\n                                                                                                                       //\n        if (!that.xhr) {                                                                                               // 791\n            try {                                                                                                      // 792\n                that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP');                                             // 793\n            } catch (x) {}                                                                                             // 794\n                                                                                                                       //\n            ;                                                                                                          // 794\n        }                                                                                                              // 795\n                                                                                                                       //\n        if (_window.ActiveXObject || _window.XDomainRequest) {                                                         // 796\n            // IE8 caches even POSTs                                                                                   // 797\n            url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date();                                         // 798\n        } // Explorer tends to keep connection open, even after the                                                    // 799\n        // tab gets closed: http://bugs.jquery.com/ticket/5280                                                         // 802\n                                                                                                                       //\n                                                                                                                       //\n        that.unload_ref = utils.unload_add(function () {                                                               // 803\n            that._cleanup(true);                                                                                       // 803\n        });                                                                                                            // 803\n                                                                                                                       //\n        try {                                                                                                          // 804\n            that.xhr.open(method, url, true);                                                                          // 805\n        } catch (e) {                                                                                                  // 806\n            // IE raises an exception on wrong port.                                                                   // 807\n            that.emit('finish', 0, '');                                                                                // 808\n                                                                                                                       //\n            that._cleanup();                                                                                           // 809\n                                                                                                                       //\n            return;                                                                                                    // 810\n        }                                                                                                              // 811\n                                                                                                                       //\n        ;                                                                                                              // 811\n                                                                                                                       //\n        if (!opts || !opts.no_credentials) {                                                                           // 813\n            // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :                                     // 814\n            // \"This never affects same-site requests.\"                                                                // 815\n            that.xhr.withCredentials = 'true';                                                                         // 816\n        }                                                                                                              // 817\n                                                                                                                       //\n        if (opts && opts.headers) {                                                                                    // 818\n            for (var key in meteorBabelHelpers.sanitizeForInObject(opts.headers)) {                                    // 819\n                that.xhr.setRequestHeader(key, opts.headers[key]);                                                     // 820\n            }                                                                                                          // 821\n        }                                                                                                              // 822\n                                                                                                                       //\n        that.xhr.onreadystatechange = function () {                                                                    // 824\n            if (that.xhr) {                                                                                            // 825\n                var x = that.xhr;                                                                                      // 826\n                                                                                                                       //\n                switch (x.readyState) {                                                                                // 827\n                    case 3:                                                                                            // 828\n                        // IE doesn't like peeking into responseText or status                                         // 829\n                        // on Microsoft.XMLHTTP and readystate=3                                                       // 830\n                        try {                                                                                          // 831\n                            var status = x.status;                                                                     // 832\n                            var text = x.responseText;                                                                 // 833\n                        } catch (x) {}                                                                                 // 834\n                                                                                                                       //\n                        ; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450                               // 834\n                                                                                                                       //\n                        if (status === 1223) status = 204; // IE does return readystate == 3 for 404 answers.          // 836\n                                                                                                                       //\n                        if (text && text.length > 0) {                                                                 // 839\n                            that.emit('chunk', status, text);                                                          // 840\n                        }                                                                                              // 841\n                                                                                                                       //\n                        break;                                                                                         // 842\n                                                                                                                       //\n                    case 4:                                                                                            // 843\n                        var status = x.status; // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450          // 844\n                                                                                                                       //\n                        if (status === 1223) status = 204;                                                             // 846\n                        that.emit('finish', status, x.responseText);                                                   // 848\n                                                                                                                       //\n                        that._cleanup(false);                                                                          // 849\n                                                                                                                       //\n                        break;                                                                                         // 850\n                }                                                                                                      // 827\n            }                                                                                                          // 852\n        };                                                                                                             // 853\n                                                                                                                       //\n        that.xhr.send(payload);                                                                                        // 854\n    };                                                                                                                 // 855\n                                                                                                                       //\n    AbstractXHRObject.prototype._cleanup = function (abort) {                                                          // 857\n        var that = this;                                                                                               // 858\n        if (!that.xhr) return;                                                                                         // 859\n        utils.unload_del(that.unload_ref); // IE needs this field to be a function                                     // 860\n                                                                                                                       //\n        that.xhr.onreadystatechange = function () {};                                                                  // 863\n                                                                                                                       //\n        if (abort) {                                                                                                   // 865\n            try {                                                                                                      // 866\n                that.xhr.abort();                                                                                      // 867\n            } catch (x) {}                                                                                             // 868\n                                                                                                                       //\n            ;                                                                                                          // 868\n        }                                                                                                              // 869\n                                                                                                                       //\n        that.unload_ref = that.xhr = null;                                                                             // 870\n    };                                                                                                                 // 871\n                                                                                                                       //\n    AbstractXHRObject.prototype.close = function () {                                                                  // 873\n        var that = this;                                                                                               // 874\n        that.nuke();                                                                                                   // 875\n                                                                                                                       //\n        that._cleanup(true);                                                                                           // 876\n    };                                                                                                                 // 877\n                                                                                                                       //\n    var XHRCorsObject = utils.XHRCorsObject = function () {                                                            // 879\n        var that = this,                                                                                               // 880\n            args = arguments;                                                                                          // 880\n        utils.delay(function () {                                                                                      // 881\n            that._start.apply(that, args);                                                                             // 881\n        });                                                                                                            // 881\n    };                                                                                                                 // 882\n                                                                                                                       //\n    XHRCorsObject.prototype = new AbstractXHRObject();                                                                 // 883\n                                                                                                                       //\n    var XHRLocalObject = utils.XHRLocalObject = function (method, url, payload) {                                      // 885\n        var that = this;                                                                                               // 886\n        utils.delay(function () {                                                                                      // 887\n            that._start(method, url, payload, {                                                                        // 888\n                no_credentials: true                                                                                   // 889\n            });                                                                                                        // 888\n        });                                                                                                            // 891\n    };                                                                                                                 // 892\n                                                                                                                       //\n    XHRLocalObject.prototype = new AbstractXHRObject(); // References:                                                 // 893\n    //   http://ajaxian.com/archives/100-line-ajax-wrapper                                                             // 898\n    //   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx                                                // 899\n                                                                                                                       //\n    var XDRObject = utils.XDRObject = function (method, url, payload) {                                                // 900\n        var that = this;                                                                                               // 901\n        utils.delay(function () {                                                                                      // 902\n            that._start(method, url, payload);                                                                         // 902\n        });                                                                                                            // 902\n    };                                                                                                                 // 903\n                                                                                                                       //\n    XDRObject.prototype = new EventEmitter(['chunk', 'finish']);                                                       // 904\n                                                                                                                       //\n    XDRObject.prototype._start = function (method, url, payload) {                                                     // 905\n        var that = this;                                                                                               // 906\n        var xdr = new XDomainRequest(); // IE caches even POSTs                                                        // 907\n                                                                                                                       //\n        url += (url.indexOf('?') === -1 ? '?' : '&') + 't=' + +new Date();                                             // 909\n                                                                                                                       //\n        var onerror = xdr.ontimeout = xdr.onerror = function () {                                                      // 911\n            that.emit('finish', 0, '');                                                                                // 912\n                                                                                                                       //\n            that._cleanup(false);                                                                                      // 913\n        };                                                                                                             // 914\n                                                                                                                       //\n        xdr.onprogress = function () {                                                                                 // 915\n            that.emit('chunk', 200, xdr.responseText);                                                                 // 916\n        };                                                                                                             // 917\n                                                                                                                       //\n        xdr.onload = function () {                                                                                     // 918\n            that.emit('finish', 200, xdr.responseText);                                                                // 919\n                                                                                                                       //\n            that._cleanup(false);                                                                                      // 920\n        };                                                                                                             // 921\n                                                                                                                       //\n        that.xdr = xdr;                                                                                                // 922\n        that.unload_ref = utils.unload_add(function () {                                                               // 923\n            that._cleanup(true);                                                                                       // 923\n        });                                                                                                            // 923\n                                                                                                                       //\n        try {                                                                                                          // 924\n            // Fails with AccessDenied if port number is bogus                                                         // 925\n            that.xdr.open(method, url);                                                                                // 926\n            that.xdr.send(payload);                                                                                    // 927\n        } catch (x) {                                                                                                  // 928\n            onerror();                                                                                                 // 929\n        }                                                                                                              // 930\n    };                                                                                                                 // 931\n                                                                                                                       //\n    XDRObject.prototype._cleanup = function (abort) {                                                                  // 933\n        var that = this;                                                                                               // 934\n        if (!that.xdr) return;                                                                                         // 935\n        utils.unload_del(that.unload_ref);                                                                             // 936\n        that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress = that.xdr.onload = null;                          // 938\n                                                                                                                       //\n        if (abort) {                                                                                                   // 940\n            try {                                                                                                      // 941\n                that.xdr.abort();                                                                                      // 942\n            } catch (x) {}                                                                                             // 943\n                                                                                                                       //\n            ;                                                                                                          // 943\n        }                                                                                                              // 944\n                                                                                                                       //\n        that.unload_ref = that.xdr = null;                                                                             // 945\n    };                                                                                                                 // 946\n                                                                                                                       //\n    XDRObject.prototype.close = function () {                                                                          // 948\n        var that = this;                                                                                               // 949\n        that.nuke();                                                                                                   // 950\n                                                                                                                       //\n        that._cleanup(true);                                                                                           // 951\n    }; // 1. Is natively via XHR                                                                                       // 952\n    // 2. Is natively via XDR                                                                                          // 955\n    // 3. Nope, but postMessage is there so it should work via the Iframe.                                             // 956\n    // 4. Nope, sorry.                                                                                                 // 957\n                                                                                                                       //\n                                                                                                                       //\n    utils.isXHRCorsCapable = function () {                                                                             // 958\n        if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {                                     // 959\n            return 1;                                                                                                  // 960\n        } // XDomainRequest doesn't work if page is served from file://                                                // 961\n                                                                                                                       //\n                                                                                                                       //\n        if (_window.XDomainRequest && _document.domain) {                                                              // 963\n            return 2;                                                                                                  // 964\n        }                                                                                                              // 965\n                                                                                                                       //\n        if (IframeTransport.enabled()) {                                                                               // 966\n            return 3;                                                                                                  // 967\n        }                                                                                                              // 968\n                                                                                                                       //\n        return 4;                                                                                                      // 969\n    }; //         [*] End of lib/dom2.js                                                                               // 970\n    //         [*] Including lib/sockjs.js                                                                             // 974\n    /*                                                                                                                 // 975\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var SockJS = function (url, dep_protocols_whitelist, options) {                                                    // 983\n        if (!(this instanceof SockJS)) {                                                                               // 984\n            // makes `new` optional                                                                                    // 985\n            return new SockJS(url, dep_protocols_whitelist, options);                                                  // 986\n        }                                                                                                              // 987\n                                                                                                                       //\n        var that = this,                                                                                               // 989\n            protocols_whitelist;                                                                                       // 989\n        that._options = {                                                                                              // 990\n            devel: false,                                                                                              // 990\n            debug: false,                                                                                              // 990\n            protocols_whitelist: [],                                                                                   // 990\n            info: undefined,                                                                                           // 991\n            rtt: undefined                                                                                             // 991\n        };                                                                                                             // 990\n                                                                                                                       //\n        if (options) {                                                                                                 // 992\n            utils.objectExtend(that._options, options);                                                                // 993\n        }                                                                                                              // 994\n                                                                                                                       //\n        that._base_url = utils.amendUrl(url);                                                                          // 995\n        that._server = that._options.server || utils.random_number_string(1000);                                       // 996\n                                                                                                                       //\n        if (that._options.protocols_whitelist && that._options.protocols_whitelist.length) {                           // 997\n            protocols_whitelist = that._options.protocols_whitelist;                                                   // 999\n        } else {                                                                                                       // 1000\n            // Deprecated API                                                                                          // 1001\n            if (typeof dep_protocols_whitelist === 'string' && dep_protocols_whitelist.length > 0) {                   // 1002\n                protocols_whitelist = [dep_protocols_whitelist];                                                       // 1004\n            } else if (utils.isArray(dep_protocols_whitelist)) {                                                       // 1005\n                protocols_whitelist = dep_protocols_whitelist;                                                         // 1006\n            } else {                                                                                                   // 1007\n                protocols_whitelist = null;                                                                            // 1008\n            }                                                                                                          // 1009\n                                                                                                                       //\n            if (protocols_whitelist) {                                                                                 // 1010\n                that._debug('Deprecated API: Use \"protocols_whitelist\" option ' + 'instead of supplying protocol list as a second ' + 'parameter to SockJS constructor.');\n            }                                                                                                          // 1014\n        }                                                                                                              // 1015\n                                                                                                                       //\n        that._protocols = [];                                                                                          // 1016\n        that.protocol = null;                                                                                          // 1017\n        that.readyState = SockJS.CONNECTING;                                                                           // 1018\n        that._ir = createInfoReceiver(that._base_url);                                                                 // 1019\n                                                                                                                       //\n        that._ir.onfinish = function (info, rtt) {                                                                     // 1020\n            that._ir = null;                                                                                           // 1021\n                                                                                                                       //\n            if (info) {                                                                                                // 1022\n                if (that._options.info) {                                                                              // 1023\n                    // Override if user supplies the option                                                            // 1024\n                    info = utils.objectExtend(info, that._options.info);                                               // 1025\n                }                                                                                                      // 1026\n                                                                                                                       //\n                if (that._options.rtt) {                                                                               // 1027\n                    rtt = that._options.rtt;                                                                           // 1028\n                }                                                                                                      // 1029\n                                                                                                                       //\n                that._applyInfo(info, rtt, protocols_whitelist);                                                       // 1030\n                                                                                                                       //\n                that._didClose();                                                                                      // 1031\n            } else {                                                                                                   // 1032\n                that._didClose(1002, 'Can\\'t connect to server', true);                                                // 1033\n            }                                                                                                          // 1034\n        };                                                                                                             // 1035\n    }; // Inheritance                                                                                                  // 1036\n                                                                                                                       //\n                                                                                                                       //\n    SockJS.prototype = new REventTarget();                                                                             // 1038\n    SockJS.version = \"0.3.4\";                                                                                          // 1040\n    SockJS.CONNECTING = 0;                                                                                             // 1042\n    SockJS.OPEN = 1;                                                                                                   // 1043\n    SockJS.CLOSING = 2;                                                                                                // 1044\n    SockJS.CLOSED = 3;                                                                                                 // 1045\n                                                                                                                       //\n    SockJS.prototype._debug = function () {                                                                            // 1047\n        if (this._options.debug) utils.log.apply(utils, arguments);                                                    // 1048\n    };                                                                                                                 // 1050\n                                                                                                                       //\n    SockJS.prototype._dispatchOpen = function () {                                                                     // 1052\n        var that = this;                                                                                               // 1053\n                                                                                                                       //\n        if (that.readyState === SockJS.CONNECTING) {                                                                   // 1054\n            if (that._transport_tref) {                                                                                // 1055\n                clearTimeout(that._transport_tref);                                                                    // 1056\n                that._transport_tref = null;                                                                           // 1057\n            }                                                                                                          // 1058\n                                                                                                                       //\n            that.readyState = SockJS.OPEN;                                                                             // 1059\n            that.dispatchEvent(new SimpleEvent(\"open\"));                                                               // 1060\n        } else {                                                                                                       // 1061\n            // The server might have been restarted, and lost track of our                                             // 1062\n            // connection.                                                                                             // 1063\n            that._didClose(1006, \"Server lost session\");                                                               // 1064\n        }                                                                                                              // 1065\n    };                                                                                                                 // 1066\n                                                                                                                       //\n    SockJS.prototype._dispatchMessage = function (data) {                                                              // 1068\n        var that = this;                                                                                               // 1069\n        if (that.readyState !== SockJS.OPEN) return;                                                                   // 1070\n        that.dispatchEvent(new SimpleEvent(\"message\", {                                                                // 1072\n            data: data                                                                                                 // 1072\n        }));                                                                                                           // 1072\n    };                                                                                                                 // 1073\n                                                                                                                       //\n    SockJS.prototype._dispatchHeartbeat = function (data) {                                                            // 1075\n        var that = this;                                                                                               // 1076\n        if (that.readyState !== SockJS.OPEN) return;                                                                   // 1077\n        that.dispatchEvent(new SimpleEvent('heartbeat', {}));                                                          // 1079\n    };                                                                                                                 // 1080\n                                                                                                                       //\n    SockJS.prototype._didClose = function (code, reason, force) {                                                      // 1082\n        var that = this;                                                                                               // 1083\n        if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN && that.readyState !== SockJS.CLOSING) throw new Error('INVALID_STATE_ERR');\n                                                                                                                       //\n        if (that._ir) {                                                                                                // 1088\n            that._ir.nuke();                                                                                           // 1089\n                                                                                                                       //\n            that._ir = null;                                                                                           // 1090\n        }                                                                                                              // 1091\n                                                                                                                       //\n        if (that._transport) {                                                                                         // 1093\n            that._transport.doCleanup();                                                                               // 1094\n                                                                                                                       //\n            that._transport = null;                                                                                    // 1095\n        }                                                                                                              // 1096\n                                                                                                                       //\n        var close_event = new SimpleEvent(\"close\", {                                                                   // 1098\n            code: code,                                                                                                // 1099\n            reason: reason,                                                                                            // 1100\n            wasClean: utils.userSetCode(code)                                                                          // 1101\n        });                                                                                                            // 1098\n                                                                                                                       //\n        if (!utils.userSetCode(code) && that.readyState === SockJS.CONNECTING && !force) {                             // 1103\n            if (that._try_next_protocol(close_event)) {                                                                // 1105\n                return;                                                                                                // 1106\n            }                                                                                                          // 1107\n                                                                                                                       //\n            close_event = new SimpleEvent(\"close\", {                                                                   // 1108\n                code: 2000,                                                                                            // 1108\n                reason: \"All transports failed\",                                                                       // 1109\n                wasClean: false,                                                                                       // 1110\n                last_event: close_event                                                                                // 1111\n            });                                                                                                        // 1108\n        }                                                                                                              // 1112\n                                                                                                                       //\n        that.readyState = SockJS.CLOSED;                                                                               // 1113\n        utils.delay(function () {                                                                                      // 1115\n            that.dispatchEvent(close_event);                                                                           // 1116\n        });                                                                                                            // 1117\n    };                                                                                                                 // 1118\n                                                                                                                       //\n    SockJS.prototype._didMessage = function (data) {                                                                   // 1120\n        var that = this;                                                                                               // 1121\n        var type = data.slice(0, 1);                                                                                   // 1122\n                                                                                                                       //\n        switch (type) {                                                                                                // 1123\n            case 'o':                                                                                                  // 1124\n                that._dispatchOpen();                                                                                  // 1125\n                                                                                                                       //\n                break;                                                                                                 // 1126\n                                                                                                                       //\n            case 'a':                                                                                                  // 1127\n                var payload = JSON.parse(data.slice(1) || '[]');                                                       // 1128\n                                                                                                                       //\n                for (var i = 0; i < payload.length; i++) {                                                             // 1129\n                    that._dispatchMessage(payload[i]);                                                                 // 1130\n                }                                                                                                      // 1131\n                                                                                                                       //\n                break;                                                                                                 // 1132\n                                                                                                                       //\n            case 'm':                                                                                                  // 1133\n                var payload = JSON.parse(data.slice(1) || 'null');                                                     // 1134\n                                                                                                                       //\n                that._dispatchMessage(payload);                                                                        // 1135\n                                                                                                                       //\n                break;                                                                                                 // 1136\n                                                                                                                       //\n            case 'c':                                                                                                  // 1137\n                var payload = JSON.parse(data.slice(1) || '[]');                                                       // 1138\n                                                                                                                       //\n                that._didClose(payload[0], payload[1]);                                                                // 1139\n                                                                                                                       //\n                break;                                                                                                 // 1140\n                                                                                                                       //\n            case 'h':                                                                                                  // 1141\n                that._dispatchHeartbeat();                                                                             // 1142\n                                                                                                                       //\n                break;                                                                                                 // 1143\n        }                                                                                                              // 1123\n    };                                                                                                                 // 1145\n                                                                                                                       //\n    SockJS.prototype._try_next_protocol = function (close_event) {                                                     // 1147\n        var that = this;                                                                                               // 1148\n                                                                                                                       //\n        if (that.protocol) {                                                                                           // 1149\n            that._debug('Closed transport:', that.protocol, '' + close_event);                                         // 1150\n                                                                                                                       //\n            that.protocol = null;                                                                                      // 1151\n        }                                                                                                              // 1152\n                                                                                                                       //\n        if (that._transport_tref) {                                                                                    // 1153\n            clearTimeout(that._transport_tref);                                                                        // 1154\n            that._transport_tref = null;                                                                               // 1155\n        }                                                                                                              // 1156\n                                                                                                                       //\n        while (1) {                                                                                                    // 1158\n            var protocol = that.protocol = that._protocols.shift();                                                    // 1159\n                                                                                                                       //\n            if (!protocol) {                                                                                           // 1160\n                return false;                                                                                          // 1161\n            } // Some protocols require access to `body`, what if were in                                              // 1162\n            // the `head`?                                                                                             // 1164\n                                                                                                                       //\n                                                                                                                       //\n            if (SockJS[protocol] && SockJS[protocol].need_body === true && (!_document.body || typeof _document.readyState !== 'undefined' && _document.readyState !== 'complete')) {\n                that._protocols.unshift(protocol);                                                                     // 1170\n                                                                                                                       //\n                that.protocol = 'waiting-for-load';                                                                    // 1171\n                utils.attachEvent('load', function () {                                                                // 1172\n                    that._try_next_protocol();                                                                         // 1173\n                });                                                                                                    // 1174\n                return true;                                                                                           // 1175\n            }                                                                                                          // 1176\n                                                                                                                       //\n            if (!SockJS[protocol] || !SockJS[protocol].enabled(that._options)) {                                       // 1178\n                that._debug('Skipping transport:', protocol);                                                          // 1180\n            } else {                                                                                                   // 1181\n                var roundTrips = SockJS[protocol].roundTrips || 1;                                                     // 1182\n                var to = (that._options.rto || 0) * roundTrips || 5000;                                                // 1183\n                that._transport_tref = utils.delay(to, function () {                                                   // 1184\n                    if (that.readyState === SockJS.CONNECTING) {                                                       // 1185\n                        // I can't understand how it is possible to run                                                // 1186\n                        // this timer, when the state is CLOSED, but                                                   // 1187\n                        // apparently in IE everythin is possible.                                                     // 1188\n                        that._didClose(2007, \"Transport timeouted\");                                                   // 1189\n                    }                                                                                                  // 1190\n                });                                                                                                    // 1191\n                var connid = utils.random_string(8);                                                                   // 1193\n                var trans_url = that._base_url + '/' + that._server + '/' + connid;                                    // 1194\n                                                                                                                       //\n                that._debug('Opening transport:', protocol, ' url:' + trans_url, ' RTO:' + that._options.rto);         // 1195\n                                                                                                                       //\n                that._transport = new SockJS[protocol](that, trans_url, that._base_url);                               // 1197\n                return true;                                                                                           // 1199\n            }                                                                                                          // 1200\n        }                                                                                                              // 1201\n    };                                                                                                                 // 1202\n                                                                                                                       //\n    SockJS.prototype.close = function (code, reason) {                                                                 // 1204\n        var that = this;                                                                                               // 1205\n        if (code && !utils.userSetCode(code)) throw new Error(\"INVALID_ACCESS_ERR\");                                   // 1206\n                                                                                                                       //\n        if (that.readyState !== SockJS.CONNECTING && that.readyState !== SockJS.OPEN) {                                // 1208\n            return false;                                                                                              // 1210\n        }                                                                                                              // 1211\n                                                                                                                       //\n        that.readyState = SockJS.CLOSING;                                                                              // 1212\n                                                                                                                       //\n        that._didClose(code || 1000, reason || \"Normal closure\");                                                      // 1213\n                                                                                                                       //\n        return true;                                                                                                   // 1214\n    };                                                                                                                 // 1215\n                                                                                                                       //\n    SockJS.prototype.send = function (data) {                                                                          // 1217\n        var that = this;                                                                                               // 1218\n        if (that.readyState === SockJS.CONNECTING) throw new Error('INVALID_STATE_ERR');                               // 1219\n                                                                                                                       //\n        if (that.readyState === SockJS.OPEN) {                                                                         // 1221\n            that._transport.doSend(utils.quote('' + data));                                                            // 1222\n        }                                                                                                              // 1223\n                                                                                                                       //\n        return true;                                                                                                   // 1224\n    };                                                                                                                 // 1225\n                                                                                                                       //\n    SockJS.prototype._applyInfo = function (info, rtt, protocols_whitelist) {                                          // 1227\n        var that = this;                                                                                               // 1228\n        that._options.info = info;                                                                                     // 1229\n        that._options.rtt = rtt;                                                                                       // 1230\n        that._options.rto = utils.countRTO(rtt);                                                                       // 1231\n        that._options.info.null_origin = !_document.domain; // Servers can override base_url, eg to provide a randomized domain name and\n        // avoid browser per-domain connection limits.                                                                 // 1234\n                                                                                                                       //\n        if (info.base_url) // <METEOR>                                                                                 // 1235\n            that._base_url = utils.amendUrl(info.base_url, that._base_url); // </METEOR>                               // 1237\n                                                                                                                       //\n        var probed = utils.probeProtocols();                                                                           // 1239\n        that._protocols = utils.detectProtocols(probed, protocols_whitelist, info); // <METEOR>                        // 1240\n        // https://github.com/sockjs/sockjs-client/issues/79                                                           // 1242\n        // Hack to avoid XDR when using different protocols                                                            // 1243\n        // We're on IE trying to do cross-protocol. jsonp only.                                                        // 1244\n                                                                                                                       //\n        if (!utils.isSameOriginScheme(that._base_url) && 2 === utils.isXHRCorsCapable()) {                             // 1245\n            that._protocols = ['jsonp-polling'];                                                                       // 1247\n        } // </METEOR>                                                                                                 // 1248\n                                                                                                                       //\n    }; //         [*] End of lib/sockjs.js                                                                             // 1250\n    //         [*] Including lib/trans-websocket.js                                                                    // 1254\n    /*                                                                                                                 // 1255\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var WebSocketTransport = SockJS.websocket = function (ri, trans_url) {                                             // 1263\n        var that = this;                                                                                               // 1264\n        var url = trans_url + '/websocket';                                                                            // 1265\n                                                                                                                       //\n        if (url.slice(0, 5) === 'https') {                                                                             // 1266\n            url = 'wss' + url.slice(5);                                                                                // 1267\n        } else {                                                                                                       // 1268\n            url = 'ws' + url.slice(4);                                                                                 // 1269\n        }                                                                                                              // 1270\n                                                                                                                       //\n        that.ri = ri;                                                                                                  // 1271\n        that.url = url;                                                                                                // 1272\n        var Constructor = _window.WebSocket || _window.MozWebSocket;                                                   // 1273\n        that.ws = new Constructor(that.url);                                                                           // 1275\n                                                                                                                       //\n        that.ws.onmessage = function (e) {                                                                             // 1276\n            that.ri._didMessage(e.data);                                                                               // 1277\n        }; // Firefox has an interesting bug. If a websocket connection is                                             // 1278\n        // created after onunload, it stays alive even when user                                                       // 1280\n        // navigates away from the page. In such situation let's lie -                                                 // 1281\n        // let's not open the ws connection at all. See:                                                               // 1282\n        // https://github.com/sockjs/sockjs-client/issues/28                                                           // 1283\n        // https://bugzilla.mozilla.org/show_bug.cgi?id=696085                                                         // 1284\n                                                                                                                       //\n                                                                                                                       //\n        that.unload_ref = utils.unload_add(function () {                                                               // 1285\n            that.ws.close();                                                                                           // 1285\n        });                                                                                                            // 1285\n                                                                                                                       //\n        that.ws.onclose = function () {                                                                                // 1286\n            that.ri._didMessage(utils.closeFrame(1006, \"WebSocket connection broken\"));                                // 1287\n        };                                                                                                             // 1288\n    };                                                                                                                 // 1289\n                                                                                                                       //\n    WebSocketTransport.prototype.doSend = function (data) {                                                            // 1291\n        this.ws.send('[' + data + ']');                                                                                // 1292\n    };                                                                                                                 // 1293\n                                                                                                                       //\n    WebSocketTransport.prototype.doCleanup = function () {                                                             // 1295\n        var that = this;                                                                                               // 1296\n        var ws = that.ws;                                                                                              // 1297\n                                                                                                                       //\n        if (ws) {                                                                                                      // 1298\n            ws.onmessage = ws.onclose = null;                                                                          // 1299\n            ws.close();                                                                                                // 1300\n            utils.unload_del(that.unload_ref);                                                                         // 1301\n            that.unload_ref = that.ri = that.ws = null;                                                                // 1302\n        }                                                                                                              // 1303\n    };                                                                                                                 // 1304\n                                                                                                                       //\n    WebSocketTransport.enabled = function () {                                                                         // 1306\n        return !!(_window.WebSocket || _window.MozWebSocket);                                                          // 1307\n    }; // In theory, ws should require 1 round trip. But in chrome, this is                                            // 1308\n    // not very stable over SSL. Most likely a ws connection requires a                                                // 1311\n    // separate SSL connection, in which case 2 round trips are an                                                     // 1312\n    // absolute minumum.                                                                                               // 1313\n                                                                                                                       //\n                                                                                                                       //\n    WebSocketTransport.roundTrips = 2; //         [*] End of lib/trans-websocket.js                                    // 1314\n    //         [*] Including lib/trans-sender.js                                                                       // 1318\n    /*                                                                                                                 // 1319\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var BufferedSender = function () {};                                                                               // 1327\n                                                                                                                       //\n    BufferedSender.prototype.send_constructor = function (sender) {                                                    // 1328\n        var that = this;                                                                                               // 1329\n        that.send_buffer = [];                                                                                         // 1330\n        that.sender = sender;                                                                                          // 1331\n    };                                                                                                                 // 1332\n                                                                                                                       //\n    BufferedSender.prototype.doSend = function (message) {                                                             // 1333\n        var that = this;                                                                                               // 1334\n        that.send_buffer.push(message);                                                                                // 1335\n                                                                                                                       //\n        if (!that.send_stop) {                                                                                         // 1336\n            that.send_schedule();                                                                                      // 1337\n        }                                                                                                              // 1338\n    }; // For polling transports in a situation when in the message callback,                                          // 1339\n    // new message is being send. If the sending connection was started                                                // 1342\n    // before receiving one, it is possible to saturate the network and                                                // 1343\n    // timeout due to the lack of receiving socket. To avoid that we delay                                             // 1344\n    // sending messages by some small time, in order to let receiving                                                  // 1345\n    // connection be started beforehand. This is only a halfmeasure and                                                // 1346\n    // does not fix the big problem, but it does make the tests go more                                                // 1347\n    // stable on slow networks.                                                                                        // 1348\n                                                                                                                       //\n                                                                                                                       //\n    BufferedSender.prototype.send_schedule_wait = function () {                                                        // 1349\n        var that = this;                                                                                               // 1350\n        var tref;                                                                                                      // 1351\n                                                                                                                       //\n        that.send_stop = function () {                                                                                 // 1352\n            that.send_stop = null;                                                                                     // 1353\n            clearTimeout(tref);                                                                                        // 1354\n        };                                                                                                             // 1355\n                                                                                                                       //\n        tref = utils.delay(25, function () {                                                                           // 1356\n            that.send_stop = null;                                                                                     // 1357\n            that.send_schedule();                                                                                      // 1358\n        });                                                                                                            // 1359\n    };                                                                                                                 // 1360\n                                                                                                                       //\n    BufferedSender.prototype.send_schedule = function () {                                                             // 1362\n        var that = this;                                                                                               // 1363\n                                                                                                                       //\n        if (that.send_buffer.length > 0) {                                                                             // 1364\n            var payload = '[' + that.send_buffer.join(',') + ']';                                                      // 1365\n            that.send_stop = that.sender(that.trans_url, payload, function (success, abort_reason) {                   // 1366\n                that.send_stop = null;                                                                                 // 1367\n                                                                                                                       //\n                if (success === false) {                                                                               // 1368\n                    that.ri._didClose(1006, 'Sending error ' + abort_reason);                                          // 1369\n                } else {                                                                                               // 1370\n                    that.send_schedule_wait();                                                                         // 1371\n                }                                                                                                      // 1372\n            });                                                                                                        // 1373\n            that.send_buffer = [];                                                                                     // 1374\n        }                                                                                                              // 1375\n    };                                                                                                                 // 1376\n                                                                                                                       //\n    BufferedSender.prototype.send_destructor = function () {                                                           // 1378\n        var that = this;                                                                                               // 1379\n                                                                                                                       //\n        if (that._send_stop) {                                                                                         // 1380\n            that._send_stop();                                                                                         // 1381\n        }                                                                                                              // 1382\n                                                                                                                       //\n        that._send_stop = null;                                                                                        // 1383\n    };                                                                                                                 // 1384\n                                                                                                                       //\n    var jsonPGenericSender = function (url, payload, callback) {                                                       // 1386\n        var that = this;                                                                                               // 1387\n                                                                                                                       //\n        if (!('_send_form' in that)) {                                                                                 // 1389\n            var form = that._send_form = _document.createElement('form');                                              // 1390\n                                                                                                                       //\n            var area = that._send_area = _document.createElement('textarea');                                          // 1391\n                                                                                                                       //\n            area.name = 'd';                                                                                           // 1392\n            form.style.display = 'none';                                                                               // 1393\n            form.style.position = 'absolute';                                                                          // 1394\n            form.method = 'POST';                                                                                      // 1395\n            form.enctype = 'application/x-www-form-urlencoded';                                                        // 1396\n            form.acceptCharset = \"UTF-8\";                                                                              // 1397\n            form.appendChild(area);                                                                                    // 1398\n                                                                                                                       //\n            _document.body.appendChild(form);                                                                          // 1399\n        }                                                                                                              // 1400\n                                                                                                                       //\n        var form = that._send_form;                                                                                    // 1401\n        var area = that._send_area;                                                                                    // 1402\n        var id = 'a' + utils.random_string(8);                                                                         // 1403\n        form.target = id;                                                                                              // 1404\n        form.action = url + '/jsonp_send?i=' + id;                                                                     // 1405\n        var iframe;                                                                                                    // 1407\n                                                                                                                       //\n        try {                                                                                                          // 1408\n            // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)                                     // 1409\n            iframe = _document.createElement('<iframe name=\"' + id + '\">');                                            // 1410\n        } catch (x) {                                                                                                  // 1411\n            iframe = _document.createElement('iframe');                                                                // 1412\n            iframe.name = id;                                                                                          // 1413\n        }                                                                                                              // 1414\n                                                                                                                       //\n        iframe.id = id;                                                                                                // 1415\n        form.appendChild(iframe);                                                                                      // 1416\n        iframe.style.display = 'none';                                                                                 // 1417\n                                                                                                                       //\n        try {                                                                                                          // 1419\n            area.value = payload;                                                                                      // 1420\n        } catch (e) {                                                                                                  // 1421\n            utils.log('Your browser is seriously broken. Go home! ' + e.message);                                      // 1422\n        }                                                                                                              // 1423\n                                                                                                                       //\n        form.submit();                                                                                                 // 1424\n                                                                                                                       //\n        var completed = function (e) {                                                                                 // 1426\n            if (!iframe.onerror) return;                                                                               // 1427\n            iframe.onreadystatechange = iframe.onerror = iframe.onload = null; // Opera mini doesn't like if we GC iframe\n            // immediately, thus this timeout.                                                                         // 1430\n                                                                                                                       //\n            utils.delay(500, function () {                                                                             // 1431\n                iframe.parentNode.removeChild(iframe);                                                                 // 1432\n                iframe = null;                                                                                         // 1433\n            });                                                                                                        // 1434\n            area.value = ''; // It is not possible to detect if the iframe succeeded or                                // 1435\n            // failed to submit our form.                                                                              // 1437\n                                                                                                                       //\n            callback(true);                                                                                            // 1438\n        };                                                                                                             // 1439\n                                                                                                                       //\n        iframe.onerror = iframe.onload = completed;                                                                    // 1440\n                                                                                                                       //\n        iframe.onreadystatechange = function (e) {                                                                     // 1441\n            if (iframe.readyState == 'complete') completed();                                                          // 1442\n        };                                                                                                             // 1443\n                                                                                                                       //\n        return completed;                                                                                              // 1444\n    };                                                                                                                 // 1445\n                                                                                                                       //\n    var createAjaxSender = function (AjaxObject) {                                                                     // 1447\n        return function (url, payload, callback) {                                                                     // 1448\n            var xo = new AjaxObject('POST', url + '/xhr_send', payload);                                               // 1449\n                                                                                                                       //\n            xo.onfinish = function (status, text) {                                                                    // 1450\n                callback(status === 200 || status === 204, 'http status ' + status);                                   // 1451\n            };                                                                                                         // 1453\n                                                                                                                       //\n            return function (abort_reason) {                                                                           // 1454\n                callback(false, abort_reason);                                                                         // 1455\n            };                                                                                                         // 1456\n        };                                                                                                             // 1457\n    }; //         [*] End of lib/trans-sender.js                                                                       // 1458\n    //         [*] Including lib/trans-jsonp-receiver.js                                                               // 1462\n    /*                                                                                                                 // 1463\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */ // Parts derived from Socket.io:                                                                               //\n    //    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js                // 1472\n    // and jQuery-JSONP:                                                                                               // 1473\n    //    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js                              // 1474\n                                                                                                                       //\n                                                                                                                       //\n    var jsonPGenericReceiver = function (url, callback) {                                                              // 1475\n        var tref;                                                                                                      // 1476\n                                                                                                                       //\n        var script = _document.createElement('script');                                                                // 1477\n                                                                                                                       //\n        var script2; // Opera synchronous load trick.                                                                  // 1478\n                                                                                                                       //\n        var close_script = function (frame) {                                                                          // 1479\n            if (script2) {                                                                                             // 1480\n                script2.parentNode.removeChild(script2);                                                               // 1481\n                script2 = null;                                                                                        // 1482\n            }                                                                                                          // 1483\n                                                                                                                       //\n            if (script) {                                                                                              // 1484\n                clearTimeout(tref); // Unfortunately, you can't really abort script loading of                         // 1485\n                // the script.                                                                                         // 1487\n                                                                                                                       //\n                script.parentNode.removeChild(script);                                                                 // 1488\n                script.onreadystatechange = script.onerror = script.onload = script.onclick = null;                    // 1489\n                script = null;                                                                                         // 1491\n                callback(frame);                                                                                       // 1492\n                callback = null;                                                                                       // 1493\n            }                                                                                                          // 1494\n        }; // IE9 fires 'error' event after orsc or before, in random order.                                           // 1495\n                                                                                                                       //\n                                                                                                                       //\n        var loaded_okay = false;                                                                                       // 1498\n        var error_timer = null;                                                                                        // 1499\n        script.id = 'a' + utils.random_string(8);                                                                      // 1501\n        script.src = url;                                                                                              // 1502\n        script.type = 'text/javascript';                                                                               // 1503\n        script.charset = 'UTF-8';                                                                                      // 1504\n                                                                                                                       //\n        script.onerror = function (e) {                                                                                // 1505\n            if (!error_timer) {                                                                                        // 1506\n                // Delay firing close_script.                                                                          // 1507\n                error_timer = setTimeout(function () {                                                                 // 1508\n                    if (!loaded_okay) {                                                                                // 1509\n                        close_script(utils.closeFrame(1006, \"JSONP script loaded abnormally (onerror)\"));              // 1510\n                    }                                                                                                  // 1513\n                }, 1000);                                                                                              // 1514\n            }                                                                                                          // 1515\n        };                                                                                                             // 1516\n                                                                                                                       //\n        script.onload = function (e) {                                                                                 // 1517\n            close_script(utils.closeFrame(1006, \"JSONP script loaded abnormally (onload)\"));                           // 1518\n        };                                                                                                             // 1519\n                                                                                                                       //\n        script.onreadystatechange = function (e) {                                                                     // 1521\n            if (/loaded|closed/.test(script.readyState)) {                                                             // 1522\n                if (script && script.htmlFor && script.onclick) {                                                      // 1523\n                    loaded_okay = true;                                                                                // 1524\n                                                                                                                       //\n                    try {                                                                                              // 1525\n                        // In IE, actually execute the script.                                                         // 1526\n                        script.onclick();                                                                              // 1527\n                    } catch (x) {}                                                                                     // 1528\n                }                                                                                                      // 1529\n                                                                                                                       //\n                if (script) {                                                                                          // 1530\n                    close_script(utils.closeFrame(1006, \"JSONP script loaded abnormally (onreadystatechange)\"));       // 1531\n                }                                                                                                      // 1532\n            }                                                                                                          // 1533\n        }; // IE: event/htmlFor/onclick trick.                                                                         // 1534\n        // One can't rely on proper order for onreadystatechange. In order to                                          // 1536\n        // make sure, set a 'htmlFor' and 'event' properties, so that                                                  // 1537\n        // script code will be installed as 'onclick' handler for the                                                  // 1538\n        // script object. Later, onreadystatechange, manually execute this                                             // 1539\n        // code. FF and Chrome doesn't work with 'event' and 'htmlFor'                                                 // 1540\n        // set. For reference see:                                                                                     // 1541\n        //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html                                     // 1542\n        // Also, read on that about script ordering:                                                                   // 1543\n        //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order                                                // 1544\n                                                                                                                       //\n                                                                                                                       //\n        if (typeof script.async === 'undefined' && _document.attachEvent) {                                            // 1545\n            // According to mozilla docs, in recent browsers script.async defaults                                     // 1546\n            // to 'true', so we may use it to detect a good browser:                                                   // 1547\n            // https://developer.mozilla.org/en/HTML/Element/script                                                    // 1548\n            if (!/opera/i.test(navigator.userAgent)) {                                                                 // 1549\n                // Naively assume we're in IE                                                                          // 1550\n                try {                                                                                                  // 1551\n                    script.htmlFor = script.id;                                                                        // 1552\n                    script.event = \"onclick\";                                                                          // 1553\n                } catch (x) {}                                                                                         // 1554\n                                                                                                                       //\n                script.async = true;                                                                                   // 1555\n            } else {                                                                                                   // 1556\n                // Opera, second sync script hack                                                                      // 1557\n                script2 = _document.createElement('script');                                                           // 1558\n                script2.text = \"try{var a = document.getElementById('\" + script.id + \"'); if(a)a.onerror();}catch(x){};\";\n                script.async = script2.async = false;                                                                  // 1560\n            }                                                                                                          // 1561\n        }                                                                                                              // 1562\n                                                                                                                       //\n        if (typeof script.async !== 'undefined') {                                                                     // 1563\n            script.async = true;                                                                                       // 1564\n        } // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.                                 // 1565\n                                                                                                                       //\n                                                                                                                       //\n        tref = setTimeout(function () {                                                                                // 1568\n            close_script(utils.closeFrame(1006, \"JSONP script loaded abnormally (timeout)\"));                          // 1569\n        }, 35000);                                                                                                     // 1570\n                                                                                                                       //\n        var head = _document.getElementsByTagName('head')[0];                                                          // 1572\n                                                                                                                       //\n        head.insertBefore(script, head.firstChild);                                                                    // 1573\n                                                                                                                       //\n        if (script2) {                                                                                                 // 1574\n            head.insertBefore(script2, head.firstChild);                                                               // 1575\n        }                                                                                                              // 1576\n                                                                                                                       //\n        return close_script;                                                                                           // 1577\n    }; //         [*] End of lib/trans-jsonp-receiver.js                                                               // 1578\n    //         [*] Including lib/trans-jsonp-polling.js                                                                // 1582\n    /*                                                                                                                 // 1583\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */ // The simplest and most robust transport, using the well-know cross                                           //\n    // domain hack - JSONP. This transport is quite inefficient - one                                                  // 1592\n    // mssage could use up to one http request. But at least it works almost                                           // 1593\n    // everywhere.                                                                                                     // 1594\n    // Known limitations:                                                                                              // 1595\n    //   o you will get a spinning cursor                                                                              // 1596\n    //   o for Konqueror a dumb timer is needed to detect errors                                                       // 1597\n                                                                                                                       //\n                                                                                                                       //\n    var JsonPTransport = SockJS['jsonp-polling'] = function (ri, trans_url) {                                          // 1600\n        utils.polluteGlobalNamespace();                                                                                // 1601\n        var that = this;                                                                                               // 1602\n        that.ri = ri;                                                                                                  // 1603\n        that.trans_url = trans_url;                                                                                    // 1604\n        that.send_constructor(jsonPGenericSender);                                                                     // 1605\n                                                                                                                       //\n        that._schedule_recv();                                                                                         // 1606\n    }; // Inheritnace                                                                                                  // 1607\n                                                                                                                       //\n                                                                                                                       //\n    JsonPTransport.prototype = new BufferedSender();                                                                   // 1610\n                                                                                                                       //\n    JsonPTransport.prototype._schedule_recv = function () {                                                            // 1612\n        var that = this;                                                                                               // 1613\n                                                                                                                       //\n        var callback = function (data) {                                                                               // 1614\n            that._recv_stop = null;                                                                                    // 1615\n                                                                                                                       //\n            if (data) {                                                                                                // 1616\n                // no data - heartbeat;                                                                                // 1617\n                if (!that._is_closing) {                                                                               // 1618\n                    that.ri._didMessage(data);                                                                         // 1619\n                }                                                                                                      // 1620\n            } // The message can be a close message, and change is_closing state.                                      // 1621\n                                                                                                                       //\n                                                                                                                       //\n            if (!that._is_closing) {                                                                                   // 1623\n                that._schedule_recv();                                                                                 // 1624\n            }                                                                                                          // 1625\n        };                                                                                                             // 1626\n                                                                                                                       //\n        that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp', jsonPGenericReceiver, callback);             // 1627\n    };                                                                                                                 // 1629\n                                                                                                                       //\n    JsonPTransport.enabled = function () {                                                                             // 1631\n        return true;                                                                                                   // 1632\n    };                                                                                                                 // 1633\n                                                                                                                       //\n    JsonPTransport.need_body = true;                                                                                   // 1635\n                                                                                                                       //\n    JsonPTransport.prototype.doCleanup = function () {                                                                 // 1638\n        var that = this;                                                                                               // 1639\n        that._is_closing = true;                                                                                       // 1640\n                                                                                                                       //\n        if (that._recv_stop) {                                                                                         // 1641\n            that._recv_stop();                                                                                         // 1642\n        }                                                                                                              // 1643\n                                                                                                                       //\n        that.ri = that._recv_stop = null;                                                                              // 1644\n        that.send_destructor();                                                                                        // 1645\n    }; // Abstract away code that handles global namespace pollution.                                                  // 1646\n                                                                                                                       //\n                                                                                                                       //\n    var jsonPReceiverWrapper = function (url, constructReceiver, user_callback) {                                      // 1650\n        var id = 'a' + utils.random_string(6);                                                                         // 1651\n        var url_id = url + '?c=' + escape(WPrefix + '.' + id); // Unfortunately it is not possible to abort loading of the\n        // script. We need to keep track of frake close frames.                                                        // 1655\n                                                                                                                       //\n        var aborting = 0; // Callback will be called exactly once.                                                     // 1656\n                                                                                                                       //\n        var callback = function (frame) {                                                                              // 1659\n            switch (aborting) {                                                                                        // 1660\n                case 0:                                                                                                // 1661\n                    // Normal behaviour - delete hook _and_ emit message.                                              // 1662\n                    delete _window[WPrefix][id];                                                                       // 1663\n                    user_callback(frame);                                                                              // 1664\n                    break;                                                                                             // 1665\n                                                                                                                       //\n                case 1:                                                                                                // 1666\n                    // Fake close frame - emit but don't delete hook.                                                  // 1667\n                    user_callback(frame);                                                                              // 1668\n                    aborting = 2;                                                                                      // 1669\n                    break;                                                                                             // 1670\n                                                                                                                       //\n                case 2:                                                                                                // 1671\n                    // Got frame after connection was closed, delete hook, don't emit.                                 // 1672\n                    delete _window[WPrefix][id];                                                                       // 1673\n                    break;                                                                                             // 1674\n            }                                                                                                          // 1660\n        };                                                                                                             // 1676\n                                                                                                                       //\n        var close_script = constructReceiver(url_id, callback);                                                        // 1678\n        _window[WPrefix][id] = close_script;                                                                           // 1679\n                                                                                                                       //\n        var stop = function () {                                                                                       // 1680\n            if (_window[WPrefix][id]) {                                                                                // 1681\n                aborting = 1;                                                                                          // 1682\n                                                                                                                       //\n                _window[WPrefix][id](utils.closeFrame(1000, \"JSONP user aborted read\"));                               // 1683\n            }                                                                                                          // 1684\n        };                                                                                                             // 1685\n                                                                                                                       //\n        return stop;                                                                                                   // 1686\n    }; //         [*] End of lib/trans-jsonp-polling.js                                                                // 1687\n    //         [*] Including lib/trans-xhr.js                                                                          // 1691\n    /*                                                                                                                 // 1692\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var AjaxBasedTransport = function () {};                                                                           // 1700\n                                                                                                                       //\n    AjaxBasedTransport.prototype = new BufferedSender();                                                               // 1701\n                                                                                                                       //\n    AjaxBasedTransport.prototype.run = function (ri, trans_url, url_suffix, Receiver, AjaxObject) {                    // 1703\n        var that = this;                                                                                               // 1705\n        that.ri = ri;                                                                                                  // 1706\n        that.trans_url = trans_url;                                                                                    // 1707\n        that.send_constructor(createAjaxSender(AjaxObject));                                                           // 1708\n        that.poll = new Polling(ri, Receiver, trans_url + url_suffix, AjaxObject);                                     // 1709\n    };                                                                                                                 // 1711\n                                                                                                                       //\n    AjaxBasedTransport.prototype.doCleanup = function () {                                                             // 1713\n        var that = this;                                                                                               // 1714\n                                                                                                                       //\n        if (that.poll) {                                                                                               // 1715\n            that.poll.abort();                                                                                         // 1716\n            that.poll = null;                                                                                          // 1717\n        }                                                                                                              // 1718\n    }; // xhr-streaming                                                                                                // 1719\n                                                                                                                       //\n                                                                                                                       //\n    var XhrStreamingTransport = SockJS['xhr-streaming'] = function (ri, trans_url) {                                   // 1722\n        this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject);                                   // 1723\n    };                                                                                                                 // 1724\n                                                                                                                       //\n    XhrStreamingTransport.prototype = new AjaxBasedTransport();                                                        // 1726\n                                                                                                                       //\n    XhrStreamingTransport.enabled = function () {                                                                      // 1728\n        // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but                                                   // 1729\n        // doesn't do streaming.                                                                                       // 1730\n        return _window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest() && !/opera/i.test(navigator.userAgent);\n    };                                                                                                                 // 1734\n                                                                                                                       //\n    XhrStreamingTransport.roundTrips = 2; // preflight, ajax                                                           // 1735\n    // Safari gets confused when a streaming ajax request is started                                                   // 1737\n    // before onload. This causes the load indicator to spin indefinetely.                                             // 1738\n                                                                                                                       //\n    XhrStreamingTransport.need_body = true; // According to:                                                           // 1739\n    //   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests            // 1743\n    //   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/                                         // 1744\n    // xdr-streaming                                                                                                   // 1747\n                                                                                                                       //\n    var XdrStreamingTransport = SockJS['xdr-streaming'] = function (ri, trans_url) {                                   // 1748\n        this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject);                                       // 1749\n    };                                                                                                                 // 1750\n                                                                                                                       //\n    XdrStreamingTransport.prototype = new AjaxBasedTransport();                                                        // 1752\n                                                                                                                       //\n    XdrStreamingTransport.enabled = function () {                                                                      // 1754\n        return !!_window.XDomainRequest;                                                                               // 1755\n    };                                                                                                                 // 1756\n                                                                                                                       //\n    XdrStreamingTransport.roundTrips = 2; // preflight, ajax                                                           // 1757\n    // xhr-polling                                                                                                     // 1761\n                                                                                                                       //\n    var XhrPollingTransport = SockJS['xhr-polling'] = function (ri, trans_url) {                                       // 1762\n        this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject);                                             // 1763\n    };                                                                                                                 // 1764\n                                                                                                                       //\n    XhrPollingTransport.prototype = new AjaxBasedTransport();                                                          // 1766\n    XhrPollingTransport.enabled = XhrStreamingTransport.enabled;                                                       // 1768\n    XhrPollingTransport.roundTrips = 2; // preflight, ajax                                                             // 1769\n    // xdr-polling                                                                                                     // 1772\n                                                                                                                       //\n    var XdrPollingTransport = SockJS['xdr-polling'] = function (ri, trans_url) {                                       // 1773\n        this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject);                                                 // 1774\n    };                                                                                                                 // 1775\n                                                                                                                       //\n    XdrPollingTransport.prototype = new AjaxBasedTransport();                                                          // 1777\n    XdrPollingTransport.enabled = XdrStreamingTransport.enabled;                                                       // 1779\n    XdrPollingTransport.roundTrips = 2; // preflight, ajax                                                             // 1780\n    //         [*] End of lib/trans-xhr.js                                                                             // 1781\n    //         [*] Including lib/trans-iframe.js                                                                       // 1784\n    /*                                                                                                                 // 1785\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */ // Few cool transports do work only for same-origin. In order to make                                          //\n    // them working cross-domain we shall use iframe, served form the                                                  // 1794\n    // remote domain. New browsers, have capabilities to communicate with                                              // 1795\n    // cross domain iframe, using postMessage(). In IE it was implemented                                              // 1796\n    // from IE 8+, but of course, IE got some details wrong:                                                           // 1797\n    //    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx                                               // 1798\n    //    http://stevesouders.com/misc/test-postmessage.php                                                            // 1799\n                                                                                                                       //\n    var IframeTransport = function () {};                                                                              // 1801\n                                                                                                                       //\n    IframeTransport.prototype.i_constructor = function (ri, trans_url, base_url) {                                     // 1803\n        var that = this;                                                                                               // 1804\n        that.ri = ri;                                                                                                  // 1805\n        that.origin = utils.getOrigin(base_url);                                                                       // 1806\n        that.base_url = base_url;                                                                                      // 1807\n        that.trans_url = trans_url;                                                                                    // 1808\n        var iframe_url = base_url + '/iframe.html';                                                                    // 1810\n                                                                                                                       //\n        if (that.ri._options.devel) {                                                                                  // 1811\n            iframe_url += '?t=' + +new Date();                                                                         // 1812\n        }                                                                                                              // 1813\n                                                                                                                       //\n        that.window_id = utils.random_string(8);                                                                       // 1814\n        iframe_url += '#' + that.window_id;                                                                            // 1815\n        that.iframeObj = utils.createIframe(iframe_url, function (r) {                                                 // 1817\n            that.ri._didClose(1006, \"Unable to load an iframe (\" + r + \")\");                                           // 1818\n        });                                                                                                            // 1819\n        that.onmessage_cb = utils.bind(that.onmessage, that);                                                          // 1821\n        utils.attachMessage(that.onmessage_cb);                                                                        // 1822\n    };                                                                                                                 // 1823\n                                                                                                                       //\n    IframeTransport.prototype.doCleanup = function () {                                                                // 1825\n        var that = this;                                                                                               // 1826\n                                                                                                                       //\n        if (that.iframeObj) {                                                                                          // 1827\n            utils.detachMessage(that.onmessage_cb);                                                                    // 1828\n                                                                                                                       //\n            try {                                                                                                      // 1829\n                // When the iframe is not loaded, IE raises an exception                                               // 1830\n                // on 'contentWindow'.                                                                                 // 1831\n                if (that.iframeObj.iframe.contentWindow) {                                                             // 1832\n                    that.postMessage('c');                                                                             // 1833\n                }                                                                                                      // 1834\n            } catch (x) {}                                                                                             // 1835\n                                                                                                                       //\n            that.iframeObj.cleanup();                                                                                  // 1836\n            that.iframeObj = null;                                                                                     // 1837\n            that.onmessage_cb = that.iframeObj = null;                                                                 // 1838\n        }                                                                                                              // 1839\n    };                                                                                                                 // 1840\n                                                                                                                       //\n    IframeTransport.prototype.onmessage = function (e) {                                                               // 1842\n        var that = this;                                                                                               // 1843\n        if (e.origin !== that.origin) return;                                                                          // 1844\n        var window_id = e.data.slice(0, 8);                                                                            // 1845\n        var type = e.data.slice(8, 9);                                                                                 // 1846\n        var data = e.data.slice(9);                                                                                    // 1847\n        if (window_id !== that.window_id) return;                                                                      // 1849\n                                                                                                                       //\n        switch (type) {                                                                                                // 1851\n            case 's':                                                                                                  // 1852\n                that.iframeObj.loaded();                                                                               // 1853\n                that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));\n                break;                                                                                                 // 1855\n                                                                                                                       //\n            case 't':                                                                                                  // 1856\n                that.ri._didMessage(data);                                                                             // 1857\n                                                                                                                       //\n                break;                                                                                                 // 1858\n        }                                                                                                              // 1851\n    };                                                                                                                 // 1860\n                                                                                                                       //\n    IframeTransport.prototype.postMessage = function (type, data) {                                                    // 1862\n        var that = this;                                                                                               // 1863\n        that.iframeObj.post(that.window_id + type + (data || ''), that.origin);                                        // 1864\n    };                                                                                                                 // 1865\n                                                                                                                       //\n    IframeTransport.prototype.doSend = function (message) {                                                            // 1867\n        this.postMessage('m', message);                                                                                // 1868\n    };                                                                                                                 // 1869\n                                                                                                                       //\n    IframeTransport.enabled = function () {                                                                            // 1871\n        // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with                                 // 1872\n        // huge delay, or not at all.                                                                                  // 1873\n        var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1;           // 1874\n        return (typeof _window.postMessage === 'function' || (0, _typeof3.default)(_window.postMessage) === 'object') && !konqueror;\n    }; //         [*] End of lib/trans-iframe.js                                                                       // 1877\n    //         [*] Including lib/trans-iframe-within.js                                                                // 1881\n    /*                                                                                                                 // 1882\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var curr_window_id;                                                                                                // 1890\n                                                                                                                       //\n    var postMessage = function (type, data) {                                                                          // 1892\n        if (parent !== _window) {                                                                                      // 1893\n            parent.postMessage(curr_window_id + type + (data || ''), '*');                                             // 1894\n        } else {                                                                                                       // 1895\n            utils.log(\"Can't postMessage, no parent window.\", type, data);                                             // 1896\n        }                                                                                                              // 1897\n    };                                                                                                                 // 1898\n                                                                                                                       //\n    var FacadeJS = function () {};                                                                                     // 1900\n                                                                                                                       //\n    FacadeJS.prototype._didClose = function (code, reason) {                                                           // 1901\n        postMessage('t', utils.closeFrame(code, reason));                                                              // 1902\n    };                                                                                                                 // 1903\n                                                                                                                       //\n    FacadeJS.prototype._didMessage = function (frame) {                                                                // 1904\n        postMessage('t', frame);                                                                                       // 1905\n    };                                                                                                                 // 1906\n                                                                                                                       //\n    FacadeJS.prototype._doSend = function (data) {                                                                     // 1907\n        this._transport.doSend(data);                                                                                  // 1908\n    };                                                                                                                 // 1909\n                                                                                                                       //\n    FacadeJS.prototype._doCleanup = function () {                                                                      // 1910\n        this._transport.doCleanup();                                                                                   // 1911\n    };                                                                                                                 // 1912\n                                                                                                                       //\n    utils.parent_origin = undefined;                                                                                   // 1914\n                                                                                                                       //\n    SockJS.bootstrap_iframe = function () {                                                                            // 1916\n        var facade;                                                                                                    // 1917\n        curr_window_id = _document.location.hash.slice(1);                                                             // 1918\n                                                                                                                       //\n        var onMessage = function (e) {                                                                                 // 1919\n            if (e.source !== parent) return;                                                                           // 1920\n            if (typeof utils.parent_origin === 'undefined') utils.parent_origin = e.origin;                            // 1921\n            if (e.origin !== utils.parent_origin) return;                                                              // 1923\n            var window_id = e.data.slice(0, 8);                                                                        // 1925\n            var type = e.data.slice(8, 9);                                                                             // 1926\n            var data = e.data.slice(9);                                                                                // 1927\n            if (window_id !== curr_window_id) return;                                                                  // 1928\n                                                                                                                       //\n            switch (type) {                                                                                            // 1929\n                case 's':                                                                                              // 1930\n                    var p = JSON.parse(data);                                                                          // 1931\n                    var version = p[0];                                                                                // 1932\n                    var protocol = p[1];                                                                               // 1933\n                    var trans_url = p[2];                                                                              // 1934\n                    var base_url = p[3];                                                                               // 1935\n                                                                                                                       //\n                    if (version !== SockJS.version) {                                                                  // 1936\n                        utils.log(\"Incompatibile SockJS! Main site uses:\" + \" \\\"\" + version + \"\\\", the iframe:\" + \" \\\"\" + SockJS.version + \"\\\".\");\n                    }                                                                                                  // 1940\n                                                                                                                       //\n                    if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {                                       // 1941\n                        utils.log(\"Only basic urls are supported in SockJS\");                                          // 1942\n                        return;                                                                                        // 1943\n                    }                                                                                                  // 1944\n                                                                                                                       //\n                    if (!utils.isSameOriginUrl(trans_url) || !utils.isSameOriginUrl(base_url)) {                       // 1946\n                        utils.log(\"Can't connect to different domain from within an \" + \"iframe. (\" + JSON.stringify([_window.location.href, trans_url, base_url]) + \")\");\n                        return;                                                                                        // 1951\n                    }                                                                                                  // 1952\n                                                                                                                       //\n                    facade = new FacadeJS();                                                                           // 1953\n                    facade._transport = new FacadeJS[protocol](facade, trans_url, base_url);                           // 1954\n                    break;                                                                                             // 1955\n                                                                                                                       //\n                case 'm':                                                                                              // 1956\n                    facade._doSend(data);                                                                              // 1957\n                                                                                                                       //\n                    break;                                                                                             // 1958\n                                                                                                                       //\n                case 'c':                                                                                              // 1959\n                    if (facade) facade._doCleanup();                                                                   // 1960\n                    facade = null;                                                                                     // 1962\n                    break;                                                                                             // 1963\n            }                                                                                                          // 1929\n        }; // alert('test ticker');                                                                                    // 1965\n        // facade = new FacadeJS();                                                                                    // 1968\n        // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');    // 1969\n                                                                                                                       //\n                                                                                                                       //\n        utils.attachMessage(onMessage); // Start                                                                       // 1971\n                                                                                                                       //\n        postMessage('s');                                                                                              // 1974\n    }; //         [*] End of lib/trans-iframe-within.js                                                                // 1975\n    //         [*] Including lib/info.js                                                                               // 1979\n    /*                                                                                                                 // 1980\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var InfoReceiver = function (base_url, AjaxObject) {                                                               // 1988\n        var that = this;                                                                                               // 1989\n        utils.delay(function () {                                                                                      // 1990\n            that.doXhr(base_url, AjaxObject);                                                                          // 1990\n        });                                                                                                            // 1990\n    };                                                                                                                 // 1991\n                                                                                                                       //\n    InfoReceiver.prototype = new EventEmitter(['finish']);                                                             // 1993\n                                                                                                                       //\n    InfoReceiver.prototype.doXhr = function (base_url, AjaxObject) {                                                   // 1995\n        var that = this;                                                                                               // 1996\n        var t0 = new Date().getTime(); // <METEOR>                                                                     // 1997\n        // https://github.com/sockjs/sockjs-client/pull/129                                                            // 2000\n        // var xo = new AjaxObject('GET', base_url + '/info');                                                         // 2001\n                                                                                                                       //\n        var xo = new AjaxObject( // add cachebusting parameter to url to work around a chrome bug:                     // 2003\n        // https://code.google.com/p/chromium/issues/detail?id=263981                                                  // 2005\n        // or misbehaving proxies.                                                                                     // 2006\n        'GET', base_url + '/info?cb=' + utils.random_string(10)); // </METEOR>                                         // 2007\n                                                                                                                       //\n        var tref = utils.delay(8000, function () {                                                                     // 2010\n            xo.ontimeout();                                                                                            // 2011\n        });                                                                                                            // 2011\n                                                                                                                       //\n        xo.onfinish = function (status, text) {                                                                        // 2013\n            clearTimeout(tref);                                                                                        // 2014\n            tref = null;                                                                                               // 2015\n                                                                                                                       //\n            if (status === 200) {                                                                                      // 2016\n                var rtt = new Date().getTime() - t0;                                                                   // 2017\n                var info = JSON.parse(text);                                                                           // 2018\n                if ((typeof info === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(info)) !== 'object') info = {};\n                that.emit('finish', info, rtt);                                                                        // 2020\n            } else {                                                                                                   // 2021\n                that.emit('finish');                                                                                   // 2022\n            }                                                                                                          // 2023\n        };                                                                                                             // 2024\n                                                                                                                       //\n        xo.ontimeout = function () {                                                                                   // 2025\n            xo.close();                                                                                                // 2026\n            that.emit('finish');                                                                                       // 2027\n        };                                                                                                             // 2028\n    };                                                                                                                 // 2029\n                                                                                                                       //\n    var InfoReceiverIframe = function (base_url) {                                                                     // 2031\n        var that = this;                                                                                               // 2032\n                                                                                                                       //\n        var go = function () {                                                                                         // 2033\n            var ifr = new IframeTransport();                                                                           // 2034\n            ifr.protocol = 'w-iframe-info-receiver';                                                                   // 2035\n                                                                                                                       //\n            var fun = function (r) {                                                                                   // 2036\n                if (typeof r === 'string' && r.substr(0, 1) === 'm') {                                                 // 2037\n                    var d = JSON.parse(r.substr(1));                                                                   // 2038\n                    var info = d[0],                                                                                   // 2039\n                        rtt = d[1];                                                                                    // 2039\n                    that.emit('finish', info, rtt);                                                                    // 2040\n                } else {                                                                                               // 2041\n                    that.emit('finish');                                                                               // 2042\n                }                                                                                                      // 2043\n                                                                                                                       //\n                ifr.doCleanup();                                                                                       // 2044\n                ifr = null;                                                                                            // 2045\n            };                                                                                                         // 2046\n                                                                                                                       //\n            var mock_ri = {                                                                                            // 2047\n                _options: {},                                                                                          // 2048\n                _didClose: fun,                                                                                        // 2049\n                _didMessage: fun                                                                                       // 2050\n            };                                                                                                         // 2047\n            ifr.i_constructor(mock_ri, base_url, base_url);                                                            // 2052\n        };                                                                                                             // 2053\n                                                                                                                       //\n        if (!_document.body) {                                                                                         // 2054\n            utils.attachEvent('load', go);                                                                             // 2055\n        } else {                                                                                                       // 2056\n            go();                                                                                                      // 2057\n        }                                                                                                              // 2058\n    };                                                                                                                 // 2059\n                                                                                                                       //\n    InfoReceiverIframe.prototype = new EventEmitter(['finish']);                                                       // 2060\n                                                                                                                       //\n    var InfoReceiverFake = function () {                                                                               // 2063\n        // It may not be possible to do cross domain AJAX to get the info                                              // 2064\n        // data, for example for IE7. But we want to run JSONP, so let's                                               // 2065\n        // fake the response, with rtt=2s (rto=6s).                                                                    // 2066\n        var that = this;                                                                                               // 2067\n        utils.delay(function () {                                                                                      // 2068\n            that.emit('finish', {}, 2000);                                                                             // 2069\n        });                                                                                                            // 2070\n    };                                                                                                                 // 2071\n                                                                                                                       //\n    InfoReceiverFake.prototype = new EventEmitter(['finish']);                                                         // 2072\n                                                                                                                       //\n    var createInfoReceiver = function (base_url) {                                                                     // 2074\n        if (utils.isSameOriginUrl(base_url)) {                                                                         // 2075\n            // If, for some reason, we have SockJS locally - there's no                                                // 2076\n            // need to start up the complex machinery. Just use ajax.                                                  // 2077\n            return new InfoReceiver(base_url, utils.XHRLocalObject);                                                   // 2078\n        }                                                                                                              // 2079\n                                                                                                                       //\n        switch (utils.isXHRCorsCapable()) {                                                                            // 2080\n            case 1:                                                                                                    // 2081\n                // XHRLocalObject -> no_credentials=true                                                               // 2082\n                return new InfoReceiver(base_url, utils.XHRLocalObject);                                               // 2083\n                                                                                                                       //\n            case 2:                                                                                                    // 2084\n                // <METEOR>                                                                                            // 2085\n                // https://github.com/sockjs/sockjs-client/issues/79                                                   // 2086\n                // XDR doesn't work across different schemes                                                           // 2087\n                // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n                if (utils.isSameOriginScheme(base_url)) return new InfoReceiver(base_url, utils.XDRObject);else return new InfoReceiverFake();\n            // </METEOR>                                                                                               // 2093\n                                                                                                                       //\n            case 3:                                                                                                    // 2094\n                // Opera                                                                                               // 2095\n                return new InfoReceiverIframe(base_url);                                                               // 2096\n                                                                                                                       //\n            default:                                                                                                   // 2097\n                // IE 7                                                                                                // 2098\n                return new InfoReceiverFake();                                                                         // 2099\n        }                                                                                                              // 2080\n                                                                                                                       //\n        ;                                                                                                              // 2100\n    };                                                                                                                 // 2101\n                                                                                                                       //\n    var WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function (ri, _trans_url, base_url) {               // 2104\n        var ir = new InfoReceiver(base_url, utils.XHRLocalObject);                                                     // 2105\n                                                                                                                       //\n        ir.onfinish = function (info, rtt) {                                                                           // 2106\n            ri._didMessage('m' + JSON.stringify([info, rtt]));                                                         // 2107\n                                                                                                                       //\n            ri._didClose();                                                                                            // 2108\n        };                                                                                                             // 2109\n    };                                                                                                                 // 2110\n                                                                                                                       //\n    WInfoReceiverIframe.prototype.doCleanup = function () {}; //         [*] End of lib/info.js                        // 2111\n    //         [*] Including lib/trans-iframe-eventsource.js                                                           // 2115\n    /*                                                                                                                 // 2116\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {                                      // 2124\n        var that = this;                                                                                               // 2125\n        that.protocol = 'w-iframe-eventsource';                                                                        // 2126\n        that.i_constructor.apply(that, arguments);                                                                     // 2127\n    };                                                                                                                 // 2128\n                                                                                                                       //\n    EventSourceIframeTransport.prototype = new IframeTransport();                                                      // 2130\n                                                                                                                       //\n    EventSourceIframeTransport.enabled = function () {                                                                 // 2132\n        return 'EventSource' in _window && IframeTransport.enabled();                                                  // 2133\n    };                                                                                                                 // 2134\n                                                                                                                       //\n    EventSourceIframeTransport.need_body = true;                                                                       // 2136\n    EventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource                                        // 2137\n    // w-iframe-eventsource                                                                                            // 2140\n                                                                                                                       //\n    var EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function (ri, trans_url) {                           // 2141\n        this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject);                            // 2142\n    };                                                                                                                 // 2143\n                                                                                                                       //\n    EventSourceTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-eventsource.js   // 2144\n    //         [*] Including lib/trans-iframe-xhr-polling.js                                                           // 2148\n    /*                                                                                                                 // 2149\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {                                       // 2157\n        var that = this;                                                                                               // 2158\n        that.protocol = 'w-iframe-xhr-polling';                                                                        // 2159\n        that.i_constructor.apply(that, arguments);                                                                     // 2160\n    };                                                                                                                 // 2161\n                                                                                                                       //\n    XhrPollingIframeTransport.prototype = new IframeTransport();                                                       // 2163\n                                                                                                                       //\n    XhrPollingIframeTransport.enabled = function () {                                                                  // 2165\n        return _window.XMLHttpRequest && IframeTransport.enabled();                                                    // 2166\n    };                                                                                                                 // 2167\n                                                                                                                       //\n    XhrPollingIframeTransport.need_body = true;                                                                        // 2169\n    XhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr                                                 // 2170\n    // w-iframe-xhr-polling                                                                                            // 2173\n                                                                                                                       //\n    var XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function (ri, trans_url) {                           // 2174\n        this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject);                                            // 2175\n    };                                                                                                                 // 2176\n                                                                                                                       //\n    XhrPollingITransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-xhr-polling.js   // 2178\n    //         [*] Including lib/trans-iframe-htmlfile.js                                                              // 2182\n    /*                                                                                                                 // 2183\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */ // This transport generally works in any browser, but will cause a                                             //\n    // spinning cursor to appear in any browser other than IE.                                                         // 2192\n    // We may test this transport in all browsers - why not, but in                                                    // 2193\n    // production it should be only run in IE.                                                                         // 2194\n                                                                                                                       //\n    var HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {                                            // 2196\n        var that = this;                                                                                               // 2197\n        that.protocol = 'w-iframe-htmlfile';                                                                           // 2198\n        that.i_constructor.apply(that, arguments);                                                                     // 2199\n    }; // Inheritance.                                                                                                 // 2200\n                                                                                                                       //\n                                                                                                                       //\n    HtmlFileIframeTransport.prototype = new IframeTransport();                                                         // 2203\n                                                                                                                       //\n    HtmlFileIframeTransport.enabled = function () {                                                                    // 2205\n        return IframeTransport.enabled();                                                                              // 2206\n    };                                                                                                                 // 2207\n                                                                                                                       //\n    HtmlFileIframeTransport.need_body = true;                                                                          // 2209\n    HtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile                                              // 2210\n    // w-iframe-htmlfile                                                                                               // 2213\n                                                                                                                       //\n    var HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function (ri, trans_url) {                                 // 2214\n        this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject);                                  // 2215\n    };                                                                                                                 // 2216\n                                                                                                                       //\n    HtmlFileTransport.prototype = new AjaxBasedTransport(); //         [*] End of lib/trans-iframe-htmlfile.js         // 2217\n    //         [*] Including lib/trans-polling.js                                                                      // 2221\n    /*                                                                                                                 // 2222\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var Polling = function (ri, Receiver, recv_url, AjaxObject) {                                                      // 2230\n        var that = this;                                                                                               // 2231\n        that.ri = ri;                                                                                                  // 2232\n        that.Receiver = Receiver;                                                                                      // 2233\n        that.recv_url = recv_url;                                                                                      // 2234\n        that.AjaxObject = AjaxObject;                                                                                  // 2235\n                                                                                                                       //\n        that._scheduleRecv();                                                                                          // 2236\n    };                                                                                                                 // 2237\n                                                                                                                       //\n    Polling.prototype._scheduleRecv = function () {                                                                    // 2239\n        var that = this;                                                                                               // 2240\n        var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject);                                      // 2241\n        var msg_counter = 0;                                                                                           // 2242\n                                                                                                                       //\n        poll.onmessage = function (e) {                                                                                // 2243\n            msg_counter += 1;                                                                                          // 2244\n                                                                                                                       //\n            that.ri._didMessage(e.data);                                                                               // 2245\n        };                                                                                                             // 2246\n                                                                                                                       //\n        poll.onclose = function (e) {                                                                                  // 2247\n            that.poll = poll = poll.onmessage = poll.onclose = null;                                                   // 2248\n                                                                                                                       //\n            if (!that.poll_is_closing) {                                                                               // 2249\n                if (e.reason === 'permanent') {                                                                        // 2250\n                    that.ri._didClose(1006, 'Polling error (' + e.reason + ')');                                       // 2251\n                } else {                                                                                               // 2252\n                    that._scheduleRecv();                                                                              // 2253\n                }                                                                                                      // 2254\n            }                                                                                                          // 2255\n        };                                                                                                             // 2256\n    };                                                                                                                 // 2257\n                                                                                                                       //\n    Polling.prototype.abort = function () {                                                                            // 2259\n        var that = this;                                                                                               // 2260\n        that.poll_is_closing = true;                                                                                   // 2261\n                                                                                                                       //\n        if (that.poll) {                                                                                               // 2262\n            that.poll.abort();                                                                                         // 2263\n        }                                                                                                              // 2264\n    }; //         [*] End of lib/trans-polling.js                                                                      // 2265\n    //         [*] Including lib/trans-receiver-eventsource.js                                                         // 2269\n    /*                                                                                                                 // 2270\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var EventSourceReceiver = function (url) {                                                                         // 2278\n        var that = this;                                                                                               // 2279\n        var es = new EventSource(url);                                                                                 // 2280\n                                                                                                                       //\n        es.onmessage = function (e) {                                                                                  // 2281\n            that.dispatchEvent(new SimpleEvent('message', {                                                            // 2282\n                'data': unescape(e.data)                                                                               // 2283\n            }));                                                                                                       // 2283\n        };                                                                                                             // 2284\n                                                                                                                       //\n        that.es_close = es.onerror = function (e, abort_reason) {                                                      // 2285\n            // ES on reconnection has readyState = 0 or 1.                                                             // 2286\n            // on network error it's CLOSED = 2                                                                        // 2287\n            var reason = abort_reason ? 'user' : es.readyState !== 2 ? 'network' : 'permanent';                        // 2288\n            that.es_close = es.onmessage = es.onerror = null; // EventSource reconnects automatically.                 // 2290\n                                                                                                                       //\n            es.close();                                                                                                // 2292\n            es = null; // Safari and chrome < 15 crash if we close window before                                       // 2293\n            // waiting for ES cleanup. See:                                                                            // 2295\n            //   https://code.google.com/p/chromium/issues/detail?id=89155                                             // 2296\n                                                                                                                       //\n            utils.delay(200, function () {                                                                             // 2297\n                that.dispatchEvent(new SimpleEvent('close', {                                                          // 2298\n                    reason: reason                                                                                     // 2298\n                }));                                                                                                   // 2298\n            });                                                                                                        // 2299\n        };                                                                                                             // 2300\n    };                                                                                                                 // 2301\n                                                                                                                       //\n    EventSourceReceiver.prototype = new REventTarget();                                                                // 2303\n                                                                                                                       //\n    EventSourceReceiver.prototype.abort = function () {                                                                // 2305\n        var that = this;                                                                                               // 2306\n                                                                                                                       //\n        if (that.es_close) {                                                                                           // 2307\n            that.es_close({}, true);                                                                                   // 2308\n        }                                                                                                              // 2309\n    }; //         [*] End of lib/trans-receiver-eventsource.js                                                         // 2310\n    //         [*] Including lib/trans-receiver-htmlfile.js                                                            // 2314\n    /*                                                                                                                 // 2315\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var _is_ie_htmlfile_capable;                                                                                       // 2323\n                                                                                                                       //\n    var isIeHtmlfileCapable = function () {                                                                            // 2324\n        if (_is_ie_htmlfile_capable === undefined) {                                                                   // 2325\n            if ('ActiveXObject' in _window) {                                                                          // 2326\n                try {                                                                                                  // 2327\n                    _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile');                                         // 2328\n                } catch (x) {}                                                                                         // 2329\n            } else {                                                                                                   // 2330\n                _is_ie_htmlfile_capable = false;                                                                       // 2331\n            }                                                                                                          // 2332\n        }                                                                                                              // 2333\n                                                                                                                       //\n        return _is_ie_htmlfile_capable;                                                                                // 2334\n    };                                                                                                                 // 2335\n                                                                                                                       //\n    var HtmlfileReceiver = function (url) {                                                                            // 2338\n        var that = this;                                                                                               // 2339\n        utils.polluteGlobalNamespace();                                                                                // 2340\n        that.id = 'a' + utils.random_string(6, 26);                                                                    // 2342\n        url += (url.indexOf('?') === -1 ? '?' : '&') + 'c=' + escape(WPrefix + '.' + that.id);                         // 2343\n        var constructor = isIeHtmlfileCapable() ? utils.createHtmlfile : utils.createIframe;                           // 2346\n        var iframeObj;                                                                                                 // 2349\n        _window[WPrefix][that.id] = {                                                                                  // 2350\n            start: function () {                                                                                       // 2351\n                iframeObj.loaded();                                                                                    // 2352\n            },                                                                                                         // 2353\n            message: function (data) {                                                                                 // 2354\n                that.dispatchEvent(new SimpleEvent('message', {                                                        // 2355\n                    'data': data                                                                                       // 2355\n                }));                                                                                                   // 2355\n            },                                                                                                         // 2356\n            stop: function () {                                                                                        // 2357\n                that.iframe_close({}, 'network');                                                                      // 2358\n            }                                                                                                          // 2359\n        };                                                                                                             // 2350\n                                                                                                                       //\n        that.iframe_close = function (e, abort_reason) {                                                               // 2361\n            iframeObj.cleanup();                                                                                       // 2362\n            that.iframe_close = iframeObj = null;                                                                      // 2363\n            delete _window[WPrefix][that.id];                                                                          // 2364\n            that.dispatchEvent(new SimpleEvent('close', {                                                              // 2365\n                reason: abort_reason                                                                                   // 2365\n            }));                                                                                                       // 2365\n        };                                                                                                             // 2366\n                                                                                                                       //\n        iframeObj = constructor(url, function (e) {                                                                    // 2367\n            that.iframe_close({}, 'permanent');                                                                        // 2368\n        });                                                                                                            // 2369\n    };                                                                                                                 // 2370\n                                                                                                                       //\n    HtmlfileReceiver.prototype = new REventTarget();                                                                   // 2372\n                                                                                                                       //\n    HtmlfileReceiver.prototype.abort = function () {                                                                   // 2374\n        var that = this;                                                                                               // 2375\n                                                                                                                       //\n        if (that.iframe_close) {                                                                                       // 2376\n            that.iframe_close({}, 'user');                                                                             // 2377\n        }                                                                                                              // 2378\n    }; //         [*] End of lib/trans-receiver-htmlfile.js                                                            // 2379\n    //         [*] Including lib/trans-receiver-xhr.js                                                                 // 2383\n    /*                                                                                                                 // 2384\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */                                                                                                                //\n                                                                                                                       //\n    var XhrReceiver = function (url, AjaxObject) {                                                                     // 2392\n        var that = this;                                                                                               // 2393\n        var buf_pos = 0;                                                                                               // 2394\n        that.xo = new AjaxObject('POST', url, null);                                                                   // 2396\n                                                                                                                       //\n        that.xo.onchunk = function (status, text) {                                                                    // 2397\n            if (status !== 200) return;                                                                                // 2398\n                                                                                                                       //\n            while (1) {                                                                                                // 2399\n                var buf = text.slice(buf_pos);                                                                         // 2400\n                var p = buf.indexOf('\\n');                                                                             // 2401\n                if (p === -1) break;                                                                                   // 2402\n                buf_pos += p + 1;                                                                                      // 2403\n                var msg = buf.slice(0, p);                                                                             // 2404\n                that.dispatchEvent(new SimpleEvent('message', {                                                        // 2405\n                    data: msg                                                                                          // 2405\n                }));                                                                                                   // 2405\n            }                                                                                                          // 2406\n        };                                                                                                             // 2407\n                                                                                                                       //\n        that.xo.onfinish = function (status, text) {                                                                   // 2408\n            that.xo.onchunk(status, text);                                                                             // 2409\n            that.xo = null;                                                                                            // 2410\n            var reason = status === 200 ? 'network' : 'permanent';                                                     // 2411\n            that.dispatchEvent(new SimpleEvent('close', {                                                              // 2412\n                reason: reason                                                                                         // 2412\n            }));                                                                                                       // 2412\n        };                                                                                                             // 2413\n    };                                                                                                                 // 2414\n                                                                                                                       //\n    XhrReceiver.prototype = new REventTarget();                                                                        // 2416\n                                                                                                                       //\n    XhrReceiver.prototype.abort = function () {                                                                        // 2418\n        var that = this;                                                                                               // 2419\n                                                                                                                       //\n        if (that.xo) {                                                                                                 // 2420\n            that.xo.close();                                                                                           // 2421\n            that.dispatchEvent(new SimpleEvent('close', {                                                              // 2422\n                reason: 'user'                                                                                         // 2422\n            }));                                                                                                       // 2422\n            that.xo = null;                                                                                            // 2423\n        }                                                                                                              // 2424\n    }; //         [*] End of lib/trans-receiver-xhr.js                                                                 // 2425\n    //         [*] Including lib/test-hooks.js                                                                         // 2429\n    /*                                                                                                                 // 2430\n     * ***** BEGIN LICENSE BLOCK *****                                                                                 //\n     * Copyright (c) 2011-2012 VMware, Inc.                                                                            //\n     *                                                                                                                 //\n     * For the license see COPYING.                                                                                    //\n     * ***** END LICENSE BLOCK *****                                                                                   //\n     */ // For testing                                                                                                 //\n                                                                                                                       //\n                                                                                                                       //\n    SockJS.getUtils = function () {                                                                                    // 2439\n        return utils;                                                                                                  // 2440\n    };                                                                                                                 // 2441\n                                                                                                                       //\n    SockJS.getIframeTransport = function () {                                                                          // 2443\n        return IframeTransport;                                                                                        // 2444\n    }; //         [*] End of lib/test-hooks.js                                                                         // 2445\n                                                                                                                       //\n                                                                                                                       //\n    return SockJS;                                                                                                     // 2448\n}();                                                                                                                   // 2449\n                                                                                                                       //\nif ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1); // AMD compliance                                       // 2450\n                                                                                                                       //\nif (typeof define === 'function' && define.amd) {                                                                      // 2453\n    define('sockjs', [], function () {                                                                                 // 2454\n        return SockJS;                                                                                                 // 2454\n    });                                                                                                                // 2454\n} //     [*] End of lib/index.js                                                                                       // 2455\n// [*] End of lib/all.js                                                                                               // 2458\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"stream_client_sockjs.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-client/stream_client_sockjs.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar DDP = void 0,                                                                                                      // 1\n    LivedataTest = void 0;                                                                                             // 1\nmodule.watch(require(\"./namespace.js\"), {                                                                              // 1\n  DDP: function (v) {                                                                                                  // 1\n    DDP = v;                                                                                                           // 1\n  },                                                                                                                   // 1\n  LivedataTest: function (v) {                                                                                         // 1\n    LivedataTest = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\n// @param url {String} URL to Meteor app                                                                               // 3\n//   \"http://subdomain.meteor.com/\" or \"/\" or                                                                          // 4\n//   \"ddp+sockjs://foo-**.meteor.com/sockjs\"                                                                           // 5\nLivedataTest.ClientStream = function (url, options) {                                                                  // 6\n  var self = this;                                                                                                     // 7\n  self.options = _.extend({                                                                                            // 8\n    retry: true                                                                                                        // 9\n  }, options);                                                                                                         // 8\n                                                                                                                       //\n  self._initCommon(self.options); //// Constants                                                                       // 11\n  // how long between hearing heartbeat from the server until we declare                                               // 16\n  // the connection dead. heartbeats come every 45s (stream_server.js)                                                 // 17\n  //                                                                                                                   // 18\n  // NOTE: this is a older timeout mechanism. We now send heartbeats at                                                // 19\n  // the DDP level (https://github.com/meteor/meteor/pull/1865), and                                                   // 20\n  // expect those timeouts to kill a non-responsive connection before                                                  // 21\n  // this timeout fires. This is kept around for compatibility (when                                                   // 22\n  // talking to a server that doesn't support DDP heartbeats) and can be                                               // 23\n  // removed later.                                                                                                    // 24\n                                                                                                                       //\n                                                                                                                       //\n  self.HEARTBEAT_TIMEOUT = 100 * 1000;                                                                                 // 25\n  self.rawUrl = url;                                                                                                   // 27\n  self.socket = null;                                                                                                  // 28\n  self.heartbeatTimer = null; // Listen to global 'online' event if we are running in a browser.                       // 30\n  // (IE8 does not support addEventListener)                                                                           // 33\n                                                                                                                       //\n  if (typeof window !== 'undefined' && window.addEventListener) window.addEventListener(\"online\", _.bind(self._online, self), false /* useCapture. make FF3.6 happy. */); //// Kickoff!\n                                                                                                                       //\n  self._launchConnection();                                                                                            // 39\n};                                                                                                                     // 40\n                                                                                                                       //\n_.extend(LivedataTest.ClientStream.prototype, {                                                                        // 42\n  // data is a utf8 string. Data sent while not connected is dropped on                                                // 44\n  // the floor, and it is up the user of this API to retransmit lost                                                   // 45\n  // messages on 'reset'                                                                                               // 46\n  send: function (data) {                                                                                              // 47\n    var self = this;                                                                                                   // 48\n                                                                                                                       //\n    if (self.currentStatus.connected) {                                                                                // 49\n      self.socket.send(data);                                                                                          // 50\n    }                                                                                                                  // 51\n  },                                                                                                                   // 52\n  // Changes where this connection points                                                                              // 54\n  _changeUrl: function (url) {                                                                                         // 55\n    var self = this;                                                                                                   // 56\n    self.rawUrl = url;                                                                                                 // 57\n  },                                                                                                                   // 58\n  _connected: function () {                                                                                            // 60\n    var self = this;                                                                                                   // 61\n                                                                                                                       //\n    if (self.connectionTimer) {                                                                                        // 63\n      clearTimeout(self.connectionTimer);                                                                              // 64\n      self.connectionTimer = null;                                                                                     // 65\n    }                                                                                                                  // 66\n                                                                                                                       //\n    if (self.currentStatus.connected) {                                                                                // 68\n      // already connected. do nothing. this probably shouldn't happen.                                                // 69\n      return;                                                                                                          // 70\n    } // update status                                                                                                 // 71\n                                                                                                                       //\n                                                                                                                       //\n    self.currentStatus.status = \"connected\";                                                                           // 74\n    self.currentStatus.connected = true;                                                                               // 75\n    self.currentStatus.retryCount = 0;                                                                                 // 76\n    self.statusChanged(); // fire resets. This must come after status change so that clients                           // 77\n    // can call send from within a reset callback.                                                                     // 80\n                                                                                                                       //\n    _.each(self.eventCallbacks.reset, function (callback) {                                                            // 81\n      callback();                                                                                                      // 81\n    });                                                                                                                // 81\n  },                                                                                                                   // 83\n  _cleanup: function (maybeError) {                                                                                    // 85\n    var self = this;                                                                                                   // 86\n                                                                                                                       //\n    self._clearConnectionAndHeartbeatTimers();                                                                         // 88\n                                                                                                                       //\n    if (self.socket) {                                                                                                 // 89\n      self.socket.onmessage = self.socket.onclose = self.socket.onerror = self.socket.onheartbeat = function () {};    // 90\n                                                                                                                       //\n      self.socket.close();                                                                                             // 92\n      self.socket = null;                                                                                              // 93\n    }                                                                                                                  // 94\n                                                                                                                       //\n    _.each(self.eventCallbacks.disconnect, function (callback) {                                                       // 96\n      callback(maybeError);                                                                                            // 97\n    });                                                                                                                // 98\n  },                                                                                                                   // 99\n  _clearConnectionAndHeartbeatTimers: function () {                                                                    // 101\n    var self = this;                                                                                                   // 102\n                                                                                                                       //\n    if (self.connectionTimer) {                                                                                        // 103\n      clearTimeout(self.connectionTimer);                                                                              // 104\n      self.connectionTimer = null;                                                                                     // 105\n    }                                                                                                                  // 106\n                                                                                                                       //\n    if (self.heartbeatTimer) {                                                                                         // 107\n      clearTimeout(self.heartbeatTimer);                                                                               // 108\n      self.heartbeatTimer = null;                                                                                      // 109\n    }                                                                                                                  // 110\n  },                                                                                                                   // 111\n  _heartbeat_timeout: function () {                                                                                    // 113\n    var self = this;                                                                                                   // 114\n                                                                                                                       //\n    Meteor._debug(\"Connection timeout. No sockjs heartbeat received.\");                                                // 115\n                                                                                                                       //\n    self._lostConnection(new DDP.ConnectionError(\"Heartbeat timed out\"));                                              // 116\n  },                                                                                                                   // 117\n  _heartbeat_received: function () {                                                                                   // 119\n    var self = this; // If we've already permanently shut down this stream, the timeout is                             // 120\n    // already cleared, and we don't need to set it again.                                                             // 122\n                                                                                                                       //\n    if (self._forcedToDisconnect) return;                                                                              // 123\n    if (self.heartbeatTimer) clearTimeout(self.heartbeatTimer);                                                        // 125\n    self.heartbeatTimer = setTimeout(_.bind(self._heartbeat_timeout, self), self.HEARTBEAT_TIMEOUT);                   // 127\n  },                                                                                                                   // 130\n  _sockjsProtocolsWhitelist: function () {                                                                             // 132\n    // only allow polling protocols. no streaming.  streaming                                                          // 133\n    // makes safari spin.                                                                                              // 134\n    var protocolsWhitelist = ['xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling']; // iOS 4 and 5 and below crash when using websockets over certain\n    // proxies. this seems to be resolved with iOS 6. eg                                                               // 139\n    // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.                                        // 140\n    //                                                                                                                 // 141\n    // iOS <4 doesn't support websockets at all so sockjs will just                                                    // 142\n    // immediately fall back to http                                                                                   // 143\n                                                                                                                       //\n    var noWebsockets = navigator && /iPhone|iPad|iPod/.test(navigator.userAgent) && /OS 4_|OS 5_/.test(navigator.userAgent);\n    if (!noWebsockets) protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);                                  // 148\n    return protocolsWhitelist;                                                                                         // 151\n  },                                                                                                                   // 152\n  _launchConnection: function () {                                                                                     // 154\n    var self = this;                                                                                                   // 155\n                                                                                                                       //\n    self._cleanup(); // cleanup the old socket, if there was one.                                                      // 156\n                                                                                                                       //\n                                                                                                                       //\n    var options = _.extend({                                                                                           // 158\n      protocols_whitelist: self._sockjsProtocolsWhitelist()                                                            // 159\n    }, self.options._sockjsOptions); // Convert raw URL to SockJS URL each time we open a connection, so that we       // 158\n    // can connect to random hostnames and get around browser per-host                                                 // 163\n    // connection limits.                                                                                              // 164\n                                                                                                                       //\n                                                                                                                       //\n    self.socket = new SockJS(toSockjsUrl(self.rawUrl), undefined, options);                                            // 165\n                                                                                                                       //\n    self.socket.onopen = function (data) {                                                                             // 166\n      self._connected();                                                                                               // 167\n    };                                                                                                                 // 168\n                                                                                                                       //\n    self.socket.onmessage = function (data) {                                                                          // 169\n      self._heartbeat_received();                                                                                      // 170\n                                                                                                                       //\n      if (self.currentStatus.connected) _.each(self.eventCallbacks.message, function (callback) {                      // 172\n        callback(data.data);                                                                                           // 174\n      });                                                                                                              // 175\n    };                                                                                                                 // 176\n                                                                                                                       //\n    self.socket.onclose = function () {                                                                                // 177\n      self._lostConnection();                                                                                          // 178\n    };                                                                                                                 // 179\n                                                                                                                       //\n    self.socket.onerror = function () {                                                                                // 180\n      // XXX is this ever called?                                                                                      // 181\n      Meteor._debug(\"stream error\", _.toArray(arguments), new Date().toDateString());                                  // 182\n    };                                                                                                                 // 183\n                                                                                                                       //\n    self.socket.onheartbeat = function () {                                                                            // 185\n      self._heartbeat_received();                                                                                      // 186\n    };                                                                                                                 // 187\n                                                                                                                       //\n    if (self.connectionTimer) clearTimeout(self.connectionTimer);                                                      // 189\n    self.connectionTimer = setTimeout(function () {                                                                    // 191\n      self._lostConnection(new DDP.ConnectionError(\"DDP connection timed out\"));                                       // 192\n    }, self.CONNECT_TIMEOUT);                                                                                          // 194\n  }                                                                                                                    // 195\n});                                                                                                                    // 42\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"stream_client_common.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-client/stream_client_common.js                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar DDP = void 0,                                                                                                      // 1\n    LivedataTest = void 0;                                                                                             // 1\nmodule.watch(require(\"./namespace.js\"), {                                                                              // 1\n  DDP: function (v) {                                                                                                  // 1\n    DDP = v;                                                                                                           // 1\n  },                                                                                                                   // 1\n  LivedataTest: function (v) {                                                                                         // 1\n    LivedataTest = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\n// XXX from Underscore.String (http://epeli.github.com/underscore.string/)                                             // 3\nvar startsWith = function (str, starts) {                                                                              // 4\n  return str.length >= starts.length && str.substring(0, starts.length) === starts;                                    // 5\n};                                                                                                                     // 7\n                                                                                                                       //\nvar endsWith = function (str, ends) {                                                                                  // 8\n  return str.length >= ends.length && str.substring(str.length - ends.length) === ends;                                // 9\n}; // @param url {String} URL to Meteor app, eg:                                                                       // 11\n//   \"/\" or \"madewith.meteor.com\" or \"https://foo.meteor.com\"                                                          // 14\n//   or \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"                                                                 // 15\n// @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.                                    // 16\n// for scheme \"http\" and subPath \"sockjs\"                                                                              // 17\n//   \"http://subdomain.meteor.com/sockjs\" or \"/sockjs\"                                                                 // 18\n//   or \"https://ddp--1234-foo.meteor.com/sockjs\"                                                                      // 19\n                                                                                                                       //\n                                                                                                                       //\nvar translateUrl = function (url, newSchemeBase, subPath) {                                                            // 20\n  if (!newSchemeBase) {                                                                                                // 21\n    newSchemeBase = \"http\";                                                                                            // 22\n  }                                                                                                                    // 23\n                                                                                                                       //\n  var ddpUrlMatch = url.match(/^ddp(i?)\\+sockjs:\\/\\//);                                                                // 25\n  var httpUrlMatch = url.match(/^http(s?):\\/\\//);                                                                      // 26\n  var newScheme;                                                                                                       // 27\n                                                                                                                       //\n  if (ddpUrlMatch) {                                                                                                   // 28\n    // Remove scheme and split off the host.                                                                           // 29\n    var urlAfterDDP = url.substr(ddpUrlMatch[0].length);                                                               // 30\n    newScheme = ddpUrlMatch[1] === \"i\" ? newSchemeBase : newSchemeBase + \"s\";                                          // 31\n    var slashPos = urlAfterDDP.indexOf('/');                                                                           // 32\n    var host = slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);                                        // 33\n    var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos); // In the host (ONLY!), change '*' characters into random digits. This\n    // allows different stream connections to connect to different hostnames                                           // 38\n    // and avoid browser per-hostname connection limits.                                                               // 39\n                                                                                                                       //\n    host = host.replace(/\\*/g, function () {                                                                           // 40\n      return Math.floor(Random.fraction() * 10);                                                                       // 41\n    });                                                                                                                // 42\n    return newScheme + '://' + host + rest;                                                                            // 44\n  } else if (httpUrlMatch) {                                                                                           // 45\n    newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + \"s\";                                                // 46\n    var urlAfterHttp = url.substr(httpUrlMatch[0].length);                                                             // 47\n    url = newScheme + \"://\" + urlAfterHttp;                                                                            // 48\n  } // Prefix FQDNs but not relative URLs                                                                              // 49\n                                                                                                                       //\n                                                                                                                       //\n  if (url.indexOf(\"://\") === -1 && !startsWith(url, \"/\")) {                                                            // 52\n    url = newSchemeBase + \"://\" + url;                                                                                 // 53\n  } // XXX This is not what we should be doing: if I have a site                                                       // 54\n  // deployed at \"/foo\", then DDP.connect(\"/\") should actually connect                                                 // 57\n  // to \"/\", not to \"/foo\". \"/\" is an absolute path. (Contrast: if                                                     // 58\n  // deployed at \"/foo\", it would be reasonable for DDP.connect(\"bar\")                                                 // 59\n  // to connect to \"/foo/bar\").                                                                                        // 60\n  //                                                                                                                   // 61\n  // We should make this properly honor absolute paths rather than                                                     // 62\n  // forcing the path to be relative to the site root. Simultaneously,                                                 // 63\n  // we should set DDP_DEFAULT_CONNECTION_URL to include the site                                                      // 64\n  // root. See also client_convenience.js #RationalizingRelativeDDPURLs                                                // 65\n                                                                                                                       //\n                                                                                                                       //\n  url = Meteor._relativeToSiteRootUrl(url);                                                                            // 66\n  if (endsWith(url, \"/\")) return url + subPath;else return url + \"/\" + subPath;                                        // 68\n};                                                                                                                     // 72\n                                                                                                                       //\ntoSockjsUrl = function (url) {                                                                                         // 74\n  return translateUrl(url, \"http\", \"sockjs\");                                                                          // 75\n};                                                                                                                     // 76\n                                                                                                                       //\ntoWebsocketUrl = function (url) {                                                                                      // 78\n  var ret = translateUrl(url, \"ws\", \"websocket\");                                                                      // 79\n  return ret;                                                                                                          // 80\n};                                                                                                                     // 81\n                                                                                                                       //\nLivedataTest.toSockjsUrl = toSockjsUrl;                                                                                // 83\n                                                                                                                       //\n_.extend(LivedataTest.ClientStream.prototype, {                                                                        // 86\n  // Register for callbacks.                                                                                           // 88\n  on: function (name, callback) {                                                                                      // 89\n    var self = this;                                                                                                   // 90\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect') throw new Error(\"unknown event type: \" + name);\n    if (!self.eventCallbacks[name]) self.eventCallbacks[name] = [];                                                    // 95\n    self.eventCallbacks[name].push(callback);                                                                          // 97\n  },                                                                                                                   // 98\n  _initCommon: function (options) {                                                                                    // 101\n    var self = this;                                                                                                   // 102\n    options = options || {}; //// Constants                                                                            // 103\n    // how long to wait until we declare the connection attempt                                                        // 107\n    // failed.                                                                                                         // 108\n                                                                                                                       //\n    self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;                                                          // 109\n    self.eventCallbacks = {}; // name -> [callback]                                                                    // 111\n                                                                                                                       //\n    self._forcedToDisconnect = false; //// Reactive status                                                             // 113\n                                                                                                                       //\n    self.currentStatus = {                                                                                             // 116\n      status: \"connecting\",                                                                                            // 117\n      connected: false,                                                                                                // 118\n      retryCount: 0                                                                                                    // 119\n    };                                                                                                                 // 116\n    self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency();                                 // 123\n                                                                                                                       //\n    self.statusChanged = function () {                                                                                 // 124\n      if (self.statusListeners) self.statusListeners.changed();                                                        // 125\n    }; //// Retry logic                                                                                                // 127\n                                                                                                                       //\n                                                                                                                       //\n    self._retry = new Retry();                                                                                         // 130\n    self.connectionTimer = null;                                                                                       // 131\n  },                                                                                                                   // 133\n  // Trigger a reconnect.                                                                                              // 135\n  reconnect: function (options) {                                                                                      // 136\n    var self = this;                                                                                                   // 137\n    options = options || {};                                                                                           // 138\n                                                                                                                       //\n    if (options.url) {                                                                                                 // 140\n      self._changeUrl(options.url);                                                                                    // 141\n    }                                                                                                                  // 142\n                                                                                                                       //\n    if (options._sockjsOptions) {                                                                                      // 144\n      self.options._sockjsOptions = options._sockjsOptions;                                                            // 145\n    }                                                                                                                  // 146\n                                                                                                                       //\n    if (self.currentStatus.connected) {                                                                                // 148\n      if (options._force || options.url) {                                                                             // 149\n        // force reconnect.                                                                                            // 150\n        self._lostConnection(new DDP.ForcedReconnectError());                                                          // 151\n      } // else, noop.                                                                                                 // 152\n                                                                                                                       //\n                                                                                                                       //\n      return;                                                                                                          // 153\n    } // if we're mid-connection, stop it.                                                                             // 154\n                                                                                                                       //\n                                                                                                                       //\n    if (self.currentStatus.status === \"connecting\") {                                                                  // 157\n      // Pretend it's a clean close.                                                                                   // 158\n      self._lostConnection();                                                                                          // 159\n    }                                                                                                                  // 160\n                                                                                                                       //\n    self._retry.clear();                                                                                               // 162\n                                                                                                                       //\n    self.currentStatus.retryCount -= 1; // don't count manual retries                                                  // 163\n                                                                                                                       //\n    self._retryNow();                                                                                                  // 164\n  },                                                                                                                   // 165\n  disconnect: function (options) {                                                                                     // 167\n    var self = this;                                                                                                   // 168\n    options = options || {}; // Failed is permanent. If we're failed, don't let people go back                         // 169\n    // online by calling 'disconnect' then 'reconnect'.                                                                // 172\n                                                                                                                       //\n    if (self._forcedToDisconnect) return; // If _permanent is set, permanently disconnect a stream. Once a stream      // 173\n    // is forced to disconnect, it can never reconnect. This is for                                                    // 177\n    // error cases such as ddp version mismatch, where trying again                                                    // 178\n    // won't fix the problem.                                                                                          // 179\n                                                                                                                       //\n    if (options._permanent) {                                                                                          // 180\n      self._forcedToDisconnect = true;                                                                                 // 181\n    }                                                                                                                  // 182\n                                                                                                                       //\n    self._cleanup();                                                                                                   // 184\n                                                                                                                       //\n    self._retry.clear();                                                                                               // 185\n                                                                                                                       //\n    self.currentStatus = {                                                                                             // 187\n      status: options._permanent ? \"failed\" : \"offline\",                                                               // 188\n      connected: false,                                                                                                // 189\n      retryCount: 0                                                                                                    // 190\n    };                                                                                                                 // 187\n    if (options._permanent && options._error) self.currentStatus.reason = options._error;                              // 193\n    self.statusChanged();                                                                                              // 196\n  },                                                                                                                   // 197\n  // maybeError is set unless it's a clean protocol-level close.                                                       // 199\n  _lostConnection: function (maybeError) {                                                                             // 200\n    var self = this;                                                                                                   // 201\n                                                                                                                       //\n    self._cleanup(maybeError);                                                                                         // 203\n                                                                                                                       //\n    self._retryLater(maybeError); // sets status. no need to do it here.                                               // 204\n                                                                                                                       //\n  },                                                                                                                   // 205\n  // fired when we detect that we've gone online. try to reconnect                                                     // 207\n  // immediately.                                                                                                      // 208\n  _online: function () {                                                                                               // 209\n    // if we've requested to be offline by disconnecting, don't reconnect.                                             // 210\n    if (this.currentStatus.status != \"offline\") this.reconnect();                                                      // 211\n  },                                                                                                                   // 213\n  _retryLater: function (maybeError) {                                                                                 // 215\n    var self = this;                                                                                                   // 216\n    var timeout = 0;                                                                                                   // 218\n                                                                                                                       //\n    if (self.options.retry || maybeError && maybeError.errorType === \"DDP.ForcedReconnectError\") {                     // 219\n      timeout = self._retry.retryLater(self.currentStatus.retryCount, _.bind(self._retryNow, self));                   // 221\n      self.currentStatus.status = \"waiting\";                                                                           // 225\n      self.currentStatus.retryTime = new Date().getTime() + timeout;                                                   // 226\n    } else {                                                                                                           // 227\n      self.currentStatus.status = \"failed\";                                                                            // 228\n      delete self.currentStatus.retryTime;                                                                             // 229\n    }                                                                                                                  // 230\n                                                                                                                       //\n    self.currentStatus.connected = false;                                                                              // 232\n    self.statusChanged();                                                                                              // 233\n  },                                                                                                                   // 234\n  _retryNow: function () {                                                                                             // 236\n    var self = this;                                                                                                   // 237\n    if (self._forcedToDisconnect) return;                                                                              // 239\n    self.currentStatus.retryCount += 1;                                                                                // 242\n    self.currentStatus.status = \"connecting\";                                                                          // 243\n    self.currentStatus.connected = false;                                                                              // 244\n    delete self.currentStatus.retryTime;                                                                               // 245\n    self.statusChanged();                                                                                              // 246\n                                                                                                                       //\n    self._launchConnection();                                                                                          // 248\n  },                                                                                                                   // 249\n  // Get current status. Reactive.                                                                                     // 252\n  status: function () {                                                                                                // 253\n    var self = this;                                                                                                   // 254\n    if (self.statusListeners) self.statusListeners.depend();                                                           // 255\n    return self.currentStatus;                                                                                         // 257\n  }                                                                                                                    // 258\n});                                                                                                                    // 86\n                                                                                                                       //\nDDP.ConnectionError = Meteor.makeErrorType(\"DDP.ConnectionError\", function (message) {                                 // 261\n  var self = this;                                                                                                     // 263\n  self.message = message;                                                                                              // 264\n});                                                                                                                    // 265\nDDP.ForcedReconnectError = Meteor.makeErrorType(\"DDP.ForcedReconnectError\", function () {});                           // 267\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"livedata_common.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-client/livedata_common.js                                                                              //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar DDP = void 0,                                                                                                      // 1\n    LivedataTest = void 0;                                                                                             // 1\nmodule.watch(require(\"./namespace.js\"), {                                                                              // 1\n  DDP: function (v) {                                                                                                  // 1\n    DDP = v;                                                                                                           // 1\n  },                                                                                                                   // 1\n  LivedataTest: function (v) {                                                                                         // 1\n    LivedataTest = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nLivedataTest.SUPPORTED_DDP_VERSIONS = DDPCommon.SUPPORTED_DDP_VERSIONS; // This is private but it's used in a few places. accounts-base uses\n// it to get the current user. Meteor.setTimeout and friends clear                                                     // 6\n// it. We can probably find a better way to factor this.                                                               // 7\n                                                                                                                       //\nDDP._CurrentMethodInvocation = new Meteor.EnvironmentVariable();                                                       // 8\nDDP._CurrentPublicationInvocation = new Meteor.EnvironmentVariable(); // XXX: Keep DDP._CurrentInvocation for backwards-compatibility.\n                                                                                                                       //\nDDP._CurrentInvocation = DDP._CurrentMethodInvocation;                                                                 // 12\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"random_stream.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-client/random_stream.js                                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar DDP = void 0;                                                                                                      // 1\nmodule.watch(require(\"./namespace.js\"), {                                                                              // 1\n  DDP: function (v) {                                                                                                  // 1\n    DDP = v;                                                                                                           // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\n// Returns the named sequence of pseudo-random values.                                                                 // 3\n// The scope will be DDP._CurrentMethodInvocation.get(), so the stream will produce                                    // 4\n// consistent values for method calls on the client and server.                                                        // 5\nDDP.randomStream = function (name) {                                                                                   // 6\n  var scope = DDP._CurrentMethodInvocation.get();                                                                      // 7\n                                                                                                                       //\n  return DDPCommon.RandomStream.get(scope, name);                                                                      // 8\n};                                                                                                                     // 9\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"livedata_connection.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-client/livedata_connection.js                                                                          //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                                //\n                                                                                                                       //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                       //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nvar DDP = void 0,                                                                                                      // 1\n    LivedataTest = void 0;                                                                                             // 1\nmodule.watch(require(\"./namespace.js\"), {                                                                              // 1\n  DDP: function (v) {                                                                                                  // 1\n    DDP = v;                                                                                                           // 1\n  },                                                                                                                   // 1\n  LivedataTest: function (v) {                                                                                         // 1\n    LivedataTest = v;                                                                                                  // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\nvar MongoIDMap = void 0;                                                                                               // 1\nmodule.watch(require(\"./id_map.js\"), {                                                                                 // 1\n  MongoIDMap: function (v) {                                                                                           // 1\n    MongoIDMap = v;                                                                                                    // 1\n  }                                                                                                                    // 1\n}, 1);                                                                                                                 // 1\n                                                                                                                       //\nif (Meteor.isServer) {                                                                                                 // 4\n  var Fiber = Npm.require('fibers');                                                                                   // 5\n                                                                                                                       //\n  var Future = Npm.require('fibers/future');                                                                           // 6\n} // @param url {String|Object} URL to Meteor app,                                                                     // 7\n//   or an object as a test hook (see code)                                                                            // 10\n// Options:                                                                                                            // 11\n//   reloadWithOutstanding: is it OK to reload if there are outstanding methods?                                       // 12\n//   headers: extra headers to send on the websockets connection, for                                                  // 13\n//     server-to-server DDP only                                                                                       // 14\n//   _sockjsOptions: Specifies options to pass through to the sockjs client                                            // 15\n//   onDDPNegotiationVersionFailure: callback when version negotiation fails.                                          // 16\n//                                                                                                                     // 17\n// XXX There should be a way to destroy a DDP connection, causing all                                                  // 18\n// outstanding method calls to fail.                                                                                   // 19\n//                                                                                                                     // 20\n// XXX Our current way of handling failure and reconnection is great                                                   // 21\n// for an app (where we want to tolerate being disconnected as an                                                      // 22\n// expect state, and keep trying forever to reconnect) but cumbersome                                                  // 23\n// for something like a command line tool that wants to make a                                                         // 24\n// connection, call a method, and print an error if connection                                                         // 25\n// fails. We should have better usability in the latter case (while                                                    // 26\n// still transparently reconnecting if it's just a transient failure                                                   // 27\n// or the server migrating us).                                                                                        // 28\n                                                                                                                       //\n                                                                                                                       //\nvar Connection = function (url, options) {                                                                             // 29\n  var self = this;                                                                                                     // 30\n  options = _.extend({                                                                                                 // 31\n    onConnected: function () {},                                                                                       // 32\n    onDDPVersionNegotiationFailure: function (description) {                                                           // 33\n      Meteor._debug(description);                                                                                      // 34\n    },                                                                                                                 // 35\n    heartbeatInterval: 17500,                                                                                          // 36\n    heartbeatTimeout: 15000,                                                                                           // 37\n    npmFayeOptions: {},                                                                                                // 38\n    // These options are only for testing.                                                                             // 39\n    reloadWithOutstanding: false,                                                                                      // 40\n    supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,                                                            // 41\n    retry: true,                                                                                                       // 42\n    respondToPings: true,                                                                                              // 43\n    // When updates are coming within this ms interval, batch them together.                                           // 44\n    bufferedWritesInterval: 5,                                                                                         // 45\n    // Flush buffers immediately if writes are happening continuously for more than this many ms.                      // 46\n    bufferedWritesMaxAge: 500                                                                                          // 47\n  }, options); // If set, called when we reconnect, queuing method calls _before_ the                                  // 31\n  // existing outstanding ones.                                                                                        // 51\n  // NOTE: This feature has been preserved for backwards compatibility. The                                            // 52\n  // preferred method of setting a callback on reconnect is to use                                                     // 53\n  // DDP.onReconnect.                                                                                                  // 54\n                                                                                                                       //\n  self.onReconnect = null; // as a test hook, allow passing a stream instead of a url.                                 // 55\n                                                                                                                       //\n  if ((typeof url === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(url)) === \"object\") {                          // 58\n    self._stream = url;                                                                                                // 59\n  } else {                                                                                                             // 60\n    self._stream = new LivedataTest.ClientStream(url, {                                                                // 61\n      retry: options.retry,                                                                                            // 62\n      headers: options.headers,                                                                                        // 63\n      _sockjsOptions: options._sockjsOptions,                                                                          // 64\n      // Used to keep some tests quiet, or for other cases in which                                                    // 65\n      // the right thing to do with connection errors is to silently                                                   // 66\n      // fail (e.g. sending package usage stats). At some point we                                                     // 67\n      // should have a real API for handling client-stream-level                                                       // 68\n      // errors.                                                                                                       // 69\n      _dontPrintErrors: options._dontPrintErrors,                                                                      // 70\n      connectTimeoutMs: options.connectTimeoutMs,                                                                      // 71\n      npmFayeOptions: options.npmFayeOptions                                                                           // 72\n    });                                                                                                                // 61\n  }                                                                                                                    // 74\n                                                                                                                       //\n  self._lastSessionId = null;                                                                                          // 76\n  self._versionSuggestion = null; // The last proposed DDP version.                                                    // 77\n                                                                                                                       //\n  self._version = null; // The DDP version agreed on by client and server.                                             // 78\n                                                                                                                       //\n  self._stores = {}; // name -> object with methods                                                                    // 79\n                                                                                                                       //\n  self._methodHandlers = {}; // name -> func                                                                           // 80\n                                                                                                                       //\n  self._nextMethodId = 1;                                                                                              // 81\n  self._supportedDDPVersions = options.supportedDDPVersions;                                                           // 82\n  self._heartbeatInterval = options.heartbeatInterval;                                                                 // 84\n  self._heartbeatTimeout = options.heartbeatTimeout; // Tracks methods which the user has tried to call but which have not yet\n  // called their user callback (ie, they are waiting on their result or for all                                       // 88\n  // of their writes to be written to the local cache). Map from method ID to                                          // 89\n  // MethodInvoker object.                                                                                             // 90\n                                                                                                                       //\n  self._methodInvokers = {}; // Tracks methods which the user has called but whose result messages have not            // 91\n  // arrived yet.                                                                                                      // 94\n  //                                                                                                                   // 95\n  // _outstandingMethodBlocks is an array of blocks of methods. Each block                                             // 96\n  // represents a set of methods that can run at the same time. The first block                                        // 97\n  // represents the methods which are currently in flight; subsequent blocks                                           // 98\n  // must wait for previous blocks to be fully finished before they can be sent                                        // 99\n  // to the server.                                                                                                    // 100\n  //                                                                                                                   // 101\n  // Each block is an object with the following fields:                                                                // 102\n  // - methods: a list of MethodInvoker objects                                                                        // 103\n  // - wait: a boolean; if true, this block had a single method invoked with                                           // 104\n  //         the \"wait\" option                                                                                         // 105\n  //                                                                                                                   // 106\n  // There will never be adjacent blocks with wait=false, because the only thing                                       // 107\n  // that makes methods need to be serialized is a wait method.                                                        // 108\n  //                                                                                                                   // 109\n  // Methods are removed from the first block when their \"result\" is                                                   // 110\n  // received. The entire first block is only removed when all of the in-flight                                        // 111\n  // methods have received their results (so the \"methods\" list is empty) *AND*                                        // 112\n  // all of the data written by those methods are visible in the local cache. So                                       // 113\n  // it is possible for the first block's methods list to be empty, if we are                                          // 114\n  // still waiting for some objects to quiesce.                                                                        // 115\n  //                                                                                                                   // 116\n  // Example:                                                                                                          // 117\n  //  _outstandingMethodBlocks = [                                                                                     // 118\n  //    {wait: false, methods: []},                                                                                    // 119\n  //    {wait: true, methods: [<MethodInvoker for 'login'>]},                                                          // 120\n  //    {wait: false, methods: [<MethodInvoker for 'foo'>,                                                             // 121\n  //                            <MethodInvoker for 'bar'>]}]                                                           // 122\n  // This means that there were some methods which were sent to the server and                                         // 123\n  // which have returned their results, but some of the data written by                                                // 124\n  // the methods may not be visible in the local cache. Once all that data is                                          // 125\n  // visible, we will send a 'login' method. Once the login method has returned                                        // 126\n  // and all the data is visible (including re-running subs if userId changes),                                        // 127\n  // we will send the 'foo' and 'bar' methods in parallel.                                                             // 128\n                                                                                                                       //\n  self._outstandingMethodBlocks = []; // method ID -> array of objects with keys 'collection' and 'id', listing        // 129\n  // documents written by a given method's stub. keys are associated with                                              // 132\n  // methods whose stub wrote at least one document, and whose data-done message                                       // 133\n  // has not yet been received.                                                                                        // 134\n                                                                                                                       //\n  self._documentsWrittenByStub = {}; // collection -> IdMap of \"server document\" object. A \"server document\" has:      // 135\n  // - \"document\": the version of the document according the                                                           // 137\n  //   server (ie, the snapshot before a stub wrote it, amended by any changes                                         // 138\n  //   received from the server)                                                                                       // 139\n  //   It is undefined if we think the document does not exist                                                         // 140\n  // - \"writtenByStubs\": a set of method IDs whose stubs wrote to the document                                         // 141\n  //   whose \"data done\" messages have not yet been processed                                                          // 142\n                                                                                                                       //\n  self._serverDocuments = {}; // Array of callbacks to be called after the next update of the local                    // 143\n  // cache. Used for:                                                                                                  // 146\n  //  - Calling methodInvoker.dataVisible and sub ready callbacks after                                                // 147\n  //    the relevant data is flushed.                                                                                  // 148\n  //  - Invoking the callbacks of \"half-finished\" methods after reconnect                                              // 149\n  //    quiescence. Specifically, methods whose result was received over the old                                       // 150\n  //    connection (so we don't re-send it) but whose data had not been made                                           // 151\n  //    visible.                                                                                                       // 152\n                                                                                                                       //\n  self._afterUpdateCallbacks = []; // In two contexts, we buffer all incoming data messages and then process them      // 153\n  // all at once in a single update:                                                                                   // 156\n  //   - During reconnect, we buffer all data messages until all subs that had                                         // 157\n  //     been ready before reconnect are ready again, and all methods that are                                         // 158\n  //     active have returned their \"data done message\"; then                                                          // 159\n  //   - During the execution of a \"wait\" method, we buffer all data messages                                          // 160\n  //     until the wait method gets its \"data done\" message. (If the wait method                                       // 161\n  //     occurs during reconnect, it doesn't get any special handling.)                                                // 162\n  // all data messages are processed in one update.                                                                    // 163\n  //                                                                                                                   // 164\n  // The following fields are used for this \"quiescence\" process.                                                      // 165\n  // This buffers the messages that aren't being processed yet.                                                        // 167\n                                                                                                                       //\n  self._messagesBufferedUntilQuiescence = []; // Map from method ID -> true. Methods are removed from this when their  // 168\n  // \"data done\" message is received, and we will not quiesce until it is                                              // 170\n  // empty.                                                                                                            // 171\n                                                                                                                       //\n  self._methodsBlockingQuiescence = {}; // map from sub ID -> true for subs that were ready (ie, called the sub        // 172\n  // ready callback) before reconnect but haven't become ready again yet                                               // 174\n                                                                                                                       //\n  self._subsBeingRevived = {}; // map from sub._id -> true                                                             // 175\n  // if true, the next data update should reset all stores. (set during                                                // 176\n  // reconnect.)                                                                                                       // 177\n                                                                                                                       //\n  self._resetStores = false; // name -> array of updates for (yet to be created) collections                           // 178\n                                                                                                                       //\n  self._updatesForUnknownStores = {}; // if we're blocking a migration, the retry func                                 // 181\n                                                                                                                       //\n  self._retryMigrate = null;                                                                                           // 183\n  self.__flushBufferedWrites = Meteor.bindEnvironment(self._flushBufferedWrites, \"flushing DDP buffered writes\", self); // Collection name -> array of messages.\n                                                                                                                       //\n  self._bufferedWrites = {}; // When current buffer of updates must be flushed at, in ms timestamp.                    // 188\n                                                                                                                       //\n  self._bufferedWritesFlushAt = null; // Timeout handle for the next processing of all pending writes                  // 190\n                                                                                                                       //\n  self._bufferedWritesFlushHandle = null;                                                                              // 192\n  self._bufferedWritesInterval = options.bufferedWritesInterval;                                                       // 194\n  self._bufferedWritesMaxAge = options.bufferedWritesMaxAge; // metadata for subscriptions.  Map from sub ID to object with keys:\n  //   - id                                                                                                            // 198\n  //   - name                                                                                                          // 199\n  //   - params                                                                                                        // 200\n  //   - inactive (if true, will be cleaned up if not reused in re-run)                                                // 201\n  //   - ready (has the 'ready' message been received?)                                                                // 202\n  //   - readyCallback (an optional callback to call when ready)                                                       // 203\n  //   - errorCallback (an optional callback to call if the sub terminates with                                        // 204\n  //                    an error, XXX COMPAT WITH 1.0.3.1)                                                             // 205\n  //   - stopCallback (an optional callback to call when the sub terminates                                            // 206\n  //     for any reason, with an error argument if an error triggered the stop)                                        // 207\n                                                                                                                       //\n  self._subscriptions = {}; // Reactive userId.                                                                        // 208\n                                                                                                                       //\n  self._userId = null;                                                                                                 // 211\n  self._userIdDeps = new Tracker.Dependency(); // Block auto-reload while we're waiting for method responses.          // 212\n                                                                                                                       //\n  if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {                                           // 215\n    Package.reload.Reload._onMigrate(function (retry) {                                                                // 216\n      if (!self._readyToMigrate()) {                                                                                   // 217\n        if (self._retryMigrate) throw new Error(\"Two migrations in progress?\");                                        // 218\n        self._retryMigrate = retry;                                                                                    // 220\n        return false;                                                                                                  // 221\n      } else {                                                                                                         // 222\n        return [true];                                                                                                 // 223\n      }                                                                                                                // 224\n    });                                                                                                                // 225\n  }                                                                                                                    // 226\n                                                                                                                       //\n  var onMessage = function (raw_msg) {                                                                                 // 228\n    try {                                                                                                              // 229\n      var msg = DDPCommon.parseDDP(raw_msg);                                                                           // 230\n    } catch (e) {                                                                                                      // 231\n      Meteor._debug(\"Exception while parsing DDP\", e);                                                                 // 232\n                                                                                                                       //\n      return;                                                                                                          // 233\n    } // Any message counts as receiving a pong, as it demonstrates that                                               // 234\n    // the server is still alive.                                                                                      // 237\n                                                                                                                       //\n                                                                                                                       //\n    if (self._heartbeat) {                                                                                             // 238\n      self._heartbeat.messageReceived();                                                                               // 239\n    }                                                                                                                  // 240\n                                                                                                                       //\n    if (msg === null || !msg.msg) {                                                                                    // 242\n      // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back                                                // 243\n      // compat.  Remove this 'if' once the server stops sending welcome                                               // 244\n      // messages (stream_server.js).                                                                                  // 245\n      if (!(msg && msg.server_id)) Meteor._debug(\"discarding invalid livedata message\", msg);                          // 246\n      return;                                                                                                          // 248\n    }                                                                                                                  // 249\n                                                                                                                       //\n    if (msg.msg === 'connected') {                                                                                     // 251\n      self._version = self._versionSuggestion;                                                                         // 252\n                                                                                                                       //\n      self._livedata_connected(msg);                                                                                   // 253\n                                                                                                                       //\n      options.onConnected();                                                                                           // 254\n    } else if (msg.msg === 'failed') {                                                                                 // 255\n      if (_.contains(self._supportedDDPVersions, msg.version)) {                                                       // 257\n        self._versionSuggestion = msg.version;                                                                         // 258\n                                                                                                                       //\n        self._stream.reconnect({                                                                                       // 259\n          _force: true                                                                                                 // 259\n        });                                                                                                            // 259\n      } else {                                                                                                         // 260\n        var description = \"DDP version negotiation failed; server requested version \" + msg.version;                   // 261\n                                                                                                                       //\n        self._stream.disconnect({                                                                                      // 263\n          _permanent: true,                                                                                            // 263\n          _error: description                                                                                          // 263\n        });                                                                                                            // 263\n                                                                                                                       //\n        options.onDDPVersionNegotiationFailure(description);                                                           // 264\n      }                                                                                                                // 265\n    } else if (msg.msg === 'ping' && options.respondToPings) {                                                         // 266\n      self._send({                                                                                                     // 268\n        msg: \"pong\",                                                                                                   // 268\n        id: msg.id                                                                                                     // 268\n      });                                                                                                              // 268\n    } else if (msg.msg === 'pong') {// noop, as we assume everything's a pong                                          // 269\n    } else if (_.include(['added', 'changed', 'removed', 'ready', 'updated'], msg.msg)) self._livedata_data(msg);else if (msg.msg === 'nosub') self._livedata_nosub(msg);else if (msg.msg === 'result') self._livedata_result(msg);else if (msg.msg === 'error') self._livedata_error(msg);else Meteor._debug(\"discarding unknown livedata message type\", msg);\n  };                                                                                                                   // 283\n                                                                                                                       //\n  var onReset = function () {                                                                                          // 285\n    // Send a connect message at the beginning of the stream.                                                          // 286\n    // NOTE: reset is called even on the first connection, so this is                                                  // 287\n    // the only place we send this message.                                                                            // 288\n    var msg = {                                                                                                        // 289\n      msg: 'connect'                                                                                                   // 289\n    };                                                                                                                 // 289\n    if (self._lastSessionId) msg.session = self._lastSessionId;                                                        // 290\n    msg.version = self._versionSuggestion || self._supportedDDPVersions[0];                                            // 292\n    self._versionSuggestion = msg.version;                                                                             // 293\n    msg.support = self._supportedDDPVersions;                                                                          // 294\n                                                                                                                       //\n    self._send(msg); // Mark non-retry calls as failed. This has to be done early as getting these methods out of the  // 295\n    // current block is pretty important to making sure that quiescence is properly calculated, as                     // 298\n    // well as possibly moving on to another useful block.                                                             // 299\n    // Only bother testing if there is an outstandingMethodBlock (there might not be, especially if                    // 301\n    // we are connecting for the first time.                                                                           // 302\n                                                                                                                       //\n                                                                                                                       //\n    if (self._outstandingMethodBlocks.length > 0) {                                                                    // 303\n      // If there is an outstanding method block, we only care about the first one as that is the                      // 304\n      // one that could have already sent messages with no response, that are not allowed to retry.                    // 305\n      var currentMethodBlock = self._outstandingMethodBlocks[0].methods;                                               // 306\n      self._outstandingMethodBlocks[0].methods = currentMethodBlock.filter(function (methodInvoker) {                  // 307\n        // Methods with 'noRetry' option set are not allowed to re-send after                                          // 309\n        // recovering dropped connection.                                                                              // 310\n        if (methodInvoker.sentMessage && methodInvoker.noRetry) {                                                      // 311\n          // Make sure that the method is told that it failed.                                                         // 312\n          methodInvoker.receiveResult(new Meteor.Error('invocation-failed', 'Method invocation might have failed due to dropped connection. ' + 'Failing because `noRetry` option was passed to Meteor.apply.'));\n        } // Only keep a method if it wasn't sent or it's allowed to retry.                                            // 316\n        // This may leave the block empty, but we don't move on to the next                                            // 319\n        // block until the callback has been delivered, in _outstandingMethodFinished.                                 // 320\n                                                                                                                       //\n                                                                                                                       //\n        return !(methodInvoker.sentMessage && methodInvoker.noRetry);                                                  // 321\n      });                                                                                                              // 322\n    } // Now, to minimize setup latency, go ahead and blast out all of                                                 // 323\n    // our pending methods ands subscriptions before we've even taken                                                  // 326\n    // the necessary RTT to know if we successfully reconnected. (1)                                                   // 327\n    // They're supposed to be idempotent, and where they are not,                                                      // 328\n    // they can block retry in apply; (2) even if we did reconnect,                                                    // 329\n    // we're not sure what messages might have gotten lost                                                             // 330\n    // (in either direction) since we were disconnected (TCP being                                                     // 331\n    // sloppy about that.)                                                                                             // 332\n    // If the current block of methods all got their results (but didn't all get                                       // 334\n    // their data visible), discard the empty block now.                                                               // 335\n                                                                                                                       //\n                                                                                                                       //\n    if (!_.isEmpty(self._outstandingMethodBlocks) && _.isEmpty(self._outstandingMethodBlocks[0].methods)) {            // 336\n      self._outstandingMethodBlocks.shift();                                                                           // 338\n    } // Mark all messages as unsent, they have not yet been sent on this                                              // 339\n    // connection.                                                                                                     // 342\n                                                                                                                       //\n                                                                                                                       //\n    _.each(self._methodInvokers, function (m) {                                                                        // 343\n      m.sentMessage = false;                                                                                           // 344\n    }); // If an `onReconnect` handler is set, call it first. Go through                                               // 345\n    // some hoops to ensure that methods that are called from within                                                   // 348\n    // `onReconnect` get executed _before_ ones that were originally                                                   // 349\n    // outstanding (since `onReconnect` is used to re-establish auth                                                   // 350\n    // certificates)                                                                                                   // 351\n                                                                                                                       //\n                                                                                                                       //\n    self._callOnReconnectAndSendAppropriateOutstandingMethods(); // add new subscriptions at the end. this way they take effect after\n    // the handlers and we don't see flicker.                                                                          // 355\n                                                                                                                       //\n                                                                                                                       //\n    _.each(self._subscriptions, function (sub, id) {                                                                   // 356\n      self._send({                                                                                                     // 357\n        msg: 'sub',                                                                                                    // 358\n        id: id,                                                                                                        // 359\n        name: sub.name,                                                                                                // 360\n        params: sub.params                                                                                             // 361\n      });                                                                                                              // 357\n    });                                                                                                                // 363\n  };                                                                                                                   // 364\n                                                                                                                       //\n  var onDisconnect = function () {                                                                                     // 366\n    if (self._heartbeat) {                                                                                             // 367\n      self._heartbeat.stop();                                                                                          // 368\n                                                                                                                       //\n      self._heartbeat = null;                                                                                          // 369\n    }                                                                                                                  // 370\n  };                                                                                                                   // 371\n                                                                                                                       //\n  if (Meteor.isServer) {                                                                                               // 373\n    self._stream.on('message', Meteor.bindEnvironment(onMessage, \"handling DDP message\"));                             // 374\n                                                                                                                       //\n    self._stream.on('reset', Meteor.bindEnvironment(onReset, \"handling DDP reset\"));                                   // 375\n                                                                                                                       //\n    self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, \"handling DDP disconnect\"));                    // 376\n  } else {                                                                                                             // 377\n    self._stream.on('message', onMessage);                                                                             // 378\n                                                                                                                       //\n    self._stream.on('reset', onReset);                                                                                 // 379\n                                                                                                                       //\n    self._stream.on('disconnect', onDisconnect);                                                                       // 380\n  }                                                                                                                    // 381\n}; // A MethodInvoker manages sending a method to the server and calling the user's                                    // 382\n// callbacks. On construction, it registers itself in the connection's                                                 // 385\n// _methodInvokers map; it removes itself once the method is fully finished and                                        // 386\n// the callback is invoked. This occurs when it has both received a result,                                            // 387\n// and the data written by it is fully visible.                                                                        // 388\n                                                                                                                       //\n                                                                                                                       //\nvar MethodInvoker = function (options) {                                                                               // 389\n  var self = this; // Public (within this file) fields.                                                                // 390\n                                                                                                                       //\n  self.methodId = options.methodId;                                                                                    // 393\n  self.sentMessage = false;                                                                                            // 394\n  self._callback = options.callback;                                                                                   // 396\n  self._connection = options.connection;                                                                               // 397\n  self._message = options.message;                                                                                     // 398\n                                                                                                                       //\n  self._onResultReceived = options.onResultReceived || function () {};                                                 // 399\n                                                                                                                       //\n  self._wait = options.wait;                                                                                           // 400\n  self.noRetry = options.noRetry;                                                                                      // 401\n  self._methodResult = null;                                                                                           // 402\n  self._dataVisible = false; // Register with the connection.                                                          // 403\n                                                                                                                       //\n  self._connection._methodInvokers[self.methodId] = self;                                                              // 406\n};                                                                                                                     // 407\n                                                                                                                       //\n_.extend(MethodInvoker.prototype, {                                                                                    // 408\n  // Sends the method message to the server. May be called additional times if                                         // 409\n  // we lose the connection and reconnect before receiving a result.                                                   // 410\n  sendMessage: function () {                                                                                           // 411\n    var self = this; // This function is called before sending a method (including resending on                        // 412\n    // reconnect). We should only (re)send methods where we don't already have a                                       // 414\n    // result!                                                                                                         // 415\n                                                                                                                       //\n    if (self.gotResult()) throw new Error(\"sendingMethod is called on method with result\"); // If we're re-sending it, it doesn't matter if data was written the first\n    // time.                                                                                                           // 421\n                                                                                                                       //\n    self._dataVisible = false;                                                                                         // 422\n    self.sentMessage = true; // If this is a wait method, make all data messages be buffered until it is               // 423\n    // done.                                                                                                           // 426\n                                                                                                                       //\n    if (self._wait) self._connection._methodsBlockingQuiescence[self.methodId] = true; // Actually send the message.   // 427\n                                                                                                                       //\n    self._connection._send(self._message);                                                                             // 431\n  },                                                                                                                   // 432\n  // Invoke the callback, if we have both a result and know that all data has                                          // 433\n  // been written to the local cache.                                                                                  // 434\n  _maybeInvokeCallback: function () {                                                                                  // 435\n    var self = this;                                                                                                   // 436\n                                                                                                                       //\n    if (self._methodResult && self._dataVisible) {                                                                     // 437\n      // Call the callback. (This won't throw: the callback was wrapped with                                           // 438\n      // bindEnvironment.)                                                                                             // 439\n      self._callback(self._methodResult[0], self._methodResult[1]); // Forget about this method.                       // 440\n                                                                                                                       //\n                                                                                                                       //\n      delete self._connection._methodInvokers[self.methodId]; // Let the connection know that this method is finished, so it can try to\n      // move on to the next block of methods.                                                                         // 446\n                                                                                                                       //\n      self._connection._outstandingMethodFinished();                                                                   // 447\n    }                                                                                                                  // 448\n  },                                                                                                                   // 449\n  // Call with the result of the method from the server. Only may be called                                            // 450\n  // once; once it is called, you should not call sendMessage again.                                                   // 451\n  // If the user provided an onResultReceived callback, call it immediately.                                           // 452\n  // Then invoke the main callback if data is also visible.                                                            // 453\n  receiveResult: function (err, result) {                                                                              // 454\n    var self = this;                                                                                                   // 455\n    if (self.gotResult()) throw new Error(\"Methods should only receive results once\");                                 // 456\n    self._methodResult = [err, result];                                                                                // 458\n                                                                                                                       //\n    self._onResultReceived(err, result);                                                                               // 459\n                                                                                                                       //\n    self._maybeInvokeCallback();                                                                                       // 460\n  },                                                                                                                   // 461\n  // Call this when all data written by the method is visible. This means that                                         // 462\n  // the method has returns its \"data is done\" message *AND* all server                                                // 463\n  // documents that are buffered at that time have been written to the local                                           // 464\n  // cache. Invokes the main callback if the result has been received.                                                 // 465\n  dataVisible: function () {                                                                                           // 466\n    var self = this;                                                                                                   // 467\n    self._dataVisible = true;                                                                                          // 468\n                                                                                                                       //\n    self._maybeInvokeCallback();                                                                                       // 469\n  },                                                                                                                   // 470\n  // True if receiveResult has been called.                                                                            // 471\n  gotResult: function () {                                                                                             // 472\n    var self = this;                                                                                                   // 473\n    return !!self._methodResult;                                                                                       // 474\n  }                                                                                                                    // 475\n});                                                                                                                    // 408\n                                                                                                                       //\n_.extend(Connection.prototype, {                                                                                       // 478\n  // 'name' is the name of the data on the wire that should go in the                                                  // 479\n  // store. 'wrappedStore' should be an object with methods beginUpdate, update,                                       // 480\n  // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.                                       // 481\n  registerStore: function (name, wrappedStore) {                                                                       // 482\n    var self = this;                                                                                                   // 483\n    if (name in self._stores) return false; // Wrap the input object in an object which makes any store method not     // 485\n    // implemented by 'store' into a no-op.                                                                            // 489\n                                                                                                                       //\n    var store = {};                                                                                                    // 490\n                                                                                                                       //\n    _.each(['update', 'beginUpdate', 'endUpdate', 'saveOriginals', 'retrieveOriginals', 'getDoc', '_getCollection'], function (method) {\n      store[method] = function () {                                                                                    // 494\n        return wrappedStore[method] ? wrappedStore[method].apply(wrappedStore, arguments) : undefined;                 // 495\n      };                                                                                                               // 498\n    });                                                                                                                // 499\n                                                                                                                       //\n    self._stores[name] = store;                                                                                        // 501\n    var queued = self._updatesForUnknownStores[name];                                                                  // 503\n                                                                                                                       //\n    if (queued) {                                                                                                      // 504\n      store.beginUpdate(queued.length, false);                                                                         // 505\n                                                                                                                       //\n      _.each(queued, function (msg) {                                                                                  // 506\n        store.update(msg);                                                                                             // 507\n      });                                                                                                              // 508\n                                                                                                                       //\n      store.endUpdate();                                                                                               // 509\n      delete self._updatesForUnknownStores[name];                                                                      // 510\n    }                                                                                                                  // 511\n                                                                                                                       //\n    return true;                                                                                                       // 513\n  },                                                                                                                   // 514\n  /**                                                                                                                  // 516\n   * @memberOf Meteor                                                                                                  //\n   * @importFromPackage meteor                                                                                         //\n   * @summary Subscribe to a record set.  Returns a handle that provides                                               //\n   * `stop()` and `ready()` methods.                                                                                   //\n   * @locus Client                                                                                                     //\n   * @param {String} name Name of the subscription.  Matches the name of the                                           //\n   * server's `publish()` call.                                                                                        //\n   * @param {EJSONable} [arg1,arg2...] Optional arguments passed to publisher                                          //\n   * function on server.                                                                                               //\n   * @param {Function|Object} [callbacks] Optional. May include `onStop`                                               //\n   * and `onReady` callbacks. If there is an error, it is passed as an                                                 //\n   * argument to `onStop`. If a function is passed instead of an object, it                                            //\n   * is interpreted as an `onReady` callback.                                                                          //\n   */subscribe: function (name /* .. [arguments] .. (callback|callbacks) */) {                                         //\n    var self = this;                                                                                                   // 532\n    var params = Array.prototype.slice.call(arguments, 1);                                                             // 534\n    var callbacks = {};                                                                                                // 535\n                                                                                                                       //\n    if (params.length) {                                                                                               // 536\n      var lastParam = params[params.length - 1];                                                                       // 537\n                                                                                                                       //\n      if (_.isFunction(lastParam)) {                                                                                   // 538\n        callbacks.onReady = params.pop();                                                                              // 539\n      } else if (lastParam && // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use                         // 540\n      // onStop with an error callback instead.                                                                        // 542\n      _.any([lastParam.onReady, lastParam.onError, lastParam.onStop], _.isFunction)) {                                 // 543\n        callbacks = params.pop();                                                                                      // 545\n      }                                                                                                                // 546\n    } // Is there an existing sub with the same name and param, run in an                                              // 547\n    // invalidated Computation? This will happen if we are rerunning an                                                // 550\n    // existing computation.                                                                                           // 551\n    //                                                                                                                 // 552\n    // For example, consider a rerun of:                                                                               // 553\n    //                                                                                                                 // 554\n    //     Tracker.autorun(function () {                                                                               // 555\n    //       Meteor.subscribe(\"foo\", Session.get(\"foo\"));                                                              // 556\n    //       Meteor.subscribe(\"bar\", Session.get(\"bar\"));                                                              // 557\n    //     });                                                                                                         // 558\n    //                                                                                                                 // 559\n    // If \"foo\" has changed but \"bar\" has not, we will match the \"bar\"                                                 // 560\n    // subcribe to an existing inactive subscription in order to not                                                   // 561\n    // unsub and resub the subscription unnecessarily.                                                                 // 562\n    //                                                                                                                 // 563\n    // We only look for one such sub; if there are N apparently-identical subs                                         // 564\n    // being invalidated, we will require N matching subscribe calls to keep                                           // 565\n    // them all active.                                                                                                // 566\n                                                                                                                       //\n                                                                                                                       //\n    var existing = _.find(self._subscriptions, function (sub) {                                                        // 567\n      return sub.inactive && sub.name === name && EJSON.equals(sub.params, params);                                    // 568\n    });                                                                                                                // 570\n                                                                                                                       //\n    var id;                                                                                                            // 572\n                                                                                                                       //\n    if (existing) {                                                                                                    // 573\n      id = existing.id;                                                                                                // 574\n      existing.inactive = false; // reactivate                                                                         // 575\n                                                                                                                       //\n      if (callbacks.onReady) {                                                                                         // 577\n        // If the sub is not already ready, replace any ready callback with the                                        // 578\n        // one provided now. (It's not really clear what users would expect for                                        // 579\n        // an onReady callback inside an autorun; the semantics we provide is                                          // 580\n        // that at the time the sub first becomes ready, we call the last                                              // 581\n        // onReady callback provided, if any.)                                                                         // 582\n        // If the sub is already ready, run the ready callback right away.                                             // 583\n        // It seems that users would expect an onReady callback inside an                                              // 584\n        // autorun to trigger once the the sub first becomes ready and also                                            // 585\n        // when re-subs happens.                                                                                       // 586\n        if (existing.ready) {                                                                                          // 587\n          callbacks.onReady();                                                                                         // 588\n        } else {                                                                                                       // 589\n          existing.readyCallback = callbacks.onReady;                                                                  // 590\n        }                                                                                                              // 591\n      } // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call                                             // 592\n      // onStop with an optional error argument                                                                        // 595\n                                                                                                                       //\n                                                                                                                       //\n      if (callbacks.onError) {                                                                                         // 596\n        // Replace existing callback if any, so that errors aren't                                                     // 597\n        // double-reported.                                                                                            // 598\n        existing.errorCallback = callbacks.onError;                                                                    // 599\n      }                                                                                                                // 600\n                                                                                                                       //\n      if (callbacks.onStop) {                                                                                          // 602\n        existing.stopCallback = callbacks.onStop;                                                                      // 603\n      }                                                                                                                // 604\n    } else {                                                                                                           // 605\n      // New sub! Generate an id, save it locally, and send message.                                                   // 606\n      id = Random.id();                                                                                                // 607\n      self._subscriptions[id] = {                                                                                      // 608\n        id: id,                                                                                                        // 609\n        name: name,                                                                                                    // 610\n        params: EJSON.clone(params),                                                                                   // 611\n        inactive: false,                                                                                               // 612\n        ready: false,                                                                                                  // 613\n        readyDeps: new Tracker.Dependency(),                                                                           // 614\n        readyCallback: callbacks.onReady,                                                                              // 615\n        // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                      // 616\n        errorCallback: callbacks.onError,                                                                              // 617\n        stopCallback: callbacks.onStop,                                                                                // 618\n        connection: self,                                                                                              // 619\n        remove: function () {                                                                                          // 620\n          delete this.connection._subscriptions[this.id];                                                              // 621\n          this.ready && this.readyDeps.changed();                                                                      // 622\n        },                                                                                                             // 623\n        stop: function () {                                                                                            // 624\n          this.connection._send({                                                                                      // 625\n            msg: 'unsub',                                                                                              // 625\n            id: id                                                                                                     // 625\n          });                                                                                                          // 625\n                                                                                                                       //\n          this.remove();                                                                                               // 626\n                                                                                                                       //\n          if (callbacks.onStop) {                                                                                      // 628\n            callbacks.onStop();                                                                                        // 629\n          }                                                                                                            // 630\n        }                                                                                                              // 631\n      };                                                                                                               // 608\n                                                                                                                       //\n      self._send({                                                                                                     // 633\n        msg: 'sub',                                                                                                    // 633\n        id: id,                                                                                                        // 633\n        name: name,                                                                                                    // 633\n        params: params                                                                                                 // 633\n      });                                                                                                              // 633\n    } // return a handle to the application.                                                                           // 634\n                                                                                                                       //\n                                                                                                                       //\n    var handle = {                                                                                                     // 637\n      stop: function () {                                                                                              // 638\n        if (!_.has(self._subscriptions, id)) return;                                                                   // 639\n                                                                                                                       //\n        self._subscriptions[id].stop();                                                                                // 642\n      },                                                                                                               // 643\n      ready: function () {                                                                                             // 644\n        // return false if we've unsubscribed.                                                                         // 645\n        if (!_.has(self._subscriptions, id)) return false;                                                             // 646\n        var record = self._subscriptions[id];                                                                          // 648\n        record.readyDeps.depend();                                                                                     // 649\n        return record.ready;                                                                                           // 650\n      },                                                                                                               // 651\n      subscriptionId: id                                                                                               // 652\n    };                                                                                                                 // 637\n                                                                                                                       //\n    if (Tracker.active) {                                                                                              // 655\n      // We're in a reactive computation, so we'd like to unsubscribe when the                                         // 656\n      // computation is invalidated... but not if the rerun just re-subscribes                                         // 657\n      // to the same subscription!  When a rerun happens, we use onInvalidate                                          // 658\n      // as a change to mark the subscription \"inactive\" so that it can                                                // 659\n      // be reused from the rerun.  If it isn't reused, it's killed from                                               // 660\n      // an afterFlush.                                                                                                // 661\n      Tracker.onInvalidate(function (c) {                                                                              // 662\n        if (_.has(self._subscriptions, id)) self._subscriptions[id].inactive = true;                                   // 663\n        Tracker.afterFlush(function () {                                                                               // 666\n          if (_.has(self._subscriptions, id) && self._subscriptions[id].inactive) handle.stop();                       // 667\n        });                                                                                                            // 670\n      });                                                                                                              // 671\n    }                                                                                                                  // 672\n                                                                                                                       //\n    return handle;                                                                                                     // 674\n  },                                                                                                                   // 675\n  // options:                                                                                                          // 677\n  // - onLateError {Function(error)} called if an error was received after the ready event.                            // 678\n  //     (errors received before ready cause an error to be thrown)                                                    // 679\n  _subscribeAndWait: function (name, args, options) {                                                                  // 680\n    var self = this;                                                                                                   // 681\n    var f = new Future();                                                                                              // 682\n    var ready = false;                                                                                                 // 683\n    var handle;                                                                                                        // 684\n    args = args || [];                                                                                                 // 685\n    args.push({                                                                                                        // 686\n      onReady: function () {                                                                                           // 687\n        ready = true;                                                                                                  // 688\n        f['return']();                                                                                                 // 689\n      },                                                                                                               // 690\n      onError: function (e) {                                                                                          // 691\n        if (!ready) f['throw'](e);else options && options.onLateError && options.onLateError(e);                       // 692\n      }                                                                                                                // 696\n    });                                                                                                                // 686\n    handle = self.subscribe.apply(self, [name].concat(args));                                                          // 699\n    f.wait();                                                                                                          // 700\n    return handle;                                                                                                     // 701\n  },                                                                                                                   // 702\n  methods: function (methods) {                                                                                        // 704\n    var self = this;                                                                                                   // 705\n                                                                                                                       //\n    _.each(methods, function (func, name) {                                                                            // 706\n      if (typeof func !== 'function') throw new Error(\"Method '\" + name + \"' must be a function\");                     // 707\n      if (self._methodHandlers[name]) throw new Error(\"A method named '\" + name + \"' is already defined\");             // 709\n      self._methodHandlers[name] = func;                                                                               // 711\n    });                                                                                                                // 712\n  },                                                                                                                   // 713\n  /**                                                                                                                  // 715\n   * @memberOf Meteor                                                                                                  //\n   * @importFromPackage meteor                                                                                         //\n   * @summary Invokes a method passing any number of arguments.                                                        //\n   * @locus Anywhere                                                                                                   //\n   * @param {String} name Name of method to invoke                                                                     //\n   * @param {EJSONable} [arg1,arg2...] Optional method arguments                                                       //\n   * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).\n   */call: function (name /* .. [arguments] .. callback */) {                                                          //\n    // if it's a function, the last argument is the result callback,                                                   // 725\n    // not a parameter to the remote method.                                                                           // 726\n    var args = Array.prototype.slice.call(arguments, 1);                                                               // 727\n    if (args.length && typeof args[args.length - 1] === \"function\") var callback = args.pop();                         // 728\n    return this.apply(name, args, callback);                                                                           // 730\n  },                                                                                                                   // 731\n  // @param options {Optional Object}                                                                                  // 733\n  //   wait: Boolean - Should we wait to call this until all current methods                                           // 734\n  //                   are fully finished, and block subsequent method calls                                           // 735\n  //                   until this method is fully finished?                                                            // 736\n  //                   (does not affect methods called from within this method)                                        // 737\n  //   onResultReceived: Function - a callback to call as soon as the method                                           // 738\n  //                                result is received. the data written by                                            // 739\n  //                                the method may not yet be in the cache!                                            // 740\n  //   returnStubValue: Boolean - If true then in cases where we would have                                            // 741\n  //                              otherwise discarded the stub's return value                                          // 742\n  //                              and returned undefined, instead we go ahead                                          // 743\n  //                              and return it.  Specifically, this is any                                            // 744\n  //                              time other than when (a) we are already                                              // 745\n  //                              inside a stub or (b) we are in Node and no                                           // 746\n  //                              callback was provided.  Currently we require                                         // 747\n  //                              this flag to be explicitly passed to reduce                                          // 748\n  //                              the likelihood that stub return values will                                          // 749\n  //                              be confused with server return values; we                                            // 750\n  //                              may improve this in future.                                                          // 751\n  // @param callback {Optional Function}                                                                               // 752\n  /**                                                                                                                  // 754\n   * @memberOf Meteor                                                                                                  //\n   * @importFromPackage meteor                                                                                         //\n   * @summary Invoke a method passing an array of arguments.                                                           //\n   * @locus Anywhere                                                                                                   //\n   * @param {String} name Name of method to invoke                                                                     //\n   * @param {EJSONable[]} args Method arguments                                                                        //\n   * @param {Object} [options]                                                                                         //\n   * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.\n   * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.\n   * @param {Boolean} options.noRetry (Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.\n   * @param {Boolean} options.throwStubExceptions (Client only) If true, exceptions thrown by method stubs will be thrown instead of logged, and the method will not be invoked on the server.\n   * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).          //\n   */apply: function (name, args, options, callback) {                                                                 //\n    var self = this; // We were passed 3 arguments. They may be either (name, args, options)                           // 769\n    // or (name, args, callback)                                                                                       // 772\n                                                                                                                       //\n    if (!callback && typeof options === 'function') {                                                                  // 773\n      callback = options;                                                                                              // 774\n      options = {};                                                                                                    // 775\n    }                                                                                                                  // 776\n                                                                                                                       //\n    options = options || {};                                                                                           // 777\n                                                                                                                       //\n    if (callback) {                                                                                                    // 779\n      // XXX would it be better form to do the binding in stream.on,                                                   // 780\n      // or caller, instead of here?                                                                                   // 781\n      // XXX improve error message (and how we report it)                                                              // 782\n      callback = Meteor.bindEnvironment(callback, \"delivering result of invoking '\" + name + \"'\");                     // 783\n    } // Keep our args safe from mutation (eg if we don't send the message for a                                       // 787\n    // while because of a wait method).                                                                                // 790\n                                                                                                                       //\n                                                                                                                       //\n    args = EJSON.clone(args); // Lazily allocate method ID once we know that it'll be needed.                          // 791\n                                                                                                                       //\n    var methodId = function () {                                                                                       // 794\n      var id;                                                                                                          // 795\n      return function () {                                                                                             // 796\n        if (id === undefined) id = '' + self._nextMethodId++;                                                          // 797\n        return id;                                                                                                     // 799\n      };                                                                                                               // 800\n    }();                                                                                                               // 801\n                                                                                                                       //\n    var enclosing = DDP._CurrentMethodInvocation.get();                                                                // 803\n                                                                                                                       //\n    var alreadyInSimulation = enclosing && enclosing.isSimulation; // Lazily generate a randomSeed, only if it is requested by the stub.\n    // The random streams only have utility if they're used on both the client                                         // 807\n    // and the server; if the client doesn't generate any 'random' values                                              // 808\n    // then we don't expect the server to generate any either.                                                         // 809\n    // Less commonly, the server may perform different actions from the client,                                        // 810\n    // and may in fact generate values where the client did not, but we don't                                          // 811\n    // have any client-side values to match, so even here we may as well just                                          // 812\n    // use a random seed on the server.  In that case, we don't pass the                                               // 813\n    // randomSeed to save bandwidth, and we don't even generate it to save a                                           // 814\n    // bit of CPU and to avoid consuming entropy.                                                                      // 815\n                                                                                                                       //\n    var randomSeed = null;                                                                                             // 816\n                                                                                                                       //\n    var randomSeedGenerator = function () {                                                                            // 817\n      if (randomSeed === null) {                                                                                       // 818\n        randomSeed = DDPCommon.makeRpcSeed(enclosing, name);                                                           // 819\n      }                                                                                                                // 820\n                                                                                                                       //\n      return randomSeed;                                                                                               // 821\n    }; // Run the stub, if we have one. The stub is supposed to make some                                              // 822\n    // temporary writes to the database to give the user a smooth experience                                           // 825\n    // until the actual result of executing the method comes back from the                                             // 826\n    // server (whereupon the temporary writes to the database will be reversed                                         // 827\n    // during the beginUpdate/endUpdate process.)                                                                      // 828\n    //                                                                                                                 // 829\n    // Normally, we ignore the return value of the stub (even if it is an                                              // 830\n    // exception), in favor of the real return value from the server. The                                              // 831\n    // exception is if the *caller* is a stub. In that case, we're not going                                           // 832\n    // to do a RPC, so we use the return value of the stub as our return                                               // 833\n    // value.                                                                                                          // 834\n                                                                                                                       //\n                                                                                                                       //\n    var stub = self._methodHandlers[name];                                                                             // 836\n                                                                                                                       //\n    if (stub) {                                                                                                        // 837\n      var setUserId = function (userId) {                                                                              // 838\n        self.setUserId(userId);                                                                                        // 839\n      };                                                                                                               // 840\n                                                                                                                       //\n      var invocation = new DDPCommon.MethodInvocation({                                                                // 842\n        isSimulation: true,                                                                                            // 843\n        userId: self.userId(),                                                                                         // 844\n        setUserId: setUserId,                                                                                          // 845\n        randomSeed: function () {                                                                                      // 846\n          return randomSeedGenerator();                                                                                // 846\n        }                                                                                                              // 846\n      });                                                                                                              // 842\n      if (!alreadyInSimulation) self._saveOriginals();                                                                 // 849\n                                                                                                                       //\n      try {                                                                                                            // 852\n        // Note that unlike in the corresponding server code, we never audit                                           // 853\n        // that stubs check() their arguments.                                                                         // 854\n        var stubReturnValue = DDP._CurrentMethodInvocation.withValue(invocation, function () {                         // 855\n          if (Meteor.isServer) {                                                                                       // 856\n            // Because saveOriginals and retrieveOriginals aren't reentrant,                                           // 857\n            // don't allow stubs to yield.                                                                             // 858\n            return Meteor._noYieldsAllowed(function () {                                                               // 859\n              // re-clone, so that the stub can't affect our caller's values                                           // 860\n              return stub.apply(invocation, EJSON.clone(args));                                                        // 861\n            });                                                                                                        // 862\n          } else {                                                                                                     // 863\n            return stub.apply(invocation, EJSON.clone(args));                                                          // 864\n          }                                                                                                            // 865\n        });                                                                                                            // 866\n      } catch (e) {                                                                                                    // 867\n        var exception = e;                                                                                             // 869\n      }                                                                                                                // 870\n                                                                                                                       //\n      if (!alreadyInSimulation) self._retrieveAndStoreOriginals(methodId());                                           // 872\n    } // If we're in a simulation, stop and return the result we have,                                                 // 874\n    // rather than going on to do an RPC. If there was no stub,                                                        // 877\n    // we'll end up returning undefined.                                                                               // 878\n                                                                                                                       //\n                                                                                                                       //\n    if (alreadyInSimulation) {                                                                                         // 879\n      if (callback) {                                                                                                  // 880\n        callback(exception, stubReturnValue);                                                                          // 881\n        return undefined;                                                                                              // 882\n      }                                                                                                                // 883\n                                                                                                                       //\n      if (exception) throw exception;                                                                                  // 884\n      return stubReturnValue;                                                                                          // 886\n    } // If an exception occurred in a stub, and we're ignoring it                                                     // 887\n    // because we're doing an RPC and want to use what the server                                                      // 890\n    // returns instead, log it so the developer knows                                                                  // 891\n    // (unless they explicitly ask to see the error).                                                                  // 892\n    //                                                                                                                 // 893\n    // Tests can set the 'expected' flag on an exception so it won't                                                   // 894\n    // go to log.                                                                                                      // 895\n                                                                                                                       //\n                                                                                                                       //\n    if (exception) {                                                                                                   // 896\n      if (options.throwStubExceptions) {                                                                               // 897\n        throw exception;                                                                                               // 898\n      } else if (!exception.expected) {                                                                                // 899\n        Meteor._debug(\"Exception while simulating the effect of invoking '\" + name + \"'\", exception, exception.stack);\n      }                                                                                                                // 902\n    } // At this point we're definitely doing an RPC, and we're going to                                               // 903\n    // return the value of the RPC to the caller.                                                                      // 907\n    // If the caller didn't give a callback, decide what to do.                                                        // 909\n                                                                                                                       //\n                                                                                                                       //\n    if (!callback) {                                                                                                   // 910\n      if (Meteor.isClient) {                                                                                           // 911\n        // On the client, we don't have fibers, so we can't block. The                                                 // 912\n        // only thing we can do is to return undefined and discard the                                                 // 913\n        // result of the RPC. If an error occurred then print the error                                                // 914\n        // to the console.                                                                                             // 915\n        callback = function (err) {                                                                                    // 916\n          err && Meteor._debug(\"Error invoking Method '\" + name + \"':\", err.message);                                  // 917\n        };                                                                                                             // 919\n      } else {                                                                                                         // 920\n        // On the server, make the function synchronous. Throw on                                                      // 921\n        // errors, return on success.                                                                                  // 922\n        var future = new Future();                                                                                     // 923\n        callback = future.resolver();                                                                                  // 924\n      }                                                                                                                // 925\n    } // Send the RPC. Note that on the client, it is important that the                                               // 926\n    // stub have finished before we send the RPC, so that we know we have                                              // 928\n    // a complete list of which local documents the stub wrote.                                                        // 929\n                                                                                                                       //\n                                                                                                                       //\n    var message = {                                                                                                    // 930\n      msg: 'method',                                                                                                   // 931\n      method: name,                                                                                                    // 932\n      params: args,                                                                                                    // 933\n      id: methodId()                                                                                                   // 934\n    }; // Send the randomSeed only if we used it                                                                       // 930\n                                                                                                                       //\n    if (randomSeed !== null) {                                                                                         // 938\n      message.randomSeed = randomSeed;                                                                                 // 939\n    }                                                                                                                  // 940\n                                                                                                                       //\n    var methodInvoker = new MethodInvoker({                                                                            // 942\n      methodId: methodId(),                                                                                            // 943\n      callback: callback,                                                                                              // 944\n      connection: self,                                                                                                // 945\n      onResultReceived: options.onResultReceived,                                                                      // 946\n      wait: !!options.wait,                                                                                            // 947\n      message: message,                                                                                                // 948\n      noRetry: !!options.noRetry                                                                                       // 949\n    });                                                                                                                // 942\n                                                                                                                       //\n    if (options.wait) {                                                                                                // 952\n      // It's a wait method! Wait methods go in their own block.                                                       // 953\n      self._outstandingMethodBlocks.push({                                                                             // 954\n        wait: true,                                                                                                    // 955\n        methods: [methodInvoker]                                                                                       // 955\n      });                                                                                                              // 955\n    } else {                                                                                                           // 956\n      // Not a wait method. Start a new block if the previous block was a wait                                         // 957\n      // block, and add it to the last block of methods.                                                               // 958\n      if (_.isEmpty(self._outstandingMethodBlocks) || _.last(self._outstandingMethodBlocks).wait) self._outstandingMethodBlocks.push({\n        wait: false,                                                                                                   // 961\n        methods: []                                                                                                    // 961\n      });                                                                                                              // 961\n                                                                                                                       //\n      _.last(self._outstandingMethodBlocks).methods.push(methodInvoker);                                               // 962\n    } // If we added it to the first block, send it out now.                                                           // 963\n                                                                                                                       //\n                                                                                                                       //\n    if (self._outstandingMethodBlocks.length === 1) methodInvoker.sendMessage(); // If we're using the default callback on the server,\n    // block waiting for the result.                                                                                   // 970\n                                                                                                                       //\n    if (future) {                                                                                                      // 971\n      return future.wait();                                                                                            // 972\n    }                                                                                                                  // 973\n                                                                                                                       //\n    return options.returnStubValue ? stubReturnValue : undefined;                                                      // 974\n  },                                                                                                                   // 975\n  // Before calling a method stub, prepare all stores to track changes and allow                                       // 977\n  // _retrieveAndStoreOriginals to get the original versions of changed                                                // 978\n  // documents.                                                                                                        // 979\n  _saveOriginals: function () {                                                                                        // 980\n    var self = this;                                                                                                   // 981\n    if (!self._waitingForQuiescence()) self._flushBufferedWrites();                                                    // 982\n                                                                                                                       //\n    _.each(self._stores, function (s) {                                                                                // 984\n      s.saveOriginals();                                                                                               // 985\n    });                                                                                                                // 986\n  },                                                                                                                   // 987\n  // Retrieves the original versions of all documents modified by the stub for                                         // 988\n  // method 'methodId' from all stores and saves them to _serverDocuments (keyed                                       // 989\n  // by document) and _documentsWrittenByStub (keyed by method ID).                                                    // 990\n  _retrieveAndStoreOriginals: function (methodId) {                                                                    // 991\n    var self = this;                                                                                                   // 992\n    if (self._documentsWrittenByStub[methodId]) throw new Error(\"Duplicate methodId in _retrieveAndStoreOriginals\");   // 993\n    var docsWritten = [];                                                                                              // 996\n                                                                                                                       //\n    _.each(self._stores, function (s, collection) {                                                                    // 997\n      var originals = s.retrieveOriginals(); // not all stores define retrieveOriginals                                // 998\n                                                                                                                       //\n      if (!originals) return;                                                                                          // 1000\n      originals.forEach(function (doc, id) {                                                                           // 1002\n        docsWritten.push({                                                                                             // 1003\n          collection: collection,                                                                                      // 1003\n          id: id                                                                                                       // 1003\n        });                                                                                                            // 1003\n        if (!_.has(self._serverDocuments, collection)) self._serverDocuments[collection] = new MongoIDMap();           // 1004\n                                                                                                                       //\n        var serverDoc = self._serverDocuments[collection].setDefault(id, {});                                          // 1006\n                                                                                                                       //\n        if (serverDoc.writtenByStubs) {                                                                                // 1007\n          // We're not the first stub to write this doc. Just add our method ID                                        // 1008\n          // to the record.                                                                                            // 1009\n          serverDoc.writtenByStubs[methodId] = true;                                                                   // 1010\n        } else {                                                                                                       // 1011\n          // First stub! Save the original value and our method ID.                                                    // 1012\n          serverDoc.document = doc;                                                                                    // 1013\n          serverDoc.flushCallbacks = [];                                                                               // 1014\n          serverDoc.writtenByStubs = {};                                                                               // 1015\n          serverDoc.writtenByStubs[methodId] = true;                                                                   // 1016\n        }                                                                                                              // 1017\n      });                                                                                                              // 1018\n    });                                                                                                                // 1019\n                                                                                                                       //\n    if (!_.isEmpty(docsWritten)) {                                                                                     // 1020\n      self._documentsWrittenByStub[methodId] = docsWritten;                                                            // 1021\n    }                                                                                                                  // 1022\n  },                                                                                                                   // 1023\n  // This is very much a private function we use to make the tests                                                     // 1025\n  // take up fewer server resources after they complete.                                                               // 1026\n  _unsubscribeAll: function () {                                                                                       // 1027\n    var self = this;                                                                                                   // 1028\n                                                                                                                       //\n    _.each(_.clone(self._subscriptions), function (sub, id) {                                                          // 1029\n      // Avoid killing the autoupdate subscription so that developers                                                  // 1030\n      // still get hot code pushes when writing tests.                                                                 // 1031\n      //                                                                                                               // 1032\n      // XXX it's a hack to encode knowledge about autoupdate here,                                                    // 1033\n      // but it doesn't seem worth it yet to have a special API for                                                    // 1034\n      // subscriptions to preserve after unit tests.                                                                   // 1035\n      if (sub.name !== 'meteor_autoupdate_clientVersions') {                                                           // 1036\n        self._subscriptions[id].stop();                                                                                // 1037\n      }                                                                                                                // 1038\n    });                                                                                                                // 1039\n  },                                                                                                                   // 1040\n  // Sends the DDP stringification of the given message object                                                         // 1042\n  _send: function (obj) {                                                                                              // 1043\n    var self = this;                                                                                                   // 1044\n                                                                                                                       //\n    self._stream.send(DDPCommon.stringifyDDP(obj));                                                                    // 1045\n  },                                                                                                                   // 1046\n  // We detected via DDP-level heartbeats that we've lost the                                                          // 1048\n  // connection.  Unlike `disconnect` or `close`, a lost connection                                                    // 1049\n  // will be automatically retried.                                                                                    // 1050\n  _lostConnection: function (error) {                                                                                  // 1051\n    var self = this;                                                                                                   // 1052\n                                                                                                                       //\n    self._stream._lostConnection(error);                                                                               // 1053\n  },                                                                                                                   // 1054\n  /**                                                                                                                  // 1056\n   * @summary Get the current connection status. A reactive data source.                                               //\n   * @locus Client                                                                                                     //\n   * @memberOf Meteor                                                                                                  //\n   * @importFromPackage meteor                                                                                         //\n   */status: function () /*passthrough args*/{                                                                         //\n    var self = this;                                                                                                   // 1063\n    return self._stream.status.apply(self._stream, arguments);                                                         // 1064\n  },                                                                                                                   // 1065\n  /**                                                                                                                  // 1067\n   * @summary Force an immediate reconnection attempt if the client is not connected to the server.                    //\n   This method does nothing if the client is already connected.                                                        //\n   * @locus Client                                                                                                     //\n   * @memberOf Meteor                                                                                                  //\n   * @importFromPackage meteor                                                                                         //\n   */reconnect: function () /*passthrough args*/{                                                                      //\n    var self = this;                                                                                                   // 1076\n    return self._stream.reconnect.apply(self._stream, arguments);                                                      // 1077\n  },                                                                                                                   // 1078\n  /**                                                                                                                  // 1080\n   * @summary Disconnect the client from the server.                                                                   //\n   * @locus Client                                                                                                     //\n   * @memberOf Meteor                                                                                                  //\n   * @importFromPackage meteor                                                                                         //\n   */disconnect: function () /*passthrough args*/{                                                                     //\n    var self = this;                                                                                                   // 1087\n    return self._stream.disconnect.apply(self._stream, arguments);                                                     // 1088\n  },                                                                                                                   // 1089\n  close: function () {                                                                                                 // 1091\n    var self = this;                                                                                                   // 1092\n    return self._stream.disconnect({                                                                                   // 1093\n      _permanent: true                                                                                                 // 1093\n    });                                                                                                                // 1093\n  },                                                                                                                   // 1094\n  ///                                                                                                                  // 1096\n  /// Reactive user system                                                                                             // 1097\n  ///                                                                                                                  // 1098\n  userId: function () {                                                                                                // 1099\n    var self = this;                                                                                                   // 1100\n    if (self._userIdDeps) self._userIdDeps.depend();                                                                   // 1101\n    return self._userId;                                                                                               // 1103\n  },                                                                                                                   // 1104\n  setUserId: function (userId) {                                                                                       // 1106\n    var self = this; // Avoid invalidating dependents if setUserId is called with current value.                       // 1107\n                                                                                                                       //\n    if (self._userId === userId) return;                                                                               // 1109\n    self._userId = userId;                                                                                             // 1111\n    if (self._userIdDeps) self._userIdDeps.changed();                                                                  // 1112\n  },                                                                                                                   // 1114\n  // Returns true if we are in a state after reconnect of waiting for subs to be                                       // 1116\n  // revived or early methods to finish their data, or we are waiting for a                                            // 1117\n  // \"wait\" method to finish.                                                                                          // 1118\n  _waitingForQuiescence: function () {                                                                                 // 1119\n    var self = this;                                                                                                   // 1120\n    return !_.isEmpty(self._subsBeingRevived) || !_.isEmpty(self._methodsBlockingQuiescence);                          // 1121\n  },                                                                                                                   // 1123\n  // Returns true if any method whose message has been sent to the server has                                          // 1125\n  // not yet invoked its user callback.                                                                                // 1126\n  _anyMethodsAreOutstanding: function () {                                                                             // 1127\n    var self = this;                                                                                                   // 1128\n    return _.any(_.pluck(self._methodInvokers, 'sentMessage'));                                                        // 1129\n  },                                                                                                                   // 1130\n  _livedata_connected: function (msg) {                                                                                // 1132\n    var self = this;                                                                                                   // 1133\n                                                                                                                       //\n    if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {                                                   // 1135\n      self._heartbeat = new DDPCommon.Heartbeat({                                                                      // 1136\n        heartbeatInterval: self._heartbeatInterval,                                                                    // 1137\n        heartbeatTimeout: self._heartbeatTimeout,                                                                      // 1138\n        onTimeout: function () {                                                                                       // 1139\n          self._lostConnection(new DDP.ConnectionError(\"DDP heartbeat timed out\"));                                    // 1140\n        },                                                                                                             // 1142\n        sendPing: function () {                                                                                        // 1143\n          self._send({                                                                                                 // 1144\n            msg: 'ping'                                                                                                // 1144\n          });                                                                                                          // 1144\n        }                                                                                                              // 1145\n      });                                                                                                              // 1136\n                                                                                                                       //\n      self._heartbeat.start();                                                                                         // 1147\n    } // If this is a reconnect, we'll have to reset all stores.                                                       // 1148\n                                                                                                                       //\n                                                                                                                       //\n    if (self._lastSessionId) self._resetStores = true;                                                                 // 1151\n                                                                                                                       //\n    if (typeof msg.session === \"string\") {                                                                             // 1154\n      var reconnectedToPreviousSession = self._lastSessionId === msg.session;                                          // 1155\n      self._lastSessionId = msg.session;                                                                               // 1156\n    }                                                                                                                  // 1157\n                                                                                                                       //\n    if (reconnectedToPreviousSession) {                                                                                // 1159\n      // Successful reconnection -- pick up where we left off.  Note that right                                        // 1160\n      // now, this never happens: the server never connects us to a previous                                           // 1161\n      // session, because DDP doesn't provide enough data for the server to know                                       // 1162\n      // what messages the client has processed. We need to improve DDP to make                                        // 1163\n      // this possible, at which point we'll probably need more code here.                                             // 1164\n      return;                                                                                                          // 1165\n    } // Server doesn't have our data any more. Re-sync a new session.                                                 // 1166\n    // Forget about messages we were buffering for unknown collections. They'll                                        // 1170\n    // be resent if still relevant.                                                                                    // 1171\n                                                                                                                       //\n                                                                                                                       //\n    self._updatesForUnknownStores = {};                                                                                // 1172\n                                                                                                                       //\n    if (self._resetStores) {                                                                                           // 1174\n      // Forget about the effects of stubs. We'll be resetting all collections                                         // 1175\n      // anyway.                                                                                                       // 1176\n      self._documentsWrittenByStub = {};                                                                               // 1177\n      self._serverDocuments = {};                                                                                      // 1178\n    } // Clear _afterUpdateCallbacks.                                                                                  // 1179\n                                                                                                                       //\n                                                                                                                       //\n    self._afterUpdateCallbacks = []; // Mark all named subscriptions which are ready (ie, we already called the        // 1182\n    // ready callback) as needing to be revived.                                                                       // 1185\n    // XXX We should also block reconnect quiescence until unnamed subscriptions                                       // 1186\n    //     (eg, autopublish) are done re-publishing to avoid flicker!                                                  // 1187\n                                                                                                                       //\n    self._subsBeingRevived = {};                                                                                       // 1188\n                                                                                                                       //\n    _.each(self._subscriptions, function (sub, id) {                                                                   // 1189\n      if (sub.ready) self._subsBeingRevived[id] = true;                                                                // 1190\n    }); // Arrange for \"half-finished\" methods to have their callbacks run, and                                        // 1192\n    // track methods that were sent on this connection so that we don't                                                // 1195\n    // quiesce until they are all done.                                                                                // 1196\n    //                                                                                                                 // 1197\n    // Start by clearing _methodsBlockingQuiescence: methods sent before                                               // 1198\n    // reconnect don't matter, and any \"wait\" methods sent on the new connection                                       // 1199\n    // that we drop here will be restored by the loop below.                                                           // 1200\n                                                                                                                       //\n                                                                                                                       //\n    self._methodsBlockingQuiescence = {};                                                                              // 1201\n                                                                                                                       //\n    if (self._resetStores) {                                                                                           // 1202\n      _.each(self._methodInvokers, function (invoker) {                                                                // 1203\n        if (invoker.gotResult()) {                                                                                     // 1204\n          // This method already got its result, but it didn't call its callback                                       // 1205\n          // because its data didn't become visible. We did not resend the                                             // 1206\n          // method RPC. We'll call its callback when we get a full quiesce,                                           // 1207\n          // since that's as close as we'll get to \"data must be visible\".                                             // 1208\n          self._afterUpdateCallbacks.push(_.bind(invoker.dataVisible, invoker));                                       // 1209\n        } else if (invoker.sentMessage) {                                                                              // 1210\n          // This method has been sent on this connection (maybe as a resend                                           // 1211\n          // from the last connection, maybe from onReconnect, maybe just very                                         // 1212\n          // quickly before processing the connected message).                                                         // 1213\n          //                                                                                                           // 1214\n          // We don't need to do anything special to ensure its callbacks get                                          // 1215\n          // called, but we'll count it as a method which is preventing                                                // 1216\n          // reconnect quiescence. (eg, it might be a login method that was run                                        // 1217\n          // from onReconnect, and we don't want to see flicker by seeing a                                            // 1218\n          // logged-out state.)                                                                                        // 1219\n          self._methodsBlockingQuiescence[invoker.methodId] = true;                                                    // 1220\n        }                                                                                                              // 1221\n      });                                                                                                              // 1222\n    }                                                                                                                  // 1223\n                                                                                                                       //\n    self._messagesBufferedUntilQuiescence = []; // If we're not waiting on any methods or subs, we can reset the stores and\n    // call the callbacks immediately.                                                                                 // 1228\n                                                                                                                       //\n    if (!self._waitingForQuiescence()) {                                                                               // 1229\n      if (self._resetStores) {                                                                                         // 1230\n        _.each(self._stores, function (s) {                                                                            // 1231\n          s.beginUpdate(0, true);                                                                                      // 1232\n          s.endUpdate();                                                                                               // 1233\n        });                                                                                                            // 1234\n                                                                                                                       //\n        self._resetStores = false;                                                                                     // 1235\n      }                                                                                                                // 1236\n                                                                                                                       //\n      self._runAfterUpdateCallbacks();                                                                                 // 1237\n    }                                                                                                                  // 1238\n  },                                                                                                                   // 1239\n  _processOneDataMessage: function (msg, updates) {                                                                    // 1242\n    var self = this; // Using underscore here so as not to need to capitalize.                                         // 1243\n                                                                                                                       //\n    self['_process_' + msg.msg](msg, updates);                                                                         // 1245\n  },                                                                                                                   // 1246\n  _livedata_data: function (msg) {                                                                                     // 1249\n    var self = this;                                                                                                   // 1250\n                                                                                                                       //\n    if (self._waitingForQuiescence()) {                                                                                // 1252\n      self._messagesBufferedUntilQuiescence.push(msg);                                                                 // 1253\n                                                                                                                       //\n      if (msg.msg === \"nosub\") delete self._subsBeingRevived[msg.id];                                                  // 1255\n                                                                                                                       //\n      _.each(msg.subs || [], function (subId) {                                                                        // 1258\n        delete self._subsBeingRevived[subId];                                                                          // 1259\n      });                                                                                                              // 1260\n                                                                                                                       //\n      _.each(msg.methods || [], function (methodId) {                                                                  // 1261\n        delete self._methodsBlockingQuiescence[methodId];                                                              // 1262\n      });                                                                                                              // 1263\n                                                                                                                       //\n      if (self._waitingForQuiescence()) return; // No methods or subs are blocking quiescence!                         // 1265\n      // We'll now process and all of our buffered messages, reset all stores,                                         // 1269\n      // and apply them all at once.                                                                                   // 1270\n                                                                                                                       //\n      _.each(self._messagesBufferedUntilQuiescence, function (bufferedMsg) {                                           // 1271\n        self._processOneDataMessage(bufferedMsg, self._bufferedWrites);                                                // 1272\n      });                                                                                                              // 1273\n                                                                                                                       //\n      self._messagesBufferedUntilQuiescence = [];                                                                      // 1274\n    } else {                                                                                                           // 1275\n      self._processOneDataMessage(msg, self._bufferedWrites);                                                          // 1276\n    } // Immediately flush writes when:                                                                                // 1277\n    //  1. Buffering is disabled. Or;                                                                                  // 1280\n    //  2. any non-(added/changed/removed) message arrives.                                                            // 1281\n                                                                                                                       //\n                                                                                                                       //\n    var standardWrite = _.include(['added', 'changed', 'removed'], msg.msg);                                           // 1282\n                                                                                                                       //\n    if (self._bufferedWritesInterval === 0 || !standardWrite) {                                                        // 1283\n      self._flushBufferedWrites();                                                                                     // 1284\n                                                                                                                       //\n      return;                                                                                                          // 1285\n    }                                                                                                                  // 1286\n                                                                                                                       //\n    if (self._bufferedWritesFlushAt === null) {                                                                        // 1288\n      self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge;                                 // 1289\n    } else if (self._bufferedWritesFlushAt < new Date().valueOf()) {                                                   // 1290\n      self._flushBufferedWrites();                                                                                     // 1292\n                                                                                                                       //\n      return;                                                                                                          // 1293\n    }                                                                                                                  // 1294\n                                                                                                                       //\n    if (self._bufferedWritesFlushHandle) {                                                                             // 1296\n      clearTimeout(self._bufferedWritesFlushHandle);                                                                   // 1297\n    }                                                                                                                  // 1298\n                                                                                                                       //\n    self._bufferedWritesFlushHandle = setTimeout(self.__flushBufferedWrites, self._bufferedWritesInterval);            // 1299\n  },                                                                                                                   // 1301\n  _flushBufferedWrites: function () {                                                                                  // 1303\n    var self = this;                                                                                                   // 1304\n                                                                                                                       //\n    if (self._bufferedWritesFlushHandle) {                                                                             // 1305\n      clearTimeout(self._bufferedWritesFlushHandle);                                                                   // 1306\n      self._bufferedWritesFlushHandle = null;                                                                          // 1307\n    }                                                                                                                  // 1308\n                                                                                                                       //\n    self._bufferedWritesFlushAt = null; // We need to clear the buffer before passing it to                            // 1310\n    //  performWrites. As there's no guarantee that it                                                                 // 1312\n    //  will exit cleanly.                                                                                             // 1313\n                                                                                                                       //\n    var writes = self._bufferedWrites;                                                                                 // 1314\n    self._bufferedWrites = {};                                                                                         // 1315\n                                                                                                                       //\n    self._performWrites(writes);                                                                                       // 1316\n  },                                                                                                                   // 1317\n  _performWrites: function (updates) {                                                                                 // 1319\n    var self = this;                                                                                                   // 1320\n                                                                                                                       //\n    if (self._resetStores || !_.isEmpty(updates)) {                                                                    // 1322\n      // Begin a transactional update of each store.                                                                   // 1323\n      _.each(self._stores, function (s, storeName) {                                                                   // 1324\n        s.beginUpdate(_.has(updates, storeName) ? updates[storeName].length : 0, self._resetStores);                   // 1325\n      });                                                                                                              // 1327\n                                                                                                                       //\n      self._resetStores = false;                                                                                       // 1328\n                                                                                                                       //\n      _.each(updates, function (updateMessages, storeName) {                                                           // 1330\n        var store = self._stores[storeName];                                                                           // 1331\n                                                                                                                       //\n        if (store) {                                                                                                   // 1332\n          _.each(updateMessages, function (updateMessage) {                                                            // 1333\n            store.update(updateMessage);                                                                               // 1334\n          });                                                                                                          // 1335\n        } else {                                                                                                       // 1336\n          // Nobody's listening for this data. Queue it up until                                                       // 1337\n          // someone wants it.                                                                                         // 1338\n          // XXX memory use will grow without bound if you forget to                                                   // 1339\n          // create a collection or just don't care about it... going                                                  // 1340\n          // to have to do something about that.                                                                       // 1341\n          if (!_.has(self._updatesForUnknownStores, storeName)) self._updatesForUnknownStores[storeName] = [];         // 1342\n          Array.prototype.push.apply(self._updatesForUnknownStores[storeName], updateMessages);                        // 1344\n        }                                                                                                              // 1346\n      }); // End update transaction.                                                                                   // 1347\n                                                                                                                       //\n                                                                                                                       //\n      _.each(self._stores, function (s) {                                                                              // 1350\n        s.endUpdate();                                                                                                 // 1350\n      });                                                                                                              // 1350\n    }                                                                                                                  // 1351\n                                                                                                                       //\n    self._runAfterUpdateCallbacks();                                                                                   // 1353\n  },                                                                                                                   // 1354\n  // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose                                            // 1356\n  // relevant docs have been flushed, as well as dataVisible callbacks at                                              // 1357\n  // reconnect-quiescence time.                                                                                        // 1358\n  _runAfterUpdateCallbacks: function () {                                                                              // 1359\n    var self = this;                                                                                                   // 1360\n    var callbacks = self._afterUpdateCallbacks;                                                                        // 1361\n    self._afterUpdateCallbacks = [];                                                                                   // 1362\n                                                                                                                       //\n    _.each(callbacks, function (c) {                                                                                   // 1363\n      c();                                                                                                             // 1364\n    });                                                                                                                // 1365\n  },                                                                                                                   // 1366\n  _pushUpdate: function (updates, collection, msg) {                                                                   // 1368\n    var self = this;                                                                                                   // 1369\n                                                                                                                       //\n    if (!_.has(updates, collection)) {                                                                                 // 1370\n      updates[collection] = [];                                                                                        // 1371\n    }                                                                                                                  // 1372\n                                                                                                                       //\n    updates[collection].push(msg);                                                                                     // 1373\n  },                                                                                                                   // 1374\n  _getServerDoc: function (collection, id) {                                                                           // 1376\n    var self = this;                                                                                                   // 1377\n    if (!_.has(self._serverDocuments, collection)) return null;                                                        // 1378\n    var serverDocsForCollection = self._serverDocuments[collection];                                                   // 1380\n    return serverDocsForCollection.get(id) || null;                                                                    // 1381\n  },                                                                                                                   // 1382\n  _process_added: function (msg, updates) {                                                                            // 1384\n    var self = this;                                                                                                   // 1385\n    var id = MongoID.idParse(msg.id);                                                                                  // 1386\n                                                                                                                       //\n    var serverDoc = self._getServerDoc(msg.collection, id);                                                            // 1387\n                                                                                                                       //\n    if (serverDoc) {                                                                                                   // 1388\n      // Some outstanding stub wrote here.                                                                             // 1389\n      var isExisting = serverDoc.document !== undefined;                                                               // 1390\n      serverDoc.document = msg.fields || {};                                                                           // 1392\n      serverDoc.document._id = id;                                                                                     // 1393\n                                                                                                                       //\n      if (self._resetStores) {                                                                                         // 1395\n        // During reconnect the server is sending adds for existing ids.                                               // 1396\n        // Always push an update so that document stays in the store after                                             // 1397\n        // reset. Use current version of the document for this update, so                                              // 1398\n        // that stub-written values are preserved.                                                                     // 1399\n        var currentDoc = self._stores[msg.collection].getDoc(msg.id);                                                  // 1400\n                                                                                                                       //\n        if (currentDoc !== undefined) msg.fields = currentDoc;                                                         // 1401\n                                                                                                                       //\n        self._pushUpdate(updates, msg.collection, msg);                                                                // 1404\n      } else if (isExisting) {                                                                                         // 1405\n        throw new Error(\"Server sent add for existing id: \" + msg.id);                                                 // 1406\n      }                                                                                                                // 1407\n    } else {                                                                                                           // 1408\n      self._pushUpdate(updates, msg.collection, msg);                                                                  // 1409\n    }                                                                                                                  // 1410\n  },                                                                                                                   // 1411\n  _process_changed: function (msg, updates) {                                                                          // 1413\n    var self = this;                                                                                                   // 1414\n                                                                                                                       //\n    var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id));                                       // 1415\n                                                                                                                       //\n    if (serverDoc) {                                                                                                   // 1417\n      if (serverDoc.document === undefined) throw new Error(\"Server sent changed for nonexisting id: \" + msg.id);      // 1418\n      DiffSequence.applyChanges(serverDoc.document, msg.fields);                                                       // 1420\n    } else {                                                                                                           // 1421\n      self._pushUpdate(updates, msg.collection, msg);                                                                  // 1422\n    }                                                                                                                  // 1423\n  },                                                                                                                   // 1424\n  _process_removed: function (msg, updates) {                                                                          // 1426\n    var self = this;                                                                                                   // 1427\n                                                                                                                       //\n    var serverDoc = self._getServerDoc(msg.collection, MongoID.idParse(msg.id));                                       // 1428\n                                                                                                                       //\n    if (serverDoc) {                                                                                                   // 1430\n      // Some outstanding stub wrote here.                                                                             // 1431\n      if (serverDoc.document === undefined) throw new Error(\"Server sent removed for nonexisting id:\" + msg.id);       // 1432\n      serverDoc.document = undefined;                                                                                  // 1434\n    } else {                                                                                                           // 1435\n      self._pushUpdate(updates, msg.collection, {                                                                      // 1436\n        msg: 'removed',                                                                                                // 1437\n        collection: msg.collection,                                                                                    // 1438\n        id: msg.id                                                                                                     // 1439\n      });                                                                                                              // 1436\n    }                                                                                                                  // 1441\n  },                                                                                                                   // 1442\n  _process_updated: function (msg, updates) {                                                                          // 1444\n    var self = this; // Process \"method done\" messages.                                                                // 1445\n                                                                                                                       //\n    _.each(msg.methods, function (methodId) {                                                                          // 1447\n      _.each(self._documentsWrittenByStub[methodId], function (written) {                                              // 1448\n        var serverDoc = self._getServerDoc(written.collection, written.id);                                            // 1449\n                                                                                                                       //\n        if (!serverDoc) throw new Error(\"Lost serverDoc for \" + JSON.stringify(written));                              // 1450\n        if (!serverDoc.writtenByStubs[methodId]) throw new Error(\"Doc \" + JSON.stringify(written) + \" not written by  method \" + methodId);\n        delete serverDoc.writtenByStubs[methodId];                                                                     // 1455\n                                                                                                                       //\n        if (_.isEmpty(serverDoc.writtenByStubs)) {                                                                     // 1456\n          // All methods whose stubs wrote this method have completed! We can                                          // 1457\n          // now copy the saved document to the database (reverting the stub's                                         // 1458\n          // change if the server did not write to this object, or applying the                                        // 1459\n          // server's writes if it did).                                                                               // 1460\n          // This is a fake ddp 'replace' message.  It's just for talking                                              // 1462\n          // between livedata connections and minimongo.  (We have to stringify                                        // 1463\n          // the ID because it's supposed to look like a wire message.)                                                // 1464\n          self._pushUpdate(updates, written.collection, {                                                              // 1465\n            msg: 'replace',                                                                                            // 1466\n            id: MongoID.idStringify(written.id),                                                                       // 1467\n            replace: serverDoc.document                                                                                // 1468\n          }); // Call all flush callbacks.                                                                             // 1465\n                                                                                                                       //\n                                                                                                                       //\n          _.each(serverDoc.flushCallbacks, function (c) {                                                              // 1471\n            c();                                                                                                       // 1472\n          }); // Delete this completed serverDocument. Don't bother to GC empty                                        // 1473\n          // IdMaps inside self._serverDocuments, since there probably aren't                                          // 1476\n          // many collections and they'll be written repeatedly.                                                       // 1477\n                                                                                                                       //\n                                                                                                                       //\n          self._serverDocuments[written.collection].remove(written.id);                                                // 1478\n        }                                                                                                              // 1479\n      });                                                                                                              // 1480\n                                                                                                                       //\n      delete self._documentsWrittenByStub[methodId]; // We want to call the data-written callback, but we can't do so until all\n      // currently buffered messages are flushed.                                                                      // 1484\n                                                                                                                       //\n      var callbackInvoker = self._methodInvokers[methodId];                                                            // 1485\n      if (!callbackInvoker) throw new Error(\"No callback invoker for method \" + methodId);                             // 1486\n                                                                                                                       //\n      self._runWhenAllServerDocsAreFlushed(_.bind(callbackInvoker.dataVisible, callbackInvoker));                      // 1488\n    });                                                                                                                // 1490\n  },                                                                                                                   // 1491\n  _process_ready: function (msg, updates) {                                                                            // 1493\n    var self = this; // Process \"sub ready\" messages. \"sub ready\" messages don't take effect                           // 1494\n    // until all current server documents have been flushed to the local                                               // 1496\n    // database. We can use a write fence to implement this.                                                           // 1497\n                                                                                                                       //\n    _.each(msg.subs, function (subId) {                                                                                // 1498\n      self._runWhenAllServerDocsAreFlushed(function () {                                                               // 1499\n        var subRecord = self._subscriptions[subId]; // Did we already unsubscribe?                                     // 1500\n                                                                                                                       //\n        if (!subRecord) return; // Did we already receive a ready message? (Oops!)                                     // 1502\n                                                                                                                       //\n        if (subRecord.ready) return;                                                                                   // 1505\n        subRecord.ready = true;                                                                                        // 1507\n        subRecord.readyCallback && subRecord.readyCallback();                                                          // 1508\n        subRecord.readyDeps.changed();                                                                                 // 1509\n      });                                                                                                              // 1510\n    });                                                                                                                // 1511\n  },                                                                                                                   // 1512\n  // Ensures that \"f\" will be called after all documents currently in                                                  // 1514\n  // _serverDocuments have been written to the local cache. f will not be called                                       // 1515\n  // if the connection is lost before then!                                                                            // 1516\n  _runWhenAllServerDocsAreFlushed: function (f) {                                                                      // 1517\n    var self = this;                                                                                                   // 1518\n                                                                                                                       //\n    var runFAfterUpdates = function () {                                                                               // 1519\n      self._afterUpdateCallbacks.push(f);                                                                              // 1520\n    };                                                                                                                 // 1521\n                                                                                                                       //\n    var unflushedServerDocCount = 0;                                                                                   // 1522\n                                                                                                                       //\n    var onServerDocFlush = function () {                                                                               // 1523\n      --unflushedServerDocCount;                                                                                       // 1524\n                                                                                                                       //\n      if (unflushedServerDocCount === 0) {                                                                             // 1525\n        // This was the last doc to flush! Arrange to run f after the updates                                          // 1526\n        // have been applied.                                                                                          // 1527\n        runFAfterUpdates();                                                                                            // 1528\n      }                                                                                                                // 1529\n    };                                                                                                                 // 1530\n                                                                                                                       //\n    _.each(self._serverDocuments, function (collectionDocs) {                                                          // 1531\n      collectionDocs.forEach(function (serverDoc) {                                                                    // 1532\n        var writtenByStubForAMethodWithSentMessage = _.any(serverDoc.writtenByStubs, function (dummy, methodId) {      // 1533\n          var invoker = self._methodInvokers[methodId];                                                                // 1535\n          return invoker && invoker.sentMessage;                                                                       // 1536\n        });                                                                                                            // 1537\n                                                                                                                       //\n        if (writtenByStubForAMethodWithSentMessage) {                                                                  // 1538\n          ++unflushedServerDocCount;                                                                                   // 1539\n          serverDoc.flushCallbacks.push(onServerDocFlush);                                                             // 1540\n        }                                                                                                              // 1541\n      });                                                                                                              // 1542\n    });                                                                                                                // 1543\n                                                                                                                       //\n    if (unflushedServerDocCount === 0) {                                                                               // 1544\n      // There aren't any buffered docs --- we can call f as soon as the current                                       // 1545\n      // round of updates is applied!                                                                                  // 1546\n      runFAfterUpdates();                                                                                              // 1547\n    }                                                                                                                  // 1548\n  },                                                                                                                   // 1549\n  _livedata_nosub: function (msg) {                                                                                    // 1551\n    var self = this; // First pass it through _livedata_data, which only uses it to help get                           // 1552\n    // towards quiescence.                                                                                             // 1555\n                                                                                                                       //\n    self._livedata_data(msg); // Do the rest of our processing immediately, with no                                    // 1556\n    // buffering-until-quiescence.                                                                                     // 1559\n    // we weren't subbed anyway, or we initiated the unsub.                                                            // 1561\n                                                                                                                       //\n                                                                                                                       //\n    if (!_.has(self._subscriptions, msg.id)) return; // XXX COMPAT WITH 1.0.3.1 #errorCallback                         // 1562\n                                                                                                                       //\n    var errorCallback = self._subscriptions[msg.id].errorCallback;                                                     // 1566\n    var stopCallback = self._subscriptions[msg.id].stopCallback;                                                       // 1567\n                                                                                                                       //\n    self._subscriptions[msg.id].remove();                                                                              // 1569\n                                                                                                                       //\n    var meteorErrorFromMsg = function (msgArg) {                                                                       // 1571\n      return msgArg && msgArg.error && new Meteor.Error(msgArg.error.error, msgArg.error.reason, msgArg.error.details);\n    }; // XXX COMPAT WITH 1.0.3.1 #errorCallback                                                                       // 1574\n                                                                                                                       //\n                                                                                                                       //\n    if (errorCallback && msg.error) {                                                                                  // 1577\n      errorCallback(meteorErrorFromMsg(msg));                                                                          // 1578\n    }                                                                                                                  // 1579\n                                                                                                                       //\n    if (stopCallback) {                                                                                                // 1581\n      stopCallback(meteorErrorFromMsg(msg));                                                                           // 1582\n    }                                                                                                                  // 1583\n  },                                                                                                                   // 1584\n  _process_nosub: function () {// This is called as part of the \"buffer until quiescence\" process, but                 // 1586\n    // nosub's effect is always immediate. It only goes in the buffer at all                                           // 1588\n    // because it's possible for a nosub to be the thing that triggers                                                 // 1589\n    // quiescence, if we were waiting for a sub to be revived and it dies                                              // 1590\n    // instead.                                                                                                        // 1591\n  },                                                                                                                   // 1592\n  _livedata_result: function (msg) {                                                                                   // 1594\n    // id, result or error. error has error (code), reason, details                                                    // 1595\n    var self = this; // Lets make sure there are no buffered writes before returning result.                           // 1597\n                                                                                                                       //\n    if (!_.isEmpty(self._bufferedWrites)) {                                                                            // 1600\n      self._flushBufferedWrites();                                                                                     // 1601\n    } // find the outstanding request                                                                                  // 1602\n    // should be O(1) in nearly all realistic use cases                                                                // 1605\n                                                                                                                       //\n                                                                                                                       //\n    if (_.isEmpty(self._outstandingMethodBlocks)) {                                                                    // 1606\n      Meteor._debug(\"Received method result but no methods outstanding\");                                              // 1607\n                                                                                                                       //\n      return;                                                                                                          // 1608\n    }                                                                                                                  // 1609\n                                                                                                                       //\n    var currentMethodBlock = self._outstandingMethodBlocks[0].methods;                                                 // 1610\n    var m;                                                                                                             // 1611\n                                                                                                                       //\n    for (var i = 0; i < currentMethodBlock.length; i++) {                                                              // 1612\n      m = currentMethodBlock[i];                                                                                       // 1613\n      if (m.methodId === msg.id) break;                                                                                // 1614\n    }                                                                                                                  // 1616\n                                                                                                                       //\n    if (!m) {                                                                                                          // 1618\n      Meteor._debug(\"Can't match method response to original method call\", msg);                                       // 1619\n                                                                                                                       //\n      return;                                                                                                          // 1620\n    } // Remove from current method block. This may leave the block empty, but we                                      // 1621\n    // don't move on to the next block until the callback has been delivered, in                                       // 1624\n    // _outstandingMethodFinished.                                                                                     // 1625\n                                                                                                                       //\n                                                                                                                       //\n    currentMethodBlock.splice(i, 1);                                                                                   // 1626\n                                                                                                                       //\n    if (_.has(msg, 'error')) {                                                                                         // 1628\n      m.receiveResult(new Meteor.Error(msg.error.error, msg.error.reason, msg.error.details));                         // 1629\n    } else {                                                                                                           // 1632\n      // msg.result may be undefined if the method didn't return a                                                     // 1633\n      // value                                                                                                         // 1634\n      m.receiveResult(undefined, msg.result);                                                                          // 1635\n    }                                                                                                                  // 1636\n  },                                                                                                                   // 1637\n  // Called by MethodInvoker after a method's callback is invoked.  If this was                                        // 1639\n  // the last outstanding method in the current block, runs the next block. If                                         // 1640\n  // there are no more methods, consider accepting a hot code push.                                                    // 1641\n  _outstandingMethodFinished: function () {                                                                            // 1642\n    var self = this;                                                                                                   // 1643\n    if (self._anyMethodsAreOutstanding()) return; // No methods are outstanding. This should mean that the first block of\n    // methods is empty. (Or it might not exist, if this was a method that                                             // 1648\n    // half-finished before disconnect/reconnect.)                                                                     // 1649\n                                                                                                                       //\n    if (!_.isEmpty(self._outstandingMethodBlocks)) {                                                                   // 1650\n      var firstBlock = self._outstandingMethodBlocks.shift();                                                          // 1651\n                                                                                                                       //\n      if (!_.isEmpty(firstBlock.methods)) throw new Error(\"No methods outstanding but nonempty block: \" + JSON.stringify(firstBlock)); // Send the outstanding methods now in the first block.\n                                                                                                                       //\n      if (!_.isEmpty(self._outstandingMethodBlocks)) self._sendOutstandingMethods();                                   // 1657\n    } // Maybe accept a hot code push.                                                                                 // 1659\n                                                                                                                       //\n                                                                                                                       //\n    self._maybeMigrate();                                                                                              // 1662\n  },                                                                                                                   // 1663\n  // Sends messages for all the methods in the first block in                                                          // 1665\n  // _outstandingMethodBlocks.                                                                                         // 1666\n  _sendOutstandingMethods: function () {                                                                               // 1667\n    var self = this;                                                                                                   // 1668\n    if (_.isEmpty(self._outstandingMethodBlocks)) return;                                                              // 1669\n                                                                                                                       //\n    _.each(self._outstandingMethodBlocks[0].methods, function (m) {                                                    // 1671\n      m.sendMessage();                                                                                                 // 1672\n    });                                                                                                                // 1673\n  },                                                                                                                   // 1674\n  _livedata_error: function (msg) {                                                                                    // 1676\n    Meteor._debug(\"Received error from server: \", msg.reason);                                                         // 1677\n                                                                                                                       //\n    if (msg.offendingMessage) Meteor._debug(\"For: \", msg.offendingMessage);                                            // 1678\n  },                                                                                                                   // 1680\n  _callOnReconnectAndSendAppropriateOutstandingMethods: function () {                                                  // 1682\n    var self = this;                                                                                                   // 1683\n    var oldOutstandingMethodBlocks = self._outstandingMethodBlocks;                                                    // 1684\n    self._outstandingMethodBlocks = [];                                                                                // 1685\n    self.onReconnect && self.onReconnect();                                                                            // 1687\n                                                                                                                       //\n    DDP._reconnectHook.each(function (callback) {                                                                      // 1688\n      callback(self);                                                                                                  // 1689\n      return true;                                                                                                     // 1690\n    });                                                                                                                // 1691\n                                                                                                                       //\n    if (_.isEmpty(oldOutstandingMethodBlocks)) return; // We have at least one block worth of old outstanding methods to try\n    // again. First: did onReconnect actually send anything? If not, we just                                           // 1697\n    // restore all outstanding methods and run the first block.                                                        // 1698\n                                                                                                                       //\n    if (_.isEmpty(self._outstandingMethodBlocks)) {                                                                    // 1699\n      self._outstandingMethodBlocks = oldOutstandingMethodBlocks;                                                      // 1700\n                                                                                                                       //\n      self._sendOutstandingMethods();                                                                                  // 1701\n                                                                                                                       //\n      return;                                                                                                          // 1702\n    } // OK, there are blocks on both sides. Special case: merge the last block of                                     // 1703\n    // the reconnect methods with the first block of the original methods, if                                          // 1706\n    // neither of them are \"wait\" blocks.                                                                              // 1707\n                                                                                                                       //\n                                                                                                                       //\n    if (!_.last(self._outstandingMethodBlocks).wait && !oldOutstandingMethodBlocks[0].wait) {                          // 1708\n      _.each(oldOutstandingMethodBlocks[0].methods, function (m) {                                                     // 1710\n        _.last(self._outstandingMethodBlocks).methods.push(m); // If this \"last block\" is also the first block, send the message.\n                                                                                                                       //\n                                                                                                                       //\n        if (self._outstandingMethodBlocks.length === 1) m.sendMessage();                                               // 1714\n      });                                                                                                              // 1716\n                                                                                                                       //\n      oldOutstandingMethodBlocks.shift();                                                                              // 1718\n    } // Now add the rest of the original blocks on.                                                                   // 1719\n                                                                                                                       //\n                                                                                                                       //\n    _.each(oldOutstandingMethodBlocks, function (block) {                                                              // 1722\n      self._outstandingMethodBlocks.push(block);                                                                       // 1723\n    });                                                                                                                // 1724\n  },                                                                                                                   // 1725\n  // We can accept a hot code push if there are no methods in flight.                                                  // 1727\n  _readyToMigrate: function () {                                                                                       // 1728\n    var self = this;                                                                                                   // 1729\n    return _.isEmpty(self._methodInvokers);                                                                            // 1730\n  },                                                                                                                   // 1731\n  // If we were blocking a migration, see if it's now possible to continue.                                            // 1733\n  // Call whenever the set of outstanding/blocked methods shrinks.                                                     // 1734\n  _maybeMigrate: function () {                                                                                         // 1735\n    var self = this;                                                                                                   // 1736\n                                                                                                                       //\n    if (self._retryMigrate && self._readyToMigrate()) {                                                                // 1737\n      self._retryMigrate();                                                                                            // 1738\n                                                                                                                       //\n      self._retryMigrate = null;                                                                                       // 1739\n    }                                                                                                                  // 1740\n  }                                                                                                                    // 1741\n});                                                                                                                    // 478\n                                                                                                                       //\nLivedataTest.Connection = Connection; // @param url {String} URL to Meteor app,                                        // 1744\n//     e.g.:                                                                                                           // 1747\n//     \"subdomain.meteor.com\",                                                                                         // 1748\n//     \"http://subdomain.meteor.com\",                                                                                  // 1749\n//     \"/\",                                                                                                            // 1750\n//     \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"                                                                  // 1751\n/**                                                                                                                    // 1753\n * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.\n * @locus Anywhere                                                                                                     //\n * @param {String} url The URL of another Meteor application.                                                          //\n */                                                                                                                    //\n                                                                                                                       //\nDDP.connect = function (url, options) {                                                                                // 1758\n  var ret = new Connection(url, options);                                                                              // 1759\n  allConnections.push(ret); // hack. see below.                                                                        // 1760\n                                                                                                                       //\n  return ret;                                                                                                          // 1761\n};                                                                                                                     // 1762\n                                                                                                                       //\nDDP._reconnectHook = new Hook({                                                                                        // 1764\n  bindEnvironment: false                                                                                               // 1764\n}); /**                                                                                                                // 1764\n     * @summary Register a function to call as the first step of                                                       //\n     * reconnecting. This function can call methods which will be executed before                                      //\n     * any other outstanding methods. For example, this can be used to re-establish                                    //\n     * the appropriate authentication context on the connection.                                                       //\n     * @locus Anywhere                                                                                                 //\n     * @param {Function} callback The function to call. It will be called with a                                       //\n     * single argument, the [connection object](#ddp_connect) that is reconnecting.                                    //\n     */                                                                                                                //\n                                                                                                                       //\nDDP.onReconnect = function (callback) {                                                                                // 1775\n  return DDP._reconnectHook.register(callback);                                                                        // 1776\n}; // Hack for `spiderable` package: a way to see if the page is done                                                  // 1777\n// loading all the data it needs.                                                                                      // 1780\n//                                                                                                                     // 1781\n                                                                                                                       //\n                                                                                                                       //\nallConnections = [];                                                                                                   // 1782\n                                                                                                                       //\nDDP._allSubscriptionsReady = function () {                                                                             // 1783\n  return _.all(allConnections, function (conn) {                                                                       // 1784\n    return _.all(conn._subscriptions, function (sub) {                                                                 // 1785\n      return sub.ready;                                                                                                // 1786\n    });                                                                                                                // 1787\n  });                                                                                                                  // 1788\n};                                                                                                                     // 1789\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"client_convenience.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-client/client_convenience.js                                                                           //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar DDP = void 0;                                                                                                      // 1\nmodule.watch(require(\"./namespace.js\"), {                                                                              // 1\n  DDP: function (v) {                                                                                                  // 1\n    DDP = v;                                                                                                           // 1\n  }                                                                                                                    // 1\n}, 0);                                                                                                                 // 1\n                                                                                                                       //\n// Meteor.refresh can be called on the client (if you're in common code) but it                                        // 3\n// only has an effect on the server.                                                                                   // 4\nMeteor.refresh = function (notification) {};                                                                           // 5\n                                                                                                                       //\nif (Meteor.isClient) {                                                                                                 // 8\n  // By default, try to connect back to the same endpoint as the page                                                  // 9\n  // was served from.                                                                                                  // 10\n  //                                                                                                                   // 11\n  // XXX We should be doing this a different way. Right now we don't                                                   // 12\n  // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't                                                     // 13\n  // include it on the server when computing                                                                           // 14\n  // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our                                                        // 15\n  // default, '/'.) We get by with this because DDP.connect then                                                       // 16\n  // forces the URL passed to it to be interpreted relative to the                                                     // 17\n  // app's deploy path, even if it is absolute. Instead, we should                                                     // 18\n  // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;                                                 // 19\n  // make the default ddpUrl be '' rather that '/'; and make                                                           // 20\n  // _translateUrl in stream_client_common.js not force absolute paths                                                 // 21\n  // to be treated like relative paths. See also                                                                       // 22\n  // stream_client_common.js #RationalizingRelativeDDPURLs                                                             // 23\n  var ddpUrl = '/';                                                                                                    // 24\n                                                                                                                       //\n  if (typeof __meteor_runtime_config__ !== \"undefined\") {                                                              // 25\n    if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL) ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;\n  }                                                                                                                    // 28\n                                                                                                                       //\n  var retry = new Retry();                                                                                             // 30\n                                                                                                                       //\n  var onDDPVersionNegotiationFailure = function (description) {                                                        // 32\n    Meteor._debug(description);                                                                                        // 33\n                                                                                                                       //\n    if (Package.reload) {                                                                                              // 34\n      var migrationData = Package.reload.Reload._migrationData('livedata') || {};                                      // 35\n      var failures = migrationData.DDPVersionNegotiationFailures || 0;                                                 // 36\n      ++failures;                                                                                                      // 37\n                                                                                                                       //\n      Package.reload.Reload._onMigrate('livedata', function () {                                                       // 38\n        return [true, {                                                                                                // 39\n          DDPVersionNegotiationFailures: failures                                                                      // 39\n        }];                                                                                                            // 39\n      });                                                                                                              // 40\n                                                                                                                       //\n      retry.retryLater(failures, function () {                                                                         // 41\n        Package.reload.Reload._reload();                                                                               // 42\n      });                                                                                                              // 43\n    }                                                                                                                  // 44\n  };                                                                                                                   // 45\n                                                                                                                       //\n  Meteor.connection = DDP.connect(ddpUrl, {                                                                            // 47\n    onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure                                                     // 49\n  }); // Proxy the public methods of Meteor.connection so they can                                                     // 48\n  // be called directly on Meteor.                                                                                     // 53\n                                                                                                                       //\n  _.each(['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect', 'disconnect'], function (name) {             // 54\n    Meteor[name] = _.bind(Meteor.connection[name], Meteor.connection);                                                 // 57\n  });                                                                                                                  // 58\n} else {                                                                                                               // 59\n  // Never set up a default connection on the server. Don't even map                                                   // 60\n  // subscribe/call/etc onto Meteor.                                                                                   // 61\n  Meteor.connection = null;                                                                                            // 62\n} // Meteor.connection used to be called                                                                               // 63\n// Meteor.default_connection. Provide backcompat as a courtesy even                                                    // 66\n// though it was never documented.                                                                                     // 67\n// XXX COMPAT WITH 0.6.4                                                                                               // 68\n                                                                                                                       //\n                                                                                                                       //\nMeteor.default_connection = Meteor.connection; // We should transition from Meteor.connect to DDP.connect.             // 69\n// XXX COMPAT WITH 0.6.4                                                                                               // 72\n                                                                                                                       //\nMeteor.connect = DDP.connect;                                                                                          // 73\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"namespace.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-client/namespace.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  DDP: function () {                                                                                                   // 1\n    return DDP;                                                                                                        // 1\n  },                                                                                                                   // 1\n  LivedataTest: function () {                                                                                          // 1\n    return LivedataTest;                                                                                               // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\nvar DDP = {};                                                                                                          // 5\nvar LivedataTest = {};                                                                                                 // 6\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"id_map.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/ddp-client/id_map.js                                                                                       //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar _classCallCheck2 = require(\"babel-runtime/helpers/classCallCheck\");                                                //\n                                                                                                                       //\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);                                                       //\n                                                                                                                       //\nvar _possibleConstructorReturn2 = require(\"babel-runtime/helpers/possibleConstructorReturn\");                          //\n                                                                                                                       //\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);                                 //\n                                                                                                                       //\nvar _inherits2 = require(\"babel-runtime/helpers/inherits\");                                                            //\n                                                                                                                       //\nvar _inherits3 = _interopRequireDefault(_inherits2);                                                                   //\n                                                                                                                       //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                      //\n                                                                                                                       //\nmodule.export({                                                                                                        // 1\n  MongoIDMap: function () {                                                                                            // 1\n    return MongoIDMap;                                                                                                 // 1\n  }                                                                                                                    // 1\n});                                                                                                                    // 1\n                                                                                                                       //\nvar MongoIDMap = function (_IdMap) {                                                                                   //\n  (0, _inherits3.default)(MongoIDMap, _IdMap);                                                                         //\n                                                                                                                       //\n  function MongoIDMap() {                                                                                              // 2\n    (0, _classCallCheck3.default)(this, MongoIDMap);                                                                   // 2\n    return (0, _possibleConstructorReturn3.default)(this, _IdMap.call(this, MongoID.idStringify, MongoID.idParse));    // 2\n  }                                                                                                                    // 7\n                                                                                                                       //\n  return MongoIDMap;                                                                                                   //\n}(IdMap);                                                                                                              //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./node_modules/meteor/ddp-client/sockjs-0.3.4.js\");\nrequire(\"./node_modules/meteor/ddp-client/stream_client_sockjs.js\");\nrequire(\"./node_modules/meteor/ddp-client/stream_client_common.js\");\nrequire(\"./node_modules/meteor/ddp-client/livedata_common.js\");\nrequire(\"./node_modules/meteor/ddp-client/random_stream.js\");\nrequire(\"./node_modules/meteor/ddp-client/livedata_connection.js\");\nrequire(\"./node_modules/meteor/ddp-client/client_convenience.js\");\nvar exports = require(\"./node_modules/meteor/ddp-client/namespace.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['ddp-client'] = exports, {\n  DDP: DDP\n});\n\n})();\n","servePath":"/packages/ddp-client.js","sourceMap":{"version":3,"sources":["packages/ddp-client/sockjs-0.3.4.js","packages/ddp-client/stream_client_sockjs.js","packages/ddp-client/stream_client_common.js","packages/ddp-client/livedata_common.js","packages/ddp-client/random_stream.js","packages/ddp-client/livedata_connection.js","packages/ddp-client/client_convenience.js","packages/ddp-client/namespace.js","packages/ddp-client/id_map.js"],"names":["SockJS","_document","document","_window","window","utils","REventTarget","prototype","addEventListener","eventType","listener","_listeners","arr","arrIndexOf","push","removeEventListener","idx","length","slice","concat","dispatchEvent","event","t","type","args","Array","call","arguments","apply","i","SimpleEvent","obj","k","hasOwnProperty","toString","r","v","join","EventEmitter","events","that","_events","emit","_verifyType","_nuked","on","callback","log","JSON","stringify","nuke","random_string_chars","random_string","max","ret","substr","Math","floor","random","random_number","random_number_string","p","getOrigin","url","parts","split","isSameOriginUrl","url_a","url_b","location","href","isSameOriginScheme","getParentDomain","test","objectExtend","dst","src","WPrefix","polluteGlobalNamespace","closeFrame","code","reason","userSetCode","countRTO","rtt","rto","console","bind","fun","flatUrl","indexOf","amendUrl","relativeTo","baseUrl","undefined","protocolMatch","exec","protocol","toLowerCase","rest","substring","hostMatch","host","Error","replace","arrSkip","isArray","value","delay","setTimeout","json_escapable","json_lookup","extra_escapable","extra_lookup","JSONQuote","string","lastIndex","a","unroll_lookup","escapable","unrolled","c","String","fromCharCode","charCodeAt","quote","quoted","_all_protocols","probeProtocols","probed","enabled","detectProtocols","protocols_whitelist","info","pe","protocols","maybe_push","protos","proto","shift","websocket","null_origin","cookie_needed","MPrefix","createHook","window_id","map","id","del","attachMessage","attachEvent","detachMessage","detachEvent","on_unload","after_unload","trigger_unload_callbacks","ref","unload_triggered","unload_add","unload_del","createIframe","iframe_url","error_callback","iframe","createElement","tref","unload_ref","unattach","clearTimeout","onload","x","onerror","cleanup","parentNode","removeChild","post","msg","origin","contentWindow","postMessage","style","display","position","body","appendChild","loaded","createHtmlfile","doc","ActiveXObject","CollectGarbage","open","write","domain","close","parentWindow","AbstractXHRObject","_start","method","payload","opts","xhr","XMLHttpRequest","XDomainRequest","Date","_cleanup","e","no_credentials","withCredentials","headers","key","setRequestHeader","onreadystatechange","readyState","status","text","responseText","send","abort","XHRCorsObject","XHRLocalObject","XDRObject","xdr","ontimeout","onprogress","isXHRCorsCapable","IframeTransport","dep_protocols_whitelist","options","_options","devel","debug","_base_url","_server","server","_debug","_protocols","CONNECTING","_ir","createInfoReceiver","onfinish","_applyInfo","_didClose","version","OPEN","CLOSING","CLOSED","_dispatchOpen","_transport_tref","_dispatchMessage","data","_dispatchHeartbeat","force","_transport","doCleanup","close_event","wasClean","_try_next_protocol","last_event","_didMessage","parse","need_body","unshift","roundTrips","to","connid","trans_url","doSend","base_url","WebSocketTransport","ri","Constructor","WebSocket","MozWebSocket","ws","onmessage","onclose","BufferedSender","send_constructor","sender","send_buffer","message","send_stop","send_schedule","send_schedule_wait","success","abort_reason","send_destructor","_send_stop","jsonPGenericSender","form","_send_form","area","_send_area","name","enctype","acceptCharset","target","action","submit","completed","createAjaxSender","AjaxObject","xo","jsonPGenericReceiver","script","script2","close_script","frame","onclick","loaded_okay","error_timer","charset","htmlFor","async","navigator","userAgent","head","getElementsByTagName","insertBefore","firstChild","JsonPTransport","_schedule_recv","_recv_stop","_is_closing","jsonPReceiverWrapper","constructReceiver","user_callback","url_id","escape","aborting","stop","AjaxBasedTransport","run","url_suffix","Receiver","poll","Polling","XhrStreamingTransport","XhrReceiver","XdrStreamingTransport","XhrPollingTransport","XdrPollingTransport","i_constructor","iframeObj","onmessage_cb","konqueror","curr_window_id","parent","FacadeJS","_doSend","_doCleanup","parent_origin","bootstrap_iframe","facade","hash","onMessage","source","InfoReceiver","doXhr","t0","getTime","InfoReceiverIframe","go","ifr","d","mock_ri","InfoReceiverFake","WInfoReceiverIframe","_trans_url","ir","EventSourceIframeTransport","EventSourceTransport","EventSourceReceiver","XhrPollingIframeTransport","XhrPollingITransport","HtmlFileIframeTransport","HtmlFileTransport","HtmlfileReceiver","recv_url","_scheduleRecv","msg_counter","poll_is_closing","es","EventSource","unescape","es_close","_is_ie_htmlfile_capable","isIeHtmlfileCapable","constructor","start","iframe_close","buf_pos","onchunk","buf","getUtils","getIframeTransport","_sockjs_onload","define","amd","DDP","LivedataTest","module","watch","require","ClientStream","self","_","extend","retry","_initCommon","HEARTBEAT_TIMEOUT","rawUrl","socket","heartbeatTimer","_online","_launchConnection","currentStatus","connected","_changeUrl","_connected","connectionTimer","retryCount","statusChanged","each","eventCallbacks","reset","maybeError","_clearConnectionAndHeartbeatTimers","onheartbeat","disconnect","_heartbeat_timeout","Meteor","_lostConnection","ConnectionError","_heartbeat_received","_forcedToDisconnect","_sockjsProtocolsWhitelist","protocolsWhitelist","noWebsockets","_sockjsOptions","toSockjsUrl","onopen","toArray","toDateString","CONNECT_TIMEOUT","startsWith","str","starts","endsWith","ends","translateUrl","newSchemeBase","subPath","ddpUrlMatch","match","httpUrlMatch","newScheme","urlAfterDDP","slashPos","Random","fraction","urlAfterHttp","_relativeToSiteRootUrl","toWebsocketUrl","connectTimeoutMs","statusListeners","Tracker","Dependency","changed","_retry","Retry","reconnect","_force","ForcedReconnectError","clear","_retryNow","_permanent","_error","_retryLater","timeout","errorType","retryLater","retryTime","depend","makeErrorType","SUPPORTED_DDP_VERSIONS","DDPCommon","_CurrentMethodInvocation","EnvironmentVariable","_CurrentPublicationInvocation","_CurrentInvocation","randomStream","scope","get","RandomStream","MongoIDMap","isServer","Fiber","Npm","Future","Connection","onConnected","onDDPVersionNegotiationFailure","description","heartbeatInterval","heartbeatTimeout","npmFayeOptions","reloadWithOutstanding","supportedDDPVersions","respondToPings","bufferedWritesInterval","bufferedWritesMaxAge","onReconnect","_stream","_dontPrintErrors","_lastSessionId","_versionSuggestion","_version","_stores","_methodHandlers","_nextMethodId","_supportedDDPVersions","_heartbeatInterval","_heartbeatTimeout","_methodInvokers","_outstandingMethodBlocks","_documentsWrittenByStub","_serverDocuments","_afterUpdateCallbacks","_messagesBufferedUntilQuiescence","_methodsBlockingQuiescence","_subsBeingRevived","_resetStores","_updatesForUnknownStores","_retryMigrate","__flushBufferedWrites","bindEnvironment","_flushBufferedWrites","_bufferedWrites","_bufferedWritesFlushAt","_bufferedWritesFlushHandle","_bufferedWritesInterval","_bufferedWritesMaxAge","_subscriptions","_userId","_userIdDeps","isClient","Package","reload","Reload","_onMigrate","_readyToMigrate","raw_msg","parseDDP","_heartbeat","messageReceived","server_id","_livedata_connected","contains","_send","include","_livedata_data","_livedata_nosub","_livedata_result","_livedata_error","onReset","session","support","currentMethodBlock","methods","filter","methodInvoker","sentMessage","noRetry","receiveResult","isEmpty","m","_callOnReconnectAndSendAppropriateOutstandingMethods","sub","params","onDisconnect","MethodInvoker","methodId","_callback","_connection","connection","_message","_onResultReceived","onResultReceived","_wait","wait","_methodResult","_dataVisible","sendMessage","gotResult","_maybeInvokeCallback","_outstandingMethodFinished","err","result","dataVisible","registerStore","wrappedStore","store","queued","beginUpdate","update","endUpdate","subscribe","callbacks","lastParam","isFunction","onReady","pop","any","onError","onStop","existing","find","inactive","EJSON","equals","ready","readyCallback","errorCallback","stopCallback","clone","readyDeps","remove","handle","has","record","subscriptionId","active","onInvalidate","afterFlush","_subscribeAndWait","f","onLateError","func","enclosing","alreadyInSimulation","isSimulation","randomSeed","randomSeedGenerator","makeRpcSeed","stub","setUserId","userId","invocation","MethodInvocation","_saveOriginals","stubReturnValue","withValue","_noYieldsAllowed","exception","_retrieveAndStoreOriginals","throwStubExceptions","expected","stack","future","resolver","last","returnStubValue","_waitingForQuiescence","s","saveOriginals","docsWritten","collection","originals","retrieveOriginals","forEach","serverDoc","setDefault","writtenByStubs","flushCallbacks","_unsubscribeAll","stringifyDDP","error","_anyMethodsAreOutstanding","pluck","Heartbeat","onTimeout","sendPing","reconnectedToPreviousSession","invoker","_runAfterUpdateCallbacks","_processOneDataMessage","updates","subs","subId","bufferedMsg","standardWrite","valueOf","writes","_performWrites","storeName","updateMessages","updateMessage","_pushUpdate","_getServerDoc","serverDocsForCollection","_process_added","MongoID","idParse","isExisting","fields","_id","currentDoc","getDoc","_process_changed","DiffSequence","applyChanges","_process_removed","_process_updated","written","idStringify","callbackInvoker","_runWhenAllServerDocsAreFlushed","_process_ready","subRecord","runFAfterUpdates","unflushedServerDocCount","onServerDocFlush","collectionDocs","writtenByStubForAMethodWithSentMessage","dummy","meteorErrorFromMsg","msgArg","details","_process_nosub","splice","firstBlock","_sendOutstandingMethods","_maybeMigrate","offendingMessage","oldOutstandingMethodBlocks","_reconnectHook","block","connect","allConnections","Hook","register","_allSubscriptionsReady","all","conn","refresh","notification","ddpUrl","__meteor_runtime_config__","DDP_DEFAULT_CONNECTION_URL","migrationData","_migrationData","failures","DDPVersionNegotiationFailures","_reload","default_connection","export","IdMap"],"mappings":"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","file":"/packages/ddp-client.js","sourcesContent":["// XXX METEOR changes in <METEOR>\n\n/* SockJS client, version 0.3.4, http://sockjs.org, MIT License\n\nCopyright (c) 2011-2012 VMware, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n*/\n\n// <METEOR> Commented out JSO implementation (use json package instead).\n// JSON2 by Douglas Crockford (minified).\n// var JSON;JSON||(JSON={}),function(){function str(a,b){var c,d,e,f,g=gap,h,i=b[a];i&&typeof i==\"object\"&&typeof i.toJSON==\"function\"&&(i=i.toJSON(a)),typeof rep==\"function\"&&(i=rep.call(b,a,i));switch(typeof i){case\"string\":return quote(i);case\"number\":return isFinite(i)?String(i):\"null\";case\"boolean\":case\"null\":return String(i);case\"object\":if(!i)return\"null\";gap+=indent,h=[];if(Object.prototype.toString.apply(i)===\"[object Array]\"){f=i.length;for(c=0;c<f;c+=1)h[c]=str(c,i)||\"null\";e=h.length===0?\"[]\":gap?\"[\\n\"+gap+h.join(\",\\n\"+gap)+\"\\n\"+g+\"]\":\"[\"+h.join(\",\")+\"]\",gap=g;return e}if(rep&&typeof rep==\"object\"){f=rep.length;for(c=0;c<f;c+=1)typeof rep[c]==\"string\"&&(d=rep[c],e=str(d,i),e&&h.push(quote(d)+(gap?\": \":\":\")+e))}else for(d in i)Object.prototype.hasOwnProperty.call(i,d)&&(e=str(d,i),e&&h.push(quote(d)+(gap?\": \":\":\")+e));e=h.length===0?\"{}\":gap?\"{\\n\"+gap+h.join(\",\\n\"+gap)+\"\\n\"+g+\"}\":\"{\"+h.join(\",\")+\"}\",gap=g;return e}}function quote(a){escapable.lastIndex=0;return escapable.test(a)?'\"'+a.replace(escapable,function(a){var b=meta[a];return typeof b==\"string\"?b:\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)})+'\"':'\"'+a+'\"'}function f(a){return a<10?\"0\"+a:a}\"use strict\",typeof Date.prototype.toJSON!=\"function\"&&(Date.prototype.toJSON=function(a){return isFinite(this.valueOf())?this.getUTCFullYear()+\"-\"+f(this.getUTCMonth()+1)+\"-\"+f(this.getUTCDate())+\"T\"+f(this.getUTCHours())+\":\"+f(this.getUTCMinutes())+\":\"+f(this.getUTCSeconds())+\"Z\":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(a){return this.valueOf()});var cx=/[\\u0000\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,escapable=/[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,gap,indent,meta={\"\\b\":\"\\\\b\",\"\\t\":\"\\\\t\",\"\\n\":\"\\\\n\",\"\\f\":\"\\\\f\",\"\\r\":\"\\\\r\",'\"':'\\\\\"',\"\\\\\":\"\\\\\\\\\"},rep;typeof JSON.stringify!=\"function\"&&(JSON.stringify=function(a,b,c){var d;gap=\"\",indent=\"\";if(typeof c==\"number\")for(d=0;d<c;d+=1)indent+=\" \";else typeof c==\"string\"&&(indent=c);rep=b;if(!b||typeof b==\"function\"||typeof b==\"object\"&&typeof b.length==\"number\")return str(\"\",{\"\":a});throw new Error(\"JSON.stringify\")}),typeof JSON.parse!=\"function\"&&(JSON.parse=function(text,reviver){function walk(a,b){var c,d,e=a[b];if(e&&typeof e==\"object\")for(c in e)Object.prototype.hasOwnProperty.call(e,c)&&(d=walk(e,c),d!==undefined?e[c]=d:delete e[c]);return reviver.call(a,b,e)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(a){return\"\\\\u\"+(\"0000\"+a.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\\],:{}\\s]*$/.test(text.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\"))){j=eval(\"(\"+text+\")\");return typeof reviver==\"function\"?walk({\"\":j},\"\"):j}throw new SyntaxError(\"JSON.parse\")})}()\n// </METEOR>\n\n//     [*] Including lib/index.js\n// Public object\nSockJS = (function(){\n              var _document = document;\n              var _window = window;\n              var utils = {};\n\n\n//         [*] Including lib/reventtarget.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\n/* Simplified implementation of DOM2 EventTarget.\n *   http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-EventTarget\n */\nvar REventTarget = function() {};\nREventTarget.prototype.addEventListener = function (eventType, listener) {\n    if(!this._listeners) {\n         this._listeners = {};\n    }\n    if(!(eventType in this._listeners)) {\n        this._listeners[eventType] = [];\n    }\n    var arr = this._listeners[eventType];\n    if(utils.arrIndexOf(arr, listener) === -1) {\n        arr.push(listener);\n    }\n    return;\n};\n\nREventTarget.prototype.removeEventListener = function (eventType, listener) {\n    if(!(this._listeners && (eventType in this._listeners))) {\n        return;\n    }\n    var arr = this._listeners[eventType];\n    var idx = utils.arrIndexOf(arr, listener);\n    if (idx !== -1) {\n        if(arr.length > 1) {\n            this._listeners[eventType] = arr.slice(0, idx).concat( arr.slice(idx+1) );\n        } else {\n            delete this._listeners[eventType];\n        }\n        return;\n    }\n    return;\n};\n\nREventTarget.prototype.dispatchEvent = function (event) {\n    var t = event.type;\n    var args = Array.prototype.slice.call(arguments, 0);\n    if (this['on'+t]) {\n        this['on'+t].apply(this, args);\n    }\n    if (this._listeners && t in this._listeners) {\n        for(var i=0; i < this._listeners[t].length; i++) {\n            this._listeners[t][i].apply(this, args);\n        }\n    }\n};\n//         [*] End of lib/reventtarget.js\n\n\n//         [*] Including lib/simpleevent.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar SimpleEvent = function(type, obj) {\n    this.type = type;\n    if (typeof obj !== 'undefined') {\n        for(var k in obj) {\n            if (!obj.hasOwnProperty(k)) continue;\n            this[k] = obj[k];\n        }\n    }\n};\n\nSimpleEvent.prototype.toString = function() {\n    var r = [];\n    for(var k in this) {\n        if (!this.hasOwnProperty(k)) continue;\n        var v = this[k];\n        if (typeof v === 'function') v = '[function]';\n        r.push(k + '=' + v);\n    }\n    return 'SimpleEvent(' + r.join(', ') + ')';\n};\n//         [*] End of lib/simpleevent.js\n\n\n//         [*] Including lib/eventemitter.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar EventEmitter = function(events) {\n    var that = this;\n    that._events = events || [];\n    that._listeners = {};\n};\nEventEmitter.prototype.emit = function(type) {\n    var that = this;\n    that._verifyType(type);\n    if (that._nuked) return;\n\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (that['on'+type]) {\n        that['on'+type].apply(that, args);\n    }\n    if (type in that._listeners) {\n        for(var i = 0; i < that._listeners[type].length; i++) {\n            that._listeners[type][i].apply(that, args);\n        }\n    }\n};\n\nEventEmitter.prototype.on = function(type, callback) {\n    var that = this;\n    that._verifyType(type);\n    if (that._nuked) return;\n\n    if (!(type in that._listeners)) {\n        that._listeners[type] = [];\n    }\n    that._listeners[type].push(callback);\n};\n\nEventEmitter.prototype._verifyType = function(type) {\n    var that = this;\n    if (utils.arrIndexOf(that._events, type) === -1) {\n        utils.log('Event ' + JSON.stringify(type) +\n                  ' not listed ' + JSON.stringify(that._events) +\n                  ' in ' + that);\n    }\n};\n\nEventEmitter.prototype.nuke = function() {\n    var that = this;\n    that._nuked = true;\n    for(var i=0; i<that._events.length; i++) {\n        delete that[that._events[i]];\n    }\n    that._listeners = {};\n};\n//         [*] End of lib/eventemitter.js\n\n\n//         [*] Including lib/utils.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar random_string_chars = 'abcdefghijklmnopqrstuvwxyz0123456789_';\nutils.random_string = function(length, max) {\n    max = max || random_string_chars.length;\n    var i, ret = [];\n    for(i=0; i < length; i++) {\n        ret.push( random_string_chars.substr(Math.floor(Math.random() * max),1) );\n    }\n    return ret.join('');\n};\nutils.random_number = function(max) {\n    return Math.floor(Math.random() * max);\n};\nutils.random_number_string = function(max) {\n    var t = (''+(max - 1)).length;\n    var p = Array(t+1).join('0');\n    return (p + utils.random_number(max)).slice(-t);\n};\n\n// Assuming that url looks like: http://asdasd:111/asd\nutils.getOrigin = function(url) {\n    url += '/';\n    var parts = url.split('/').slice(0, 3);\n    return parts.join('/');\n};\n\nutils.isSameOriginUrl = function(url_a, url_b) {\n    // location.origin would do, but it's not always available.\n    if (!url_b) url_b = _window.location.href;\n\n    return (url_a.split('/').slice(0,3).join('/')\n                ===\n            url_b.split('/').slice(0,3).join('/'));\n};\n\n// <METEOR>\n// https://github.com/sockjs/sockjs-client/issues/79\nutils.isSameOriginScheme = function(url_a, url_b) {\n    if (!url_b) url_b = _window.location.href;\n\n    return (url_a.split(':')[0]\n                ===\n            url_b.split(':')[0]);\n};\n// </METEOR>\n\n\nutils.getParentDomain = function(url) {\n    // ipv4 ip address\n    if (/^[0-9.]*$/.test(url)) return url;\n    // ipv6 ip address\n    if (/^\\[/.test(url)) return url;\n    // no dots\n    if (!(/[.]/.test(url))) return url;\n\n    var parts = url.split('.').slice(1);\n    return parts.join('.');\n};\n\nutils.objectExtend = function(dst, src) {\n    for(var k in src) {\n        if (src.hasOwnProperty(k)) {\n            dst[k] = src[k];\n        }\n    }\n    return dst;\n};\n\nvar WPrefix = '_jp';\n\nutils.polluteGlobalNamespace = function() {\n    if (!(WPrefix in _window)) {\n        _window[WPrefix] = {};\n    }\n};\n\nutils.closeFrame = function (code, reason) {\n    return 'c'+JSON.stringify([code, reason]);\n};\n\nutils.userSetCode = function (code) {\n    return code === 1000 || (code >= 3000 && code <= 4999);\n};\n\n// See: http://www.erg.abdn.ac.uk/~gerrit/dccp/notes/ccid2/rto_estimator/\n// and RFC 2988.\nutils.countRTO = function (rtt) {\n    var rto;\n    if (rtt > 100) {\n        rto = 3 * rtt; // rto > 300msec\n    } else {\n        rto = rtt + 200; // 200msec < rto <= 300msec\n    }\n    return rto;\n}\n\nutils.log = function() {\n    if (_window.console && console.log && console.log.apply) {\n        console.log.apply(console, arguments);\n    }\n};\n\nutils.bind = function(fun, that) {\n    if (fun.bind) {\n        return fun.bind(that);\n    } else {\n        return function() {\n            return fun.apply(that, arguments);\n        };\n    }\n};\n\nutils.flatUrl = function(url) {\n    return url.indexOf('?') === -1 && url.indexOf('#') === -1;\n};\n\n// `relativeTo` is an optional absolute URL. If provided, `url` will be\n// interpreted relative to `relativeTo`. Defaults to `document.location`.\n// <METEOR>\nutils.amendUrl = function(url, relativeTo) {\n    var baseUrl;\n    if (relativeTo === undefined) {\n      baseUrl = _document.location;\n    } else {\n      var protocolMatch = /^([a-z0-9.+-]+:)/i.exec(relativeTo);\n      if (protocolMatch) {\n        var protocol = protocolMatch[0].toLowerCase();\n        var rest = relativeTo.substring(protocol.length);\n        var hostMatch = /[a-z0-9\\.-]+(:[0-9]+)?/.exec(rest);\n        if (hostMatch)\n          var host = hostMatch[0];\n      }\n      if (! protocol || ! host)\n        throw new Error(\"relativeTo must be an absolute url\");\n      baseUrl = {\n        protocol: protocol,\n        host: host\n      };\n    }\n    if (!url) {\n        throw new Error('Wrong url for SockJS');\n    }\n    if (!utils.flatUrl(url)) {\n        throw new Error('Only basic urls are supported in SockJS');\n    }\n\n    //  '//abc' --> 'http://abc'\n    if (url.indexOf('//') === 0) {\n        url = baseUrl.protocol + url;\n    }\n    // '/abc' --> 'http://localhost:1234/abc'\n    if (url.indexOf('/') === 0) {\n        url = baseUrl.protocol + '//' + baseUrl.host + url;\n    }\n    // </METEOR>\n    // strip trailing slashes\n    url = url.replace(/[/]+$/,'');\n\n    // We have a full url here, with proto and host. For some browsers\n    // http://localhost:80/ is not in the same origin as http://localhost/\n\t// Remove explicit :80 or :443 in such cases. See #74\n    var parts = url.split(\"/\");\n    if ((parts[0] === \"http:\" && /:80$/.test(parts[2])) ||\n\t    (parts[0] === \"https:\" && /:443$/.test(parts[2]))) {\n\t\tparts[2] = parts[2].replace(/:(80|443)$/, \"\");\n\t}\n    url = parts.join(\"/\");\n    return url;\n};\n\n// IE doesn't support [].indexOf.\nutils.arrIndexOf = function(arr, obj){\n    for(var i=0; i < arr.length; i++){\n        if(arr[i] === obj){\n            return i;\n        }\n    }\n    return -1;\n};\n\nutils.arrSkip = function(arr, obj) {\n    var idx = utils.arrIndexOf(arr, obj);\n    if (idx === -1) {\n        return arr.slice();\n    } else {\n        var dst = arr.slice(0, idx);\n        return dst.concat(arr.slice(idx+1));\n    }\n};\n\n// Via: https://gist.github.com/1133122/2121c601c5549155483f50be3da5305e83b8c5df\nutils.isArray = Array.isArray || function(value) {\n    return {}.toString.call(value).indexOf('Array') >= 0\n};\n\nutils.delay = function(t, fun) {\n    if(typeof t === 'function') {\n        fun = t;\n        t = 0;\n    }\n    return setTimeout(fun, t);\n};\n\n\n// Chars worth escaping, as defined by Douglas Crockford:\n//   https://github.com/douglascrockford/JSON-js/blob/47a9882cddeb1e8529e07af9736218075372b8ac/json2.js#L196\nvar json_escapable = /[\\\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g,\n    json_lookup = {\n\"\\u0000\":\"\\\\u0000\",\"\\u0001\":\"\\\\u0001\",\"\\u0002\":\"\\\\u0002\",\"\\u0003\":\"\\\\u0003\",\n\"\\u0004\":\"\\\\u0004\",\"\\u0005\":\"\\\\u0005\",\"\\u0006\":\"\\\\u0006\",\"\\u0007\":\"\\\\u0007\",\n\"\\b\":\"\\\\b\",\"\\t\":\"\\\\t\",\"\\n\":\"\\\\n\",\"\\u000b\":\"\\\\u000b\",\"\\f\":\"\\\\f\",\"\\r\":\"\\\\r\",\n\"\\u000e\":\"\\\\u000e\",\"\\u000f\":\"\\\\u000f\",\"\\u0010\":\"\\\\u0010\",\"\\u0011\":\"\\\\u0011\",\n\"\\u0012\":\"\\\\u0012\",\"\\u0013\":\"\\\\u0013\",\"\\u0014\":\"\\\\u0014\",\"\\u0015\":\"\\\\u0015\",\n\"\\u0016\":\"\\\\u0016\",\"\\u0017\":\"\\\\u0017\",\"\\u0018\":\"\\\\u0018\",\"\\u0019\":\"\\\\u0019\",\n\"\\u001a\":\"\\\\u001a\",\"\\u001b\":\"\\\\u001b\",\"\\u001c\":\"\\\\u001c\",\"\\u001d\":\"\\\\u001d\",\n\"\\u001e\":\"\\\\u001e\",\"\\u001f\":\"\\\\u001f\",\"\\\"\":\"\\\\\\\"\",\"\\\\\":\"\\\\\\\\\",\n\"\\u007f\":\"\\\\u007f\",\"\\u0080\":\"\\\\u0080\",\"\\u0081\":\"\\\\u0081\",\"\\u0082\":\"\\\\u0082\",\n\"\\u0083\":\"\\\\u0083\",\"\\u0084\":\"\\\\u0084\",\"\\u0085\":\"\\\\u0085\",\"\\u0086\":\"\\\\u0086\",\n\"\\u0087\":\"\\\\u0087\",\"\\u0088\":\"\\\\u0088\",\"\\u0089\":\"\\\\u0089\",\"\\u008a\":\"\\\\u008a\",\n\"\\u008b\":\"\\\\u008b\",\"\\u008c\":\"\\\\u008c\",\"\\u008d\":\"\\\\u008d\",\"\\u008e\":\"\\\\u008e\",\n\"\\u008f\":\"\\\\u008f\",\"\\u0090\":\"\\\\u0090\",\"\\u0091\":\"\\\\u0091\",\"\\u0092\":\"\\\\u0092\",\n\"\\u0093\":\"\\\\u0093\",\"\\u0094\":\"\\\\u0094\",\"\\u0095\":\"\\\\u0095\",\"\\u0096\":\"\\\\u0096\",\n\"\\u0097\":\"\\\\u0097\",\"\\u0098\":\"\\\\u0098\",\"\\u0099\":\"\\\\u0099\",\"\\u009a\":\"\\\\u009a\",\n\"\\u009b\":\"\\\\u009b\",\"\\u009c\":\"\\\\u009c\",\"\\u009d\":\"\\\\u009d\",\"\\u009e\":\"\\\\u009e\",\n\"\\u009f\":\"\\\\u009f\",\"\\u00ad\":\"\\\\u00ad\",\"\\u0600\":\"\\\\u0600\",\"\\u0601\":\"\\\\u0601\",\n\"\\u0602\":\"\\\\u0602\",\"\\u0603\":\"\\\\u0603\",\"\\u0604\":\"\\\\u0604\",\"\\u070f\":\"\\\\u070f\",\n\"\\u17b4\":\"\\\\u17b4\",\"\\u17b5\":\"\\\\u17b5\",\"\\u200c\":\"\\\\u200c\",\"\\u200d\":\"\\\\u200d\",\n\"\\u200e\":\"\\\\u200e\",\"\\u200f\":\"\\\\u200f\",\"\\u2028\":\"\\\\u2028\",\"\\u2029\":\"\\\\u2029\",\n\"\\u202a\":\"\\\\u202a\",\"\\u202b\":\"\\\\u202b\",\"\\u202c\":\"\\\\u202c\",\"\\u202d\":\"\\\\u202d\",\n\"\\u202e\":\"\\\\u202e\",\"\\u202f\":\"\\\\u202f\",\"\\u2060\":\"\\\\u2060\",\"\\u2061\":\"\\\\u2061\",\n\"\\u2062\":\"\\\\u2062\",\"\\u2063\":\"\\\\u2063\",\"\\u2064\":\"\\\\u2064\",\"\\u2065\":\"\\\\u2065\",\n\"\\u2066\":\"\\\\u2066\",\"\\u2067\":\"\\\\u2067\",\"\\u2068\":\"\\\\u2068\",\"\\u2069\":\"\\\\u2069\",\n\"\\u206a\":\"\\\\u206a\",\"\\u206b\":\"\\\\u206b\",\"\\u206c\":\"\\\\u206c\",\"\\u206d\":\"\\\\u206d\",\n\"\\u206e\":\"\\\\u206e\",\"\\u206f\":\"\\\\u206f\",\"\\ufeff\":\"\\\\ufeff\",\"\\ufff0\":\"\\\\ufff0\",\n\"\\ufff1\":\"\\\\ufff1\",\"\\ufff2\":\"\\\\ufff2\",\"\\ufff3\":\"\\\\ufff3\",\"\\ufff4\":\"\\\\ufff4\",\n\"\\ufff5\":\"\\\\ufff5\",\"\\ufff6\":\"\\\\ufff6\",\"\\ufff7\":\"\\\\ufff7\",\"\\ufff8\":\"\\\\ufff8\",\n\"\\ufff9\":\"\\\\ufff9\",\"\\ufffa\":\"\\\\ufffa\",\"\\ufffb\":\"\\\\ufffb\",\"\\ufffc\":\"\\\\ufffc\",\n\"\\ufffd\":\"\\\\ufffd\",\"\\ufffe\":\"\\\\ufffe\",\"\\uffff\":\"\\\\uffff\"};\n\n// Some extra characters that Chrome gets wrong, and substitutes with\n// something else on the wire.\nvar extra_escapable = /[\\x00-\\x1f\\ud800-\\udfff\\ufffe\\uffff\\u0300-\\u0333\\u033d-\\u0346\\u034a-\\u034c\\u0350-\\u0352\\u0357-\\u0358\\u035c-\\u0362\\u0374\\u037e\\u0387\\u0591-\\u05af\\u05c4\\u0610-\\u0617\\u0653-\\u0654\\u0657-\\u065b\\u065d-\\u065e\\u06df-\\u06e2\\u06eb-\\u06ec\\u0730\\u0732-\\u0733\\u0735-\\u0736\\u073a\\u073d\\u073f-\\u0741\\u0743\\u0745\\u0747\\u07eb-\\u07f1\\u0951\\u0958-\\u095f\\u09dc-\\u09dd\\u09df\\u0a33\\u0a36\\u0a59-\\u0a5b\\u0a5e\\u0b5c-\\u0b5d\\u0e38-\\u0e39\\u0f43\\u0f4d\\u0f52\\u0f57\\u0f5c\\u0f69\\u0f72-\\u0f76\\u0f78\\u0f80-\\u0f83\\u0f93\\u0f9d\\u0fa2\\u0fa7\\u0fac\\u0fb9\\u1939-\\u193a\\u1a17\\u1b6b\\u1cda-\\u1cdb\\u1dc0-\\u1dcf\\u1dfc\\u1dfe\\u1f71\\u1f73\\u1f75\\u1f77\\u1f79\\u1f7b\\u1f7d\\u1fbb\\u1fbe\\u1fc9\\u1fcb\\u1fd3\\u1fdb\\u1fe3\\u1feb\\u1fee-\\u1fef\\u1ff9\\u1ffb\\u1ffd\\u2000-\\u2001\\u20d0-\\u20d1\\u20d4-\\u20d7\\u20e7-\\u20e9\\u2126\\u212a-\\u212b\\u2329-\\u232a\\u2adc\\u302b-\\u302c\\uaab2-\\uaab3\\uf900-\\ufa0d\\ufa10\\ufa12\\ufa15-\\ufa1e\\ufa20\\ufa22\\ufa25-\\ufa26\\ufa2a-\\ufa2d\\ufa30-\\ufa6d\\ufa70-\\ufad9\\ufb1d\\ufb1f\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufb4e\\ufff0-\\uffff]/g,\n    extra_lookup;\n\n// JSON Quote string. Use native implementation when possible.\nvar JSONQuote = (JSON && JSON.stringify) || function(string) {\n    json_escapable.lastIndex = 0;\n    if (json_escapable.test(string)) {\n        string = string.replace(json_escapable, function(a) {\n            return json_lookup[a];\n        });\n    }\n    return '\"' + string + '\"';\n};\n\n// This may be quite slow, so let's delay until user actually uses bad\n// characters.\nvar unroll_lookup = function(escapable) {\n    var i;\n    var unrolled = {}\n    var c = []\n    for(i=0; i<65536; i++) {\n        c.push( String.fromCharCode(i) );\n    }\n    escapable.lastIndex = 0;\n    c.join('').replace(escapable, function (a) {\n        unrolled[ a ] = '\\\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);\n        return '';\n    });\n    escapable.lastIndex = 0;\n    return unrolled;\n};\n\n// Quote string, also taking care of unicode characters that browsers\n// often break. Especially, take care of unicode surrogates:\n//    http://en.wikipedia.org/wiki/Mapping_of_Unicode_characters#Surrogates\nutils.quote = function(string) {\n    var quoted = JSONQuote(string);\n\n    // In most cases this should be very fast and good enough.\n    extra_escapable.lastIndex = 0;\n    if(!extra_escapable.test(quoted)) {\n        return quoted;\n    }\n\n    if(!extra_lookup) extra_lookup = unroll_lookup(extra_escapable);\n\n    return quoted.replace(extra_escapable, function(a) {\n        return extra_lookup[a];\n    });\n}\n\nvar _all_protocols = ['websocket',\n                      'xdr-streaming',\n                      'xhr-streaming',\n                      'iframe-eventsource',\n                      'iframe-htmlfile',\n                      'xdr-polling',\n                      'xhr-polling',\n                      'iframe-xhr-polling',\n                      'jsonp-polling'];\n\nutils.probeProtocols = function() {\n    var probed = {};\n    for(var i=0; i<_all_protocols.length; i++) {\n        var protocol = _all_protocols[i];\n        // User can have a typo in protocol name.\n        probed[protocol] = SockJS[protocol] &&\n                           SockJS[protocol].enabled();\n    }\n    return probed;\n};\n\nutils.detectProtocols = function(probed, protocols_whitelist, info) {\n    var pe = {},\n        protocols = [];\n    if (!protocols_whitelist) protocols_whitelist = _all_protocols;\n    for(var i=0; i<protocols_whitelist.length; i++) {\n        var protocol = protocols_whitelist[i];\n        pe[protocol] = probed[protocol];\n    }\n    var maybe_push = function(protos) {\n        var proto = protos.shift();\n        if (pe[proto]) {\n            protocols.push(proto);\n        } else {\n            if (protos.length > 0) {\n                maybe_push(protos);\n            }\n        }\n    }\n\n    // 1. Websocket\n    if (info.websocket !== false) {\n        maybe_push(['websocket']);\n    }\n\n    // 2. Streaming\n    if (pe['xhr-streaming'] && !info.null_origin) {\n        protocols.push('xhr-streaming');\n    } else {\n        if (pe['xdr-streaming'] && !info.cookie_needed && !info.null_origin) {\n            protocols.push('xdr-streaming');\n        } else {\n            maybe_push(['iframe-eventsource',\n                        'iframe-htmlfile']);\n        }\n    }\n\n    // 3. Polling\n    if (pe['xhr-polling'] && !info.null_origin) {\n        protocols.push('xhr-polling');\n    } else {\n        if (pe['xdr-polling'] && !info.cookie_needed && !info.null_origin) {\n            protocols.push('xdr-polling');\n        } else {\n            maybe_push(['iframe-xhr-polling',\n                        'jsonp-polling']);\n        }\n    }\n    return protocols;\n}\n//         [*] End of lib/utils.js\n\n\n//         [*] Including lib/dom.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\n// May be used by htmlfile jsonp and transports.\nvar MPrefix = '_sockjs_global';\nutils.createHook = function() {\n    var window_id = 'a' + utils.random_string(8);\n    if (!(MPrefix in _window)) {\n        var map = {};\n        _window[MPrefix] = function(window_id) {\n            if (!(window_id in map)) {\n                map[window_id] = {\n                    id: window_id,\n                    del: function() {delete map[window_id];}\n                };\n            }\n            return map[window_id];\n        }\n    }\n    return _window[MPrefix](window_id);\n};\n\n\n\nutils.attachMessage = function(listener) {\n    utils.attachEvent('message', listener);\n};\nutils.attachEvent = function(event, listener) {\n    if (typeof _window.addEventListener !== 'undefined') {\n        _window.addEventListener(event, listener, false);\n    } else {\n        // IE quirks.\n        // According to: http://stevesouders.com/misc/test-postmessage.php\n        // the message gets delivered only to 'document', not 'window'.\n        _document.attachEvent(\"on\" + event, listener);\n        // I get 'window' for ie8.\n        _window.attachEvent(\"on\" + event, listener);\n    }\n};\n\nutils.detachMessage = function(listener) {\n    utils.detachEvent('message', listener);\n};\nutils.detachEvent = function(event, listener) {\n    if (typeof _window.addEventListener !== 'undefined') {\n        _window.removeEventListener(event, listener, false);\n    } else {\n        _document.detachEvent(\"on\" + event, listener);\n        _window.detachEvent(\"on\" + event, listener);\n    }\n};\n\n\nvar on_unload = {};\n// Things registered after beforeunload are to be called immediately.\nvar after_unload = false;\n\nvar trigger_unload_callbacks = function() {\n    for(var ref in on_unload) {\n        on_unload[ref]();\n        delete on_unload[ref];\n    };\n};\n\nvar unload_triggered = function() {\n    if(after_unload) return;\n    after_unload = true;\n    trigger_unload_callbacks();\n};\n\n// 'unload' alone is not reliable in opera within an iframe, but we\n// can't use `beforeunload` as IE fires it on javascript: links.\nutils.attachEvent('unload', unload_triggered);\n\nutils.unload_add = function(listener) {\n    var ref = utils.random_string(8);\n    on_unload[ref] = listener;\n    if (after_unload) {\n        utils.delay(trigger_unload_callbacks);\n    }\n    return ref;\n};\nutils.unload_del = function(ref) {\n    if (ref in on_unload)\n        delete on_unload[ref];\n};\n\n\nutils.createIframe = function (iframe_url, error_callback) {\n    var iframe = _document.createElement('iframe');\n    var tref, unload_ref;\n    var unattach = function() {\n        clearTimeout(tref);\n        // Explorer had problems with that.\n        try {iframe.onload = null;} catch (x) {}\n        iframe.onerror = null;\n    };\n    var cleanup = function() {\n        if (iframe) {\n            unattach();\n            // This timeout makes chrome fire onbeforeunload event\n            // within iframe. Without the timeout it goes straight to\n            // onunload.\n            setTimeout(function() {\n                if(iframe) {\n                    iframe.parentNode.removeChild(iframe);\n                }\n                iframe = null;\n            }, 0);\n            utils.unload_del(unload_ref);\n        }\n    };\n    var onerror = function(r) {\n        if (iframe) {\n            cleanup();\n            error_callback(r);\n        }\n    };\n    var post = function(msg, origin) {\n        try {\n            // When the iframe is not loaded, IE raises an exception\n            // on 'contentWindow'.\n            if (iframe && iframe.contentWindow) {\n                iframe.contentWindow.postMessage(msg, origin);\n            }\n        } catch (x) {};\n    };\n\n    iframe.src = iframe_url;\n    iframe.style.display = 'none';\n    iframe.style.position = 'absolute';\n    iframe.onerror = function(){onerror('onerror');};\n    iframe.onload = function() {\n        // `onload` is triggered before scripts on the iframe are\n        // executed. Give it few seconds to actually load stuff.\n        clearTimeout(tref);\n        tref = setTimeout(function(){onerror('onload timeout');}, 2000);\n    };\n    _document.body.appendChild(iframe);\n    tref = setTimeout(function(){onerror('timeout');}, 15000);\n    unload_ref = utils.unload_add(cleanup);\n    return {\n        post: post,\n        cleanup: cleanup,\n        loaded: unattach\n    };\n};\n\nutils.createHtmlfile = function (iframe_url, error_callback) {\n    var doc = new ActiveXObject('htmlfile');\n    var tref, unload_ref;\n    var iframe;\n    var unattach = function() {\n        clearTimeout(tref);\n    };\n    var cleanup = function() {\n        if (doc) {\n            unattach();\n            utils.unload_del(unload_ref);\n            iframe.parentNode.removeChild(iframe);\n            iframe = doc = null;\n            CollectGarbage();\n        }\n    };\n    var onerror = function(r)  {\n        if (doc) {\n            cleanup();\n            error_callback(r);\n        }\n    };\n    var post = function(msg, origin) {\n        try {\n            // When the iframe is not loaded, IE raises an exception\n            // on 'contentWindow'.\n            if (iframe && iframe.contentWindow) {\n                iframe.contentWindow.postMessage(msg, origin);\n            }\n        } catch (x) {};\n    };\n\n    doc.open();\n    doc.write('<html><s' + 'cript>' +\n              'document.domain=\"' + document.domain + '\";' +\n              '</s' + 'cript></html>');\n    doc.close();\n    doc.parentWindow[WPrefix] = _window[WPrefix];\n    var c = doc.createElement('div');\n    doc.body.appendChild(c);\n    iframe = doc.createElement('iframe');\n    c.appendChild(iframe);\n    iframe.src = iframe_url;\n    tref = setTimeout(function(){onerror('timeout');}, 15000);\n    unload_ref = utils.unload_add(cleanup);\n    return {\n        post: post,\n        cleanup: cleanup,\n        loaded: unattach\n    };\n};\n//         [*] End of lib/dom.js\n\n\n//         [*] Including lib/dom2.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar AbstractXHRObject = function(){};\nAbstractXHRObject.prototype = new EventEmitter(['chunk', 'finish']);\n\nAbstractXHRObject.prototype._start = function(method, url, payload, opts) {\n    var that = this;\n\n    try {\n        that.xhr = new XMLHttpRequest();\n    } catch(x) {};\n\n    if (!that.xhr) {\n        try {\n            that.xhr = new _window.ActiveXObject('Microsoft.XMLHTTP');\n        } catch(x) {};\n    }\n    if (_window.ActiveXObject || _window.XDomainRequest) {\n        // IE8 caches even POSTs\n        url += ((url.indexOf('?') === -1) ? '?' : '&') + 't='+(+new Date);\n    }\n\n    // Explorer tends to keep connection open, even after the\n    // tab gets closed: http://bugs.jquery.com/ticket/5280\n    that.unload_ref = utils.unload_add(function(){that._cleanup(true);});\n    try {\n        that.xhr.open(method, url, true);\n    } catch(e) {\n        // IE raises an exception on wrong port.\n        that.emit('finish', 0, '');\n        that._cleanup();\n        return;\n    };\n\n    if (!opts || !opts.no_credentials) {\n        // Mozilla docs says https://developer.mozilla.org/en/XMLHttpRequest :\n        // \"This never affects same-site requests.\"\n        that.xhr.withCredentials = 'true';\n    }\n    if (opts && opts.headers) {\n        for(var key in opts.headers) {\n            that.xhr.setRequestHeader(key, opts.headers[key]);\n        }\n    }\n\n    that.xhr.onreadystatechange = function() {\n        if (that.xhr) {\n            var x = that.xhr;\n            switch (x.readyState) {\n            case 3:\n                // IE doesn't like peeking into responseText or status\n                // on Microsoft.XMLHTTP and readystate=3\n                try {\n                    var status = x.status;\n                    var text = x.responseText;\n                } catch (x) {};\n                // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450\n                if (status === 1223) status = 204;\n\n                // IE does return readystate == 3 for 404 answers.\n                if (text && text.length > 0) {\n                    that.emit('chunk', status, text);\n                }\n                break;\n            case 4:\n                var status = x.status;\n                // IE returns 1223 for 204: http://bugs.jquery.com/ticket/1450\n                if (status === 1223) status = 204;\n\n                that.emit('finish', status, x.responseText);\n                that._cleanup(false);\n                break;\n            }\n        }\n    };\n    that.xhr.send(payload);\n};\n\nAbstractXHRObject.prototype._cleanup = function(abort) {\n    var that = this;\n    if (!that.xhr) return;\n    utils.unload_del(that.unload_ref);\n\n    // IE needs this field to be a function\n    that.xhr.onreadystatechange = function(){};\n\n    if (abort) {\n        try {\n            that.xhr.abort();\n        } catch(x) {};\n    }\n    that.unload_ref = that.xhr = null;\n};\n\nAbstractXHRObject.prototype.close = function() {\n    var that = this;\n    that.nuke();\n    that._cleanup(true);\n};\n\nvar XHRCorsObject = utils.XHRCorsObject = function() {\n    var that = this, args = arguments;\n    utils.delay(function(){that._start.apply(that, args);});\n};\nXHRCorsObject.prototype = new AbstractXHRObject();\n\nvar XHRLocalObject = utils.XHRLocalObject = function(method, url, payload) {\n    var that = this;\n    utils.delay(function(){\n        that._start(method, url, payload, {\n            no_credentials: true\n        });\n    });\n};\nXHRLocalObject.prototype = new AbstractXHRObject();\n\n\n\n// References:\n//   http://ajaxian.com/archives/100-line-ajax-wrapper\n//   http://msdn.microsoft.com/en-us/library/cc288060(v=VS.85).aspx\nvar XDRObject = utils.XDRObject = function(method, url, payload) {\n    var that = this;\n    utils.delay(function(){that._start(method, url, payload);});\n};\nXDRObject.prototype = new EventEmitter(['chunk', 'finish']);\nXDRObject.prototype._start = function(method, url, payload) {\n    var that = this;\n    var xdr = new XDomainRequest();\n    // IE caches even POSTs\n    url += ((url.indexOf('?') === -1) ? '?' : '&') + 't='+(+new Date);\n\n    var onerror = xdr.ontimeout = xdr.onerror = function() {\n        that.emit('finish', 0, '');\n        that._cleanup(false);\n    };\n    xdr.onprogress = function() {\n        that.emit('chunk', 200, xdr.responseText);\n    };\n    xdr.onload = function() {\n        that.emit('finish', 200, xdr.responseText);\n        that._cleanup(false);\n    };\n    that.xdr = xdr;\n    that.unload_ref = utils.unload_add(function(){that._cleanup(true);});\n    try {\n        // Fails with AccessDenied if port number is bogus\n        that.xdr.open(method, url);\n        that.xdr.send(payload);\n    } catch(x) {\n        onerror();\n    }\n};\n\nXDRObject.prototype._cleanup = function(abort) {\n    var that = this;\n    if (!that.xdr) return;\n    utils.unload_del(that.unload_ref);\n\n    that.xdr.ontimeout = that.xdr.onerror = that.xdr.onprogress =\n        that.xdr.onload = null;\n    if (abort) {\n        try {\n            that.xdr.abort();\n        } catch(x) {};\n    }\n    that.unload_ref = that.xdr = null;\n};\n\nXDRObject.prototype.close = function() {\n    var that = this;\n    that.nuke();\n    that._cleanup(true);\n};\n\n// 1. Is natively via XHR\n// 2. Is natively via XDR\n// 3. Nope, but postMessage is there so it should work via the Iframe.\n// 4. Nope, sorry.\nutils.isXHRCorsCapable = function() {\n    if (_window.XMLHttpRequest && 'withCredentials' in new XMLHttpRequest()) {\n        return 1;\n    }\n    // XDomainRequest doesn't work if page is served from file://\n    if (_window.XDomainRequest && _document.domain) {\n        return 2;\n    }\n    if (IframeTransport.enabled()) {\n        return 3;\n    }\n    return 4;\n};\n//         [*] End of lib/dom2.js\n\n\n//         [*] Including lib/sockjs.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar SockJS = function(url, dep_protocols_whitelist, options) {\n    if (!(this instanceof SockJS)) {\n        // makes `new` optional\n        return new SockJS(url, dep_protocols_whitelist, options);\n    }\n\n    var that = this, protocols_whitelist;\n    that._options = {devel: false, debug: false, protocols_whitelist: [],\n                     info: undefined, rtt: undefined};\n    if (options) {\n        utils.objectExtend(that._options, options);\n    }\n    that._base_url = utils.amendUrl(url);\n    that._server = that._options.server || utils.random_number_string(1000);\n    if (that._options.protocols_whitelist &&\n        that._options.protocols_whitelist.length) {\n        protocols_whitelist = that._options.protocols_whitelist;\n    } else {\n        // Deprecated API\n        if (typeof dep_protocols_whitelist === 'string' &&\n            dep_protocols_whitelist.length > 0) {\n            protocols_whitelist = [dep_protocols_whitelist];\n        } else if (utils.isArray(dep_protocols_whitelist)) {\n            protocols_whitelist = dep_protocols_whitelist\n        } else {\n            protocols_whitelist = null;\n        }\n        if (protocols_whitelist) {\n            that._debug('Deprecated API: Use \"protocols_whitelist\" option ' +\n                        'instead of supplying protocol list as a second ' +\n                        'parameter to SockJS constructor.');\n        }\n    }\n    that._protocols = [];\n    that.protocol = null;\n    that.readyState = SockJS.CONNECTING;\n    that._ir = createInfoReceiver(that._base_url);\n    that._ir.onfinish = function(info, rtt) {\n        that._ir = null;\n        if (info) {\n            if (that._options.info) {\n                // Override if user supplies the option\n                info = utils.objectExtend(info, that._options.info);\n            }\n            if (that._options.rtt) {\n                rtt = that._options.rtt;\n            }\n            that._applyInfo(info, rtt, protocols_whitelist);\n            that._didClose();\n        } else {\n            that._didClose(1002, 'Can\\'t connect to server', true);\n        }\n    };\n};\n// Inheritance\nSockJS.prototype = new REventTarget();\n\nSockJS.version = \"0.3.4\";\n\nSockJS.CONNECTING = 0;\nSockJS.OPEN = 1;\nSockJS.CLOSING = 2;\nSockJS.CLOSED = 3;\n\nSockJS.prototype._debug = function() {\n    if (this._options.debug)\n        utils.log.apply(utils, arguments);\n};\n\nSockJS.prototype._dispatchOpen = function() {\n    var that = this;\n    if (that.readyState === SockJS.CONNECTING) {\n        if (that._transport_tref) {\n            clearTimeout(that._transport_tref);\n            that._transport_tref = null;\n        }\n        that.readyState = SockJS.OPEN;\n        that.dispatchEvent(new SimpleEvent(\"open\"));\n    } else {\n        // The server might have been restarted, and lost track of our\n        // connection.\n        that._didClose(1006, \"Server lost session\");\n    }\n};\n\nSockJS.prototype._dispatchMessage = function(data) {\n    var that = this;\n    if (that.readyState !== SockJS.OPEN)\n            return;\n    that.dispatchEvent(new SimpleEvent(\"message\", {data: data}));\n};\n\nSockJS.prototype._dispatchHeartbeat = function(data) {\n    var that = this;\n    if (that.readyState !== SockJS.OPEN)\n        return;\n    that.dispatchEvent(new SimpleEvent('heartbeat', {}));\n};\n\nSockJS.prototype._didClose = function(code, reason, force) {\n    var that = this;\n    if (that.readyState !== SockJS.CONNECTING &&\n        that.readyState !== SockJS.OPEN &&\n        that.readyState !== SockJS.CLOSING)\n            throw new Error('INVALID_STATE_ERR');\n    if (that._ir) {\n        that._ir.nuke();\n        that._ir = null;\n    }\n\n    if (that._transport) {\n        that._transport.doCleanup();\n        that._transport = null;\n    }\n\n    var close_event = new SimpleEvent(\"close\", {\n        code: code,\n        reason: reason,\n        wasClean: utils.userSetCode(code)});\n\n    if (!utils.userSetCode(code) &&\n        that.readyState === SockJS.CONNECTING && !force) {\n        if (that._try_next_protocol(close_event)) {\n            return;\n        }\n        close_event = new SimpleEvent(\"close\", {code: 2000,\n                                                reason: \"All transports failed\",\n                                                wasClean: false,\n                                                last_event: close_event});\n    }\n    that.readyState = SockJS.CLOSED;\n\n    utils.delay(function() {\n                   that.dispatchEvent(close_event);\n                });\n};\n\nSockJS.prototype._didMessage = function(data) {\n    var that = this;\n    var type = data.slice(0, 1);\n    switch(type) {\n    case 'o':\n        that._dispatchOpen();\n        break;\n    case 'a':\n        var payload = JSON.parse(data.slice(1) || '[]');\n        for(var i=0; i < payload.length; i++){\n            that._dispatchMessage(payload[i]);\n        }\n        break;\n    case 'm':\n        var payload = JSON.parse(data.slice(1) || 'null');\n        that._dispatchMessage(payload);\n        break;\n    case 'c':\n        var payload = JSON.parse(data.slice(1) || '[]');\n        that._didClose(payload[0], payload[1]);\n        break;\n    case 'h':\n        that._dispatchHeartbeat();\n        break;\n    }\n};\n\nSockJS.prototype._try_next_protocol = function(close_event) {\n    var that = this;\n    if (that.protocol) {\n        that._debug('Closed transport:', that.protocol, ''+close_event);\n        that.protocol = null;\n    }\n    if (that._transport_tref) {\n        clearTimeout(that._transport_tref);\n        that._transport_tref = null;\n    }\n\n    while(1) {\n        var protocol = that.protocol = that._protocols.shift();\n        if (!protocol) {\n            return false;\n        }\n        // Some protocols require access to `body`, what if were in\n        // the `head`?\n        if (SockJS[protocol] &&\n            SockJS[protocol].need_body === true &&\n            (!_document.body ||\n             (typeof _document.readyState !== 'undefined'\n              && _document.readyState !== 'complete'))) {\n            that._protocols.unshift(protocol);\n            that.protocol = 'waiting-for-load';\n            utils.attachEvent('load', function(){\n                that._try_next_protocol();\n            });\n            return true;\n        }\n\n        if (!SockJS[protocol] ||\n              !SockJS[protocol].enabled(that._options)) {\n            that._debug('Skipping transport:', protocol);\n        } else {\n            var roundTrips = SockJS[protocol].roundTrips || 1;\n            var to = ((that._options.rto || 0) * roundTrips) || 5000;\n            that._transport_tref = utils.delay(to, function() {\n                if (that.readyState === SockJS.CONNECTING) {\n                    // I can't understand how it is possible to run\n                    // this timer, when the state is CLOSED, but\n                    // apparently in IE everythin is possible.\n                    that._didClose(2007, \"Transport timeouted\");\n                }\n            });\n\n            var connid = utils.random_string(8);\n            var trans_url = that._base_url + '/' + that._server + '/' + connid;\n            that._debug('Opening transport:', protocol, ' url:'+trans_url,\n                        ' RTO:'+that._options.rto);\n            that._transport = new SockJS[protocol](that, trans_url,\n                                                   that._base_url);\n            return true;\n        }\n    }\n};\n\nSockJS.prototype.close = function(code, reason) {\n    var that = this;\n    if (code && !utils.userSetCode(code))\n        throw new Error(\"INVALID_ACCESS_ERR\");\n    if(that.readyState !== SockJS.CONNECTING &&\n       that.readyState !== SockJS.OPEN) {\n        return false;\n    }\n    that.readyState = SockJS.CLOSING;\n    that._didClose(code || 1000, reason || \"Normal closure\");\n    return true;\n};\n\nSockJS.prototype.send = function(data) {\n    var that = this;\n    if (that.readyState === SockJS.CONNECTING)\n        throw new Error('INVALID_STATE_ERR');\n    if (that.readyState === SockJS.OPEN) {\n        that._transport.doSend(utils.quote('' + data));\n    }\n    return true;\n};\n\nSockJS.prototype._applyInfo = function(info, rtt, protocols_whitelist) {\n    var that = this;\n    that._options.info = info;\n    that._options.rtt = rtt;\n    that._options.rto = utils.countRTO(rtt);\n    that._options.info.null_origin = !_document.domain;\n    // Servers can override base_url, eg to provide a randomized domain name and\n    // avoid browser per-domain connection limits.\n    if (info.base_url)\n      // <METEOR>\n      that._base_url = utils.amendUrl(info.base_url, that._base_url);\n      // </METEOR>\n    var probed = utils.probeProtocols();\n    that._protocols = utils.detectProtocols(probed, protocols_whitelist, info);\n// <METEOR>\n// https://github.com/sockjs/sockjs-client/issues/79\n    // Hack to avoid XDR when using different protocols\n    // We're on IE trying to do cross-protocol. jsonp only.\n    if (!utils.isSameOriginScheme(that._base_url) &&\n        2 === utils.isXHRCorsCapable()) {\n        that._protocols = ['jsonp-polling'];\n    }\n// </METEOR>\n};\n//         [*] End of lib/sockjs.js\n\n\n//         [*] Including lib/trans-websocket.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar WebSocketTransport = SockJS.websocket = function(ri, trans_url) {\n    var that = this;\n    var url = trans_url + '/websocket';\n    if (url.slice(0, 5) === 'https') {\n        url = 'wss' + url.slice(5);\n    } else {\n        url = 'ws' + url.slice(4);\n    }\n    that.ri = ri;\n    that.url = url;\n    var Constructor = _window.WebSocket || _window.MozWebSocket;\n\n    that.ws = new Constructor(that.url);\n    that.ws.onmessage = function(e) {\n        that.ri._didMessage(e.data);\n    };\n    // Firefox has an interesting bug. If a websocket connection is\n    // created after onunload, it stays alive even when user\n    // navigates away from the page. In such situation let's lie -\n    // let's not open the ws connection at all. See:\n    // https://github.com/sockjs/sockjs-client/issues/28\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=696085\n    that.unload_ref = utils.unload_add(function(){that.ws.close()});\n    that.ws.onclose = function() {\n        that.ri._didMessage(utils.closeFrame(1006, \"WebSocket connection broken\"));\n    };\n};\n\nWebSocketTransport.prototype.doSend = function(data) {\n    this.ws.send('[' + data + ']');\n};\n\nWebSocketTransport.prototype.doCleanup = function() {\n    var that = this;\n    var ws = that.ws;\n    if (ws) {\n        ws.onmessage = ws.onclose = null;\n        ws.close();\n        utils.unload_del(that.unload_ref);\n        that.unload_ref = that.ri = that.ws = null;\n    }\n};\n\nWebSocketTransport.enabled = function() {\n    return !!(_window.WebSocket || _window.MozWebSocket);\n};\n\n// In theory, ws should require 1 round trip. But in chrome, this is\n// not very stable over SSL. Most likely a ws connection requires a\n// separate SSL connection, in which case 2 round trips are an\n// absolute minumum.\nWebSocketTransport.roundTrips = 2;\n//         [*] End of lib/trans-websocket.js\n\n\n//         [*] Including lib/trans-sender.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar BufferedSender = function() {};\nBufferedSender.prototype.send_constructor = function(sender) {\n    var that = this;\n    that.send_buffer = [];\n    that.sender = sender;\n};\nBufferedSender.prototype.doSend = function(message) {\n    var that = this;\n    that.send_buffer.push(message);\n    if (!that.send_stop) {\n        that.send_schedule();\n    }\n};\n\n// For polling transports in a situation when in the message callback,\n// new message is being send. If the sending connection was started\n// before receiving one, it is possible to saturate the network and\n// timeout due to the lack of receiving socket. To avoid that we delay\n// sending messages by some small time, in order to let receiving\n// connection be started beforehand. This is only a halfmeasure and\n// does not fix the big problem, but it does make the tests go more\n// stable on slow networks.\nBufferedSender.prototype.send_schedule_wait = function() {\n    var that = this;\n    var tref;\n    that.send_stop = function() {\n        that.send_stop = null;\n        clearTimeout(tref);\n    };\n    tref = utils.delay(25, function() {\n        that.send_stop = null;\n        that.send_schedule();\n    });\n};\n\nBufferedSender.prototype.send_schedule = function() {\n    var that = this;\n    if (that.send_buffer.length > 0) {\n        var payload = '[' + that.send_buffer.join(',') + ']';\n        that.send_stop = that.sender(that.trans_url, payload, function(success, abort_reason) {\n            that.send_stop = null;\n            if (success === false) {\n                that.ri._didClose(1006, 'Sending error ' + abort_reason);\n            } else {\n                that.send_schedule_wait();\n            }\n        });\n        that.send_buffer = [];\n    }\n};\n\nBufferedSender.prototype.send_destructor = function() {\n    var that = this;\n    if (that._send_stop) {\n        that._send_stop();\n    }\n    that._send_stop = null;\n};\n\nvar jsonPGenericSender = function(url, payload, callback) {\n    var that = this;\n\n    if (!('_send_form' in that)) {\n        var form = that._send_form = _document.createElement('form');\n        var area = that._send_area = _document.createElement('textarea');\n        area.name = 'd';\n        form.style.display = 'none';\n        form.style.position = 'absolute';\n        form.method = 'POST';\n        form.enctype = 'application/x-www-form-urlencoded';\n        form.acceptCharset = \"UTF-8\";\n        form.appendChild(area);\n        _document.body.appendChild(form);\n    }\n    var form = that._send_form;\n    var area = that._send_area;\n    var id = 'a' + utils.random_string(8);\n    form.target = id;\n    form.action = url + '/jsonp_send?i=' + id;\n\n    var iframe;\n    try {\n        // ie6 dynamic iframes with target=\"\" support (thanks Chris Lambacher)\n        iframe = _document.createElement('<iframe name=\"'+ id +'\">');\n    } catch(x) {\n        iframe = _document.createElement('iframe');\n        iframe.name = id;\n    }\n    iframe.id = id;\n    form.appendChild(iframe);\n    iframe.style.display = 'none';\n\n    try {\n        area.value = payload;\n    } catch(e) {\n        utils.log('Your browser is seriously broken. Go home! ' + e.message);\n    }\n    form.submit();\n\n    var completed = function(e) {\n        if (!iframe.onerror) return;\n        iframe.onreadystatechange = iframe.onerror = iframe.onload = null;\n        // Opera mini doesn't like if we GC iframe\n        // immediately, thus this timeout.\n        utils.delay(500, function() {\n                       iframe.parentNode.removeChild(iframe);\n                       iframe = null;\n                   });\n        area.value = '';\n        // It is not possible to detect if the iframe succeeded or\n        // failed to submit our form.\n        callback(true);\n    };\n    iframe.onerror = iframe.onload = completed;\n    iframe.onreadystatechange = function(e) {\n        if (iframe.readyState == 'complete') completed();\n    };\n    return completed;\n};\n\nvar createAjaxSender = function(AjaxObject) {\n    return function(url, payload, callback) {\n        var xo = new AjaxObject('POST', url + '/xhr_send', payload);\n        xo.onfinish = function(status, text) {\n            callback(status === 200 || status === 204,\n                     'http status ' + status);\n        };\n        return function(abort_reason) {\n            callback(false, abort_reason);\n        };\n    };\n};\n//         [*] End of lib/trans-sender.js\n\n\n//         [*] Including lib/trans-jsonp-receiver.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\n// Parts derived from Socket.io:\n//    https://github.com/LearnBoost/socket.io/blob/0.6.17/lib/socket.io/transports/jsonp-polling.js\n// and jQuery-JSONP:\n//    https://code.google.com/p/jquery-jsonp/source/browse/trunk/core/jquery.jsonp.js\nvar jsonPGenericReceiver = function(url, callback) {\n    var tref;\n    var script = _document.createElement('script');\n    var script2;  // Opera synchronous load trick.\n    var close_script = function(frame) {\n        if (script2) {\n            script2.parentNode.removeChild(script2);\n            script2 = null;\n        }\n        if (script) {\n            clearTimeout(tref);\n            // Unfortunately, you can't really abort script loading of\n            // the script.\n            script.parentNode.removeChild(script);\n            script.onreadystatechange = script.onerror =\n                script.onload = script.onclick = null;\n            script = null;\n            callback(frame);\n            callback = null;\n        }\n    };\n\n    // IE9 fires 'error' event after orsc or before, in random order.\n    var loaded_okay = false;\n    var error_timer = null;\n\n    script.id = 'a' + utils.random_string(8);\n    script.src = url;\n    script.type = 'text/javascript';\n    script.charset = 'UTF-8';\n    script.onerror = function(e) {\n        if (!error_timer) {\n            // Delay firing close_script.\n            error_timer = setTimeout(function() {\n                if (!loaded_okay) {\n                    close_script(utils.closeFrame(\n                        1006,\n                        \"JSONP script loaded abnormally (onerror)\"));\n                }\n            }, 1000);\n        }\n    };\n    script.onload = function(e) {\n        close_script(utils.closeFrame(1006, \"JSONP script loaded abnormally (onload)\"));\n    };\n\n    script.onreadystatechange = function(e) {\n        if (/loaded|closed/.test(script.readyState)) {\n            if (script && script.htmlFor && script.onclick) {\n                loaded_okay = true;\n                try {\n                    // In IE, actually execute the script.\n                    script.onclick();\n                } catch (x) {}\n            }\n            if (script) {\n                close_script(utils.closeFrame(1006, \"JSONP script loaded abnormally (onreadystatechange)\"));\n            }\n        }\n    };\n    // IE: event/htmlFor/onclick trick.\n    // One can't rely on proper order for onreadystatechange. In order to\n    // make sure, set a 'htmlFor' and 'event' properties, so that\n    // script code will be installed as 'onclick' handler for the\n    // script object. Later, onreadystatechange, manually execute this\n    // code. FF and Chrome doesn't work with 'event' and 'htmlFor'\n    // set. For reference see:\n    //   http://jaubourg.net/2010/07/loading-script-as-onclick-handler-of.html\n    // Also, read on that about script ordering:\n    //   http://wiki.whatwg.org/wiki/Dynamic_Script_Execution_Order\n    if (typeof script.async === 'undefined' && _document.attachEvent) {\n        // According to mozilla docs, in recent browsers script.async defaults\n        // to 'true', so we may use it to detect a good browser:\n        // https://developer.mozilla.org/en/HTML/Element/script\n        if (!/opera/i.test(navigator.userAgent)) {\n            // Naively assume we're in IE\n            try {\n                script.htmlFor = script.id;\n                script.event = \"onclick\";\n            } catch (x) {}\n            script.async = true;\n        } else {\n            // Opera, second sync script hack\n            script2 = _document.createElement('script');\n            script2.text = \"try{var a = document.getElementById('\"+script.id+\"'); if(a)a.onerror();}catch(x){};\";\n            script.async = script2.async = false;\n        }\n    }\n    if (typeof script.async !== 'undefined') {\n        script.async = true;\n    }\n\n    // Fallback mostly for Konqueror - stupid timer, 35 seconds shall be plenty.\n    tref = setTimeout(function() {\n                          close_script(utils.closeFrame(1006, \"JSONP script loaded abnormally (timeout)\"));\n                      }, 35000);\n\n    var head = _document.getElementsByTagName('head')[0];\n    head.insertBefore(script, head.firstChild);\n    if (script2) {\n        head.insertBefore(script2, head.firstChild);\n    }\n    return close_script;\n};\n//         [*] End of lib/trans-jsonp-receiver.js\n\n\n//         [*] Including lib/trans-jsonp-polling.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\n// The simplest and most robust transport, using the well-know cross\n// domain hack - JSONP. This transport is quite inefficient - one\n// mssage could use up to one http request. But at least it works almost\n// everywhere.\n// Known limitations:\n//   o you will get a spinning cursor\n//   o for Konqueror a dumb timer is needed to detect errors\n\n\nvar JsonPTransport = SockJS['jsonp-polling'] = function(ri, trans_url) {\n    utils.polluteGlobalNamespace();\n    var that = this;\n    that.ri = ri;\n    that.trans_url = trans_url;\n    that.send_constructor(jsonPGenericSender);\n    that._schedule_recv();\n};\n\n// Inheritnace\nJsonPTransport.prototype = new BufferedSender();\n\nJsonPTransport.prototype._schedule_recv = function() {\n    var that = this;\n    var callback = function(data) {\n        that._recv_stop = null;\n        if (data) {\n            // no data - heartbeat;\n            if (!that._is_closing) {\n                that.ri._didMessage(data);\n            }\n        }\n        // The message can be a close message, and change is_closing state.\n        if (!that._is_closing) {\n            that._schedule_recv();\n        }\n    };\n    that._recv_stop = jsonPReceiverWrapper(that.trans_url + '/jsonp',\n                                           jsonPGenericReceiver, callback);\n};\n\nJsonPTransport.enabled = function() {\n    return true;\n};\n\nJsonPTransport.need_body = true;\n\n\nJsonPTransport.prototype.doCleanup = function() {\n    var that = this;\n    that._is_closing = true;\n    if (that._recv_stop) {\n        that._recv_stop();\n    }\n    that.ri = that._recv_stop = null;\n    that.send_destructor();\n};\n\n\n// Abstract away code that handles global namespace pollution.\nvar jsonPReceiverWrapper = function(url, constructReceiver, user_callback) {\n    var id = 'a' + utils.random_string(6);\n    var url_id = url + '?c=' + escape(WPrefix + '.' + id);\n\n    // Unfortunately it is not possible to abort loading of the\n    // script. We need to keep track of frake close frames.\n    var aborting = 0;\n\n    // Callback will be called exactly once.\n    var callback = function(frame) {\n        switch(aborting) {\n        case 0:\n            // Normal behaviour - delete hook _and_ emit message.\n            delete _window[WPrefix][id];\n            user_callback(frame);\n            break;\n        case 1:\n            // Fake close frame - emit but don't delete hook.\n            user_callback(frame);\n            aborting = 2;\n            break;\n        case 2:\n            // Got frame after connection was closed, delete hook, don't emit.\n            delete _window[WPrefix][id];\n            break;\n        }\n    };\n\n    var close_script = constructReceiver(url_id, callback);\n    _window[WPrefix][id] = close_script;\n    var stop = function() {\n        if (_window[WPrefix][id]) {\n            aborting = 1;\n            _window[WPrefix][id](utils.closeFrame(1000, \"JSONP user aborted read\"));\n        }\n    };\n    return stop;\n};\n//         [*] End of lib/trans-jsonp-polling.js\n\n\n//         [*] Including lib/trans-xhr.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar AjaxBasedTransport = function() {};\nAjaxBasedTransport.prototype = new BufferedSender();\n\nAjaxBasedTransport.prototype.run = function(ri, trans_url,\n                                            url_suffix, Receiver, AjaxObject) {\n    var that = this;\n    that.ri = ri;\n    that.trans_url = trans_url;\n    that.send_constructor(createAjaxSender(AjaxObject));\n    that.poll = new Polling(ri, Receiver,\n                            trans_url + url_suffix, AjaxObject);\n};\n\nAjaxBasedTransport.prototype.doCleanup = function() {\n    var that = this;\n    if (that.poll) {\n        that.poll.abort();\n        that.poll = null;\n    }\n};\n\n// xhr-streaming\nvar XhrStreamingTransport = SockJS['xhr-streaming'] = function(ri, trans_url) {\n    this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XHRCorsObject);\n};\n\nXhrStreamingTransport.prototype = new AjaxBasedTransport();\n\nXhrStreamingTransport.enabled = function() {\n    // Support for CORS Ajax aka Ajax2? Opera 12 claims CORS but\n    // doesn't do streaming.\n    return (_window.XMLHttpRequest &&\n            'withCredentials' in new XMLHttpRequest() &&\n            (!/opera/i.test(navigator.userAgent)));\n};\nXhrStreamingTransport.roundTrips = 2; // preflight, ajax\n\n// Safari gets confused when a streaming ajax request is started\n// before onload. This causes the load indicator to spin indefinetely.\nXhrStreamingTransport.need_body = true;\n\n\n// According to:\n//   http://stackoverflow.com/questions/1641507/detect-browser-support-for-cross-domain-xmlhttprequests\n//   http://hacks.mozilla.org/2009/07/cross-site-xmlhttprequest-with-cors/\n\n\n// xdr-streaming\nvar XdrStreamingTransport = SockJS['xdr-streaming'] = function(ri, trans_url) {\n    this.run(ri, trans_url, '/xhr_streaming', XhrReceiver, utils.XDRObject);\n};\n\nXdrStreamingTransport.prototype = new AjaxBasedTransport();\n\nXdrStreamingTransport.enabled = function() {\n    return !!_window.XDomainRequest;\n};\nXdrStreamingTransport.roundTrips = 2; // preflight, ajax\n\n\n\n// xhr-polling\nvar XhrPollingTransport = SockJS['xhr-polling'] = function(ri, trans_url) {\n    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRCorsObject);\n};\n\nXhrPollingTransport.prototype = new AjaxBasedTransport();\n\nXhrPollingTransport.enabled = XhrStreamingTransport.enabled;\nXhrPollingTransport.roundTrips = 2; // preflight, ajax\n\n\n// xdr-polling\nvar XdrPollingTransport = SockJS['xdr-polling'] = function(ri, trans_url) {\n    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XDRObject);\n};\n\nXdrPollingTransport.prototype = new AjaxBasedTransport();\n\nXdrPollingTransport.enabled = XdrStreamingTransport.enabled;\nXdrPollingTransport.roundTrips = 2; // preflight, ajax\n//         [*] End of lib/trans-xhr.js\n\n\n//         [*] Including lib/trans-iframe.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\n// Few cool transports do work only for same-origin. In order to make\n// them working cross-domain we shall use iframe, served form the\n// remote domain. New browsers, have capabilities to communicate with\n// cross domain iframe, using postMessage(). In IE it was implemented\n// from IE 8+, but of course, IE got some details wrong:\n//    http://msdn.microsoft.com/en-us/library/cc197015(v=VS.85).aspx\n//    http://stevesouders.com/misc/test-postmessage.php\n\nvar IframeTransport = function() {};\n\nIframeTransport.prototype.i_constructor = function(ri, trans_url, base_url) {\n    var that = this;\n    that.ri = ri;\n    that.origin = utils.getOrigin(base_url);\n    that.base_url = base_url;\n    that.trans_url = trans_url;\n\n    var iframe_url = base_url + '/iframe.html';\n    if (that.ri._options.devel) {\n        iframe_url += '?t=' + (+new Date);\n    }\n    that.window_id = utils.random_string(8);\n    iframe_url += '#' + that.window_id;\n\n    that.iframeObj = utils.createIframe(iframe_url, function(r) {\n                                            that.ri._didClose(1006, \"Unable to load an iframe (\" + r + \")\");\n                                        });\n\n    that.onmessage_cb = utils.bind(that.onmessage, that);\n    utils.attachMessage(that.onmessage_cb);\n};\n\nIframeTransport.prototype.doCleanup = function() {\n    var that = this;\n    if (that.iframeObj) {\n        utils.detachMessage(that.onmessage_cb);\n        try {\n            // When the iframe is not loaded, IE raises an exception\n            // on 'contentWindow'.\n            if (that.iframeObj.iframe.contentWindow) {\n                that.postMessage('c');\n            }\n        } catch (x) {}\n        that.iframeObj.cleanup();\n        that.iframeObj = null;\n        that.onmessage_cb = that.iframeObj = null;\n    }\n};\n\nIframeTransport.prototype.onmessage = function(e) {\n    var that = this;\n    if (e.origin !== that.origin) return;\n    var window_id = e.data.slice(0, 8);\n    var type = e.data.slice(8, 9);\n    var data = e.data.slice(9);\n\n    if (window_id !== that.window_id) return;\n\n    switch(type) {\n    case 's':\n        that.iframeObj.loaded();\n        that.postMessage('s', JSON.stringify([SockJS.version, that.protocol, that.trans_url, that.base_url]));\n        break;\n    case 't':\n        that.ri._didMessage(data);\n        break;\n    }\n};\n\nIframeTransport.prototype.postMessage = function(type, data) {\n    var that = this;\n    that.iframeObj.post(that.window_id + type + (data || ''), that.origin);\n};\n\nIframeTransport.prototype.doSend = function (message) {\n    this.postMessage('m', message);\n};\n\nIframeTransport.enabled = function() {\n    // postMessage misbehaves in konqueror 4.6.5 - the messages are delivered with\n    // huge delay, or not at all.\n    var konqueror = navigator && navigator.userAgent && navigator.userAgent.indexOf('Konqueror') !== -1;\n    return ((typeof _window.postMessage === 'function' ||\n            typeof _window.postMessage === 'object') && (!konqueror));\n};\n//         [*] End of lib/trans-iframe.js\n\n\n//         [*] Including lib/trans-iframe-within.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar curr_window_id;\n\nvar postMessage = function (type, data) {\n    if(parent !== _window) {\n        parent.postMessage(curr_window_id + type + (data || ''), '*');\n    } else {\n        utils.log(\"Can't postMessage, no parent window.\", type, data);\n    }\n};\n\nvar FacadeJS = function() {};\nFacadeJS.prototype._didClose = function (code, reason) {\n    postMessage('t', utils.closeFrame(code, reason));\n};\nFacadeJS.prototype._didMessage = function (frame) {\n    postMessage('t', frame);\n};\nFacadeJS.prototype._doSend = function (data) {\n    this._transport.doSend(data);\n};\nFacadeJS.prototype._doCleanup = function () {\n    this._transport.doCleanup();\n};\n\nutils.parent_origin = undefined;\n\nSockJS.bootstrap_iframe = function() {\n    var facade;\n    curr_window_id = _document.location.hash.slice(1);\n    var onMessage = function(e) {\n        if(e.source !== parent) return;\n        if(typeof utils.parent_origin === 'undefined')\n            utils.parent_origin = e.origin;\n        if (e.origin !== utils.parent_origin) return;\n\n        var window_id = e.data.slice(0, 8);\n        var type = e.data.slice(8, 9);\n        var data = e.data.slice(9);\n        if (window_id !== curr_window_id) return;\n        switch(type) {\n        case 's':\n            var p = JSON.parse(data);\n            var version = p[0];\n            var protocol = p[1];\n            var trans_url = p[2];\n            var base_url = p[3];\n            if (version !== SockJS.version) {\n                utils.log(\"Incompatibile SockJS! Main site uses:\" +\n                          \" \\\"\" + version + \"\\\", the iframe:\" +\n                          \" \\\"\" + SockJS.version + \"\\\".\");\n            }\n            if (!utils.flatUrl(trans_url) || !utils.flatUrl(base_url)) {\n                utils.log(\"Only basic urls are supported in SockJS\");\n                return;\n            }\n\n            if (!utils.isSameOriginUrl(trans_url) ||\n                !utils.isSameOriginUrl(base_url)) {\n                utils.log(\"Can't connect to different domain from within an \" +\n                          \"iframe. (\" + JSON.stringify([_window.location.href, trans_url, base_url]) +\n                          \")\");\n                return;\n            }\n            facade = new FacadeJS();\n            facade._transport = new FacadeJS[protocol](facade, trans_url, base_url);\n            break;\n        case 'm':\n            facade._doSend(data);\n            break;\n        case 'c':\n            if (facade)\n                facade._doCleanup();\n            facade = null;\n            break;\n        }\n    };\n\n    // alert('test ticker');\n    // facade = new FacadeJS();\n    // facade._transport = new FacadeJS['w-iframe-xhr-polling'](facade, 'http://host.com:9999/ticker/12/basd');\n\n    utils.attachMessage(onMessage);\n\n    // Start\n    postMessage('s');\n};\n//         [*] End of lib/trans-iframe-within.js\n\n\n//         [*] Including lib/info.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar InfoReceiver = function(base_url, AjaxObject) {\n    var that = this;\n    utils.delay(function(){that.doXhr(base_url, AjaxObject);});\n};\n\nInfoReceiver.prototype = new EventEmitter(['finish']);\n\nInfoReceiver.prototype.doXhr = function(base_url, AjaxObject) {\n    var that = this;\n    var t0 = (new Date()).getTime();\n\n// <METEOR>\n  // https://github.com/sockjs/sockjs-client/pull/129\n  // var xo = new AjaxObject('GET', base_url + '/info');\n\n    var xo = new AjaxObject(\n      // add cachebusting parameter to url to work around a chrome bug:\n      // https://code.google.com/p/chromium/issues/detail?id=263981\n      // or misbehaving proxies.\n      'GET', base_url + '/info?cb=' + utils.random_string(10))\n// </METEOR>\n\n    var tref = utils.delay(8000,\n                           function(){xo.ontimeout();});\n\n    xo.onfinish = function(status, text) {\n        clearTimeout(tref);\n        tref = null;\n        if (status === 200) {\n            var rtt = (new Date()).getTime() - t0;\n            var info = JSON.parse(text);\n            if (typeof info !== 'object') info = {};\n            that.emit('finish', info, rtt);\n        } else {\n            that.emit('finish');\n        }\n    };\n    xo.ontimeout = function() {\n        xo.close();\n        that.emit('finish');\n    };\n};\n\nvar InfoReceiverIframe = function(base_url) {\n    var that = this;\n    var go = function() {\n        var ifr = new IframeTransport();\n        ifr.protocol = 'w-iframe-info-receiver';\n        var fun = function(r) {\n            if (typeof r === 'string' && r.substr(0,1) === 'm') {\n                var d = JSON.parse(r.substr(1));\n                var info = d[0], rtt = d[1];\n                that.emit('finish', info, rtt);\n            } else {\n                that.emit('finish');\n            }\n            ifr.doCleanup();\n            ifr = null;\n        };\n        var mock_ri = {\n            _options: {},\n            _didClose: fun,\n            _didMessage: fun\n        };\n        ifr.i_constructor(mock_ri, base_url, base_url);\n    }\n    if(!_document.body) {\n        utils.attachEvent('load', go);\n    } else {\n        go();\n    }\n};\nInfoReceiverIframe.prototype = new EventEmitter(['finish']);\n\n\nvar InfoReceiverFake = function() {\n    // It may not be possible to do cross domain AJAX to get the info\n    // data, for example for IE7. But we want to run JSONP, so let's\n    // fake the response, with rtt=2s (rto=6s).\n    var that = this;\n    utils.delay(function() {\n        that.emit('finish', {}, 2000);\n    });\n};\nInfoReceiverFake.prototype = new EventEmitter(['finish']);\n\nvar createInfoReceiver = function(base_url) {\n    if (utils.isSameOriginUrl(base_url)) {\n        // If, for some reason, we have SockJS locally - there's no\n        // need to start up the complex machinery. Just use ajax.\n        return new InfoReceiver(base_url, utils.XHRLocalObject);\n    }\n    switch (utils.isXHRCorsCapable()) {\n    case 1:\n        // XHRLocalObject -> no_credentials=true\n        return new InfoReceiver(base_url, utils.XHRLocalObject);\n    case 2:\n// <METEOR>\n// https://github.com/sockjs/sockjs-client/issues/79\n        // XDR doesn't work across different schemes\n        // http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\n        if (utils.isSameOriginScheme(base_url))\n            return new InfoReceiver(base_url, utils.XDRObject);\n        else\n            return new InfoReceiverFake();\n// </METEOR>\n    case 3:\n        // Opera\n        return new InfoReceiverIframe(base_url);\n    default:\n        // IE 7\n        return new InfoReceiverFake();\n    };\n};\n\n\nvar WInfoReceiverIframe = FacadeJS['w-iframe-info-receiver'] = function(ri, _trans_url, base_url) {\n    var ir = new InfoReceiver(base_url, utils.XHRLocalObject);\n    ir.onfinish = function(info, rtt) {\n        ri._didMessage('m'+JSON.stringify([info, rtt]));\n        ri._didClose();\n    }\n};\nWInfoReceiverIframe.prototype.doCleanup = function() {};\n//         [*] End of lib/info.js\n\n\n//         [*] Including lib/trans-iframe-eventsource.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar EventSourceIframeTransport = SockJS['iframe-eventsource'] = function () {\n    var that = this;\n    that.protocol = 'w-iframe-eventsource';\n    that.i_constructor.apply(that, arguments);\n};\n\nEventSourceIframeTransport.prototype = new IframeTransport();\n\nEventSourceIframeTransport.enabled = function () {\n    return ('EventSource' in _window) && IframeTransport.enabled();\n};\n\nEventSourceIframeTransport.need_body = true;\nEventSourceIframeTransport.roundTrips = 3; // html, javascript, eventsource\n\n\n// w-iframe-eventsource\nvar EventSourceTransport = FacadeJS['w-iframe-eventsource'] = function(ri, trans_url) {\n    this.run(ri, trans_url, '/eventsource', EventSourceReceiver, utils.XHRLocalObject);\n}\nEventSourceTransport.prototype = new AjaxBasedTransport();\n//         [*] End of lib/trans-iframe-eventsource.js\n\n\n//         [*] Including lib/trans-iframe-xhr-polling.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar XhrPollingIframeTransport = SockJS['iframe-xhr-polling'] = function () {\n    var that = this;\n    that.protocol = 'w-iframe-xhr-polling';\n    that.i_constructor.apply(that, arguments);\n};\n\nXhrPollingIframeTransport.prototype = new IframeTransport();\n\nXhrPollingIframeTransport.enabled = function () {\n    return _window.XMLHttpRequest && IframeTransport.enabled();\n};\n\nXhrPollingIframeTransport.need_body = true;\nXhrPollingIframeTransport.roundTrips = 3; // html, javascript, xhr\n\n\n// w-iframe-xhr-polling\nvar XhrPollingITransport = FacadeJS['w-iframe-xhr-polling'] = function(ri, trans_url) {\n    this.run(ri, trans_url, '/xhr', XhrReceiver, utils.XHRLocalObject);\n};\n\nXhrPollingITransport.prototype = new AjaxBasedTransport();\n//         [*] End of lib/trans-iframe-xhr-polling.js\n\n\n//         [*] Including lib/trans-iframe-htmlfile.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\n// This transport generally works in any browser, but will cause a\n// spinning cursor to appear in any browser other than IE.\n// We may test this transport in all browsers - why not, but in\n// production it should be only run in IE.\n\nvar HtmlFileIframeTransport = SockJS['iframe-htmlfile'] = function () {\n    var that = this;\n    that.protocol = 'w-iframe-htmlfile';\n    that.i_constructor.apply(that, arguments);\n};\n\n// Inheritance.\nHtmlFileIframeTransport.prototype = new IframeTransport();\n\nHtmlFileIframeTransport.enabled = function() {\n    return IframeTransport.enabled();\n};\n\nHtmlFileIframeTransport.need_body = true;\nHtmlFileIframeTransport.roundTrips = 3; // html, javascript, htmlfile\n\n\n// w-iframe-htmlfile\nvar HtmlFileTransport = FacadeJS['w-iframe-htmlfile'] = function(ri, trans_url) {\n    this.run(ri, trans_url, '/htmlfile', HtmlfileReceiver, utils.XHRLocalObject);\n};\nHtmlFileTransport.prototype = new AjaxBasedTransport();\n//         [*] End of lib/trans-iframe-htmlfile.js\n\n\n//         [*] Including lib/trans-polling.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar Polling = function(ri, Receiver, recv_url, AjaxObject) {\n    var that = this;\n    that.ri = ri;\n    that.Receiver = Receiver;\n    that.recv_url = recv_url;\n    that.AjaxObject = AjaxObject;\n    that._scheduleRecv();\n};\n\nPolling.prototype._scheduleRecv = function() {\n    var that = this;\n    var poll = that.poll = new that.Receiver(that.recv_url, that.AjaxObject);\n    var msg_counter = 0;\n    poll.onmessage = function(e) {\n        msg_counter += 1;\n        that.ri._didMessage(e.data);\n    };\n    poll.onclose = function(e) {\n        that.poll = poll = poll.onmessage = poll.onclose = null;\n        if (!that.poll_is_closing) {\n            if (e.reason === 'permanent') {\n                that.ri._didClose(1006, 'Polling error (' + e.reason + ')');\n            } else {\n                that._scheduleRecv();\n            }\n        }\n    };\n};\n\nPolling.prototype.abort = function() {\n    var that = this;\n    that.poll_is_closing = true;\n    if (that.poll) {\n        that.poll.abort();\n    }\n};\n//         [*] End of lib/trans-polling.js\n\n\n//         [*] Including lib/trans-receiver-eventsource.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar EventSourceReceiver = function(url) {\n    var that = this;\n    var es = new EventSource(url);\n    es.onmessage = function(e) {\n        that.dispatchEvent(new SimpleEvent('message',\n                                           {'data': unescape(e.data)}));\n    };\n    that.es_close = es.onerror = function(e, abort_reason) {\n        // ES on reconnection has readyState = 0 or 1.\n        // on network error it's CLOSED = 2\n        var reason = abort_reason ? 'user' :\n            (es.readyState !== 2 ? 'network' : 'permanent');\n        that.es_close = es.onmessage = es.onerror = null;\n        // EventSource reconnects automatically.\n        es.close();\n        es = null;\n        // Safari and chrome < 15 crash if we close window before\n        // waiting for ES cleanup. See:\n        //   https://code.google.com/p/chromium/issues/detail?id=89155\n        utils.delay(200, function() {\n                        that.dispatchEvent(new SimpleEvent('close', {reason: reason}));\n                    });\n    };\n};\n\nEventSourceReceiver.prototype = new REventTarget();\n\nEventSourceReceiver.prototype.abort = function() {\n    var that = this;\n    if (that.es_close) {\n        that.es_close({}, true);\n    }\n};\n//         [*] End of lib/trans-receiver-eventsource.js\n\n\n//         [*] Including lib/trans-receiver-htmlfile.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar _is_ie_htmlfile_capable;\nvar isIeHtmlfileCapable = function() {\n    if (_is_ie_htmlfile_capable === undefined) {\n        if ('ActiveXObject' in _window) {\n            try {\n                _is_ie_htmlfile_capable = !!new ActiveXObject('htmlfile');\n            } catch (x) {}\n        } else {\n            _is_ie_htmlfile_capable = false;\n        }\n    }\n    return _is_ie_htmlfile_capable;\n};\n\n\nvar HtmlfileReceiver = function(url) {\n    var that = this;\n    utils.polluteGlobalNamespace();\n\n    that.id = 'a' + utils.random_string(6, 26);\n    url += ((url.indexOf('?') === -1) ? '?' : '&') +\n        'c=' + escape(WPrefix + '.' + that.id);\n\n    var constructor = isIeHtmlfileCapable() ?\n        utils.createHtmlfile : utils.createIframe;\n\n    var iframeObj;\n    _window[WPrefix][that.id] = {\n        start: function () {\n            iframeObj.loaded();\n        },\n        message: function (data) {\n            that.dispatchEvent(new SimpleEvent('message', {'data': data}));\n        },\n        stop: function () {\n            that.iframe_close({}, 'network');\n        }\n    };\n    that.iframe_close = function(e, abort_reason) {\n        iframeObj.cleanup();\n        that.iframe_close = iframeObj = null;\n        delete _window[WPrefix][that.id];\n        that.dispatchEvent(new SimpleEvent('close', {reason: abort_reason}));\n    };\n    iframeObj = constructor(url, function(e) {\n                                that.iframe_close({}, 'permanent');\n                            });\n};\n\nHtmlfileReceiver.prototype = new REventTarget();\n\nHtmlfileReceiver.prototype.abort = function() {\n    var that = this;\n    if (that.iframe_close) {\n        that.iframe_close({}, 'user');\n    }\n};\n//         [*] End of lib/trans-receiver-htmlfile.js\n\n\n//         [*] Including lib/trans-receiver-xhr.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\nvar XhrReceiver = function(url, AjaxObject) {\n    var that = this;\n    var buf_pos = 0;\n\n    that.xo = new AjaxObject('POST', url, null);\n    that.xo.onchunk = function(status, text) {\n        if (status !== 200) return;\n        while (1) {\n            var buf = text.slice(buf_pos);\n            var p = buf.indexOf('\\n');\n            if (p === -1) break;\n            buf_pos += p+1;\n            var msg = buf.slice(0, p);\n            that.dispatchEvent(new SimpleEvent('message', {data: msg}));\n        }\n    };\n    that.xo.onfinish = function(status, text) {\n        that.xo.onchunk(status, text);\n        that.xo = null;\n        var reason = status === 200 ? 'network' : 'permanent';\n        that.dispatchEvent(new SimpleEvent('close', {reason: reason}));\n    }\n};\n\nXhrReceiver.prototype = new REventTarget();\n\nXhrReceiver.prototype.abort = function() {\n    var that = this;\n    if (that.xo) {\n        that.xo.close();\n        that.dispatchEvent(new SimpleEvent('close', {reason: 'user'}));\n        that.xo = null;\n    }\n};\n//         [*] End of lib/trans-receiver-xhr.js\n\n\n//         [*] Including lib/test-hooks.js\n/*\n * ***** BEGIN LICENSE BLOCK *****\n * Copyright (c) 2011-2012 VMware, Inc.\n *\n * For the license see COPYING.\n * ***** END LICENSE BLOCK *****\n */\n\n// For testing\nSockJS.getUtils = function(){\n    return utils;\n};\n\nSockJS.getIframeTransport = function(){\n    return IframeTransport;\n};\n//         [*] End of lib/test-hooks.js\n\n                  return SockJS;\n          })();\nif ('_sockjs_onload' in window) setTimeout(_sockjs_onload, 1);\n\n// AMD compliance\nif (typeof define === 'function' && define.amd) {\n    define('sockjs', [], function(){return SockJS;});\n}\n//     [*] End of lib/index.js\n\n// [*] End of lib/all.js\n","import { DDP, LivedataTest } from \"./namespace.js\";\n\n// @param url {String} URL to Meteor app\n//   \"http://subdomain.meteor.com/\" or \"/\" or\n//   \"ddp+sockjs://foo-**.meteor.com/sockjs\"\nLivedataTest.ClientStream = function (url, options) {\n  var self = this;\n  self.options = _.extend({\n    retry: true\n  }, options);\n  self._initCommon(self.options);\n\n  //// Constants\n\n\n  // how long between hearing heartbeat from the server until we declare\n  // the connection dead. heartbeats come every 45s (stream_server.js)\n  //\n  // NOTE: this is a older timeout mechanism. We now send heartbeats at\n  // the DDP level (https://github.com/meteor/meteor/pull/1865), and\n  // expect those timeouts to kill a non-responsive connection before\n  // this timeout fires. This is kept around for compatibility (when\n  // talking to a server that doesn't support DDP heartbeats) and can be\n  // removed later.\n  self.HEARTBEAT_TIMEOUT = 100*1000;\n\n  self.rawUrl = url;\n  self.socket = null;\n\n  self.heartbeatTimer = null;\n\n  // Listen to global 'online' event if we are running in a browser.\n  // (IE8 does not support addEventListener)\n  if (typeof window !== 'undefined' && window.addEventListener)\n    window.addEventListener(\"online\", _.bind(self._online, self),\n                            false /* useCapture. make FF3.6 happy. */);\n\n  //// Kickoff!\n  self._launchConnection();\n};\n\n_.extend(LivedataTest.ClientStream.prototype, {\n\n  // data is a utf8 string. Data sent while not connected is dropped on\n  // the floor, and it is up the user of this API to retransmit lost\n  // messages on 'reset'\n  send: function (data) {\n    var self = this;\n    if (self.currentStatus.connected) {\n      self.socket.send(data);\n    }\n  },\n\n  // Changes where this connection points\n  _changeUrl: function (url) {\n    var self = this;\n    self.rawUrl = url;\n  },\n\n  _connected: function () {\n    var self = this;\n\n    if (self.connectionTimer) {\n      clearTimeout(self.connectionTimer);\n      self.connectionTimer = null;\n    }\n\n    if (self.currentStatus.connected) {\n      // already connected. do nothing. this probably shouldn't happen.\n      return;\n    }\n\n    // update status\n    self.currentStatus.status = \"connected\";\n    self.currentStatus.connected = true;\n    self.currentStatus.retryCount = 0;\n    self.statusChanged();\n\n    // fire resets. This must come after status change so that clients\n    // can call send from within a reset callback.\n    _.each(self.eventCallbacks.reset, function (callback) { callback(); });\n\n  },\n\n  _cleanup: function (maybeError) {\n    var self = this;\n\n    self._clearConnectionAndHeartbeatTimers();\n    if (self.socket) {\n      self.socket.onmessage = self.socket.onclose\n        = self.socket.onerror = self.socket.onheartbeat = function () {};\n      self.socket.close();\n      self.socket = null;\n    }\n\n    _.each(self.eventCallbacks.disconnect, function (callback) {\n      callback(maybeError);\n    });\n  },\n\n  _clearConnectionAndHeartbeatTimers: function () {\n    var self = this;\n    if (self.connectionTimer) {\n      clearTimeout(self.connectionTimer);\n      self.connectionTimer = null;\n    }\n    if (self.heartbeatTimer) {\n      clearTimeout(self.heartbeatTimer);\n      self.heartbeatTimer = null;\n    }\n  },\n\n  _heartbeat_timeout: function () {\n    var self = this;\n    Meteor._debug(\"Connection timeout. No sockjs heartbeat received.\");\n    self._lostConnection(new DDP.ConnectionError(\"Heartbeat timed out\"));\n  },\n\n  _heartbeat_received: function () {\n    var self = this;\n    // If we've already permanently shut down this stream, the timeout is\n    // already cleared, and we don't need to set it again.\n    if (self._forcedToDisconnect)\n      return;\n    if (self.heartbeatTimer)\n      clearTimeout(self.heartbeatTimer);\n    self.heartbeatTimer = setTimeout(\n      _.bind(self._heartbeat_timeout, self),\n      self.HEARTBEAT_TIMEOUT);\n  },\n\n  _sockjsProtocolsWhitelist: function () {\n    // only allow polling protocols. no streaming.  streaming\n    // makes safari spin.\n    var protocolsWhitelist = [\n      'xdr-polling', 'xhr-polling', 'iframe-xhr-polling', 'jsonp-polling'];\n\n    // iOS 4 and 5 and below crash when using websockets over certain\n    // proxies. this seems to be resolved with iOS 6. eg\n    // https://github.com/LearnBoost/socket.io/issues/193#issuecomment-7308865.\n    //\n    // iOS <4 doesn't support websockets at all so sockjs will just\n    // immediately fall back to http\n    var noWebsockets = navigator &&\n          /iPhone|iPad|iPod/.test(navigator.userAgent) &&\n          /OS 4_|OS 5_/.test(navigator.userAgent);\n\n    if (!noWebsockets)\n      protocolsWhitelist = ['websocket'].concat(protocolsWhitelist);\n\n    return protocolsWhitelist;\n  },\n\n  _launchConnection: function () {\n    var self = this;\n    self._cleanup(); // cleanup the old socket, if there was one.\n\n    var options = _.extend({\n      protocols_whitelist:self._sockjsProtocolsWhitelist()\n    }, self.options._sockjsOptions);\n\n    // Convert raw URL to SockJS URL each time we open a connection, so that we\n    // can connect to random hostnames and get around browser per-host\n    // connection limits.\n    self.socket = new SockJS(toSockjsUrl(self.rawUrl), undefined, options);\n    self.socket.onopen = function (data) {\n      self._connected();\n    };\n    self.socket.onmessage = function (data) {\n      self._heartbeat_received();\n\n      if (self.currentStatus.connected)\n        _.each(self.eventCallbacks.message, function (callback) {\n          callback(data.data);\n        });\n    };\n    self.socket.onclose = function () {\n      self._lostConnection();\n    };\n    self.socket.onerror = function () {\n      // XXX is this ever called?\n      Meteor._debug(\"stream error\", _.toArray(arguments), (new Date()).toDateString());\n    };\n\n    self.socket.onheartbeat =  function () {\n      self._heartbeat_received();\n    };\n\n    if (self.connectionTimer)\n      clearTimeout(self.connectionTimer);\n    self.connectionTimer = setTimeout(function () {\n      self._lostConnection(\n        new DDP.ConnectionError(\"DDP connection timed out\"));\n    }, self.CONNECT_TIMEOUT);\n  }\n});\n","import { DDP, LivedataTest } from \"./namespace.js\";\n\n// XXX from Underscore.String (http://epeli.github.com/underscore.string/)\nvar startsWith = function(str, starts) {\n  return str.length >= starts.length &&\n    str.substring(0, starts.length) === starts;\n};\nvar endsWith = function(str, ends) {\n  return str.length >= ends.length &&\n    str.substring(str.length - ends.length) === ends;\n};\n\n// @param url {String} URL to Meteor app, eg:\n//   \"/\" or \"madewith.meteor.com\" or \"https://foo.meteor.com\"\n//   or \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"\n// @returns {String} URL to the endpoint with the specific scheme and subPath, e.g.\n// for scheme \"http\" and subPath \"sockjs\"\n//   \"http://subdomain.meteor.com/sockjs\" or \"/sockjs\"\n//   or \"https://ddp--1234-foo.meteor.com/sockjs\"\nvar translateUrl =  function(url, newSchemeBase, subPath) {\n  if (! newSchemeBase) {\n    newSchemeBase = \"http\";\n  }\n\n  var ddpUrlMatch = url.match(/^ddp(i?)\\+sockjs:\\/\\//);\n  var httpUrlMatch = url.match(/^http(s?):\\/\\//);\n  var newScheme;\n  if (ddpUrlMatch) {\n    // Remove scheme and split off the host.\n    var urlAfterDDP = url.substr(ddpUrlMatch[0].length);\n    newScheme = ddpUrlMatch[1] === \"i\" ? newSchemeBase : newSchemeBase + \"s\";\n    var slashPos = urlAfterDDP.indexOf('/');\n    var host =\n          slashPos === -1 ? urlAfterDDP : urlAfterDDP.substr(0, slashPos);\n    var rest = slashPos === -1 ? '' : urlAfterDDP.substr(slashPos);\n\n    // In the host (ONLY!), change '*' characters into random digits. This\n    // allows different stream connections to connect to different hostnames\n    // and avoid browser per-hostname connection limits.\n    host = host.replace(/\\*/g, function () {\n      return Math.floor(Random.fraction()*10);\n    });\n\n    return newScheme + '://' + host + rest;\n  } else if (httpUrlMatch) {\n    newScheme = !httpUrlMatch[1] ? newSchemeBase : newSchemeBase + \"s\";\n    var urlAfterHttp = url.substr(httpUrlMatch[0].length);\n    url = newScheme + \"://\" + urlAfterHttp;\n  }\n\n  // Prefix FQDNs but not relative URLs\n  if (url.indexOf(\"://\") === -1 && !startsWith(url, \"/\")) {\n    url = newSchemeBase + \"://\" + url;\n  }\n\n  // XXX This is not what we should be doing: if I have a site\n  // deployed at \"/foo\", then DDP.connect(\"/\") should actually connect\n  // to \"/\", not to \"/foo\". \"/\" is an absolute path. (Contrast: if\n  // deployed at \"/foo\", it would be reasonable for DDP.connect(\"bar\")\n  // to connect to \"/foo/bar\").\n  //\n  // We should make this properly honor absolute paths rather than\n  // forcing the path to be relative to the site root. Simultaneously,\n  // we should set DDP_DEFAULT_CONNECTION_URL to include the site\n  // root. See also client_convenience.js #RationalizingRelativeDDPURLs\n  url = Meteor._relativeToSiteRootUrl(url);\n\n  if (endsWith(url, \"/\"))\n    return url + subPath;\n  else\n    return url + \"/\" + subPath;\n};\n\ntoSockjsUrl = function (url) {\n  return translateUrl(url, \"http\", \"sockjs\");\n};\n\ntoWebsocketUrl = function (url) {\n  var ret = translateUrl(url, \"ws\", \"websocket\");\n  return ret;\n};\n\nLivedataTest.toSockjsUrl = toSockjsUrl;\n\n \n_.extend(LivedataTest.ClientStream.prototype, {\n\n  // Register for callbacks.\n  on: function (name, callback) {\n    var self = this;\n\n    if (name !== 'message' && name !== 'reset' && name !== 'disconnect')\n      throw new Error(\"unknown event type: \" + name);\n\n    if (!self.eventCallbacks[name])\n      self.eventCallbacks[name] = [];\n    self.eventCallbacks[name].push(callback);\n  },\n\n\n  _initCommon: function (options) {\n    var self = this;\n    options = options || {};\n\n    //// Constants\n\n    // how long to wait until we declare the connection attempt\n    // failed.\n    self.CONNECT_TIMEOUT = options.connectTimeoutMs || 10000;\n\n    self.eventCallbacks = {}; // name -> [callback]\n\n    self._forcedToDisconnect = false;\n\n    //// Reactive status\n    self.currentStatus = {\n      status: \"connecting\",\n      connected: false,\n      retryCount: 0\n    };\n\n\n    self.statusListeners = typeof Tracker !== 'undefined' && new Tracker.Dependency;\n    self.statusChanged = function () {\n      if (self.statusListeners)\n        self.statusListeners.changed();\n    };\n\n    //// Retry logic\n    self._retry = new Retry;\n    self.connectionTimer = null;\n\n  },\n\n  // Trigger a reconnect.\n  reconnect: function (options) {\n    var self = this;\n    options = options || {};\n\n    if (options.url) {\n      self._changeUrl(options.url);\n    }\n\n    if (options._sockjsOptions) {\n      self.options._sockjsOptions = options._sockjsOptions;\n    }\n\n    if (self.currentStatus.connected) {\n      if (options._force || options.url) {\n        // force reconnect.\n        self._lostConnection(new DDP.ForcedReconnectError);\n      } // else, noop.\n      return;\n    }\n\n    // if we're mid-connection, stop it.\n    if (self.currentStatus.status === \"connecting\") {\n      // Pretend it's a clean close.\n      self._lostConnection();\n    }\n\n    self._retry.clear();\n    self.currentStatus.retryCount -= 1; // don't count manual retries\n    self._retryNow();\n  },\n\n  disconnect: function (options) {\n    var self = this;\n    options = options || {};\n\n    // Failed is permanent. If we're failed, don't let people go back\n    // online by calling 'disconnect' then 'reconnect'.\n    if (self._forcedToDisconnect)\n      return;\n\n    // If _permanent is set, permanently disconnect a stream. Once a stream\n    // is forced to disconnect, it can never reconnect. This is for\n    // error cases such as ddp version mismatch, where trying again\n    // won't fix the problem.\n    if (options._permanent) {\n      self._forcedToDisconnect = true;\n    }\n\n    self._cleanup();\n    self._retry.clear();\n\n    self.currentStatus = {\n      status: (options._permanent ? \"failed\" : \"offline\"),\n      connected: false,\n      retryCount: 0\n    };\n\n    if (options._permanent && options._error)\n      self.currentStatus.reason = options._error;\n\n    self.statusChanged();\n  },\n\n  // maybeError is set unless it's a clean protocol-level close.\n  _lostConnection: function (maybeError) {\n    var self = this;\n\n    self._cleanup(maybeError);\n    self._retryLater(maybeError); // sets status. no need to do it here.\n  },\n\n  // fired when we detect that we've gone online. try to reconnect\n  // immediately.\n  _online: function () {\n    // if we've requested to be offline by disconnecting, don't reconnect.\n    if (this.currentStatus.status != \"offline\")\n      this.reconnect();\n  },\n\n  _retryLater: function (maybeError) {\n    var self = this;\n\n    var timeout = 0;\n    if (self.options.retry ||\n        (maybeError && maybeError.errorType === \"DDP.ForcedReconnectError\")) {\n      timeout = self._retry.retryLater(\n        self.currentStatus.retryCount,\n        _.bind(self._retryNow, self)\n      );\n      self.currentStatus.status = \"waiting\";\n      self.currentStatus.retryTime = (new Date()).getTime() + timeout;\n    } else {\n      self.currentStatus.status = \"failed\";\n      delete self.currentStatus.retryTime;\n    }\n\n    self.currentStatus.connected = false;\n    self.statusChanged();\n  },\n\n  _retryNow: function () {\n    var self = this;\n\n    if (self._forcedToDisconnect)\n      return;\n\n    self.currentStatus.retryCount += 1;\n    self.currentStatus.status = \"connecting\";\n    self.currentStatus.connected = false;\n    delete self.currentStatus.retryTime;\n    self.statusChanged();\n\n    self._launchConnection();\n  },\n\n\n  // Get current status. Reactive.\n  status: function () {\n    var self = this;\n    if (self.statusListeners)\n      self.statusListeners.depend();\n    return self.currentStatus;\n  }\n});\n\nDDP.ConnectionError = Meteor.makeErrorType(\n  \"DDP.ConnectionError\", function (message) {\n    var self = this;\n    self.message = message;\n});\n\nDDP.ForcedReconnectError = Meteor.makeErrorType(\n  \"DDP.ForcedReconnectError\", function () {});\n","import { DDP, LivedataTest } from \"./namespace.js\";\n\nLivedataTest.SUPPORTED_DDP_VERSIONS = DDPCommon.SUPPORTED_DDP_VERSIONS;\n\n// This is private but it's used in a few places. accounts-base uses\n// it to get the current user. Meteor.setTimeout and friends clear\n// it. We can probably find a better way to factor this.\nDDP._CurrentMethodInvocation = new Meteor.EnvironmentVariable;\nDDP._CurrentPublicationInvocation = new Meteor.EnvironmentVariable;\n\n// XXX: Keep DDP._CurrentInvocation for backwards-compatibility.\nDDP._CurrentInvocation = DDP._CurrentMethodInvocation;\n","import { DDP } from \"./namespace.js\";\n\n// Returns the named sequence of pseudo-random values.\n// The scope will be DDP._CurrentMethodInvocation.get(), so the stream will produce\n// consistent values for method calls on the client and server.\nDDP.randomStream = function (name) {\n  var scope = DDP._CurrentMethodInvocation.get();\n  return DDPCommon.RandomStream.get(scope, name);\n};\n\n\n","import { DDP, LivedataTest } from \"./namespace.js\";\nimport { MongoIDMap } from \"./id_map.js\";\n\nif (Meteor.isServer) {\n  var Fiber = Npm.require('fibers');\n  var Future = Npm.require('fibers/future');\n}\n\n// @param url {String|Object} URL to Meteor app,\n//   or an object as a test hook (see code)\n// Options:\n//   reloadWithOutstanding: is it OK to reload if there are outstanding methods?\n//   headers: extra headers to send on the websockets connection, for\n//     server-to-server DDP only\n//   _sockjsOptions: Specifies options to pass through to the sockjs client\n//   onDDPNegotiationVersionFailure: callback when version negotiation fails.\n//\n// XXX There should be a way to destroy a DDP connection, causing all\n// outstanding method calls to fail.\n//\n// XXX Our current way of handling failure and reconnection is great\n// for an app (where we want to tolerate being disconnected as an\n// expect state, and keep trying forever to reconnect) but cumbersome\n// for something like a command line tool that wants to make a\n// connection, call a method, and print an error if connection\n// fails. We should have better usability in the latter case (while\n// still transparently reconnecting if it's just a transient failure\n// or the server migrating us).\nvar Connection = function (url, options) {\n  var self = this;\n  options = _.extend({\n    onConnected: function () {},\n    onDDPVersionNegotiationFailure: function (description) {\n      Meteor._debug(description);\n    },\n    heartbeatInterval: 17500,\n    heartbeatTimeout: 15000,\n    npmFayeOptions: {},\n    // These options are only for testing.\n    reloadWithOutstanding: false,\n    supportedDDPVersions: DDPCommon.SUPPORTED_DDP_VERSIONS,\n    retry: true,\n    respondToPings: true,\n    // When updates are coming within this ms interval, batch them together.\n    bufferedWritesInterval: 5,\n    // Flush buffers immediately if writes are happening continuously for more than this many ms.\n    bufferedWritesMaxAge: 500\n  }, options);\n\n  // If set, called when we reconnect, queuing method calls _before_ the\n  // existing outstanding ones.\n  // NOTE: This feature has been preserved for backwards compatibility. The\n  // preferred method of setting a callback on reconnect is to use\n  // DDP.onReconnect.\n  self.onReconnect = null;\n\n  // as a test hook, allow passing a stream instead of a url.\n  if (typeof url === \"object\") {\n    self._stream = url;\n  } else {\n    self._stream = new LivedataTest.ClientStream(url, {\n      retry: options.retry,\n      headers: options.headers,\n      _sockjsOptions: options._sockjsOptions,\n      // Used to keep some tests quiet, or for other cases in which\n      // the right thing to do with connection errors is to silently\n      // fail (e.g. sending package usage stats). At some point we\n      // should have a real API for handling client-stream-level\n      // errors.\n      _dontPrintErrors: options._dontPrintErrors,\n      connectTimeoutMs: options.connectTimeoutMs,\n      npmFayeOptions: options.npmFayeOptions\n    });\n  }\n\n  self._lastSessionId = null;\n  self._versionSuggestion = null;  // The last proposed DDP version.\n  self._version = null;   // The DDP version agreed on by client and server.\n  self._stores = {}; // name -> object with methods\n  self._methodHandlers = {}; // name -> func\n  self._nextMethodId = 1;\n  self._supportedDDPVersions = options.supportedDDPVersions;\n\n  self._heartbeatInterval = options.heartbeatInterval;\n  self._heartbeatTimeout = options.heartbeatTimeout;\n\n  // Tracks methods which the user has tried to call but which have not yet\n  // called their user callback (ie, they are waiting on their result or for all\n  // of their writes to be written to the local cache). Map from method ID to\n  // MethodInvoker object.\n  self._methodInvokers = {};\n\n  // Tracks methods which the user has called but whose result messages have not\n  // arrived yet.\n  //\n  // _outstandingMethodBlocks is an array of blocks of methods. Each block\n  // represents a set of methods that can run at the same time. The first block\n  // represents the methods which are currently in flight; subsequent blocks\n  // must wait for previous blocks to be fully finished before they can be sent\n  // to the server.\n  //\n  // Each block is an object with the following fields:\n  // - methods: a list of MethodInvoker objects\n  // - wait: a boolean; if true, this block had a single method invoked with\n  //         the \"wait\" option\n  //\n  // There will never be adjacent blocks with wait=false, because the only thing\n  // that makes methods need to be serialized is a wait method.\n  //\n  // Methods are removed from the first block when their \"result\" is\n  // received. The entire first block is only removed when all of the in-flight\n  // methods have received their results (so the \"methods\" list is empty) *AND*\n  // all of the data written by those methods are visible in the local cache. So\n  // it is possible for the first block's methods list to be empty, if we are\n  // still waiting for some objects to quiesce.\n  //\n  // Example:\n  //  _outstandingMethodBlocks = [\n  //    {wait: false, methods: []},\n  //    {wait: true, methods: [<MethodInvoker for 'login'>]},\n  //    {wait: false, methods: [<MethodInvoker for 'foo'>,\n  //                            <MethodInvoker for 'bar'>]}]\n  // This means that there were some methods which were sent to the server and\n  // which have returned their results, but some of the data written by\n  // the methods may not be visible in the local cache. Once all that data is\n  // visible, we will send a 'login' method. Once the login method has returned\n  // and all the data is visible (including re-running subs if userId changes),\n  // we will send the 'foo' and 'bar' methods in parallel.\n  self._outstandingMethodBlocks = [];\n\n  // method ID -> array of objects with keys 'collection' and 'id', listing\n  // documents written by a given method's stub. keys are associated with\n  // methods whose stub wrote at least one document, and whose data-done message\n  // has not yet been received.\n  self._documentsWrittenByStub = {};\n  // collection -> IdMap of \"server document\" object. A \"server document\" has:\n  // - \"document\": the version of the document according the\n  //   server (ie, the snapshot before a stub wrote it, amended by any changes\n  //   received from the server)\n  //   It is undefined if we think the document does not exist\n  // - \"writtenByStubs\": a set of method IDs whose stubs wrote to the document\n  //   whose \"data done\" messages have not yet been processed\n  self._serverDocuments = {};\n\n  // Array of callbacks to be called after the next update of the local\n  // cache. Used for:\n  //  - Calling methodInvoker.dataVisible and sub ready callbacks after\n  //    the relevant data is flushed.\n  //  - Invoking the callbacks of \"half-finished\" methods after reconnect\n  //    quiescence. Specifically, methods whose result was received over the old\n  //    connection (so we don't re-send it) but whose data had not been made\n  //    visible.\n  self._afterUpdateCallbacks = [];\n\n  // In two contexts, we buffer all incoming data messages and then process them\n  // all at once in a single update:\n  //   - During reconnect, we buffer all data messages until all subs that had\n  //     been ready before reconnect are ready again, and all methods that are\n  //     active have returned their \"data done message\"; then\n  //   - During the execution of a \"wait\" method, we buffer all data messages\n  //     until the wait method gets its \"data done\" message. (If the wait method\n  //     occurs during reconnect, it doesn't get any special handling.)\n  // all data messages are processed in one update.\n  //\n  // The following fields are used for this \"quiescence\" process.\n\n  // This buffers the messages that aren't being processed yet.\n  self._messagesBufferedUntilQuiescence = [];\n  // Map from method ID -> true. Methods are removed from this when their\n  // \"data done\" message is received, and we will not quiesce until it is\n  // empty.\n  self._methodsBlockingQuiescence = {};\n  // map from sub ID -> true for subs that were ready (ie, called the sub\n  // ready callback) before reconnect but haven't become ready again yet\n  self._subsBeingRevived = {}; // map from sub._id -> true\n  // if true, the next data update should reset all stores. (set during\n  // reconnect.)\n  self._resetStores = false;\n\n  // name -> array of updates for (yet to be created) collections\n  self._updatesForUnknownStores = {};\n  // if we're blocking a migration, the retry func\n  self._retryMigrate = null;\n\n  self.__flushBufferedWrites = Meteor.bindEnvironment(\n    self._flushBufferedWrites, \"flushing DDP buffered writes\", self);\n  // Collection name -> array of messages.\n  self._bufferedWrites = {};\n  // When current buffer of updates must be flushed at, in ms timestamp.\n  self._bufferedWritesFlushAt = null;\n  // Timeout handle for the next processing of all pending writes\n  self._bufferedWritesFlushHandle = null;\n\n  self._bufferedWritesInterval = options.bufferedWritesInterval;\n  self._bufferedWritesMaxAge = options.bufferedWritesMaxAge;\n\n  // metadata for subscriptions.  Map from sub ID to object with keys:\n  //   - id\n  //   - name\n  //   - params\n  //   - inactive (if true, will be cleaned up if not reused in re-run)\n  //   - ready (has the 'ready' message been received?)\n  //   - readyCallback (an optional callback to call when ready)\n  //   - errorCallback (an optional callback to call if the sub terminates with\n  //                    an error, XXX COMPAT WITH 1.0.3.1)\n  //   - stopCallback (an optional callback to call when the sub terminates\n  //     for any reason, with an error argument if an error triggered the stop)\n  self._subscriptions = {};\n\n  // Reactive userId.\n  self._userId = null;\n  self._userIdDeps = new Tracker.Dependency;\n\n  // Block auto-reload while we're waiting for method responses.\n  if (Meteor.isClient && Package.reload && !options.reloadWithOutstanding) {\n    Package.reload.Reload._onMigrate(function (retry) {\n      if (!self._readyToMigrate()) {\n        if (self._retryMigrate)\n          throw new Error(\"Two migrations in progress?\");\n        self._retryMigrate = retry;\n        return false;\n      } else {\n        return [true];\n      }\n    });\n  }\n\n  var onMessage = function (raw_msg) {\n    try {\n      var msg = DDPCommon.parseDDP(raw_msg);\n    } catch (e) {\n      Meteor._debug(\"Exception while parsing DDP\", e);\n      return;\n    }\n\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the server is still alive.\n    if (self._heartbeat) {\n      self._heartbeat.messageReceived();\n    }\n\n    if (msg === null || !msg.msg) {\n      // XXX COMPAT WITH 0.6.6. ignore the old welcome message for back\n      // compat.  Remove this 'if' once the server stops sending welcome\n      // messages (stream_server.js).\n      if (! (msg && msg.server_id))\n        Meteor._debug(\"discarding invalid livedata message\", msg);\n      return;\n    }\n\n    if (msg.msg === 'connected') {\n      self._version = self._versionSuggestion;\n      self._livedata_connected(msg);\n      options.onConnected();\n    }\n    else if (msg.msg === 'failed') {\n      if (_.contains(self._supportedDDPVersions, msg.version)) {\n        self._versionSuggestion = msg.version;\n        self._stream.reconnect({_force: true});\n      } else {\n        var description =\n              \"DDP version negotiation failed; server requested version \" + msg.version;\n        self._stream.disconnect({_permanent: true, _error: description});\n        options.onDDPVersionNegotiationFailure(description);\n      }\n    }\n    else if (msg.msg === 'ping' && options.respondToPings) {\n      self._send({msg: \"pong\", id: msg.id});\n    }\n    else if (msg.msg === 'pong') {\n      // noop, as we assume everything's a pong\n    }\n    else if (_.include(['added', 'changed', 'removed', 'ready', 'updated'], msg.msg))\n      self._livedata_data(msg);\n    else if (msg.msg === 'nosub')\n      self._livedata_nosub(msg);\n    else if (msg.msg === 'result')\n      self._livedata_result(msg);\n    else if (msg.msg === 'error')\n      self._livedata_error(msg);\n    else\n      Meteor._debug(\"discarding unknown livedata message type\", msg);\n  };\n\n  var onReset = function () {\n    // Send a connect message at the beginning of the stream.\n    // NOTE: reset is called even on the first connection, so this is\n    // the only place we send this message.\n    var msg = {msg: 'connect'};\n    if (self._lastSessionId)\n      msg.session = self._lastSessionId;\n    msg.version = self._versionSuggestion || self._supportedDDPVersions[0];\n    self._versionSuggestion = msg.version;\n    msg.support = self._supportedDDPVersions;\n    self._send(msg);\n\n    // Mark non-retry calls as failed. This has to be done early as getting these methods out of the\n    // current block is pretty important to making sure that quiescence is properly calculated, as\n    // well as possibly moving on to another useful block.\n\n    // Only bother testing if there is an outstandingMethodBlock (there might not be, especially if\n    // we are connecting for the first time.\n    if (self._outstandingMethodBlocks.length > 0) {\n      // If there is an outstanding method block, we only care about the first one as that is the\n      // one that could have already sent messages with no response, that are not allowed to retry.\n      const currentMethodBlock = self._outstandingMethodBlocks[0].methods;\n      self._outstandingMethodBlocks[0].methods = currentMethodBlock.filter((methodInvoker) => {\n\n        // Methods with 'noRetry' option set are not allowed to re-send after\n        // recovering dropped connection.\n        if (methodInvoker.sentMessage && methodInvoker.noRetry) {\n          // Make sure that the method is told that it failed.\n          methodInvoker.receiveResult(new Meteor.Error('invocation-failed',\n            'Method invocation might have failed due to dropped connection. ' +\n            'Failing because `noRetry` option was passed to Meteor.apply.'));\n        }\n\n        // Only keep a method if it wasn't sent or it's allowed to retry.\n        // This may leave the block empty, but we don't move on to the next\n        // block until the callback has been delivered, in _outstandingMethodFinished.\n        return !(methodInvoker.sentMessage && methodInvoker.noRetry);\n      });\n    }\n\n    // Now, to minimize setup latency, go ahead and blast out all of\n    // our pending methods ands subscriptions before we've even taken\n    // the necessary RTT to know if we successfully reconnected. (1)\n    // They're supposed to be idempotent, and where they are not,\n    // they can block retry in apply; (2) even if we did reconnect,\n    // we're not sure what messages might have gotten lost\n    // (in either direction) since we were disconnected (TCP being\n    // sloppy about that.)\n\n    // If the current block of methods all got their results (but didn't all get\n    // their data visible), discard the empty block now.\n    if (! _.isEmpty(self._outstandingMethodBlocks) &&\n        _.isEmpty(self._outstandingMethodBlocks[0].methods)) {\n      self._outstandingMethodBlocks.shift();\n    }\n\n    // Mark all messages as unsent, they have not yet been sent on this\n    // connection.\n    _.each(self._methodInvokers, function (m) {\n      m.sentMessage = false;\n    });\n\n    // If an `onReconnect` handler is set, call it first. Go through\n    // some hoops to ensure that methods that are called from within\n    // `onReconnect` get executed _before_ ones that were originally\n    // outstanding (since `onReconnect` is used to re-establish auth\n    // certificates)\n    self._callOnReconnectAndSendAppropriateOutstandingMethods();\n\n    // add new subscriptions at the end. this way they take effect after\n    // the handlers and we don't see flicker.\n    _.each(self._subscriptions, function (sub, id) {\n      self._send({\n        msg: 'sub',\n        id: id,\n        name: sub.name,\n        params: sub.params\n      });\n    });\n  };\n\n  var onDisconnect = function () {\n    if (self._heartbeat) {\n      self._heartbeat.stop();\n      self._heartbeat = null;\n    }\n  };\n\n  if (Meteor.isServer) {\n    self._stream.on('message', Meteor.bindEnvironment(onMessage, \"handling DDP message\"));\n    self._stream.on('reset', Meteor.bindEnvironment(onReset, \"handling DDP reset\"));\n    self._stream.on('disconnect', Meteor.bindEnvironment(onDisconnect, \"handling DDP disconnect\"));\n  } else {\n    self._stream.on('message', onMessage);\n    self._stream.on('reset', onReset);\n    self._stream.on('disconnect', onDisconnect);\n  }\n};\n\n// A MethodInvoker manages sending a method to the server and calling the user's\n// callbacks. On construction, it registers itself in the connection's\n// _methodInvokers map; it removes itself once the method is fully finished and\n// the callback is invoked. This occurs when it has both received a result,\n// and the data written by it is fully visible.\nvar MethodInvoker = function (options) {\n  var self = this;\n\n  // Public (within this file) fields.\n  self.methodId = options.methodId;\n  self.sentMessage = false;\n\n  self._callback = options.callback;\n  self._connection = options.connection;\n  self._message = options.message;\n  self._onResultReceived = options.onResultReceived || function () {};\n  self._wait = options.wait;\n  self.noRetry = options.noRetry;\n  self._methodResult = null;\n  self._dataVisible = false;\n\n  // Register with the connection.\n  self._connection._methodInvokers[self.methodId] = self;\n};\n_.extend(MethodInvoker.prototype, {\n  // Sends the method message to the server. May be called additional times if\n  // we lose the connection and reconnect before receiving a result.\n  sendMessage: function () {\n    var self = this;\n    // This function is called before sending a method (including resending on\n    // reconnect). We should only (re)send methods where we don't already have a\n    // result!\n    if (self.gotResult())\n      throw new Error(\"sendingMethod is called on method with result\");\n\n\n    // If we're re-sending it, it doesn't matter if data was written the first\n    // time.\n    self._dataVisible = false;\n    self.sentMessage = true;\n\n    // If this is a wait method, make all data messages be buffered until it is\n    // done.\n    if (self._wait)\n      self._connection._methodsBlockingQuiescence[self.methodId] = true;\n\n    // Actually send the message.\n    self._connection._send(self._message);\n  },\n  // Invoke the callback, if we have both a result and know that all data has\n  // been written to the local cache.\n  _maybeInvokeCallback: function () {\n    var self = this;\n    if (self._methodResult && self._dataVisible) {\n      // Call the callback. (This won't throw: the callback was wrapped with\n      // bindEnvironment.)\n      self._callback(self._methodResult[0], self._methodResult[1]);\n\n      // Forget about this method.\n      delete self._connection._methodInvokers[self.methodId];\n\n      // Let the connection know that this method is finished, so it can try to\n      // move on to the next block of methods.\n      self._connection._outstandingMethodFinished();\n    }\n  },\n  // Call with the result of the method from the server. Only may be called\n  // once; once it is called, you should not call sendMessage again.\n  // If the user provided an onResultReceived callback, call it immediately.\n  // Then invoke the main callback if data is also visible.\n  receiveResult: function (err, result) {\n    var self = this;\n    if (self.gotResult())\n      throw new Error(\"Methods should only receive results once\");\n    self._methodResult = [err, result];\n    self._onResultReceived(err, result);\n    self._maybeInvokeCallback();\n  },\n  // Call this when all data written by the method is visible. This means that\n  // the method has returns its \"data is done\" message *AND* all server\n  // documents that are buffered at that time have been written to the local\n  // cache. Invokes the main callback if the result has been received.\n  dataVisible: function () {\n    var self = this;\n    self._dataVisible = true;\n    self._maybeInvokeCallback();\n  },\n  // True if receiveResult has been called.\n  gotResult: function () {\n    var self = this;\n    return !!self._methodResult;\n  }\n});\n\n_.extend(Connection.prototype, {\n  // 'name' is the name of the data on the wire that should go in the\n  // store. 'wrappedStore' should be an object with methods beginUpdate, update,\n  // endUpdate, saveOriginals, retrieveOriginals. see Collection for an example.\n  registerStore: function (name, wrappedStore) {\n    var self = this;\n\n    if (name in self._stores)\n      return false;\n\n    // Wrap the input object in an object which makes any store method not\n    // implemented by 'store' into a no-op.\n    var store = {};\n    _.each(['update', 'beginUpdate', 'endUpdate', 'saveOriginals',\n            'retrieveOriginals', 'getDoc',\n\t\t\t'_getCollection'], function (method) {\n              store[method] = function () {\n                return (wrappedStore[method]\n                        ? wrappedStore[method].apply(wrappedStore, arguments)\n                        : undefined);\n              };\n            });\n\n    self._stores[name] = store;\n\n    var queued = self._updatesForUnknownStores[name];\n    if (queued) {\n      store.beginUpdate(queued.length, false);\n      _.each(queued, function (msg) {\n        store.update(msg);\n      });\n      store.endUpdate();\n      delete self._updatesForUnknownStores[name];\n    }\n\n    return true;\n  },\n\n  /**\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @summary Subscribe to a record set.  Returns a handle that provides\n   * `stop()` and `ready()` methods.\n   * @locus Client\n   * @param {String} name Name of the subscription.  Matches the name of the\n   * server's `publish()` call.\n   * @param {EJSONable} [arg1,arg2...] Optional arguments passed to publisher\n   * function on server.\n   * @param {Function|Object} [callbacks] Optional. May include `onStop`\n   * and `onReady` callbacks. If there is an error, it is passed as an\n   * argument to `onStop`. If a function is passed instead of an object, it\n   * is interpreted as an `onReady` callback.\n   */\n  subscribe: function (name /* .. [arguments] .. (callback|callbacks) */) {\n    var self = this;\n\n    var params = Array.prototype.slice.call(arguments, 1);\n    var callbacks = {};\n    if (params.length) {\n      var lastParam = params[params.length - 1];\n      if (_.isFunction(lastParam)) {\n        callbacks.onReady = params.pop();\n      } else if (lastParam &&\n        // XXX COMPAT WITH 1.0.3.1 onError used to exist, but now we use\n        // onStop with an error callback instead.\n        _.any([lastParam.onReady, lastParam.onError, lastParam.onStop],\n          _.isFunction)) {\n        callbacks = params.pop();\n      }\n    }\n\n    // Is there an existing sub with the same name and param, run in an\n    // invalidated Computation? This will happen if we are rerunning an\n    // existing computation.\n    //\n    // For example, consider a rerun of:\n    //\n    //     Tracker.autorun(function () {\n    //       Meteor.subscribe(\"foo\", Session.get(\"foo\"));\n    //       Meteor.subscribe(\"bar\", Session.get(\"bar\"));\n    //     });\n    //\n    // If \"foo\" has changed but \"bar\" has not, we will match the \"bar\"\n    // subcribe to an existing inactive subscription in order to not\n    // unsub and resub the subscription unnecessarily.\n    //\n    // We only look for one such sub; if there are N apparently-identical subs\n    // being invalidated, we will require N matching subscribe calls to keep\n    // them all active.\n    var existing = _.find(self._subscriptions, function (sub) {\n      return sub.inactive && sub.name === name &&\n        EJSON.equals(sub.params, params);\n    });\n\n    var id;\n    if (existing) {\n      id = existing.id;\n      existing.inactive = false; // reactivate\n\n      if (callbacks.onReady) {\n        // If the sub is not already ready, replace any ready callback with the\n        // one provided now. (It's not really clear what users would expect for\n        // an onReady callback inside an autorun; the semantics we provide is\n        // that at the time the sub first becomes ready, we call the last\n        // onReady callback provided, if any.)\n        // If the sub is already ready, run the ready callback right away.\n        // It seems that users would expect an onReady callback inside an\n        // autorun to trigger once the the sub first becomes ready and also\n        // when re-subs happens.\n        if (existing.ready) {\n          callbacks.onReady();\n        } else {\n          existing.readyCallback = callbacks.onReady;\n        }\n      }\n\n      // XXX COMPAT WITH 1.0.3.1 we used to have onError but now we call\n      // onStop with an optional error argument\n      if (callbacks.onError) {\n        // Replace existing callback if any, so that errors aren't\n        // double-reported.\n        existing.errorCallback = callbacks.onError;\n      }\n\n      if (callbacks.onStop) {\n        existing.stopCallback = callbacks.onStop;\n      }\n    } else {\n      // New sub! Generate an id, save it locally, and send message.\n      id = Random.id();\n      self._subscriptions[id] = {\n        id: id,\n        name: name,\n        params: EJSON.clone(params),\n        inactive: false,\n        ready: false,\n        readyDeps: new Tracker.Dependency,\n        readyCallback: callbacks.onReady,\n        // XXX COMPAT WITH 1.0.3.1 #errorCallback\n        errorCallback: callbacks.onError,\n        stopCallback: callbacks.onStop,\n        connection: self,\n        remove: function() {\n          delete this.connection._subscriptions[this.id];\n          this.ready && this.readyDeps.changed();\n        },\n        stop: function() {\n          this.connection._send({msg: 'unsub', id: id});\n          this.remove();\n\n          if (callbacks.onStop) {\n            callbacks.onStop();\n          }\n        }\n      };\n      self._send({msg: 'sub', id: id, name: name, params: params});\n    }\n\n    // return a handle to the application.\n    var handle = {\n      stop: function () {\n        if (!_.has(self._subscriptions, id))\n          return;\n\n        self._subscriptions[id].stop();\n      },\n      ready: function () {\n        // return false if we've unsubscribed.\n        if (!_.has(self._subscriptions, id))\n          return false;\n        var record = self._subscriptions[id];\n        record.readyDeps.depend();\n        return record.ready;\n      },\n      subscriptionId: id\n    };\n\n    if (Tracker.active) {\n      // We're in a reactive computation, so we'd like to unsubscribe when the\n      // computation is invalidated... but not if the rerun just re-subscribes\n      // to the same subscription!  When a rerun happens, we use onInvalidate\n      // as a change to mark the subscription \"inactive\" so that it can\n      // be reused from the rerun.  If it isn't reused, it's killed from\n      // an afterFlush.\n      Tracker.onInvalidate(function (c) {\n        if (_.has(self._subscriptions, id))\n          self._subscriptions[id].inactive = true;\n\n        Tracker.afterFlush(function () {\n          if (_.has(self._subscriptions, id) &&\n              self._subscriptions[id].inactive)\n            handle.stop();\n        });\n      });\n    }\n\n    return handle;\n  },\n\n  // options:\n  // - onLateError {Function(error)} called if an error was received after the ready event.\n  //     (errors received before ready cause an error to be thrown)\n  _subscribeAndWait: function (name, args, options) {\n    var self = this;\n    var f = new Future();\n    var ready = false;\n    var handle;\n    args = args || [];\n    args.push({\n      onReady: function () {\n        ready = true;\n        f['return']();\n      },\n      onError: function (e) {\n        if (!ready)\n          f['throw'](e);\n        else\n          options && options.onLateError && options.onLateError(e);\n      }\n    });\n\n    handle = self.subscribe.apply(self, [name].concat(args));\n    f.wait();\n    return handle;\n  },\n\n  methods: function (methods) {\n    var self = this;\n    _.each(methods, function (func, name) {\n      if (typeof func !== 'function')\n        throw new Error(\"Method '\" + name + \"' must be a function\");\n      if (self._methodHandlers[name])\n        throw new Error(\"A method named '\" + name + \"' is already defined\");\n      self._methodHandlers[name] = func;\n    });\n  },\n\n  /**\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @summary Invokes a method passing any number of arguments.\n   * @locus Anywhere\n   * @param {String} name Name of method to invoke\n   * @param {EJSONable} [arg1,arg2...] Optional method arguments\n   * @param {Function} [asyncCallback] Optional callback, which is called asynchronously with the error or result after the method is complete. If not provided, the method runs synchronously if possible (see below).\n   */\n  call: function (name /* .. [arguments] .. callback */) {\n    // if it's a function, the last argument is the result callback,\n    // not a parameter to the remote method.\n    var args = Array.prototype.slice.call(arguments, 1);\n    if (args.length && typeof args[args.length - 1] === \"function\")\n      var callback = args.pop();\n    return this.apply(name, args, callback);\n  },\n\n  // @param options {Optional Object}\n  //   wait: Boolean - Should we wait to call this until all current methods\n  //                   are fully finished, and block subsequent method calls\n  //                   until this method is fully finished?\n  //                   (does not affect methods called from within this method)\n  //   onResultReceived: Function - a callback to call as soon as the method\n  //                                result is received. the data written by\n  //                                the method may not yet be in the cache!\n  //   returnStubValue: Boolean - If true then in cases where we would have\n  //                              otherwise discarded the stub's return value\n  //                              and returned undefined, instead we go ahead\n  //                              and return it.  Specifically, this is any\n  //                              time other than when (a) we are already\n  //                              inside a stub or (b) we are in Node and no\n  //                              callback was provided.  Currently we require\n  //                              this flag to be explicitly passed to reduce\n  //                              the likelihood that stub return values will\n  //                              be confused with server return values; we\n  //                              may improve this in future.\n  // @param callback {Optional Function}\n\n  /**\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   * @summary Invoke a method passing an array of arguments.\n   * @locus Anywhere\n   * @param {String} name Name of method to invoke\n   * @param {EJSONable[]} args Method arguments\n   * @param {Object} [options]\n   * @param {Boolean} options.wait (Client only) If true, don't send this method until all previous method calls have completed, and don't send any subsequent method calls until this one is completed.\n   * @param {Function} options.onResultReceived (Client only) This callback is invoked with the error or result of the method (just like `asyncCallback`) as soon as the error or result is available. The local cache may not yet reflect the writes performed by the method.\n   * @param {Boolean} options.noRetry (Client only) if true, don't send this method again on reload, simply call the callback an error with the error code 'invocation-failed'.\n   * @param {Boolean} options.throwStubExceptions (Client only) If true, exceptions thrown by method stubs will be thrown instead of logged, and the method will not be invoked on the server.\n   * @param {Function} [asyncCallback] Optional callback; same semantics as in [`Meteor.call`](#meteor_call).\n   */\n  apply: function (name, args, options, callback) {\n    var self = this;\n\n    // We were passed 3 arguments. They may be either (name, args, options)\n    // or (name, args, callback)\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n    options = options || {};\n\n    if (callback) {\n      // XXX would it be better form to do the binding in stream.on,\n      // or caller, instead of here?\n      // XXX improve error message (and how we report it)\n      callback = Meteor.bindEnvironment(\n        callback,\n        \"delivering result of invoking '\" + name + \"'\"\n      );\n    }\n\n    // Keep our args safe from mutation (eg if we don't send the message for a\n    // while because of a wait method).\n    args = EJSON.clone(args);\n\n    // Lazily allocate method ID once we know that it'll be needed.\n    var methodId = (function () {\n      var id;\n      return function () {\n        if (id === undefined)\n          id = '' + (self._nextMethodId++);\n        return id;\n      };\n    })();\n\n    var enclosing = DDP._CurrentMethodInvocation.get();\n    var alreadyInSimulation = enclosing && enclosing.isSimulation;\n\n    // Lazily generate a randomSeed, only if it is requested by the stub.\n    // The random streams only have utility if they're used on both the client\n    // and the server; if the client doesn't generate any 'random' values\n    // then we don't expect the server to generate any either.\n    // Less commonly, the server may perform different actions from the client,\n    // and may in fact generate values where the client did not, but we don't\n    // have any client-side values to match, so even here we may as well just\n    // use a random seed on the server.  In that case, we don't pass the\n    // randomSeed to save bandwidth, and we don't even generate it to save a\n    // bit of CPU and to avoid consuming entropy.\n    var randomSeed = null;\n    var randomSeedGenerator = function () {\n      if (randomSeed === null) {\n        randomSeed = DDPCommon.makeRpcSeed(enclosing, name);\n      }\n      return randomSeed;\n    };\n\n    // Run the stub, if we have one. The stub is supposed to make some\n    // temporary writes to the database to give the user a smooth experience\n    // until the actual result of executing the method comes back from the\n    // server (whereupon the temporary writes to the database will be reversed\n    // during the beginUpdate/endUpdate process.)\n    //\n    // Normally, we ignore the return value of the stub (even if it is an\n    // exception), in favor of the real return value from the server. The\n    // exception is if the *caller* is a stub. In that case, we're not going\n    // to do a RPC, so we use the return value of the stub as our return\n    // value.\n\n    var stub = self._methodHandlers[name];\n    if (stub) {\n      var setUserId = function(userId) {\n        self.setUserId(userId);\n      };\n\n      var invocation = new DDPCommon.MethodInvocation({\n        isSimulation: true,\n        userId: self.userId(),\n        setUserId: setUserId,\n        randomSeed: function () { return randomSeedGenerator(); }\n      });\n\n      if (!alreadyInSimulation)\n        self._saveOriginals();\n\n      try {\n        // Note that unlike in the corresponding server code, we never audit\n        // that stubs check() their arguments.\n        var stubReturnValue = DDP._CurrentMethodInvocation.withValue(invocation, function () {\n          if (Meteor.isServer) {\n            // Because saveOriginals and retrieveOriginals aren't reentrant,\n            // don't allow stubs to yield.\n            return Meteor._noYieldsAllowed(function () {\n              // re-clone, so that the stub can't affect our caller's values\n              return stub.apply(invocation, EJSON.clone(args));\n            });\n          } else {\n            return stub.apply(invocation, EJSON.clone(args));\n          }\n        });\n      }\n      catch (e) {\n        var exception = e;\n      }\n\n      if (!alreadyInSimulation)\n        self._retrieveAndStoreOriginals(methodId());\n    }\n\n    // If we're in a simulation, stop and return the result we have,\n    // rather than going on to do an RPC. If there was no stub,\n    // we'll end up returning undefined.\n    if (alreadyInSimulation) {\n      if (callback) {\n        callback(exception, stubReturnValue);\n        return undefined;\n      }\n      if (exception)\n        throw exception;\n      return stubReturnValue;\n    }\n\n    // If an exception occurred in a stub, and we're ignoring it\n    // because we're doing an RPC and want to use what the server\n    // returns instead, log it so the developer knows\n    // (unless they explicitly ask to see the error).\n    //\n    // Tests can set the 'expected' flag on an exception so it won't\n    // go to log.\n    if (exception) {\n      if (options.throwStubExceptions) {\n        throw exception;\n      } else if (!exception.expected) {\n        Meteor._debug(\"Exception while simulating the effect of invoking '\" +\n          name + \"'\", exception, exception.stack);\n      }\n    }\n\n\n    // At this point we're definitely doing an RPC, and we're going to\n    // return the value of the RPC to the caller.\n\n    // If the caller didn't give a callback, decide what to do.\n    if (!callback) {\n      if (Meteor.isClient) {\n        // On the client, we don't have fibers, so we can't block. The\n        // only thing we can do is to return undefined and discard the\n        // result of the RPC. If an error occurred then print the error\n        // to the console.\n        callback = function (err) {\n          err && Meteor._debug(\"Error invoking Method '\" + name + \"':\",\n                               err.message);\n        };\n      } else {\n        // On the server, make the function synchronous. Throw on\n        // errors, return on success.\n        var future = new Future;\n        callback = future.resolver();\n      }\n    }\n    // Send the RPC. Note that on the client, it is important that the\n    // stub have finished before we send the RPC, so that we know we have\n    // a complete list of which local documents the stub wrote.\n    var message = {\n      msg: 'method',\n      method: name,\n      params: args,\n      id: methodId()\n    };\n\n    // Send the randomSeed only if we used it\n    if (randomSeed !== null) {\n      message.randomSeed = randomSeed;\n    }\n\n    var methodInvoker = new MethodInvoker({\n      methodId: methodId(),\n      callback: callback,\n      connection: self,\n      onResultReceived: options.onResultReceived,\n      wait: !!options.wait,\n      message: message,\n      noRetry: !!options.noRetry\n    });\n\n    if (options.wait) {\n      // It's a wait method! Wait methods go in their own block.\n      self._outstandingMethodBlocks.push(\n        {wait: true, methods: [methodInvoker]});\n    } else {\n      // Not a wait method. Start a new block if the previous block was a wait\n      // block, and add it to the last block of methods.\n      if (_.isEmpty(self._outstandingMethodBlocks) ||\n          _.last(self._outstandingMethodBlocks).wait)\n        self._outstandingMethodBlocks.push({wait: false, methods: []});\n      _.last(self._outstandingMethodBlocks).methods.push(methodInvoker);\n    }\n\n    // If we added it to the first block, send it out now.\n    if (self._outstandingMethodBlocks.length === 1)\n      methodInvoker.sendMessage();\n\n    // If we're using the default callback on the server,\n    // block waiting for the result.\n    if (future) {\n      return future.wait();\n    }\n    return options.returnStubValue ? stubReturnValue : undefined;\n  },\n\n  // Before calling a method stub, prepare all stores to track changes and allow\n  // _retrieveAndStoreOriginals to get the original versions of changed\n  // documents.\n  _saveOriginals: function () {\n    var self = this;\n    if (!self._waitingForQuiescence())\n      self._flushBufferedWrites();\n    _.each(self._stores, function (s) {\n      s.saveOriginals();\n    });\n  },\n  // Retrieves the original versions of all documents modified by the stub for\n  // method 'methodId' from all stores and saves them to _serverDocuments (keyed\n  // by document) and _documentsWrittenByStub (keyed by method ID).\n  _retrieveAndStoreOriginals: function (methodId) {\n    var self = this;\n    if (self._documentsWrittenByStub[methodId])\n      throw new Error(\"Duplicate methodId in _retrieveAndStoreOriginals\");\n\n    var docsWritten = [];\n    _.each(self._stores, function (s, collection) {\n      var originals = s.retrieveOriginals();\n      // not all stores define retrieveOriginals\n      if (!originals)\n        return;\n      originals.forEach(function (doc, id) {\n        docsWritten.push({collection: collection, id: id});\n        if (!_.has(self._serverDocuments, collection))\n          self._serverDocuments[collection] = new MongoIDMap;\n        var serverDoc = self._serverDocuments[collection].setDefault(id, {});\n        if (serverDoc.writtenByStubs) {\n          // We're not the first stub to write this doc. Just add our method ID\n          // to the record.\n          serverDoc.writtenByStubs[methodId] = true;\n        } else {\n          // First stub! Save the original value and our method ID.\n          serverDoc.document = doc;\n          serverDoc.flushCallbacks = [];\n          serverDoc.writtenByStubs = {};\n          serverDoc.writtenByStubs[methodId] = true;\n        }\n      });\n    });\n    if (!_.isEmpty(docsWritten)) {\n      self._documentsWrittenByStub[methodId] = docsWritten;\n    }\n  },\n\n  // This is very much a private function we use to make the tests\n  // take up fewer server resources after they complete.\n  _unsubscribeAll: function () {\n    var self = this;\n    _.each(_.clone(self._subscriptions), function (sub, id) {\n      // Avoid killing the autoupdate subscription so that developers\n      // still get hot code pushes when writing tests.\n      //\n      // XXX it's a hack to encode knowledge about autoupdate here,\n      // but it doesn't seem worth it yet to have a special API for\n      // subscriptions to preserve after unit tests.\n      if (sub.name !== 'meteor_autoupdate_clientVersions') {\n        self._subscriptions[id].stop();\n      }\n    });\n  },\n\n  // Sends the DDP stringification of the given message object\n  _send: function (obj) {\n    var self = this;\n    self._stream.send(DDPCommon.stringifyDDP(obj));\n  },\n\n  // We detected via DDP-level heartbeats that we've lost the\n  // connection.  Unlike `disconnect` or `close`, a lost connection\n  // will be automatically retried.\n  _lostConnection: function (error) {\n    var self = this;\n    self._stream._lostConnection(error);\n  },\n\n  /**\n   * @summary Get the current connection status. A reactive data source.\n   * @locus Client\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  status: function (/*passthrough args*/) {\n    var self = this;\n    return self._stream.status.apply(self._stream, arguments);\n  },\n\n  /**\n   * @summary Force an immediate reconnection attempt if the client is not connected to the server.\n\n  This method does nothing if the client is already connected.\n   * @locus Client\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  reconnect: function (/*passthrough args*/) {\n    var self = this;\n    return self._stream.reconnect.apply(self._stream, arguments);\n  },\n\n  /**\n   * @summary Disconnect the client from the server.\n   * @locus Client\n   * @memberOf Meteor\n   * @importFromPackage meteor\n   */\n  disconnect: function (/*passthrough args*/) {\n    var self = this;\n    return self._stream.disconnect.apply(self._stream, arguments);\n  },\n\n  close: function () {\n    var self = this;\n    return self._stream.disconnect({_permanent: true});\n  },\n\n  ///\n  /// Reactive user system\n  ///\n  userId: function () {\n    var self = this;\n    if (self._userIdDeps)\n      self._userIdDeps.depend();\n    return self._userId;\n  },\n\n  setUserId: function (userId) {\n    var self = this;\n    // Avoid invalidating dependents if setUserId is called with current value.\n    if (self._userId === userId)\n      return;\n    self._userId = userId;\n    if (self._userIdDeps)\n      self._userIdDeps.changed();\n  },\n\n  // Returns true if we are in a state after reconnect of waiting for subs to be\n  // revived or early methods to finish their data, or we are waiting for a\n  // \"wait\" method to finish.\n  _waitingForQuiescence: function () {\n    var self = this;\n    return (! _.isEmpty(self._subsBeingRevived) ||\n            ! _.isEmpty(self._methodsBlockingQuiescence));\n  },\n\n  // Returns true if any method whose message has been sent to the server has\n  // not yet invoked its user callback.\n  _anyMethodsAreOutstanding: function () {\n    var self = this;\n    return _.any(_.pluck(self._methodInvokers, 'sentMessage'));\n  },\n\n  _livedata_connected: function (msg) {\n    var self = this;\n\n    if (self._version !== 'pre1' && self._heartbeatInterval !== 0) {\n      self._heartbeat = new DDPCommon.Heartbeat({\n        heartbeatInterval: self._heartbeatInterval,\n        heartbeatTimeout: self._heartbeatTimeout,\n        onTimeout: function () {\n          self._lostConnection(\n            new DDP.ConnectionError(\"DDP heartbeat timed out\"));\n        },\n        sendPing: function () {\n          self._send({msg: 'ping'});\n        }\n      });\n      self._heartbeat.start();\n    }\n\n    // If this is a reconnect, we'll have to reset all stores.\n    if (self._lastSessionId)\n      self._resetStores = true;\n\n    if (typeof (msg.session) === \"string\") {\n      var reconnectedToPreviousSession = (self._lastSessionId === msg.session);\n      self._lastSessionId = msg.session;\n    }\n\n    if (reconnectedToPreviousSession) {\n      // Successful reconnection -- pick up where we left off.  Note that right\n      // now, this never happens: the server never connects us to a previous\n      // session, because DDP doesn't provide enough data for the server to know\n      // what messages the client has processed. We need to improve DDP to make\n      // this possible, at which point we'll probably need more code here.\n      return;\n    }\n\n    // Server doesn't have our data any more. Re-sync a new session.\n\n    // Forget about messages we were buffering for unknown collections. They'll\n    // be resent if still relevant.\n    self._updatesForUnknownStores = {};\n\n    if (self._resetStores) {\n      // Forget about the effects of stubs. We'll be resetting all collections\n      // anyway.\n      self._documentsWrittenByStub = {};\n      self._serverDocuments = {};\n    }\n\n    // Clear _afterUpdateCallbacks.\n    self._afterUpdateCallbacks = [];\n\n    // Mark all named subscriptions which are ready (ie, we already called the\n    // ready callback) as needing to be revived.\n    // XXX We should also block reconnect quiescence until unnamed subscriptions\n    //     (eg, autopublish) are done re-publishing to avoid flicker!\n    self._subsBeingRevived = {};\n    _.each(self._subscriptions, function (sub, id) {\n      if (sub.ready)\n        self._subsBeingRevived[id] = true;\n    });\n\n    // Arrange for \"half-finished\" methods to have their callbacks run, and\n    // track methods that were sent on this connection so that we don't\n    // quiesce until they are all done.\n    //\n    // Start by clearing _methodsBlockingQuiescence: methods sent before\n    // reconnect don't matter, and any \"wait\" methods sent on the new connection\n    // that we drop here will be restored by the loop below.\n    self._methodsBlockingQuiescence = {};\n    if (self._resetStores) {\n      _.each(self._methodInvokers, function (invoker) {\n        if (invoker.gotResult()) {\n          // This method already got its result, but it didn't call its callback\n          // because its data didn't become visible. We did not resend the\n          // method RPC. We'll call its callback when we get a full quiesce,\n          // since that's as close as we'll get to \"data must be visible\".\n          self._afterUpdateCallbacks.push(_.bind(invoker.dataVisible, invoker));\n        } else if (invoker.sentMessage) {\n          // This method has been sent on this connection (maybe as a resend\n          // from the last connection, maybe from onReconnect, maybe just very\n          // quickly before processing the connected message).\n          //\n          // We don't need to do anything special to ensure its callbacks get\n          // called, but we'll count it as a method which is preventing\n          // reconnect quiescence. (eg, it might be a login method that was run\n          // from onReconnect, and we don't want to see flicker by seeing a\n          // logged-out state.)\n          self._methodsBlockingQuiescence[invoker.methodId] = true;\n        }\n      });\n    }\n\n    self._messagesBufferedUntilQuiescence = [];\n\n    // If we're not waiting on any methods or subs, we can reset the stores and\n    // call the callbacks immediately.\n    if (!self._waitingForQuiescence()) {\n      if (self._resetStores) {\n        _.each(self._stores, function (s) {\n          s.beginUpdate(0, true);\n          s.endUpdate();\n        });\n        self._resetStores = false;\n      }\n      self._runAfterUpdateCallbacks();\n    }\n  },\n\n\n  _processOneDataMessage: function (msg, updates) {\n    var self = this;\n    // Using underscore here so as not to need to capitalize.\n    self['_process_' + msg.msg](msg, updates);\n  },\n\n\n  _livedata_data: function (msg) {\n    var self = this;\n\n    if (self._waitingForQuiescence()) {\n      self._messagesBufferedUntilQuiescence.push(msg);\n\n      if (msg.msg === \"nosub\")\n        delete self._subsBeingRevived[msg.id];\n\n      _.each(msg.subs || [], function (subId) {\n        delete self._subsBeingRevived[subId];\n      });\n      _.each(msg.methods || [], function (methodId) {\n        delete self._methodsBlockingQuiescence[methodId];\n      });\n\n      if (self._waitingForQuiescence())\n        return;\n\n      // No methods or subs are blocking quiescence!\n      // We'll now process and all of our buffered messages, reset all stores,\n      // and apply them all at once.\n      _.each(self._messagesBufferedUntilQuiescence, function (bufferedMsg) {\n        self._processOneDataMessage(bufferedMsg, self._bufferedWrites);\n      });\n      self._messagesBufferedUntilQuiescence = [];\n    } else {\n      self._processOneDataMessage(msg, self._bufferedWrites);\n    }\n\n    // Immediately flush writes when:\n    //  1. Buffering is disabled. Or;\n    //  2. any non-(added/changed/removed) message arrives.\n    var standardWrite = _.include(['added', 'changed', 'removed'], msg.msg);\n    if (self._bufferedWritesInterval === 0 || !standardWrite) {\n      self._flushBufferedWrites();\n      return;\n    }\n\n    if (self._bufferedWritesFlushAt === null) {\n      self._bufferedWritesFlushAt = new Date().valueOf() + self._bufferedWritesMaxAge;\n    }\n    else if (self._bufferedWritesFlushAt < new Date().valueOf()) {\n      self._flushBufferedWrites();\n      return;\n    }\n\n    if (self._bufferedWritesFlushHandle) {\n      clearTimeout(self._bufferedWritesFlushHandle);\n    }\n    self._bufferedWritesFlushHandle = setTimeout(self.__flushBufferedWrites,\n                                                      self._bufferedWritesInterval);\n  },\n\n  _flushBufferedWrites: function () {\n    var self = this;\n    if (self._bufferedWritesFlushHandle) {\n      clearTimeout(self._bufferedWritesFlushHandle);\n      self._bufferedWritesFlushHandle = null;\n    }\n\n    self._bufferedWritesFlushAt = null;\n    // We need to clear the buffer before passing it to\n    //  performWrites. As there's no guarantee that it\n    //  will exit cleanly.\n    var writes = self._bufferedWrites;\n    self._bufferedWrites = {};\n    self._performWrites(writes);\n  },\n\n  _performWrites: function(updates){\n    var self = this;\n\n    if (self._resetStores || !_.isEmpty(updates)) {\n      // Begin a transactional update of each store.\n      _.each(self._stores, function (s, storeName) {\n        s.beginUpdate(_.has(updates, storeName) ? updates[storeName].length : 0,\n                      self._resetStores);\n      });\n      self._resetStores = false;\n\n      _.each(updates, function (updateMessages, storeName) {\n        var store = self._stores[storeName];\n        if (store) {\n          _.each(updateMessages, function (updateMessage) {\n            store.update(updateMessage);\n          });\n        } else {\n          // Nobody's listening for this data. Queue it up until\n          // someone wants it.\n          // XXX memory use will grow without bound if you forget to\n          // create a collection or just don't care about it... going\n          // to have to do something about that.\n          if (!_.has(self._updatesForUnknownStores, storeName))\n            self._updatesForUnknownStores[storeName] = [];\n          Array.prototype.push.apply(self._updatesForUnknownStores[storeName],\n                                     updateMessages);\n        }\n      });\n\n      // End update transaction.\n      _.each(self._stores, function (s) { s.endUpdate(); });\n    }\n\n    self._runAfterUpdateCallbacks();\n  },\n\n  // Call any callbacks deferred with _runWhenAllServerDocsAreFlushed whose\n  // relevant docs have been flushed, as well as dataVisible callbacks at\n  // reconnect-quiescence time.\n  _runAfterUpdateCallbacks: function () {\n    var self = this;\n    var callbacks = self._afterUpdateCallbacks;\n    self._afterUpdateCallbacks = [];\n    _.each(callbacks, function (c) {\n      c();\n    });\n  },\n\n  _pushUpdate: function (updates, collection, msg) {\n    var self = this;\n    if (!_.has(updates, collection)) {\n      updates[collection] = [];\n    }\n    updates[collection].push(msg);\n  },\n\n  _getServerDoc: function (collection, id) {\n    var self = this;\n    if (!_.has(self._serverDocuments, collection))\n      return null;\n    var serverDocsForCollection = self._serverDocuments[collection];\n    return serverDocsForCollection.get(id) || null;\n  },\n\n  _process_added: function (msg, updates) {\n    var self = this;\n    var id = MongoID.idParse(msg.id);\n    var serverDoc = self._getServerDoc(msg.collection, id);\n    if (serverDoc) {\n      // Some outstanding stub wrote here.\n      var isExisting = (serverDoc.document !== undefined);\n\n      serverDoc.document = msg.fields || {};\n      serverDoc.document._id = id;\n\n      if (self._resetStores) {\n        // During reconnect the server is sending adds for existing ids.\n        // Always push an update so that document stays in the store after\n        // reset. Use current version of the document for this update, so\n        // that stub-written values are preserved.\n        var currentDoc = self._stores[msg.collection].getDoc(msg.id);\n        if (currentDoc !== undefined)\n          msg.fields = currentDoc;\n\n        self._pushUpdate(updates, msg.collection, msg);\n      } else if (isExisting) {\n        throw new Error(\"Server sent add for existing id: \" + msg.id);\n      }\n    } else {\n      self._pushUpdate(updates, msg.collection, msg);\n    }\n  },\n\n  _process_changed: function (msg, updates) {\n    var self = this;\n    var serverDoc = self._getServerDoc(\n      msg.collection, MongoID.idParse(msg.id));\n    if (serverDoc) {\n      if (serverDoc.document === undefined)\n        throw new Error(\"Server sent changed for nonexisting id: \" + msg.id);\n      DiffSequence.applyChanges(serverDoc.document, msg.fields);\n    } else {\n      self._pushUpdate(updates, msg.collection, msg);\n    }\n  },\n\n  _process_removed: function (msg, updates) {\n    var self = this;\n    var serverDoc = self._getServerDoc(\n      msg.collection, MongoID.idParse(msg.id));\n    if (serverDoc) {\n      // Some outstanding stub wrote here.\n      if (serverDoc.document === undefined)\n        throw new Error(\"Server sent removed for nonexisting id:\" + msg.id);\n      serverDoc.document = undefined;\n    } else {\n      self._pushUpdate(updates, msg.collection, {\n        msg: 'removed',\n        collection: msg.collection,\n        id: msg.id\n      });\n    }\n  },\n\n  _process_updated: function (msg, updates) {\n    var self = this;\n    // Process \"method done\" messages.\n    _.each(msg.methods, function (methodId) {\n      _.each(self._documentsWrittenByStub[methodId], function (written) {\n        var serverDoc = self._getServerDoc(written.collection, written.id);\n        if (!serverDoc)\n          throw new Error(\"Lost serverDoc for \" + JSON.stringify(written));\n        if (!serverDoc.writtenByStubs[methodId])\n          throw new Error(\"Doc \" + JSON.stringify(written) +\n                          \" not written by  method \" + methodId);\n        delete serverDoc.writtenByStubs[methodId];\n        if (_.isEmpty(serverDoc.writtenByStubs)) {\n          // All methods whose stubs wrote this method have completed! We can\n          // now copy the saved document to the database (reverting the stub's\n          // change if the server did not write to this object, or applying the\n          // server's writes if it did).\n\n          // This is a fake ddp 'replace' message.  It's just for talking\n          // between livedata connections and minimongo.  (We have to stringify\n          // the ID because it's supposed to look like a wire message.)\n          self._pushUpdate(updates, written.collection, {\n            msg: 'replace',\n            id: MongoID.idStringify(written.id),\n            replace: serverDoc.document\n          });\n          // Call all flush callbacks.\n          _.each(serverDoc.flushCallbacks, function (c) {\n            c();\n          });\n\n          // Delete this completed serverDocument. Don't bother to GC empty\n          // IdMaps inside self._serverDocuments, since there probably aren't\n          // many collections and they'll be written repeatedly.\n          self._serverDocuments[written.collection].remove(written.id);\n        }\n      });\n      delete self._documentsWrittenByStub[methodId];\n\n      // We want to call the data-written callback, but we can't do so until all\n      // currently buffered messages are flushed.\n      var callbackInvoker = self._methodInvokers[methodId];\n      if (!callbackInvoker)\n        throw new Error(\"No callback invoker for method \" + methodId);\n      self._runWhenAllServerDocsAreFlushed(\n        _.bind(callbackInvoker.dataVisible, callbackInvoker));\n    });\n  },\n\n  _process_ready: function (msg, updates) {\n    var self = this;\n    // Process \"sub ready\" messages. \"sub ready\" messages don't take effect\n    // until all current server documents have been flushed to the local\n    // database. We can use a write fence to implement this.\n    _.each(msg.subs, function (subId) {\n      self._runWhenAllServerDocsAreFlushed(function () {\n        var subRecord = self._subscriptions[subId];\n        // Did we already unsubscribe?\n        if (!subRecord)\n          return;\n        // Did we already receive a ready message? (Oops!)\n        if (subRecord.ready)\n          return;\n        subRecord.ready = true;\n        subRecord.readyCallback && subRecord.readyCallback();\n        subRecord.readyDeps.changed();\n      });\n    });\n  },\n\n  // Ensures that \"f\" will be called after all documents currently in\n  // _serverDocuments have been written to the local cache. f will not be called\n  // if the connection is lost before then!\n  _runWhenAllServerDocsAreFlushed: function (f) {\n    var self = this;\n    var runFAfterUpdates = function () {\n      self._afterUpdateCallbacks.push(f);\n    };\n    var unflushedServerDocCount = 0;\n    var onServerDocFlush = function () {\n      --unflushedServerDocCount;\n      if (unflushedServerDocCount === 0) {\n        // This was the last doc to flush! Arrange to run f after the updates\n        // have been applied.\n        runFAfterUpdates();\n      }\n    };\n    _.each(self._serverDocuments, function (collectionDocs) {\n      collectionDocs.forEach(function (serverDoc) {\n        var writtenByStubForAMethodWithSentMessage = _.any(\n          serverDoc.writtenByStubs, function (dummy, methodId) {\n            var invoker = self._methodInvokers[methodId];\n            return invoker && invoker.sentMessage;\n          });\n        if (writtenByStubForAMethodWithSentMessage) {\n          ++unflushedServerDocCount;\n          serverDoc.flushCallbacks.push(onServerDocFlush);\n        }\n      });\n    });\n    if (unflushedServerDocCount === 0) {\n      // There aren't any buffered docs --- we can call f as soon as the current\n      // round of updates is applied!\n      runFAfterUpdates();\n    }\n  },\n\n  _livedata_nosub: function (msg) {\n    var self = this;\n\n    // First pass it through _livedata_data, which only uses it to help get\n    // towards quiescence.\n    self._livedata_data(msg);\n\n    // Do the rest of our processing immediately, with no\n    // buffering-until-quiescence.\n\n    // we weren't subbed anyway, or we initiated the unsub.\n    if (!_.has(self._subscriptions, msg.id))\n      return;\n\n    // XXX COMPAT WITH 1.0.3.1 #errorCallback\n    var errorCallback = self._subscriptions[msg.id].errorCallback;\n    var stopCallback = self._subscriptions[msg.id].stopCallback;\n\n    self._subscriptions[msg.id].remove();\n\n    var meteorErrorFromMsg = function (msgArg) {\n      return msgArg && msgArg.error && new Meteor.Error(\n        msgArg.error.error, msgArg.error.reason, msgArg.error.details);\n    }\n\n    // XXX COMPAT WITH 1.0.3.1 #errorCallback\n    if (errorCallback && msg.error) {\n      errorCallback(meteorErrorFromMsg(msg));\n    }\n\n    if (stopCallback) {\n      stopCallback(meteorErrorFromMsg(msg));\n    }\n  },\n\n  _process_nosub: function () {\n    // This is called as part of the \"buffer until quiescence\" process, but\n    // nosub's effect is always immediate. It only goes in the buffer at all\n    // because it's possible for a nosub to be the thing that triggers\n    // quiescence, if we were waiting for a sub to be revived and it dies\n    // instead.\n  },\n\n  _livedata_result: function (msg) {\n    // id, result or error. error has error (code), reason, details\n\n    var self = this;\n\n    // Lets make sure there are no buffered writes before returning result.\n    if (!_.isEmpty(self._bufferedWrites)) {\n      self._flushBufferedWrites();\n    }\n\n    // find the outstanding request\n    // should be O(1) in nearly all realistic use cases\n    if (_.isEmpty(self._outstandingMethodBlocks)) {\n      Meteor._debug(\"Received method result but no methods outstanding\");\n      return;\n    }\n    var currentMethodBlock = self._outstandingMethodBlocks[0].methods;\n    var m;\n    for (var i = 0; i < currentMethodBlock.length; i++) {\n      m = currentMethodBlock[i];\n      if (m.methodId === msg.id)\n        break;\n    }\n\n    if (!m) {\n      Meteor._debug(\"Can't match method response to original method call\", msg);\n      return;\n    }\n\n    // Remove from current method block. This may leave the block empty, but we\n    // don't move on to the next block until the callback has been delivered, in\n    // _outstandingMethodFinished.\n    currentMethodBlock.splice(i, 1);\n\n    if (_.has(msg, 'error')) {\n      m.receiveResult(new Meteor.Error(\n        msg.error.error, msg.error.reason,\n        msg.error.details));\n    } else {\n      // msg.result may be undefined if the method didn't return a\n      // value\n      m.receiveResult(undefined, msg.result);\n    }\n  },\n\n  // Called by MethodInvoker after a method's callback is invoked.  If this was\n  // the last outstanding method in the current block, runs the next block. If\n  // there are no more methods, consider accepting a hot code push.\n  _outstandingMethodFinished: function () {\n    var self = this;\n    if (self._anyMethodsAreOutstanding())\n      return;\n\n    // No methods are outstanding. This should mean that the first block of\n    // methods is empty. (Or it might not exist, if this was a method that\n    // half-finished before disconnect/reconnect.)\n    if (! _.isEmpty(self._outstandingMethodBlocks)) {\n      var firstBlock = self._outstandingMethodBlocks.shift();\n      if (! _.isEmpty(firstBlock.methods))\n        throw new Error(\"No methods outstanding but nonempty block: \" +\n                        JSON.stringify(firstBlock));\n\n      // Send the outstanding methods now in the first block.\n      if (!_.isEmpty(self._outstandingMethodBlocks))\n        self._sendOutstandingMethods();\n    }\n\n    // Maybe accept a hot code push.\n    self._maybeMigrate();\n  },\n\n  // Sends messages for all the methods in the first block in\n  // _outstandingMethodBlocks.\n  _sendOutstandingMethods: function() {\n    var self = this;\n    if (_.isEmpty(self._outstandingMethodBlocks))\n      return;\n    _.each(self._outstandingMethodBlocks[0].methods, function (m) {\n      m.sendMessage();\n    });\n  },\n\n  _livedata_error: function (msg) {\n    Meteor._debug(\"Received error from server: \", msg.reason);\n    if (msg.offendingMessage)\n      Meteor._debug(\"For: \", msg.offendingMessage);\n  },\n\n  _callOnReconnectAndSendAppropriateOutstandingMethods: function() {\n    var self = this;\n    var oldOutstandingMethodBlocks = self._outstandingMethodBlocks;\n    self._outstandingMethodBlocks = [];\n\n    self.onReconnect && self.onReconnect();\n    DDP._reconnectHook.each(function (callback) {\n      callback(self);\n      return true;\n    });\n\n    if (_.isEmpty(oldOutstandingMethodBlocks))\n      return;\n\n    // We have at least one block worth of old outstanding methods to try\n    // again. First: did onReconnect actually send anything? If not, we just\n    // restore all outstanding methods and run the first block.\n    if (_.isEmpty(self._outstandingMethodBlocks)) {\n      self._outstandingMethodBlocks = oldOutstandingMethodBlocks;\n      self._sendOutstandingMethods();\n      return;\n    }\n\n    // OK, there are blocks on both sides. Special case: merge the last block of\n    // the reconnect methods with the first block of the original methods, if\n    // neither of them are \"wait\" blocks.\n    if (!_.last(self._outstandingMethodBlocks).wait &&\n        !oldOutstandingMethodBlocks[0].wait) {\n      _.each(oldOutstandingMethodBlocks[0].methods, function (m) {\n        _.last(self._outstandingMethodBlocks).methods.push(m);\n\n        // If this \"last block\" is also the first block, send the message.\n        if (self._outstandingMethodBlocks.length === 1)\n          m.sendMessage();\n      });\n\n      oldOutstandingMethodBlocks.shift();\n    }\n\n    // Now add the rest of the original blocks on.\n    _.each(oldOutstandingMethodBlocks, function (block) {\n      self._outstandingMethodBlocks.push(block);\n    });\n  },\n\n  // We can accept a hot code push if there are no methods in flight.\n  _readyToMigrate: function() {\n    var self = this;\n    return _.isEmpty(self._methodInvokers);\n  },\n\n  // If we were blocking a migration, see if it's now possible to continue.\n  // Call whenever the set of outstanding/blocked methods shrinks.\n  _maybeMigrate: function () {\n    var self = this;\n    if (self._retryMigrate && self._readyToMigrate()) {\n      self._retryMigrate();\n      self._retryMigrate = null;\n    }\n  }\n});\n\nLivedataTest.Connection = Connection;\n\n// @param url {String} URL to Meteor app,\n//     e.g.:\n//     \"subdomain.meteor.com\",\n//     \"http://subdomain.meteor.com\",\n//     \"/\",\n//     \"ddp+sockjs://ddp--****-foo.meteor.com/sockjs\"\n\n/**\n * @summary Connect to the server of a different Meteor application to subscribe to its document sets and invoke its remote methods.\n * @locus Anywhere\n * @param {String} url The URL of another Meteor application.\n */\nDDP.connect = function (url, options) {\n  var ret = new Connection(url, options);\n  allConnections.push(ret); // hack. see below.\n  return ret;\n};\n\nDDP._reconnectHook = new Hook({ bindEnvironment: false });\n\n/**\n * @summary Register a function to call as the first step of\n * reconnecting. This function can call methods which will be executed before\n * any other outstanding methods. For example, this can be used to re-establish\n * the appropriate authentication context on the connection.\n * @locus Anywhere\n * @param {Function} callback The function to call. It will be called with a\n * single argument, the [connection object](#ddp_connect) that is reconnecting.\n */\nDDP.onReconnect = function (callback) {\n  return DDP._reconnectHook.register(callback);\n};\n\n// Hack for `spiderable` package: a way to see if the page is done\n// loading all the data it needs.\n//\nallConnections = [];\nDDP._allSubscriptionsReady = function () {\n  return _.all(allConnections, function (conn) {\n    return _.all(conn._subscriptions, function (sub) {\n      return sub.ready;\n    });\n  });\n};\n","import { DDP } from \"./namespace.js\";\n\n// Meteor.refresh can be called on the client (if you're in common code) but it\n// only has an effect on the server.\nMeteor.refresh = function (notification) {\n};\n\nif (Meteor.isClient) {\n  // By default, try to connect back to the same endpoint as the page\n  // was served from.\n  //\n  // XXX We should be doing this a different way. Right now we don't\n  // include ROOT_URL_PATH_PREFIX when computing ddpUrl. (We don't\n  // include it on the server when computing\n  // DDP_DEFAULT_CONNECTION_URL, and we don't include it in our\n  // default, '/'.) We get by with this because DDP.connect then\n  // forces the URL passed to it to be interpreted relative to the\n  // app's deploy path, even if it is absolute. Instead, we should\n  // make DDP_DEFAULT_CONNECTION_URL, if set, include the path prefix;\n  // make the default ddpUrl be '' rather that '/'; and make\n  // _translateUrl in stream_client_common.js not force absolute paths\n  // to be treated like relative paths. See also\n  // stream_client_common.js #RationalizingRelativeDDPURLs\n  var ddpUrl = '/';\n  if (typeof __meteor_runtime_config__ !== \"undefined\") {\n    if (__meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL)\n      ddpUrl = __meteor_runtime_config__.DDP_DEFAULT_CONNECTION_URL;\n  }\n\n  var retry = new Retry();\n\n  var onDDPVersionNegotiationFailure = function (description) {\n    Meteor._debug(description);\n    if (Package.reload) {\n      var migrationData = Package.reload.Reload._migrationData('livedata') || {};\n      var failures = migrationData.DDPVersionNegotiationFailures || 0;\n      ++failures;\n      Package.reload.Reload._onMigrate('livedata', function () {\n        return [true, {DDPVersionNegotiationFailures: failures}];\n      });\n      retry.retryLater(failures, function () {\n        Package.reload.Reload._reload();\n      });\n    }\n  };\n\n  Meteor.connection =\n    DDP.connect(ddpUrl, {\n      onDDPVersionNegotiationFailure: onDDPVersionNegotiationFailure\n    });\n\n  // Proxy the public methods of Meteor.connection so they can\n  // be called directly on Meteor.\n  _.each(['subscribe', 'methods', 'call', 'apply', 'status', 'reconnect',\n          'disconnect'],\n         function (name) {\n           Meteor[name] = _.bind(Meteor.connection[name], Meteor.connection);\n         });\n} else {\n  // Never set up a default connection on the server. Don't even map\n  // subscribe/call/etc onto Meteor.\n  Meteor.connection = null;\n}\n\n// Meteor.connection used to be called\n// Meteor.default_connection. Provide backcompat as a courtesy even\n// though it was never documented.\n// XXX COMPAT WITH 0.6.4\nMeteor.default_connection = Meteor.connection;\n\n// We should transition from Meteor.connect to DDP.connect.\n// XXX COMPAT WITH 0.6.4\nMeteor.connect = DDP.connect;\n","/**\n * @namespace DDP\n * @summary Namespace for DDP-related methods/classes.\n */\nexport const DDP = {};\nexport const LivedataTest = {};\n","export class MongoIDMap extends IdMap {\n  constructor() {\n    super(\n      MongoID.idStringify,\n      MongoID.idParse,\n    );\n  }\n}\n"]}}]