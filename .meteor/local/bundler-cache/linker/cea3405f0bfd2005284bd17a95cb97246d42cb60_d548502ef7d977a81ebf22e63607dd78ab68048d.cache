[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar Base64 = Package.base64.Base64;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-server'].Symbol;\nvar Map = Package['ecmascript-runtime-server'].Map;\nvar Set = Package['ecmascript-runtime-server'].Set;\n\n/* Package-scope variables */\nvar v, EJSON;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"ejson\":{\"ejson.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/ejson/ejson.js                                                                                          //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                             //\n                                                                                                                    //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                    //\n                                                                                                                    //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                   //\n                                                                                                                    //\nmodule.export({                                                                                                     // 1\n  EJSON: function () {                                                                                              // 1\n    return EJSON;                                                                                                   // 1\n  }                                                                                                                 // 1\n});                                                                                                                 // 1\n/**                                                                                                                 // 1\n * @namespace                                                                                                       //\n * @summary Namespace for EJSON functions                                                                           //\n */var EJSON = {}; // Custom type interface definition                                                              //\n/**                                                                                                                 // 8\n * @class CustomType                                                                                                //\n * @instanceName customType                                                                                         //\n * @memberOf EJSON                                                                                                  //\n * @summary The interface that a class must satisfy to be able to become an                                         //\n * EJSON custom type via EJSON.addType.                                                                             //\n */ /**                                                                                                             //\n     * @function typeName                                                                                           //\n     * @memberOf EJSON.CustomType                                                                                   //\n     * @summary Return the tag used to identify this type.  This must match the                                     //\n     *          tag used to register this type with                                                                 //\n     *          [`EJSON.addType`](#ejson_add_type).                                                                 //\n     * @locus Anywhere                                                                                              //\n     * @instance                                                                                                    //\n     */ /**                                                                                                         //\n         * @function toJSONValue                                                                                    //\n         * @memberOf EJSON.CustomType                                                                               //\n         * @summary Serialize this instance into a JSON-compatible value.                                           //\n         * @locus Anywhere                                                                                          //\n         * @instance                                                                                                //\n         */ /**                                                                                                     //\n             * @function clone                                                                                      //\n             * @memberOf EJSON.CustomType                                                                           //\n             * @summary Return a value `r` such that `this.equals(r)` is true, and                                  //\n             *          modifications to `r` do not affect `this` and vice versa.                                   //\n             * @locus Anywhere                                                                                      //\n             * @instance                                                                                            //\n             */ /**                                                                                                 //\n                 * @function equals                                                                                 //\n                 * @memberOf EJSON.CustomType                                                                       //\n                 * @summary Return `true` if `other` has a value equal to `this`; `false`                           //\n                 *          otherwise.                                                                              //\n                 * @locus Anywhere                                                                                  //\n                 * @param {Object} other Another object to compare this to.                                         //\n                 * @instance                                                                                        //\n                 */                                                                                                 //\nvar customTypes = {};                                                                                               // 53\n                                                                                                                    //\nvar hasOwn = function (obj, prop) {                                                                                 // 55\n  return {}.hasOwnProperty.call(obj, prop);                                                                         // 55\n};                                                                                                                  // 55\n                                                                                                                    //\nvar isArguments = function (obj) {                                                                                  // 57\n  return obj != null && hasOwn(obj, 'callee');                                                                      // 57\n};                                                                                                                  // 57\n                                                                                                                    //\nvar isInfOrNan = function (obj) {                                                                                   // 59\n  return Number.isNaN(obj) || obj === Infinity || obj === -Infinity;                                                // 60\n}; // Add a custom type, using a method of your choice to get to and                                                // 60\n// from a basic JSON-able representation.  The factory argument                                                     // 63\n// is a function of JSON-able --> your object                                                                       // 64\n// The type you add must have:                                                                                      // 65\n// - A toJSONValue() method, so that Meteor can serialize it                                                        // 66\n// - a typeName() method, to show how to look it up in our type table.                                              // 67\n// It is okay if these methods are monkey-patched on.                                                               // 68\n// EJSON.clone will use toJSONValue and the given factory to produce                                                // 69\n// a clone, but you may specify a method clone() that will be                                                       // 70\n// used instead.                                                                                                    // 71\n// Similarly, EJSON.equals will use toJSONValue to make comparisons,                                                // 72\n// but you may provide a method equals() instead.                                                                   // 73\n/**                                                                                                                 // 74\n * @summary Add a custom datatype to EJSON.                                                                         //\n * @locus Anywhere                                                                                                  //\n * @param {String} name A tag for your custom type; must be unique among                                            //\n *                      custom data types defined in your project, and must                                         //\n *                      match the result of your type's `typeName` method.                                          //\n * @param {Function} factory A function that deserializes a JSON-compatible                                         //\n *                           value into an instance of your type.  This should                                      //\n *                           match the serialization performed by your                                              //\n *                           type's `toJSONValue` method.                                                           //\n */                                                                                                                 //\n                                                                                                                    //\nEJSON.addType = function (name, factory) {                                                                          // 85\n  if (hasOwn(customTypes, name)) {                                                                                  // 86\n    throw new Error(\"Type \" + name + \" already present\");                                                           // 87\n  }                                                                                                                 // 88\n                                                                                                                    //\n  customTypes[name] = factory;                                                                                      // 89\n};                                                                                                                  // 90\n                                                                                                                    //\nvar builtinConverters = [{                                                                                          // 92\n  // Date                                                                                                           // 93\n  matchJSONValue: function (obj) {                                                                                  // 94\n    return hasOwn(obj, '$date') && Object.keys(obj).length === 1;                                                   // 95\n  },                                                                                                                // 96\n  matchObject: function (obj) {                                                                                     // 97\n    return obj instanceof Date;                                                                                     // 98\n  },                                                                                                                // 99\n  toJSONValue: function (obj) {                                                                                     // 100\n    return {                                                                                                        // 101\n      $date: obj.getTime()                                                                                          // 101\n    };                                                                                                              // 101\n  },                                                                                                                // 102\n  fromJSONValue: function (obj) {                                                                                   // 103\n    return new Date(obj.$date);                                                                                     // 104\n  }                                                                                                                 // 105\n}, {                                                                                                                // 93\n  // RegExp                                                                                                         // 107\n  matchJSONValue: function (obj) {                                                                                  // 108\n    return hasOwn(obj, '$regexp') && hasOwn(obj, '$flags') && Object.keys(obj).length === 2;                        // 109\n  },                                                                                                                // 112\n  matchObject: function (obj) {                                                                                     // 113\n    return obj instanceof RegExp;                                                                                   // 114\n  },                                                                                                                // 115\n  toJSONValue: function (regexp) {                                                                                  // 116\n    return {                                                                                                        // 117\n      $regexp: regexp.source,                                                                                       // 118\n      $flags: regexp.flags                                                                                          // 119\n    };                                                                                                              // 117\n  },                                                                                                                // 121\n  fromJSONValue: function (obj) {                                                                                   // 122\n    // Replaces duplicate / invalid flags.                                                                          // 123\n    return new RegExp(obj.$regexp, obj.$flags // Cut off flags at 50 chars to avoid abusing RegExp for DOS.         // 124\n    .slice(0, 50).replace(/[^gimuy]/g, '').replace(/(.)(?=.*\\1)/g, ''));                                            // 126\n  }                                                                                                                 // 132\n}, {                                                                                                                // 107\n  // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'                                           // 134\n  // which we match.)                                                                                               // 135\n  matchJSONValue: function (obj) {                                                                                  // 136\n    return hasOwn(obj, '$InfNaN') && Object.keys(obj).length === 1;                                                 // 137\n  },                                                                                                                // 138\n  matchObject: isInfOrNan,                                                                                          // 139\n  toJSONValue: function (obj) {                                                                                     // 140\n    var sign = void 0;                                                                                              // 141\n                                                                                                                    //\n    if (Number.isNaN(obj)) {                                                                                        // 142\n      sign = 0;                                                                                                     // 143\n    } else if (obj === Infinity) {                                                                                  // 144\n      sign = 1;                                                                                                     // 145\n    } else {                                                                                                        // 146\n      sign = -1;                                                                                                    // 147\n    }                                                                                                               // 148\n                                                                                                                    //\n    return {                                                                                                        // 149\n      $InfNaN: sign                                                                                                 // 149\n    };                                                                                                              // 149\n  },                                                                                                                // 150\n  fromJSONValue: function (obj) {                                                                                   // 151\n    return obj.$InfNaN / 0;                                                                                         // 152\n  }                                                                                                                 // 153\n}, {                                                                                                                // 134\n  // Binary                                                                                                         // 155\n  matchJSONValue: function (obj) {                                                                                  // 156\n    return hasOwn(obj, '$binary') && Object.keys(obj).length === 1;                                                 // 157\n  },                                                                                                                // 158\n  matchObject: function (obj) {                                                                                     // 159\n    return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && hasOwn(obj, '$Uint8ArrayPolyfill');\n  },                                                                                                                // 162\n  toJSONValue: function (obj) {                                                                                     // 163\n    return {                                                                                                        // 164\n      $binary: Base64.encode(obj)                                                                                   // 164\n    };                                                                                                              // 164\n  },                                                                                                                // 165\n  fromJSONValue: function (obj) {                                                                                   // 166\n    return Base64.decode(obj.$binary);                                                                              // 167\n  }                                                                                                                 // 168\n}, {                                                                                                                // 155\n  // Escaping one level                                                                                             // 170\n  matchJSONValue: function (obj) {                                                                                  // 171\n    return hasOwn(obj, '$escape') && Object.keys(obj).length === 1;                                                 // 172\n  },                                                                                                                // 173\n  matchObject: function (obj) {                                                                                     // 174\n    var match = false;                                                                                              // 175\n                                                                                                                    //\n    if (obj) {                                                                                                      // 176\n      var keyCount = Object.keys(obj).length;                                                                       // 177\n                                                                                                                    //\n      if (keyCount === 1 || keyCount === 2) {                                                                       // 178\n        match = builtinConverters.some(function (converter) {                                                       // 179\n          return converter.matchJSONValue(obj);                                                                     // 180\n        });                                                                                                         // 180\n      }                                                                                                             // 181\n    }                                                                                                               // 182\n                                                                                                                    //\n    return match;                                                                                                   // 183\n  },                                                                                                                // 184\n  toJSONValue: function (obj) {                                                                                     // 185\n    var newObj = {};                                                                                                // 186\n    Object.keys(obj).forEach(function (key) {                                                                       // 187\n      newObj[key] = EJSON.toJSONValue(obj[key]);                                                                    // 188\n    });                                                                                                             // 189\n    return {                                                                                                        // 190\n      $escape: newObj                                                                                               // 190\n    };                                                                                                              // 190\n  },                                                                                                                // 191\n  fromJSONValue: function (obj) {                                                                                   // 192\n    var newObj = {};                                                                                                // 193\n    Object.keys(obj.$escape).forEach(function (key) {                                                               // 194\n      newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);                                                          // 195\n    });                                                                                                             // 196\n    return newObj;                                                                                                  // 197\n  }                                                                                                                 // 198\n}, {                                                                                                                // 170\n  // Custom                                                                                                         // 200\n  matchJSONValue: function (obj) {                                                                                  // 201\n    return hasOwn(obj, '$type') && hasOwn(obj, '$value') && Object.keys(obj).length === 2;                          // 202\n  },                                                                                                                // 204\n  matchObject: function (obj) {                                                                                     // 205\n    return EJSON._isCustomType(obj);                                                                                // 206\n  },                                                                                                                // 207\n  toJSONValue: function (obj) {                                                                                     // 208\n    var jsonValue = Meteor._noYieldsAllowed(function () {                                                           // 209\n      return obj.toJSONValue();                                                                                     // 209\n    });                                                                                                             // 209\n                                                                                                                    //\n    return {                                                                                                        // 210\n      $type: obj.typeName(),                                                                                        // 210\n      $value: jsonValue                                                                                             // 210\n    };                                                                                                              // 210\n  },                                                                                                                // 211\n  fromJSONValue: function (obj) {                                                                                   // 212\n    var typeName = obj.$type;                                                                                       // 213\n                                                                                                                    //\n    if (!hasOwn(customTypes, typeName)) {                                                                           // 214\n      throw new Error(\"Custom EJSON type \" + typeName + \" is not defined\");                                         // 215\n    }                                                                                                               // 216\n                                                                                                                    //\n    var converter = customTypes[typeName];                                                                          // 217\n    return Meteor._noYieldsAllowed(function () {                                                                    // 218\n      return converter(obj.$value);                                                                                 // 218\n    });                                                                                                             // 218\n  }                                                                                                                 // 219\n}];                                                                                                                 // 200\n                                                                                                                    //\nEJSON._isCustomType = function (obj) {                                                                              // 223\n  return obj && typeof obj.toJSONValue === 'function' && typeof obj.typeName === 'function' && hasOwn(customTypes, obj.typeName());\n};                                                                                                                  // 223\n                                                                                                                    //\nEJSON._getTypes = function () {                                                                                     // 230\n  return customTypes;                                                                                               // 230\n};                                                                                                                  // 230\n                                                                                                                    //\nEJSON._getConverters = function () {                                                                                // 232\n  return builtinConverters;                                                                                         // 232\n}; // Either return the JSON-compatible version of the argument, or undefined (if                                   // 232\n// the item isn't itself replaceable, but maybe some fields in it are)                                              // 235\n                                                                                                                    //\n                                                                                                                    //\nvar toJSONValueHelper = function (item) {                                                                           // 236\n  for (var i = 0; i < builtinConverters.length; i++) {                                                              // 237\n    var converter = builtinConverters[i];                                                                           // 238\n                                                                                                                    //\n    if (converter.matchObject(item)) {                                                                              // 239\n      return converter.toJSONValue(item);                                                                           // 240\n    }                                                                                                               // 241\n  }                                                                                                                 // 242\n                                                                                                                    //\n  return undefined;                                                                                                 // 243\n}; // for both arrays and objects, in-place modification.                                                           // 244\n                                                                                                                    //\n                                                                                                                    //\nvar adjustTypesToJSONValue = function (obj) {                                                                       // 247\n  // Is it an atom that we need to adjust?                                                                          // 248\n  if (obj === null) {                                                                                               // 249\n    return null;                                                                                                    // 250\n  }                                                                                                                 // 251\n                                                                                                                    //\n  var maybeChanged = toJSONValueHelper(obj);                                                                        // 253\n                                                                                                                    //\n  if (maybeChanged !== undefined) {                                                                                 // 254\n    return maybeChanged;                                                                                            // 255\n  } // Other atoms are unchanged.                                                                                   // 256\n                                                                                                                    //\n                                                                                                                    //\n  if ((typeof obj === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(obj)) !== 'object') {                       // 259\n    return obj;                                                                                                     // 260\n  } // Iterate over array or object structure.                                                                      // 261\n                                                                                                                    //\n                                                                                                                    //\n  Object.keys(obj).forEach(function (key) {                                                                         // 264\n    var value = obj[key];                                                                                           // 265\n                                                                                                                    //\n    if ((typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) !== 'object' && value !== undefined && !isInfOrNan(value)) {\n      return; // continue                                                                                           // 268\n    }                                                                                                               // 269\n                                                                                                                    //\n    var changed = toJSONValueHelper(value);                                                                         // 271\n                                                                                                                    //\n    if (changed) {                                                                                                  // 272\n      obj[key] = changed;                                                                                           // 273\n      return; // on to the next key                                                                                 // 274\n    } // if we get here, value is an object but not adjustable                                                      // 275\n    // at this level.  recurse.                                                                                     // 277\n                                                                                                                    //\n                                                                                                                    //\n    adjustTypesToJSONValue(value);                                                                                  // 278\n  });                                                                                                               // 279\n  return obj;                                                                                                       // 280\n};                                                                                                                  // 281\n                                                                                                                    //\nEJSON._adjustTypesToJSONValue = adjustTypesToJSONValue; /**                                                         // 283\n                                                         * @summary Serialize an EJSON-compatible value into its plain JSON\n                                                         *          representation.                                 //\n                                                         * @locus Anywhere                                          //\n                                                         * @param {EJSON} val A value to serialize to plain JSON.   //\n                                                         */                                                         //\n                                                                                                                    //\nEJSON.toJSONValue = function (item) {                                                                               // 291\n  var changed = toJSONValueHelper(item);                                                                            // 292\n                                                                                                                    //\n  if (changed !== undefined) {                                                                                      // 293\n    return changed;                                                                                                 // 294\n  }                                                                                                                 // 295\n                                                                                                                    //\n  var newItem = item;                                                                                               // 297\n                                                                                                                    //\n  if ((typeof item === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(item)) === 'object') {                     // 298\n    newItem = EJSON.clone(item);                                                                                    // 299\n    adjustTypesToJSONValue(newItem);                                                                                // 300\n  }                                                                                                                 // 301\n                                                                                                                    //\n  return newItem;                                                                                                   // 302\n}; // Either return the argument changed to have the non-json                                                       // 303\n// rep of itself (the Object version) or the argument itself.                                                       // 306\n// DOES NOT RECURSE.  For actually getting the fully-changed value, use                                             // 307\n// EJSON.fromJSONValue                                                                                              // 308\n                                                                                                                    //\n                                                                                                                    //\nvar fromJSONValueHelper = function (value) {                                                                        // 309\n  if ((typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) === 'object' && value !== null) {\n    var keys = Object.keys(value);                                                                                  // 311\n                                                                                                                    //\n    if (keys.length <= 2 && keys.every(function (k) {                                                               // 312\n      return typeof k === 'string' && k.substr(0, 1) === '$';                                                       // 313\n    })) {                                                                                                           // 313\n      for (var i = 0; i < builtinConverters.length; i++) {                                                          // 314\n        var converter = builtinConverters[i];                                                                       // 315\n                                                                                                                    //\n        if (converter.matchJSONValue(value)) {                                                                      // 316\n          return converter.fromJSONValue(value);                                                                    // 317\n        }                                                                                                           // 318\n      }                                                                                                             // 319\n    }                                                                                                               // 320\n  }                                                                                                                 // 321\n                                                                                                                    //\n  return value;                                                                                                     // 322\n}; // for both arrays and objects. Tries its best to just                                                           // 323\n// use the object you hand it, but may return something                                                             // 326\n// different if the object you hand it itself needs changing.                                                       // 327\n                                                                                                                    //\n                                                                                                                    //\nvar adjustTypesFromJSONValue = function (obj) {                                                                     // 328\n  if (obj === null) {                                                                                               // 329\n    return null;                                                                                                    // 330\n  }                                                                                                                 // 331\n                                                                                                                    //\n  var maybeChanged = fromJSONValueHelper(obj);                                                                      // 333\n                                                                                                                    //\n  if (maybeChanged !== obj) {                                                                                       // 334\n    return maybeChanged;                                                                                            // 335\n  } // Other atoms are unchanged.                                                                                   // 336\n                                                                                                                    //\n                                                                                                                    //\n  if ((typeof obj === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(obj)) !== 'object') {                       // 339\n    return obj;                                                                                                     // 340\n  }                                                                                                                 // 341\n                                                                                                                    //\n  Object.keys(obj).forEach(function (key) {                                                                         // 343\n    var value = obj[key];                                                                                           // 344\n                                                                                                                    //\n    if ((typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) === 'object') {                 // 345\n      var changed = fromJSONValueHelper(value);                                                                     // 346\n                                                                                                                    //\n      if (value !== changed) {                                                                                      // 347\n        obj[key] = changed;                                                                                         // 348\n        return;                                                                                                     // 349\n      } // if we get here, value is an object but not adjustable                                                    // 350\n      // at this level.  recurse.                                                                                   // 352\n                                                                                                                    //\n                                                                                                                    //\n      adjustTypesFromJSONValue(value);                                                                              // 353\n    }                                                                                                               // 354\n  });                                                                                                               // 355\n  return obj;                                                                                                       // 356\n};                                                                                                                  // 357\n                                                                                                                    //\nEJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue; /**                                                     // 359\n                                                             * @summary Deserialize an EJSON value from its plain JSON representation.\n                                                             * @locus Anywhere                                      //\n                                                             * @param {JSONCompatible} val A value to deserialize into EJSON.\n                                                             */                                                     //\n                                                                                                                    //\nEJSON.fromJSONValue = function (item) {                                                                             // 366\n  var changed = fromJSONValueHelper(item);                                                                          // 367\n                                                                                                                    //\n  if (changed === item && (typeof item === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(item)) === 'object') {\n    changed = EJSON.clone(item);                                                                                    // 369\n    adjustTypesFromJSONValue(changed);                                                                              // 370\n  }                                                                                                                 // 371\n                                                                                                                    //\n  return changed;                                                                                                   // 372\n}; /**                                                                                                              // 373\n    * @summary Serialize a value to a string. For EJSON values, the serialization                                   //\n    *          fully represents the value. For non-EJSON values, serializes the                                     //\n    *          same way as `JSON.stringify`.                                                                        //\n    * @locus Anywhere                                                                                               //\n    * @param {EJSON} val A value to stringify.                                                                      //\n    * @param {Object} [options]                                                                                     //\n    * @param {Boolean | Integer | String} options.indent Indents objects and                                        //\n    * arrays for easy readability.  When `true`, indents by 2 spaces; when an                                       //\n    * integer, indents by that number of spaces; and when a string, uses the                                        //\n    * string as the indentation pattern.                                                                            //\n    * @param {Boolean} options.canonical When `true`, stringifies keys in an                                        //\n    *                                    object in sorted order.                                                    //\n    */                                                                                                              //\n                                                                                                                    //\nEJSON.stringify = function (item, options) {                                                                        // 389\n  var serialized = void 0;                                                                                          // 390\n  var json = EJSON.toJSONValue(item);                                                                               // 391\n                                                                                                                    //\n  if (options && (options.canonical || options.indent)) {                                                           // 392\n    var canonicalStringify = void 0;                                                                                // 1\n    module.watch(require(\"./stringify\"), {                                                                          // 1\n      \"default\": function (v) {                                                                                     // 1\n        canonicalStringify = v;                                                                                     // 1\n      }                                                                                                             // 1\n    }, 0);                                                                                                          // 1\n    serialized = canonicalStringify(json, options);                                                                 // 394\n  } else {                                                                                                          // 395\n    serialized = JSON.stringify(json);                                                                              // 396\n  }                                                                                                                 // 397\n                                                                                                                    //\n  return serialized;                                                                                                // 398\n}; /**                                                                                                              // 399\n    * @summary Parse a string into an EJSON value. Throws an error if the string                                    //\n    *          is not valid EJSON.                                                                                  //\n    * @locus Anywhere                                                                                               //\n    * @param {String} str A string to parse into an EJSON value.                                                    //\n    */                                                                                                              //\n                                                                                                                    //\nEJSON.parse = function (item) {                                                                                     // 407\n  if (typeof item !== 'string') {                                                                                   // 408\n    throw new Error('EJSON.parse argument should be a string');                                                     // 409\n  }                                                                                                                 // 410\n                                                                                                                    //\n  return EJSON.fromJSONValue(JSON.parse(item));                                                                     // 411\n}; /**                                                                                                              // 412\n    * @summary Returns true if `x` is a buffer of binary data, as returned from                                     //\n    *          [`EJSON.newBinary`](#ejson_new_binary).                                                              //\n    * @param {Object} x The variable to check.                                                                      //\n    * @locus Anywhere                                                                                               //\n    */                                                                                                              //\n                                                                                                                    //\nEJSON.isBinary = function (obj) {                                                                                   // 420\n  return !!(typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array || obj && obj.$Uint8ArrayPolyfill);      // 421\n}; /**                                                                                                              // 423\n    * @summary Return true if `a` and `b` are equal to each other.  Return false                                    //\n    *          otherwise.  Uses the `equals` method on `a` if present, otherwise                                    //\n    *          performs a deep comparison.                                                                          //\n    * @locus Anywhere                                                                                               //\n    * @param {EJSON} a                                                                                              //\n    * @param {EJSON} b                                                                                              //\n    * @param {Object} [options]                                                                                     //\n    * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,                                    //\n    * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`                                   //\n    * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The                                     //\n    * default is `false`.                                                                                           //\n    */                                                                                                              //\n                                                                                                                    //\nEJSON.equals = function (a, b, options) {                                                                           // 438\n  var i = void 0;                                                                                                   // 439\n  var keyOrderSensitive = !!(options && options.keyOrderSensitive);                                                 // 440\n                                                                                                                    //\n  if (a === b) {                                                                                                    // 441\n    return true;                                                                                                    // 442\n  } // This differs from the IEEE spec for NaN equality, b/c we don't want                                          // 443\n  // anything ever with a NaN to be poisoned from becoming equal to anything.                                       // 446\n                                                                                                                    //\n                                                                                                                    //\n  if (Number.isNaN(a) && Number.isNaN(b)) {                                                                         // 447\n    return true;                                                                                                    // 448\n  } // if either one is falsy, they'd have to be === to be equal                                                    // 449\n                                                                                                                    //\n                                                                                                                    //\n  if (!a || !b) {                                                                                                   // 452\n    return false;                                                                                                   // 453\n  }                                                                                                                 // 454\n                                                                                                                    //\n  if (!((typeof a === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(a)) === 'object' && (typeof b === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(b)) === 'object')) {\n    return false;                                                                                                   // 457\n  }                                                                                                                 // 458\n                                                                                                                    //\n  if (a instanceof Date && b instanceof Date) {                                                                     // 460\n    return a.valueOf() === b.valueOf();                                                                             // 461\n  }                                                                                                                 // 462\n                                                                                                                    //\n  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {                                                                     // 464\n    if (a.length !== b.length) {                                                                                    // 465\n      return false;                                                                                                 // 466\n    }                                                                                                               // 467\n                                                                                                                    //\n    for (i = 0; i < a.length; i++) {                                                                                // 468\n      if (a[i] !== b[i]) {                                                                                          // 469\n        return false;                                                                                               // 470\n      }                                                                                                             // 471\n    }                                                                                                               // 472\n                                                                                                                    //\n    return true;                                                                                                    // 473\n  }                                                                                                                 // 474\n                                                                                                                    //\n  if (typeof a.equals === 'function') {                                                                             // 476\n    return a.equals(b, options);                                                                                    // 477\n  }                                                                                                                 // 478\n                                                                                                                    //\n  if (typeof b.equals === 'function') {                                                                             // 480\n    return b.equals(a, options);                                                                                    // 481\n  }                                                                                                                 // 482\n                                                                                                                    //\n  if (a instanceof Array) {                                                                                         // 484\n    if (!(b instanceof Array)) {                                                                                    // 485\n      return false;                                                                                                 // 486\n    }                                                                                                               // 487\n                                                                                                                    //\n    if (a.length !== b.length) {                                                                                    // 488\n      return false;                                                                                                 // 489\n    }                                                                                                               // 490\n                                                                                                                    //\n    for (i = 0; i < a.length; i++) {                                                                                // 491\n      if (!EJSON.equals(a[i], b[i], options)) {                                                                     // 492\n        return false;                                                                                               // 493\n      }                                                                                                             // 494\n    }                                                                                                               // 495\n                                                                                                                    //\n    return true;                                                                                                    // 496\n  } // fallback for custom types that don't implement their own equals                                              // 497\n                                                                                                                    //\n                                                                                                                    //\n  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {                                                        // 500\n    case 1:                                                                                                         // 501\n      return false;                                                                                                 // 501\n                                                                                                                    //\n    case 2:                                                                                                         // 502\n      return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));                                              // 502\n                                                                                                                    //\n    default: // Do nothing                                                                                          // 503\n  } // fall back to structural equality of objects                                                                  // 500\n                                                                                                                    //\n                                                                                                                    //\n  var ret = void 0;                                                                                                 // 507\n  var aKeys = Object.keys(a);                                                                                       // 508\n  var bKeys = Object.keys(b);                                                                                       // 509\n                                                                                                                    //\n  if (keyOrderSensitive) {                                                                                          // 510\n    i = 0;                                                                                                          // 511\n    ret = aKeys.every(function (key) {                                                                              // 512\n      if (i >= bKeys.length) {                                                                                      // 513\n        return false;                                                                                               // 514\n      }                                                                                                             // 515\n                                                                                                                    //\n      if (key !== bKeys[i]) {                                                                                       // 516\n        return false;                                                                                               // 517\n      }                                                                                                             // 518\n                                                                                                                    //\n      if (!EJSON.equals(a[key], b[bKeys[i]], options)) {                                                            // 519\n        return false;                                                                                               // 520\n      }                                                                                                             // 521\n                                                                                                                    //\n      i++;                                                                                                          // 522\n      return true;                                                                                                  // 523\n    });                                                                                                             // 524\n  } else {                                                                                                          // 525\n    i = 0;                                                                                                          // 526\n    ret = aKeys.every(function (key) {                                                                              // 527\n      if (!hasOwn(b, key)) {                                                                                        // 528\n        return false;                                                                                               // 529\n      }                                                                                                             // 530\n                                                                                                                    //\n      if (!EJSON.equals(a[key], b[key], options)) {                                                                 // 531\n        return false;                                                                                               // 532\n      }                                                                                                             // 533\n                                                                                                                    //\n      i++;                                                                                                          // 534\n      return true;                                                                                                  // 535\n    });                                                                                                             // 536\n  }                                                                                                                 // 537\n                                                                                                                    //\n  return ret && i === bKeys.length;                                                                                 // 538\n}; /**                                                                                                              // 539\n    * @summary Return a deep copy of `val`.                                                                         //\n    * @locus Anywhere                                                                                               //\n    * @param {EJSON} val A value to copy.                                                                           //\n    */                                                                                                              //\n                                                                                                                    //\nEJSON.clone = function (v) {                                                                                        // 546\n  var ret = void 0;                                                                                                 // 547\n                                                                                                                    //\n  if ((typeof v === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(v)) !== 'object') {                           // 548\n    return v;                                                                                                       // 549\n  }                                                                                                                 // 550\n                                                                                                                    //\n  if (v === null) {                                                                                                 // 552\n    return null; // null has typeof \"object\"                                                                        // 553\n  }                                                                                                                 // 554\n                                                                                                                    //\n  if (v instanceof Date) {                                                                                          // 556\n    return new Date(v.getTime());                                                                                   // 557\n  } // RegExps are not really EJSON elements (eg we don't define a serialization                                    // 558\n  // for them), but they're immutable anyway, so we can support them in clone.                                      // 561\n                                                                                                                    //\n                                                                                                                    //\n  if (v instanceof RegExp) {                                                                                        // 562\n    return v;                                                                                                       // 563\n  }                                                                                                                 // 564\n                                                                                                                    //\n  if (EJSON.isBinary(v)) {                                                                                          // 566\n    ret = EJSON.newBinary(v.length);                                                                                // 567\n                                                                                                                    //\n    for (var i = 0; i < v.length; i++) {                                                                            // 568\n      ret[i] = v[i];                                                                                                // 569\n    }                                                                                                               // 570\n                                                                                                                    //\n    return ret;                                                                                                     // 571\n  }                                                                                                                 // 572\n                                                                                                                    //\n  if (Array.isArray(v)) {                                                                                           // 574\n    return v.map(function (value) {                                                                                 // 575\n      return EJSON.clone(value);                                                                                    // 575\n    });                                                                                                             // 575\n  }                                                                                                                 // 576\n                                                                                                                    //\n  if (isArguments(v)) {                                                                                             // 578\n    return Array.from(v).map(function (value) {                                                                     // 579\n      return EJSON.clone(value);                                                                                    // 579\n    });                                                                                                             // 579\n  } // handle general user-defined typed Objects if they have a clone method                                        // 580\n                                                                                                                    //\n                                                                                                                    //\n  if (typeof v.clone === 'function') {                                                                              // 583\n    return v.clone();                                                                                               // 584\n  } // handle other custom types                                                                                    // 585\n                                                                                                                    //\n                                                                                                                    //\n  if (EJSON._isCustomType(v)) {                                                                                     // 588\n    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);                                            // 589\n  } // handle other objects                                                                                         // 590\n                                                                                                                    //\n                                                                                                                    //\n  ret = {};                                                                                                         // 593\n  Object.keys(v).forEach(function (key) {                                                                           // 594\n    ret[key] = EJSON.clone(v[key]);                                                                                 // 595\n  });                                                                                                               // 596\n  return ret;                                                                                                       // 597\n}; /**                                                                                                              // 598\n    * @summary Allocate a new buffer of binary data that EJSON can serialize.                                       //\n    * @locus Anywhere                                                                                               //\n    * @param {Number} size The number of bytes of binary data to allocate.                                          //\n    */ // EJSON.newBinary is the public documented API for this functionality,                                      //\n// but the implementation is in the 'base64' package to avoid                                                       // 606\n// introducing a circular dependency. (If the implementation were here,                                             // 607\n// then 'base64' would have to use EJSON.newBinary, and 'ejson' would                                               // 608\n// also have to use 'base64'.)                                                                                      // 609\n                                                                                                                    //\n                                                                                                                    //\nEJSON.newBinary = Base64.newBinary;                                                                                 // 610\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"stringify.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/ejson/stringify.js                                                                                      //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar _typeof2 = require(\"babel-runtime/helpers/typeof\");                                                             //\n                                                                                                                    //\nvar _typeof3 = _interopRequireDefault(_typeof2);                                                                    //\n                                                                                                                    //\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }                   //\n                                                                                                                    //\n// Based on json2.js from https://github.com/douglascrockford/JSON-js                                               // 1\n//                                                                                                                  // 2\n//    json2.js                                                                                                      // 3\n//    2012-10-08                                                                                                    // 4\n//                                                                                                                  // 5\n//    Public Domain.                                                                                                // 6\n//                                                                                                                  // 7\n//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.                                                       // 8\nfunction quote(string) {                                                                                            // 10\n  return JSON.stringify(string);                                                                                    // 11\n}                                                                                                                   // 12\n                                                                                                                    //\nvar str = function (key, holder, singleIndent, outerIndent, canonical) {                                            // 14\n  var value = holder[key]; // What happens next depends on the value's type.                                        // 15\n                                                                                                                    //\n  switch (typeof value === \"undefined\" ? \"undefined\" : (0, _typeof3.default)(value)) {                              // 18\n    case 'string':                                                                                                  // 19\n      return quote(value);                                                                                          // 20\n                                                                                                                    //\n    case 'number':                                                                                                  // 21\n      // JSON numbers must be finite. Encode non-finite numbers as null.                                            // 22\n      return isFinite(value) ? String(value) : 'null';                                                              // 23\n                                                                                                                    //\n    case 'boolean':                                                                                                 // 24\n      return String(value);                                                                                         // 25\n    // If the type is 'object', we might be dealing with an object or an array or                                   // 26\n    // null.                                                                                                        // 27\n                                                                                                                    //\n    case 'object':                                                                                                  // 28\n      // Due to a specification blunder in ECMAScript, typeof null is 'object',                                     // 29\n      // so watch out for that case.                                                                                // 30\n      if (!value) {                                                                                                 // 31\n        return 'null';                                                                                              // 32\n      } // Make an array to hold the partial results of stringifying this object                                    // 33\n      // value.                                                                                                     // 35\n                                                                                                                    //\n                                                                                                                    //\n      var innerIndent = outerIndent + singleIndent;                                                                 // 36\n      var partial = []; // Is the value an array?                                                                   // 37\n                                                                                                                    //\n      if (Array.isArray(value) || {}.hasOwnProperty.call(value, 'callee')) {                                        // 40\n        // The value is an array. Stringify every element. Use null as a                                            // 41\n        // placeholder for non-JSON values.                                                                         // 42\n        var length = value.length;                                                                                  // 43\n                                                                                                                    //\n        for (var i = 0; i < length; i += 1) {                                                                       // 44\n          partial[i] = str(i, value, singleIndent, innerIndent, canonical) || 'null';                               // 45\n        } // Join all of the elements together, separated with commas, and wrap                                     // 47\n        // them in brackets.                                                                                        // 50\n                                                                                                                    //\n                                                                                                                    //\n        var _v = void 0;                                                                                            // 51\n                                                                                                                    //\n        if (partial.length === 0) {                                                                                 // 52\n          _v = '[]';                                                                                                // 53\n        } else if (innerIndent) {                                                                                   // 54\n          _v = '[\\n' + innerIndent + partial.join(',\\n' + innerIndent) + '\\n' + outerIndent + ']';                  // 55\n        } else {                                                                                                    // 62\n          _v = '[' + partial.join(',') + ']';                                                                       // 63\n        }                                                                                                           // 64\n                                                                                                                    //\n        return _v;                                                                                                  // 65\n      } // Iterate through all of the keys in the object.                                                           // 66\n                                                                                                                    //\n                                                                                                                    //\n      var keys = Object.keys(value);                                                                                // 69\n                                                                                                                    //\n      if (canonical) {                                                                                              // 70\n        keys = keys.sort();                                                                                         // 71\n      }                                                                                                             // 72\n                                                                                                                    //\n      keys.forEach(function (k) {                                                                                   // 73\n        v = str(k, value, singleIndent, innerIndent, canonical);                                                    // 74\n                                                                                                                    //\n        if (v) {                                                                                                    // 75\n          partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);                                                  // 76\n        }                                                                                                           // 77\n      }); // Join all of the member texts together, separated with commas,                                          // 78\n      // and wrap them in braces.                                                                                   // 81\n                                                                                                                    //\n      if (partial.length === 0) {                                                                                   // 82\n        v = '{}';                                                                                                   // 83\n      } else if (innerIndent) {                                                                                     // 84\n        v = '{\\n' + innerIndent + partial.join(',\\n' + innerIndent) + '\\n' + outerIndent + '}';                     // 85\n      } else {                                                                                                      // 92\n        v = '{' + partial.join(',') + '}';                                                                          // 93\n      }                                                                                                             // 94\n                                                                                                                    //\n      return v;                                                                                                     // 95\n                                                                                                                    //\n    default: // Do nothing                                                                                          // 97\n  }                                                                                                                 // 18\n}; // If the JSON object does not yet have a stringify method, give it one.                                         // 99\n                                                                                                                    //\n                                                                                                                    //\nvar canonicalStringify = function (value, options) {                                                                // 102\n  // Make a fake root object containing our value under the key of ''.                                              // 103\n  // Return the result of stringifying the value.                                                                   // 104\n  var allOptions = Object.assign({                                                                                  // 105\n    indent: '',                                                                                                     // 106\n    canonical: false                                                                                                // 107\n  }, options);                                                                                                      // 105\n                                                                                                                    //\n  if (allOptions.indent === true) {                                                                                 // 109\n    allOptions.indent = '  ';                                                                                       // 110\n  } else if (typeof allOptions.indent === 'number') {                                                               // 111\n    var newIndent = '';                                                                                             // 112\n                                                                                                                    //\n    for (var i = 0; i < allOptions.indent; i++) {                                                                   // 113\n      newIndent += ' ';                                                                                             // 114\n    }                                                                                                               // 115\n                                                                                                                    //\n    allOptions.indent = newIndent;                                                                                  // 116\n  }                                                                                                                 // 117\n                                                                                                                    //\n  return str('', {                                                                                                  // 118\n    '': value                                                                                                       // 118\n  }, allOptions.indent, '', allOptions.canonical);                                                                  // 118\n};                                                                                                                  // 119\n                                                                                                                    //\nmodule.exportDefault(canonicalStringify);                                                                           // 1\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/ejson/ejson.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.ejson = exports, {\n  EJSON: EJSON\n});\n\n})();\n","servePath":"/packages/ejson.js","sourceMap":{"version":3,"sources":["packages/ejson/ejson.js","packages/ejson/stringify.js"],"names":["module","export","EJSON","customTypes","hasOwn","obj","prop","hasOwnProperty","call","isArguments","isInfOrNan","Number","isNaN","Infinity","addType","name","factory","Error","builtinConverters","matchJSONValue","Object","keys","length","matchObject","Date","toJSONValue","$date","getTime","fromJSONValue","RegExp","regexp","$regexp","source","$flags","flags","slice","replace","sign","$InfNaN","Uint8Array","$binary","Base64","encode","decode","match","keyCount","some","converter","newObj","forEach","key","$escape","_isCustomType","jsonValue","Meteor","_noYieldsAllowed","$type","typeName","$value","_getTypes","_getConverters","toJSONValueHelper","i","item","undefined","adjustTypesToJSONValue","maybeChanged","value","changed","_adjustTypesToJSONValue","newItem","clone","fromJSONValueHelper","every","k","substr","adjustTypesFromJSONValue","_adjustTypesFromJSONValue","stringify","options","serialized","json","canonical","indent","canonicalStringify","watch","require","v","JSON","parse","isBinary","$Uint8ArrayPolyfill","equals","a","b","keyOrderSensitive","valueOf","Array","ret","aKeys","bKeys","newBinary","isArray","map","from","quote","string","str","holder","singleIndent","outerIndent","isFinite","String","innerIndent","partial","join","sort","push","allOptions","assign","newIndent","exportDefault"],"mappings":"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","file":"/packages/ejson.js","sourcesContent":["/**\n * @namespace\n * @summary Namespace for EJSON functions\n */\nconst EJSON = {};\n\n// Custom type interface definition\n/**\n * @class CustomType\n * @instanceName customType\n * @memberOf EJSON\n * @summary The interface that a class must satisfy to be able to become an\n * EJSON custom type via EJSON.addType.\n */\n\n/**\n * @function typeName\n * @memberOf EJSON.CustomType\n * @summary Return the tag used to identify this type.  This must match the\n *          tag used to register this type with\n *          [`EJSON.addType`](#ejson_add_type).\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function toJSONValue\n * @memberOf EJSON.CustomType\n * @summary Serialize this instance into a JSON-compatible value.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function clone\n * @memberOf EJSON.CustomType\n * @summary Return a value `r` such that `this.equals(r)` is true, and\n *          modifications to `r` do not affect `this` and vice versa.\n * @locus Anywhere\n * @instance\n */\n\n/**\n * @function equals\n * @memberOf EJSON.CustomType\n * @summary Return `true` if `other` has a value equal to `this`; `false`\n *          otherwise.\n * @locus Anywhere\n * @param {Object} other Another object to compare this to.\n * @instance\n */\n\nconst customTypes = {};\n\nconst hasOwn = (obj, prop) => ({}).hasOwnProperty.call(obj, prop);\n\nconst isArguments = obj => obj != null && hasOwn(obj, 'callee');\n\nconst isInfOrNan =\n  obj => Number.isNaN(obj) || obj === Infinity || obj === -Infinity;\n\n// Add a custom type, using a method of your choice to get to and\n// from a basic JSON-able representation.  The factory argument\n// is a function of JSON-able --> your object\n// The type you add must have:\n// - A toJSONValue() method, so that Meteor can serialize it\n// - a typeName() method, to show how to look it up in our type table.\n// It is okay if these methods are monkey-patched on.\n// EJSON.clone will use toJSONValue and the given factory to produce\n// a clone, but you may specify a method clone() that will be\n// used instead.\n// Similarly, EJSON.equals will use toJSONValue to make comparisons,\n// but you may provide a method equals() instead.\n/**\n * @summary Add a custom datatype to EJSON.\n * @locus Anywhere\n * @param {String} name A tag for your custom type; must be unique among\n *                      custom data types defined in your project, and must\n *                      match the result of your type's `typeName` method.\n * @param {Function} factory A function that deserializes a JSON-compatible\n *                           value into an instance of your type.  This should\n *                           match the serialization performed by your\n *                           type's `toJSONValue` method.\n */\nEJSON.addType = (name, factory) => {\n  if (hasOwn(customTypes, name)) {\n    throw new Error(`Type ${name} already present`);\n  }\n  customTypes[name] = factory;\n};\n\nconst builtinConverters = [\n  { // Date\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$date') && Object.keys(obj).length === 1;\n    },\n    matchObject(obj) {\n      return obj instanceof Date;\n    },\n    toJSONValue(obj) {\n      return {$date: obj.getTime()};\n    },\n    fromJSONValue(obj) {\n      return new Date(obj.$date);\n    },\n  },\n  { // RegExp\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$regexp')\n        && hasOwn(obj, '$flags')\n        && Object.keys(obj).length === 2;\n    },\n    matchObject(obj) {\n      return obj instanceof RegExp;\n    },\n    toJSONValue(regexp) {\n      return {\n        $regexp: regexp.source,\n        $flags: regexp.flags\n      };\n    },\n    fromJSONValue(obj) {\n      // Replaces duplicate / invalid flags.\n      return new RegExp(\n        obj.$regexp,\n        obj.$flags\n          // Cut off flags at 50 chars to avoid abusing RegExp for DOS.\n          .slice(0, 50)\n          .replace(/[^gimuy]/g,'')\n          .replace(/(.)(?=.*\\1)/g, '')\n      );\n    },\n  },\n  { // NaN, Inf, -Inf. (These are the only objects with typeof !== 'object'\n    // which we match.)\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$InfNaN') && Object.keys(obj).length === 1;\n    },\n    matchObject: isInfOrNan,\n    toJSONValue(obj) {\n      let sign;\n      if (Number.isNaN(obj)) {\n        sign = 0;\n      } else if (obj === Infinity) {\n        sign = 1;\n      } else {\n        sign = -1;\n      }\n      return {$InfNaN: sign};\n    },\n    fromJSONValue(obj) {\n      return obj.$InfNaN / 0;\n    },\n  },\n  { // Binary\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$binary') && Object.keys(obj).length === 1;\n    },\n    matchObject(obj) {\n      return typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array\n        || (obj && hasOwn(obj, '$Uint8ArrayPolyfill'));\n    },\n    toJSONValue(obj) {\n      return {$binary: Base64.encode(obj)};\n    },\n    fromJSONValue(obj) {\n      return Base64.decode(obj.$binary);\n    },\n  },\n  { // Escaping one level\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$escape') && Object.keys(obj).length === 1;\n    },\n    matchObject(obj) {\n      let match = false;\n      if (obj) {\n        const keyCount = Object.keys(obj).length;\n        if (keyCount === 1 || keyCount === 2) {\n          match =\n            builtinConverters.some(converter => converter.matchJSONValue(obj));\n        }\n      }\n      return match;\n    },\n    toJSONValue(obj) {\n      const newObj = {};\n      Object.keys(obj).forEach(key => {\n        newObj[key] = EJSON.toJSONValue(obj[key]);\n      });\n      return {$escape: newObj};\n    },\n    fromJSONValue(obj) {\n      const newObj = {};\n      Object.keys(obj.$escape).forEach(key => {\n        newObj[key] = EJSON.fromJSONValue(obj.$escape[key]);\n      });\n      return newObj;\n    },\n  },\n  { // Custom\n    matchJSONValue(obj) {\n      return hasOwn(obj, '$type')\n        && hasOwn(obj, '$value') && Object.keys(obj).length === 2;\n    },\n    matchObject(obj) {\n      return EJSON._isCustomType(obj);\n    },\n    toJSONValue(obj) {\n      const jsonValue = Meteor._noYieldsAllowed(() => obj.toJSONValue());\n      return {$type: obj.typeName(), $value: jsonValue};\n    },\n    fromJSONValue(obj) {\n      const typeName = obj.$type;\n      if (!hasOwn(customTypes, typeName)) {\n        throw new Error(`Custom EJSON type ${typeName} is not defined`);\n      }\n      const converter = customTypes[typeName];\n      return Meteor._noYieldsAllowed(() => converter(obj.$value));\n    },\n  },\n];\n\nEJSON._isCustomType = (obj) => (\n  obj &&\n  typeof obj.toJSONValue === 'function' &&\n  typeof obj.typeName === 'function' &&\n  hasOwn(customTypes, obj.typeName())\n);\n\nEJSON._getTypes = () => customTypes;\n\nEJSON._getConverters = () => builtinConverters;\n\n// Either return the JSON-compatible version of the argument, or undefined (if\n// the item isn't itself replaceable, but maybe some fields in it are)\nconst toJSONValueHelper = item => {\n  for (let i = 0; i < builtinConverters.length; i++) {\n    const converter = builtinConverters[i];\n    if (converter.matchObject(item)) {\n      return converter.toJSONValue(item);\n    }\n  }\n  return undefined;\n};\n\n// for both arrays and objects, in-place modification.\nconst adjustTypesToJSONValue = obj => {\n  // Is it an atom that we need to adjust?\n  if (obj === null) {\n    return null;\n  }\n\n  const maybeChanged = toJSONValueHelper(obj);\n  if (maybeChanged !== undefined) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (typeof obj !== 'object') {\n    return obj;\n  }\n\n  // Iterate over array or object structure.\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (typeof value !== 'object' && value !== undefined &&\n        !isInfOrNan(value)) {\n      return; // continue\n    }\n\n    const changed = toJSONValueHelper(value);\n    if (changed) {\n      obj[key] = changed;\n      return; // on to the next key\n    }\n    // if we get here, value is an object but not adjustable\n    // at this level.  recurse.\n    adjustTypesToJSONValue(value);\n  });\n  return obj;\n};\n\nEJSON._adjustTypesToJSONValue = adjustTypesToJSONValue;\n\n/**\n * @summary Serialize an EJSON-compatible value into its plain JSON\n *          representation.\n * @locus Anywhere\n * @param {EJSON} val A value to serialize to plain JSON.\n */\nEJSON.toJSONValue = item => {\n  const changed = toJSONValueHelper(item);\n  if (changed !== undefined) {\n    return changed;\n  }\n\n  let newItem = item;\n  if (typeof item === 'object') {\n    newItem = EJSON.clone(item);\n    adjustTypesToJSONValue(newItem);\n  }\n  return newItem;\n};\n\n// Either return the argument changed to have the non-json\n// rep of itself (the Object version) or the argument itself.\n// DOES NOT RECURSE.  For actually getting the fully-changed value, use\n// EJSON.fromJSONValue\nconst fromJSONValueHelper = value => {\n  if (typeof value === 'object' && value !== null) {\n    const keys = Object.keys(value);\n    if (keys.length <= 2\n        && keys.every(k => typeof k === 'string' && k.substr(0, 1) === '$')) {\n      for (let i = 0; i < builtinConverters.length; i++) {\n        const converter = builtinConverters[i];\n        if (converter.matchJSONValue(value)) {\n          return converter.fromJSONValue(value);\n        }\n      }\n    }\n  }\n  return value;\n};\n\n// for both arrays and objects. Tries its best to just\n// use the object you hand it, but may return something\n// different if the object you hand it itself needs changing.\nconst adjustTypesFromJSONValue = obj => {\n  if (obj === null) {\n    return null;\n  }\n\n  const maybeChanged = fromJSONValueHelper(obj);\n  if (maybeChanged !== obj) {\n    return maybeChanged;\n  }\n\n  // Other atoms are unchanged.\n  if (typeof obj !== 'object') {\n    return obj;\n  }\n\n  Object.keys(obj).forEach(key => {\n    const value = obj[key];\n    if (typeof value === 'object') {\n      const changed = fromJSONValueHelper(value);\n      if (value !== changed) {\n        obj[key] = changed;\n        return;\n      }\n      // if we get here, value is an object but not adjustable\n      // at this level.  recurse.\n      adjustTypesFromJSONValue(value);\n    }\n  });\n  return obj;\n};\n\nEJSON._adjustTypesFromJSONValue = adjustTypesFromJSONValue;\n\n/**\n * @summary Deserialize an EJSON value from its plain JSON representation.\n * @locus Anywhere\n * @param {JSONCompatible} val A value to deserialize into EJSON.\n */\nEJSON.fromJSONValue = item => {\n  let changed = fromJSONValueHelper(item);\n  if (changed === item && typeof item === 'object') {\n    changed = EJSON.clone(item);\n    adjustTypesFromJSONValue(changed);\n  }\n  return changed;\n};\n\n/**\n * @summary Serialize a value to a string. For EJSON values, the serialization\n *          fully represents the value. For non-EJSON values, serializes the\n *          same way as `JSON.stringify`.\n * @locus Anywhere\n * @param {EJSON} val A value to stringify.\n * @param {Object} [options]\n * @param {Boolean | Integer | String} options.indent Indents objects and\n * arrays for easy readability.  When `true`, indents by 2 spaces; when an\n * integer, indents by that number of spaces; and when a string, uses the\n * string as the indentation pattern.\n * @param {Boolean} options.canonical When `true`, stringifies keys in an\n *                                    object in sorted order.\n */\nEJSON.stringify = (item, options) => {\n  let serialized;\n  const json = EJSON.toJSONValue(item);\n  if (options && (options.canonical || options.indent)) {\n    import canonicalStringify from './stringify';\n    serialized = canonicalStringify(json, options);\n  } else {\n    serialized = JSON.stringify(json);\n  }\n  return serialized;\n};\n\n/**\n * @summary Parse a string into an EJSON value. Throws an error if the string\n *          is not valid EJSON.\n * @locus Anywhere\n * @param {String} str A string to parse into an EJSON value.\n */\nEJSON.parse = item => {\n  if (typeof item !== 'string') {\n    throw new Error('EJSON.parse argument should be a string');\n  }\n  return EJSON.fromJSONValue(JSON.parse(item));\n};\n\n/**\n * @summary Returns true if `x` is a buffer of binary data, as returned from\n *          [`EJSON.newBinary`](#ejson_new_binary).\n * @param {Object} x The variable to check.\n * @locus Anywhere\n */\nEJSON.isBinary = obj => {\n  return !!((typeof Uint8Array !== 'undefined' && obj instanceof Uint8Array) ||\n    (obj && obj.$Uint8ArrayPolyfill));\n};\n\n/**\n * @summary Return true if `a` and `b` are equal to each other.  Return false\n *          otherwise.  Uses the `equals` method on `a` if present, otherwise\n *          performs a deep comparison.\n * @locus Anywhere\n * @param {EJSON} a\n * @param {EJSON} b\n * @param {Object} [options]\n * @param {Boolean} options.keyOrderSensitive Compare in key sensitive order,\n * if supported by the JavaScript implementation.  For example, `{a: 1, b: 2}`\n * is equal to `{b: 2, a: 1}` only when `keyOrderSensitive` is `false`.  The\n * default is `false`.\n */\nEJSON.equals = (a, b, options) => {\n  let i;\n  const keyOrderSensitive = !!(options && options.keyOrderSensitive);\n  if (a === b) {\n    return true;\n  }\n\n  // This differs from the IEEE spec for NaN equality, b/c we don't want\n  // anything ever with a NaN to be poisoned from becoming equal to anything.\n  if (Number.isNaN(a) && Number.isNaN(b)) {\n    return true;\n  }\n\n  // if either one is falsy, they'd have to be === to be equal\n  if (!a || !b) {\n    return false;\n  }\n\n  if (!(typeof a === 'object' && typeof b === 'object')) {\n    return false;\n  }\n\n  if (a instanceof Date && b instanceof Date) {\n    return a.valueOf() === b.valueOf();\n  }\n\n  if (EJSON.isBinary(a) && EJSON.isBinary(b)) {\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (typeof (a.equals) === 'function') {\n    return a.equals(b, options);\n  }\n\n  if (typeof (b.equals) === 'function') {\n    return b.equals(a, options);\n  }\n\n  if (a instanceof Array) {\n    if (!(b instanceof Array)) {\n      return false;\n    }\n    if (a.length !== b.length) {\n      return false;\n    }\n    for (i = 0; i < a.length; i++) {\n      if (!EJSON.equals(a[i], b[i], options)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  // fallback for custom types that don't implement their own equals\n  switch (EJSON._isCustomType(a) + EJSON._isCustomType(b)) {\n    case 1: return false;\n    case 2: return EJSON.equals(EJSON.toJSONValue(a), EJSON.toJSONValue(b));\n    default: // Do nothing\n  }\n\n  // fall back to structural equality of objects\n  let ret;\n  const aKeys = Object.keys(a);\n  const bKeys = Object.keys(b);\n  if (keyOrderSensitive) {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (i >= bKeys.length) {\n        return false;\n      }\n      if (key !== bKeys[i]) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[bKeys[i]], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  } else {\n    i = 0;\n    ret = aKeys.every(key => {\n      if (!hasOwn(b, key)) {\n        return false;\n      }\n      if (!EJSON.equals(a[key], b[key], options)) {\n        return false;\n      }\n      i++;\n      return true;\n    });\n  }\n  return ret && i === bKeys.length;\n};\n\n/**\n * @summary Return a deep copy of `val`.\n * @locus Anywhere\n * @param {EJSON} val A value to copy.\n */\nEJSON.clone = v => {\n  let ret;\n  if (typeof v !== 'object') {\n    return v;\n  }\n\n  if (v === null) {\n    return null; // null has typeof \"object\"\n  }\n\n  if (v instanceof Date) {\n    return new Date(v.getTime());\n  }\n\n  // RegExps are not really EJSON elements (eg we don't define a serialization\n  // for them), but they're immutable anyway, so we can support them in clone.\n  if (v instanceof RegExp) {\n    return v;\n  }\n\n  if (EJSON.isBinary(v)) {\n    ret = EJSON.newBinary(v.length);\n    for (let i = 0; i < v.length; i++) {\n      ret[i] = v[i];\n    }\n    return ret;\n  }\n\n  if (Array.isArray(v)) {\n    return v.map(value => EJSON.clone(value));\n  }\n\n  if (isArguments(v)) {\n    return Array.from(v).map(value => EJSON.clone(value));\n  }\n\n  // handle general user-defined typed Objects if they have a clone method\n  if (typeof v.clone === 'function') {\n    return v.clone();\n  }\n\n  // handle other custom types\n  if (EJSON._isCustomType(v)) {\n    return EJSON.fromJSONValue(EJSON.clone(EJSON.toJSONValue(v)), true);\n  }\n\n  // handle other objects\n  ret = {};\n  Object.keys(v).forEach((key) => {\n    ret[key] = EJSON.clone(v[key]);\n  });\n  return ret;\n};\n\n/**\n * @summary Allocate a new buffer of binary data that EJSON can serialize.\n * @locus Anywhere\n * @param {Number} size The number of bytes of binary data to allocate.\n */\n// EJSON.newBinary is the public documented API for this functionality,\n// but the implementation is in the 'base64' package to avoid\n// introducing a circular dependency. (If the implementation were here,\n// then 'base64' would have to use EJSON.newBinary, and 'ejson' would\n// also have to use 'base64'.)\nEJSON.newBinary = Base64.newBinary;\n\nexport { EJSON };\n","// Based on json2.js from https://github.com/douglascrockford/JSON-js\n//\n//    json2.js\n//    2012-10-08\n//\n//    Public Domain.\n//\n//    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.\n\nfunction quote(string) {\n  return JSON.stringify(string);\n}\n\nconst str = (key, holder, singleIndent, outerIndent, canonical) => {\n  const value = holder[key];\n\n  // What happens next depends on the value's type.\n  switch (typeof value) {\n  case 'string':\n    return quote(value);\n  case 'number':\n    // JSON numbers must be finite. Encode non-finite numbers as null.\n    return isFinite(value) ? String(value) : 'null';\n  case 'boolean':\n    return String(value);\n  // If the type is 'object', we might be dealing with an object or an array or\n  // null.\n  case 'object':\n    // Due to a specification blunder in ECMAScript, typeof null is 'object',\n    // so watch out for that case.\n    if (!value) {\n      return 'null';\n    }\n    // Make an array to hold the partial results of stringifying this object\n    // value.\n    const innerIndent = outerIndent + singleIndent;\n    const partial = [];\n\n    // Is the value an array?\n    if (Array.isArray(value) || ({}).hasOwnProperty.call(value, 'callee')) {\n      // The value is an array. Stringify every element. Use null as a\n      // placeholder for non-JSON values.\n      const length = value.length;\n      for (let i = 0; i < length; i += 1) {\n        partial[i] =\n          str(i, value, singleIndent, innerIndent, canonical) || 'null';\n      }\n\n      // Join all of the elements together, separated with commas, and wrap\n      // them in brackets.\n      let v;\n      if (partial.length === 0) {\n        v = '[]';\n      } else if (innerIndent) {\n        v = '[\\n' +\n          innerIndent +\n          partial.join(',\\n' +\n          innerIndent) +\n          '\\n' +\n          outerIndent +\n          ']';\n      } else {\n        v = '[' + partial.join(',') + ']';\n      }\n      return v;\n    }\n\n    // Iterate through all of the keys in the object.\n    let keys = Object.keys(value);\n    if (canonical) {\n      keys = keys.sort();\n    }\n    keys.forEach(k => {\n      v = str(k, value, singleIndent, innerIndent, canonical);\n      if (v) {\n        partial.push(quote(k) + (innerIndent ? ': ' : ':') + v);\n      }\n    });\n\n    // Join all of the member texts together, separated with commas,\n    // and wrap them in braces.\n    if (partial.length === 0) {\n      v = '{}';\n    } else if (innerIndent) {\n      v = '{\\n' +\n        innerIndent +\n        partial.join(',\\n' +\n        innerIndent) +\n        '\\n' +\n        outerIndent +\n        '}';\n    } else {\n      v = '{' + partial.join(',') + '}';\n    }\n    return v;\n\n  default: // Do nothing\n  }\n};\n\n// If the JSON object does not yet have a stringify method, give it one.\nconst canonicalStringify = (value, options) => {\n  // Make a fake root object containing our value under the key of ''.\n  // Return the result of stringifying the value.\n  const allOptions = Object.assign({\n    indent: '',\n    canonical: false,\n  }, options);\n  if (allOptions.indent === true) {\n    allOptions.indent = '  ';\n  } else if (typeof allOptions.indent === 'number') {\n    let newIndent = '';\n    for (let i = 0; i < allOptions.indent; i++) {\n      newIndent += ' ';\n    }\n    allOptions.indent = newIndent;\n  }\n  return str('', {'': value}, allOptions.indent, '', allOptions.canonical);\n};\n\nexport default canonicalStringify;\n"]}}]