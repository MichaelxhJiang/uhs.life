[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar _ = Package.underscore._;\nvar URL = Package.url.URL;\nvar ECMAScript = Package.ecmascript.ECMAScript;\nvar meteorInstall = Package.modules.meteorInstall;\nvar meteorBabelHelpers = Package['babel-runtime'].meteorBabelHelpers;\nvar Promise = Package.promise.Promise;\nvar Symbol = Package['ecmascript-runtime-server'].Symbol;\nvar Map = Package['ecmascript-runtime-server'].Map;\nvar Set = Package['ecmascript-runtime-server'].Set;\n\n/* Package-scope variables */\nvar makeErrorByStatus, populateData, HTTP, HTTPInternals;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"http\":{\"httpcall_common.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/http/httpcall_common.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar MAX_LENGTH = 500; // if you change this, also change the appropriate test                                          // 1\n                                                                                                                       //\nmakeErrorByStatus = function (statusCode, content) {                                                                   // 3\n  var message = \"failed [\" + statusCode + \"]\";                                                                         // 4\n                                                                                                                       //\n  if (content) {                                                                                                       // 6\n    var stringContent = typeof content == \"string\" ? content : content.toString();                                     // 7\n    message += ' ' + truncate(stringContent.replace(/\\n/g, ' '), MAX_LENGTH);                                          // 10\n  }                                                                                                                    // 11\n                                                                                                                       //\n  return new Error(message);                                                                                           // 13\n};                                                                                                                     // 14\n                                                                                                                       //\nfunction truncate(str, length) {                                                                                       // 16\n  return str.length > length ? str.slice(0, length) + '...' : str;                                                     // 17\n} // Fill in `response.data` if the content-type is JSON.                                                              // 18\n                                                                                                                       //\n                                                                                                                       //\npopulateData = function (response) {                                                                                   // 21\n  // Read Content-Type header, up to a ';' if there is one.                                                            // 22\n  // A typical header might be \"application/json; charset=utf-8\"                                                       // 23\n  // or just \"application/json\".                                                                                       // 24\n  var contentType = (response.headers['content-type'] || ';').split(';')[0]; // Only try to parse data as JSON if server sets correct content type.\n                                                                                                                       //\n  if (_.include(['application/json', 'text/javascript', 'application/javascript', 'application/x-javascript'], contentType)) {\n    try {                                                                                                              // 30\n      response.data = JSON.parse(response.content);                                                                    // 31\n    } catch (err) {                                                                                                    // 32\n      response.data = null;                                                                                            // 33\n    }                                                                                                                  // 34\n  } else {                                                                                                             // 35\n    response.data = null;                                                                                              // 36\n  }                                                                                                                    // 37\n};                                                                                                                     // 38\n                                                                                                                       //\nHTTP = {}; /**                                                                                                         // 40\n            * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n            * @param {String} url The URL to which the request should be sent.                                         //\n            * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                            //\n            * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n            * @locus Anywhere                                                                                          //\n            */                                                                                                         //\n                                                                                                                       //\nHTTP.get = function () /* varargs */{                                                                                  // 49\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));                                                  // 50\n}; /**                                                                                                                 // 51\n    * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n    * @param {String} url The URL to which the request should be sent.                                                 //\n    * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    //\n    * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n    * @locus Anywhere                                                                                                  //\n    */                                                                                                                 //\n                                                                                                                       //\nHTTP.post = function () /* varargs */{                                                                                 // 60\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));                                                 // 61\n}; /**                                                                                                                 // 62\n    * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n    * @param {String} url The URL to which the request should be sent.                                                 //\n    * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    //\n    * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n    * @locus Anywhere                                                                                                  //\n    */                                                                                                                 //\n                                                                                                                       //\nHTTP.put = function () /* varargs */{                                                                                  // 71\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));                                                  // 72\n}; /**                                                                                                                 // 73\n    * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)\n    * @param {String} url The URL to which the request should be sent.                                                 //\n    * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    //\n    * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n    * @locus Anywhere                                                                                                  //\n    */                                                                                                                 //\n                                                                                                                       //\nHTTP.del = function () /* varargs */{                                                                                  // 82\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));                                               // 83\n}; /**                                                                                                                 // 84\n    * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PATCH\" as the first argument.\n    * @param {String} url The URL to which the request should be sent.                                                 //\n    * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).                                    //\n    * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n    * @locus Anywhere                                                                                                  //\n    */                                                                                                                 //\n                                                                                                                       //\nHTTP.patch = function () /* varargs */{                                                                                // 93\n  return HTTP.call.apply(this, [\"PATCH\"].concat(_.toArray(arguments)));                                                // 94\n};                                                                                                                     // 95\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"httpcall_server.js\":function(require,exports,module){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/http/httpcall_server.js                                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar path = Npm.require('path');                                                                                        // 1\n                                                                                                                       //\nvar request = Npm.require('request');                                                                                  // 2\n                                                                                                                       //\nvar url_util = Npm.require('url');                                                                                     // 3\n                                                                                                                       //\nHTTPInternals = {                                                                                                      // 5\n  NpmModules: {                                                                                                        // 6\n    request: {                                                                                                         // 7\n      version: Npm.require('request/package.json').version,                                                            // 8\n      module: request                                                                                                  // 9\n    }                                                                                                                  // 7\n  }                                                                                                                    // 6\n}; // _call always runs asynchronously; HTTP.call, defined below,                                                      // 5\n// wraps _call and runs synchronously when no callback is provided.                                                    // 15\n                                                                                                                       //\nvar _call = function (method, url, options, callback) {                                                                // 16\n  ////////// Process arguments //////////                                                                              // 18\n  if (!callback && typeof options === \"function\") {                                                                    // 20\n    // support (method, url, callback) argument list                                                                   // 21\n    callback = options;                                                                                                // 22\n    options = null;                                                                                                    // 23\n  }                                                                                                                    // 24\n                                                                                                                       //\n  options = options || {};                                                                                             // 26\n                                                                                                                       //\n  if (_.has(options, 'beforeSend')) {                                                                                  // 28\n    throw new Error(\"Option beforeSend not supported on server.\");                                                     // 29\n  }                                                                                                                    // 30\n                                                                                                                       //\n  method = (method || \"\").toUpperCase();                                                                               // 32\n  if (!/^https?:\\/\\//.test(url)) throw new Error(\"url must be absolute and start with http:// or https://\");           // 34\n  var headers = {};                                                                                                    // 37\n  var content = options.content;                                                                                       // 39\n                                                                                                                       //\n  if (options.data) {                                                                                                  // 40\n    content = JSON.stringify(options.data);                                                                            // 41\n    headers['Content-Type'] = 'application/json';                                                                      // 42\n  }                                                                                                                    // 43\n                                                                                                                       //\n  var paramsForUrl, paramsForBody;                                                                                     // 46\n  if (content || method === \"GET\" || method === \"HEAD\") paramsForUrl = options.params;else paramsForBody = options.params;\n                                                                                                                       //\n  var newUrl = URL._constructUrl(url, options.query, paramsForUrl);                                                    // 52\n                                                                                                                       //\n  if (options.auth) {                                                                                                  // 54\n    if (options.auth.indexOf(':') < 0) throw new Error('auth option should be of the form \"username:password\"');       // 55\n    headers['Authorization'] = \"Basic \" + new Buffer(options.auth, \"ascii\").toString(\"base64\");                        // 57\n  }                                                                                                                    // 59\n                                                                                                                       //\n  if (paramsForBody) {                                                                                                 // 61\n    content = URL._encodeParams(paramsForBody);                                                                        // 62\n    headers['Content-Type'] = \"application/x-www-form-urlencoded\";                                                     // 63\n  }                                                                                                                    // 64\n                                                                                                                       //\n  _.extend(headers, options.headers || {}); // wrap callback to add a 'response' property on an error, in case         // 66\n  // we have both (http 4xx/5xx error, which has a response payload)                                                   // 69\n                                                                                                                       //\n                                                                                                                       //\n  callback = function (callback) {                                                                                     // 70\n    return function (error, response) {                                                                                // 71\n      if (error && response) error.response = response;                                                                // 72\n      callback(error, response);                                                                                       // 74\n    };                                                                                                                 // 75\n  }(callback); // safety belt: only call the callback once.                                                            // 76\n                                                                                                                       //\n                                                                                                                       //\n  callback = _.once(callback); ////////// Kickoff! //////////                                                          // 79\n  // Allow users to override any request option with the npmRequestOptions                                             // 84\n  // option.                                                                                                           // 85\n                                                                                                                       //\n  var reqOptions = _.extend({                                                                                          // 86\n    url: newUrl,                                                                                                       // 87\n    method: method,                                                                                                    // 88\n    encoding: \"utf8\",                                                                                                  // 89\n    jar: false,                                                                                                        // 90\n    timeout: options.timeout,                                                                                          // 91\n    body: content,                                                                                                     // 92\n    followRedirect: options.followRedirects,                                                                           // 93\n    // Follow redirects on non-GET requests                                                                            // 94\n    // also. (https://github.com/meteor/meteor/issues/2808)                                                            // 95\n    followAllRedirects: options.followRedirects,                                                                       // 96\n    headers: headers                                                                                                   // 97\n  }, options.npmRequestOptions || {});                                                                                 // 86\n                                                                                                                       //\n  request(reqOptions, function (error, res, body) {                                                                    // 100\n    var response = null;                                                                                               // 101\n                                                                                                                       //\n    if (!error) {                                                                                                      // 103\n      response = {};                                                                                                   // 105\n      response.statusCode = res.statusCode;                                                                            // 106\n      response.content = body;                                                                                         // 107\n      response.headers = res.headers;                                                                                  // 108\n      populateData(response);                                                                                          // 110\n      if (response.statusCode >= 400) error = makeErrorByStatus(response.statusCode, response.content);                // 112\n    }                                                                                                                  // 114\n                                                                                                                       //\n    callback(error, response);                                                                                         // 116\n  });                                                                                                                  // 118\n};                                                                                                                     // 119\n                                                                                                                       //\nHTTP.call = Meteor.wrapAsync(_call);                                                                                   // 121\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"deprecated.js\":function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/http/deprecated.js                                                                                         //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n// The HTTP object used to be called Meteor.http.                                                                      // 1\n// XXX COMPAT WITH 0.6.4                                                                                               // 2\nMeteor.http = HTTP;                                                                                                    // 3\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nrequire(\"./node_modules/meteor/http/httpcall_common.js\");\nrequire(\"./node_modules/meteor/http/httpcall_server.js\");\nrequire(\"./node_modules/meteor/http/deprecated.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.http = {}, {\n  HTTP: HTTP,\n  HTTPInternals: HTTPInternals\n});\n\n})();\n","servePath":"/packages/http.js","sourceMap":{"version":3,"sources":["packages/http/httpcall_common.js","packages/http/httpcall_server.js","packages/http/deprecated.js"],"names":["MAX_LENGTH","makeErrorByStatus","statusCode","content","message","stringContent","toString","truncate","replace","Error","str","length","slice","populateData","response","contentType","headers","split","_","include","data","JSON","parse","err","HTTP","get","call","apply","concat","toArray","arguments","post","put","del","patch","path","Npm","require","request","url_util","HTTPInternals","NpmModules","version","module","_call","method","url","options","callback","has","toUpperCase","test","stringify","paramsForUrl","paramsForBody","params","newUrl","URL","_constructUrl","query","auth","indexOf","Buffer","_encodeParams","extend","error","once","reqOptions","encoding","jar","timeout","body","followRedirect","followRedirects","followAllRedirects","npmRequestOptions","res","Meteor","wrapAsync","http"],"mappings":"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","file":"/packages/http.js","sourcesContent":["const MAX_LENGTH = 500; // if you change this, also change the appropriate test\n\nmakeErrorByStatus = function(statusCode, content) {\n  let message = `failed [${statusCode}]`;\n\n  if (content) {\n    const stringContent = typeof content == \"string\" ?\n      content : content.toString();\n\n    message += ' ' + truncate(stringContent.replace(/\\n/g, ' '), MAX_LENGTH);\n  }\n\n  return new Error(message);\n};\n\nfunction truncate(str, length) {\n  return str.length > length ? str.slice(0, length) + '...' : str;\n}\n\n// Fill in `response.data` if the content-type is JSON.\npopulateData = function(response) {\n  // Read Content-Type header, up to a ';' if there is one.\n  // A typical header might be \"application/json; charset=utf-8\"\n  // or just \"application/json\".\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];\n\n  // Only try to parse data as JSON if server sets correct content type.\n  if (_.include(['application/json', 'text/javascript',\n      'application/javascript', 'application/x-javascript'], contentType)) {\n    try {\n      response.data = JSON.parse(response.content);\n    } catch (err) {\n      response.data = null;\n    }\n  } else {\n    response.data = null;\n  }\n};\n\nHTTP = {};\n\n/**\n * @summary Send an HTTP `GET` request. Equivalent to calling [`HTTP.call`](#http_call) with \"GET\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.get = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"GET\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `POST` request. Equivalent to calling [`HTTP.call`](#http_call) with \"POST\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.post = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"POST\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PUT` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PUT\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.put = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"PUT\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `DELETE` request. Equivalent to calling [`HTTP.call`](#http_call) with \"DELETE\" as the first argument. (Named `del` to avoid conflict with the Javascript keyword `delete`)\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.del = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"DELETE\"].concat(_.toArray(arguments)));\n};\n\n/**\n * @summary Send an HTTP `PATCH` request. Equivalent to calling [`HTTP.call`](#http_call) with \"PATCH\" as the first argument.\n * @param {String} url The URL to which the request should be sent.\n * @param {Object} [callOptions] Options passed on to [`HTTP.call`](#http_call).\n * @param {Function} [asyncCallback] Callback that is called when the request is completed. Required on the client.\n * @locus Anywhere\n */\nHTTP.patch = function (/* varargs */) {\n  return HTTP.call.apply(this, [\"PATCH\"].concat(_.toArray(arguments)));\n};\n","var path = Npm.require('path');\nvar request = Npm.require('request');\nvar url_util = Npm.require('url');\n\nHTTPInternals = {\n  NpmModules: {\n    request: {\n      version: Npm.require('request/package.json').version,\n      module: request\n    }\n  }\n};\n\n// _call always runs asynchronously; HTTP.call, defined below,\n// wraps _call and runs synchronously when no callback is provided.\nvar _call = function(method, url, options, callback) {\n\n  ////////// Process arguments //////////\n\n  if (! callback && typeof options === \"function\") {\n    // support (method, url, callback) argument list\n    callback = options;\n    options = null;\n  }\n\n  options = options || {};\n\n  if (_.has(options, 'beforeSend')) {\n    throw new Error(\"Option beforeSend not supported on server.\");\n  }\n\n  method = (method || \"\").toUpperCase();\n\n  if (! /^https?:\\/\\//.test(url))\n    throw new Error(\"url must be absolute and start with http:// or https://\");\n\n  var headers = {};\n\n  var content = options.content;\n  if (options.data) {\n    content = JSON.stringify(options.data);\n    headers['Content-Type'] = 'application/json';\n  }\n\n\n  var paramsForUrl, paramsForBody;\n  if (content || method === \"GET\" || method === \"HEAD\")\n    paramsForUrl = options.params;\n  else\n    paramsForBody = options.params;\n\n  var newUrl = URL._constructUrl(url, options.query, paramsForUrl);\n\n  if (options.auth) {\n    if (options.auth.indexOf(':') < 0)\n      throw new Error('auth option should be of the form \"username:password\"');\n    headers['Authorization'] = \"Basic \"+\n      (new Buffer(options.auth, \"ascii\")).toString(\"base64\");\n  }\n\n  if (paramsForBody) {\n    content = URL._encodeParams(paramsForBody);\n    headers['Content-Type'] = \"application/x-www-form-urlencoded\";\n  }\n\n  _.extend(headers, options.headers || {});\n\n  // wrap callback to add a 'response' property on an error, in case\n  // we have both (http 4xx/5xx error, which has a response payload)\n  callback = (function(callback) {\n    return function(error, response) {\n      if (error && response)\n        error.response = response;\n      callback(error, response);\n    };\n  })(callback);\n\n  // safety belt: only call the callback once.\n  callback = _.once(callback);\n\n\n  ////////// Kickoff! //////////\n\n  // Allow users to override any request option with the npmRequestOptions\n  // option.\n  var reqOptions = _.extend({\n    url: newUrl,\n    method: method,\n    encoding: \"utf8\",\n    jar: false,\n    timeout: options.timeout,\n    body: content,\n    followRedirect: options.followRedirects,\n    // Follow redirects on non-GET requests\n    // also. (https://github.com/meteor/meteor/issues/2808)\n    followAllRedirects: options.followRedirects,\n    headers: headers\n  }, options.npmRequestOptions || {});\n\n  request(reqOptions, function(error, res, body) {\n    var response = null;\n\n    if (! error) {\n\n      response = {};\n      response.statusCode = res.statusCode;\n      response.content = body;\n      response.headers = res.headers;\n\n      populateData(response);\n\n      if (response.statusCode >= 400)\n        error = makeErrorByStatus(response.statusCode, response.content);\n    }\n\n    callback(error, response);\n\n  });\n};\n\nHTTP.call = Meteor.wrapAsync(_call);\n","// The HTTP object used to be called Meteor.http.\n// XXX COMPAT WITH 0.6.4\nMeteor.http = HTTP;\n"]}}]