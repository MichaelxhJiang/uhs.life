[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar FS = Package['cfs:base-package'].FS;\nvar check = Package.check.check;\nvar Match = Package.check.Match;\nvar EJSON = Package.ejson.EJSON;\nvar HTTP = Package['cfs:http-methods'].HTTP;\n\n/* Package-scope variables */\nvar rootUrlPathPrefix, baseUrl, getHeaders, getHeadersByCollection, _existingMountPoints, mountUrls;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/cfs_access-point/packages/cfs_access-point.js            //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cfs:access-point/access-point-common.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nrootUrlPathPrefix = __meteor_runtime_config__.ROOT_URL_PATH_PREFIX || \"\";                                             // 1\n// Adjust the rootUrlPathPrefix if necessary                                                                          // 2\nif (rootUrlPathPrefix.length > 0) {                                                                                   // 3\n  if (rootUrlPathPrefix.slice(0, 1) !== '/') {                                                                        // 4\n    rootUrlPathPrefix = '/' + rootUrlPathPrefix;                                                                      // 5\n  }                                                                                                                   // 6\n  if (rootUrlPathPrefix.slice(-1) === '/') {                                                                          // 7\n    rootUrlPathPrefix = rootUrlPathPrefix.slice(0, -1);                                                               // 8\n  }                                                                                                                   // 9\n}                                                                                                                     // 10\n                                                                                                                      // 11\n// prepend ROOT_URL when isCordova                                                                                    // 12\nif (Meteor.isCordova) {                                                                                               // 13\n  rootUrlPathPrefix = Meteor.absoluteUrl(rootUrlPathPrefix.replace(/^\\/+/, '')).replace(/\\/+$/, '');                  // 14\n}                                                                                                                     // 15\n                                                                                                                      // 16\nbaseUrl = '/cfs';                                                                                                     // 17\nFS.HTTP = FS.HTTP || {};                                                                                              // 18\n                                                                                                                      // 19\n// Note the upload URL so that client uploader packages know what it is                                               // 20\nFS.HTTP.uploadUrl = rootUrlPathPrefix + baseUrl + '/files';                                                           // 21\n                                                                                                                      // 22\n/**                                                                                                                   // 23\n * @method FS.HTTP.setBaseUrl                                                                                         // 24\n * @public                                                                                                            // 25\n * @param {String} newBaseUrl - Change the base URL for the HTTP GET and DELETE endpoints.                            // 26\n * @returns {undefined}                                                                                               // 27\n */                                                                                                                   // 28\nFS.HTTP.setBaseUrl = function setBaseUrl(newBaseUrl) {                                                                // 29\n                                                                                                                      // 30\n  // Adjust the baseUrl if necessary                                                                                  // 31\n  if (newBaseUrl.slice(0, 1) !== '/') {                                                                               // 32\n    newBaseUrl = '/' + newBaseUrl;                                                                                    // 33\n  }                                                                                                                   // 34\n  if (newBaseUrl.slice(-1) === '/') {                                                                                 // 35\n    newBaseUrl = newBaseUrl.slice(0, -1);                                                                             // 36\n  }                                                                                                                   // 37\n                                                                                                                      // 38\n  // Update the base URL                                                                                              // 39\n  baseUrl = newBaseUrl;                                                                                               // 40\n                                                                                                                      // 41\n  // Change the upload URL so that client uploader packages know what it is                                           // 42\n  FS.HTTP.uploadUrl = rootUrlPathPrefix + baseUrl + '/files';                                                         // 43\n                                                                                                                      // 44\n  // Remount URLs with the new baseUrl, unmounting the old, on the server only.                                       // 45\n  // If existingMountPoints is empty, then we haven't run the server startup                                          // 46\n  // code yet, so this new URL will be used at that point for the initial mount.                                      // 47\n  if (Meteor.isServer && !FS.Utility.isEmpty(_existingMountPoints)) {                                                 // 48\n    mountUrls();                                                                                                      // 49\n  }                                                                                                                   // 50\n};                                                                                                                    // 51\n                                                                                                                      // 52\n/*                                                                                                                    // 53\n * FS.File extensions                                                                                                 // 54\n */                                                                                                                   // 55\n                                                                                                                      // 56\n/**                                                                                                                   // 57\n * @method FS.File.prototype.url Construct the file url                                                               // 58\n * @public                                                                                                            // 59\n * @param {Object} [options]                                                                                          // 60\n * @param {String} [options.store] Name of the store to get from. If not defined, the first store defined in `options.stores` for the collection on the client is used.\n * @param {Boolean} [options.auth=null] Add authentication token to the URL query string? By default, a token for the current logged in user is added on the client. Set this to `false` to omit the token. Set this to a string to provide your own token. Set this to a number to specify an expiration time for the token in seconds.\n * @param {Boolean} [options.download=false] Should headers be set to force a download? Typically this means that clicking the link with this URL will download the file to the user's Downloads folder instead of displaying the file in the browser.\n * @param {Boolean} [options.brokenIsFine=false] Return the URL even if we know it's currently a broken link because the file hasn't been saved in the requested store yet.\n * @param {Boolean} [options.metadata=false] Return the URL for the file metadata access point rather than the file itself.\n * @param {String} [options.uploading=null] A URL to return while the file is being uploaded.                         // 66\n * @param {String} [options.storing=null] A URL to return while the file is being stored.                             // 67\n * @param {String} [options.filename=null] Override the filename that should appear at the end of the URL. By default it is the name of the file in the requested store.\n *                                                                                                                    // 69\n * Returns the HTTP URL for getting the file or its metadata.                                                         // 70\n */                                                                                                                   // 71\nFS.File.prototype.url = function(options) {                                                                           // 72\n  var self = this;                                                                                                    // 73\n  options = options || {};                                                                                            // 74\n  options = FS.Utility.extend({                                                                                       // 75\n    store: null,                                                                                                      // 76\n    auth: null,                                                                                                       // 77\n    download: false,                                                                                                  // 78\n    metadata: false,                                                                                                  // 79\n    brokenIsFine: false,                                                                                              // 80\n    uploading: null, // return this URL while uploading                                                               // 81\n    storing: null, // return this URL while storing                                                                   // 82\n    filename: null // override the filename that is shown to the user                                                 // 83\n  }, options.hash || options); // check for \"hash\" prop if called as helper                                           // 84\n                                                                                                                      // 85\n  // Primarily useful for displaying a temporary image while uploading an image                                       // 86\n  if (options.uploading && !self.isUploaded()) {                                                                      // 87\n    return options.uploading;                                                                                         // 88\n  }                                                                                                                   // 89\n                                                                                                                      // 90\n  if (self.isMounted()) {                                                                                             // 91\n    // See if we've stored in the requested store yet                                                                 // 92\n    var storeName = options.store || self.collection.primaryStore.name;                                               // 93\n    if (!self.hasStored(storeName)) {                                                                                 // 94\n      if (options.storing) {                                                                                          // 95\n        return options.storing;                                                                                       // 96\n      } else if (!options.brokenIsFine) {                                                                             // 97\n        // We want to return null if we know the URL will be a broken                                                 // 98\n        // link because then we can avoid rendering broken links, broken                                              // 99\n        // images, etc.                                                                                               // 100\n        return null;                                                                                                  // 101\n      }                                                                                                               // 102\n    }                                                                                                                 // 103\n                                                                                                                      // 104\n    // Add filename to end of URL if we can determine one                                                             // 105\n    var filename = options.filename || self.name({store: storeName});                                                 // 106\n    if (typeof filename === \"string\" && filename.length) {                                                            // 107\n      filename = '/' + filename;                                                                                      // 108\n    } else {                                                                                                          // 109\n      filename = '';                                                                                                  // 110\n    }                                                                                                                 // 111\n                                                                                                                      // 112\n    // TODO: Could we somehow figure out if the collection requires login?                                            // 113\n    var authToken = '';                                                                                               // 114\n    if (Meteor.isClient && typeof Accounts !== \"undefined\" && typeof Accounts._storedLoginToken === \"function\") {     // 115\n      if (options.auth !== false) {                                                                                   // 116\n        // Add reactive deps on the user                                                                              // 117\n        Meteor.userId();                                                                                              // 118\n                                                                                                                      // 119\n        var authObject = {                                                                                            // 120\n          authToken: Accounts._storedLoginToken() || ''                                                               // 121\n        };                                                                                                            // 122\n                                                                                                                      // 123\n        // If it's a number, we use that as the expiration time (in seconds)                                          // 124\n        if (options.auth === +options.auth) {                                                                         // 125\n          authObject.expiration = FS.HTTP.now() + options.auth * 1000;                                                // 126\n        }                                                                                                             // 127\n                                                                                                                      // 128\n        // Set the authToken                                                                                          // 129\n        var authString = JSON.stringify(authObject);                                                                  // 130\n        authToken = FS.Utility.btoa(authString);                                                                      // 131\n      }                                                                                                               // 132\n    } else if (typeof options.auth === \"string\") {                                                                    // 133\n      // If the user supplies auth token the user will be responsible for                                             // 134\n      // updating                                                                                                     // 135\n      authToken = options.auth;                                                                                       // 136\n    }                                                                                                                 // 137\n                                                                                                                      // 138\n    // Construct query string                                                                                         // 139\n    var params = {};                                                                                                  // 140\n    if (authToken !== '') {                                                                                           // 141\n      params.token = authToken;                                                                                       // 142\n    }                                                                                                                 // 143\n    if (options.download) {                                                                                           // 144\n      params.download = true;                                                                                         // 145\n    }                                                                                                                 // 146\n    if (options.store) {                                                                                              // 147\n      // We use options.store here instead of storeName because we want to omit the queryString                       // 148\n      // whenever possible, allowing users to have \"clean\" URLs if they want. The server will                         // 149\n      // assume the first store defined on the server, which means that we are assuming that                          // 150\n      // the first on the client is also the first on the server. If that's not the case, the                         // 151\n      // store option should be supplied.                                                                             // 152\n      params.store = options.store;                                                                                   // 153\n    }                                                                                                                 // 154\n    var queryString = FS.Utility.encodeParams(params);                                                                // 155\n    if (queryString.length) {                                                                                         // 156\n      queryString = '?' + queryString;                                                                                // 157\n    }                                                                                                                 // 158\n                                                                                                                      // 159\n    // Determine which URL to use                                                                                     // 160\n    var area;                                                                                                         // 161\n    if (options.metadata) {                                                                                           // 162\n      area = '/record';                                                                                               // 163\n    } else {                                                                                                          // 164\n      area = '/files';                                                                                                // 165\n    }                                                                                                                 // 166\n                                                                                                                      // 167\n    // Construct and return the http method url                                                                       // 168\n    return rootUrlPathPrefix + baseUrl + area + '/' + self.collection.name + '/' + self._id + filename + queryString; // 169\n  }                                                                                                                   // 170\n                                                                                                                      // 171\n};                                                                                                                    // 172\n                                                                                                                      // 173\n                                                                                                                      // 174\n                                                                                                                      // 175\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cfs:access-point/access-point-handlers.js                                                                 //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\ngetHeaders = [];                                                                                                      // 1\ngetHeadersByCollection = {};                                                                                          // 2\n                                                                                                                      // 3\nFS.HTTP.Handlers = {};                                                                                                // 4\n                                                                                                                      // 5\n/**                                                                                                                   // 6\n * @method FS.HTTP.Handlers.Del                                                                                       // 7\n * @public                                                                                                            // 8\n * @returns {any} response                                                                                            // 9\n *                                                                                                                    // 10\n * HTTP DEL request handler                                                                                           // 11\n */                                                                                                                   // 12\nFS.HTTP.Handlers.Del = function httpDelHandler(ref) {                                                                 // 13\n  var self = this;                                                                                                    // 14\n  var opts = FS.Utility.extend({}, self.query || {}, self.params || {});                                              // 15\n                                                                                                                      // 16\n  // If DELETE request, validate with 'remove' allow/deny, delete the file, and return                                // 17\n  FS.Utility.validateAction(ref.collection.files._validators['remove'], ref.file, self.userId);                       // 18\n                                                                                                                      // 19\n  /*                                                                                                                  // 20\n   * From the DELETE spec:                                                                                            // 21\n   * A successful response SHOULD be 200 (OK) if the response includes an                                             // 22\n   * entity describing the status, 202 (Accepted) if the action has not                                               // 23\n   * yet been enacted, or 204 (No Content) if the action has been enacted                                             // 24\n   * but the response does not include an entity.                                                                     // 25\n   */                                                                                                                 // 26\n  self.setStatusCode(200);                                                                                            // 27\n                                                                                                                      // 28\n  return {                                                                                                            // 29\n    deleted: !!ref.file.remove()                                                                                      // 30\n  };                                                                                                                  // 31\n};                                                                                                                    // 32\n                                                                                                                      // 33\n/**                                                                                                                   // 34\n * @method FS.HTTP.Handlers.GetList                                                                                   // 35\n * @public                                                                                                            // 36\n * @returns {Object} response                                                                                         // 37\n *                                                                                                                    // 38\n * HTTP GET file list request handler                                                                                 // 39\n */                                                                                                                   // 40\nFS.HTTP.Handlers.GetList = function httpGetListHandler() {                                                            // 41\n  // Not Yet Implemented                                                                                              // 42\n  // Need to check publications and return file list based on                                                         // 43\n  // what user is allowed to see                                                                                      // 44\n};                                                                                                                    // 45\n                                                                                                                      // 46\n/*                                                                                                                    // 47\n  requestRange will parse the range set in request header - if not possible it                                        // 48\n  will throw fitting errors and autofill range for both partial and full ranges                                       // 49\n                                                                                                                      // 50\n  throws error or returns the object:                                                                                 // 51\n  {                                                                                                                   // 52\n    start                                                                                                             // 53\n    end                                                                                                               // 54\n    length                                                                                                            // 55\n    unit                                                                                                              // 56\n    partial                                                                                                           // 57\n  }                                                                                                                   // 58\n*/                                                                                                                    // 59\nvar requestRange = function(req, fileSize) {                                                                          // 60\n  if (req) {                                                                                                          // 61\n    if (req.headers) {                                                                                                // 62\n      var rangeString = req.headers.range;                                                                            // 63\n                                                                                                                      // 64\n      // Make sure range is a string                                                                                  // 65\n      if (rangeString === ''+rangeString) {                                                                           // 66\n                                                                                                                      // 67\n        // range will be in the format \"bytes=0-32767\"                                                                // 68\n        var parts = rangeString.split('=');                                                                           // 69\n        var unit = parts[0];                                                                                          // 70\n                                                                                                                      // 71\n        // Make sure parts consists of two strings and range is of type \"byte\"                                        // 72\n        if (parts.length == 2 && unit == 'bytes') {                                                                   // 73\n          // Parse the range                                                                                          // 74\n          var range = parts[1].split('-');                                                                            // 75\n          var start = Number(range[0]);                                                                               // 76\n          var end = Number(range[1]);                                                                                 // 77\n                                                                                                                      // 78\n          // Fix invalid ranges?                                                                                      // 79\n          if (range[0] != start) start = 0;                                                                           // 80\n          if (range[1] != end || !end) end = fileSize - 1;                                                            // 81\n                                                                                                                      // 82\n          // Make sure range consists of a start and end point of numbers and start is less than end                  // 83\n          if (start < end) {                                                                                          // 84\n                                                                                                                      // 85\n            var partSize = 0 - start + end + 1;                                                                       // 86\n                                                                                                                      // 87\n            // Return the parsed range                                                                                // 88\n            return {                                                                                                  // 89\n              start: start,                                                                                           // 90\n              end: end,                                                                                               // 91\n              length: partSize,                                                                                       // 92\n              size: fileSize,                                                                                         // 93\n              unit: unit,                                                                                             // 94\n              partial: (partSize < fileSize)                                                                          // 95\n            };                                                                                                        // 96\n                                                                                                                      // 97\n          } else {                                                                                                    // 98\n            throw new Meteor.Error(416, \"Requested Range Not Satisfiable\");                                           // 99\n          }                                                                                                           // 100\n                                                                                                                      // 101\n        } else {                                                                                                      // 102\n          // The first part should be bytes                                                                           // 103\n          throw new Meteor.Error(416, \"Requested Range Unit Not Satisfiable\");                                        // 104\n        }                                                                                                             // 105\n                                                                                                                      // 106\n      } else {                                                                                                        // 107\n        // No range found                                                                                             // 108\n      }                                                                                                               // 109\n                                                                                                                      // 110\n    } else {                                                                                                          // 111\n      // throw new Error('No request headers set for _parseRange function');                                          // 112\n    }                                                                                                                 // 113\n  } else {                                                                                                            // 114\n    throw new Error('No request object passed to _parseRange function');                                              // 115\n  }                                                                                                                   // 116\n                                                                                                                      // 117\n  return {                                                                                                            // 118\n    start: 0,                                                                                                         // 119\n    end: fileSize - 1,                                                                                                // 120\n    length: fileSize,                                                                                                 // 121\n    size: fileSize,                                                                                                   // 122\n    unit: 'bytes',                                                                                                    // 123\n    partial: false                                                                                                    // 124\n  };                                                                                                                  // 125\n};                                                                                                                    // 126\n                                                                                                                      // 127\n/**                                                                                                                   // 128\n * @method FS.HTTP.Handlers.Get                                                                                       // 129\n * @public                                                                                                            // 130\n * @returns {any} response                                                                                            // 131\n *                                                                                                                    // 132\n * HTTP GET request handler                                                                                           // 133\n */                                                                                                                   // 134\nFS.HTTP.Handlers.Get = function httpGetHandler(ref) {                                                                 // 135\n  var self = this;                                                                                                    // 136\n  // Once we have the file, we can test allow/deny validators                                                         // 137\n  // XXX: pass on the \"share\" query eg. ?share=342hkjh23ggj for shared url access?                                    // 138\n  FS.Utility.validateAction(ref.collection._validators['download'], ref.file, self.userId /*, self.query.shareId*/);  // 139\n                                                                                                                      // 140\n  var storeName = ref.storeName;                                                                                      // 141\n                                                                                                                      // 142\n  // If no storeName was specified, use the first defined storeName                                                   // 143\n  if (typeof storeName !== \"string\") {                                                                                // 144\n    // No store handed, we default to primary store                                                                   // 145\n    storeName = ref.collection.primaryStore.name;                                                                     // 146\n  }                                                                                                                   // 147\n                                                                                                                      // 148\n  // Get the storage reference                                                                                        // 149\n  var storage = ref.collection.storesLookup[storeName];                                                               // 150\n                                                                                                                      // 151\n  if (!storage) {                                                                                                     // 152\n    throw new Meteor.Error(404, \"Not Found\", 'There is no store \"' + storeName + '\"');                                // 153\n  }                                                                                                                   // 154\n                                                                                                                      // 155\n  // Get the file                                                                                                     // 156\n  var copyInfo = ref.file.copies[storeName];                                                                          // 157\n                                                                                                                      // 158\n  if (!copyInfo) {                                                                                                    // 159\n    throw new Meteor.Error(404, \"Not Found\", 'This file was not stored in the ' + storeName + ' store');              // 160\n  }                                                                                                                   // 161\n                                                                                                                      // 162\n  // Set the content type for file                                                                                    // 163\n  if (typeof copyInfo.type === \"string\") {                                                                            // 164\n    self.setContentType(copyInfo.type);                                                                               // 165\n  } else {                                                                                                            // 166\n    self.setContentType('application/octet-stream');                                                                  // 167\n  }                                                                                                                   // 168\n                                                                                                                      // 169\n  // Add 'Content-Disposition' header if requested a download/attachment URL                                          // 170\n  if (typeof ref.download !== \"undefined\") {                                                                          // 171\n    var filename = ref.filename || copyInfo.name;                                                                     // 172\n    self.addHeader('Content-Disposition', 'attachment; filename=\"' + filename + '\"');                                 // 173\n  } else {                                                                                                            // 174\n    self.addHeader('Content-Disposition', 'inline');                                                                  // 175\n  }                                                                                                                   // 176\n                                                                                                                      // 177\n  // Get the contents range from request                                                                              // 178\n  var range = requestRange(self.request, copyInfo.size);                                                              // 179\n                                                                                                                      // 180\n  // Some browsers cope better if the content-range header is                                                         // 181\n  // still included even for the full file being returned.                                                            // 182\n  self.addHeader('Content-Range', range.unit + ' ' + range.start + '-' + range.end + '/' + range.size);               // 183\n                                                                                                                      // 184\n  // If a chunk/range was requested instead of the whole file, serve that'                                            // 185\n  if (range.partial) {                                                                                                // 186\n    self.setStatusCode(206, 'Partial Content');                                                                       // 187\n  } else {                                                                                                            // 188\n    self.setStatusCode(200, 'OK');                                                                                    // 189\n  }                                                                                                                   // 190\n                                                                                                                      // 191\n  // Add any other global custom headers and collection-specific custom headers                                       // 192\n  FS.Utility.each(getHeaders.concat(getHeadersByCollection[ref.collection.name] || []), function(header) {            // 193\n    self.addHeader(header[0], header[1]);                                                                             // 194\n  });                                                                                                                 // 195\n                                                                                                                      // 196\n  // Inform clients about length (or chunk length in case of ranges)                                                  // 197\n  self.addHeader('Content-Length', range.length);                                                                     // 198\n                                                                                                                      // 199\n  // Last modified header (updatedAt from file info)                                                                  // 200\n  self.addHeader('Last-Modified', copyInfo.updatedAt.toUTCString());                                                  // 201\n                                                                                                                      // 202\n  // Inform clients that we accept ranges for resumable chunked downloads                                             // 203\n  self.addHeader('Accept-Ranges', range.unit);                                                                        // 204\n                                                                                                                      // 205\n  if (FS.debug) console.log('Read file \"' + (ref.filename || copyInfo.name) + '\" ' + range.unit + ' ' + range.start + '-' + range.end + '/' + range.size);\n                                                                                                                      // 207\n  var readStream = storage.adapter.createReadStream(ref.file, {start: range.start, end: range.end});                  // 208\n                                                                                                                      // 209\n  readStream.on('error', function(err) {                                                                              // 210\n    // Send proper error message on get error                                                                         // 211\n    if (err.message && err.statusCode) {                                                                              // 212\n      self.Error(new Meteor.Error(err.statusCode, err.message));                                                      // 213\n    } else {                                                                                                          // 214\n      self.Error(new Meteor.Error(503, 'Service unavailable'));                                                       // 215\n    }                                                                                                                 // 216\n  });                                                                                                                 // 217\n                                                                                                                      // 218\n  readStream.pipe(self.createWriteStream());                                                                          // 219\n};                                                                                                                    // 220\n                                                                                                                      // 221\n/**                                                                                                                   // 222\n * @method FS.HTTP.Handlers.PutInsert                                                                                 // 223\n * @public                                                                                                            // 224\n * @returns {Object} response object with _id property                                                                // 225\n *                                                                                                                    // 226\n * HTTP PUT file insert request handler                                                                               // 227\n */                                                                                                                   // 228\nFS.HTTP.Handlers.PutInsert = function httpPutInsertHandler(ref) {                                                     // 229\n  var self = this;                                                                                                    // 230\n  var opts = FS.Utility.extend({}, self.query || {}, self.params || {});                                              // 231\n                                                                                                                      // 232\n  FS.debug && console.log(\"HTTP PUT (insert) handler\");                                                               // 233\n                                                                                                                      // 234\n  // Create the nice FS.File                                                                                          // 235\n  var fileObj = new FS.File();                                                                                        // 236\n                                                                                                                      // 237\n  // Set its name                                                                                                     // 238\n  fileObj.name(opts.filename || null);                                                                                // 239\n                                                                                                                      // 240\n  // Attach the readstream as the file's data                                                                         // 241\n  fileObj.attachData(self.createReadStream(), {type: self.requestHeaders['content-type'] || 'application/octet-stream'});\n                                                                                                                      // 243\n  // Validate with insert allow/deny                                                                                  // 244\n  FS.Utility.validateAction(ref.collection.files._validators['insert'], fileObj, self.userId);                        // 245\n                                                                                                                      // 246\n  // Insert file into collection, triggering readStream storage                                                       // 247\n  ref.collection.insert(fileObj);                                                                                     // 248\n                                                                                                                      // 249\n  // Send response                                                                                                    // 250\n  self.setStatusCode(200);                                                                                            // 251\n                                                                                                                      // 252\n  // Return the new file id                                                                                           // 253\n  return {_id: fileObj._id};                                                                                          // 254\n};                                                                                                                    // 255\n                                                                                                                      // 256\n/**                                                                                                                   // 257\n * @method FS.HTTP.Handlers.PutUpdate                                                                                 // 258\n * @public                                                                                                            // 259\n * @returns {Object} response object with _id and chunk properties                                                    // 260\n *                                                                                                                    // 261\n * HTTP PUT file update chunk request handler                                                                         // 262\n */                                                                                                                   // 263\nFS.HTTP.Handlers.PutUpdate = function httpPutUpdateHandler(ref) {                                                     // 264\n  var self = this;                                                                                                    // 265\n  var opts = FS.Utility.extend({}, self.query || {}, self.params || {});                                              // 266\n                                                                                                                      // 267\n  var chunk = parseInt(opts.chunk, 10);                                                                               // 268\n  if (isNaN(chunk)) chunk = 0;                                                                                        // 269\n                                                                                                                      // 270\n  FS.debug && console.log(\"HTTP PUT (update) handler received chunk: \", chunk);                                       // 271\n                                                                                                                      // 272\n  // Validate with insert allow/deny; also mounts and retrieves the file                                              // 273\n  FS.Utility.validateAction(ref.collection.files._validators['insert'], ref.file, self.userId);                       // 274\n                                                                                                                      // 275\n  self.createReadStream().pipe( FS.TempStore.createWriteStream(ref.file, chunk) );                                    // 276\n                                                                                                                      // 277\n  // Send response                                                                                                    // 278\n  self.setStatusCode(200);                                                                                            // 279\n                                                                                                                      // 280\n  return { _id: ref.file._id, chunk: chunk };                                                                         // 281\n};                                                                                                                    // 282\n                                                                                                                      // 283\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                    //\n// packages/cfs:access-point/access-point-server.js                                                                   //\n//                                                                                                                    //\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                      //\nvar path = Npm.require(\"path\");                                                                                       // 1\n                                                                                                                      // 2\nHTTP.publishFormats({                                                                                                 // 3\n  fileRecordFormat: function (input) {                                                                                // 4\n    // Set the method scope content type to json                                                                      // 5\n    this.setContentType('application/json');                                                                          // 6\n    if (FS.Utility.isArray(input)) {                                                                                  // 7\n      return EJSON.stringify(FS.Utility.map(input, function (obj) {                                                   // 8\n        return FS.Utility.cloneFileRecord(obj);                                                                       // 9\n      }));                                                                                                            // 10\n    } else {                                                                                                          // 11\n      return EJSON.stringify(FS.Utility.cloneFileRecord(input));                                                      // 12\n    }                                                                                                                 // 13\n  }                                                                                                                   // 14\n});                                                                                                                   // 15\n                                                                                                                      // 16\n/**                                                                                                                   // 17\n * @method FS.HTTP.setHeadersForGet                                                                                   // 18\n * @public                                                                                                            // 19\n * @param {Array} headers - List of headers, where each is a two-item array in which item 1 is the header name and item 2 is the header value.\n * @param {Array|String} [collections] - Which collections the headers should be added for. Omit this argument to add the header for all collections.\n * @returns {undefined}                                                                                               // 22\n */                                                                                                                   // 23\nFS.HTTP.setHeadersForGet = function setHeadersForGet(headers, collections) {                                          // 24\n  if (typeof collections === \"string\") {                                                                              // 25\n    collections = [collections];                                                                                      // 26\n  }                                                                                                                   // 27\n  if (collections) {                                                                                                  // 28\n    FS.Utility.each(collections, function(collectionName) {                                                           // 29\n      getHeadersByCollection[collectionName] = headers || [];                                                         // 30\n    });                                                                                                               // 31\n  } else {                                                                                                            // 32\n    getHeaders = headers || [];                                                                                       // 33\n  }                                                                                                                   // 34\n};                                                                                                                    // 35\n                                                                                                                      // 36\n/**                                                                                                                   // 37\n * @method FS.HTTP.publish                                                                                            // 38\n * @public                                                                                                            // 39\n * @param {FS.Collection} collection                                                                                  // 40\n * @param {Function} func - Publish function that returns a cursor.                                                   // 41\n * @returns {undefined}                                                                                               // 42\n *                                                                                                                    // 43\n * Publishes all documents returned by the cursor at a GET URL                                                        // 44\n * with the format baseUrl/record/collectionName. The publish                                                         // 45\n * function `this` is similar to normal `Meteor.publish`.                                                             // 46\n */                                                                                                                   // 47\nFS.HTTP.publish = function fsHttpPublish(collection, func) {                                                          // 48\n  var name = baseUrl + '/record/' + collection.name;                                                                  // 49\n  // Mount collection listing URL using http-publish package                                                          // 50\n  HTTP.publish({                                                                                                      // 51\n    name: name,                                                                                                       // 52\n    defaultFormat: 'fileRecordFormat',                                                                                // 53\n    collection: collection,                                                                                           // 54\n    collectionGet: true,                                                                                              // 55\n    collectionPost: false,                                                                                            // 56\n    documentGet: true,                                                                                                // 57\n    documentPut: false,                                                                                               // 58\n    documentDelete: false                                                                                             // 59\n  }, func);                                                                                                           // 60\n                                                                                                                      // 61\n  FS.debug && console.log(\"Registered HTTP method GET URLs:\\n\\n\" + name + '\\n' + name + '/:id\\n');                    // 62\n};                                                                                                                    // 63\n                                                                                                                      // 64\n/**                                                                                                                   // 65\n * @method FS.HTTP.unpublish                                                                                          // 66\n * @public                                                                                                            // 67\n * @param {FS.Collection} collection                                                                                  // 68\n * @returns {undefined}                                                                                               // 69\n *                                                                                                                    // 70\n * Unpublishes a restpoint created by a call to `FS.HTTP.publish`                                                     // 71\n */                                                                                                                   // 72\nFS.HTTP.unpublish = function fsHttpUnpublish(collection) {                                                            // 73\n  // Mount collection listing URL using http-publish package                                                          // 74\n  HTTP.unpublish(baseUrl + '/record/' + collection.name);                                                             // 75\n};                                                                                                                    // 76\n                                                                                                                      // 77\n_existingMountPoints = {};                                                                                            // 78\n                                                                                                                      // 79\n/**                                                                                                                   // 80\n * @method defaultSelectorFunction                                                                                    // 81\n * @private                                                                                                           // 82\n * @returns { collection, file }                                                                                      // 83\n *                                                                                                                    // 84\n * This is the default selector function                                                                              // 85\n */                                                                                                                   // 86\nvar defaultSelectorFunction = function() {                                                                            // 87\n  var self = this;                                                                                                    // 88\n  // Selector function                                                                                                // 89\n  //                                                                                                                  // 90\n  // This function will have to return the collection and the                                                         // 91\n  // file. If file not found undefined is returned - if null is returned the                                          // 92\n  // search was not possible                                                                                          // 93\n  var opts = FS.Utility.extend({}, self.query || {}, self.params || {});                                              // 94\n                                                                                                                      // 95\n  // Get the collection name from the url                                                                             // 96\n  var collectionName = opts.collectionName;                                                                           // 97\n                                                                                                                      // 98\n  // Get the id from the url                                                                                          // 99\n  var id = opts.id;                                                                                                   // 100\n                                                                                                                      // 101\n  // Get the collection                                                                                               // 102\n  var collection = FS._collections[collectionName];                                                                   // 103\n                                                                                                                      // 104\n  // Get the file if possible else return null                                                                        // 105\n  var file = (id && collection)? collection.findOne({ _id: id }): null;                                               // 106\n                                                                                                                      // 107\n  // Return the collection and the file                                                                               // 108\n  return {                                                                                                            // 109\n    collection: collection,                                                                                           // 110\n    file: file,                                                                                                       // 111\n    storeName: opts.store,                                                                                            // 112\n    download: opts.download,                                                                                          // 113\n    filename: opts.filename                                                                                           // 114\n  };                                                                                                                  // 115\n};                                                                                                                    // 116\n                                                                                                                      // 117\n/*                                                                                                                    // 118\n * @method FS.HTTP.mount                                                                                              // 119\n * @public                                                                                                            // 120\n * @param {array of string} mountPoints mount points to map rest functinality on                                      // 121\n * @param {function} selector_f [selector] function returns `{ collection, file }` for mount points to work with      // 122\n *                                                                                                                    // 123\n*/                                                                                                                    // 124\nFS.HTTP.mount = function(mountPoints, selector_f) {                                                                   // 125\n  // We take mount points as an array and we get a selector function                                                  // 126\n  var selectorFunction = selector_f || defaultSelectorFunction;                                                       // 127\n                                                                                                                      // 128\n  var accessPoint = {                                                                                                 // 129\n    'stream': true,                                                                                                   // 130\n    'auth': expirationAuth,                                                                                           // 131\n    'post': function(data) {                                                                                          // 132\n      // Use the selector for finding the collection and file reference                                               // 133\n      var ref = selectorFunction.call(this);                                                                          // 134\n                                                                                                                      // 135\n      // We dont support post - this would be normal insert eg. of filerecord?                                        // 136\n      throw new Meteor.Error(501, \"Not implemented\", \"Post is not supported\");                                        // 137\n    },                                                                                                                // 138\n    'put': function(data) {                                                                                           // 139\n      // Use the selector for finding the collection and file reference                                               // 140\n      var ref = selectorFunction.call(this);                                                                          // 141\n                                                                                                                      // 142\n      // Make sure we have a collection reference                                                                     // 143\n      if (!ref.collection)                                                                                            // 144\n        throw new Meteor.Error(404, \"Not Found\", \"No collection found\");                                              // 145\n                                                                                                                      // 146\n      // Make sure we have a file reference                                                                           // 147\n      if (ref.file === null) {                                                                                        // 148\n        // No id supplied so we will create a new FS.File instance and                                                // 149\n        // insert the supplied data.                                                                                  // 150\n        return FS.HTTP.Handlers.PutInsert.apply(this, [ref]);                                                         // 151\n      } else {                                                                                                        // 152\n        if (ref.file) {                                                                                               // 153\n          return FS.HTTP.Handlers.PutUpdate.apply(this, [ref]);                                                       // 154\n        } else {                                                                                                      // 155\n          throw new Meteor.Error(404, \"Not Found\", 'No file found');                                                  // 156\n        }                                                                                                             // 157\n      }                                                                                                               // 158\n    },                                                                                                                // 159\n    'get': function(data) {                                                                                           // 160\n      // Use the selector for finding the collection and file reference                                               // 161\n      var ref = selectorFunction.call(this);                                                                          // 162\n                                                                                                                      // 163\n      // Make sure we have a collection reference                                                                     // 164\n      if (!ref.collection)                                                                                            // 165\n        throw new Meteor.Error(404, \"Not Found\", \"No collection found\");                                              // 166\n                                                                                                                      // 167\n      // Make sure we have a file reference                                                                           // 168\n      if (ref.file === null) {                                                                                        // 169\n        // No id supplied so we will return the published list of files ala                                           // 170\n        // http.publish in json format                                                                                // 171\n        return FS.HTTP.Handlers.GetList.apply(this, [ref]);                                                           // 172\n      } else {                                                                                                        // 173\n        if (ref.file) {                                                                                               // 174\n          return FS.HTTP.Handlers.Get.apply(this, [ref]);                                                             // 175\n        } else {                                                                                                      // 176\n          throw new Meteor.Error(404, \"Not Found\", 'No file found');                                                  // 177\n        }                                                                                                             // 178\n      }                                                                                                               // 179\n    },                                                                                                                // 180\n    'delete': function(data) {                                                                                        // 181\n      // Use the selector for finding the collection and file reference                                               // 182\n      var ref = selectorFunction.call(this);                                                                          // 183\n                                                                                                                      // 184\n      // Make sure we have a collection reference                                                                     // 185\n      if (!ref.collection)                                                                                            // 186\n        throw new Meteor.Error(404, \"Not Found\", \"No collection found\");                                              // 187\n                                                                                                                      // 188\n      // Make sure we have a file reference                                                                           // 189\n      if (ref.file) {                                                                                                 // 190\n        return FS.HTTP.Handlers.Del.apply(this, [ref]);                                                               // 191\n      } else {                                                                                                        // 192\n        throw new Meteor.Error(404, \"Not Found\", 'No file found');                                                    // 193\n      }                                                                                                               // 194\n    }                                                                                                                 // 195\n  };                                                                                                                  // 196\n                                                                                                                      // 197\n  var accessPoints = {};                                                                                              // 198\n                                                                                                                      // 199\n  // Add debug message                                                                                                // 200\n  FS.debug && console.log('Registered HTTP method URLs:');                                                            // 201\n                                                                                                                      // 202\n  FS.Utility.each(mountPoints, function(mountPoint) {                                                                 // 203\n    // Couple mountpoint and accesspoint                                                                              // 204\n    accessPoints[mountPoint] = accessPoint;                                                                           // 205\n    // Remember our mountpoints                                                                                       // 206\n    _existingMountPoints[mountPoint] = mountPoint;                                                                    // 207\n    // Add debug message                                                                                              // 208\n    FS.debug && console.log(mountPoint);                                                                              // 209\n  });                                                                                                                 // 210\n                                                                                                                      // 211\n  // XXX: HTTP:methods should unmount existing mounts in case of overwriting?                                         // 212\n  HTTP.methods(accessPoints);                                                                                         // 213\n                                                                                                                      // 214\n};                                                                                                                    // 215\n                                                                                                                      // 216\n/**                                                                                                                   // 217\n * @method FS.HTTP.unmount                                                                                            // 218\n * @public                                                                                                            // 219\n * @param {string | array of string} [mountPoints] Optional, if not specified all mountpoints are unmounted           // 220\n *                                                                                                                    // 221\n */                                                                                                                   // 222\nFS.HTTP.unmount = function(mountPoints) {                                                                             // 223\n  // The mountPoints is optional, can be string or array if undefined then                                            // 224\n  // _existingMountPoints will be used                                                                                // 225\n  var unmountList;                                                                                                    // 226\n  // Container for the mount points to unmount                                                                        // 227\n  var unmountPoints = {};                                                                                             // 228\n                                                                                                                      // 229\n  if (typeof mountPoints === 'undefined') {                                                                           // 230\n    // Use existing mount points - unmount all                                                                        // 231\n    unmountList = _existingMountPoints;                                                                               // 232\n  } else if (mountPoints === ''+mountPoints) {                                                                        // 233\n    // Got a string                                                                                                   // 234\n    unmountList = [mountPoints];                                                                                      // 235\n  } else if (mountPoints.length) {                                                                                    // 236\n    // Got an array                                                                                                   // 237\n    unmountList = mountPoints;                                                                                        // 238\n  }                                                                                                                   // 239\n                                                                                                                      // 240\n  // If we have a list to unmount                                                                                     // 241\n  if (unmountList) {                                                                                                  // 242\n    // Iterate over each item                                                                                         // 243\n    FS.Utility.each(unmountList, function(mountPoint) {                                                               // 244\n      // Check _existingMountPoints to make sure the mount point exists in our                                        // 245\n      // context / was created by the FS.HTTP.mount                                                                   // 246\n      if (_existingMountPoints[mountPoint]) {                                                                         // 247\n        // Mark as unmount                                                                                            // 248\n        unmountPoints[mountPoint] = false;                                                                            // 249\n        // Release                                                                                                    // 250\n        delete _existingMountPoints[mountPoint];                                                                      // 251\n      }                                                                                                               // 252\n    });                                                                                                               // 253\n    FS.debug && console.log('FS.HTTP.unmount:');                                                                      // 254\n    FS.debug && console.log(unmountPoints);                                                                           // 255\n    // Complete unmount                                                                                               // 256\n    HTTP.methods(unmountPoints);                                                                                      // 257\n  }                                                                                                                   // 258\n};                                                                                                                    // 259\n                                                                                                                      // 260\n// ### FS.Collection maps on HTTP pr. default on the following restpoints:                                            // 261\n// *                                                                                                                  // 262\n//    baseUrl + '/files/:collectionName/:id/:filename',                                                               // 263\n//    baseUrl + '/files/:collectionName/:id',                                                                         // 264\n//    baseUrl + '/files/:collectionName'                                                                              // 265\n//                                                                                                                    // 266\n// Change/ replace the existing mount point by:                                                                       // 267\n// ```js                                                                                                              // 268\n//   // unmount all existing                                                                                          // 269\n//   FS.HTTP.unmount();                                                                                               // 270\n//   // Create new mount point                                                                                        // 271\n//   FS.HTTP.mount([                                                                                                  // 272\n//    '/cfs/files/:collectionName/:id/:filename',                                                                     // 273\n//    '/cfs/files/:collectionName/:id',                                                                               // 274\n//    '/cfs/files/:collectionName'                                                                                    // 275\n//  ]);                                                                                                               // 276\n//  ```                                                                                                               // 277\n//                                                                                                                    // 278\nmountUrls = function mountUrls() {                                                                                    // 279\n  // We unmount first in case we are calling this a second time                                                       // 280\n  FS.HTTP.unmount();                                                                                                  // 281\n                                                                                                                      // 282\n  FS.HTTP.mount([                                                                                                     // 283\n    baseUrl + '/files/:collectionName/:id/:filename',                                                                 // 284\n    baseUrl + '/files/:collectionName/:id',                                                                           // 285\n    baseUrl + '/files/:collectionName'                                                                                // 286\n  ]);                                                                                                                 // 287\n};                                                                                                                    // 288\n                                                                                                                      // 289\n// Returns the userId from URL token                                                                                  // 290\nvar expirationAuth = function expirationAuth() {                                                                      // 291\n  var self = this;                                                                                                    // 292\n                                                                                                                      // 293\n  // Read the token from '/hello?token=base64'                                                                        // 294\n  var encodedToken = self.query.token;                                                                                // 295\n                                                                                                                      // 296\n  FS.debug && console.log(\"token: \"+encodedToken);                                                                    // 297\n                                                                                                                      // 298\n  if (!encodedToken || !Meteor.users) return false;                                                                   // 299\n                                                                                                                      // 300\n  // Check the userToken before adding it to the db query                                                             // 301\n  // Set the this.userId                                                                                              // 302\n  var tokenString = FS.Utility.atob(encodedToken);                                                                    // 303\n                                                                                                                      // 304\n  var tokenObject;                                                                                                    // 305\n  try {                                                                                                               // 306\n    tokenObject = JSON.parse(tokenString);                                                                            // 307\n  } catch(err) {                                                                                                      // 308\n    throw new Meteor.Error(400, 'Bad Request');                                                                       // 309\n  }                                                                                                                   // 310\n                                                                                                                      // 311\n  // XXX: Do some check here of the object                                                                            // 312\n  var userToken = tokenObject.authToken;                                                                              // 313\n  if (userToken !== ''+userToken) {                                                                                   // 314\n    throw new Meteor.Error(400, 'Bad Request');                                                                       // 315\n  }                                                                                                                   // 316\n                                                                                                                      // 317\n  // If we have an expiration token we should check that it's still valid                                             // 318\n  if (tokenObject.expiration != null) {                                                                               // 319\n    // check if its too old                                                                                           // 320\n    var now = Date.now();                                                                                             // 321\n    if (tokenObject.expiration < now) {                                                                               // 322\n      FS.debug && console.log('Expired token: ' + tokenObject.expiration + ' is less than ' + now);                   // 323\n      throw new Meteor.Error(500, 'Expired token');                                                                   // 324\n    }                                                                                                                 // 325\n  }                                                                                                                   // 326\n                                                                                                                      // 327\n  // We are not on a secure line - so we have to look up the user...                                                  // 328\n  var user = Meteor.users.findOne({                                                                                   // 329\n    $or: [                                                                                                            // 330\n      {'services.resume.loginTokens.hashedToken': Accounts._hashLoginToken(userToken)},                               // 331\n      {'services.resume.loginTokens.token': userToken}                                                                // 332\n    ]                                                                                                                 // 333\n  });                                                                                                                 // 334\n                                                                                                                      // 335\n  // Set the userId in the scope                                                                                      // 336\n  return user && user._id;                                                                                            // 337\n};                                                                                                                    // 338\n                                                                                                                      // 339\nHTTP.methods(                                                                                                         // 340\n  {'/cfs/servertime': {                                                                                               // 341\n    get: function(data) {                                                                                             // 342\n      return Date.now().toString();                                                                                   // 343\n    }                                                                                                                 // 344\n  }                                                                                                                   // 345\n});                                                                                                                   // 346\n                                                                                                                      // 347\n// Unify client / server api                                                                                          // 348\nFS.HTTP.now = function() {                                                                                            // 349\n  return Date.now();                                                                                                  // 350\n};                                                                                                                    // 351\n                                                                                                                      // 352\n// Start up the basic mount points                                                                                    // 353\nMeteor.startup(function () {                                                                                          // 354\n  mountUrls();                                                                                                        // 355\n});                                                                                                                   // 356\n                                                                                                                      // 357\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['cfs:access-point'] = {};\n\n})();\n","servePath":"/packages/cfs_access-point.js"}]