[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar FS = Package['cfs:base-package'].FS;\nvar PowerQueue = Package['cfs:power-queue'].PowerQueue;\nvar ReactiveList = Package['cfs:reactive-list'].ReactiveList;\n\n/* Package-scope variables */\nvar httpCall, buildUrl, encodeParams, encodeString, makeErrorByStatus, populateData, UploadTransferQueue;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cfs_upload-http/packages/cfs_upload-http.js                                                                //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function () {                                                                                                         // 1\n                                                                                                                       // 2\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 3\n//                                                                                                               //    // 4\n// packages/cfs:upload-http/http-call-client.js                                                                  //    // 5\n//                                                                                                               //    // 6\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 7\n                                                                                                                 //    // 8\n/*                                                                                                               // 1  // 9\n * We use this instead of HTTP.call from the http package for now. If/when                                       // 2  // 10\n * PR 1670 is merged and released, we can probably remove this file and begin                                    // 3  // 11\n * using HTTP.call directly.                                                                                     // 4  // 12\n */                                                                                                              // 5  // 13\n                                                                                                                 // 6  // 14\nhttpCall = function(method, url, options, callback) {                                                            // 7  // 15\n                                                                                                                 // 8  // 16\n  ////////// Process arguments //////////                                                                        // 9  // 17\n                                                                                                                 // 10\n  if (! callback && typeof options === \"function\") {                                                             // 11\n    // support (method, url, callback) argument list                                                             // 12\n    callback = options;                                                                                          // 13\n    options = null;                                                                                              // 14\n  }                                                                                                              // 15\n                                                                                                                 // 16\n  options = options || {};                                                                                       // 17\n                                                                                                                 // 18\n  if (typeof callback !== \"function\")                                                                            // 19\n    throw new Error(                                                                                             // 20\n      \"Can't make a blocking HTTP call from the client; callback required.\");                                    // 21\n                                                                                                                 // 22\n  method = (method || \"\").toUpperCase();                                                                         // 23\n                                                                                                                 // 24\n  var headers = {};                                                                                              // 25\n                                                                                                                 // 26\n  var content = options.content;                                                                                 // 27\n  if (options.data) {                                                                                            // 28\n    content = JSON.stringify(options.data);                                                                      // 29\n    headers['Content-Type'] = 'application/json';                                                                // 30\n  }                                                                                                              // 31\n                                                                                                                 // 32\n  var params_for_url, params_for_body;                                                                           // 33\n  if (content || method === \"GET\" || method === \"HEAD\")                                                          // 34\n    params_for_url = options.params;                                                                             // 35\n  else                                                                                                           // 36\n    params_for_body = options.params;                                                                            // 37\n                                                                                                                 // 38\n  var query_match = /^(.*?)(\\?.*)?$/.exec(url);                                                                  // 39\n  url = buildUrl(query_match[1], query_match[2],                                                                 // 40\n                 options.query, params_for_url);                                                                 // 41\n                                                                                                                 // 42\n  if (options.followRedirects === false)                                                                         // 43\n    throw new Error(\"Option followRedirects:false not supported on client.\");                                    // 44\n                                                                                                                 // 45\n  var username, password;                                                                                        // 46\n  if (options.auth) {                                                                                            // 47\n    var colonLoc = options.auth.indexOf(':');                                                                    // 48\n    if (colonLoc < 0)                                                                                            // 49\n      throw new Error('auth option should be of the form \"username:password\"');                                  // 50\n    username = options.auth.substring(0, colonLoc);                                                              // 51\n    password = options.auth.substring(colonLoc+1);                                                               // 52\n  }                                                                                                              // 53\n                                                                                                                 // 54\n  if (params_for_body) {                                                                                         // 55\n    content = encodeParams(params_for_body);                                                                     // 56\n  }                                                                                                              // 57\n                                                                                                                 // 58\n  FS.Utility.extend(headers, options.headers || {});                                                             // 59\n                                                                                                                 // 60\n  ////////// Callback wrapping //////////                                                                        // 61\n                                                                                                                 // 62\n  // wrap callback to add a 'response' property on an error, in case                                             // 63\n  // we have both (http 4xx/5xx error, which has a response payload)                                             // 64\n  callback = (function(callback) {                                                                               // 65\n    return function(error, response) {                                                                           // 66\n      if (error && response)                                                                                     // 67\n        error.response = response;                                                                               // 68\n      callback(error, response);                                                                                 // 69\n    };                                                                                                           // 70\n  })(callback);                                                                                                  // 71\n                                                                                                                 // 72\n  // safety belt: only call the callback once.                                                                   // 73\n  callback = FS.Utility.once(callback);                                                                          // 74\n                                                                                                                 // 75\n                                                                                                                 // 76\n  ////////// Kickoff! //////////                                                                                 // 77\n                                                                                                                 // 78\n  // from this point on, errors are because of something remote, not                                             // 79\n  // something we should check in advance. Turn exceptions into error                                            // 80\n  // results.                                                                                                    // 81\n  try {                                                                                                          // 82\n    // setup XHR object                                                                                          // 83\n    var xhr;                                                                                                     // 84\n    if (typeof XMLHttpRequest !== \"undefined\")                                                                   // 85\n      xhr = new XMLHttpRequest();                                                                                // 86\n    else if (typeof ActiveXObject !== \"undefined\")                                                               // 87\n      xhr = new ActiveXObject(\"Microsoft.XMLHttp\"); // IE6                                                       // 88\n    else                                                                                                         // 89\n      throw new Error(\"Can't create XMLHttpRequest\"); // ???                                                     // 90\n                                                                                                                 // 91\n    xhr.open(method, url, true, username, password);                                                             // 92\n                                                                                                                 // 93\n    // support custom \"ejson-binary\" response type                                                               // 94\n    // and all browser-supported types                                                                           // 95\n    var convertToBinary;                                                                                         // 96\n    if (options.responseType === \"ejson-binary\") {                                                               // 97\n      xhr.responseType = \"arraybuffer\";                                                                          // 98\n      convertToBinary = true;                                                                                    // 99\n    } else {                                                                                                     // 100\n      xhr.responseType = options.responseType;                                                                   // 101\n    }                                                                                                            // 102\n                                                                                                                 // 103\n    for (var k in headers)                                                                                       // 104\n      xhr.setRequestHeader(k, headers[k]);                                                                       // 105\n                                                                                                                 // 106\n                                                                                                                 // 107\n    // setup timeout                                                                                             // 108\n    var timed_out = false;                                                                                       // 109\n    var timer;                                                                                                   // 110\n    if (options.timeout) {                                                                                       // 111\n      timer = Meteor.setTimeout(function() {                                                                     // 112\n        timed_out = true;                                                                                        // 113\n        xhr.abort();                                                                                             // 114\n      }, options.timeout);                                                                                       // 115\n    };                                                                                                           // 116\n                                                                                                                 // 117\n    // callback on complete                                                                                      // 118\n    xhr.onreadystatechange = function(evt) {                                                                     // 119\n      if (xhr.readyState === 4) { // COMPLETE                                                                    // 120\n        if (timer)                                                                                               // 121\n          Meteor.clearTimeout(timer);                                                                            // 122\n                                                                                                                 // 123\n        if (timed_out) {                                                                                         // 124\n          callback(new Error(\"timeout\"));                                                                        // 125\n        } else if (! xhr.status) {                                                                               // 126\n          // no HTTP response                                                                                    // 127\n          callback(new Error(\"network\"));                                                                        // 128\n        } else {                                                                                                 // 129\n                                                                                                                 // 130\n          var response = {};                                                                                     // 131\n          response.statusCode = xhr.status;                                                                      // 132\n                                                                                                                 // 133\n          var body = xhr.response || xhr.responseText;                                                           // 134\n                                                                                                                 // 135\n          // Some browsers don't yet support \"json\" responseType,                                                // 136\n          // but we can replicate it                                                                             // 137\n          if (options.responseType === \"json\" && typeof body === \"string\") {                                     // 138\n            try {                                                                                                // 139\n              body = JSON.parse(body);                                                                           // 140\n            } catch (err) {                                                                                      // 141\n              body = null;                                                                                       // 142\n            }                                                                                                    // 143\n          }                                                                                                      // 144\n                                                                                                                 // 145\n          // Add support for a custom responseType: \"ejson-binary\"                                               // 146\n          if (convertToBinary && typeof ArrayBuffer !== \"undefined\" && typeof Uint8Array !== \"undefined\" && body instanceof ArrayBuffer) {\n            var view = new Uint8Array(body);                                                                     // 148\n            var len = body.byteLength;                                                                           // 149\n            var binaryBody = EJSON.newBinary(len);                                                               // 150\n            for (var i = 0; i < len; i++) {                                                                      // 151\n              binaryBody[i] = view[i];                                                                           // 152\n            }                                                                                                    // 153\n            body = binaryBody;                                                                                   // 154\n          }                                                                                                      // 155\n                                                                                                                 // 156\n          response.content = body;                                                                               // 157\n                                                                                                                 // 158\n          response.headers = {};                                                                                 // 159\n          var header_str = xhr.getAllResponseHeaders();                                                          // 160\n                                                                                                                 // 161\n          // https://github.com/meteor/meteor/issues/553                                                         // 162\n          //                                                                                                     // 163\n          // In Firefox there is a weird issue, sometimes                                                        // 164\n          // getAllResponseHeaders returns the empty string, but                                                 // 165\n          // getResponseHeader returns correct results. Possibly this                                            // 166\n          // issue:                                                                                              // 167\n          // https://bugzilla.mozilla.org/show_bug.cgi?id=608735                                                 // 168\n          //                                                                                                     // 169\n          // If this happens we can't get a full list of headers, but                                            // 170\n          // at least get content-type so our JSON decoding happens                                              // 171\n          // correctly. In theory, we could try and rescue more header                                           // 172\n          // values with a list of common headers, but content-type is                                           // 173\n          // the only vital one for now.                                                                         // 174\n          if (\"\" === header_str && xhr.getResponseHeader(\"content-type\"))                                        // 175\n            header_str =                                                                                         // 176\n            \"content-type: \" + xhr.getResponseHeader(\"content-type\");                                            // 177\n                                                                                                                 // 178\n          var headers_raw = header_str.split(/\\r?\\n/);                                                           // 179\n          FS.Utility.each(headers_raw, function (h) {                                                            // 180\n            var m = /^(.*?):(?:\\s+)(.*)$/.exec(h);                                                               // 181\n            if (m && m.length === 3)                                                                             // 182\n              response.headers[m[1].toLowerCase()] = m[2];                                                       // 183\n          });                                                                                                    // 184\n                                                                                                                 // 185\n          populateData(response);                                                                                // 186\n                                                                                                                 // 187\n          var error = null;                                                                                      // 188\n          if (response.statusCode >= 400)                                                                        // 189\n            error = makeErrorByStatus(response.statusCode, response.content);                                    // 190\n                                                                                                                 // 191\n          callback(error, response);                                                                             // 192\n        }                                                                                                        // 193\n      }                                                                                                          // 194\n    };                                                                                                           // 195\n                                                                                                                 // 196\n    // send it on its way                                                                                        // 197\n    xhr.send(content);                                                                                           // 198\n                                                                                                                 // 199\n  } catch (err) {                                                                                                // 200\n    callback(err);                                                                                               // 201\n  }                                                                                                              // 202\n                                                                                                                 // 203\n};                                                                                                               // 204\n                                                                                                                 // 205\nbuildUrl = function(before_qmark, from_qmark, opt_query, opt_params) {                                           // 206\n  var url_without_query = before_qmark;                                                                          // 207\n  var query = from_qmark ? from_qmark.slice(1) : null;                                                           // 208\n                                                                                                                 // 209\n  if (typeof opt_query === \"string\")                                                                             // 210\n    query = String(opt_query);                                                                                   // 211\n                                                                                                                 // 212\n  if (opt_params) {                                                                                              // 213\n    query = query || \"\";                                                                                         // 214\n    var prms = encodeParams(opt_params);                                                                         // 215\n    if (query && prms)                                                                                           // 216\n      query += '&';                                                                                              // 217\n    query += prms;                                                                                               // 218\n  }                                                                                                              // 219\n                                                                                                                 // 220\n  var url = url_without_query;                                                                                   // 221\n  if (query !== null)                                                                                            // 222\n    url += (\"?\"+query);                                                                                          // 223\n                                                                                                                 // 224\n  return url;                                                                                                    // 225\n};                                                                                                               // 226\n                                                                                                                 // 227\nencodeParams = function(params) {                                                                                // 228\n  var buf = [];                                                                                                  // 229\n  FS.Utility.each(params, function(value, key) {                                                                 // 230\n    if (buf.length)                                                                                              // 231\n      buf.push('&');                                                                                             // 232\n    buf.push(encodeString(key), '=', encodeString(value));                                                       // 233\n  });                                                                                                            // 234\n  return buf.join('').replace(/%20/g, '+');                                                                      // 235\n};                                                                                                               // 236\n                                                                                                                 // 237\nencodeString = function(str) {                                                                                   // 238\n  return encodeURIComponent(str).replace(/[!'()]/g, escape).replace(/\\*/g, \"%2A\");                               // 239\n};                                                                                                               // 240\n                                                                                                                 // 241\nmakeErrorByStatus = function(statusCode, content) {                                                              // 242\n  var MAX_LENGTH = 160; // if you change this, also change the appropriate test                                  // 243\n                                                                                                                 // 244\n  var truncate = function(str, length) {                                                                         // 245\n    return str.length > length ? str.slice(0, length) + '...' : str;                                             // 246\n  };                                                                                                             // 247\n                                                                                                                 // 248\n  var message = \"failed [\" + statusCode + \"]\";                                                                   // 249\n  if (content)                                                                                                   // 250\n    message += \" \" + truncate(content.replace(/\\n/g, \" \"), MAX_LENGTH);                                          // 251\n                                                                                                                 // 252\n  return new Error(message);                                                                                     // 253\n};                                                                                                               // 254\n                                                                                                                 // 255\n// Fill in `response.data` if the content-type is JSON.                                                          // 256\npopulateData = function(response) {                                                                              // 257\n  // Read Content-Type header, up to a ';' if there is one.                                                      // 258\n  // A typical header might be \"application/json; charset=utf-8\"                                                 // 259\n  // or just \"application/json\".                                                                                 // 260\n  var contentType = (response.headers['content-type'] || ';').split(';')[0];                                     // 261\n                                                                                                                 // 262\n  // Only try to parse data as JSON if server sets correct content type.                                         // 263\n  if (FS.Utility.include(['application/json', 'text/javascript'], contentType)) {                                // 264\n    try {                                                                                                        // 265\n      response.data = JSON.parse(response.content);                                                              // 266\n    } catch (err) {                                                                                              // 267\n      response.data = null;                                                                                      // 268\n    }                                                                                                            // 269\n  } else {                                                                                                       // 270\n    response.data = null;                                                                                        // 271\n  }                                                                                                              // 272\n};                                                                                                               // 273\n                                                                                                                 // 274\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 283\n                                                                                                                       // 284\n}).call(this);                                                                                                         // 285\n                                                                                                                       // 286\n                                                                                                                       // 287\n                                                                                                                       // 288\n                                                                                                                       // 289\n                                                                                                                       // 290\n                                                                                                                       // 291\n(function () {                                                                                                         // 292\n                                                                                                                       // 293\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 294\n//                                                                                                               //    // 295\n// packages/cfs:upload-http/upload-http-common.js                                                                //    // 296\n//                                                                                                               //    // 297\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 298\n                                                                                                                 //    // 299\nFS.HTTP = FS.HTTP || {};                                                                                         // 1  // 300\n                                                                                                                 // 2  // 301\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 302\n                                                                                                                       // 303\n}).call(this);                                                                                                         // 304\n                                                                                                                       // 305\n                                                                                                                       // 306\n                                                                                                                       // 307\n                                                                                                                       // 308\n                                                                                                                       // 309\n                                                                                                                       // 310\n(function () {                                                                                                         // 311\n                                                                                                                       // 312\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 313\n//                                                                                                               //    // 314\n// packages/cfs:upload-http/upload-http-client.js                                                                //    // 315\n//                                                                                                               //    // 316\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 317\n                                                                                                                 //    // 318\n/*                                                                                                               // 1  // 319\n * HTTP Upload Transfer Queue                                                                                    // 2  // 320\n */                                                                                                              // 3  // 321\n                                                                                                                 // 4  // 322\n// 2MB default upload chunk size                                                                                 // 5  // 323\n// Can be overridden by user with FS.config.uploadChunkSize or per FS.Collection in collection options           // 6  // 324\nvar defaultChunkSize = 2 * 1024 * 1024;                                                                          // 7  // 325\n                                                                                                                 // 8  // 326\n/**                                                                                                              // 9  // 327\n * @private                                                                                                      // 10\n * @param {Object} task                                                                                          // 11\n * @param {Function} next                                                                                        // 12\n * @return {undefined}                                                                                           // 13\n */                                                                                                              // 14\nvar _taskHandler = function(task, next) {                                                                        // 15\n  FS.debug && console.log(\"uploading chunk \" + task.chunk + \", bytes \" + task.start + \" to \" + Math.min(task.end, task.fileObj.size()) + \" of \" + task.fileObj.size());\n  task.fileObj.data.getBinary(task.start, task.end, function gotBinaryCallback(err, data) {                      // 17\n    if (err) {                                                                                                   // 18\n      next(new Meteor.Error(err.error, err.message));                                                            // 19\n    } else {                                                                                                     // 20\n                                                                                                                 // 21\n      FS.debug && console.log('PUT to URL', task.url, task.urlParams);                                           // 22\n                                                                                                                 // 23\n      httpCall(\"PUT\", task.url, {                                                                                // 24\n        params: FS.Utility.extend({chunk: task.chunk}, task.urlParams),                                          // 25\n        content: data,                                                                                           // 26\n        headers: {                                                                                               // 27\n          'Content-Type': task.fileObj.type()                                                                    // 28\n        }                                                                                                        // 29\n      }, function(error, result) {                                                                               // 30\n        task = null;                                                                                             // 31\n        if (error) {                                                                                             // 32\n          next(new Meteor.Error(error.error, error.message));                                                    // 33\n        } else {                                                                                                 // 34\n          next();                                                                                                // 35\n        }                                                                                                        // 36\n      });                                                                                                        // 37\n                                                                                                                 // 38\n    }                                                                                                            // 39\n  });                                                                                                            // 40\n};                                                                                                               // 41\n                                                                                                                 // 42\n/**                                                                                                              // 43\n * @private                                                                                                      // 44\n * @param {Object} data                                                                                          // 45\n * @param {Function} addTask                                                                                     // 46\n * @return {undefined}                                                                                           // 47\n */                                                                                                              // 48\nvar _errorHandler = function(data, addTask, failures) {                                                          // 49\n  // If file upload fails                                                                                        // 50\n  // TODO We should retry a few times and then emit error?                                                       // 51\n  // data.fileObj.emit(\"error\", error);                                                                          // 52\n};                                                                                                               // 53\n                                                                                                                 // 54\n/** @method UploadTransferQueue                                                                                  // 55\n * @namespace UploadTransferQueue                                                                                // 56\n * @constructor                                                                                                  // 57\n * @param {Object} [options]                                                                                     // 58\n */                                                                                                              // 59\nUploadTransferQueue = function(options) {                                                                        // 60\n  // Rig options                                                                                                 // 61\n  options = options || {};                                                                                       // 62\n                                                                                                                 // 63\n  // Init the power queue                                                                                        // 64\n  var self = new PowerQueue({                                                                                    // 65\n    name: 'HTTPUploadTransferQueue',                                                                             // 66\n    // spinalQueue: ReactiveList,                                                                                // 67\n    maxProcessing: 1,                                                                                            // 68\n    maxFailures: 5,                                                                                              // 69\n    jumpOnFailure: true,                                                                                         // 70\n    autostart: true,                                                                                             // 71\n    isPaused: false,                                                                                             // 72\n    filo: false,                                                                                                 // 73\n    debug: FS.debug                                                                                              // 74\n  });                                                                                                            // 75\n                                                                                                                 // 76\n  // Keep track of uploaded files via this queue                                                                 // 77\n  self.files = {};                                                                                               // 78\n                                                                                                                 // 79\n  // cancel maps onto queue reset                                                                                // 80\n  self.cancel = self.reset;                                                                                      // 81\n                                                                                                                 // 82\n  /**                                                                                                            // 83\n    * @method UploadTransferQueue.isUploadingFile                                                                // 84\n    * @param {FS.File} fileObj File to check if uploading                                                        // 85\n    * @returns {Boolean} True if the file is uploading                                                           // 86\n    *                                                                                                            // 87\n    * @todo Maybe have a similar function for accessing the file upload queue?                                   // 88\n    */                                                                                                           // 89\n  self.isUploadingFile = function(fileObj) {                                                                     // 90\n    // Check if file is already in queue                                                                         // 91\n    return !!(fileObj && fileObj._id && fileObj.collectionName && (self.files[fileObj.collectionName] || {})[fileObj._id]);\n  };                                                                                                             // 93\n                                                                                                                 // 94\n  /** @method UploadTransferQueue.resumeUploadingFile                                                            // 95\n   * @param {FS.File} File to resume uploading                                                                   // 96\n   * @todo Not sure if this is the best way to handle resumes                                                    // 97\n   */                                                                                                            // 98\n  self.resumeUploadingFile = function(fileObj) {                                                                 // 99\n    // Make sure we are handed a FS.File                                                                         // 100\n    if (!(fileObj instanceof FS.File)) {                                                                         // 101\n      throw new Error('Transfer queue expects a FS.File');                                                       // 102\n    }                                                                                                            // 103\n                                                                                                                 // 104\n    if (fileObj.isMounted()) {                                                                                   // 105\n      // This might still be true, preventing upload, if                                                         // 106\n      // there was a server restart without client restart.                                                      // 107\n      self.files[fileObj.collectionName] = self.files[fileObj.collectionName] || {};                             // 108\n      self.files[fileObj.collectionName][fileObj._id] = false;                                                   // 109\n      // Kick off normal upload                                                                                  // 110\n      self.uploadFile(fileObj);                                                                                  // 111\n    }                                                                                                            // 112\n  };                                                                                                             // 113\n                                                                                                                 // 114\n  /** @method UploadTransferQueue.uploadFile                                                                     // 115\n   * @param {FS.File} File to upload                                                                             // 116\n   * @todo Check that a file can only be added once - maybe a visual helper on the FS.File?                      // 117\n   * @todo Have an initial request to the server getting uploaded chunks for resume                              // 118\n   */                                                                                                            // 119\n  self.uploadFile = function(fileObj) {                                                                          // 120\n    FS.debug && console.log(\"HTTP uploadFile\");                                                                  // 121\n                                                                                                                 // 122\n    // Make sure we are handed a FS.File                                                                         // 123\n    if (!(fileObj instanceof FS.File)) {                                                                         // 124\n      throw new Error('Transfer queue expects a FS.File');                                                       // 125\n    }                                                                                                            // 126\n                                                                                                                 // 127\n    // Make sure that we have size as number                                                                     // 128\n    if (typeof fileObj.size() !== 'number') {                                                                    // 129\n      throw new Error('TransferQueue upload failed: fileObj size not set');                                      // 130\n    }                                                                                                            // 131\n                                                                                                                 // 132\n    // We don't add the file if it's already in transfer or if already uploaded                                  // 133\n    if (self.isUploadingFile(fileObj) || fileObj.isUploaded()) {                                                 // 134\n      return;                                                                                                    // 135\n    }                                                                                                            // 136\n                                                                                                                 // 137\n    // Make sure the file object is mounted on a collection                                                      // 138\n    if (fileObj.isMounted()) {                                                                                   // 139\n                                                                                                                 // 140\n      var collectionName = fileObj.collectionName;                                                               // 141\n      var id = fileObj._id;                                                                                      // 142\n                                                                                                                 // 143\n      // Set the chunkSize to match the collection options, or global config, or default                         // 144\n      fileObj.chunkSize = fileObj.collection.options.chunkSize || FS.config.uploadChunkSize || defaultChunkSize; // 145\n      // Set counter for uploaded chunks                                                                         // 146\n      fileObj.chunkCount = 0;                                                                                    // 147\n      // Calc the number of chunks                                                                               // 148\n      fileObj.chunkSum = Math.ceil(fileObj.size() / fileObj.chunkSize);                                          // 149\n                                                                                                                 // 150\n      if (fileObj.chunkSum === 0)                                                                                // 151\n        return;                                                                                                  // 152\n                                                                                                                 // 153\n      // Update the filerecord                                                                                   // 154\n      // TODO eventually we should be able to do this without storing any chunk info in the filerecord           // 155\n      fileObj.update({$set: {chunkSize: fileObj.chunkSize, chunkCount: fileObj.chunkCount, chunkSum: fileObj.chunkSum}});\n                                                                                                                 // 157\n      // Create a sub queue                                                                                      // 158\n      var chunkQueue = new PowerQueue({                                                                          // 159\n        onEnded: function oneChunkQueueEnded() {                                                                 // 160\n          // Remove from list of files being uploaded                                                            // 161\n          self.files[collectionName][id] = false;                                                                // 162\n          // XXX It might be possible for this to be called even though there were errors uploading?             // 163\n          fileObj.emit(\"uploaded\");                                                                              // 164\n        },                                                                                                       // 165\n        spinalQueue: ReactiveList,                                                                               // 166\n        maxProcessing: 1,                                                                                        // 167\n        maxFailures: 5,                                                                                          // 168\n        jumpOnFailure: true,                                                                                     // 169\n        autostart: false,                                                                                        // 170\n        isPaused: false,                                                                                         // 171\n        filo: false                                                                                              // 172\n      });                                                                                                        // 173\n                                                                                                                 // 174\n      // Rig the custom task handler                                                                             // 175\n      chunkQueue.taskHandler = _taskHandler;                                                                     // 176\n                                                                                                                 // 177\n      // Rig the error handler                                                                                   // 178\n      chunkQueue.errorHandler = _errorHandler;                                                                   // 179\n                                                                                                                 // 180\n      // Set flag that this file is being transfered                                                             // 181\n      self.files[collectionName] = self.files[collectionName] || {};                                             // 182\n      self.files[collectionName][id] = true;                                                                     // 183\n                                                                                                                 // 184\n      // Construct URL                                                                                           // 185\n      var url = FS.HTTP.uploadUrl + '/' + collectionName;                                                        // 186\n      if (id) {                                                                                                  // 187\n        url += '/' + id;                                                                                         // 188\n      }                                                                                                          // 189\n                                                                                                                 // 190\n      // TODO: Could we somehow figure out if the collection requires login?                                     // 191\n      var authToken = '';                                                                                        // 192\n      if (typeof Accounts !== \"undefined\") {                                                                     // 193\n        var authObject = {                                                                                       // 194\n          authToken: Accounts._storedLoginToken() || '',                                                         // 195\n        };                                                                                                       // 196\n                                                                                                                 // 197\n        // Set the authToken                                                                                     // 198\n        var authString = JSON.stringify(authObject);                                                             // 199\n        authToken = FS.Utility.btoa(authString);                                                                 // 200\n      }                                                                                                          // 201\n                                                                                                                 // 202\n      // Construct query string                                                                                  // 203\n      var urlParams = {                                                                                          // 204\n        filename: fileObj.name()                                                                                 // 205\n      };                                                                                                         // 206\n      if (authToken !== '') {                                                                                    // 207\n        urlParams.token = authToken;                                                                             // 208\n      }                                                                                                          // 209\n                                                                                                                 // 210\n      // Add chunk upload tasks                                                                                  // 211\n      for (var chunk = 0, start; chunk < fileObj.chunkSum; chunk++) {                                            // 212\n        start = chunk * fileObj.chunkSize;                                                                       // 213\n        // Create and add the task                                                                               // 214\n        // XXX should we somehow make sure we haven't uploaded this chunk already, in                            // 215\n        // case we are resuming?                                                                                 // 216\n        chunkQueue.add({                                                                                         // 217\n          chunk: chunk,                                                                                          // 218\n          name: fileObj.name(),                                                                                  // 219\n          url: url,                                                                                              // 220\n          urlParams: urlParams,                                                                                  // 221\n          fileObj: fileObj,                                                                                      // 222\n          start: start,                                                                                          // 223\n          end: (chunk + 1) * fileObj.chunkSize                                                                   // 224\n        });                                                                                                      // 225\n      }                                                                                                          // 226\n                                                                                                                 // 227\n      // Add the queue to the main upload queue                                                                  // 228\n      self.add(chunkQueue);                                                                                      // 229\n    }                                                                                                            // 230\n                                                                                                                 // 231\n  };                                                                                                             // 232\n                                                                                                                 // 233\n  return self;                                                                                                   // 234\n};                                                                                                               // 235\n                                                                                                                 // 236\n/**                                                                                                              // 237\n * @namespace FS                                                                                                 // 238\n * @type UploadTransferQueue                                                                                     // 239\n *                                                                                                               // 240\n * There is a single uploads transfer queue per client (not per CFS)                                             // 241\n */                                                                                                              // 242\nFS.HTTP.uploadQueue = new UploadTransferQueue();                                                                 // 243\n                                                                                                                 // 244\n/*                                                                                                               // 245\n * FS.File extensions                                                                                            // 246\n */                                                                                                              // 247\n                                                                                                                 // 248\n/**                                                                                                              // 249\n * @method FS.File.prototype.resume                                                                              // 250\n * @public                                                                                                       // 251\n * @param {File|Blob|Buffer} ref                                                                                 // 252\n * @todo WIP, Not yet implemented for server                                                                     // 253\n *                                                                                                               // 254\n * > This function is not yet implemented for server                                                             // 255\n */                                                                                                              // 256\nFS.File.prototype.resume = function(ref) {                                                                       // 257\n  var self = this;                                                                                               // 258\n  FS.uploadQueue.resumeUploadingFile(self);                                                                      // 259\n};                                                                                                               // 260\n                                                                                                                 // 261\n///////////////////////////////////////////////////////////////////////////////////////////////////////////////////    // 580\n                                                                                                                       // 581\n}).call(this);                                                                                                         // 582\n                                                                                                                       // 583\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\nPackage['cfs:upload-http'] = {};\n\n})();\n","servePath":"/packages/cfs_upload-http.js"}]