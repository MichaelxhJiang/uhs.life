[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar DataMan;\n\n(function(){\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cfs_data-man/packages/cfs_data-man.js                                                                      //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n(function () {                                                                                                         // 1\n                                                                                                                       // 2\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/cfs:data-man/client/Blob.js                                                                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/* Blob.js                                                                                                          // 1\n * A Blob implementation.                                                                                           // 2\n * 2013-12-27                                                                                                       // 3\n *                                                                                                                  // 4\n * By Eli Grey, http://eligrey.com                                                                                  // 5\n * By Devin Samarin, https://github.com/eboyjr                                                                      // 6\n * License: X11/MIT                                                                                                 // 7\n *   See LICENSE.md                                                                                                 // 8\n */                                                                                                                 // 9\n                                                                                                                    // 10\n/*global self, unescape */                                                                                          // 11\n/*jslint bitwise: true, regexp: true, confusion: true, es5: true, vars: true, white: true,                          // 12\n  plusplus: true */                                                                                                 // 13\n                                                                                                                    // 14\n/*! @source http://purl.eligrey.com/github/Blob.js/blob/master/Blob.js */                                           // 15\n                                                                                                                    // 16\nif (!(typeof Blob === \"function\" || typeof Blob === \"object\") || typeof URL === \"undefined\")                        // 17\nif ((typeof Blob === \"function\" || typeof Blob === \"object\") && typeof webkitURL !== \"undefined\") self.URL = webkitURL;\nelse var Blob = (function (view) {                                                                                  // 19\n    \"use strict\";                                                                                                   // 20\n                                                                                                                    // 21\n    var BlobBuilder = view.BlobBuilder || view.WebKitBlobBuilder || view.MozBlobBuilder || view.MSBlobBuilder || (function(view) {\n        var                                                                                                         // 23\n              get_class = function(object) {                                                                        // 24\n                return Object.prototype.toString.call(object).match(/^\\[object\\s(.*)\\]$/)[1];                       // 25\n            }                                                                                                       // 26\n            , FakeBlobBuilder = function BlobBuilder() {                                                            // 27\n                this.data = [];                                                                                     // 28\n            }                                                                                                       // 29\n            , FakeBlob = function Blob(data, type, encoding) {                                                      // 30\n                this.data = data;                                                                                   // 31\n                this.size = data.length;                                                                            // 32\n                this.type = type;                                                                                   // 33\n                this.encoding = encoding;                                                                           // 34\n            }                                                                                                       // 35\n            , FBB_proto = FakeBlobBuilder.prototype                                                                 // 36\n            , FB_proto = FakeBlob.prototype                                                                         // 37\n            , FileReaderSync = view.FileReaderSync                                                                  // 38\n            , FileException = function(type) {                                                                      // 39\n                this.code = this[this.name = type];                                                                 // 40\n            }                                                                                                       // 41\n            , file_ex_codes = (                                                                                     // 42\n                  \"NOT_FOUND_ERR SECURITY_ERR ABORT_ERR NOT_READABLE_ERR ENCODING_ERR \"                             // 43\n                + \"NO_MODIFICATION_ALLOWED_ERR INVALID_STATE_ERR SYNTAX_ERR\"                                        // 44\n            ).split(\" \")                                                                                            // 45\n            , file_ex_code = file_ex_codes.length                                                                   // 46\n            , real_URL = view.URL || view.webkitURL || view                                                         // 47\n            , real_create_object_URL = real_URL.createObjectURL                                                     // 48\n            , real_revoke_object_URL = real_URL.revokeObjectURL                                                     // 49\n            , URL = real_URL                                                                                        // 50\n            , btoa = view.btoa                                                                                      // 51\n            , atob = view.atob                                                                                      // 52\n                                                                                                                    // 53\n            , ArrayBuffer = view.ArrayBuffer                                                                        // 54\n            , Uint8Array = view.Uint8Array                                                                          // 55\n        ;                                                                                                           // 56\n        FakeBlob.fake = FB_proto.fake = true;                                                                       // 57\n        while (file_ex_code--) {                                                                                    // 58\n            FileException.prototype[file_ex_codes[file_ex_code]] = file_ex_code + 1;                                // 59\n        }                                                                                                           // 60\n        if (!real_URL.createObjectURL) {                                                                            // 61\n            URL = view.URL = {};                                                                                    // 62\n        }                                                                                                           // 63\n        URL.createObjectURL = function(blob) {                                                                      // 64\n            var                                                                                                     // 65\n                  type = blob.type                                                                                  // 66\n                , data_URI_header                                                                                   // 67\n            ;                                                                                                       // 68\n            if (type === null) {                                                                                    // 69\n                type = \"application/octet-stream\";                                                                  // 70\n            }                                                                                                       // 71\n            if (blob instanceof FakeBlob) {                                                                         // 72\n                data_URI_header = \"data:\" + type;                                                                   // 73\n                if (blob.encoding === \"base64\") {                                                                   // 74\n                    return data_URI_header + \";base64,\" + blob.data;                                                // 75\n                } else if (blob.encoding === \"URI\") {                                                               // 76\n                    return data_URI_header + \",\" + decodeURIComponent(blob.data);                                   // 77\n                } if (btoa) {                                                                                       // 78\n                    return data_URI_header + \";base64,\" + btoa(blob.data);                                          // 79\n                } else {                                                                                            // 80\n                    return data_URI_header + \",\" + encodeURIComponent(blob.data);                                   // 81\n                }                                                                                                   // 82\n            } else if (real_create_object_URL) {                                                                    // 83\n                return real_create_object_URL.call(real_URL, blob);                                                 // 84\n            }                                                                                                       // 85\n        };                                                                                                          // 86\n        URL.revokeObjectURL = function(object_URL) {                                                                // 87\n            if (object_URL.substring(0, 5) !== \"data:\" && real_revoke_object_URL) {                                 // 88\n                real_revoke_object_URL.call(real_URL, object_URL);                                                  // 89\n            }                                                                                                       // 90\n        };                                                                                                          // 91\n        FBB_proto.append = function(data/*, endings*/) {                                                            // 92\n            var bb = this.data;                                                                                     // 93\n            // decode data to a binary string                                                                       // 94\n            if (Uint8Array && (data instanceof ArrayBuffer || data instanceof Uint8Array)) {                        // 95\n                var                                                                                                 // 96\n                      str = \"\"                                                                                      // 97\n                    , buf = new Uint8Array(data)                                                                    // 98\n                    , i = 0                                                                                         // 99\n                    , buf_len = buf.length                                                                          // 100\n                ;                                                                                                   // 101\n                for (; i < buf_len; i++) {                                                                          // 102\n                    str += String.fromCharCode(buf[i]);                                                             // 103\n                }                                                                                                   // 104\n                bb.push(str);                                                                                       // 105\n            } else if (get_class(data) === \"Blob\" || get_class(data) === \"File\") {                                  // 106\n                if (FileReaderSync) {                                                                               // 107\n                    var fr = new FileReaderSync;                                                                    // 108\n                    bb.push(fr.readAsBinaryString(data));                                                           // 109\n                } else {                                                                                            // 110\n                    // async FileReader won't work as BlobBuilder is sync                                           // 111\n                    throw new FileException(\"NOT_READABLE_ERR\");                                                    // 112\n                }                                                                                                   // 113\n            } else if (data instanceof FakeBlob) {                                                                  // 114\n                if (data.encoding === \"base64\" && atob) {                                                           // 115\n                    bb.push(atob(data.data));                                                                       // 116\n                } else if (data.encoding === \"URI\") {                                                               // 117\n                    bb.push(decodeURIComponent(data.data));                                                         // 118\n                } else if (data.encoding === \"raw\") {                                                               // 119\n                    bb.push(data.data);                                                                             // 120\n                }                                                                                                   // 121\n            } else {                                                                                                // 122\n                if (typeof data !== \"string\") {                                                                     // 123\n                    data += \"\"; // convert unsupported types to strings                                             // 124\n                }                                                                                                   // 125\n                // decode UTF-16 to binary string                                                                   // 126\n                bb.push(unescape(encodeURIComponent(data)));                                                        // 127\n            }                                                                                                       // 128\n        };                                                                                                          // 129\n        FBB_proto.getBlob = function(type) {                                                                        // 130\n            if (!arguments.length) {                                                                                // 131\n                type = null;                                                                                        // 132\n            }                                                                                                       // 133\n            return new FakeBlob(this.data.join(\"\"), type, \"raw\");                                                   // 134\n        };                                                                                                          // 135\n        FBB_proto.toString = function() {                                                                           // 136\n            return \"[object BlobBuilder]\";                                                                          // 137\n        };                                                                                                          // 138\n        FB_proto.slice = function(start, end, type) {                                                               // 139\n            var args = arguments.length;                                                                            // 140\n            if (args < 3) {                                                                                         // 141\n                type = null;                                                                                        // 142\n            }                                                                                                       // 143\n            return new FakeBlob(                                                                                    // 144\n                  this.data.slice(start, args > 1 ? end : this.data.length)                                         // 145\n                , type                                                                                              // 146\n                , this.encoding                                                                                     // 147\n            );                                                                                                      // 148\n        };                                                                                                          // 149\n        FB_proto.toString = function() {                                                                            // 150\n            return \"[object Blob]\";                                                                                 // 151\n        };                                                                                                          // 152\n        return FakeBlobBuilder;                                                                                     // 153\n    }(view));                                                                                                       // 154\n                                                                                                                    // 155\n    return function Blob(blobParts, options) {                                                                      // 156\n        var type = options ? (options.type || \"\") : \"\";                                                             // 157\n        var builder = new BlobBuilder();                                                                            // 158\n        if (blobParts) {                                                                                            // 159\n            for (var i = 0, len = blobParts.length; i < len; i++) {                                                 // 160\n                builder.append(blobParts[i]);                                                                       // 161\n            }                                                                                                       // 162\n        }                                                                                                           // 163\n        return builder.getBlob(type);                                                                               // 164\n    };                                                                                                              // 165\n}(typeof self !== \"undefined\" && self || typeof window !== \"undefined\" && window || this.content || this));         // 166\n                                                                                                                    // 167\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       // 177\n}).call(this);                                                                                                         // 178\n                                                                                                                       // 179\n                                                                                                                       // 180\n                                                                                                                       // 181\n                                                                                                                       // 182\n                                                                                                                       // 183\n                                                                                                                       // 184\n(function () {                                                                                                         // 185\n                                                                                                                       // 186\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/cfs:data-man/client/data-man-api.js                                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n/**                                                                                                                 // 1\n * @method DataMan                                                                                                  // 2\n * @public                                                                                                          // 3\n * @constructor                                                                                                     // 4\n * @param {File|Blob|ArrayBuffer|Uint8Array|String} data The data that you want to manipulate.                      // 5\n * @param {String} [type] The data content (MIME) type, if known. Required if the first argument is an ArrayBuffer, Uint8Array, or URL\n */                                                                                                                 // 7\nDataMan = function DataMan(data, type) {                                                                            // 8\n  var self = this;                                                                                                  // 9\n                                                                                                                    // 10\n  if (!data) {                                                                                                      // 11\n    throw new Error(\"DataMan constructor requires a data argument\");                                                // 12\n  }                                                                                                                 // 13\n                                                                                                                    // 14\n  // The end result of all this is that we will have one of the following set:                                      // 15\n  // - self.blob                                                                                                    // 16\n  // - self.url                                                                                                     // 17\n  // Unless we already have in-memory data, we don't load anything into memory                                      // 18\n  // and instead rely on obtaining a read stream when the time comes.                                               // 19\n  if (typeof File !== \"undefined\" && data instanceof File) {                                                        // 20\n    self.blob = data; // File inherits from Blob so this is OK                                                      // 21\n    self._type = data.type;                                                                                         // 22\n  } else if (typeof Blob !== \"undefined\" && data instanceof Blob) {                                                 // 23\n    self.blob = data;                                                                                               // 24\n    self._type = data.type;                                                                                         // 25\n  } else if (typeof ArrayBuffer !== \"undefined\" && data instanceof ArrayBuffer || EJSON.isBinary(data)) {           // 26\n    if (typeof Blob === \"undefined\") {                                                                              // 27\n      throw new Error(\"Browser must support Blobs to handle an ArrayBuffer or Uint8Array\");                         // 28\n    }                                                                                                               // 29\n    if (!type) {                                                                                                    // 30\n      throw new Error(\"DataMan constructor requires a type argument when passed an ArrayBuffer or Uint8Array\");     // 31\n    }                                                                                                               // 32\n    self.blob = new Blob([data], {type: type});                                                                     // 33\n    self._type = type;                                                                                              // 34\n  } else if (typeof data === \"string\") {                                                                            // 35\n    if (data.slice(0, 5) === \"data:\") {                                                                             // 36\n      self._type = data.slice(5, data.indexOf(';'));                                                                // 37\n      self.blob = dataURItoBlob(data, self._type);                                                                  // 38\n    } else if (data.slice(0, 5) === \"http:\" || data.slice(0, 6) === \"https:\") {                                     // 39\n      if (!type) {                                                                                                  // 40\n        throw new Error(\"DataMan constructor requires a type argument when passed a URL\");                          // 41\n      }                                                                                                             // 42\n      self.url = data;                                                                                              // 43\n      self._type = type;                                                                                            // 44\n    } else {                                                                                                        // 45\n      throw new Error(\"DataMan constructor received unrecognized data string\");                                     // 46\n    }                                                                                                               // 47\n  } else {                                                                                                          // 48\n    throw new Error(\"DataMan constructor received data that it doesn't support\");                                   // 49\n  }                                                                                                                 // 50\n};                                                                                                                  // 51\n                                                                                                                    // 52\n/**                                                                                                                 // 53\n * @method DataMan.prototype.getBlob                                                                                // 54\n * @public                                                                                                          // 55\n * @param {Function} [callback] - callback(error, blob)                                                             // 56\n * @returns {undefined|Blob}                                                                                        // 57\n *                                                                                                                  // 58\n * Passes a Blob representing this data to a callback or returns                                                    // 59\n * the Blob if no callback is provided. A callback is required                                                      // 60\n * if getting a Blob for a URL.                                                                                     // 61\n */                                                                                                                 // 62\nDataMan.prototype.getBlob = function dataManGetBlob(callback) {                                                     // 63\n  var self = this;                                                                                                  // 64\n                                                                                                                    // 65\n  if (callback) {                                                                                                   // 66\n    if (self.blob) {                                                                                                // 67\n      callback(null, self.blob);                                                                                    // 68\n    } else if (self.url) {                                                                                          // 69\n      var xhr = new XMLHttpRequest();                                                                               // 70\n      xhr.open('GET', self.url, true);                                                                              // 71\n      xhr.responseType = \"blob\";                                                                                    // 72\n      xhr.onload = function(data) {                                                                                 // 73\n        self.blob = xhr.response;                                                                                   // 74\n        callback(null, self.blob);                                                                                  // 75\n      };                                                                                                            // 76\n      xhr.onerror = function(err) {                                                                                 // 77\n        callback(err);                                                                                              // 78\n      };                                                                                                            // 79\n      xhr.send();                                                                                                   // 80\n    }                                                                                                               // 81\n  } else {                                                                                                          // 82\n    if (self.url)                                                                                                   // 83\n      throw new Error('DataMan.getBlob requires a callback when managing a URL');                                   // 84\n    return self.blob;                                                                                               // 85\n  }                                                                                                                 // 86\n};                                                                                                                  // 87\n                                                                                                                    // 88\n/**                                                                                                                 // 89\n * @method DataMan.prototype.getBinary                                                                              // 90\n * @public                                                                                                          // 91\n * @param {Number} [start] - First byte position to read.                                                           // 92\n * @param {Number} [end] - Last byte position to read.                                                              // 93\n * @param {Function} callback - callback(error, binaryData)                                                         // 94\n * @returns {undefined}                                                                                             // 95\n *                                                                                                                  // 96\n * Passes a Uint8Array representing this data to a callback.                                                        // 97\n */                                                                                                                 // 98\nDataMan.prototype.getBinary = function dataManGetBinary(start, end, callback) {                                     // 99\n  var self = this;                                                                                                  // 100\n                                                                                                                    // 101\n  if (typeof start === \"function\") {                                                                                // 102\n    callback = start;                                                                                               // 103\n  }                                                                                                                 // 104\n  callback = callback || defaultCallback;                                                                           // 105\n                                                                                                                    // 106\n  function read(blob) {                                                                                             // 107\n    if (typeof FileReader === \"undefined\") {                                                                        // 108\n      callback(new Error(\"Browser does not support FileReader\"));                                                   // 109\n      return;                                                                                                       // 110\n    }                                                                                                               // 111\n                                                                                                                    // 112\n    var reader = new FileReader();                                                                                  // 113\n    reader.onload = function(evt) {                                                                                 // 114\n      callback(null, new Uint8Array(evt.target.result));                                                            // 115\n    };                                                                                                              // 116\n    reader.onerror = function(err) {                                                                                // 117\n      callback(err);                                                                                                // 118\n    };                                                                                                              // 119\n    reader.readAsArrayBuffer(blob);                                                                                 // 120\n  }                                                                                                                 // 121\n                                                                                                                    // 122\n  self.getBlob(function (error, blob) {                                                                             // 123\n    if (error) {                                                                                                    // 124\n      callback(error);                                                                                              // 125\n    } else {                                                                                                        // 126\n      if (typeof start === \"number\" && typeof end === \"number\") {                                                   // 127\n        var size = blob.size;                                                                                       // 128\n        // Return the requested chunk of binary data                                                                // 129\n        if (start >= size) {                                                                                        // 130\n          callback(new Error(\"DataMan.getBinary: start position beyond end of data (\" + size + \")\"));               // 131\n          return;                                                                                                   // 132\n        }                                                                                                           // 133\n        end = Math.min(size, end);                                                                                  // 134\n                                                                                                                    // 135\n        var slice = blob.slice || blob.webkitSlice || blob.mozSlice;                                                // 136\n        if (typeof slice === 'undefined') {                                                                         // 137\n          callback(new Error('Browser does not support File.slice'));                                               // 138\n          return;                                                                                                   // 139\n        }                                                                                                           // 140\n                                                                                                                    // 141\n        read(slice.call(blob, start, end, self._type));                                                             // 142\n      } else {                                                                                                      // 143\n        // Return the entire binary data                                                                            // 144\n        read(blob);                                                                                                 // 145\n      }                                                                                                             // 146\n    }                                                                                                               // 147\n  });                                                                                                               // 148\n                                                                                                                    // 149\n};                                                                                                                  // 150\n                                                                                                                    // 151\n/** @method DataMan.prototype.saveAs                                                                                // 152\n * @public                                                                                                          // 153\n * @param {String} [filename]                                                                                       // 154\n * @return {undefined}                                                                                              // 155\n *                                                                                                                  // 156\n * Tells the browser to save the data like a normal downloaded file,                                                // 157\n * using the provided filename.                                                                                     // 158\n *                                                                                                                  // 159\n */                                                                                                                 // 160\nDataMan.prototype.saveAs = function dataManSaveAs(filename) {                                                       // 161\n  var self = this;                                                                                                  // 162\n                                                                                                                    // 163\n  if (typeof window === \"undefined\")                                                                                // 164\n    throw new Error(\"window must be defined to use saveLocal\");                                                     // 165\n                                                                                                                    // 166\n  if (!window.saveAs) {                                                                                             // 167\n    console.warn('DataMan.saveAs: window.saveAs not supported by this browser - add cfs-filesaver package');        // 168\n    return;                                                                                                         // 169\n  }                                                                                                                 // 170\n                                                                                                                    // 171\n  self.getBlob(function (error, blob) {                                                                             // 172\n    if (error) {                                                                                                    // 173\n      throw error;                                                                                                  // 174\n    } else {                                                                                                        // 175\n      window.saveAs(blob, filename);                                                                                // 176\n    }                                                                                                               // 177\n  });                                                                                                               // 178\n};                                                                                                                  // 179\n                                                                                                                    // 180\n/**                                                                                                                 // 181\n * @method DataMan.prototype.getDataUri                                                                             // 182\n * @public                                                                                                          // 183\n * @param {function} callback callback(err, dataUri)                                                                // 184\n */                                                                                                                 // 185\nDataMan.prototype.getDataUri = function dataManGetDataUri(callback) {                                               // 186\n  // XXX: We could consider using: URL.createObjectURL(blob);                                                       // 187\n  // This will create a reference to the blob data instead of a clone                                               // 188\n  // This is part of the File API - as the rest - Not sure how to generally                                         // 189\n  // support from IE10, FF26, Chrome 31, safari 7, opera 19, ios 6, android 4                                       // 190\n                                                                                                                    // 191\n  var self = this;                                                                                                  // 192\n                                                                                                                    // 193\n  if (typeof callback !== 'function')                                                                               // 194\n    throw new Error(\"getDataUri requires callback function\");                                                       // 195\n                                                                                                                    // 196\n  if (typeof FileReader === \"undefined\") {                                                                          // 197\n    callback(new Error(\"Browser does not support FileReader\"));                                                     // 198\n    return;                                                                                                         // 199\n  }                                                                                                                 // 200\n                                                                                                                    // 201\n  var fileReader = new FileReader();                                                                                // 202\n  fileReader.onload = function(event) {                                                                             // 203\n    var dataUri = event.target.result;                                                                              // 204\n    callback(null, dataUri);                                                                                        // 205\n  };                                                                                                                // 206\n  fileReader.onerror = function(err) {                                                                              // 207\n    callback(err);                                                                                                  // 208\n  };                                                                                                                // 209\n                                                                                                                    // 210\n  self.getBlob(function (error, blob) {                                                                             // 211\n    if (error) {                                                                                                    // 212\n      callback(error);                                                                                              // 213\n    } else {                                                                                                        // 214\n      fileReader.readAsDataURL(blob);                                                                               // 215\n    }                                                                                                               // 216\n  });                                                                                                               // 217\n};                                                                                                                  // 218\n                                                                                                                    // 219\n/**                                                                                                                 // 220\n * @method DataMan.prototype.size                                                                                   // 221\n * @public                                                                                                          // 222\n * @param {function} [callback] callback(err, size)                                                                 // 223\n *                                                                                                                  // 224\n * Passes the size of the data to the callback, if provided,                                                        // 225\n * or returns it. A callback is required to get the size of a URL on the client.                                    // 226\n */                                                                                                                 // 227\nDataMan.prototype.size = function dataManSize(callback) {                                                           // 228\n  var self = this;                                                                                                  // 229\n                                                                                                                    // 230\n  if (callback) {                                                                                                   // 231\n    if (typeof self._size === \"number\") {                                                                           // 232\n      callback(null, self._size);                                                                                   // 233\n    } else {                                                                                                        // 234\n      self.getBlob(function (error, blob) {                                                                         // 235\n        if (error) {                                                                                                // 236\n          callback(error);                                                                                          // 237\n        } else {                                                                                                    // 238\n          self._size = blob.size;                                                                                   // 239\n          callback(null, self._size);                                                                               // 240\n        }                                                                                                           // 241\n      });                                                                                                           // 242\n    }                                                                                                               // 243\n  } else {                                                                                                          // 244\n    if (self.url) {                                                                                                 // 245\n      throw new Error(\"On the client, DataMan.size requires a callback when getting size for a URL on the client\"); // 246\n    } else if (typeof self._size === \"number\") {                                                                    // 247\n      return self._size;                                                                                            // 248\n    } else {                                                                                                        // 249\n      var blob = self.getBlob();                                                                                    // 250\n      self._size = blob.size;                                                                                       // 251\n      return self._size;                                                                                            // 252\n    }                                                                                                               // 253\n  }                                                                                                                 // 254\n};                                                                                                                  // 255\n                                                                                                                    // 256\n/**                                                                                                                 // 257\n * @method DataMan.prototype.type                                                                                   // 258\n * @public                                                                                                          // 259\n *                                                                                                                  // 260\n * Returns the type of the data.                                                                                    // 261\n */                                                                                                                 // 262\nDataMan.prototype.type = function dataManType() {                                                                   // 263\n  return this._type;                                                                                                // 264\n};                                                                                                                  // 265\n                                                                                                                    // 266\n/**                                                                                                                 // 267\n * @method dataURItoBlob                                                                                            // 268\n * @private                                                                                                         // 269\n * @param {String} dataURI The data URI                                                                             // 270\n * @param {String} dataTYPE The content type                                                                        // 271\n * @returns {Blob} A new Blob instance                                                                              // 272\n *                                                                                                                  // 273\n * Converts a data URI to a Blob.                                                                                   // 274\n */                                                                                                                 // 275\nfunction dataURItoBlob(dataURI, dataTYPE) {                                                                         // 276\n  var str = atob(dataURI.split(',')[1]), array = [];                                                                // 277\n  for(var i = 0; i < str.length; i++) array.push(str.charCodeAt(i));                                                // 278\n  return new Blob([new Uint8Array(array)], {type: dataTYPE});                                                       // 279\n}                                                                                                                   // 280\n                                                                                                                    // 281\n/**                                                                                                                 // 282\n * @method defaultCallback                                                                                          // 283\n * @private                                                                                                         // 284\n * @param {Error} [err]                                                                                             // 285\n * @returns {undefined}                                                                                             // 286\n *                                                                                                                  // 287\n * Can be used as a default callback for client methods that need a callback.                                       // 288\n * Simply throws the provided error if there is one.                                                                // 289\n */                                                                                                                 // 290\nfunction defaultCallback(err) {                                                                                     // 291\n  if (err) {                                                                                                        // 292\n    // Show gentle error if Meteor error                                                                            // 293\n    if (err instanceof Meteor.Error) {                                                                              // 294\n      console.error(err.message);                                                                                   // 295\n    } else {                                                                                                        // 296\n      // Normal error, just throw error                                                                             // 297\n      throw err;                                                                                                    // 298\n    }                                                                                                               // 299\n                                                                                                                    // 300\n  }                                                                                                                 // 301\n}                                                                                                                   // 302\n                                                                                                                    // 303\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       // 497\n}).call(this);                                                                                                         // 498\n                                                                                                                       // 499\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['cfs:data-man'] = {}, {\n  DataMan: DataMan\n});\n\n})();\n","servePath":"/packages/cfs_data-man.js"}]