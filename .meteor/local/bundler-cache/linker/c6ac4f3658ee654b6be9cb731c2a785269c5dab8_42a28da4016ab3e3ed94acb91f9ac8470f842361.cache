[{"type":"js","data":"//////////////////////////////////////////////////////////////////////////\n//                                                                      //\n// This is a generated file. You can view the original                  //\n// source in your browser if your browser supports source maps.         //\n// Source maps are supported by all recent versions of Chrome, Safari,  //\n// and Firefox, and by Internet Explorer 11.                            //\n//                                                                      //\n//////////////////////////////////////////////////////////////////////////\n\n\n(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar meteorInstall = Package.modules.meteorInstall;\n\n/* Package-scope variables */\nvar Promise;\n\nvar require = meteorInstall({\"node_modules\":{\"meteor\":{\"promise\":{\"client.js\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/promise/client.js                                                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nrequire(\"meteor-promise\").makeCompatible(                                                                           // 1\n  exports.Promise = require(\"./common.js\").Promise                                                                  // 2\n);                                                                                                                  // 3\n                                                                                                                    // 4\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"common.js\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// packages/promise/common.js                                                                                       //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nvar global = this;                                                                                                  // 1\n                                                                                                                    // 2\nif (typeof global.Promise === \"function\") {                                                                         // 3\n  exports.Promise = global.Promise;                                                                                 // 4\n} else {                                                                                                            // 5\n  exports.Promise = require(\"promise/lib/es6-extensions\");                                                          // 6\n}                                                                                                                   // 7\n                                                                                                                    // 8\nexports.Promise.prototype.done = function (onFulfilled, onRejected) {                                               // 9\n  var self = this;                                                                                                  // 10\n                                                                                                                    // 11\n  if (arguments.length > 0) {                                                                                       // 12\n    self = this.then.apply(this, arguments);                                                                        // 13\n  }                                                                                                                 // 14\n                                                                                                                    // 15\n  self.then(null, function (err) {                                                                                  // 16\n    Meteor._setImmediate(function () {                                                                              // 17\n      throw err;                                                                                                    // 18\n    });                                                                                                             // 19\n  });                                                                                                               // 20\n};                                                                                                                  // 21\n                                                                                                                    // 22\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"node_modules\":{\"meteor-promise\":{\"package.json\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// ../npm/node_modules/meteor-promise/package.json                                                                  //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.name = \"meteor-promise\";                                                                                    // 1\nexports.version = \"0.8.5\";                                                                                          // 2\nexports.browser = \"promise_client.js\";                                                                              // 3\nexports.main = \"promise_server.js\";                                                                                 // 4\n                                                                                                                    // 5\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"promise_client.js\":function(require,exports){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/promise/node_modules/meteor-promise/promise_client.js                                        //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\nexports.makeCompatible = function (Promise) {                                                                       // 1\n  var es6PromiseThen = Promise.prototype.then;                                                                      // 2\n                                                                                                                    // 3\n  Promise.prototype.then = function (onResolved, onRejected) {                                                      // 4\n    if (typeof Meteor === \"object\" &&                                                                               // 5\n        typeof Meteor.bindEnvironment === \"function\") {                                                             // 6\n      return es6PromiseThen.call(                                                                                   // 7\n        this,                                                                                                       // 8\n        onResolved && Meteor.bindEnvironment(onResolved, raise),                                                    // 9\n        onRejected && Meteor.bindEnvironment(onRejected, raise)                                                     // 10\n      );                                                                                                            // 11\n    }                                                                                                               // 12\n                                                                                                                    // 13\n    return es6PromiseThen.call(this, onResolved, onRejected);                                                       // 14\n  };                                                                                                                // 15\n};                                                                                                                  // 16\n                                                                                                                    // 17\nfunction raise(exception) {                                                                                         // 18\n  throw exception;                                                                                                  // 19\n}                                                                                                                   // 20\n                                                                                                                    // 21\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}},\"promise\":{\"lib\":{\"es6-extensions.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/promise/node_modules/promise/lib/es6-extensions.js                                           //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n'use strict';                                                                                                       // 1\n                                                                                                                    // 2\n//This file contains the ES6 extensions to the core Promises/A+ API                                                 // 3\n                                                                                                                    // 4\nvar Promise = require('./core.js');                                                                                 // 5\n                                                                                                                    // 6\nmodule.exports = Promise;                                                                                           // 7\n                                                                                                                    // 8\n/* Static Functions */                                                                                              // 9\n                                                                                                                    // 10\nvar TRUE = valuePromise(true);                                                                                      // 11\nvar FALSE = valuePromise(false);                                                                                    // 12\nvar NULL = valuePromise(null);                                                                                      // 13\nvar UNDEFINED = valuePromise(undefined);                                                                            // 14\nvar ZERO = valuePromise(0);                                                                                         // 15\nvar EMPTYSTRING = valuePromise('');                                                                                 // 16\n                                                                                                                    // 17\nfunction valuePromise(value) {                                                                                      // 18\n  var p = new Promise(Promise._44);                                                                                 // 19\n  p._83 = 1;                                                                                                        // 20\n  p._18 = value;                                                                                                    // 21\n  return p;                                                                                                         // 22\n}                                                                                                                   // 23\nPromise.resolve = function (value) {                                                                                // 24\n  if (value instanceof Promise) return value;                                                                       // 25\n                                                                                                                    // 26\n  if (value === null) return NULL;                                                                                  // 27\n  if (value === undefined) return UNDEFINED;                                                                        // 28\n  if (value === true) return TRUE;                                                                                  // 29\n  if (value === false) return FALSE;                                                                                // 30\n  if (value === 0) return ZERO;                                                                                     // 31\n  if (value === '') return EMPTYSTRING;                                                                             // 32\n                                                                                                                    // 33\n  if (typeof value === 'object' || typeof value === 'function') {                                                   // 34\n    try {                                                                                                           // 35\n      var then = value.then;                                                                                        // 36\n      if (typeof then === 'function') {                                                                             // 37\n        return new Promise(then.bind(value));                                                                       // 38\n      }                                                                                                             // 39\n    } catch (ex) {                                                                                                  // 40\n      return new Promise(function (resolve, reject) {                                                               // 41\n        reject(ex);                                                                                                 // 42\n      });                                                                                                           // 43\n    }                                                                                                               // 44\n  }                                                                                                                 // 45\n  return valuePromise(value);                                                                                       // 46\n};                                                                                                                  // 47\n                                                                                                                    // 48\nPromise.all = function (arr) {                                                                                      // 49\n  var args = Array.prototype.slice.call(arr);                                                                       // 50\n                                                                                                                    // 51\n  return new Promise(function (resolve, reject) {                                                                   // 52\n    if (args.length === 0) return resolve([]);                                                                      // 53\n    var remaining = args.length;                                                                                    // 54\n    function res(i, val) {                                                                                          // 55\n      if (val && (typeof val === 'object' || typeof val === 'function')) {                                          // 56\n        if (val instanceof Promise && val.then === Promise.prototype.then) {                                        // 57\n          while (val._83 === 3) {                                                                                   // 58\n            val = val._18;                                                                                          // 59\n          }                                                                                                         // 60\n          if (val._83 === 1) return res(i, val._18);                                                                // 61\n          if (val._83 === 2) reject(val._18);                                                                       // 62\n          val.then(function (val) {                                                                                 // 63\n            res(i, val);                                                                                            // 64\n          }, reject);                                                                                               // 65\n          return;                                                                                                   // 66\n        } else {                                                                                                    // 67\n          var then = val.then;                                                                                      // 68\n          if (typeof then === 'function') {                                                                         // 69\n            var p = new Promise(then.bind(val));                                                                    // 70\n            p.then(function (val) {                                                                                 // 71\n              res(i, val);                                                                                          // 72\n            }, reject);                                                                                             // 73\n            return;                                                                                                 // 74\n          }                                                                                                         // 75\n        }                                                                                                           // 76\n      }                                                                                                             // 77\n      args[i] = val;                                                                                                // 78\n      if (--remaining === 0) {                                                                                      // 79\n        resolve(args);                                                                                              // 80\n      }                                                                                                             // 81\n    }                                                                                                               // 82\n    for (var i = 0; i < args.length; i++) {                                                                         // 83\n      res(i, args[i]);                                                                                              // 84\n    }                                                                                                               // 85\n  });                                                                                                               // 86\n};                                                                                                                  // 87\n                                                                                                                    // 88\nPromise.reject = function (value) {                                                                                 // 89\n  return new Promise(function (resolve, reject) {                                                                   // 90\n    reject(value);                                                                                                  // 91\n  });                                                                                                               // 92\n};                                                                                                                  // 93\n                                                                                                                    // 94\nPromise.race = function (values) {                                                                                  // 95\n  return new Promise(function (resolve, reject) {                                                                   // 96\n    values.forEach(function(value){                                                                                 // 97\n      Promise.resolve(value).then(resolve, reject);                                                                 // 98\n    });                                                                                                             // 99\n  });                                                                                                               // 100\n};                                                                                                                  // 101\n                                                                                                                    // 102\n/* Prototype Methods */                                                                                             // 103\n                                                                                                                    // 104\nPromise.prototype['catch'] = function (onRejected) {                                                                // 105\n  return this.then(null, onRejected);                                                                               // 106\n};                                                                                                                  // 107\n                                                                                                                    // 108\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n},\"core.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/promise/node_modules/promise/lib/core.js                                                     //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n'use strict';                                                                                                       // 1\n                                                                                                                    // 2\nvar asap = require('asap/raw');                                                                                     // 3\n                                                                                                                    // 4\nfunction noop() {}                                                                                                  // 5\n                                                                                                                    // 6\n// States:                                                                                                          // 7\n//                                                                                                                  // 8\n// 0 - pending                                                                                                      // 9\n// 1 - fulfilled with _value                                                                                        // 10\n// 2 - rejected with _value                                                                                         // 11\n// 3 - adopted the state of another promise, _value                                                                 // 12\n//                                                                                                                  // 13\n// once the state is no longer pending (0) it is immutable                                                          // 14\n                                                                                                                    // 15\n// All `_` prefixed properties will be reduced to `_{random number}`                                                // 16\n// at build time to obfuscate them and discourage their use.                                                        // 17\n// We don't use symbols or Object.defineProperty to fully hide them                                                 // 18\n// because the performance isn't good enough.                                                                       // 19\n                                                                                                                    // 20\n                                                                                                                    // 21\n// to avoid using try/catch inside critical functions, we                                                           // 22\n// extract them to here.                                                                                            // 23\nvar LAST_ERROR = null;                                                                                              // 24\nvar IS_ERROR = {};                                                                                                  // 25\nfunction getThen(obj) {                                                                                             // 26\n  try {                                                                                                             // 27\n    return obj.then;                                                                                                // 28\n  } catch (ex) {                                                                                                    // 29\n    LAST_ERROR = ex;                                                                                                // 30\n    return IS_ERROR;                                                                                                // 31\n  }                                                                                                                 // 32\n}                                                                                                                   // 33\n                                                                                                                    // 34\nfunction tryCallOne(fn, a) {                                                                                        // 35\n  try {                                                                                                             // 36\n    return fn(a);                                                                                                   // 37\n  } catch (ex) {                                                                                                    // 38\n    LAST_ERROR = ex;                                                                                                // 39\n    return IS_ERROR;                                                                                                // 40\n  }                                                                                                                 // 41\n}                                                                                                                   // 42\nfunction tryCallTwo(fn, a, b) {                                                                                     // 43\n  try {                                                                                                             // 44\n    fn(a, b);                                                                                                       // 45\n  } catch (ex) {                                                                                                    // 46\n    LAST_ERROR = ex;                                                                                                // 47\n    return IS_ERROR;                                                                                                // 48\n  }                                                                                                                 // 49\n}                                                                                                                   // 50\n                                                                                                                    // 51\nmodule.exports = Promise;                                                                                           // 52\n                                                                                                                    // 53\nfunction Promise(fn) {                                                                                              // 54\n  if (typeof this !== 'object') {                                                                                   // 55\n    throw new TypeError('Promises must be constructed via new');                                                    // 56\n  }                                                                                                                 // 57\n  if (typeof fn !== 'function') {                                                                                   // 58\n    throw new TypeError('Promise constructor\\'s argument is not a function');                                       // 59\n  }                                                                                                                 // 60\n  this._75 = 0;                                                                                                     // 61\n  this._83 = 0;                                                                                                     // 62\n  this._18 = null;                                                                                                  // 63\n  this._38 = null;                                                                                                  // 64\n  if (fn === noop) return;                                                                                          // 65\n  doResolve(fn, this);                                                                                              // 66\n}                                                                                                                   // 67\nPromise._47 = null;                                                                                                 // 68\nPromise._71 = null;                                                                                                 // 69\nPromise._44 = noop;                                                                                                 // 70\n                                                                                                                    // 71\nPromise.prototype.then = function(onFulfilled, onRejected) {                                                        // 72\n  if (this.constructor !== Promise) {                                                                               // 73\n    return safeThen(this, onFulfilled, onRejected);                                                                 // 74\n  }                                                                                                                 // 75\n  var res = new Promise(noop);                                                                                      // 76\n  handle(this, new Handler(onFulfilled, onRejected, res));                                                          // 77\n  return res;                                                                                                       // 78\n};                                                                                                                  // 79\n                                                                                                                    // 80\nfunction safeThen(self, onFulfilled, onRejected) {                                                                  // 81\n  return new self.constructor(function (resolve, reject) {                                                          // 82\n    var res = new Promise(noop);                                                                                    // 83\n    res.then(resolve, reject);                                                                                      // 84\n    handle(self, new Handler(onFulfilled, onRejected, res));                                                        // 85\n  });                                                                                                               // 86\n}                                                                                                                   // 87\nfunction handle(self, deferred) {                                                                                   // 88\n  while (self._83 === 3) {                                                                                          // 89\n    self = self._18;                                                                                                // 90\n  }                                                                                                                 // 91\n  if (Promise._47) {                                                                                                // 92\n    Promise._47(self);                                                                                              // 93\n  }                                                                                                                 // 94\n  if (self._83 === 0) {                                                                                             // 95\n    if (self._75 === 0) {                                                                                           // 96\n      self._75 = 1;                                                                                                 // 97\n      self._38 = deferred;                                                                                          // 98\n      return;                                                                                                       // 99\n    }                                                                                                               // 100\n    if (self._75 === 1) {                                                                                           // 101\n      self._75 = 2;                                                                                                 // 102\n      self._38 = [self._38, deferred];                                                                              // 103\n      return;                                                                                                       // 104\n    }                                                                                                               // 105\n    self._38.push(deferred);                                                                                        // 106\n    return;                                                                                                         // 107\n  }                                                                                                                 // 108\n  handleResolved(self, deferred);                                                                                   // 109\n}                                                                                                                   // 110\n                                                                                                                    // 111\nfunction handleResolved(self, deferred) {                                                                           // 112\n  asap(function() {                                                                                                 // 113\n    var cb = self._83 === 1 ? deferred.onFulfilled : deferred.onRejected;                                           // 114\n    if (cb === null) {                                                                                              // 115\n      if (self._83 === 1) {                                                                                         // 116\n        resolve(deferred.promise, self._18);                                                                        // 117\n      } else {                                                                                                      // 118\n        reject(deferred.promise, self._18);                                                                         // 119\n      }                                                                                                             // 120\n      return;                                                                                                       // 121\n    }                                                                                                               // 122\n    var ret = tryCallOne(cb, self._18);                                                                             // 123\n    if (ret === IS_ERROR) {                                                                                         // 124\n      reject(deferred.promise, LAST_ERROR);                                                                         // 125\n    } else {                                                                                                        // 126\n      resolve(deferred.promise, ret);                                                                               // 127\n    }                                                                                                               // 128\n  });                                                                                                               // 129\n}                                                                                                                   // 130\nfunction resolve(self, newValue) {                                                                                  // 131\n  // Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure\n  if (newValue === self) {                                                                                          // 133\n    return reject(                                                                                                  // 134\n      self,                                                                                                         // 135\n      new TypeError('A promise cannot be resolved with itself.')                                                    // 136\n    );                                                                                                              // 137\n  }                                                                                                                 // 138\n  if (                                                                                                              // 139\n    newValue &&                                                                                                     // 140\n    (typeof newValue === 'object' || typeof newValue === 'function')                                                // 141\n  ) {                                                                                                               // 142\n    var then = getThen(newValue);                                                                                   // 143\n    if (then === IS_ERROR) {                                                                                        // 144\n      return reject(self, LAST_ERROR);                                                                              // 145\n    }                                                                                                               // 146\n    if (                                                                                                            // 147\n      then === self.then &&                                                                                         // 148\n      newValue instanceof Promise                                                                                   // 149\n    ) {                                                                                                             // 150\n      self._83 = 3;                                                                                                 // 151\n      self._18 = newValue;                                                                                          // 152\n      finale(self);                                                                                                 // 153\n      return;                                                                                                       // 154\n    } else if (typeof then === 'function') {                                                                        // 155\n      doResolve(then.bind(newValue), self);                                                                         // 156\n      return;                                                                                                       // 157\n    }                                                                                                               // 158\n  }                                                                                                                 // 159\n  self._83 = 1;                                                                                                     // 160\n  self._18 = newValue;                                                                                              // 161\n  finale(self);                                                                                                     // 162\n}                                                                                                                   // 163\n                                                                                                                    // 164\nfunction reject(self, newValue) {                                                                                   // 165\n  self._83 = 2;                                                                                                     // 166\n  self._18 = newValue;                                                                                              // 167\n  if (Promise._71) {                                                                                                // 168\n    Promise._71(self, newValue);                                                                                    // 169\n  }                                                                                                                 // 170\n  finale(self);                                                                                                     // 171\n}                                                                                                                   // 172\nfunction finale(self) {                                                                                             // 173\n  if (self._75 === 1) {                                                                                             // 174\n    handle(self, self._38);                                                                                         // 175\n    self._38 = null;                                                                                                // 176\n  }                                                                                                                 // 177\n  if (self._75 === 2) {                                                                                             // 178\n    for (var i = 0; i < self._38.length; i++) {                                                                     // 179\n      handle(self, self._38[i]);                                                                                    // 180\n    }                                                                                                               // 181\n    self._38 = null;                                                                                                // 182\n  }                                                                                                                 // 183\n}                                                                                                                   // 184\n                                                                                                                    // 185\nfunction Handler(onFulfilled, onRejected, promise){                                                                 // 186\n  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null;                                        // 187\n  this.onRejected = typeof onRejected === 'function' ? onRejected : null;                                           // 188\n  this.promise = promise;                                                                                           // 189\n}                                                                                                                   // 190\n                                                                                                                    // 191\n/**                                                                                                                 // 192\n * Take a potentially misbehaving resolver function and make sure                                                   // 193\n * onFulfilled and onRejected are only called once.                                                                 // 194\n *                                                                                                                  // 195\n * Makes no guarantees about asynchrony.                                                                            // 196\n */                                                                                                                 // 197\nfunction doResolve(fn, promise) {                                                                                   // 198\n  var done = false;                                                                                                 // 199\n  var res = tryCallTwo(fn, function (value) {                                                                       // 200\n    if (done) return;                                                                                               // 201\n    done = true;                                                                                                    // 202\n    resolve(promise, value);                                                                                        // 203\n  }, function (reason) {                                                                                            // 204\n    if (done) return;                                                                                               // 205\n    done = true;                                                                                                    // 206\n    reject(promise, reason);                                                                                        // 207\n  });                                                                                                               // 208\n  if (!done && res === IS_ERROR) {                                                                                  // 209\n    done = true;                                                                                                    // 210\n    reject(promise, LAST_ERROR);                                                                                    // 211\n  }                                                                                                                 // 212\n}                                                                                                                   // 213\n                                                                                                                    // 214\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}},\"asap\":{\"raw.js\":function(require,exports,module){\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                  //\n// node_modules/meteor/promise/node_modules/asap/raw.js                                                             //\n//                                                                                                                  //\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                    //\n\"use strict\";                                                                                                       // 1\n                                                                                                                    // 2\nvar domain; // The domain module is executed on demand                                                              // 3\nvar hasSetImmediate = typeof setImmediate === \"function\";                                                           // 4\n                                                                                                                    // 5\n// Use the fastest means possible to execute a task in its own turn, with                                           // 6\n// priority over other events including network IO events in Node.js.                                               // 7\n//                                                                                                                  // 8\n// An exception thrown by a task will permanently interrupt the processing of                                       // 9\n// subsequent tasks. The higher level `asap` function ensures that if an                                            // 10\n// exception is thrown by a task, that the task queue will continue flushing as                                     // 11\n// soon as possible, but if you use `rawAsap` directly, you are responsible to                                      // 12\n// either ensure that no exceptions are thrown from your task, or to manually                                       // 13\n// call `rawAsap.requestFlush` if an exception is thrown.                                                           // 14\nmodule.exports = rawAsap;                                                                                           // 15\nfunction rawAsap(task) {                                                                                            // 16\n    if (!queue.length) {                                                                                            // 17\n        requestFlush();                                                                                             // 18\n        flushing = true;                                                                                            // 19\n    }                                                                                                               // 20\n    // Avoids a function call                                                                                       // 21\n    queue[queue.length] = task;                                                                                     // 22\n}                                                                                                                   // 23\n                                                                                                                    // 24\nvar queue = [];                                                                                                     // 25\n// Once a flush has been requested, no further calls to `requestFlush` are                                          // 26\n// necessary until the next `flush` completes.                                                                      // 27\nvar flushing = false;                                                                                               // 28\n// The position of the next task to execute in the task queue. This is                                              // 29\n// preserved between calls to `flush` so that it can be resumed if                                                  // 30\n// a task throws an exception.                                                                                      // 31\nvar index = 0;                                                                                                      // 32\n// If a task schedules additional tasks recursively, the task queue can grow                                        // 33\n// unbounded. To prevent memory excaustion, the task queue will periodically                                        // 34\n// truncate already-completed tasks.                                                                                // 35\nvar capacity = 1024;                                                                                                // 36\n                                                                                                                    // 37\n// The flush function processes all tasks that have been scheduled with                                             // 38\n// `rawAsap` unless and until one of those tasks throws an exception.                                               // 39\n// If a task throws an exception, `flush` ensures that its state will remain                                        // 40\n// consistent and will resume where it left off when called again.                                                  // 41\n// However, `flush` does not make any arrangements to be called again if an                                         // 42\n// exception is thrown.                                                                                             // 43\nfunction flush() {                                                                                                  // 44\n    while (index < queue.length) {                                                                                  // 45\n        var currentIndex = index;                                                                                   // 46\n        // Advance the index before calling the task. This ensures that we will                                     // 47\n        // begin flushing on the next task the task throws an error.                                                // 48\n        index = index + 1;                                                                                          // 49\n        queue[currentIndex].call();                                                                                 // 50\n        // Prevent leaking memory for long chains of recursive calls to `asap`.                                     // 51\n        // If we call `asap` within tasks scheduled by `asap`, the queue will                                       // 52\n        // grow, but to avoid an O(n) walk for every task we execute, we don't                                      // 53\n        // shift tasks off the queue after they have been executed.                                                 // 54\n        // Instead, we periodically shift 1024 tasks off the queue.                                                 // 55\n        if (index > capacity) {                                                                                     // 56\n            // Manually shift all values starting at the index back to the                                          // 57\n            // beginning of the queue.                                                                              // 58\n            for (var scan = 0, newLength = queue.length - index; scan < newLength; scan++) {                        // 59\n                queue[scan] = queue[scan + index];                                                                  // 60\n            }                                                                                                       // 61\n            queue.length -= index;                                                                                  // 62\n            index = 0;                                                                                              // 63\n        }                                                                                                           // 64\n    }                                                                                                               // 65\n    queue.length = 0;                                                                                               // 66\n    index = 0;                                                                                                      // 67\n    flushing = false;                                                                                               // 68\n}                                                                                                                   // 69\n                                                                                                                    // 70\nrawAsap.requestFlush = requestFlush;                                                                                // 71\nfunction requestFlush() {                                                                                           // 72\n    // Ensure flushing is not bound to any domain.                                                                  // 73\n    // It is not sufficient to exit the domain, because domains exist on a stack.                                   // 74\n    // To execute code outside of any domain, the following dance is necessary.                                     // 75\n    var parentDomain = process.domain;                                                                              // 76\n    if (parentDomain) {                                                                                             // 77\n        if (!domain) {                                                                                              // 78\n            // Lazy execute the domain module.                                                                      // 79\n            // Only employed if the user elects to use domains.                                                     // 80\n            domain = require(\"domain\");                                                                             // 81\n        }                                                                                                           // 82\n        domain.active = process.domain = null;                                                                      // 83\n    }                                                                                                               // 84\n                                                                                                                    // 85\n    // `setImmediate` is slower that `process.nextTick`, but `process.nextTick`                                     // 86\n    // cannot handle recursion.                                                                                     // 87\n    // `requestFlush` will only be called recursively from `asap.js`, to resume                                     // 88\n    // flushing after an error is thrown into a domain.                                                             // 89\n    // Conveniently, `setImmediate` was introduced in the same version                                              // 90\n    // `process.nextTick` started throwing recursion errors.                                                        // 91\n    if (flushing && hasSetImmediate) {                                                                              // 92\n        setImmediate(flush);                                                                                        // 93\n    } else {                                                                                                        // 94\n        process.nextTick(flush);                                                                                    // 95\n    }                                                                                                               // 96\n                                                                                                                    // 97\n    if (parentDomain) {                                                                                             // 98\n        domain.active = process.domain = parentDomain;                                                              // 99\n    }                                                                                                               // 100\n}                                                                                                                   // 101\n                                                                                                                    // 102\n//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}}}}}}},{\n  \"extensions\": [\n    \".js\",\n    \".json\"\n  ]\n});\nvar exports = require(\"./node_modules/meteor/promise/client.js\");\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package.promise = exports, {\n  Promise: Promise\n});\n\n})();\n","servePath":"/packages/promise.js"}]