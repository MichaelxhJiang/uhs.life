[{"type":"js","data":"(function () {\n\n/* Imports */\nvar Meteor = Package.meteor.Meteor;\nvar global = Package.meteor.global;\nvar meteorEnv = Package.meteor.meteorEnv;\nvar EJSON = Package.ejson.EJSON;\n\n/* Package-scope variables */\nvar DataMan;\n\n(function(){\n\n///////////////////////////////////////////////////////////////////////\n//                                                                   //\n// packages/cfs_data-man/packages/cfs_data-man.js                    //\n//                                                                   //\n///////////////////////////////////////////////////////////////////////\n                                                                     //\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cfs:data-man/server/data-man-api.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global DataMan:true, Buffer */                                                                                      // 1\n                                                                                                                       // 2\nvar fs = Npm.require(\"fs\");                                                                                            // 3\nvar Readable = Npm.require('stream').Readable;                                                                         // 4\n                                                                                                                       // 5\n/**                                                                                                                    // 6\n * @method DataMan                                                                                                     // 7\n * @public                                                                                                             // 8\n * @constructor                                                                                                        // 9\n * @param {Buffer|ArrayBuffer|Uint8Array|String} data The data that you want to manipulate.                            // 10\n * @param {String} [type] The data content (MIME) type, if known. Required if the first argument is a Buffer, ArrayBuffer, Uint8Array, or URL\n * @param {Object} [options] Currently used only to pass options for the GET request when `data` is a URL.             // 12\n */                                                                                                                    // 13\nDataMan = function DataMan(data, type, options) {                                                                      // 14\n  var self = this, buffer;                                                                                             // 15\n                                                                                                                       // 16\n  if (!data) {                                                                                                         // 17\n    throw new Error(\"DataMan constructor requires a data argument\");                                                   // 18\n  }                                                                                                                    // 19\n                                                                                                                       // 20\n  // The end result of all this is that we will have this.source set to a correct                                      // 21\n  // data type handler. We are simply detecting what the data arg is.                                                  // 22\n  //                                                                                                                   // 23\n  // Unless we already have in-memory data, we don't load anything into memory                                         // 24\n  // and instead rely on obtaining a read stream when the time comes.                                                  // 25\n  if (typeof Buffer !== \"undefined\" && data instanceof Buffer) {                                                       // 26\n    if (!type) {                                                                                                       // 27\n      throw new Error(\"DataMan constructor requires a type argument when passed a Buffer\");                            // 28\n    }                                                                                                                  // 29\n    self.source = new DataMan.Buffer(data, type);                                                                      // 30\n  } else if (typeof ArrayBuffer !== \"undefined\" && data instanceof ArrayBuffer) {                                      // 31\n    if (typeof Buffer === \"undefined\") {                                                                               // 32\n      throw new Error(\"Buffer support required to handle an ArrayBuffer\");                                             // 33\n    }                                                                                                                  // 34\n    if (!type) {                                                                                                       // 35\n      throw new Error(\"DataMan constructor requires a type argument when passed an ArrayBuffer\");                      // 36\n    }                                                                                                                  // 37\n    buffer = new Buffer(new Uint8Array(data));                                                                         // 38\n    self.source = new DataMan.Buffer(buffer, type);                                                                    // 39\n  } else if (EJSON.isBinary(data)) {                                                                                   // 40\n    if (typeof Buffer === \"undefined\") {                                                                               // 41\n      throw new Error(\"Buffer support required to handle an ArrayBuffer\");                                             // 42\n    }                                                                                                                  // 43\n    if (!type) {                                                                                                       // 44\n      throw new Error(\"DataMan constructor requires a type argument when passed a Uint8Array\");                        // 45\n    }                                                                                                                  // 46\n    buffer = new Buffer(data);                                                                                         // 47\n    self.source = new DataMan.Buffer(buffer, type);                                                                    // 48\n  } else if (typeof Readable !== \"undefined\" && data instanceof Readable) {                                            // 49\n    if (!type) {                                                                                                       // 50\n      throw new Error(\"DataMan constructor requires a type argument when passed a stream.Readable\");                   // 51\n    }                                                                                                                  // 52\n    self.source = new DataMan.ReadStream(data, type);                                                                  // 53\n  } else if (typeof data === \"string\") {                                                                               // 54\n    if (data.slice(0, 5) === \"data:\") {                                                                                // 55\n      self.source = new DataMan.DataURI(data);                                                                         // 56\n    } else if (data.slice(0, 5) === \"http:\" || data.slice(0, 6) === \"https:\") {                                        // 57\n      if (!type) {                                                                                                     // 58\n        throw new Error(\"DataMan constructor requires a type argument when passed a URL\");                             // 59\n      }                                                                                                                // 60\n      self.source = new DataMan.URL(data, type, options);                                                              // 61\n    } else {                                                                                                           // 62\n      // assume it's a filepath                                                                                        // 63\n      self.source = new DataMan.FilePath(data, type);                                                                  // 64\n    }                                                                                                                  // 65\n  } else {                                                                                                             // 66\n    throw new Error(\"DataMan constructor received data that it doesn't support\");                                      // 67\n  }                                                                                                                    // 68\n};                                                                                                                     // 69\n                                                                                                                       // 70\n/**                                                                                                                    // 71\n * @method DataMan.prototype.getBuffer                                                                                 // 72\n * @public                                                                                                             // 73\n * @param {function} [callback] callback(err, buffer)                                                                  // 74\n * @returns {Buffer|undefined}                                                                                         // 75\n *                                                                                                                     // 76\n * Returns a Buffer representing this data, or passes the Buffer to a callback.                                        // 77\n */                                                                                                                    // 78\nDataMan.prototype.getBuffer = function dataManGetBuffer(callback) {                                                    // 79\n  var self = this;                                                                                                     // 80\n  return callback ? self.source.getBuffer(callback) : Meteor.wrapAsync(bind(self.source.getBuffer, self.source))();    // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\nfunction _saveToFile(readStream, filePath, callback) {                                                                 // 84\n  var writeStream = fs.createWriteStream(filePath);                                                                    // 85\n  writeStream.on('close', Meteor.bindEnvironment(function () {                                                         // 86\n    callback();                                                                                                        // 87\n  }, function (error) { callback(error); }));                                                                          // 88\n  writeStream.on('error', Meteor.bindEnvironment(function (error) {                                                    // 89\n    callback(error);                                                                                                   // 90\n  }, function (error) { callback(error); }));                                                                          // 91\n  readStream.pipe(writeStream);                                                                                        // 92\n}                                                                                                                      // 93\n                                                                                                                       // 94\n/**                                                                                                                    // 95\n * @method DataMan.prototype.saveToFile                                                                                // 96\n * @public                                                                                                             // 97\n * @param {String} filePath                                                                                            // 98\n * @param {Function} callback                                                                                          // 99\n * @returns {undefined}                                                                                                // 100\n *                                                                                                                     // 101\n * Saves this data to a filepath on the local filesystem.                                                              // 102\n */                                                                                                                    // 103\nDataMan.prototype.saveToFile = function dataManSaveToFile(filePath, callback) {                                        // 104\n  var readStream = this.createReadStream();                                                                            // 105\n  return callback ? _saveToFile(readStream, filePath, callback) : Meteor.wrapAsync(_saveToFile)(readStream, filePath); // 106\n};                                                                                                                     // 107\n                                                                                                                       // 108\n/**                                                                                                                    // 109\n * @method DataMan.prototype.getDataUri                                                                                // 110\n * @public                                                                                                             // 111\n * @param {function} [callback] callback(err, dataUri)                                                                 // 112\n *                                                                                                                     // 113\n * If no callback, returns the data URI.                                                                               // 114\n */                                                                                                                    // 115\nDataMan.prototype.getDataUri = function dataManGetDataUri(callback) {                                                  // 116\n  var self = this;                                                                                                     // 117\n  return callback ? self.source.getDataUri(callback) : Meteor.wrapAsync(bind(self.source.getDataUri, self.source))();  // 118\n};                                                                                                                     // 119\n                                                                                                                       // 120\n/**                                                                                                                    // 121\n * @method DataMan.prototype.createReadStream                                                                          // 122\n * @public                                                                                                             // 123\n *                                                                                                                     // 124\n * Returns a read stream for the data.                                                                                 // 125\n */                                                                                                                    // 126\nDataMan.prototype.createReadStream = function dataManCreateReadStream() {                                              // 127\n  return this.source.createReadStream();                                                                               // 128\n};                                                                                                                     // 129\n                                                                                                                       // 130\n/**                                                                                                                    // 131\n * @method DataMan.prototype.size                                                                                      // 132\n * @public                                                                                                             // 133\n * @param {function} [callback] callback(err, size)                                                                    // 134\n *                                                                                                                     // 135\n * If no callback, returns the size in bytes of the data.                                                              // 136\n */                                                                                                                    // 137\nDataMan.prototype.size = function dataManSize(callback) {                                                              // 138\n  var self = this;                                                                                                     // 139\n  return callback ? self.source.size(callback) : Meteor.wrapAsync(bind(self.source.size, self.source))();              // 140\n};                                                                                                                     // 141\n                                                                                                                       // 142\n/**                                                                                                                    // 143\n * @method DataMan.prototype.type                                                                                      // 144\n * @public                                                                                                             // 145\n *                                                                                                                     // 146\n * Returns the type of the data.                                                                                       // 147\n */                                                                                                                    // 148\nDataMan.prototype.type = function dataManType() {                                                                      // 149\n  return this.source.type();                                                                                           // 150\n};                                                                                                                     // 151\n                                                                                                                       // 152\n/*                                                                                                                     // 153\n * \"bind\" shim; from underscorejs, but we avoid a dependency                                                           // 154\n */                                                                                                                    // 155\nvar slice = Array.prototype.slice;                                                                                     // 156\nvar nativeBind = Function.prototype.bind;                                                                              // 157\nvar ctor = function(){};                                                                                               // 158\nfunction isFunction(obj) {                                                                                             // 159\n  return Object.prototype.toString.call(obj) == '[object Function]';                                                   // 160\n}                                                                                                                      // 161\nfunction bind(func, context) {                                                                                         // 162\n  var args, bound;                                                                                                     // 163\n  if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));                 // 164\n  if (!isFunction(func)) throw new TypeError;                                                                          // 165\n  args = slice.call(arguments, 2);                                                                                     // 166\n  return bound = function() {                                                                                          // 167\n    if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));                      // 168\n    ctor.prototype = func.prototype;                                                                                   // 169\n    var self = new ctor;                                                                                               // 170\n    ctor.prototype = null;                                                                                             // 171\n    var result = func.apply(self, args.concat(slice.call(arguments)));                                                 // 172\n    if (Object(result) === result) return result;                                                                      // 173\n    return self;                                                                                                       // 174\n  };                                                                                                                   // 175\n}                                                                                                                      // 176\n                                                                                                                       // 177\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cfs:data-man/server/data-man-buffer.js                                                                     //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar bufferStreamReader = Npm.require('buffer-stream-reader');                                                          // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * @method DataMan.Buffer                                                                                              // 4\n * @public                                                                                                             // 5\n * @constructor                                                                                                        // 6\n * @param {Buffer} buffer                                                                                              // 7\n * @param {String} type The data content (MIME) type.                                                                  // 8\n */                                                                                                                    // 9\nDataMan.Buffer = function DataManBuffer(buffer, type) {                                                                // 10\n  var self = this;                                                                                                     // 11\n  self.buffer = buffer;                                                                                                // 12\n  self._type = type;                                                                                                   // 13\n};                                                                                                                     // 14\n                                                                                                                       // 15\n/**                                                                                                                    // 16\n * @method DataMan.Buffer.prototype.getBuffer                                                                          // 17\n * @private                                                                                                            // 18\n * @param {function} callback callback(err, buffer)                                                                    // 19\n * @returns {Buffer|undefined}                                                                                         // 20\n *                                                                                                                     // 21\n * Passes a Buffer representing the data to a callback.                                                                // 22\n */                                                                                                                    // 23\nDataMan.Buffer.prototype.getBuffer = function dataManBufferGetBuffer(callback) {                                       // 24\n  callback(null, this.buffer);                                                                                         // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * @method DataMan.Buffer.prototype.getDataUri                                                                         // 29\n * @private                                                                                                            // 30\n * @param {function} callback callback(err, dataUri)                                                                   // 31\n *                                                                                                                     // 32\n * Passes a data URI representing the data in the buffer to a callback.                                                // 33\n */                                                                                                                    // 34\nDataMan.Buffer.prototype.getDataUri = function dataManBufferGetDataUri(callback) {                                     // 35\n  var self = this;                                                                                                     // 36\n  if (!self._type) {                                                                                                   // 37\n    callback(new Error(\"DataMan.getDataUri couldn't get a contentType\"));                                              // 38\n  } else {                                                                                                             // 39\n    var dataUri = \"data:\" + self._type + \";base64,\" + self.buffer.toString(\"base64\");                                  // 40\n    callback(null, dataUri);                                                                                           // 41\n  }                                                                                                                    // 42\n};                                                                                                                     // 43\n                                                                                                                       // 44\n/**                                                                                                                    // 45\n * @method DataMan.Buffer.prototype.createReadStream                                                                   // 46\n * @private                                                                                                            // 47\n *                                                                                                                     // 48\n * Returns a read stream for the data.                                                                                 // 49\n */                                                                                                                    // 50\nDataMan.Buffer.prototype.createReadStream = function dataManBufferCreateReadStream() {                                 // 51\n  return new bufferStreamReader(this.buffer);                                                                          // 52\n};                                                                                                                     // 53\n                                                                                                                       // 54\n/**                                                                                                                    // 55\n * @method DataMan.Buffer.prototype.size                                                                               // 56\n * @param {function} callback callback(err, size)                                                                      // 57\n * @private                                                                                                            // 58\n *                                                                                                                     // 59\n * Passes the size in bytes of the data in the buffer to a callback.                                                   // 60\n */                                                                                                                    // 61\nDataMan.Buffer.prototype.size = function dataManBufferSize(callback) {                                                 // 62\n  var self = this;                                                                                                     // 63\n                                                                                                                       // 64\n  if (typeof self._size === \"number\") {                                                                                // 65\n    callback(null, self._size);                                                                                        // 66\n    return;                                                                                                            // 67\n  }                                                                                                                    // 68\n                                                                                                                       // 69\n  self._size = self.buffer.length;                                                                                     // 70\n  callback(null, self._size);                                                                                          // 71\n};                                                                                                                     // 72\n                                                                                                                       // 73\n/**                                                                                                                    // 74\n * @method DataMan.Buffer.prototype.type                                                                               // 75\n * @private                                                                                                            // 76\n *                                                                                                                     // 77\n * Returns the type of the data.                                                                                       // 78\n */                                                                                                                    // 79\nDataMan.Buffer.prototype.type = function dataManBufferType() {                                                         // 80\n  return this._type;                                                                                                   // 81\n};                                                                                                                     // 82\n                                                                                                                       // 83\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cfs:data-man/server/data-man-datauri.js                                                                    //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/**                                                                                                                    // 1\n * @method DataMan.DataURI                                                                                             // 2\n * @public                                                                                                             // 3\n * @constructor                                                                                                        // 4\n * @param {String} dataUri                                                                                             // 5\n */                                                                                                                    // 6\nDataMan.DataURI = function DataManDataURI(dataUri) {                                                                   // 7\n  var self = this;                                                                                                     // 8\n  var pieces = dataUri.match(/^data:(.*);base64,(.*)$/);                                                               // 9\n  var buffer = new Buffer(pieces[2], 'base64');                                                                        // 10\n  return new DataMan.Buffer(buffer, pieces[1]);                                                                        // 11\n};                                                                                                                     // 12\n                                                                                                                       // 13\nDataMan.DataURI.prototype = DataMan.Buffer.prototype;                                                                  // 14\n                                                                                                                       // 15\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cfs:data-man/server/data-man-filepath.js                                                                   //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar mime = Npm.require('mime');                                                                                        // 1\nvar fs = Npm.require(\"fs\");                                                                                            // 2\n                                                                                                                       // 3\n/**                                                                                                                    // 4\n * @method DataMan.FilePath                                                                                            // 5\n * @public                                                                                                             // 6\n * @constructor                                                                                                        // 7\n * @param {String} filepath                                                                                            // 8\n * @param {String} [type] The data content (MIME) type. Will lookup from file if not passed.                           // 9\n */                                                                                                                    // 10\nDataMan.FilePath = function DataManFilePath(filepath, type) {                                                          // 11\n  var self = this;                                                                                                     // 12\n  self.filepath = filepath;                                                                                            // 13\n  self._type = type || mime.lookup(filepath);                                                                          // 14\n};                                                                                                                     // 15\n                                                                                                                       // 16\n/**                                                                                                                    // 17\n * @method DataMan.FilePath.prototype.getBuffer                                                                        // 18\n * @private                                                                                                            // 19\n * @param {function} callback callback(err, buffer)                                                                    // 20\n * @returns {Buffer|undefined}                                                                                         // 21\n *                                                                                                                     // 22\n * Passes a Buffer representing the data to a callback.                                                                // 23\n */                                                                                                                    // 24\nDataMan.FilePath.prototype.getBuffer = function dataManFilePathGetBuffer(callback) {                                   // 25\n  var self = this;                                                                                                     // 26\n                                                                                                                       // 27\n  // Call node readFile                                                                                                // 28\n  fs.readFile(self.filepath, Meteor.bindEnvironment(function(err, buffer) {                                            // 29\n    callback(err, buffer);                                                                                             // 30\n  }, function(err) {                                                                                                   // 31\n    callback(err);                                                                                                     // 32\n  }));                                                                                                                 // 33\n};                                                                                                                     // 34\n                                                                                                                       // 35\n/**                                                                                                                    // 36\n * @method DataMan.FilePath.prototype.getDataUri                                                                       // 37\n * @private                                                                                                            // 38\n * @param {function} callback callback(err, dataUri)                                                                   // 39\n *                                                                                                                     // 40\n * Passes a data URI representing the data to a callback.                                                              // 41\n */                                                                                                                    // 42\nDataMan.FilePath.prototype.getDataUri = function dataManFilePathGetDataUri(callback) {                                 // 43\n  var self = this;                                                                                                     // 44\n                                                                                                                       // 45\n  self.getBuffer(function (error, buffer) {                                                                            // 46\n    if (error) {                                                                                                       // 47\n      callback(error);                                                                                                 // 48\n    } else {                                                                                                           // 49\n      if (!self._type) {                                                                                               // 50\n        callback(new Error(\"DataMan.getDataUri couldn't get a contentType\"));                                          // 51\n      } else {                                                                                                         // 52\n        var dataUri = \"data:\" + self._type + \";base64,\" + buffer.toString(\"base64\");                                   // 53\n        buffer = null;                                                                                                 // 54\n        callback(null, dataUri);                                                                                       // 55\n      }                                                                                                                // 56\n    }                                                                                                                  // 57\n  });                                                                                                                  // 58\n};                                                                                                                     // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * @method DataMan.FilePath.prototype.createReadStream                                                                 // 62\n * @private                                                                                                            // 63\n *                                                                                                                     // 64\n * Returns a read stream for the data.                                                                                 // 65\n */                                                                                                                    // 66\nDataMan.FilePath.prototype.createReadStream = function dataManFilePathCreateReadStream() {                             // 67\n  // Stream from filesystem                                                                                            // 68\n  return fs.createReadStream(this.filepath);                                                                           // 69\n};                                                                                                                     // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * @method DataMan.FilePath.prototype.size                                                                             // 73\n * @param {function} callback callback(err, size)                                                                      // 74\n * @private                                                                                                            // 75\n *                                                                                                                     // 76\n * Passes the size in bytes of the data to a callback.                                                                 // 77\n */                                                                                                                    // 78\nDataMan.FilePath.prototype.size = function dataManFilePathSize(callback) {                                             // 79\n  var self = this;                                                                                                     // 80\n                                                                                                                       // 81\n  if (typeof self._size === \"number\") {                                                                                // 82\n    callback(null, self._size);                                                                                        // 83\n    return;                                                                                                            // 84\n  }                                                                                                                    // 85\n                                                                                                                       // 86\n  // We can get the size without buffering                                                                             // 87\n  fs.stat(self.filepath, Meteor.bindEnvironment(function (error, stats) {                                              // 88\n    if (stats && typeof stats.size === \"number\") {                                                                     // 89\n      self._size = stats.size;                                                                                         // 90\n      callback(null, self._size);                                                                                      // 91\n    } else {                                                                                                           // 92\n      callback(error);                                                                                                 // 93\n    }                                                                                                                  // 94\n  }, function (error) {                                                                                                // 95\n    callback(error);                                                                                                   // 96\n  }));                                                                                                                 // 97\n};                                                                                                                     // 98\n                                                                                                                       // 99\n/**                                                                                                                    // 100\n * @method DataMan.FilePath.prototype.type                                                                             // 101\n * @private                                                                                                            // 102\n *                                                                                                                     // 103\n * Returns the type of the data.                                                                                       // 104\n */                                                                                                                    // 105\nDataMan.FilePath.prototype.type = function dataManFilePathType() {                                                     // 106\n  return this._type;                                                                                                   // 107\n};                                                                                                                     // 108\n                                                                                                                       // 109\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cfs:data-man/server/data-man-url.js                                                                        //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\nvar request = Npm.require(\"request\");                                                                                  // 1\n                                                                                                                       // 2\n/**                                                                                                                    // 3\n * @method DataMan.URL                                                                                                 // 4\n * @public                                                                                                             // 5\n * @constructor                                                                                                        // 6\n * @param {String} url                                                                                                 // 7\n * @param {String} type The data content (MIME) type.                                                                  // 8\n */                                                                                                                    // 9\nDataMan.URL = function DataManURL(url, type, options) {                                                                // 10\n  var self = this;                                                                                                     // 11\n  options = options || {};                                                                                             // 12\n                                                                                                                       // 13\n  self.url = url;                                                                                                      // 14\n  self._type = type;                                                                                                   // 15\n                                                                                                                       // 16\n  // This is some code borrowed from the http package. Hopefully                                                       // 17\n  // we can eventually use HTTP pkg directly instead of 'request'                                                      // 18\n  // once it supports streams and buffers and such. (`request` takes                                                   // 19\n  // and `auth` option, too, but not of the same form as `HTTP`.)                                                      // 20\n  if (options.auth) {                                                                                                  // 21\n    if (options.auth.indexOf(':') < 0)                                                                                 // 22\n      throw new Error('auth option should be of the form \"username:password\"');                                        // 23\n    options.headers = options.headers || {};                                                                           // 24\n    options.headers['Authorization'] = \"Basic \"+                                                                       // 25\n      (new Buffer(options.auth, \"ascii\")).toString(\"base64\");                                                          // 26\n    delete options.auth;                                                                                               // 27\n  }                                                                                                                    // 28\n                                                                                                                       // 29\n  self.urlOpts = options;                                                                                              // 30\n};                                                                                                                     // 31\n                                                                                                                       // 32\n/**                                                                                                                    // 33\n * @method DataMan.URL.prototype.getBuffer                                                                             // 34\n * @private                                                                                                            // 35\n * @param {function} callback callback(err, buffer)                                                                    // 36\n * @returns {Buffer|undefined}                                                                                         // 37\n *                                                                                                                     // 38\n * Passes a Buffer representing the data at the URL to a callback.                                                     // 39\n */                                                                                                                    // 40\nDataMan.URL.prototype.getBuffer = function dataManUrlGetBuffer(callback) {                                             // 41\n  var self = this;                                                                                                     // 42\n                                                                                                                       // 43\n  request(_.extend({                                                                                                   // 44\n    url: self.url,                                                                                                     // 45\n    method: \"GET\",                                                                                                     // 46\n    encoding: null,                                                                                                    // 47\n    jar: false                                                                                                         // 48\n  }, self.urlOpts), Meteor.bindEnvironment(function(err, res, body) {                                                  // 49\n    if (err) {                                                                                                         // 50\n      callback(err);                                                                                                   // 51\n    } else {                                                                                                           // 52\n      self._type = res.headers['content-type'];                                                                        // 53\n      callback(null, body);                                                                                            // 54\n    }                                                                                                                  // 55\n  }, function(err) {                                                                                                   // 56\n    callback(err);                                                                                                     // 57\n  }));                                                                                                                 // 58\n};                                                                                                                     // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * @method DataMan.URL.prototype.getDataUri                                                                            // 62\n * @private                                                                                                            // 63\n * @param {function} callback callback(err, dataUri)                                                                   // 64\n *                                                                                                                     // 65\n * Passes a data URI representing the data at the URL to a callback.                                                   // 66\n */                                                                                                                    // 67\nDataMan.URL.prototype.getDataUri = function dataManUrlGetDataUri(callback) {                                           // 68\n  var self = this;                                                                                                     // 69\n                                                                                                                       // 70\n  self.getBuffer(function (error, buffer) {                                                                            // 71\n    if (error) {                                                                                                       // 72\n      callback(error);                                                                                                 // 73\n    } else {                                                                                                           // 74\n      if (!self._type) {                                                                                               // 75\n        callback(new Error(\"DataMan.getDataUri couldn't get a contentType\"));                                          // 76\n      } else {                                                                                                         // 77\n        var dataUri = \"data:\" + self._type + \";base64,\" + buffer.toString(\"base64\");                                   // 78\n        callback(null, dataUri);                                                                                       // 79\n      }                                                                                                                // 80\n    }                                                                                                                  // 81\n  });                                                                                                                  // 82\n};                                                                                                                     // 83\n                                                                                                                       // 84\n/**                                                                                                                    // 85\n * @method DataMan.URL.prototype.createReadStream                                                                      // 86\n * @private                                                                                                            // 87\n *                                                                                                                     // 88\n * Returns a read stream for the data.                                                                                 // 89\n */                                                                                                                    // 90\nDataMan.URL.prototype.createReadStream = function dataManUrlCreateReadStream() {                                       // 91\n  var self = this;                                                                                                     // 92\n  // Stream from URL                                                                                                   // 93\n  return request(_.extend({                                                                                            // 94\n    url: self.url,                                                                                                     // 95\n    method: \"GET\"                                                                                                      // 96\n  }, self.urlOpts));                                                                                                   // 97\n};                                                                                                                     // 98\n                                                                                                                       // 99\n/**                                                                                                                    // 100\n * @method DataMan.URL.prototype.size                                                                                  // 101\n * @param {function} callback callback(err, size)                                                                      // 102\n * @private                                                                                                            // 103\n *                                                                                                                     // 104\n * Returns the size in bytes of the data at the URL.                                                                   // 105\n */                                                                                                                    // 106\nDataMan.URL.prototype.size = function dataManUrlSize(callback) {                                                       // 107\n  var self = this;                                                                                                     // 108\n                                                                                                                       // 109\n  if (typeof self._size === \"number\") {                                                                                // 110\n    callback(null, self._size);                                                                                        // 111\n    return;                                                                                                            // 112\n  }                                                                                                                    // 113\n                                                                                                                       // 114\n  self.getBuffer(function (error, buffer) {                                                                            // 115\n    if (error) {                                                                                                       // 116\n      callback(error);                                                                                                 // 117\n    } else {                                                                                                           // 118\n      self._size = buffer.length;                                                                                      // 119\n      callback(null, self._size);                                                                                      // 120\n    }                                                                                                                  // 121\n  });                                                                                                                  // 122\n};                                                                                                                     // 123\n                                                                                                                       // 124\n/**                                                                                                                    // 125\n * @method DataMan.URL.prototype.type                                                                                  // 126\n * @private                                                                                                            // 127\n *                                                                                                                     // 128\n * Returns the type of the data.                                                                                       // 129\n */                                                                                                                    // 130\nDataMan.URL.prototype.type = function dataManUrlType() {                                                               // 131\n  return this._type;                                                                                                   // 132\n};                                                                                                                     // 133\n                                                                                                                       // 134\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n\n\n\n\n(function () {\n\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n//                                                                                                                     //\n// packages/cfs:data-man/server/data-man-readstream.js                                                                 //\n//                                                                                                                     //\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n                                                                                                                       //\n/* global DataMan */                                                                                                   // 1\n                                                                                                                       // 2\nvar PassThrough = Npm.require('stream').PassThrough;                                                                   // 3\n                                                                                                                       // 4\n/**                                                                                                                    // 5\n * @method DataMan.ReadStream                                                                                          // 6\n * @public                                                                                                             // 7\n * @constructor                                                                                                        // 8\n * @param {ReadStream} stream                                                                                          // 9\n * @param {String} type The data content (MIME) type.                                                                  // 10\n */                                                                                                                    // 11\nDataMan.ReadStream = function DataManBuffer(stream, type) {                                                            // 12\n  var self = this;                                                                                                     // 13\n                                                                                                                       // 14\n  // Create a bufferable / paused new stream...                                                                        // 15\n  var pt = new PassThrough();                                                                                          // 16\n                                                                                                                       // 17\n  // Pipe provided read stream into pass-through stream                                                                // 18\n  stream.pipe(pt);                                                                                                     // 19\n                                                                                                                       // 20\n  // Set pass-through stream reference                                                                                 // 21\n  self.stream = pt;                                                                                                    // 22\n                                                                                                                       // 23\n  // Set type as provided                                                                                              // 24\n  self._type = type;                                                                                                   // 25\n};                                                                                                                     // 26\n                                                                                                                       // 27\n/**                                                                                                                    // 28\n * @method DataMan.ReadStream.prototype.getBuffer                                                                      // 29\n * @private                                                                                                            // 30\n * @param {function} callback callback(err, buffer)                                                                    // 31\n * @returns {undefined}                                                                                                // 32\n *                                                                                                                     // 33\n * Passes a Buffer representing the data to a callback.                                                                // 34\n */                                                                                                                    // 35\nDataMan.ReadStream.prototype.getBuffer = function dataManReadStreamGetBuffer(/*callback*/) {                           // 36\n  // TODO implement as passthrough stream?                                                                             // 37\n};                                                                                                                     // 38\n                                                                                                                       // 39\n/**                                                                                                                    // 40\n * @method DataMan.ReadStream.prototype.getDataUri                                                                     // 41\n * @private                                                                                                            // 42\n * @param {function} callback callback(err, dataUri)                                                                   // 43\n *                                                                                                                     // 44\n * Passes a data URI representing the data in the stream to a callback.                                                // 45\n */                                                                                                                    // 46\nDataMan.ReadStream.prototype.getDataUri = function dataManReadStreamGetDataUri(/*callback*/) {                         // 47\n  // TODO implement as passthrough stream?                                                                             // 48\n};                                                                                                                     // 49\n                                                                                                                       // 50\n/**                                                                                                                    // 51\n * @method DataMan.ReadStream.prototype.createReadStream                                                               // 52\n * @private                                                                                                            // 53\n *                                                                                                                     // 54\n * Returns a read stream for the data.                                                                                 // 55\n */                                                                                                                    // 56\nDataMan.ReadStream.prototype.createReadStream = function dataManReadStreamCreateReadStream() {                         // 57\n  return this.stream;                                                                                                  // 58\n};                                                                                                                     // 59\n                                                                                                                       // 60\n/**                                                                                                                    // 61\n * @method DataMan.ReadStream.prototype.size                                                                           // 62\n * @param {function} callback callback(err, size)                                                                      // 63\n * @private                                                                                                            // 64\n *                                                                                                                     // 65\n * Passes the size in bytes of the data in the stream to a callback.                                                   // 66\n */                                                                                                                    // 67\nDataMan.ReadStream.prototype.size = function dataManReadStreamSize(callback) {                                         // 68\n  callback(0); // will determine from stream later                                                                     // 69\n};                                                                                                                     // 70\n                                                                                                                       // 71\n/**                                                                                                                    // 72\n * @method DataMan.ReadStream.prototype.type                                                                           // 73\n * @private                                                                                                            // 74\n *                                                                                                                     // 75\n * Returns the type of the data.                                                                                       // 76\n */                                                                                                                    // 77\nDataMan.ReadStream.prototype.type = function dataManReadStreamType() {                                                 // 78\n  return this._type;                                                                                                   // 79\n};                                                                                                                     // 80\n                                                                                                                       // 81\n/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n///////////////////////////////////////////////////////////////////////\n\n}).call(this);\n\n\n/* Exports */\nif (typeof Package === 'undefined') Package = {};\n(function (pkg, symbols) {\n  for (var s in symbols)\n    (s in pkg) || (pkg[s] = symbols[s]);\n})(Package['cfs:data-man'] = {}, {\n  DataMan: DataMan\n});\n\n})();\n","servePath":"/packages/cfs_data-man.js"}]